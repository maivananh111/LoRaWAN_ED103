
LoRaWAN_ED103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff0  080222d0  080222d0  000232d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  080232c0  080232c0  000242c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08023398  08023398  00025964  2**0
                  CONTENTS
  5 .ARM          00000008  08023398  08023398  00024398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080233a0  080233a0  00025964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  080233a0  080233a0  000243a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  080233a8  080233a8  000243a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000964  20000000  080233ac  00025000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000c69c  20000968  08023d10  00025968  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000d004  08023d10  00026004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00025964  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004579b  00000000  00000000  00025994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a036  00000000  00000000  0006b12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003660  00000000  00000000  00075168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000029c8  00000000  00000000  000787c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031326  00000000  00000000  0007b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004259c  00000000  00000000  000ac4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001092be  00000000  00000000  000eea52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001f7d10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000fd0c  00000000  00000000  001f7d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00207a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000968 	.word	0x20000968
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080222b8 	.word	0x080222b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000096c 	.word	0x2000096c
 80001cc:	080222b8 	.word	0x080222b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9d3 	b.w	8000fd0 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f86b 	bl	8000d14 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f85e 	bl	8000d14 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f84d 	bl	8000d14 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f83f 	bl	8000d14 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f824 	bl	8000d14 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d14e      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d20:	4694      	mov	ip, r2
 8000d22:	458c      	cmp	ip, r1
 8000d24:	4686      	mov	lr, r0
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	d962      	bls.n	8000df2 <__udivmoddi4+0xde>
 8000d2c:	b14a      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d2e:	f1c2 0320 	rsb	r3, r2, #32
 8000d32:	4091      	lsls	r1, r2
 8000d34:	fa20 f303 	lsr.w	r3, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	4319      	orrs	r1, r3
 8000d3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f f68c 	uxth.w	r6, ip
 8000d4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb07 1114 	mls	r1, r7, r4, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb04 f106 	mul.w	r1, r4, r6
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6a:	f080 8112 	bcs.w	8000f92 <__udivmoddi4+0x27e>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 810f 	bls.w	8000f92 <__udivmoddi4+0x27e>
 8000d74:	3c02      	subs	r4, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a59      	subs	r1, r3, r1
 8000d7a:	fa1f f38e 	uxth.w	r3, lr
 8000d7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d82:	fb07 1110 	mls	r1, r7, r0, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb00 f606 	mul.w	r6, r0, r6
 8000d8e:	429e      	cmp	r6, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x94>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9a:	f080 80fc 	bcs.w	8000f96 <__udivmoddi4+0x282>
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	f240 80f9 	bls.w	8000f96 <__udivmoddi4+0x282>
 8000da4:	4463      	add	r3, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	1b9b      	subs	r3, r3, r6
 8000daa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa6>
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xba>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb4>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa6>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x150>
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xcc>
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	f0c0 80f0 	bcc.w	8000fc0 <__udivmoddi4+0x2ac>
 8000de0:	1a86      	subs	r6, r0, r2
 8000de2:	eb64 0303 	sbc.w	r3, r4, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d0e6      	beq.n	8000dba <__udivmoddi4+0xa6>
 8000dec:	e9c5 6300 	strd	r6, r3, [r5]
 8000df0:	e7e3      	b.n	8000dba <__udivmoddi4+0xa6>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x204>
 8000df8:	eba1 040c 	sub.w	r4, r1, ip
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa1f f78c 	uxth.w	r7, ip
 8000e04:	2101      	movs	r1, #1
 8000e06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb07 f006 	mul.w	r0, r7, r6
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x11c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x11a>
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000e2e:	4626      	mov	r6, r4
 8000e30:	1a1c      	subs	r4, r3, r0
 8000e32:	fa1f f38e 	uxth.w	r3, lr
 8000e36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e42:	fb00 f707 	mul.w	r7, r0, r7
 8000e46:	429f      	cmp	r7, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x148>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x146>
 8000e54:	429f      	cmp	r7, r3
 8000e56:	f200 80b0 	bhi.w	8000fba <__udivmoddi4+0x2a6>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	1bdb      	subs	r3, r3, r7
 8000e5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x9c>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e74:	fa04 f301 	lsl.w	r3, r4, r1
 8000e78:	ea43 030c 	orr.w	r3, r3, ip
 8000e7c:	40f4      	lsrs	r4, r6
 8000e7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e82:	0c38      	lsrs	r0, r7, #16
 8000e84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e88:	fbb4 fef0 	udiv	lr, r4, r0
 8000e8c:	fa1f fc87 	uxth.w	ip, r7
 8000e90:	fb00 441e 	mls	r4, r0, lr, r4
 8000e94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e98:	fb0e f90c 	mul.w	r9, lr, ip
 8000e9c:	45a1      	cmp	r9, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d90a      	bls.n	8000eba <__udivmoddi4+0x1a6>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eaa:	f080 8084 	bcs.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eae:	45a1      	cmp	r9, r4
 8000eb0:	f240 8081 	bls.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	eba4 0409 	sub.w	r4, r4, r9
 8000ebe:	fa1f f983 	uxth.w	r9, r3
 8000ec2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ec6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ece:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x1d2>
 8000ed6:	193c      	adds	r4, r7, r4
 8000ed8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000edc:	d267      	bcs.n	8000fae <__udivmoddi4+0x29a>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d965      	bls.n	8000fae <__udivmoddi4+0x29a>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eea:	fba0 9302 	umull	r9, r3, r0, r2
 8000eee:	eba4 040c 	sub.w	r4, r4, ip
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	46ce      	mov	lr, r9
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	d351      	bcc.n	8000f9e <__udivmoddi4+0x28a>
 8000efa:	d04e      	beq.n	8000f9a <__udivmoddi4+0x286>
 8000efc:	b155      	cbz	r5, 8000f14 <__udivmoddi4+0x200>
 8000efe:	ebb8 030e 	subs.w	r3, r8, lr
 8000f02:	eb64 040c 	sbc.w	r4, r4, ip
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	40cb      	lsrs	r3, r1
 8000f0c:	431e      	orrs	r6, r3
 8000f0e:	40cc      	lsrs	r4, r1
 8000f10:	e9c5 6400 	strd	r6, r4, [r5]
 8000f14:	2100      	movs	r1, #0
 8000f16:	e750      	b.n	8000dba <__udivmoddi4+0xa6>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f24:	fa24 f303 	lsr.w	r3, r4, r3
 8000f28:	4094      	lsls	r4, r2
 8000f2a:	430c      	orrs	r4, r1
 8000f2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f40:	0c23      	lsrs	r3, r4, #16
 8000f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f46:	fb00 f107 	mul.w	r1, r0, r7
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x24c>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f56:	d22c      	bcs.n	8000fb2 <__udivmoddi4+0x29e>
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	d92a      	bls.n	8000fb2 <__udivmoddi4+0x29e>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f68:	fb08 3311 	mls	r3, r8, r1, r3
 8000f6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f70:	fb01 f307 	mul.w	r3, r1, r7
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x276>
 8000f78:	eb1c 0404 	adds.w	r4, ip, r4
 8000f7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f80:	d213      	bcs.n	8000faa <__udivmoddi4+0x296>
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	d911      	bls.n	8000faa <__udivmoddi4+0x296>
 8000f86:	3902      	subs	r1, #2
 8000f88:	4464      	add	r4, ip
 8000f8a:	1ae4      	subs	r4, r4, r3
 8000f8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f90:	e739      	b.n	8000e06 <__udivmoddi4+0xf2>
 8000f92:	4604      	mov	r4, r0
 8000f94:	e6f0      	b.n	8000d78 <__udivmoddi4+0x64>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e706      	b.n	8000da8 <__udivmoddi4+0x94>
 8000f9a:	45c8      	cmp	r8, r9
 8000f9c:	d2ae      	bcs.n	8000efc <__udivmoddi4+0x1e8>
 8000f9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fa6:	3801      	subs	r0, #1
 8000fa8:	e7a8      	b.n	8000efc <__udivmoddi4+0x1e8>
 8000faa:	4631      	mov	r1, r6
 8000fac:	e7ed      	b.n	8000f8a <__udivmoddi4+0x276>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e799      	b.n	8000ee6 <__udivmoddi4+0x1d2>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e7d4      	b.n	8000f60 <__udivmoddi4+0x24c>
 8000fb6:	46d6      	mov	lr, sl
 8000fb8:	e77f      	b.n	8000eba <__udivmoddi4+0x1a6>
 8000fba:	4463      	add	r3, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e74d      	b.n	8000e5c <__udivmoddi4+0x148>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e70f      	b.n	8000de8 <__udivmoddi4+0xd4>
 8000fc8:	3e02      	subs	r6, #2
 8000fca:	4463      	add	r3, ip
 8000fcc:	e730      	b.n	8000e30 <__udivmoddi4+0x11c>
 8000fce:	bf00      	nop

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fea:	4b29      	ldr	r3, [pc, #164]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000fec:	4a29      	ldr	r2, [pc, #164]	@ (8001094 <MX_ADC1_Init+0xc0>)
 8000fee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffc:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001002:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001008:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800100a:	2204      	movs	r2, #4
 800100c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001010:	2200      	movs	r2, #0
 8001012:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001016:	2200      	movs	r2, #0
 8001018:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800101a:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800101c:	2201      	movs	r2, #1
 800101e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001020:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104a:	4811      	ldr	r0, [pc, #68]	@ (8001090 <MX_ADC1_Init+0xbc>)
 800104c:	f001 fabc 	bl	80025c8 <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001056:	f000 fbcd 	bl	80017f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_ADC1_Init+0xc4>)
 800105c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105e:	2306      	movs	r3, #6
 8001060:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001066:	237f      	movs	r3, #127	@ 0x7f
 8001068:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800106a:	2304      	movs	r3, #4
 800106c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0xbc>)
 8001078:	f001 fe42 	bl	8002d00 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001082:	f000 fbb7 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000984 	.word	0x20000984
 8001094:	50040000 	.word	0x50040000
 8001098:	19200040 	.word	0x19200040

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0a0      	sub	sp, #128	@ 0x80
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	225c      	movs	r2, #92	@ 0x5c
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f01a fd47 	bl	801bb50 <memset>
  if(adcHandle->Instance==ADC1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001140 <HAL_ADC_MspInit+0xa4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d134      	bne.n	8001136 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010d2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80010d6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fe7b 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80010e8:	f000 fb84 	bl	80017f4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_ADC_MspInit+0xa8>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	4a14      	ldr	r2, [pc, #80]	@ (8001144 <HAL_ADC_MspInit+0xa8>)
 80010f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_ADC_MspInit+0xa8>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_ADC_MspInit+0xa8>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001108:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <HAL_ADC_MspInit+0xa8>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_ADC_MspInit+0xa8>)
 8001112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC_BATT_Pin;
 800111c:	2302      	movs	r3, #2
 800111e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001120:	230b      	movs	r3, #11
 8001122:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(ADC_BATT_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001132:	f002 fcd7 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3780      	adds	r7, #128	@ 0x80
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	50040000 	.word	0x50040000
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_ADC_MspDeInit+0x30>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d10a      	bne.n	8001170 <HAL_ADC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <HAL_ADC_MspDeInit+0x34>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a07      	ldr	r2, [pc, #28]	@ (800117c <HAL_ADC_MspDeInit+0x34>)
 8001160:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    HAL_GPIO_DeInit(ADC_BATT_GPIO_Port, ADC_BATT_Pin);
 8001166:	2102      	movs	r1, #2
 8001168:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116c:	f002 fe34 	bl	8003dd8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	50040000 	.word	0x50040000
 800117c:	40021000 	.word	0x40021000

08001180 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <SYS_InitMeasurement+0x14>)
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <SYS_InitMeasurement+0x18>)
 8001188:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000984 	.word	0x20000984
 8001198:	50040000 	.word	0x50040000

0800119c <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80011aa:	f000 f867 	bl	800127c <SYS_GetBatteryLevel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80011b2:	482c      	ldr	r0, [pc, #176]	@ (8001264 <SYS_GetTemperatureLevel+0xc8>)
 80011b4:	f000 f870 	bl	8001298 <ADC_ReadChannels>
 80011b8:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80011ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <SYS_GetTemperatureLevel+0xcc>)
 80011bc:	881a      	ldrh	r2, [r3, #0]
 80011be:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <SYS_GetTemperatureLevel+0xd0>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d025      	beq.n	8001212 <SYS_GetTemperatureLevel+0x76>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80011c6:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <SYS_GetTemperatureLevel+0xcc>)
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <SYS_GetTemperatureLevel+0xd0>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d01b      	beq.n	800120a <SYS_GetTemperatureLevel+0x6e>
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	fb02 f303 	mul.w	r3, r2, r3
 80011da:	4a25      	ldr	r2, [pc, #148]	@ (8001270 <SYS_GetTemperatureLevel+0xd4>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <SYS_GetTemperatureLevel+0xd0>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2264      	movs	r2, #100	@ 0x64
 80011ec:	fb03 f202 	mul.w	r2, r3, r2
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <SYS_GetTemperatureLevel+0xcc>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <SYS_GetTemperatureLevel+0xd0>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	1acb      	subs	r3, r1, r3
 80011fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001200:	b29b      	uxth	r3, r3
 8001202:	331e      	adds	r3, #30
 8001204:	b29b      	uxth	r3, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	e001      	b.n	800120e <SYS_GetTemperatureLevel+0x72>
 800120a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800120e:	803b      	strh	r3, [r7, #0]
 8001210:	e01d      	b.n	800124e <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	fb03 f202 	mul.w	r2, r3, r2
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <SYS_GetTemperatureLevel+0xd8>)
 800121c:	fba3 1302 	umull	r1, r3, r3, r2
 8001220:	1ad2      	subs	r2, r2, r3
 8001222:	0852      	lsrs	r2, r2, #1
 8001224:	4413      	add	r3, r2
 8001226:	0adb      	lsrs	r3, r3, #11
 8001228:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8001234:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8001238:	4a0f      	ldr	r2, [pc, #60]	@ (8001278 <SYS_GetTemperatureLevel+0xdc>)
 800123a:	fb82 1203 	smull	r1, r2, r2, r3
 800123e:	1292      	asrs	r2, r2, #10
 8001240:	17db      	asrs	r3, r3, #31
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b29b      	uxth	r3, r3
 8001246:	331e      	adds	r3, #30
 8001248:	b29b      	uxth	r3, r3
 800124a:	b21b      	sxth	r3, r3
 800124c:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 800124e:	883b      	ldrh	r3, [r7, #0]
 8001250:	b21b      	sxth	r3, r3
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21b      	sxth	r3, r3
 8001256:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8001258:	883b      	ldrh	r3, [r7, #0]
 800125a:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	c7520000 	.word	0xc7520000
 8001268:	1fff75ca 	.word	0x1fff75ca
 800126c:	1fff75a8 	.word	0x1fff75a8
 8001270:	057619f1 	.word	0x057619f1
 8001274:	00100101 	.word	0x00100101
 8001278:	68db8bad 	.word	0x68db8bad

0800127c <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 3700;
 8001282:	f640 6374 	movw	r3, #3700	@ 0xe74
 8001286:	80fb      	strh	r3, [r7, #6]
//         use generic parameters */
//      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
//    }
//  }

  return batteryLevelmV;
 8001288:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]

  MX_ADC1_Init();
 80012b6:	f7ff fe8d 	bl	8000fd4 <MX_ADC1_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80012ba:	217f      	movs	r1, #127	@ 0x7f
 80012bc:	481a      	ldr	r0, [pc, #104]	@ (8001328 <ADC_ReadChannels+0x90>)
 80012be:	f002 facf 	bl	8003860 <HAL_ADCEx_Calibration_Start>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <ADC_ReadChannels+0x34>
  {
    Error_Handler();
 80012c8:	f000 fa94 	bl	80017f4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d0:	2306      	movs	r3, #6
 80012d2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80012d4:	2302      	movs	r3, #2
 80012d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4812      	ldr	r0, [pc, #72]	@ (8001328 <ADC_ReadChannels+0x90>)
 80012e0:	f001 fd0e 	bl	8002d00 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <ADC_ReadChannels+0x56>
  {
    Error_Handler();
 80012ea:	f000 fa83 	bl	80017f4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80012ee:	480e      	ldr	r0, [pc, #56]	@ (8001328 <ADC_ReadChannels+0x90>)
 80012f0:	f001 fbd4 	bl	8002a9c <HAL_ADC_Start>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
 80012fa:	f000 fa7b 	bl	80017f4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012fe:	f04f 31ff 	mov.w	r1, #4294967295
 8001302:	4809      	ldr	r0, [pc, #36]	@ (8001328 <ADC_ReadChannels+0x90>)
 8001304:	f001 fc60 	bl	8002bc8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1);   /* it calls also ADC_Disable() */
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <ADC_ReadChannels+0x90>)
 800130a:	f001 fc2a 	bl	8002b62 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 800130e:	4806      	ldr	r0, [pc, #24]	@ (8001328 <ADC_ReadChannels+0x90>)
 8001310:	f001 fce9 	bl	8002ce6 <HAL_ADC_GetValue>
 8001314:	6278      	str	r0, [r7, #36]	@ 0x24

  HAL_ADC_DeInit(&hadc1);
 8001316:	4804      	ldr	r0, [pc, #16]	@ (8001328 <ADC_ReadChannels+0x90>)
 8001318:	f001 fa98 	bl	800284c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800131e:	4618      	mov	r0, r3
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000984 	.word	0x20000984

0800132c <app_main>:
//static const char *TAG = "LORAWAN";




void app_main(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	Radio_HardWare_Init();
 8001330:	f017 fdfc 	bl	8018f2c <Radio_HardWare_Init>
	MX_LoRaWAN_Init();
 8001334:	f006 fd03 	bl	8007d3e <MX_LoRaWAN_Init>

	while (1) {


		vTaskDelay(1000);
 8001338:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800133c:	f008 fa3a 	bl	80097b4 <vTaskDelay>
 8001340:	e7fa      	b.n	8001338 <app_main+0xc>
	...

08001344 <HAL_GPIO_EXTI_Callback>:





void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LORA_INT_Pin) {
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	2b08      	cmp	r3, #8
 8001352:	d101      	bne.n	8001358 <HAL_GPIO_EXTI_Callback+0x14>
		RadioOnDioIrq();
 8001354:	f017 fbc0 	bl	8018ad8 <RadioOnDioIrq>
	}
	if (GPIO_Pin == BTN_WAKE_Pin) {
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800135e:	d110      	bne.n	8001382 <HAL_GPIO_EXTI_Callback+0x3e>
		for (uint32_t i = 0; i < 120000; i++)
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e003      	b.n	800136e <HAL_GPIO_EXTI_Callback+0x2a>
			__NOP(); //10ms
 8001366:	bf00      	nop
		for (uint32_t i = 0; i < 120000; i++)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3301      	adds	r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4a06      	ldr	r2, [pc, #24]	@ (800138c <HAL_GPIO_EXTI_Callback+0x48>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d9f7      	bls.n	8001366 <HAL_GPIO_EXTI_Callback+0x22>
		if (HAL_GPIO_ReadPin(BTN_WAKE_GPIO_Port, BTN_WAKE_Pin)
 8001376:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800137a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137e:	f002 fe05 	bl	8003f8c <HAL_GPIO_ReadPin>
				== GPIO_PIN_RESET) {

		}
	}
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0001d4bf 	.word	0x0001d4bf

08001390 <main_task>:


void SystemClock_Config(void);


static void main_task(void *arg){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	extern void app_main(void);
	app_main();
 8001398:	f7ff ffc8 	bl	800132c <app_main>
	vTaskDelete(NULL);
 800139c:	2000      	movs	r0, #0
 800139e:	f008 f995 	bl	80096cc <vTaskDelete>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <log_port_flush_string>:

void log_port_flush_string(char *string, uint16_t length){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, length, 1000);
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4803      	ldr	r0, [pc, #12]	@ (80013d0 <log_port_flush_string+0x24>)
 80013c2:	f005 ffbd 	bl	8007340 <HAL_UART_Transmit>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000acc 	.word	0x20000acc

080013d4 <log_port_get_systime>:

uint32_t log_port_get_systime(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	return (uint32_t)HAL_GetTick();
 80013d8:	f000 fce0 	bl	8001d9c <HAL_GetTick>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_write>:

int _write(int file, char *ptr, int len) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	(void) file;

	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	4807      	ldr	r0, [pc, #28]	@ (8001418 <_write+0x34>)
 80013fc:	f005 ffa0 	bl	8007340 <HAL_UART_Transmit>
	fflush(stdout);
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <_write+0x38>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	4618      	mov	r0, r3
 8001408:	f01a fa40 	bl	801b88c <fflush>

	return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000acc 	.word	0x20000acc
 800141c:	20000674 	.word	0x20000674

08001420 <sys_main>:


void sys_main(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af02      	add	r7, sp, #8
	HAL_Init();
 8001426:	f000 fe8c 	bl	8002142 <HAL_Init>
	SystemClock_Config();
 800142a:	f000 f97b 	bl	8001724 <SystemClock_Config>
	MX_GPIO_Init();
 800142e:	f000 f875 	bl	800151c <MX_GPIO_Init>
	MX_RTC_Init();
 8001432:	f000 f9e5 	bl	8001800 <MX_RTC_Init>
	MX_ADC1_Init();
 8001436:	f7ff fdcd 	bl	8000fd4 <MX_ADC1_Init>
	MX_SPI1_Init();
 800143a:	f000 faa9 	bl	8001990 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800143e:	f000 fdcf 	bl	8001fe0 <MX_USART1_UART_Init>

	LOGI("STARTUP", "App startup.");
 8001442:	4a0f      	ldr	r2, [pc, #60]	@ (8001480 <sys_main+0x60>)
 8001444:	2100      	movs	r1, #0
 8001446:	480f      	ldr	r0, [pc, #60]	@ (8001484 <sys_main+0x64>)
 8001448:	f018 ff88 	bl	801a35c <LOG_LEVEL_INFO>

	osKernelInitialize();
 800144c:	f006 fec6 	bl	80081dc <osKernelInitialize>
	if (xTaskCreate(main_task, "main_task", 1024, NULL, 1, NULL) != pdTRUE)
 8001450:	2300      	movs	r3, #0
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2301      	movs	r3, #1
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800145e:	490a      	ldr	r1, [pc, #40]	@ (8001488 <sys_main+0x68>)
 8001460:	480a      	ldr	r0, [pc, #40]	@ (800148c <sys_main+0x6c>)
 8001462:	f007 ffe9 	bl	8009438 <xTaskCreate>
 8001466:	4603      	mov	r3, r0
 8001468:	2b01      	cmp	r3, #1
 800146a:	d004      	beq.n	8001476 <sys_main+0x56>
		LOGI("STARTUP", "sys_main task startup fail");
 800146c:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <sys_main+0x70>)
 800146e:	2100      	movs	r1, #0
 8001470:	4804      	ldr	r0, [pc, #16]	@ (8001484 <sys_main+0x64>)
 8001472:	f018 ff73 	bl	801a35c <LOG_LEVEL_INFO>
	osKernelStart();
 8001476:	f006 fed5 	bl	8008224 <osKernelStart>
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	080222d0 	.word	0x080222d0
 8001484:	080222e0 	.word	0x080222e0
 8001488:	080222e8 	.word	0x080222e8
 800148c:	08001391 	.word	0x08001391
 8001490:	080222f4 	.word	0x080222f4

08001494 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	LOGE("RTOS", "Stack overflow at %s", pcTaskName);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <vApplicationStackOverflowHook+0x20>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <vApplicationStackOverflowHook+0x24>)
 80014b6:	f018 ff11 	bl	801a2dc <LOG_LEVEL_ERROR>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	0802231c 	.word	0x0802231c
 80014c8:	08022334 	.word	0x08022334

080014cc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	LOGE("RTOS", "Malloc failed");
 80014d0:	4a03      	ldr	r2, [pc, #12]	@ (80014e0 <vApplicationMallocFailedHook+0x14>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <vApplicationMallocFailedHook+0x18>)
 80014d6:	f018 ff01 	bl	801a2dc <LOG_LEVEL_ERROR>
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	0802233c 	.word	0x0802233c
 80014e4:	08022334 	.word	0x08022334

080014e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <MX_FREERTOS_Init+0x18>)
 80014ee:	2100      	movs	r1, #0
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <MX_FREERTOS_Init+0x1c>)
 80014f2:	f006 febd 	bl	8008270 <osThreadNew>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a03      	ldr	r2, [pc, #12]	@ (8001508 <MX_FREERTOS_Init+0x20>)
 80014fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	08022830 	.word	0x08022830
 8001504:	0800150d 	.word	0x0800150d
 8001508:	200009e8 	.word	0x200009e8

0800150c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f006 ff3d 	bl	8008394 <osDelay>
 800151a:	e7fb      	b.n	8001514 <StartDefaultTask+0x8>

0800151c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b6b      	ldr	r3, [pc, #428]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a6a      	ldr	r2, [pc, #424]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b68      	ldr	r3, [pc, #416]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	4b65      	ldr	r3, [pc, #404]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a64      	ldr	r2, [pc, #400]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b62      	ldr	r3, [pc, #392]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b5f      	ldr	r3, [pc, #380]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a5e      	ldr	r2, [pc, #376]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b5c      	ldr	r3, [pc, #368]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b59      	ldr	r3, [pc, #356]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a58      	ldr	r2, [pc, #352]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b56      	ldr	r3, [pc, #344]	@ (80016e0 <MX_GPIO_Init+0x1c4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_CS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159c:	f002 fd0e 	bl	8003fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INB_Pin|INA_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80015a6:	484f      	ldr	r0, [pc, #316]	@ (80016e4 <MX_GPIO_Init+0x1c8>)
 80015a8:	f002 fd08 	bl	8003fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(P12V_EN_GPIO_Port, P12V_EN_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f002 fd01 	bl	8003fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c0:	2303      	movs	r3, #3
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4846      	ldr	r0, [pc, #280]	@ (80016e8 <MX_GPIO_Init+0x1cc>)
 80015d0:	f002 fa88 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80015d4:	230b      	movs	r3, #11
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	2303      	movs	r3, #3
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4841      	ldr	r0, [pc, #260]	@ (80016ec <MX_GPIO_Init+0x1d0>)
 80015e8:	f002 fa7c 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15;
 80015ec:	f249 0305 	movw	r3, #36869	@ 0x9005
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001604:	f002 fa6e 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8001608:	2308      	movs	r3, #8
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800160c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f002 fa60 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|LORA_RST_Pin|P12V_EN_Pin;
 8001624:	f44f 63a2 	mov.w	r3, #1296	@ 0x510
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001640:	f002 fa50 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8001644:	f64f 133f 	movw	r3, #63807	@ 0xf93f
 8001648:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4822      	ldr	r0, [pc, #136]	@ (80016e4 <MX_GPIO_Init+0x1c8>)
 800165a:	f002 fa43 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INB_Pin|INA_Pin;
 800165e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	481b      	ldr	r0, [pc, #108]	@ (80016e4 <MX_GPIO_Init+0x1c8>)
 8001678:	f002 fa34 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 800167c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f002 fa26 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_WAKE_Pin;
 8001698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_WAKE_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b2:	f002 fa17 	bl	8003ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2105      	movs	r1, #5
 80016ba:	2009      	movs	r0, #9
 80016bc:	f002 f9e8 	bl	8003a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016c0:	2009      	movs	r0, #9
 80016c2:	f002 fa01 	bl	8003ac8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	2028      	movs	r0, #40	@ 0x28
 80016cc:	f002 f9e0 	bl	8003a90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016d0:	2028      	movs	r0, #40	@ 0x28
 80016d2:	f002 f9f9 	bl	8003ac8 <HAL_NVIC_EnableIRQ>

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	@ 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48001c00 	.word	0x48001c00

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f000 fd25 	bl	8002142 <HAL_Init>

  /* USER CODE BEGIN Init */
  extern void sys_main(void);
  sys_main();
 80016f8:	f7ff fe92 	bl	8001420 <sys_main>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fc:	f000 f812 	bl	8001724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f7ff ff0c 	bl	800151c <MX_GPIO_Init>
  MX_RTC_Init();
 8001704:	f000 f87c 	bl	8001800 <MX_RTC_Init>
  MX_ADC1_Init();
 8001708:	f7ff fc64 	bl	8000fd4 <MX_ADC1_Init>
  MX_SPI1_Init();
 800170c:	f000 f940 	bl	8001990 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001710:	f000 fc66 	bl	8001fe0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001714:	f006 fd62 	bl	80081dc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001718:	f7ff fee6 	bl	80014e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800171c:	f006 fd82 	bl	8008224 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <main+0x30>

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b096      	sub	sp, #88	@ 0x58
 8001728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2244      	movs	r2, #68	@ 0x44
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f01a fa0c 	bl	801bb50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001746:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800174a:	f002 fc85 	bl	8004058 <HAL_PWREx_ControlVoltageScaling>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001754:	f000 f84e 	bl	80017f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001758:	f002 fc60 	bl	800401c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <SystemClock_Config+0xa8>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001762:	4a1a      	ldr	r2, [pc, #104]	@ (80017cc <SystemClock_Config+0xa8>)
 8001764:	f023 0318 	bic.w	r3, r3, #24
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800176c:	2314      	movs	r3, #20
 800176e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001774:	2301      	movs	r3, #1
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800177c:	23b0      	movs	r3, #176	@ 0xb0
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fcbb 	bl	8004104 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001794:	f000 f82e 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	2102      	movs	r1, #2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 f8bb 	bl	800492c <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80017bc:	f000 f81a 	bl	80017f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80017c0:	f003 fd22 	bl	8005208 <HAL_RCCEx_EnableMSIPLLMode>
}
 80017c4:	bf00      	nop
 80017c6:	3758      	adds	r7, #88	@ 0x58
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017e2:	f000 fcc7 	bl	8002174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40012c00 	.word	0x40012c00

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <Error_Handler+0x8>

08001800 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b092      	sub	sp, #72	@ 0x48
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001806:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001816:	2300      	movs	r3, #0
 8001818:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	222c      	movs	r2, #44	@ 0x2c
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f01a f995 	bl	801bb50 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001826:	4b3c      	ldr	r3, [pc, #240]	@ (8001918 <MX_RTC_Init+0x118>)
 8001828:	4a3c      	ldr	r2, [pc, #240]	@ (800191c <MX_RTC_Init+0x11c>)
 800182a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800182c:	4b3a      	ldr	r3, [pc, #232]	@ (8001918 <MX_RTC_Init+0x118>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 8001832:	4b39      	ldr	r3, [pc, #228]	@ (8001918 <MX_RTC_Init+0x118>)
 8001834:	2220      	movs	r2, #32
 8001836:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 8001838:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <MX_RTC_Init+0x118>)
 800183a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800183e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001840:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <MX_RTC_Init+0x118>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001846:	4b34      	ldr	r3, [pc, #208]	@ (8001918 <MX_RTC_Init+0x118>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800184c:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <MX_RTC_Init+0x118>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <MX_RTC_Init+0x118>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001858:	482f      	ldr	r0, [pc, #188]	@ (8001918 <MX_RTC_Init+0x118>)
 800185a:	f003 fdd7 	bl	800540c <HAL_RTC_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001864:	f7ff ffc6 	bl	80017f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800187a:	2300      	movs	r3, #0
 800187c:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001882:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	4823      	ldr	r0, [pc, #140]	@ (8001918 <MX_RTC_Init+0x118>)
 800188c:	f003 fe46 	bl	800551c <HAL_RTC_SetTime>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001896:	f7ff ffad 	bl	80017f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80018a0:	2301      	movs	r3, #1
 80018a2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80018b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018b6:	2200      	movs	r2, #0
 80018b8:	4619      	mov	r1, r3
 80018ba:	4817      	ldr	r0, [pc, #92]	@ (8001918 <MX_RTC_Init+0x118>)
 80018bc:	f003 ff27 	bl	800570e <HAL_RTC_SetDate>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_RTC_Init+0xca>
  {
    Error_Handler();
 80018c6:	f7ff ff95 	bl	80017f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80018f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_RTC_Init+0x118>)
 8001902:	f003 ffd9 	bl	80058b8 <HAL_RTC_SetAlarm_IT>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 800190c:	f7ff ff72 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3748      	adds	r7, #72	@ 0x48
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200009ec 	.word	0x200009ec
 800191c:	40002800 	.word	0x40002800

08001920 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09a      	sub	sp, #104	@ 0x68
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	225c      	movs	r2, #92	@ 0x5c
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f01a f90d 	bl	801bb50 <memset>
  if(rtcHandle->Instance==RTC)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a13      	ldr	r2, [pc, #76]	@ (8001988 <HAL_RTC_MspInit+0x68>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d11f      	bne.n	8001980 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001940:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001944:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001946:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800194a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fa41 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800195c:	f7ff ff4a 	bl	80017f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001960:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_RTC_MspInit+0x6c>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001966:	4a09      	ldr	r2, [pc, #36]	@ (800198c <HAL_RTC_MspInit+0x6c>)
 8001968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2105      	movs	r1, #5
 8001974:	2029      	movs	r0, #41	@ 0x29
 8001976:	f002 f88b 	bl	8003a90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800197a:	2029      	movs	r0, #41	@ 0x29
 800197c:	f002 f8a4 	bl	8003ac8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001980:	bf00      	nop
 8001982:	3768      	adds	r7, #104	@ 0x68
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40002800 	.word	0x40002800
 800198c:	40021000 	.word	0x40021000

08001990 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001994:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <MX_SPI1_Init+0x74>)
 8001996:	4a1c      	ldr	r2, [pc, #112]	@ (8001a08 <MX_SPI1_Init+0x78>)
 8001998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a04 <MX_SPI1_Init+0x74>)
 800199c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b6:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019c6:	2208      	movs	r2, #8
 80019c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019dc:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019de:	2207      	movs	r2, #7
 80019e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019ea:	2208      	movs	r2, #8
 80019ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <MX_SPI1_Init+0x74>)
 80019f0:	f004 fab7 	bl	8005f62 <HAL_SPI_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019fa:	f7ff fefb 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000a10 	.word	0x20000a10
 8001a08:	40013000 	.word	0x40013000

08001a0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	@ 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <HAL_SPI_MspInit+0x7c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d128      	bne.n	8001a80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2e:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <HAL_SPI_MspInit+0x80>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a32:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <HAL_SPI_MspInit+0x80>)
 8001a34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_SPI_MspInit+0x80>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_SPI_MspInit+0x80>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_SPI_MspInit+0x80>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <HAL_SPI_MspInit+0x80>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a5e:	23e0      	movs	r3, #224	@ 0xe0
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7c:	f002 f832 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	@ 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40013000 	.word	0x40013000
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_MspInit+0x4c>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <HAL_MspInit+0x4c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_MspInit+0x4c>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0b      	ldr	r3, [pc, #44]	@ (8001adc <HAL_MspInit+0x4c>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <HAL_MspInit+0x4c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	210f      	movs	r1, #15
 8001aca:	f06f 0001 	mvn.w	r0, #1
 8001ace:	f001 ffdf 	bl	8003a90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001aee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <HAL_InitTick+0xc8>)
 8001af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af2:	4a2d      	ldr	r2, [pc, #180]	@ (8001ba8 <HAL_InitTick+0xc8>)
 8001af4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001af8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <HAL_InitTick+0xc8>)
 8001afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b06:	f107 020c 	add.w	r2, r7, #12
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f003 f8cf 	bl	8004cb4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b16:	f003 f8b7 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 8001b1a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b1e:	4a23      	ldr	r2, [pc, #140]	@ (8001bac <HAL_InitTick+0xcc>)
 8001b20:	fba2 2303 	umull	r2, r3, r2, r3
 8001b24:	0c9b      	lsrs	r3, r3, #18
 8001b26:	3b01      	subs	r3, #1
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b2c:	4a21      	ldr	r2, [pc, #132]	@ (8001bb4 <HAL_InitTick+0xd4>)
 8001b2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b30:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b36:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b38:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b50:	4817      	ldr	r0, [pc, #92]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b52:	f005 f933 	bl	8006dbc <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d11b      	bne.n	8001b9c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b64:	4812      	ldr	r0, [pc, #72]	@ (8001bb0 <HAL_InitTick+0xd0>)
 8001b66:	f005 f98b 	bl	8006e80 <HAL_TIM_Base_Start_IT>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d111      	bne.n	8001b9c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b78:	2019      	movs	r0, #25
 8001b7a:	f001 ffa5 	bl	8003ac8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d808      	bhi.n	8001b96 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001b84:	2200      	movs	r2, #0
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	2019      	movs	r0, #25
 8001b8a:	f001 ff81 	bl	8003a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <HAL_InitTick+0xd8>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e002      	b.n	8001b9c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3730      	adds	r7, #48	@ 0x30
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	431bde83 	.word	0x431bde83
 8001bb0:	20000a74 	.word	0x20000a74
 8001bb4:	40012c00 	.word	0x40012c00
 8001bb8:	20000008 	.word	0x20000008

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8001bf6:	2008      	movs	r0, #8
 8001bf8:	f002 f9f8 	bl	8003fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c06:	f005 f98f 	bl	8006f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000a74 	.word	0x20000a74

08001c14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_WAKE_Pin);
 8001c18:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c1c:	f002 f9e6 	bl	8003fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c28:	4802      	ldr	r0, [pc, #8]	@ (8001c34 <RTC_Alarm_IRQHandler+0x10>)
 8001c2a:	f004 f815 	bl	8005c58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200009ec 	.word	0x200009ec

08001c38 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <SystemApp_Init+0x30>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <SystemApp_Init+0x30>)
 8001c42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001c46:	6093      	str	r3, [r2, #8]

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001c48:	f018 fd4e 	bl	801a6e8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <SystemApp_Init+0x34>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <SystemApp_Init+0x38>)
 8001c54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c58:	611a      	str	r2, [r3, #16]

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001c5a:	f7ff fa91 	bl	8001180 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001c5e:	f000 f8f7 	bl	8001e50 <EnvSensors_Init>

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	20000ac0 	.word	0x20000ac0
 8001c70:	40022000 	.word	0x40022000

08001c74 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001c7e:	f7ff fafd 	bl	800127c <SYS_GetBatteryLevel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001c8c:	d902      	bls.n	8001c94 <GetBatteryLevel+0x20>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001c8e:	23fe      	movs	r3, #254	@ 0xfe
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	e014      	b.n	8001cbe <GetBatteryLevel+0x4a>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8001c9a:	d202      	bcs.n	8001ca2 <GetBatteryLevel+0x2e>
  {
    batteryLevel = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	e00d      	b.n	8001cbe <GetBatteryLevel+0x4a>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ca2:	88ba      	ldrh	r2, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	01db      	lsls	r3, r3, #7
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	f5a3 232d 	sub.w	r3, r3, #708608	@ 0xad000
 8001cb0:	f5a3 6322 	sub.w	r3, r3, #2592	@ 0xa20
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <GetBatteryLevel+0x54>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	09db      	lsrs	r3, r3, #7
 8001cbc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	1b4e81b5 	.word	0x1b4e81b5

08001ccc <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f885 	bl	8001de8 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce6:	ee17 3a90 	vmov	r3, s15
 8001cea:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001cec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */

    uint32_t UID_L = *(__IO uint32_t *)UID_BASE;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	@ (8001d74 <GetUniqueId+0x7c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
    uint32_t UID_H = *(__IO uint32_t *)(UID_BASE + 4UL);
 8001d06:	4b1c      	ldr	r3, [pc, #112]	@ (8001d78 <GetUniqueId+0x80>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60bb      	str	r3, [r7, #8]

    id[7] = (UID_H >> 24) & 0xFF;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	0e1a      	lsrs	r2, r3, #24
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3307      	adds	r3, #7
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	701a      	strb	r2, [r3, #0]
    id[6] = (UID_H >> 16) & 0xFF;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0c1a      	lsrs	r2, r3, #16
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3306      	adds	r3, #6
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]
    id[5] = (UID_H >> 8) & 0xFF;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	0a1a      	lsrs	r2, r3, #8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3305      	adds	r3, #5
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
    id[4] = (UID_H >> 0) & 0xFF;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]
    id[3] = (UID_L >> 24) & 0xFF;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	0e1a      	lsrs	r2, r3, #24
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3303      	adds	r3, #3
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]
    id[2] = (UID_L >> 16) & 0xFF;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0c1a      	lsrs	r2, r3, #16
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]
    id[1] = (UID_L >> 8) & 0xFF;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	0a1a      	lsrs	r2, r3, #8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
    id[0] = (UID_L >> 0) & 0xFF;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	1fff7590 	.word	0x1fff7590
 8001d78:	1fff7594 	.word	0x1fff7594

08001d7c <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
//  {
//    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
//  }

  /* USER CODE BEGIN GetDevAddr_2 */
	*devAddr = *(__IO uint32_t *)UID_BASE;
 8001d84:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <GetDevAddr+0x1c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	601a      	str	r2, [r3, #0]
  /* USER CODE END GetDevAddr_2 */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	1fff7590 	.word	0x1fff7590

08001d9c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <HAL_GetTick+0x28>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_GetTick+0x1e>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001dae:	f019 f941 	bl	801b034 <TIMER_IF_GetTimerValue>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4613      	mov	r3, r2
 8001db8:	607b      	str	r3, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001dba:	687b      	ldr	r3, [r7, #4]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000ac0 	.word	0x20000ac0

08001dc8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f019 f978 	bl	801b0d0 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <EnvSensors_Read+0x54>)
 8001df2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <EnvSensors_Read+0x58>)
 8001df6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <EnvSensors_Read+0x5c>)
 8001dfa:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001dfc:	f7ff f9ce 	bl	800119c <SYS_GetTemperatureLevel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	121b      	asrs	r3, r3, #8
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e0e:	edc7 7a04 	vstr	s15, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a08      	ldr	r2, [pc, #32]	@ (8001e48 <EnvSensors_Read+0x60>)
 8001e28:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	@ (8001e4c <EnvSensors_Read+0x64>)
 8001e2e:	611a      	str	r2, [r3, #16]

  return 0;
 8001e30:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	42480000 	.word	0x42480000
 8001e40:	41900000 	.word	0x41900000
 8001e44:	447a0000 	.word	0x447a0000
 8001e48:	003e090d 	.word	0x003e090d
 8001e4c:	000503ab 	.word	0x000503ab

08001e50 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_kill>:

int _kill(int pid, int sig)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e82:	f01a fcd3 	bl	801c82c <__errno>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2216      	movs	r2, #22
 8001e8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_exit>:

void _exit (int status)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ffe7 	bl	8001e78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001eaa:	bf00      	nop
 8001eac:	e7fd      	b.n	8001eaa <_exit+0x12>

08001eae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e00a      	b.n	8001ed6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ec0:	f3af 8000 	nop.w
 8001ec4:	4601      	mov	r1, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	60ba      	str	r2, [r7, #8]
 8001ecc:	b2ca      	uxtb	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	dbf0      	blt.n	8001ec0 <_read+0x12>
  }

  return len;
 8001ede:	687b      	ldr	r3, [r7, #4]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f10:	605a      	str	r2, [r3, #4]
  return 0;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_isatty>:

int _isatty(int file)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f01a fc54 	bl	801c82c <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20010000 	.word	0x20010000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	20000ac8 	.word	0x20000ac8
 8001fb8:	2000d008 	.word	0x2000d008

08001fbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <SystemInit+0x20>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <SystemInit+0x20>)
 8001fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fe4:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8001fe6:	4a15      	ldr	r2, [pc, #84]	@ (800203c <MX_USART1_UART_Init+0x5c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002022:	4805      	ldr	r0, [pc, #20]	@ (8002038 <MX_USART1_UART_Init+0x58>)
 8002024:	f005 f93e 	bl	80072a4 <HAL_UART_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800202e:	f7ff fbe1 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000acc 	.word	0x20000acc
 800203c:	40013800 	.word	0x40013800

08002040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0a0      	sub	sp, #128	@ 0x80
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	225c      	movs	r2, #92	@ 0x5c
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f019 fd75 	bl	801bb50 <memset>
  if(uartHandle->Instance==USART1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1e      	ldr	r2, [pc, #120]	@ (80020e4 <HAL_UART_MspInit+0xa4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d135      	bne.n	80020dc <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002074:	2300      	movs	r3, #0
 8002076:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	4618      	mov	r0, r3
 800207e:	f002 feab 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002088:	f7ff fbb4 	bl	80017f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_UART_MspInit+0xa8>)
 800208e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002090:	4a15      	ldr	r2, [pc, #84]	@ (80020e8 <HAL_UART_MspInit+0xa8>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002096:	6613      	str	r3, [r2, #96]	@ 0x60
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <HAL_UART_MspInit+0xa8>)
 800209a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_UART_MspInit+0xa8>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <HAL_UART_MspInit+0xa8>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <HAL_UART_MspInit+0xa8>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020bc:	23c0      	movs	r3, #192	@ 0xc0
 80020be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020cc:	2307      	movs	r3, #7
 80020ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020d4:	4619      	mov	r1, r3
 80020d6:	4805      	ldr	r0, [pc, #20]	@ (80020ec <HAL_UART_MspInit+0xac>)
 80020d8:	f001 fd04 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020dc:	bf00      	nop
 80020de:	3780      	adds	r7, #128	@ 0x80
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40013800 	.word	0x40013800
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000400 	.word	0x48000400

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff ff62 	bl	8001fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	@ (800212c <LoopForever+0x6>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	@ (8002130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <LoopForever+0xe>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	@ (800213c <LoopForever+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f01a fb8b 	bl	801c838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7ff fae5 	bl	80016f0 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002128:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	20000964 	.word	0x20000964
  ldr r2, =_sidata
 8002134:	080233ac 	.word	0x080233ac
  ldr r2, =_sbss
 8002138:	20000968 	.word	0x20000968
  ldr r4, =_ebss
 800213c:	2000d004 	.word	0x2000d004

08002140 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC1_IRQHandler>

08002142 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f001 fc94 	bl	8003a7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002152:	200f      	movs	r0, #15
 8002154:	f7ff fcc4 	bl	8001ae0 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	71fb      	strb	r3, [r7, #7]
 8002162:	e001      	b.n	8002168 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002164:	f7ff fc94 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002168:	79fb      	ldrb	r3, [r7, #7]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000000c 	.word	0x2000000c
 8002198:	20000b54 	.word	0x20000b54

0800219c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3360      	adds	r3, #96	@ 0x60
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <LL_ADC_SetOffset+0x44>)
 8002226:	4013      	ands	r3, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	4313      	orrs	r3, r2
 8002234:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	03fff000 	.word	0x03fff000

0800224c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3360      	adds	r3, #96	@ 0x60
 800225a:	461a      	mov	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3360      	adds	r3, #96	@ 0x60
 8002288:	461a      	mov	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3330      	adds	r3, #48	@ 0x30
 80022e4:	461a      	mov	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	4413      	add	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	211f      	movs	r1, #31
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0e9b      	lsrs	r3, r3, #26
 800230c:	f003 011f 	and.w	r1, r3, #31
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3314      	adds	r3, #20
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	0e5b      	lsrs	r3, r3, #25
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	4413      	add	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	0d1b      	lsrs	r3, r3, #20
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2107      	movs	r1, #7
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	401a      	ands	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	0d1b      	lsrs	r3, r3, #20
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	fa01 f303 	lsl.w	r3, r1, r3
 8002370:	431a      	orrs	r2, r3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0318 	and.w	r3, r3, #24
 80023a6:	4908      	ldr	r1, [pc, #32]	@ (80023c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023a8:	40d9      	lsrs	r1, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	400b      	ands	r3, r1
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	431a      	orrs	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	0007ffff 	.word	0x0007ffff

080023cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6093      	str	r3, [r2, #8]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002404:	d101      	bne.n	800240a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002428:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800242c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002450:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002454:	d101      	bne.n	800245a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a4:	f043 0202 	orr.w	r2, r3, #2
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_IsEnabled+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_IsEnabled+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_IsDisableOngoing+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_IsDisableOngoing+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002514:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800253c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002540:	f043 0210 	orr.w	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b04      	cmp	r3, #4
 8002566:	d101      	bne.n	800256c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800258a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d101      	bne.n	80025ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e126      	b.n	8002830 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe fd53 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fef1 	bl	80023f0 <LL_ADC_IsDeepPowerDownEnabled>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fed7 	bl	80023cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff0c 	bl	8002440 <LL_ADC_IsInternalRegulatorEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d115      	bne.n	800265a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fef0 	bl	8002418 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002638:	4b7f      	ldr	r3, [pc, #508]	@ (8002838 <HAL_ADC_Init+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	4a7f      	ldr	r2, [pc, #508]	@ (800283c <HAL_ADC_Init+0x274>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800264c:	e002      	b.n	8002654 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3b01      	subs	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff feee 	bl	8002440 <LL_ADC_IsInternalRegulatorEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff62 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002690:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 80bf 	bne.w	800281e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80bb 	bne.w	800281e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80026b0:	f043 0202 	orr.w	r2, r3, #2
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fefb 	bl	80024b8 <LL_ADC_IsEnabled>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c8:	485d      	ldr	r0, [pc, #372]	@ (8002840 <HAL_ADC_Init+0x278>)
 80026ca:	f7ff fef5 	bl	80024b8 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4619      	mov	r1, r3
 80026da:	485a      	ldr	r0, [pc, #360]	@ (8002844 <HAL_ADC_Init+0x27c>)
 80026dc:	f7ff fd5e 	bl	800219c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7e5b      	ldrb	r3, [r3, #25]
 80026e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d106      	bne.n	800271c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	3b01      	subs	r3, #1
 8002714:	045b      	lsls	r3, r3, #17
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	4b42      	ldr	r3, [pc, #264]	@ (8002848 <HAL_ADC_Init+0x280>)
 8002740:	4013      	ands	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	430b      	orrs	r3, r1
 800274a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff26 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 8002756:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d13d      	bne.n	80027da <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13a      	bne.n	80027da <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002768:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002770:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002780:	f023 0302 	bic.w	r3, r3, #2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	69b9      	ldr	r1, [r7, #24]
 800278a:	430b      	orrs	r3, r1
 800278c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002794:	2b01      	cmp	r3, #1
 8002796:	d118      	bne.n	80027ca <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027ae:	4311      	orrs	r1, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80027b4:	4311      	orrs	r1, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027ba:	430a      	orrs	r2, r1
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	611a      	str	r2, [r3, #16]
 80027c8:	e007      	b.n	80027da <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0201 	bic.w	r2, r2, #1
 80027d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10c      	bne.n	80027fc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	f023 010f 	bic.w	r1, r3, #15
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	1e5a      	subs	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80027fa:	e007      	b.n	800280c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 020f 	bic.w	r2, r2, #15
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	f023 0303 	bic.w	r3, r3, #3
 8002814:	f043 0201 	orr.w	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54
 800281c:	e007      	b.n	800282e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800282e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000004 	.word	0x20000004
 800283c:	053e2d63 	.word	0x053e2d63
 8002840:	50040000 	.word	0x50040000
 8002844:	50040300 	.word	0x50040300
 8002848:	fff0c007 	.word	0xfff0c007

0800284c <HAL_ADC_DeInit>:
  *         and is particularly interesting before entering MCU low-power modes.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e10e      	b.n	8002a7c <HAL_ADC_DeInit+0x230>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800286a:	2103      	movs	r1, #3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fe29 	bl	80034c4 <ADC_ConversionStop>
 8002872:	4603      	mov	r3, r0
 8002874:	73fb      	strb	r3, [r7, #15]
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002884:	60da      	str	r2, [r3, #12]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_ADC_DeInit+0x56>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 ff5b 	bl	8003748 <ADC_Disable>
 8002892:	4603      	mov	r3, r0
 8002894:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <HAL_ADC_DeInit+0x56>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028b0:	f023 0307 	bic.w	r3, r3, #7
 80028b4:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80028be:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
     ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
     no direct reset applicable.
     Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 42a0 	bic.w	r2, r2, #1342177280	@ 0x50000000
 80028ce:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80028de:	609a      	str	r2, [r3, #8]

  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68d9      	ldr	r1, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b66      	ldr	r3, [pc, #408]	@ (8002a84 <HAL_ADC_DeInit+0x238>)
 80028ec:	400b      	ands	r3, r1
 80028ee:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80028fe:	60da      	str	r2, [r3, #12]

  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800290e:	f023 0307 	bic.w	r3, r3, #7
 8002912:	6113      	str	r3, [r2, #16]
            ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);

  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f002 4240 	and.w	r2, r2, #3221225472	@ 0xc0000000
 8002922:	615a      	str	r2, [r3, #20]

  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f002 4278 	and.w	r2, r2, #4160749568	@ 0xf8000000
 8002932:	619a      	str	r2, [r3, #24]
            ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
            ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);

  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002942:	621a      	str	r2, [r3, #32]

  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 8002952:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f002 22ff 	and.w	r2, r2, #4278255360	@ 0xff00ff00
 8002962:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b46      	ldr	r3, [pc, #280]	@ (8002a88 <HAL_ADC_DeInit+0x23c>)
 8002970:	400b      	ands	r3, r1
 8002972:	6313      	str	r3, [r2, #48]	@ 0x30
            ADC_SQR1_SQ1 | ADC_SQR1_L);

  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_ADC_DeInit+0x240>)
 8002980:	400b      	ands	r3, r1
 8002982:	6353      	str	r3, [r2, #52]	@ 0x34
            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);

  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a8c <HAL_ADC_DeInit+0x240>)
 8002990:	400b      	ands	r3, r1
 8002992:	6393      	str	r3, [r2, #56]	@ 0x38
            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);

  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	f423 63fb 	bic.w	r3, r3, #2008	@ 0x7d8
 80029a2:	f023 0307 	bic.w	r3, r3, #7
 80029a6:	63d3      	str	r3, [r2, #60]	@ 0x3c

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4b37      	ldr	r3, [pc, #220]	@ (8002a90 <HAL_ADC_DeInit+0x244>)
 80029b4:	400b      	ands	r3, r1
 80029b6:	6613      	str	r3, [r2, #96]	@ 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b33      	ldr	r3, [pc, #204]	@ (8002a90 <HAL_ADC_DeInit+0x244>)
 80029c4:	400b      	ands	r3, r1
 80029c6:	6653      	str	r3, [r2, #100]	@ 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a90 <HAL_ADC_DeInit+0x244>)
 80029d4:	400b      	ands	r3, r1
 80029d6:	6693      	str	r3, [r2, #104]	@ 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_ADC_DeInit+0x244>)
 80029e4:	400b      	ands	r3, r1
 80029e6:	66d3      	str	r3, [r2, #108]	@ 0x6c

  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/

  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	0cdb      	lsrs	r3, r3, #19
 80029f6:	04db      	lsls	r3, r3, #19
 80029f8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	0cdb      	lsrs	r3, r3, #19
 8002a0a:	04db      	lsls	r3, r3, #19
 8002a0c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6812      	ldr	r2, [r2, #0]
 8002a1c:	0cdb      	lsrs	r3, r3, #19
 8002a1e:	04db      	lsls	r3, r3, #19
 8002a20:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 127f 	bic.w	r2, r2, #8323199	@ 0x7f007f
 8002a34:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* ========== Reset common ADC registers ========== */

  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a38:	4816      	ldr	r0, [pc, #88]	@ (8002a94 <HAL_ADC_DeInit+0x248>)
 8002a3a:	f7ff fd3d 	bl	80024b8 <LL_ADC_IsEnabled>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_ADC_DeInit+0x20e>
      - multimode related parameters (when this feature is available): MDMA,
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 8002a44:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <HAL_ADC_DeInit+0x24c>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a13      	ldr	r2, [pc, #76]	@ (8002a98 <HAL_ADC_DeInit+0x24c>)
 8002a4a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a52:	6093      	str	r3, [r2, #8]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7fe fb77 	bl	8001148 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	65da      	str	r2, [r3, #92]	@ 0x5c
  hadc->InjectionConfig.ChannelCount = 0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	80008004 	.word	0x80008004
 8002a88:	e0820830 	.word	0xe0820830
 8002a8c:	e0820820 	.word	0xe0820820
 8002a90:	03fff000 	.word	0x03fff000
 8002a94:	50040000 	.word	0x50040000
 8002a98:	50040300 	.word	0x50040300

08002a9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fd53 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d14f      	bne.n	8002b54 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_Start+0x26>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e04b      	b.n	8002b5a <HAL_ADC_Start+0xbe>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fdb6 	bl	800363c <ADC_Enable>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d137      	bne.n	8002b4a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002afa:	d106      	bne.n	8002b0a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b00:	f023 0206 	bic.w	r2, r3, #6
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b08:	e002      	b.n	8002b10 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	221c      	movs	r2, #28
 8002b16:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fcde 	bl	8002504 <LL_ADC_REG_StartConversion>
 8002b48:	e006      	b.n	8002b58 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002b52:	e001      	b.n	8002b58 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
 8002b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_Stop+0x16>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e023      	b.n	8002bc0 <HAL_ADC_Stop+0x5e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b80:	2103      	movs	r1, #3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fc9e 	bl	80034c4 <ADC_ConversionStop>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d111      	bne.n	8002bb6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fdd8 	bl	8003748 <ADC_Disable>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d102      	bne.n	8002be0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bda:	2308      	movs	r3, #8
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e010      	b.n	8002c02 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f043 0220 	orr.w	r2, r3, #32
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06f      	b.n	8002cde <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002bfe:	2304      	movs	r3, #4
 8002c00:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c02:	f7ff f8cb 	bl	8001d9c <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c08:	e021      	b.n	8002c4e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d01d      	beq.n	8002c4e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c12:	f7ff f8c3 	bl	8001d9c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <HAL_ADC_PollForConversion+0x60>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d112      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3a:	f043 0204 	orr.w	r2, r3, #4
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e047      	b.n	8002cde <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0d6      	beq.n	8002c0a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c60:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fb1e 	bl	80022ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01c      	beq.n	8002cb2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7e5b      	ldrb	r3, [r3, #25]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d118      	bne.n	8002cb2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d111      	bne.n	8002cb2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	f043 0201 	orr.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d104      	bne.n	8002cca <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e008      	b.n	8002cdc <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	220c      	movs	r2, #12
 8002cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0b6      	sub	sp, #216	@ 0xd8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x22>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e3bb      	b.n	800349a <HAL_ADC_ConfigChannel+0x79a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fc10 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 83a0 	bne.w	800347c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d824      	bhi.n	8002d96 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	3b02      	subs	r3, #2
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d81b      	bhi.n	8002d8e <HAL_ADC_ConfigChannel+0x8e>
 8002d56:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <HAL_ADC_ConfigChannel+0x5c>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d75 	.word	0x08002d75
 8002d64:	08002d7d 	.word	0x08002d7d
 8002d68:	08002d85 	.word	0x08002d85
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d72:	e010      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d7a:	e00c      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d7c:	2318      	movs	r3, #24
 8002d7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d82:	e008      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d8c:	e003      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d8e:	2306      	movs	r3, #6
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d94:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002da4:	f7ff fa96 	bl	80022d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fbd1 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8002db2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fbf1 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 8002dc0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f040 81a4 	bne.w	8003116 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 819f 	bne.w	8003116 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	461a      	mov	r2, r3
 8002de6:	f7ff faa1 	bl	800232c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	08db      	lsrs	r3, r3, #3
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d00a      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6919      	ldr	r1, [r3, #16]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e1c:	f7ff f9f2 	bl	8002204 <LL_ADC_SetOffset>
 8002e20:	e179      	b.n	8003116 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fa0f 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x14e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fa04 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	e01e      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x18c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff f9f9 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e004      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x1a4>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	e018      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x1d6>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e004      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d106      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff f9c8 	bl	8002278 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f9ac 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x214>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff f9a1 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	e01e      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x252>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff f996 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f42:	2320      	movs	r3, #32
 8002f44:	e004      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x26a>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	e018      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x29c>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f8e:	2320      	movs	r3, #32
 8002f90:	e004      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002f92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d106      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f965 	bl	8002278 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f949 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x2da>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2102      	movs	r1, #2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f93e 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	0e9b      	lsrs	r3, r3, #26
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	e01e      	b.n	8003018 <HAL_ADC_ConfigChannel+0x318>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2102      	movs	r1, #2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f933 	bl	800224c <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ffc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e004      	b.n	8003016 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800300c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x330>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	e014      	b.n	800305a <HAL_ADC_ConfigChannel+0x35a>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800303e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003044:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800304c:	2320      	movs	r3, #32
 800304e:	e004      	b.n	800305a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003050:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800305a:	429a      	cmp	r2, r3
 800305c:	d106      	bne.n	800306c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f906 	bl	8002278 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2103      	movs	r1, #3
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f8ea 	bl	800224c <LL_ADC_GetOffsetChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x398>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2103      	movs	r1, #3
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f8df 	bl	800224c <LL_ADC_GetOffsetChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	0e9b      	lsrs	r3, r3, #26
 8003092:	f003 021f 	and.w	r2, r3, #31
 8003096:	e017      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x3c8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2103      	movs	r1, #3
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f8d4 	bl	800224c <LL_ADC_GetOffsetChannel>
 80030a4:	4603      	mov	r3, r0
 80030a6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e003      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x3e0>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	e011      	b.n	8003104 <HAL_ADC_ConfigChannel+0x404>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80030ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80030f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e003      	b.n	8003104 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80030fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030fe:	fab3 f383 	clz	r3, r3
 8003102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003104:	429a      	cmp	r2, r3
 8003106:	d106      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	2103      	movs	r1, #3
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f8b1 	bl	8002278 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f9cc 	bl	80024b8 <LL_ADC_IsEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 8140 	bne.w	80033a8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	461a      	mov	r2, r3
 8003136:	f7ff f925 	bl	8002384 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4a8f      	ldr	r2, [pc, #572]	@ (800337c <HAL_ADC_ConfigChannel+0x67c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	f040 8131 	bne.w	80033a8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <HAL_ADC_ConfigChannel+0x46e>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	3301      	adds	r3, #1
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2b09      	cmp	r3, #9
 8003164:	bf94      	ite	ls
 8003166:	2301      	movls	r3, #1
 8003168:	2300      	movhi	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	e019      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x4a2>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800317c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003186:	2320      	movs	r3, #32
 8003188:	e003      	b.n	8003192 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800318a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b09      	cmp	r3, #9
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d079      	beq.n	800329a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x4c2>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	0e9b      	lsrs	r3, r3, #26
 80031b8:	3301      	adds	r3, #1
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031c0:	e015      	b.n	80031ee <HAL_ADC_ConfigChannel+0x4ee>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e003      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80031de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	069b      	lsls	r3, r3, #26
 80031ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_ADC_ConfigChannel+0x50e>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	e017      	b.n	800323e <HAL_ADC_ConfigChannel+0x53e>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e003      	b.n	8003232 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800322a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	ea42 0103 	orr.w	r1, r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10a      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x564>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0e9b      	lsrs	r3, r3, #26
 8003254:	3301      	adds	r3, #1
 8003256:	f003 021f 	and.w	r2, r3, #31
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	051b      	lsls	r3, r3, #20
 8003262:	e018      	b.n	8003296 <HAL_ADC_ConfigChannel+0x596>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003274:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e003      	b.n	8003288 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003282:	fab3 f383 	clz	r3, r3
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3301      	adds	r3, #1
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003296:	430b      	orrs	r3, r1
 8003298:	e081      	b.n	800339e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x5b6>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	3301      	adds	r3, #1
 80032ae:	069b      	lsls	r3, r3, #26
 80032b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032b4:	e015      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x5e2>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e003      	b.n	80032da <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80032d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	069b      	lsls	r3, r3, #26
 80032de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x602>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0e9b      	lsrs	r3, r3, #26
 80032f4:	3301      	adds	r3, #1
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	e017      	b.n	8003332 <HAL_ADC_ConfigChannel+0x632>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	61bb      	str	r3, [r7, #24]
  return result;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e003      	b.n	8003326 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	fab3 f383 	clz	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	3301      	adds	r3, #1
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	ea42 0103 	orr.w	r1, r2, r3
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10d      	bne.n	800335e <HAL_ADC_ConfigChannel+0x65e>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	0e9b      	lsrs	r3, r3, #26
 8003348:	3301      	adds	r3, #1
 800334a:	f003 021f 	and.w	r2, r3, #31
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	3b1e      	subs	r3, #30
 8003356:	051b      	lsls	r3, r3, #20
 8003358:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800335c:	e01e      	b.n	800339c <HAL_ADC_ConfigChannel+0x69c>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	60fb      	str	r3, [r7, #12]
  return result;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e006      	b.n	8003388 <HAL_ADC_ConfigChannel+0x688>
 800337a:	bf00      	nop
 800337c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f003 021f 	and.w	r2, r3, #31
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	3b1e      	subs	r3, #30
 8003396:	051b      	lsls	r3, r3, #20
 8003398:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800339c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a2:	4619      	mov	r1, r3
 80033a4:	f7fe ffc2 	bl	800232c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b3d      	ldr	r3, [pc, #244]	@ (80034a4 <HAL_ADC_ConfigChannel+0x7a4>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d06c      	beq.n	800348e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033b4:	483c      	ldr	r0, [pc, #240]	@ (80034a8 <HAL_ADC_ConfigChannel+0x7a8>)
 80033b6:	f7fe ff17 	bl	80021e8 <LL_ADC_GetCommonPathInternalCh>
 80033ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a3a      	ldr	r2, [pc, #232]	@ (80034ac <HAL_ADC_ConfigChannel+0x7ac>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d127      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d121      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a35      	ldr	r2, [pc, #212]	@ (80034b0 <HAL_ADC_ConfigChannel+0x7b0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d157      	bne.n	800348e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033e6:	4619      	mov	r1, r3
 80033e8:	482f      	ldr	r0, [pc, #188]	@ (80034a8 <HAL_ADC_ConfigChannel+0x7a8>)
 80033ea:	f7fe feea 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ee:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7b4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	4a30      	ldr	r2, [pc, #192]	@ (80034b8 <HAL_ADC_ConfigChannel+0x7b8>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003408:	e002      	b.n	8003410 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3b01      	subs	r3, #1
 800340e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f9      	bne.n	800340a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003416:	e03a      	b.n	800348e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a27      	ldr	r2, [pc, #156]	@ (80034bc <HAL_ADC_ConfigChannel+0x7bc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d113      	bne.n	800344a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003422:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003426:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <HAL_ADC_ConfigChannel+0x7b0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d12a      	bne.n	800348e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800343c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003440:	4619      	mov	r1, r3
 8003442:	4819      	ldr	r0, [pc, #100]	@ (80034a8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003444:	f7fe febd 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003448:	e021      	b.n	800348e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d11c      	bne.n	800348e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003454:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003458:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <HAL_ADC_ConfigChannel+0x7b0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d111      	bne.n	800348e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800346e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003472:	4619      	mov	r1, r3
 8003474:	480c      	ldr	r0, [pc, #48]	@ (80034a8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003476:	f7fe fea4 	bl	80021c2 <LL_ADC_SetCommonPathInternalCh>
 800347a:	e008      	b.n	800348e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003496:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800349a:	4618      	mov	r0, r3
 800349c:	37d8      	adds	r7, #216	@ 0xd8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	80080000 	.word	0x80080000
 80034a8:	50040300 	.word	0x50040300
 80034ac:	c7520000 	.word	0xc7520000
 80034b0:	50040000 	.word	0x50040000
 80034b4:	20000004 	.word	0x20000004
 80034b8:	053e2d63 	.word	0x053e2d63
 80034bc:	cb840000 	.word	0xcb840000
 80034c0:	80000001 	.word	0x80000001

080034c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff f83a 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 80034e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff f85b 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 80034ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d103      	bne.n	80034fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8098 	beq.w	800362c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02a      	beq.n	8003560 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7e5b      	ldrb	r3, [r3, #25]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d126      	bne.n	8003560 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	7e1b      	ldrb	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d122      	bne.n	8003560 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800351a:	2301      	movs	r3, #1
 800351c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800351e:	e014      	b.n	800354a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4a45      	ldr	r2, [pc, #276]	@ (8003638 <ADC_ConversionStop+0x174>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d90d      	bls.n	8003544 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	f043 0210 	orr.w	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e074      	b.n	800362e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	3301      	adds	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003554:	2b40      	cmp	r3, #64	@ 0x40
 8003556:	d1e3      	bne.n	8003520 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2240      	movs	r2, #64	@ 0x40
 800355e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d014      	beq.n	8003590 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fff2 	bl	8002554 <LL_ADC_REG_IsConversionOngoing>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00c      	beq.n	8003590 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe ffaf 	bl	80024de <LL_ADC_IsDisableOngoing>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe ffce 	bl	800252c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d014      	beq.n	80035c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f801 	bl	80025a2 <LL_ADC_INJ_IsConversionOngoing>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe ff97 	bl	80024de <LL_ADC_IsDisableOngoing>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe ffdd 	bl	800257a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d005      	beq.n	80035d2 <ADC_ConversionStop+0x10e>
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d105      	bne.n	80035d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035cc:	230c      	movs	r3, #12
 80035ce:	617b      	str	r3, [r7, #20]
        break;
 80035d0:	e005      	b.n	80035de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035d2:	2308      	movs	r3, #8
 80035d4:	617b      	str	r3, [r7, #20]
        break;
 80035d6:	e002      	b.n	80035de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80035d8:	2304      	movs	r3, #4
 80035da:	617b      	str	r3, [r7, #20]
        break;
 80035dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80035de:	f7fe fbdd 	bl	8001d9c <HAL_GetTick>
 80035e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035e4:	e01b      	b.n	800361e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80035e6:	f7fe fbd9 	bl	8001d9c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d914      	bls.n	800361e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003606:	f043 0210 	orr.w	r2, r3, #16
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	f043 0201 	orr.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e007      	b.n	800362e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1dc      	bne.n	80035e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	a33fffff 	.word	0xa33fffff

0800363c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe ff33 	bl	80024b8 <LL_ADC_IsEnabled>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d169      	bne.n	800372c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <ADC_Enable+0xfc>)
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	f043 0210 	orr.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e055      	b.n	800372e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe feee 	bl	8002468 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800368c:	482b      	ldr	r0, [pc, #172]	@ (800373c <ADC_Enable+0x100>)
 800368e:	f7fe fdab 	bl	80021e8 <LL_ADC_GetCommonPathInternalCh>
 8003692:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800369c:	4b28      	ldr	r3, [pc, #160]	@ (8003740 <ADC_Enable+0x104>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <ADC_Enable+0x108>)
 80036a4:	fba2 2303 	umull	r2, r3, r2, r3
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036b6:	e002      	b.n	80036be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f9      	bne.n	80036b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036c4:	f7fe fb6a 	bl	8001d9c <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ca:	e028      	b.n	800371e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe fef1 	bl	80024b8 <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe fec1 	bl	8002468 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036e6:	f7fe fb59 	bl	8001d9c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d914      	bls.n	800371e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d00d      	beq.n	800371e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	f043 0210 	orr.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f043 0201 	orr.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e007      	b.n	800372e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d1cf      	bne.n	80036cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	8000003f 	.word	0x8000003f
 800373c:	50040300 	.word	0x50040300
 8003740:	20000004 	.word	0x20000004
 8003744:	053e2d63 	.word	0x053e2d63

08003748 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fec2 	bl	80024de <LL_ADC_IsDisableOngoing>
 800375a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe fea9 	bl	80024b8 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d047      	beq.n	80037fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d144      	bne.n	80037fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030d 	and.w	r3, r3, #13
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10c      	bne.n	800379a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fe83 	bl	8002490 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2203      	movs	r2, #3
 8003790:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003792:	f7fe fb03 	bl	8001d9c <HAL_GetTick>
 8003796:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003798:	e029      	b.n	80037ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379e:	f043 0210 	orr.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e023      	b.n	80037fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037b6:	f7fe faf1 	bl	8001d9c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d914      	bls.n	80037ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d6:	f043 0210 	orr.w	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e007      	b.n	80037fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1dc      	bne.n	80037b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <LL_ADC_StartCalibration>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003818:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003822:	4313      	orrs	r3, r2
 8003824:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_IsCalibrationOnGoing>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800384c:	d101      	bne.n	8003852 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_ADCEx_Calibration_Start+0x1c>
 8003878:	2302      	movs	r3, #2
 800387a:	e04d      	b.n	8003918 <HAL_ADCEx_Calibration_Start+0xb8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff5f 	bl	8003748 <ADC_Disable>
 800388a:	4603      	mov	r3, r0
 800388c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d136      	bne.n	8003902 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800389c:	f023 0302 	bic.w	r3, r3, #2
 80038a0:	f043 0202 	orr.w	r2, r3, #2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ffa9 	bl	8003806 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038b4:	e014      	b.n	80038e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3301      	adds	r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80038c2:	d30d      	bcc.n	80038e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c8:	f023 0312 	bic.w	r3, r3, #18
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e01b      	b.n	8003918 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ffa7 	bl	8003838 <LL_ADC_IsCalibrationOnGoing>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e2      	bne.n	80038b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f4:	f023 0303 	bic.w	r3, r3, #3
 80038f8:	f043 0201 	orr.w	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8003900:	e005      	b.n	800390e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003930:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800393c:	4013      	ands	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800394c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003952:	4a04      	ldr	r2, [pc, #16]	@ (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	60d3      	str	r3, [r2, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <__NVIC_GetPriorityGrouping+0x18>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	f003 0307 	and.w	r3, r3, #7
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	2b00      	cmp	r3, #0
 8003994:	db0b      	blt.n	80039ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	f003 021f 	and.w	r2, r3, #31
 800399c:	4907      	ldr	r1, [pc, #28]	@ (80039bc <__NVIC_EnableIRQ+0x38>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2001      	movs	r0, #1
 80039a6:	fa00 f202 	lsl.w	r2, r0, r2
 80039aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000e100 	.word	0xe000e100

080039c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	db0a      	blt.n	80039ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	490c      	ldr	r1, [pc, #48]	@ (8003a0c <__NVIC_SetPriority+0x4c>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	440b      	add	r3, r1
 80039e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e8:	e00a      	b.n	8003a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4908      	ldr	r1, [pc, #32]	@ (8003a10 <__NVIC_SetPriority+0x50>)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3b04      	subs	r3, #4
 80039f8:	0112      	lsls	r2, r2, #4
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	440b      	add	r3, r1
 80039fe:	761a      	strb	r2, [r3, #24]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000e100 	.word	0xe000e100
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b089      	sub	sp, #36	@ 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f1c3 0307 	rsb	r3, r3, #7
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	bf28      	it	cs
 8003a32:	2304      	movcs	r3, #4
 8003a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d902      	bls.n	8003a44 <NVIC_EncodePriority+0x30>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3b03      	subs	r3, #3
 8003a42:	e000      	b.n	8003a46 <NVIC_EncodePriority+0x32>
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	401a      	ands	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	43d9      	mvns	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	4313      	orrs	r3, r2
         );
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3724      	adds	r7, #36	@ 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff4c 	bl	8003920 <__NVIC_SetPriorityGrouping>
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa2:	f7ff ff61 	bl	8003968 <__NVIC_GetPriorityGrouping>
 8003aa6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	6978      	ldr	r0, [r7, #20]
 8003aae:	f7ff ffb1 	bl	8003a14 <NVIC_EncodePriority>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff80 	bl	80039c0 <__NVIC_SetPriority>
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff54 	bl	8003984 <__NVIC_EnableIRQ>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af2:	e154      	b.n	8003d9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	4013      	ands	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8146 	beq.w	8003d98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d005      	beq.n	8003b24 <HAL_GPIO_Init+0x40>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d130      	bne.n	8003b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 0201 	and.w	r2, r3, #1
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d017      	beq.n	8003bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d123      	bne.n	8003c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	08da      	lsrs	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3208      	adds	r2, #8
 8003c10:	6939      	ldr	r1, [r7, #16]
 8003c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2203      	movs	r2, #3
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0203 	and.w	r2, r3, #3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80a0 	beq.w	8003d98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c58:	4b58      	ldr	r3, [pc, #352]	@ (8003dbc <HAL_GPIO_Init+0x2d8>)
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5c:	4a57      	ldr	r2, [pc, #348]	@ (8003dbc <HAL_GPIO_Init+0x2d8>)
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c64:	4b55      	ldr	r3, [pc, #340]	@ (8003dbc <HAL_GPIO_Init+0x2d8>)
 8003c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c70:	4a53      	ldr	r2, [pc, #332]	@ (8003dc0 <HAL_GPIO_Init+0x2dc>)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	3302      	adds	r3, #2
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	220f      	movs	r2, #15
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c9a:	d019      	beq.n	8003cd0 <HAL_GPIO_Init+0x1ec>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a49      	ldr	r2, [pc, #292]	@ (8003dc4 <HAL_GPIO_Init+0x2e0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_GPIO_Init+0x1e8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a48      	ldr	r2, [pc, #288]	@ (8003dc8 <HAL_GPIO_Init+0x2e4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00d      	beq.n	8003cc8 <HAL_GPIO_Init+0x1e4>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a47      	ldr	r2, [pc, #284]	@ (8003dcc <HAL_GPIO_Init+0x2e8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d007      	beq.n	8003cc4 <HAL_GPIO_Init+0x1e0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a46      	ldr	r2, [pc, #280]	@ (8003dd0 <HAL_GPIO_Init+0x2ec>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_GPIO_Init+0x1dc>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e008      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003cc0:	2307      	movs	r3, #7
 8003cc2:	e006      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e004      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e002      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_GPIO_Init+0x1ee>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	f002 0203 	and.w	r2, r2, #3
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	4093      	lsls	r3, r2
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ce2:	4937      	ldr	r1, [pc, #220]	@ (8003dc0 <HAL_GPIO_Init+0x2dc>)
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf0:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d14:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4013      	ands	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d3e:	4a25      	ldr	r2, [pc, #148]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d44:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d68:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d6e:	4b19      	ldr	r3, [pc, #100]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d92:	4a10      	ldr	r2, [pc, #64]	@ (8003dd4 <HAL_GPIO_Init+0x2f0>)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f aea3 	bne.w	8003af4 <HAL_GPIO_Init+0x10>
  }
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	48000400 	.word	0x48000400
 8003dc8:	48000800 	.word	0x48000800
 8003dcc:	48000c00 	.word	0x48000c00
 8003dd0:	48001000 	.word	0x48001000
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003de6:	e0b7      	b.n	8003f58 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003de8:	2201      	movs	r2, #1
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80aa 	beq.w	8003f52 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003dfe:	4a5d      	ldr	r2, [pc, #372]	@ (8003f74 <HAL_GPIO_DeInit+0x19c>)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3302      	adds	r3, #2
 8003e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	220f      	movs	r2, #15
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e26:	d019      	beq.n	8003e5c <HAL_GPIO_DeInit+0x84>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a53      	ldr	r2, [pc, #332]	@ (8003f78 <HAL_GPIO_DeInit+0x1a0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_GPIO_DeInit+0x80>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a52      	ldr	r2, [pc, #328]	@ (8003f7c <HAL_GPIO_DeInit+0x1a4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00d      	beq.n	8003e54 <HAL_GPIO_DeInit+0x7c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a51      	ldr	r2, [pc, #324]	@ (8003f80 <HAL_GPIO_DeInit+0x1a8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <HAL_GPIO_DeInit+0x78>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a50      	ldr	r2, [pc, #320]	@ (8003f84 <HAL_GPIO_DeInit+0x1ac>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_GPIO_DeInit+0x74>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	e008      	b.n	8003e5e <HAL_GPIO_DeInit+0x86>
 8003e4c:	2307      	movs	r3, #7
 8003e4e:	e006      	b.n	8003e5e <HAL_GPIO_DeInit+0x86>
 8003e50:	2303      	movs	r3, #3
 8003e52:	e004      	b.n	8003e5e <HAL_GPIO_DeInit+0x86>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e002      	b.n	8003e5e <HAL_GPIO_DeInit+0x86>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_GPIO_DeInit+0x86>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	f002 0203 	and.w	r2, r2, #3
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	4093      	lsls	r3, r2
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d132      	bne.n	8003ed4 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e6e:	4b46      	ldr	r3, [pc, #280]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	4944      	ldr	r1, [pc, #272]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003e7c:	4b42      	ldr	r3, [pc, #264]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	4940      	ldr	r1, [pc, #256]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	493d      	ldr	r1, [pc, #244]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e98:	4b3b      	ldr	r3, [pc, #236]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	4939      	ldr	r1, [pc, #228]	@ (8003f88 <HAL_GPIO_DeInit+0x1b0>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	220f      	movs	r2, #15
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003f74 <HAL_GPIO_DeInit+0x19c>)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	089b      	lsrs	r3, r3, #2
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	43da      	mvns	r2, r3
 8003ec6:	482b      	ldr	r0, [pc, #172]	@ (8003f74 <HAL_GPIO_DeInit+0x19c>)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	400a      	ands	r2, r1
 8003ece:	3302      	adds	r3, #2
 8003ed0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	2103      	movs	r1, #3
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	08da      	lsrs	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3208      	adds	r2, #8
 8003ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	08d2      	lsrs	r2, r2, #3
 8003f08:	4019      	ands	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3208      	adds	r2, #8
 8003f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	401a      	ands	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	401a      	ands	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2103      	movs	r1, #3
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	401a      	ands	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3301      	adds	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f47f af41 	bne.w	8003de8 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f66:	bf00      	nop
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40010000 	.word	0x40010000
 8003f78:	48000400 	.word	0x48000400
 8003f7c:	48000800 	.word	0x48000800
 8003f80:	48000c00 	.word	0x48000c00
 8003f84:	48001000 	.word	0x48001000
 8003f88:	40010400 	.word	0x40010400

08003f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	e001      	b.n	8003fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	807b      	strh	r3, [r7, #2]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fcc:	787b      	ldrb	r3, [r7, #1]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fd2:	887a      	ldrh	r2, [r7, #2]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fd8:	e002      	b.n	8003fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ff6:	4b08      	ldr	r3, [pc, #32]	@ (8004018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004002:	4a05      	ldr	r2, [pc, #20]	@ (8004018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd f99a 	bl	8001344 <HAL_GPIO_EXTI_Callback>
  }
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40010400 	.word	0x40010400

0800401c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004020:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a04      	ldr	r2, [pc, #16]	@ (8004038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800402a:	6013      	str	r3, [r2, #0]
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40007000 	.word	0x40007000

0800403c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004040:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <HAL_PWREx_GetVoltageRange+0x18>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40007000 	.word	0x40007000

08004058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004066:	d130      	bne.n	80040ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004068:	4b23      	ldr	r3, [pc, #140]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004074:	d038      	beq.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004076:	4b20      	ldr	r3, [pc, #128]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800407e:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004084:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004086:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2232      	movs	r2, #50	@ 0x32
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	4a1b      	ldr	r2, [pc, #108]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0c9b      	lsrs	r3, r3, #18
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409c:	e002      	b.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a4:	4b14      	ldr	r3, [pc, #80]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b0:	d102      	bne.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f2      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b8:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c4:	d110      	bne.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e00f      	b.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ca:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d6:	d007      	beq.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040d8:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040e0:	4a05      	ldr	r2, [pc, #20]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40007000 	.word	0x40007000
 80040fc:	20000004 	.word	0x20000004
 8004100:	431bde83 	.word	0x431bde83

08004104 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	f000 bc02 	b.w	800491c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004118:	4b96      	ldr	r3, [pc, #600]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 030c 	and.w	r3, r3, #12
 8004120:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004122:	4b94      	ldr	r3, [pc, #592]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80e4 	beq.w	8004302 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_RCC_OscConfig+0x4c>
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	f040 808b 	bne.w	800425e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b01      	cmp	r3, #1
 800414c:	f040 8087 	bne.w	800425e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004150:	4b88      	ldr	r3, [pc, #544]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_OscConfig+0x64>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e3d9      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1a      	ldr	r2, [r3, #32]
 800416c:	4b81      	ldr	r3, [pc, #516]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <HAL_RCC_OscConfig+0x7e>
 8004178:	4b7e      	ldr	r3, [pc, #504]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004180:	e005      	b.n	800418e <HAL_RCC_OscConfig+0x8a>
 8004182:	4b7c      	ldr	r3, [pc, #496]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800418e:	4293      	cmp	r3, r2
 8004190:	d223      	bcs.n	80041da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fdbe 	bl	8004d18 <RCC_SetFlashLatencyFromMSIRange>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e3ba      	b.n	800491c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a6:	4b73      	ldr	r3, [pc, #460]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a72      	ldr	r2, [pc, #456]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041ac:	f043 0308 	orr.w	r3, r3, #8
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b70      	ldr	r3, [pc, #448]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	496d      	ldr	r1, [pc, #436]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	4968      	ldr	r1, [pc, #416]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
 80041d8:	e025      	b.n	8004226 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041da:	4b66      	ldr	r3, [pc, #408]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a65      	ldr	r2, [pc, #404]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041e0:	f043 0308 	orr.w	r3, r3, #8
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b63      	ldr	r3, [pc, #396]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	4960      	ldr	r1, [pc, #384]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	495b      	ldr	r1, [pc, #364]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fd7e 	bl	8004d18 <RCC_SetFlashLatencyFromMSIRange>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e37a      	b.n	800491c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004226:	f000 fc81 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 800422a:	4602      	mov	r2, r0
 800422c:	4b51      	ldr	r3, [pc, #324]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	4950      	ldr	r1, [pc, #320]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004238:	5ccb      	ldrb	r3, [r1, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	4a4e      	ldr	r2, [pc, #312]	@ (800437c <HAL_RCC_OscConfig+0x278>)
 8004244:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004246:	4b4e      	ldr	r3, [pc, #312]	@ (8004380 <HAL_RCC_OscConfig+0x27c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd fc48 	bl	8001ae0 <HAL_InitTick>
 8004250:	4603      	mov	r3, r0
 8004252:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d052      	beq.n	8004300 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	e35e      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d032      	beq.n	80042cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004266:	4b43      	ldr	r3, [pc, #268]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a42      	ldr	r2, [pc, #264]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004272:	f7fd fd93 	bl	8001d9c <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800427a:	f7fd fd8f 	bl	8001d9c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e347      	b.n	800491c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800428c:	4b39      	ldr	r3, [pc, #228]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004298:	4b36      	ldr	r3, [pc, #216]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a35      	ldr	r2, [pc, #212]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800429e:	f043 0308 	orr.w	r3, r3, #8
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	4b33      	ldr	r3, [pc, #204]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4930      	ldr	r1, [pc, #192]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	021b      	lsls	r3, r3, #8
 80042c4:	492b      	ldr	r1, [pc, #172]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
 80042ca:	e01a      	b.n	8004302 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042cc:	4b29      	ldr	r3, [pc, #164]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a28      	ldr	r2, [pc, #160]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042d8:	f7fd fd60 	bl	8001d9c <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e0:	f7fd fd5c 	bl	8001d9c <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e314      	b.n	800491c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042f2:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x1dc>
 80042fe:	e000      	b.n	8004302 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004300:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d073      	beq.n	80043f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x21c>
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d10e      	bne.n	8004338 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d10b      	bne.n	8004338 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004320:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d063      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d15f      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e2f1      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004340:	d106      	bne.n	8004350 <HAL_RCC_OscConfig+0x24c>
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a0b      	ldr	r2, [pc, #44]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e025      	b.n	800439c <HAL_RCC_OscConfig+0x298>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004358:	d114      	bne.n	8004384 <HAL_RCC_OscConfig+0x280>
 800435a:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a05      	ldr	r2, [pc, #20]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a02      	ldr	r2, [pc, #8]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800436c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e013      	b.n	800439c <HAL_RCC_OscConfig+0x298>
 8004374:	40021000 	.word	0x40021000
 8004378:	08022854 	.word	0x08022854
 800437c:	20000004 	.word	0x20000004
 8004380:	20000008 	.word	0x20000008
 8004384:	4ba0      	ldr	r3, [pc, #640]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a9f      	ldr	r2, [pc, #636]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800438a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b9d      	ldr	r3, [pc, #628]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a9c      	ldr	r2, [pc, #624]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800439a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d013      	beq.n	80043cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fcfa 	bl	8001d9c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fd fcf6 	bl	8001d9c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	@ 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e2ae      	b.n	800491c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043be:	4b92      	ldr	r3, [pc, #584]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x2a8>
 80043ca:	e014      	b.n	80043f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fce6 	bl	8001d9c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fd fce2 	bl	8001d9c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e29a      	b.n	800491c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043e6:	4b88      	ldr	r3, [pc, #544]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2d0>
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d060      	beq.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d005      	beq.n	8004414 <HAL_RCC_OscConfig+0x310>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d119      	bne.n	8004442 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d116      	bne.n	8004442 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004414:	4b7c      	ldr	r3, [pc, #496]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_OscConfig+0x328>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e277      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b76      	ldr	r3, [pc, #472]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	4973      	ldr	r1, [pc, #460]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004440:	e040      	b.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d023      	beq.n	8004492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800444a:	4b6f      	ldr	r3, [pc, #444]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6e      	ldr	r2, [pc, #440]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd fca1 	bl	8001d9c <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445e:	f7fd fc9d 	bl	8001d9c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e255      	b.n	800491c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004470:	4b65      	ldr	r3, [pc, #404]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b62      	ldr	r3, [pc, #392]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	495f      	ldr	r1, [pc, #380]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	e018      	b.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b5d      	ldr	r3, [pc, #372]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5c      	ldr	r2, [pc, #368]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fd fc7d 	bl	8001d9c <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fd fc79 	bl	8001d9c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e231      	b.n	800491c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b8:	4b53      	ldr	r3, [pc, #332]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d03c      	beq.n	800454a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01c      	beq.n	8004512 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044de:	4a4a      	ldr	r2, [pc, #296]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fd fc58 	bl	8001d9c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fd fc54 	bl	8001d9c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e20c      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004502:	4b41      	ldr	r3, [pc, #260]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ef      	beq.n	80044f0 <HAL_RCC_OscConfig+0x3ec>
 8004510:	e01b      	b.n	800454a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004512:	4b3d      	ldr	r3, [pc, #244]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004518:	4a3b      	ldr	r2, [pc, #236]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd fc3b 	bl	8001d9c <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fd fc37 	bl	8001d9c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e1ef      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800453c:	4b32      	ldr	r3, [pc, #200]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1ef      	bne.n	800452a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a6 	beq.w	80046a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004558:	2300      	movs	r3, #0
 800455a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800455c:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b27      	ldr	r3, [pc, #156]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	4a26      	ldr	r2, [pc, #152]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6593      	str	r3, [r2, #88]	@ 0x58
 8004574:	4b24      	ldr	r3, [pc, #144]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004580:	2301      	movs	r3, #1
 8004582:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004584:	4b21      	ldr	r3, [pc, #132]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d118      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004590:	4b1e      	ldr	r3, [pc, #120]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1d      	ldr	r2, [pc, #116]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459c:	f7fd fbfe 	bl	8001d9c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fd fbfa 	bl	8001d9c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1b2      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b6:	4b15      	ldr	r3, [pc, #84]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d108      	bne.n	80045dc <HAL_RCC_OscConfig+0x4d8>
 80045ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045da:	e029      	b.n	8004630 <HAL_RCC_OscConfig+0x52c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b05      	cmp	r3, #5
 80045e2:	d115      	bne.n	8004610 <HAL_RCC_OscConfig+0x50c>
 80045e4:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ea:	4a07      	ldr	r2, [pc, #28]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	4a03      	ldr	r2, [pc, #12]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x52c>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	40007000 	.word	0x40007000
 8004610:	4b9a      	ldr	r3, [pc, #616]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004616:	4a99      	ldr	r2, [pc, #612]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004620:	4b96      	ldr	r3, [pc, #600]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004626:	4a95      	ldr	r2, [pc, #596]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d016      	beq.n	8004666 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fd fbb0 	bl	8001d9c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463e:	e00a      	b.n	8004656 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fd fbac 	bl	8001d9c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e162      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004656:	4b89      	ldr	r3, [pc, #548]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ed      	beq.n	8004640 <HAL_RCC_OscConfig+0x53c>
 8004664:	e015      	b.n	8004692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fd fb99 	bl	8001d9c <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fd fb95 	bl	8001d9c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e14b      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004684:	4b7d      	ldr	r3, [pc, #500]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1ed      	bne.n	800466e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004692:	7ffb      	ldrb	r3, [r7, #31]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d105      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004698:	4b78      	ldr	r3, [pc, #480]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469c:	4a77      	ldr	r2, [pc, #476]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 800469e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d03c      	beq.n	800472a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01c      	beq.n	80046f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046b8:	4b70      	ldr	r3, [pc, #448]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80046ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046be:	4a6f      	ldr	r2, [pc, #444]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd fb68 	bl	8001d9c <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d0:	f7fd fb64 	bl	8001d9c <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e11c      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046e2:	4b66      	ldr	r3, [pc, #408]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80046e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ef      	beq.n	80046d0 <HAL_RCC_OscConfig+0x5cc>
 80046f0:	e01b      	b.n	800472a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046f2:	4b62      	ldr	r3, [pc, #392]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80046f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046f8:	4a60      	ldr	r2, [pc, #384]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004702:	f7fd fb4b 	bl	8001d9c <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470a:	f7fd fb47 	bl	8001d9c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0ff      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800471c:	4b57      	ldr	r3, [pc, #348]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 800471e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ef      	bne.n	800470a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80f3 	beq.w	800491a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004738:	2b02      	cmp	r3, #2
 800473a:	f040 80c9 	bne.w	80048d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800473e:	4b4f      	ldr	r3, [pc, #316]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 0203 	and.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	429a      	cmp	r2, r3
 8004750:	d12c      	bne.n	80047ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	3b01      	subs	r3, #1
 800475e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d123      	bne.n	80047ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d11b      	bne.n	80047ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d113      	bne.n	80047ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	3b01      	subs	r3, #1
 8004792:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d109      	bne.n	80047ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d06b      	beq.n	8004884 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d062      	beq.n	8004878 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047b2:	4b32      	ldr	r3, [pc, #200]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0ac      	b.n	800491c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047c2:	4b2e      	ldr	r3, [pc, #184]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2d      	ldr	r2, [pc, #180]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80047c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047ce:	f7fd fae5 	bl	8001d9c <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fd fae1 	bl	8001d9c <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e099      	b.n	800491c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e8:	4b24      	ldr	r3, [pc, #144]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f0      	bne.n	80047d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f4:	4b21      	ldr	r3, [pc, #132]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4b21      	ldr	r3, [pc, #132]	@ (8004880 <HAL_RCC_OscConfig+0x77c>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004804:	3a01      	subs	r2, #1
 8004806:	0112      	lsls	r2, r2, #4
 8004808:	4311      	orrs	r1, r2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800480e:	0212      	lsls	r2, r2, #8
 8004810:	4311      	orrs	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004816:	0852      	lsrs	r2, r2, #1
 8004818:	3a01      	subs	r2, #1
 800481a:	0552      	lsls	r2, r2, #21
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004822:	0852      	lsrs	r2, r2, #1
 8004824:	3a01      	subs	r2, #1
 8004826:	0652      	lsls	r2, r2, #25
 8004828:	4311      	orrs	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800482e:	06d2      	lsls	r2, r2, #27
 8004830:	430a      	orrs	r2, r1
 8004832:	4912      	ldr	r1, [pc, #72]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004834:	4313      	orrs	r3, r2
 8004836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004838:	4b10      	ldr	r3, [pc, #64]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0f      	ldr	r2, [pc, #60]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 800483e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004844:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a0c      	ldr	r2, [pc, #48]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 800484a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004850:	f7fd faa4 	bl	8001d9c <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004858:	f7fd faa0 	bl	8001d9c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e058      	b.n	800491c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486a:	4b04      	ldr	r3, [pc, #16]	@ (800487c <HAL_RCC_OscConfig+0x778>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0f0      	beq.n	8004858 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004876:	e050      	b.n	800491a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e04f      	b.n	800491c <HAL_RCC_OscConfig+0x818>
 800487c:	40021000 	.word	0x40021000
 8004880:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004884:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d144      	bne.n	800491a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004890:	4b24      	ldr	r3, [pc, #144]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a23      	ldr	r2, [pc, #140]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800489a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800489c:	4b21      	ldr	r3, [pc, #132]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 80048a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048a8:	f7fd fa78 	bl	8001d9c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fd fa74 	bl	8001d9c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e02c      	b.n	800491c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c2:	4b18      	ldr	r3, [pc, #96]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x7ac>
 80048ce:	e024      	b.n	800491a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d01f      	beq.n	8004916 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a12      	ldr	r2, [pc, #72]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 80048dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e2:	f7fd fa5b 	bl	8001d9c <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fd fa57 	bl	8001d9c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e00f      	b.n	800491c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048fc:	4b09      	ldr	r3, [pc, #36]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	4905      	ldr	r1, [pc, #20]	@ (8004924 <HAL_RCC_OscConfig+0x820>)
 800490e:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_RCC_OscConfig+0x824>)
 8004910:	4013      	ands	r3, r2
 8004912:	60cb      	str	r3, [r1, #12]
 8004914:	e001      	b.n	800491a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3720      	adds	r7, #32
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	feeefffc 	.word	0xfeeefffc

0800492c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0e7      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004940:	4b75      	ldr	r3, [pc, #468]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d910      	bls.n	8004970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b72      	ldr	r3, [pc, #456]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 0207 	bic.w	r2, r3, #7
 8004956:	4970      	ldr	r1, [pc, #448]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b6e      	ldr	r3, [pc, #440]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0cf      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d010      	beq.n	800499e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	4b66      	ldr	r3, [pc, #408]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004988:	429a      	cmp	r2, r3
 800498a:	d908      	bls.n	800499e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b63      	ldr	r3, [pc, #396]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4960      	ldr	r1, [pc, #384]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04c      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	4b5a      	ldr	r3, [pc, #360]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d121      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0a6      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ca:	4b54      	ldr	r3, [pc, #336]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d115      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e09a      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d107      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e2:	4b4e      	ldr	r3, [pc, #312]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e08e      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f2:	4b4a      	ldr	r3, [pc, #296]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e086      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a02:	4b46      	ldr	r3, [pc, #280]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f023 0203 	bic.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4943      	ldr	r1, [pc, #268]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a14:	f7fd f9c2 	bl	8001d9c <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a1c:	f7fd f9be 	bl	8001d9c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e06e      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	4b3a      	ldr	r3, [pc, #232]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 020c 	and.w	r2, r3, #12
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d1eb      	bne.n	8004a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d010      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	4b31      	ldr	r3, [pc, #196]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d208      	bcs.n	8004a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b2e      	ldr	r3, [pc, #184]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	492b      	ldr	r1, [pc, #172]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a72:	4b29      	ldr	r3, [pc, #164]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d210      	bcs.n	8004aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a80:	4b25      	ldr	r3, [pc, #148]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 0207 	bic.w	r2, r3, #7
 8004a88:	4923      	ldr	r1, [pc, #140]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a90:	4b21      	ldr	r3, [pc, #132]	@ (8004b18 <HAL_RCC_ClockConfig+0x1ec>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d001      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e036      	b.n	8004b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aae:	4b1b      	ldr	r3, [pc, #108]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	4918      	ldr	r1, [pc, #96]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004acc:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4910      	ldr	r1, [pc, #64]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ae0:	f000 f824 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	091b      	lsrs	r3, r3, #4
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	490b      	ldr	r1, [pc, #44]	@ (8004b20 <HAL_RCC_ClockConfig+0x1f4>)
 8004af2:	5ccb      	ldrb	r3, [r1, r3]
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
 8004afc:	4a09      	ldr	r2, [pc, #36]	@ (8004b24 <HAL_RCC_ClockConfig+0x1f8>)
 8004afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_RCC_ClockConfig+0x1fc>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fc ffeb 	bl	8001ae0 <HAL_InitTick>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	08022854 	.word	0x08022854
 8004b24:	20000004 	.word	0x20000004
 8004b28:	20000008 	.word	0x20000008

08004b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	2300      	movs	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b44:	4b3b      	ldr	r3, [pc, #236]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x34>
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d121      	bne.n	8004b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d11e      	bne.n	8004b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b60:	4b34      	ldr	r3, [pc, #208]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b6c:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b72:	0a1b      	lsrs	r3, r3, #8
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e005      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b88:	4a2b      	ldr	r2, [pc, #172]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10d      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b9c:	e00a      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d102      	bne.n	8004baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ba4:	4b25      	ldr	r3, [pc, #148]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e004      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bb0:	4b23      	ldr	r3, [pc, #140]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d134      	bne.n	8004c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bba:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d003      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8004bd0:	e005      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd4:	617b      	str	r3, [r7, #20]
      break;
 8004bd6:	e005      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bd8:	4b19      	ldr	r3, [pc, #100]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bda:	617b      	str	r3, [r7, #20]
      break;
 8004bdc:	e002      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	617b      	str	r3, [r7, #20]
      break;
 8004be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004be4:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	3301      	adds	r3, #1
 8004bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bf2:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	fb03 f202 	mul.w	r2, r3, r2
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	0e5b      	lsrs	r3, r3, #25
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	3301      	adds	r3, #1
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c24:	69bb      	ldr	r3, [r7, #24]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3724      	adds	r7, #36	@ 0x24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	0802286c 	.word	0x0802286c
 8004c3c:	00f42400 	.word	0x00f42400
 8004c40:	007a1200 	.word	0x007a1200

08004c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c48:	4b03      	ldr	r3, [pc, #12]	@ (8004c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000004 	.word	0x20000004

08004c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c60:	f7ff fff0 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4904      	ldr	r1, [pc, #16]	@ (8004c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40021000 	.word	0x40021000
 8004c84:	08022864 	.word	0x08022864

08004c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c8c:	f7ff ffda 	bl	8004c44 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0adb      	lsrs	r3, r3, #11
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4904      	ldr	r1, [pc, #16]	@ (8004cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	08022864 	.word	0x08022864

08004cb4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004cc4:	4b12      	ldr	r3, [pc, #72]	@ (8004d10 <HAL_RCC_GetClockConfig+0x5c>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0203 	and.w	r2, r3, #3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d10 <HAL_RCC_GetClockConfig+0x5c>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d10 <HAL_RCC_GetClockConfig+0x5c>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004ce8:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCC_GetClockConfig+0x5c>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	08db      	lsrs	r3, r3, #3
 8004cee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004cf6:	4b07      	ldr	r3, [pc, #28]	@ (8004d14 <HAL_RCC_GetClockConfig+0x60>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0207 	and.w	r2, r3, #7
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40022000 	.word	0x40022000

08004d18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d20:	2300      	movs	r3, #0
 8004d22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d24:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d30:	f7ff f984 	bl	800403c <HAL_PWREx_GetVoltageRange>
 8004d34:	6178      	str	r0, [r7, #20]
 8004d36:	e014      	b.n	8004d62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d38:	4b25      	ldr	r3, [pc, #148]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d44:	4b22      	ldr	r3, [pc, #136]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d50:	f7ff f974 	bl	800403c <HAL_PWREx_GetVoltageRange>
 8004d54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d56:	4b1e      	ldr	r3, [pc, #120]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d68:	d10b      	bne.n	8004d82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b80      	cmp	r3, #128	@ 0x80
 8004d6e:	d919      	bls.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d74:	d902      	bls.n	8004d7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d76:	2302      	movs	r3, #2
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	e013      	b.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	e010      	b.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b80      	cmp	r3, #128	@ 0x80
 8004d86:	d902      	bls.n	8004d8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d88:	2303      	movs	r3, #3
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	e00a      	b.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b80      	cmp	r3, #128	@ 0x80
 8004d92:	d102      	bne.n	8004d9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d94:	2302      	movs	r3, #2
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	e004      	b.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b70      	cmp	r3, #112	@ 0x70
 8004d9e:	d101      	bne.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004da0:	2301      	movs	r3, #1
 8004da2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f023 0207 	bic.w	r2, r3, #7
 8004dac:	4909      	ldr	r1, [pc, #36]	@ (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004db4:	4b07      	ldr	r3, [pc, #28]	@ (8004dd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d001      	beq.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40022000 	.word	0x40022000

08004dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004de0:	2300      	movs	r3, #0
 8004de2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004de4:	2300      	movs	r3, #0
 8004de6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d031      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004dfc:	d01a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004dfe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e02:	d814      	bhi.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d009      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e0c:	d10f      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	4a5c      	ldr	r2, [pc, #368]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e1a:	e00c      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fa00 	bl	8005228 <RCCEx_PLLSAI1_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e2c:	e003      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	74fb      	strb	r3, [r7, #19]
      break;
 8004e32:	e000      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004e34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3c:	4b51      	ldr	r3, [pc, #324]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	494e      	ldr	r1, [pc, #312]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e52:	e001      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 809e 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e66:	2300      	movs	r3, #0
 8004e68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e6a:	4b46      	ldr	r3, [pc, #280]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e80:	4b40      	ldr	r3, [pc, #256]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e84:	4a3f      	ldr	r2, [pc, #252]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a39      	ldr	r2, [pc, #228]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea8:	f7fc ff78 	bl	8001d9c <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eae:	e009      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb0:	f7fc ff74 	bl	8001d9c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec2:	e005      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec4:	4b30      	ldr	r3, [pc, #192]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0ef      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d15a      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ee0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01e      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d019      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef2:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004efc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004efe:	4b21      	ldr	r3, [pc, #132]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f04:	4a1f      	ldr	r2, [pc, #124]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f14:	4a1b      	ldr	r2, [pc, #108]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f1e:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d016      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fc ff34 	bl	8001d9c <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f36:	e00b      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fc ff30 	bl	8001d9c <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d902      	bls.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	74fb      	strb	r3, [r7, #19]
            break;
 8004f4e:	e006      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f50:	4b0c      	ldr	r3, [pc, #48]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ec      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f64:	4b07      	ldr	r3, [pc, #28]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	4904      	ldr	r1, [pc, #16]	@ (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f7a:	e009      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7c:	7cfb      	ldrb	r3, [r7, #19]
 8004f7e:	74bb      	strb	r3, [r7, #18]
 8004f80:	e006      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f90:	7c7b      	ldrb	r3, [r7, #17]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f96:	4b9b      	ldr	r3, [pc, #620]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	4a9a      	ldr	r2, [pc, #616]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fae:	4b95      	ldr	r3, [pc, #596]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb4:	f023 0203 	bic.w	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	4991      	ldr	r1, [pc, #580]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd0:	4b8c      	ldr	r3, [pc, #560]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f023 020c 	bic.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	4989      	ldr	r1, [pc, #548]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff2:	4b84      	ldr	r3, [pc, #528]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	4980      	ldr	r1, [pc, #512]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005014:	4b7b      	ldr	r3, [pc, #492]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005022:	4978      	ldr	r1, [pc, #480]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005036:	4b73      	ldr	r3, [pc, #460]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	496f      	ldr	r1, [pc, #444]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005058:	4b6a      	ldr	r3, [pc, #424]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	4967      	ldr	r1, [pc, #412]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507a:	4b62      	ldr	r3, [pc, #392]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005080:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005088:	495e      	ldr	r1, [pc, #376]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800509c:	4b59      	ldr	r3, [pc, #356]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	4956      	ldr	r1, [pc, #344]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050be:	4b51      	ldr	r3, [pc, #324]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050cc:	494d      	ldr	r1, [pc, #308]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d028      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050e0:	4b48      	ldr	r3, [pc, #288]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ee:	4945      	ldr	r1, [pc, #276]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050fe:	d106      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005100:	4b40      	ldr	r3, [pc, #256]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4a3f      	ldr	r2, [pc, #252]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510a:	60d3      	str	r3, [r2, #12]
 800510c:	e011      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005112:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005116:	d10c      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	2101      	movs	r1, #1
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f882 	bl	8005228 <RCCEx_PLLSAI1_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005128:	7cfb      	ldrb	r3, [r7, #19]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800512e:	7cfb      	ldrb	r3, [r7, #19]
 8005130:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d028      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800513e:	4b31      	ldr	r3, [pc, #196]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800514c:	492d      	ldr	r1, [pc, #180]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800515c:	d106      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515e:	4b29      	ldr	r3, [pc, #164]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4a28      	ldr	r2, [pc, #160]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005168:	60d3      	str	r3, [r2, #12]
 800516a:	e011      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005174:	d10c      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3304      	adds	r3, #4
 800517a:	2101      	movs	r1, #1
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f853 	bl	8005228 <RCCEx_PLLSAI1_Config>
 8005182:	4603      	mov	r3, r0
 8005184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01c      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800519c:	4b19      	ldr	r3, [pc, #100]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051aa:	4916      	ldr	r1, [pc, #88]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051ba:	d10c      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	2102      	movs	r1, #2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f830 	bl	8005228 <RCCEx_PLLSAI1_Config>
 80051c8:	4603      	mov	r3, r0
 80051ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051cc:	7cfb      	ldrb	r3, [r7, #19]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051e2:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f0:	4904      	ldr	r1, [pc, #16]	@ (8005204 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000

08005208 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800520c:	4b05      	ldr	r3, [pc, #20]	@ (8005224 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a04      	ldr	r2, [pc, #16]	@ (8005224 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005212:	f043 0304 	orr.w	r3, r3, #4
 8005216:	6013      	str	r3, [r2, #0]
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40021000 	.word	0x40021000

08005228 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005236:	4b74      	ldr	r3, [pc, #464]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005242:	4b71      	ldr	r3, [pc, #452]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0203 	and.w	r2, r3, #3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d10d      	bne.n	800526e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
       ||
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800525a:	4b6b      	ldr	r3, [pc, #428]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	091b      	lsrs	r3, r3, #4
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
       ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d047      	beq.n	80052fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	73fb      	strb	r3, [r7, #15]
 8005272:	e044      	b.n	80052fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d018      	beq.n	80052ae <RCCEx_PLLSAI1_Config+0x86>
 800527c:	2b03      	cmp	r3, #3
 800527e:	d825      	bhi.n	80052cc <RCCEx_PLLSAI1_Config+0xa4>
 8005280:	2b01      	cmp	r3, #1
 8005282:	d002      	beq.n	800528a <RCCEx_PLLSAI1_Config+0x62>
 8005284:	2b02      	cmp	r3, #2
 8005286:	d009      	beq.n	800529c <RCCEx_PLLSAI1_Config+0x74>
 8005288:	e020      	b.n	80052cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800528a:	4b5f      	ldr	r3, [pc, #380]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11d      	bne.n	80052d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529a:	e01a      	b.n	80052d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800529c:	4b5a      	ldr	r3, [pc, #360]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d116      	bne.n	80052d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ac:	e013      	b.n	80052d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052ae:	4b56      	ldr	r3, [pc, #344]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ba:	4b53      	ldr	r3, [pc, #332]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ca:	e006      	b.n	80052da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
      break;
 80052d0:	e004      	b.n	80052dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052da:	bf00      	nop
    }

    if(status == HAL_OK)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10d      	bne.n	80052fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052e2:	4b49      	ldr	r3, [pc, #292]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6819      	ldr	r1, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	430b      	orrs	r3, r1
 80052f8:	4943      	ldr	r1, [pc, #268]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d17c      	bne.n	80053fe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005304:	4b40      	ldr	r3, [pc, #256]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3f      	ldr	r2, [pc, #252]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800530e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005310:	f7fc fd44 	bl	8001d9c <HAL_GetTick>
 8005314:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005316:	e009      	b.n	800532c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005318:	f7fc fd40 	bl	8001d9c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d902      	bls.n	800532c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	73fb      	strb	r3, [r7, #15]
        break;
 800532a:	e005      	b.n	8005338 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800532c:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ef      	bne.n	8005318 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d15f      	bne.n	80053fe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d110      	bne.n	8005366 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005344:	4b30      	ldr	r3, [pc, #192]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800534c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6892      	ldr	r2, [r2, #8]
 8005354:	0211      	lsls	r1, r2, #8
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68d2      	ldr	r2, [r2, #12]
 800535a:	06d2      	lsls	r2, r2, #27
 800535c:	430a      	orrs	r2, r1
 800535e:	492a      	ldr	r1, [pc, #168]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005360:	4313      	orrs	r3, r2
 8005362:	610b      	str	r3, [r1, #16]
 8005364:	e027      	b.n	80053b6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d112      	bne.n	8005392 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800536c:	4b26      	ldr	r3, [pc, #152]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005374:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6892      	ldr	r2, [r2, #8]
 800537c:	0211      	lsls	r1, r2, #8
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6912      	ldr	r2, [r2, #16]
 8005382:	0852      	lsrs	r2, r2, #1
 8005384:	3a01      	subs	r2, #1
 8005386:	0552      	lsls	r2, r2, #21
 8005388:	430a      	orrs	r2, r1
 800538a:	491f      	ldr	r1, [pc, #124]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 800538c:	4313      	orrs	r3, r2
 800538e:	610b      	str	r3, [r1, #16]
 8005390:	e011      	b.n	80053b6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005392:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800539a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6892      	ldr	r2, [r2, #8]
 80053a2:	0211      	lsls	r1, r2, #8
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6952      	ldr	r2, [r2, #20]
 80053a8:	0852      	lsrs	r2, r2, #1
 80053aa:	3a01      	subs	r2, #1
 80053ac:	0652      	lsls	r2, r2, #25
 80053ae:	430a      	orrs	r2, r1
 80053b0:	4915      	ldr	r1, [pc, #84]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053b6:	4b14      	ldr	r3, [pc, #80]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a13      	ldr	r2, [pc, #76]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c2:	f7fc fceb 	bl	8001d9c <HAL_GetTick>
 80053c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053c8:	e009      	b.n	80053de <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053ca:	f7fc fce7 	bl	8001d9c <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d902      	bls.n	80053de <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	73fb      	strb	r3, [r7, #15]
          break;
 80053dc:	e005      	b.n	80053ea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053de:	4b0a      	ldr	r3, [pc, #40]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ef      	beq.n	80053ca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f2:	691a      	ldr	r2, [r3, #16]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	4903      	ldr	r1, [pc, #12]	@ (8005408 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000

0800540c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d079      	beq.n	8005512 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc fa74 	bl	8001920 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b10      	cmp	r3, #16
 800544c:	d058      	beq.n	8005500 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	22ca      	movs	r2, #202	@ 0xca
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2253      	movs	r2, #83	@ 0x53
 800545c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fc64 	bl	8005d2c <RTC_EnterInitMode>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d127      	bne.n	80054be <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800547c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005480:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6899      	ldr	r1, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68d2      	ldr	r2, [r2, #12]
 80054a8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6919      	ldr	r1, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	041a      	lsls	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fc68 	bl	8005d94 <RTC_ExitInitMode>
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d113      	bne.n	80054f6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0203 	bic.w	r2, r2, #3
 80054dc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	22ff      	movs	r2, #255	@ 0xff
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80054fe:	e001      	b.n	8005504 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_RTC_SetTime+0x1a>
 8005532:	2302      	movs	r3, #2
 8005534:	e08b      	b.n	800564e <HAL_RTC_SetTime+0x132>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	22ca      	movs	r2, #202	@ 0xca
 800554c:	625a      	str	r2, [r3, #36]	@ 0x24
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2253      	movs	r2, #83	@ 0x53
 8005554:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fbe8 	bl	8005d2c <RTC_EnterInitMode>
 800555c:	4603      	mov	r3, r0
 800555e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d163      	bne.n	800562e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d126      	bne.n	80055ba <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2200      	movs	r2, #0
 800557e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fc43 	bl	8005e10 <RTC_ByteToBcd2>
 800558a:	4603      	mov	r3, r0
 800558c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fc3c 	bl	8005e10 <RTC_ByteToBcd2>
 8005598:	4603      	mov	r3, r0
 800559a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800559c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	789b      	ldrb	r3, [r3, #2]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fc34 	bl	8005e10 <RTC_ByteToBcd2>
 80055a8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055aa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	78db      	ldrb	r3, [r3, #3]
 80055b2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e018      	b.n	80055ec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2200      	movs	r2, #0
 80055cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	78db      	ldrb	r3, [r3, #3]
 80055e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80055f6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80055fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800560a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	431a      	orrs	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fbb5 	bl	8005d94 <RTC_ExitInitMode>
 800562a:	4603      	mov	r3, r0
 800562c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	22ff      	movs	r2, #255	@ 0xff
 8005634:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d103      	bne.n	8005644 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800564c:	7cfb      	ldrb	r3, [r7, #19]
}
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}

08005656 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005684:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005688:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005694:	b2da      	uxtb	r2, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	0d9b      	lsrs	r3, r3, #22
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d11a      	bne.n	8005704 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fbbc 	bl	8005e50 <RTC_Bcd2ToByte>
 80056d8:	4603      	mov	r3, r0
 80056da:	461a      	mov	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fbb3 	bl	8005e50 <RTC_Bcd2ToByte>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	789b      	ldrb	r3, [r3, #2]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fbaa 	bl	8005e50 <RTC_Bcd2ToByte>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800570e:	b590      	push	{r4, r7, lr}
 8005710:	b087      	sub	sp, #28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_RTC_SetDate+0x1a>
 8005724:	2302      	movs	r3, #2
 8005726:	e075      	b.n	8005814 <HAL_RTC_SetDate+0x106>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10e      	bne.n	800575c <HAL_RTC_SetDate+0x4e>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	b2db      	uxtb	r3, r3
 8005754:	330a      	adds	r3, #10
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d11c      	bne.n	800579c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	78db      	ldrb	r3, [r3, #3]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fb52 	bl	8005e10 <RTC_ByteToBcd2>
 800576c:	4603      	mov	r3, r0
 800576e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fb4b 	bl	8005e10 <RTC_ByteToBcd2>
 800577a:	4603      	mov	r3, r0
 800577c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800577e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	789b      	ldrb	r3, [r3, #2]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fb43 	bl	8005e10 <RTC_ByteToBcd2>
 800578a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800578c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e00e      	b.n	80057ba <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	78db      	ldrb	r3, [r3, #3]
 80057a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	785b      	ldrb	r3, [r3, #1]
 80057a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057a8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80057ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	22ca      	movs	r2, #202	@ 0xca
 80057c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2253      	movs	r2, #83	@ 0x53
 80057c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 faae 	bl	8005d2c <RTC_EnterInitMode>
 80057d0:	4603      	mov	r3, r0
 80057d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80057d4:	7cfb      	ldrb	r3, [r7, #19]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fad2 	bl	8005d94 <RTC_ExitInitMode>
 80057f0:	4603      	mov	r3, r0
 80057f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	22ff      	movs	r2, #255	@ 0xff
 80057fa:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005812:	7cfb      	ldrb	r3, [r7, #19]
}
 8005814:	4618      	mov	r0, r3
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005832:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005836:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	0c1b      	lsrs	r3, r3, #16
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	0a1b      	lsrs	r3, r3, #8
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800585a:	b2da      	uxtb	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	0b5b      	lsrs	r3, r3, #13
 8005864:	b2db      	uxtb	r3, r3
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11a      	bne.n	80058ac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	78db      	ldrb	r3, [r3, #3]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fae8 	bl	8005e50 <RTC_Bcd2ToByte>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fadf 	bl	8005e50 <RTC_Bcd2ToByte>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	789b      	ldrb	r3, [r3, #2]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fad6 	bl	8005e50 <RTC_Bcd2ToByte>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b089      	sub	sp, #36	@ 0x24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_RTC_SetAlarm_IT+0x1a>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e127      	b.n	8005b22 <HAL_RTC_SetAlarm_IT+0x26a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d137      	bne.n	8005958 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fa85 	bl	8005e10 <RTC_ByteToBcd2>
 8005906:	4603      	mov	r3, r0
 8005908:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fa7e 	bl	8005e10 <RTC_ByteToBcd2>
 8005914:	4603      	mov	r3, r0
 8005916:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005918:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	789b      	ldrb	r3, [r3, #2]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fa76 	bl	8005e10 <RTC_ByteToBcd2>
 8005924:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005926:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	78db      	ldrb	r3, [r3, #3]
 800592e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005930:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fa68 	bl	8005e10 <RTC_ByteToBcd2>
 8005940:	4603      	mov	r3, r0
 8005942:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005944:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800594c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005952:	4313      	orrs	r3, r2
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	e023      	b.n	80059a0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2200      	movs	r2, #0
 800596a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005978:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800597e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	78db      	ldrb	r3, [r3, #3]
 8005984:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005986:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800598e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005990:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005996:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800599c:	4313      	orrs	r3, r2
 800599e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	22ca      	movs	r2, #202	@ 0xca
 80059b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2253      	movs	r2, #83	@ 0x53
 80059ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c4:	d14a      	bne.n	8005a5c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059d4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80059e6:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80059e8:	f7fc f9d8 	bl	8001d9c <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80059ee:	e015      	b.n	8005a1c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059f0:	f7fc f9d4 	bl	8001d9c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80059fe:	d90d      	bls.n	8005a1c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	22ff      	movs	r2, #255	@ 0xff
 8005a06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e082      	b.n	8005b22 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0e2      	beq.n	80059f0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a48:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a58:	609a      	str	r2, [r3, #8]
 8005a5a:	e049      	b.n	8005af0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005a6a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005a7c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005a7e:	f7fc f98d 	bl	8001d9c <HAL_GetTick>
 8005a82:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005a84:	e015      	b.n	8005ab2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a86:	f7fc f989 	bl	8001d9c <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a94:	d90d      	bls.n	8005ab2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	22ff      	movs	r2, #255	@ 0xff
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e037      	b.n	8005b22 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0e2      	beq.n	8005a86 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ade:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005af0:	4b0e      	ldr	r3, [pc, #56]	@ (8005b2c <HAL_RTC_SetAlarm_IT+0x274>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0d      	ldr	r2, [pc, #52]	@ (8005b2c <HAL_RTC_SetAlarm_IT+0x274>)
 8005af6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005afa:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <HAL_RTC_SetAlarm_IT+0x274>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4a0a      	ldr	r2, [pc, #40]	@ (8005b2c <HAL_RTC_SetAlarm_IT+0x274>)
 8005b02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b06:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	22ff      	movs	r2, #255	@ 0xff
 8005b0e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3724      	adds	r7, #36	@ 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd90      	pop	{r4, r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40010400 	.word	0x40010400

08005b30 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_RTC_DeactivateAlarm+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e083      	b.n	8005c50 <HAL_RTC_DeactivateAlarm+0x120>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	22ca      	movs	r2, #202	@ 0xca
 8005b5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2253      	movs	r2, #83	@ 0x53
 8005b66:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b6e:	d131      	bne.n	8005bd4 <HAL_RTC_DeactivateAlarm+0xa4>
    /* AlarmA */
#if defined (RTC_ALRMASSR_SSCLR)
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b7e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b8e:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005b90:	f7fc f904 	bl	8001d9c <HAL_GetTick>
 8005b94:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005b96:	e015      	b.n	8005bc4 <HAL_RTC_DeactivateAlarm+0x94>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b98:	f7fc f900 	bl	8001d9c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ba6:	d90d      	bls.n	8005bc4 <HAL_RTC_DeactivateAlarm+0x94>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	22ff      	movs	r2, #255	@ 0xff
 8005bae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e045      	b.n	8005c50 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d0e2      	beq.n	8005b98 <HAL_RTC_DeactivateAlarm+0x68>
 8005bd2:	e030      	b.n	8005c36 <HAL_RTC_DeactivateAlarm+0x106>
    /* AlarmB */
#if defined (RTC_ALRMBSSR_SSCLR)
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMASSR_SSCLR);
#endif

    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005be2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bf2:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005bf4:	f7fc f8d2 	bl	8001d9c <HAL_GetTick>
 8005bf8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005bfa:	e015      	b.n	8005c28 <HAL_RTC_DeactivateAlarm+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bfc:	f7fc f8ce 	bl	8001d9c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c0a:	d90d      	bls.n	8005c28 <HAL_RTC_DeactivateAlarm+0xf8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	22ff      	movs	r2, #255	@ 0xff
 8005c12:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2203      	movs	r2, #3
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e013      	b.n	8005c50 <HAL_RTC_DeactivateAlarm+0x120>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0e2      	beq.n	8005bfc <HAL_RTC_DeactivateAlarm+0xcc>
      }
    }
#endif
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	22ff      	movs	r2, #255	@ 0xff
 8005c3c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005c60:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005c62:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005c66:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d012      	beq.n	8005c9c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005c94:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f015 fa3d 	bl	801b116 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d012      	beq.n	8005cd0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00b      	beq.n	8005cd0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005cc8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f910 	bl	8005ef0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40010400 	.word	0x40010400

08005ce4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8005d28 <HAL_RTC_WaitForSynchro+0x44>)
 8005cf2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005cf4:	f7fc f852 	bl	8001d9c <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cfa:	e009      	b.n	8005d10 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cfc:	f7fc f84e 	bl	8001d9c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d0a:	d901      	bls.n	8005d10 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e007      	b.n	8005d20 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ee      	beq.n	8005cfc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	0003ff5f 	.word	0x0003ff5f

08005d2c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d120      	bne.n	8005d88 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d50:	f7fc f824 	bl	8001d9c <HAL_GetTick>
 8005d54:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d56:	e00d      	b.n	8005d74 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d58:	f7fc f820 	bl	8001d9c <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d66:	d905      	bls.n	8005d74 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <RTC_EnterInitMode+0x5c>
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d1e7      	bne.n	8005d58 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005da0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <RTC_ExitInitMode+0x78>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	4a19      	ldr	r2, [pc, #100]	@ (8005e0c <RTC_ExitInitMode+0x78>)
 8005da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005daa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005dac:	4b17      	ldr	r3, [pc, #92]	@ (8005e0c <RTC_ExitInitMode+0x78>)
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10c      	bne.n	8005dd2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff ff93 	bl	8005ce4 <HAL_RTC_WaitForSynchro>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01e      	beq.n	8005e02 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	73fb      	strb	r3, [r7, #15]
 8005dd0:	e017      	b.n	8005e02 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e0c <RTC_ExitInitMode+0x78>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005e0c <RTC_ExitInitMode+0x78>)
 8005dd8:	f023 0320 	bic.w	r3, r3, #32
 8005ddc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff ff80 	bl	8005ce4 <HAL_RTC_WaitForSynchro>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2203      	movs	r2, #3
 8005dee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005df6:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <RTC_ExitInitMode+0x78>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	4a04      	ldr	r2, [pc, #16]	@ (8005e0c <RTC_ExitInitMode+0x78>)
 8005dfc:	f043 0320 	orr.w	r3, r3, #32
 8005e00:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40002800 	.word	0x40002800

08005e10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005e22:	e005      	b.n	8005e30 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	3b0a      	subs	r3, #10
 8005e2e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	2b09      	cmp	r3, #9
 8005e34:	d8f6      	bhi.n	8005e24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	b2db      	uxtb	r3, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	0092      	lsls	r2, r2, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005e6a:	79fb      	ldrb	r3, [r7, #7]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	4413      	add	r3, r2
 8005e76:	b2db      	uxtb	r3, r3
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_RTCEx_EnableBypassShadow+0x16>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e024      	b.n	8005ee4 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	22ca      	movs	r2, #202	@ 0xca
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2253      	movs	r2, #83	@ 0x53
 8005eb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0220 	orr.w	r2, r2, #32
 8005ec8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	22ff      	movs	r2, #255	@ 0xff
 8005ed0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3350      	adds	r3, #80	@ 0x50
 8005f16:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	009a      	lsls	r2, r3, #2
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6013      	str	r3, [r2, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3350      	adds	r3, #80	@ 0x50
 8005f46:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e095      	b.n	80060a0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d108      	bne.n	8005f8e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f84:	d009      	beq.n	8005f9a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	61da      	str	r2, [r3, #28]
 8005f8c:	e005      	b.n	8005f9a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d106      	bne.n	8005fba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7fb fd29 	bl	8001a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fd0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fda:	d902      	bls.n	8005fe2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	e002      	b.n	8005fe8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fe6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ff0:	d007      	beq.n	8006002 <HAL_SPI_Init+0xa0>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ffa:	d002      	beq.n	8006002 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	ea42 0103 	orr.w	r1, r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 0204 	and.w	r2, r3, #4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800607e:	ea42 0103 	orr.w	r1, r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060b8:	f7fb fe70 	bl	8001d9c <HAL_GetTick>
 80060bc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80060be:	88fb      	ldrh	r3, [r7, #6]
 80060c0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d001      	beq.n	80060d2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
 80060d0:	e15c      	b.n	800638c <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_SPI_Transmit+0x36>
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e154      	b.n	800638c <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_SPI_Transmit+0x48>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e14d      	b.n	800638c <HAL_SPI_Transmit+0x2e4>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2203      	movs	r2, #3
 80060fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	88fa      	ldrh	r2, [r7, #6]
 8006116:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006142:	d10f      	bne.n	8006164 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006152:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006162:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d007      	beq.n	8006182 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006180:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800618a:	d952      	bls.n	8006232 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <HAL_SPI_Transmit+0xf2>
 8006194:	8b7b      	ldrh	r3, [r7, #26]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d145      	bne.n	8006226 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	881a      	ldrh	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061aa:	1c9a      	adds	r2, r3, #2
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061be:	e032      	b.n	8006226 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d112      	bne.n	80061f4 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d2:	881a      	ldrh	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061f2:	e018      	b.n	8006226 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061f4:	f7fb fdd2 	bl	8001d9c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d803      	bhi.n	800620c <HAL_SPI_Transmit+0x164>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620a:	d102      	bne.n	8006212 <HAL_SPI_Transmit+0x16a>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e0b2      	b.n	800638c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1c7      	bne.n	80061c0 <HAL_SPI_Transmit+0x118>
 8006230:	e083      	b.n	800633a <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_SPI_Transmit+0x198>
 800623a:	8b7b      	ldrh	r3, [r7, #26]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d177      	bne.n	8006330 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b01      	cmp	r3, #1
 8006248:	d912      	bls.n	8006270 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b02      	subs	r3, #2
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800626e:	e05f      	b.n	8006330 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	7812      	ldrb	r2, [r2, #0]
 800627c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006296:	e04b      	b.n	8006330 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d12b      	bne.n	80062fe <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d912      	bls.n	80062d6 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	881a      	ldrh	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c0:	1c9a      	adds	r2, r3, #2
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b02      	subs	r3, #2
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062d4:	e02c      	b.n	8006330 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062fc:	e018      	b.n	8006330 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fe:	f7fb fd4d 	bl	8001d9c <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d803      	bhi.n	8006316 <HAL_SPI_Transmit+0x26e>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d102      	bne.n	800631c <HAL_SPI_Transmit+0x274>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e02d      	b.n	800638c <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1ae      	bne.n	8006298 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fcf6 	bl	8006d30 <SPI_EndRxTxTransaction>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2220      	movs	r2, #32
 800634e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006358:	2300      	movs	r3, #0
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800638a:	2300      	movs	r3, #0
  }
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d001      	beq.n	80063b4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
 80063b2:	e123      	b.n	80065fc <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063bc:	d112      	bne.n	80063e4 <HAL_SPI_Receive+0x50>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10e      	bne.n	80063e4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2204      	movs	r2, #4
 80063ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f000 f912 	bl	8006604 <HAL_SPI_TransmitReceive>
 80063e0:	4603      	mov	r3, r0
 80063e2:	e10b      	b.n	80065fc <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063e4:	f7fb fcda 	bl	8001d9c <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_SPI_Receive+0x62>
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e100      	b.n	80065fc <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_SPI_Receive+0x74>
 8006404:	2302      	movs	r3, #2
 8006406:	e0f9      	b.n	80065fc <HAL_SPI_Receive+0x268>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2204      	movs	r2, #4
 8006414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800645a:	d908      	bls.n	800646e <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	e007      	b.n	800647e <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006486:	d10f      	bne.n	80064a8 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006496:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80064a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b2:	2b40      	cmp	r3, #64	@ 0x40
 80064b4:	d007      	beq.n	80064c6 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064ce:	d875      	bhi.n	80065bc <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064d0:	e037      	b.n	8006542 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d117      	bne.n	8006510 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f103 020c 	add.w	r2, r3, #12
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	7812      	ldrb	r2, [r2, #0]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800650e:	e018      	b.n	8006542 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006510:	f7fb fc44 	bl	8001d9c <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d803      	bhi.n	8006528 <HAL_SPI_Receive+0x194>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d102      	bne.n	800652e <HAL_SPI_Receive+0x19a>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e05c      	b.n	80065fc <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1c1      	bne.n	80064d2 <HAL_SPI_Receive+0x13e>
 800654e:	e03b      	b.n	80065c8 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b01      	cmp	r3, #1
 800655c:	d115      	bne.n	800658a <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006568:	b292      	uxth	r2, r2
 800656a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	1c9a      	adds	r2, r3, #2
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006588:	e018      	b.n	80065bc <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800658a:	f7fb fc07 	bl	8001d9c <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d803      	bhi.n	80065a2 <HAL_SPI_Receive+0x20e>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d102      	bne.n	80065a8 <HAL_SPI_Receive+0x214>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e01f      	b.n	80065fc <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1c3      	bne.n	8006550 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fb57 	bl	8006c80 <SPI_EndRxTransaction>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80065fa:	2300      	movs	r3, #0
  }
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b08a      	sub	sp, #40	@ 0x28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
 8006610:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006612:	2301      	movs	r3, #1
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006616:	f7fb fbc1 	bl	8001d9c <HAL_GetTick>
 800661a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006622:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800662a:	887b      	ldrh	r3, [r7, #2]
 800662c:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800662e:	887b      	ldrh	r3, [r7, #2]
 8006630:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006632:	7ffb      	ldrb	r3, [r7, #31]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d00c      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x4e>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800663e:	d106      	bne.n	800664e <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <HAL_SPI_TransmitReceive+0x4a>
 8006648:	7ffb      	ldrb	r3, [r7, #31]
 800664a:	2b04      	cmp	r3, #4
 800664c:	d001      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800664e:	2302      	movs	r3, #2
 8006650:	e1f3      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x60>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x60>
 800665e:	887b      	ldrh	r3, [r7, #2]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e1e8      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x72>
 8006672:	2302      	movs	r3, #2
 8006674:	e1e1      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x436>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b04      	cmp	r3, #4
 8006688:	d003      	beq.n	8006692 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2205      	movs	r2, #5
 800668e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	887a      	ldrh	r2, [r7, #2]
 80066a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	887a      	ldrh	r2, [r7, #2]
 80066aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	887a      	ldrh	r2, [r7, #2]
 80066b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	887a      	ldrh	r2, [r7, #2]
 80066be:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80066d4:	d802      	bhi.n	80066dc <HAL_SPI_TransmitReceive+0xd8>
 80066d6:	8abb      	ldrh	r3, [r7, #20]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d908      	bls.n	80066ee <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066ea:	605a      	str	r2, [r3, #4]
 80066ec:	e007      	b.n	80066fe <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d007      	beq.n	800671c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800671a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006724:	f240 8083 	bls.w	800682e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_SPI_TransmitReceive+0x132>
 8006730:	8afb      	ldrh	r3, [r7, #22]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d16f      	bne.n	8006816 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	881a      	ldrh	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	1c9a      	adds	r2, r3, #2
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675a:	e05c      	b.n	8006816 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b02      	cmp	r3, #2
 8006768:	d11b      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x19e>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d016      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x19e>
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	2b01      	cmp	r3, #1
 8006778:	d113      	bne.n	80067a2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677e:	881a      	ldrh	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d11c      	bne.n	80067ea <HAL_SPI_TransmitReceive+0x1e6>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d016      	beq.n	80067ea <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	b292      	uxth	r2, r2
 80067c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ce:	1c9a      	adds	r2, r3, #2
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067e6:	2301      	movs	r3, #1
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067ea:	f7fb fad7 	bl	8001d9c <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d80d      	bhi.n	8006816 <HAL_SPI_TransmitReceive+0x212>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d009      	beq.n	8006816 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e111      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d19d      	bne.n	800675c <HAL_SPI_TransmitReceive+0x158>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d197      	bne.n	800675c <HAL_SPI_TransmitReceive+0x158>
 800682c:	e0e5      	b.n	80069fa <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_SPI_TransmitReceive+0x23a>
 8006836:	8afb      	ldrh	r3, [r7, #22]
 8006838:	2b01      	cmp	r3, #1
 800683a:	f040 80d1 	bne.w	80069e0 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d912      	bls.n	800686e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	881a      	ldrh	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b02      	subs	r3, #2
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800686c:	e0b8      	b.n	80069e0 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	330c      	adds	r3, #12
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006894:	e0a4      	b.n	80069e0 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d134      	bne.n	800690e <HAL_SPI_TransmitReceive+0x30a>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d02f      	beq.n	800690e <HAL_SPI_TransmitReceive+0x30a>
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d12c      	bne.n	800690e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d912      	bls.n	80068e4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	881a      	ldrh	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b02      	subs	r3, #2
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068e2:	e012      	b.n	800690a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	330c      	adds	r3, #12
 80068ee:	7812      	ldrb	r2, [r2, #0]
 80068f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b01      	cmp	r3, #1
 800691a:	d148      	bne.n	80069ae <HAL_SPI_TransmitReceive+0x3aa>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d042      	beq.n	80069ae <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d923      	bls.n	800697c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	b292      	uxth	r2, r2
 8006940:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b02      	subs	r3, #2
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d81f      	bhi.n	80069aa <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	e016      	b.n	80069aa <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f103 020c 	add.w	r2, r3, #12
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069aa:	2301      	movs	r3, #1
 80069ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069ae:	f7fb f9f5 	bl	8001d9c <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d803      	bhi.n	80069c6 <HAL_SPI_TransmitReceive+0x3c2>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d102      	bne.n	80069cc <HAL_SPI_TransmitReceive+0x3c8>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d109      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e02c      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f47f af55 	bne.w	8006896 <HAL_SPI_TransmitReceive+0x292>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f47f af4e 	bne.w	8006896 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069fa:	6a3a      	ldr	r2, [r7, #32]
 80069fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f996 	bl	8006d30 <SPI_EndRxTxTransaction>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e00e      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8006a38:	2300      	movs	r3, #0
  }
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3728      	adds	r7, #40	@ 0x28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a54:	f7fb f9a2 	bl	8001d9c <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	4413      	add	r3, r2
 8006a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a64:	f7fb f99a 	bl	8001d9c <HAL_GetTick>
 8006a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a6a:	4b39      	ldr	r3, [pc, #228]	@ (8006b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	015b      	lsls	r3, r3, #5
 8006a70:	0d1b      	lsrs	r3, r3, #20
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	fb02 f303 	mul.w	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7a:	e054      	b.n	8006b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a82:	d050      	beq.n	8006b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a84:	f7fb f98a 	bl	8001d9c <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d902      	bls.n	8006a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d13d      	bne.n	8006b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ab2:	d111      	bne.n	8006ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006abc:	d004      	beq.n	8006ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ac6:	d107      	bne.n	8006ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ae0:	d10f      	bne.n	8006b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e017      	b.n	8006b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	bf0c      	ite	eq
 8006b36:	2301      	moveq	r3, #1
 8006b38:	2300      	movne	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d19b      	bne.n	8006a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000004 	.word	0x20000004

08006b54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	@ 0x28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b66:	f7fb f919 	bl	8001d9c <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	4413      	add	r3, r2
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006b76:	f7fb f911 	bl	8001d9c <HAL_GetTick>
 8006b7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	330c      	adds	r3, #12
 8006b82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b84:	4b3d      	ldr	r3, [pc, #244]	@ (8006c7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	00da      	lsls	r2, r3, #3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	0d1b      	lsrs	r3, r3, #20
 8006b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b96:	fb02 f303 	mul.w	r3, r2, r3
 8006b9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b9c:	e060      	b.n	8006c60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006ba4:	d107      	bne.n	8006bb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d050      	beq.n	8006c60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bbe:	f7fb f8ed 	bl	8001d9c <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d902      	bls.n	8006bd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d13d      	bne.n	8006c50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006be2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bec:	d111      	bne.n	8006c12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bf6:	d004      	beq.n	8006c02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c00:	d107      	bne.n	8006c12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c1a:	d10f      	bne.n	8006c3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e010      	b.n	8006c72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d196      	bne.n	8006b9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3728      	adds	r7, #40	@ 0x28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000004 	.word	0x20000004

08006c80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c94:	d111      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9e:	d004      	beq.n	8006caa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca8:	d107      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2180      	movs	r1, #128	@ 0x80
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff febd 	bl	8006a44 <SPI_WaitFlagStateUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cd4:	f043 0220 	orr.w	r2, r3, #32
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e023      	b.n	8006d28 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ce8:	d11d      	bne.n	8006d26 <SPI_EndRxTransaction+0xa6>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cf2:	d004      	beq.n	8006cfe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfc:	d113      	bne.n	8006d26 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff ff22 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d007      	beq.n	8006d26 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e000      	b.n	8006d28 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff ff03 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d007      	beq.n	8006d64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d58:	f043 0220 	orr.w	r2, r3, #32
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e027      	b.n	8006db4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2180      	movs	r1, #128	@ 0x80
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff fe68 	bl	8006a44 <SPI_WaitFlagStateUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d7e:	f043 0220 	orr.w	r2, r3, #32
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e014      	b.n	8006db4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fedc 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da6:	f043 0220 	orr.w	r2, r3, #32
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e000      	b.n	8006db4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e049      	b.n	8006e62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f841 	bl	8006e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f000 f9c4 	bl	8007188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
	...

08006e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d001      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e03b      	b.n	8006f10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a19      	ldr	r2, [pc, #100]	@ (8006f1c <HAL_TIM_Base_Start_IT+0x9c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_TIM_Base_Start_IT+0x4e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ec2:	d004      	beq.n	8006ece <HAL_TIM_Base_Start_IT+0x4e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a15      	ldr	r2, [pc, #84]	@ (8006f20 <HAL_TIM_Base_Start_IT+0xa0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d115      	bne.n	8006efa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <HAL_TIM_Base_Start_IT+0xa4>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b06      	cmp	r3, #6
 8006ede:	d015      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x8c>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee6:	d011      	beq.n	8006f0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef8:	e008      	b.n	8006f0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f042 0201 	orr.w	r2, r2, #1
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	e000      	b.n	8006f0e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40014000 	.word	0x40014000
 8006f24:	00010007 	.word	0x00010007

08006f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d020      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01b      	beq.n	8006f8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0202 	mvn.w	r2, #2
 8006f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f8e9 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8db 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f8ec 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0304 	and.w	r3, r3, #4
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d020      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0204 	mvn.w	r2, #4
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f8c3 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f8b5 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f8c6 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d020      	beq.n	8007024 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01b      	beq.n	8007024 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0208 	mvn.w	r2, #8
 8006ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f89d 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8007010:	e005      	b.n	800701e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f88f 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8a0 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 0310 	and.w	r3, r3, #16
 800702a:	2b00      	cmp	r3, #0
 800702c:	d020      	beq.n	8007070 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01b      	beq.n	8007070 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0210 	mvn.w	r2, #16
 8007040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2208      	movs	r2, #8
 8007046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f877 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f869 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f87a 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00c      	beq.n	8007094 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0201 	mvn.w	r2, #1
 800708c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fa fb9e 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00c      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80070ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f8dd 	bl	800727c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00c      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80070de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f8d5 	bl	8007290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00c      	beq.n	800710a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f834 	bl	8007172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00c      	beq.n	800712e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f06f 0220 	mvn.w	r2, #32
 8007126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f89d 	bl	8007268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a30      	ldr	r2, [pc, #192]	@ (800725c <TIM_Base_SetConfig+0xd4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_Base_SetConfig+0x20>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a6:	d108      	bne.n	80071ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a27      	ldr	r2, [pc, #156]	@ (800725c <TIM_Base_SetConfig+0xd4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00b      	beq.n	80071da <TIM_Base_SetConfig+0x52>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071c8:	d007      	beq.n	80071da <TIM_Base_SetConfig+0x52>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a24      	ldr	r2, [pc, #144]	@ (8007260 <TIM_Base_SetConfig+0xd8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d003      	beq.n	80071da <TIM_Base_SetConfig+0x52>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a23      	ldr	r2, [pc, #140]	@ (8007264 <TIM_Base_SetConfig+0xdc>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d108      	bne.n	80071ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a12      	ldr	r2, [pc, #72]	@ (800725c <TIM_Base_SetConfig+0xd4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d007      	beq.n	8007228 <TIM_Base_SetConfig+0xa0>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <TIM_Base_SetConfig+0xd8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_Base_SetConfig+0xa0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a10      	ldr	r2, [pc, #64]	@ (8007264 <TIM_Base_SetConfig+0xdc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d103      	bne.n	8007230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d105      	bne.n	800724e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f023 0201 	bic.w	r2, r3, #1
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	611a      	str	r2, [r3, #16]
  }
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400

08007268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e040      	b.n	8007338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fa feba 	bl	8002040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	@ 0x24
 80072d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fb0c 	bl	8007908 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f8af 	bl	8007454 <UART_SetConfig>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e01b      	b.n	8007338 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800730e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800731e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fb8b 	bl	8007a4c <UART_CheckIdleState>
 8007336:	4603      	mov	r3, r0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	@ 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007354:	2b20      	cmp	r3, #32
 8007356:	d177      	bne.n	8007448 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_UART_Transmit+0x24>
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e070      	b.n	800744a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2221      	movs	r2, #33	@ 0x21
 8007374:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007376:	f7fa fd11 	bl	8001d9c <HAL_GetTick>
 800737a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007394:	d108      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e003      	b.n	80073b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073b0:	e02f      	b.n	8007412 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	@ 0x80
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fbed 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e03b      	b.n	800744a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10b      	bne.n	80073f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e4:	b292      	uxth	r2, r2
 80073e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	3302      	adds	r3, #2
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e007      	b.n	8007400 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3301      	adds	r3, #1
 80073fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007418:	b29b      	uxth	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1c9      	bne.n	80073b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	2140      	movs	r1, #64	@ 0x40
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fbb7 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e005      	b.n	800744a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	e000      	b.n	800744a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007448:	2302      	movs	r3, #2
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	3720      	adds	r7, #32
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007458:	b08a      	sub	sp, #40	@ 0x28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	431a      	orrs	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	431a      	orrs	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	4313      	orrs	r3, r2
 800747a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b9e      	ldr	r3, [pc, #632]	@ (80076fc <UART_SetConfig+0x2a8>)
 8007484:	4013      	ands	r3, r2
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800748c:	430b      	orrs	r3, r1
 800748e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a93      	ldr	r2, [pc, #588]	@ (8007700 <UART_SetConfig+0x2ac>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074bc:	4313      	orrs	r3, r2
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d0:	430a      	orrs	r2, r1
 80074d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a8a      	ldr	r2, [pc, #552]	@ (8007704 <UART_SetConfig+0x2b0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d126      	bne.n	800752c <UART_SetConfig+0xd8>
 80074de:	4b8a      	ldr	r3, [pc, #552]	@ (8007708 <UART_SetConfig+0x2b4>)
 80074e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d81b      	bhi.n	8007524 <UART_SetConfig+0xd0>
 80074ec:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0xa0>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007505 	.word	0x08007505
 80074f8:	08007515 	.word	0x08007515
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	0800751d 	.word	0x0800751d
 8007504:	2301      	movs	r3, #1
 8007506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800750a:	e0ab      	b.n	8007664 <UART_SetConfig+0x210>
 800750c:	2302      	movs	r3, #2
 800750e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007512:	e0a7      	b.n	8007664 <UART_SetConfig+0x210>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800751a:	e0a3      	b.n	8007664 <UART_SetConfig+0x210>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007522:	e09f      	b.n	8007664 <UART_SetConfig+0x210>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800752a:	e09b      	b.n	8007664 <UART_SetConfig+0x210>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a76      	ldr	r2, [pc, #472]	@ (800770c <UART_SetConfig+0x2b8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d138      	bne.n	80075a8 <UART_SetConfig+0x154>
 8007536:	4b74      	ldr	r3, [pc, #464]	@ (8007708 <UART_SetConfig+0x2b4>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800753c:	f003 030c 	and.w	r3, r3, #12
 8007540:	2b0c      	cmp	r3, #12
 8007542:	d82d      	bhi.n	80075a0 <UART_SetConfig+0x14c>
 8007544:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <UART_SetConfig+0xf8>)
 8007546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754a:	bf00      	nop
 800754c:	08007581 	.word	0x08007581
 8007550:	080075a1 	.word	0x080075a1
 8007554:	080075a1 	.word	0x080075a1
 8007558:	080075a1 	.word	0x080075a1
 800755c:	08007591 	.word	0x08007591
 8007560:	080075a1 	.word	0x080075a1
 8007564:	080075a1 	.word	0x080075a1
 8007568:	080075a1 	.word	0x080075a1
 800756c:	08007589 	.word	0x08007589
 8007570:	080075a1 	.word	0x080075a1
 8007574:	080075a1 	.word	0x080075a1
 8007578:	080075a1 	.word	0x080075a1
 800757c:	08007599 	.word	0x08007599
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007586:	e06d      	b.n	8007664 <UART_SetConfig+0x210>
 8007588:	2302      	movs	r3, #2
 800758a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800758e:	e069      	b.n	8007664 <UART_SetConfig+0x210>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007596:	e065      	b.n	8007664 <UART_SetConfig+0x210>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800759e:	e061      	b.n	8007664 <UART_SetConfig+0x210>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075a6:	e05d      	b.n	8007664 <UART_SetConfig+0x210>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a58      	ldr	r2, [pc, #352]	@ (8007710 <UART_SetConfig+0x2bc>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d125      	bne.n	80075fe <UART_SetConfig+0x1aa>
 80075b2:	4b55      	ldr	r3, [pc, #340]	@ (8007708 <UART_SetConfig+0x2b4>)
 80075b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075bc:	2b30      	cmp	r3, #48	@ 0x30
 80075be:	d016      	beq.n	80075ee <UART_SetConfig+0x19a>
 80075c0:	2b30      	cmp	r3, #48	@ 0x30
 80075c2:	d818      	bhi.n	80075f6 <UART_SetConfig+0x1a2>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d00a      	beq.n	80075de <UART_SetConfig+0x18a>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d814      	bhi.n	80075f6 <UART_SetConfig+0x1a2>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <UART_SetConfig+0x182>
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d008      	beq.n	80075e6 <UART_SetConfig+0x192>
 80075d4:	e00f      	b.n	80075f6 <UART_SetConfig+0x1a2>
 80075d6:	2300      	movs	r3, #0
 80075d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075dc:	e042      	b.n	8007664 <UART_SetConfig+0x210>
 80075de:	2302      	movs	r3, #2
 80075e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e4:	e03e      	b.n	8007664 <UART_SetConfig+0x210>
 80075e6:	2304      	movs	r3, #4
 80075e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ec:	e03a      	b.n	8007664 <UART_SetConfig+0x210>
 80075ee:	2308      	movs	r3, #8
 80075f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075f4:	e036      	b.n	8007664 <UART_SetConfig+0x210>
 80075f6:	2310      	movs	r3, #16
 80075f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075fc:	e032      	b.n	8007664 <UART_SetConfig+0x210>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a3f      	ldr	r2, [pc, #252]	@ (8007700 <UART_SetConfig+0x2ac>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d12a      	bne.n	800765e <UART_SetConfig+0x20a>
 8007608:	4b3f      	ldr	r3, [pc, #252]	@ (8007708 <UART_SetConfig+0x2b4>)
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800760e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007616:	d01a      	beq.n	800764e <UART_SetConfig+0x1fa>
 8007618:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800761c:	d81b      	bhi.n	8007656 <UART_SetConfig+0x202>
 800761e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007622:	d00c      	beq.n	800763e <UART_SetConfig+0x1ea>
 8007624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007628:	d815      	bhi.n	8007656 <UART_SetConfig+0x202>
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <UART_SetConfig+0x1e2>
 800762e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007632:	d008      	beq.n	8007646 <UART_SetConfig+0x1f2>
 8007634:	e00f      	b.n	8007656 <UART_SetConfig+0x202>
 8007636:	2300      	movs	r3, #0
 8007638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763c:	e012      	b.n	8007664 <UART_SetConfig+0x210>
 800763e:	2302      	movs	r3, #2
 8007640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007644:	e00e      	b.n	8007664 <UART_SetConfig+0x210>
 8007646:	2304      	movs	r3, #4
 8007648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800764c:	e00a      	b.n	8007664 <UART_SetConfig+0x210>
 800764e:	2308      	movs	r3, #8
 8007650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007654:	e006      	b.n	8007664 <UART_SetConfig+0x210>
 8007656:	2310      	movs	r3, #16
 8007658:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800765c:	e002      	b.n	8007664 <UART_SetConfig+0x210>
 800765e:	2310      	movs	r3, #16
 8007660:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a25      	ldr	r2, [pc, #148]	@ (8007700 <UART_SetConfig+0x2ac>)
 800766a:	4293      	cmp	r3, r2
 800766c:	f040 808a 	bne.w	8007784 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007670:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007674:	2b08      	cmp	r3, #8
 8007676:	d824      	bhi.n	80076c2 <UART_SetConfig+0x26e>
 8007678:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <UART_SetConfig+0x22c>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076a5 	.word	0x080076a5
 8007684:	080076c3 	.word	0x080076c3
 8007688:	080076ad 	.word	0x080076ad
 800768c:	080076c3 	.word	0x080076c3
 8007690:	080076b3 	.word	0x080076b3
 8007694:	080076c3 	.word	0x080076c3
 8007698:	080076c3 	.word	0x080076c3
 800769c:	080076c3 	.word	0x080076c3
 80076a0:	080076bb 	.word	0x080076bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a4:	f7fd fada 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 80076a8:	61f8      	str	r0, [r7, #28]
        break;
 80076aa:	e010      	b.n	80076ce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ac:	4b19      	ldr	r3, [pc, #100]	@ (8007714 <UART_SetConfig+0x2c0>)
 80076ae:	61fb      	str	r3, [r7, #28]
        break;
 80076b0:	e00d      	b.n	80076ce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076b2:	f7fd fa3b 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 80076b6:	61f8      	str	r0, [r7, #28]
        break;
 80076b8:	e009      	b.n	80076ce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076be:	61fb      	str	r3, [r7, #28]
        break;
 80076c0:	e005      	b.n	80076ce <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8109 	beq.w	80078e8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d305      	bcc.n	80076f2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d912      	bls.n	8007718 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80076f8:	e0f6      	b.n	80078e8 <UART_SetConfig+0x494>
 80076fa:	bf00      	nop
 80076fc:	efff69f3 	.word	0xefff69f3
 8007700:	40008000 	.word	0x40008000
 8007704:	40013800 	.word	0x40013800
 8007708:	40021000 	.word	0x40021000
 800770c:	40004400 	.word	0x40004400
 8007710:	40004800 	.word	0x40004800
 8007714:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2200      	movs	r2, #0
 800771c:	461c      	mov	r4, r3
 800771e:	4615      	mov	r5, r2
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	022b      	lsls	r3, r5, #8
 800772a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800772e:	0222      	lsls	r2, r4, #8
 8007730:	68f9      	ldr	r1, [r7, #12]
 8007732:	6849      	ldr	r1, [r1, #4]
 8007734:	0849      	lsrs	r1, r1, #1
 8007736:	2000      	movs	r0, #0
 8007738:	4688      	mov	r8, r1
 800773a:	4681      	mov	r9, r0
 800773c:	eb12 0a08 	adds.w	sl, r2, r8
 8007740:	eb43 0b09 	adc.w	fp, r3, r9
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	607a      	str	r2, [r7, #4]
 800774e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007752:	4650      	mov	r0, sl
 8007754:	4659      	mov	r1, fp
 8007756:	f7f9 faa7 	bl	8000ca8 <__aeabi_uldivmod>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4613      	mov	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007768:	d308      	bcc.n	800777c <UART_SetConfig+0x328>
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007770:	d204      	bcs.n	800777c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	60da      	str	r2, [r3, #12]
 800777a:	e0b5      	b.n	80078e8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007782:	e0b1      	b.n	80078e8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778c:	d15d      	bne.n	800784a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800778e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007792:	2b08      	cmp	r3, #8
 8007794:	d827      	bhi.n	80077e6 <UART_SetConfig+0x392>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <UART_SetConfig+0x348>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077c9 	.word	0x080077c9
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	080077e7 	.word	0x080077e7
 80077ac:	080077d7 	.word	0x080077d7
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	080077e7 	.word	0x080077e7
 80077b8:	080077e7 	.word	0x080077e7
 80077bc:	080077df 	.word	0x080077df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c0:	f7fd fa4c 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 80077c4:	61f8      	str	r0, [r7, #28]
        break;
 80077c6:	e014      	b.n	80077f2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077c8:	f7fd fa5e 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 80077cc:	61f8      	str	r0, [r7, #28]
        break;
 80077ce:	e010      	b.n	80077f2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d0:	4b4c      	ldr	r3, [pc, #304]	@ (8007904 <UART_SetConfig+0x4b0>)
 80077d2:	61fb      	str	r3, [r7, #28]
        break;
 80077d4:	e00d      	b.n	80077f2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077d6:	f7fd f9a9 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 80077da:	61f8      	str	r0, [r7, #28]
        break;
 80077dc:	e009      	b.n	80077f2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077e2:	61fb      	str	r3, [r7, #28]
        break;
 80077e4:	e005      	b.n	80077f2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d077      	beq.n	80078e8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	005a      	lsls	r2, r3, #1
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	441a      	add	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b0f      	cmp	r3, #15
 8007812:	d916      	bls.n	8007842 <UART_SetConfig+0x3ee>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800781a:	d212      	bcs.n	8007842 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f023 030f 	bic.w	r3, r3, #15
 8007824:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	b29b      	uxth	r3, r3
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	b29a      	uxth	r2, r3
 8007832:	8afb      	ldrh	r3, [r7, #22]
 8007834:	4313      	orrs	r3, r2
 8007836:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	8afa      	ldrh	r2, [r7, #22]
 800783e:	60da      	str	r2, [r3, #12]
 8007840:	e052      	b.n	80078e8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007848:	e04e      	b.n	80078e8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800784a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800784e:	2b08      	cmp	r3, #8
 8007850:	d827      	bhi.n	80078a2 <UART_SetConfig+0x44e>
 8007852:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <UART_SetConfig+0x404>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007885 	.word	0x08007885
 8007860:	0800788d 	.word	0x0800788d
 8007864:	080078a3 	.word	0x080078a3
 8007868:	08007893 	.word	0x08007893
 800786c:	080078a3 	.word	0x080078a3
 8007870:	080078a3 	.word	0x080078a3
 8007874:	080078a3 	.word	0x080078a3
 8007878:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800787c:	f7fd f9ee 	bl	8004c5c <HAL_RCC_GetPCLK1Freq>
 8007880:	61f8      	str	r0, [r7, #28]
        break;
 8007882:	e014      	b.n	80078ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007884:	f7fd fa00 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 8007888:	61f8      	str	r0, [r7, #28]
        break;
 800788a:	e010      	b.n	80078ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b1d      	ldr	r3, [pc, #116]	@ (8007904 <UART_SetConfig+0x4b0>)
 800788e:	61fb      	str	r3, [r7, #28]
        break;
 8007890:	e00d      	b.n	80078ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fd f94b 	bl	8004b2c <HAL_RCC_GetSysClockFreq>
 8007896:	61f8      	str	r0, [r7, #28]
        break;
 8007898:	e009      	b.n	80078ae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800789e:	61fb      	str	r3, [r7, #28]
        break;
 80078a0:	e005      	b.n	80078ae <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078ac:	bf00      	nop
    }

    if (pclk != 0U)
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d019      	beq.n	80078e8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	085a      	lsrs	r2, r3, #1
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	441a      	add	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b0f      	cmp	r3, #15
 80078cc:	d909      	bls.n	80078e2 <UART_SetConfig+0x48e>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d4:	d205      	bcs.n	80078e2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60da      	str	r2, [r3, #12]
 80078e0:	e002      	b.n	80078e8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80078f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3728      	adds	r7, #40	@ 0x28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007902:	bf00      	nop
 8007904:	00f42400 	.word	0x00f42400

08007908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079be:	f003 0320 	and.w	r3, r3, #32
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01a      	beq.n	8007a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a06:	d10a      	bne.n	8007a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	605a      	str	r2, [r3, #4]
  }
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b098      	sub	sp, #96	@ 0x60
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a5c:	f7fa f99e 	bl	8001d9c <HAL_GetTick>
 8007a60:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d12e      	bne.n	8007ace <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f88c 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d021      	beq.n	8007ace <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aaa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e6      	bne.n	8007a8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e062      	b.n	8007b94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d149      	bne.n	8007b70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f856 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d03c      	beq.n	8007b70 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	623b      	str	r3, [r7, #32]
   return(result);
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	461a      	mov	r2, r3
 8007b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b16:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e6      	bne.n	8007af6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3308      	adds	r3, #8
 8007b46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b48:	61fa      	str	r2, [r7, #28]
 8007b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	69b9      	ldr	r1, [r7, #24]
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	617b      	str	r3, [r7, #20]
   return(result);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e011      	b.n	8007b94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3758      	adds	r7, #88	@ 0x58
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bac:	e04f      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d04b      	beq.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb6:	f7fa f8f1 	bl	8001d9c <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d302      	bcc.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e04e      	b.n	8007c6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d037      	beq.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b80      	cmp	r3, #128	@ 0x80
 8007be2:	d034      	beq.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b40      	cmp	r3, #64	@ 0x40
 8007be8:	d031      	beq.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d110      	bne.n	8007c1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2208      	movs	r2, #8
 8007bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f838 	bl	8007c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e029      	b.n	8007c6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c28:	d111      	bne.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f81e 	bl	8007c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e00f      	b.n	8007c6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4013      	ands	r3, r2
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	bf0c      	ite	eq
 8007c5e:	2301      	moveq	r3, #1
 8007c60:	2300      	movne	r3, #0
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	461a      	mov	r2, r3
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d0a0      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b095      	sub	sp, #84	@ 0x54
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ca2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e6      	bne.n	8007c7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e5      	bne.n	8007cb0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d118      	bne.n	8007d1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f023 0310 	bic.w	r3, r3, #16
 8007d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d0a:	61bb      	str	r3, [r7, #24]
 8007d0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6979      	ldr	r1, [r7, #20]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	613b      	str	r3, [r7, #16]
   return(result);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e6      	bne.n	8007cec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007d32:	bf00      	nop
 8007d34:	3754      	adds	r7, #84	@ 0x54
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8007d42:	f7f9 ff79 	bl	8001c38 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8007d46:	f000 f819 	bl	8007d7c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007d54:	f3bf 8f4f 	dsb	sy
}
 8007d58:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007d5a:	4b06      	ldr	r3, [pc, #24]	@ (8007d74 <__NVIC_SystemReset+0x24>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007d62:	4904      	ldr	r1, [pc, #16]	@ (8007d74 <__NVIC_SystemReset+0x24>)
 8007d64:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <__NVIC_SystemReset+0x28>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d6a:	f3bf 8f4f 	dsb	sy
}
 8007d6e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007d70:	bf00      	nop
 8007d72:	e7fd      	b.n	8007d70 <__NVIC_SystemReset+0x20>
 8007d74:	e000ed00 	.word	0xe000ed00
 8007d78:	05fa0004 	.word	0x05fa0004

08007d7c <LoRaWAN_Init>:
static void Thd_LmHandlerProcess(void *argument);




void LoRaWAN_Init(void){
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af02      	add	r7, sp, #8
	if (xTaskCreate(Thd_LmHandlerProcess, "Thd_LmHandlerProcess",
 8007d82:	4b1d      	ldr	r3, [pc, #116]	@ (8007df8 <LoRaWAN_Init+0x7c>)
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	2318      	movs	r3, #24
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007d90:	491a      	ldr	r1, [pc, #104]	@ (8007dfc <LoRaWAN_Init+0x80>)
 8007d92:	481b      	ldr	r0, [pc, #108]	@ (8007e00 <LoRaWAN_Init+0x84>)
 8007d94:	f001 fb50 	bl	8009438 <xTaskCreate>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d001      	beq.n	8007da2 <LoRaWAN_Init+0x26>
			CFG_LM_HANDLER_PROCESS_STACK_SIZE/4, NULL, CFG_LM_HANDLER_PROCESS_PRIORITY, &htask_lmhandler) != pdTRUE)
		Error_Handler();
 8007d9e:	f7f9 fd29 	bl	80017f4 <Error_Handler>

	if (xTaskCreate(Thd_LoraSendProcess, "Thd_LoraSendProcess",
 8007da2:	2300      	movs	r3, #0
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	2310      	movs	r3, #16
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	2300      	movs	r3, #0
 8007dac:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007db0:	4914      	ldr	r1, [pc, #80]	@ (8007e04 <LoRaWAN_Init+0x88>)
 8007db2:	4815      	ldr	r0, [pc, #84]	@ (8007e08 <LoRaWAN_Init+0x8c>)
 8007db4:	f001 fb40 	bl	8009438 <xTaskCreate>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d001      	beq.n	8007dc2 <LoRaWAN_Init+0x46>
			CFG_APP_LORA_PROCESS_STACK_SIZE/4, NULL, CFG_APP_LORA_PROCESS_PRIORITY, NULL) != pdTRUE)
		Error_Handler();
 8007dbe:	f7f9 fd19 	bl	80017f4 <Error_Handler>

	LoraInfo_Init();
 8007dc2:	f000 f995 	bl	80080f0 <LoraInfo_Init>
	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8007dc6:	4911      	ldr	r1, [pc, #68]	@ (8007e0c <LoRaWAN_Init+0x90>)
 8007dc8:	4811      	ldr	r0, [pc, #68]	@ (8007e10 <LoRaWAN_Init+0x94>)
 8007dca:	f005 f931 	bl	800d030 <LmHandlerInit>
	LmHandlerConfigure(&LmHandlerParams);
 8007dce:	4811      	ldr	r0, [pc, #68]	@ (8007e14 <LoRaWAN_Init+0x98>)
 8007dd0:	f005 f98a 	bl	800d0e8 <LmHandlerConfigure>

	LmHandlerJoin(ActivationType, ForceRejoin);
 8007dd4:	4b10      	ldr	r3, [pc, #64]	@ (8007e18 <LoRaWAN_Init+0x9c>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	4a10      	ldr	r2, [pc, #64]	@ (8007e1c <LoRaWAN_Init+0xa0>)
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f005 fa50 	bl	800d284 <LmHandlerJoin>
	LOGI(TAG, "JOINING");
 8007de4:	4b0e      	ldr	r3, [pc, #56]	@ (8007e20 <LoRaWAN_Init+0xa4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a0e      	ldr	r2, [pc, #56]	@ (8007e24 <LoRaWAN_Init+0xa8>)
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f012 fab5 	bl	801a35c <LOG_LEVEL_INFO>
}
 8007df2:	bf00      	nop
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20000b58 	.word	0x20000b58
 8007dfc:	08022350 	.word	0x08022350
 8007e00:	08007e29 	.word	0x08007e29
 8007e04:	08022368 	.word	0x08022368
 8007e08:	08007e49 	.word	0x08007e49
 8007e0c:	01030000 	.word	0x01030000
 8007e10:	20000024 	.word	0x20000024
 8007e14:	20000070 	.word	0x20000070
 8007e18:	20000020 	.word	0x20000020
 8007e1c:	20000021 	.word	0x20000021
 8007e20:	20000010 	.word	0x20000010
 8007e24:	0802237c 	.word	0x0802237c

08007e28 <Thd_LmHandlerProcess>:

static void Thd_LmHandlerProcess(void *argument){
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	uint32_t notify_val;
	while(1){
		xTaskNotifyWait(0, 0, &notify_val, portMAX_DELAY);
 8007e30:	f107 020c 	add.w	r2, r7, #12
 8007e34:	f04f 33ff 	mov.w	r3, #4294967295
 8007e38:	2100      	movs	r1, #0
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f002 fb04 	bl	800a448 <xTaskNotifyWait>
		LmHandlerProcess();
 8007e40:	f005 fa06 	bl	800d250 <LmHandlerProcess>
		xTaskNotifyWait(0, 0, &notify_val, portMAX_DELAY);
 8007e44:	bf00      	nop
 8007e46:	e7f3      	b.n	8007e30 <Thd_LmHandlerProcess+0x8>

08007e48 <Thd_LoraSendProcess>:
		(void)notify_val;
	}
}

static void Thd_LoraSendProcess(void *argument){
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
	UNUSED(argument);
	while(1){
		SendTxData();
 8007e50:	f000 f824 	bl	8007e9c <SendTxData>
		vTaskDelay(APP_TX_DUTYCYCLE);
 8007e54:	f242 7010 	movw	r0, #10000	@ 0x2710
 8007e58:	f001 fcac 	bl	80097b4 <vTaskDelay>
		SendTxData();
 8007e5c:	bf00      	nop
 8007e5e:	e7f7      	b.n	8007e50 <Thd_LoraSendProcess+0x8>

08007e60 <OnRxData>:
	}
}



static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params){
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
	if(appData->BufferSize > 0)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00c      	beq.n	8007e8c <OnRxData+0x2c>
		LOGW(TAG, "OnRxData: %s, RSSI: %d", appData->Buffer, params->Rssi);
 8007e72:	4b08      	ldr	r3, [pc, #32]	@ (8007e94 <OnRxData+0x34>)
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	4a04      	ldr	r2, [pc, #16]	@ (8007e98 <OnRxData+0x38>)
 8007e86:	2100      	movs	r1, #0
 8007e88:	f012 fa48 	bl	801a31c <LOG_LEVEL_WARNING>
}
 8007e8c:	bf00      	nop
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20000010 	.word	0x20000010
 8007e98:	08022384 	.word	0x08022384

08007e9c <SendTxData>:

static void SendTxData(void){
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	@ 0x28
 8007ea0:	af02      	add	r7, sp, #8
	LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8007ea2:	23ff      	movs	r3, #255	@ 0xff
 8007ea4:	75fb      	strb	r3, [r7, #23]
	UTIL_TIMER_Time_t nextTxIn = 0;
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	e9c7 2306 	strd	r2, r3, [r7, #24]
	LmHandlerAppData_t appdata;

	char json[6] = "HELLO";
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8007f30 <SendTxData+0x94>)
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007eba:	6018      	str	r0, [r3, #0]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	8019      	strh	r1, [r3, #0]
	appdata.Port = LORAWAN_USER_APP_PORT;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	733b      	strb	r3, [r7, #12]
	appdata.Buffer = (uint8_t *)json;
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	613b      	str	r3, [r7, #16]
	appdata.BufferSize = 5;
 8007ec8:	2305      	movs	r3, #5
 8007eca:	737b      	strb	r3, [r7, #13]

	status = LmHandlerSend(&appdata, LmHandlerParams.IsTxConfirmed, true);
 8007ecc:	4b19      	ldr	r3, [pc, #100]	@ (8007f34 <SendTxData+0x98>)
 8007ece:	78d9      	ldrb	r1, [r3, #3]
 8007ed0:	f107 030c 	add.w	r3, r7, #12
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f005 fa94 	bl	800d404 <LmHandlerSend>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]
	if (status == LORAMAC_HANDLER_SUCCESS) {
 8007ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d107      	bne.n	8007ef8 <SendTxData+0x5c>
		LOGI(TAG, "SENT UPLINK.");
 8007ee8:	4b13      	ldr	r3, [pc, #76]	@ (8007f38 <SendTxData+0x9c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a13      	ldr	r2, [pc, #76]	@ (8007f3c <SendTxData+0xa0>)
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f012 fa33 	bl	801a35c <LOG_LEVEL_INFO>
	else if (status == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED) {
       if(nextTxIn > 0)
           nextTxIn = LmHandlerGetDutyCycleWaitTime();
       LOGI(TAG, "Next Tx in %lums", nextTxIn);
	}
}
 8007ef6:	e016      	b.n	8007f26 <SendTxData+0x8a>
	else if (status == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED) {
 8007ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007efc:	f113 0f06 	cmn.w	r3, #6
 8007f00:	d111      	bne.n	8007f26 <SendTxData+0x8a>
       if(nextTxIn > 0)
 8007f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	d003      	beq.n	8007f12 <SendTxData+0x76>
           nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8007f0a:	f005 f9ad 	bl	800d268 <LmHandlerGetDutyCycleWaitTime>
 8007f0e:	e9c7 0106 	strd	r0, r1, [r7, #24]
       LOGI(TAG, "Next Tx in %lums", nextTxIn);
 8007f12:	4b09      	ldr	r3, [pc, #36]	@ (8007f38 <SendTxData+0x9c>)
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f1a:	e9cd 2300 	strd	r2, r3, [sp]
 8007f1e:	4a08      	ldr	r2, [pc, #32]	@ (8007f40 <SendTxData+0xa4>)
 8007f20:	2100      	movs	r1, #0
 8007f22:	f012 fa1b 	bl	801a35c <LOG_LEVEL_INFO>
}
 8007f26:	bf00      	nop
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	080223c0 	.word	0x080223c0
 8007f34:	20000070 	.word	0x20000070
 8007f38:	20000010 	.word	0x20000010
 8007f3c:	0802239c 	.word	0x0802239c
 8007f40:	080223ac 	.word	0x080223ac

08007f44 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params){
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	if(params->Status == LORAMAC_EVENT_INFO_STATUS_OK){
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <OnTxData+0x1e>
		LOGI(TAG, "TX COMPLETE.");
 8007f54:	4b05      	ldr	r3, [pc, #20]	@ (8007f6c <OnTxData+0x28>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a05      	ldr	r2, [pc, #20]	@ (8007f70 <OnTxData+0x2c>)
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f012 f9fd 	bl	801a35c <LOG_LEVEL_INFO>
	}
}
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000010 	.word	0x20000010
 8007f70:	080223c8 	.word	0x080223c8

08007f74 <OnJoinRequest>:


static void OnJoinRequest(LmHandlerJoinParams_t *joinParams){
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	if(joinParams->Status == LORAMAC_HANDLER_SUCCESS){
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d107      	bne.n	8007f96 <OnJoinRequest+0x22>
		LOGI(TAG, "JOINED.");
 8007f86:	4b09      	ldr	r3, [pc, #36]	@ (8007fac <OnJoinRequest+0x38>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a09      	ldr	r2, [pc, #36]	@ (8007fb0 <OnJoinRequest+0x3c>)
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f012 f9e4 	bl	801a35c <LOG_LEVEL_INFO>
	}
	else{
		LOGE(TAG, "JOIN ERROR, TRYING AGAIN.");
	}
}
 8007f94:	e006      	b.n	8007fa4 <OnJoinRequest+0x30>
		LOGE(TAG, "JOIN ERROR, TRYING AGAIN.");
 8007f96:	4b05      	ldr	r3, [pc, #20]	@ (8007fac <OnJoinRequest+0x38>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a06      	ldr	r2, [pc, #24]	@ (8007fb4 <OnJoinRequest+0x40>)
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f012 f99c 	bl	801a2dc <LOG_LEVEL_ERROR>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000010 	.word	0x20000010
 8007fb0:	080223d8 	.word	0x080223d8
 8007fb4:	080223e0 	.word	0x080223e0

08007fb8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void){
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af02      	add	r7, sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fbe:	f3ef 8305 	mrs	r3, IPSR
 8007fc2:	607b      	str	r3, [r7, #4]
  return(result);
 8007fc4:	687b      	ldr	r3, [r7, #4]
	if(__get_IPSR() == 0U) xTaskNotify(htask_lmhandler, 1, eNoAction);
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d107      	bne.n	8007fda <OnMacProcessNotify+0x22>
 8007fca:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <OnMacProcessNotify+0x58>)
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	f002 fa92 	bl	800a4fc <xTaskGenericNotify>
	else {
		BaseType_t yield;
		xTaskNotifyFromISR(htask_lmhandler, 1, eNoAction, &yield);
		if(yield) portEND_SWITCHING_ISR (yield);
	}
}
 8007fd8:	e016      	b.n	8008008 <OnMacProcessNotify+0x50>
		xTaskNotifyFromISR(htask_lmhandler, 1, eNoAction, &yield);
 8007fda:	4b0d      	ldr	r3, [pc, #52]	@ (8008010 <OnMacProcessNotify+0x58>)
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	463b      	mov	r3, r7
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	f002 fb42 	bl	800a670 <xTaskGenericNotifyFromISR>
		if(yield) portEND_SWITCHING_ISR (yield);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <OnMacProcessNotify+0x50>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d007      	beq.n	8008008 <OnMacProcessNotify+0x50>
 8007ff8:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <OnMacProcessNotify+0x5c>)
 8007ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	f3bf 8f6f 	isb	sy
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000b58 	.word	0x20000b58
 8008014:	e000ed04 	.word	0xe000ed04

08008018 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity){
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	TxPeriodicity = periodicity;
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	2000      	movs	r0, #0
 8008024:	460a      	mov	r2, r1
 8008026:	4603      	mov	r3, r0
 8008028:	490a      	ldr	r1, [pc, #40]	@ (8008054 <OnTxPeriodicityChanged+0x3c>)
 800802a:	e9c1 2300 	strd	r2, r3, [r1]

	if (TxPeriodicity == 0){
 800802e:	4b09      	ldr	r3, [pc, #36]	@ (8008054 <OnTxPeriodicityChanged+0x3c>)
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	4313      	orrs	r3, r2
 8008036:	d106      	bne.n	8008046 <OnTxPeriodicityChanged+0x2e>
		TxPeriodicity = APP_TX_DUTYCYCLE;
 8008038:	4906      	ldr	r1, [pc, #24]	@ (8008054 <OnTxPeriodicityChanged+0x3c>)
 800803a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	20000018 	.word	0x20000018

08008058 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed){
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
	LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8008062:	4a04      	ldr	r2, [pc, #16]	@ (8008074 <OnTxFrameCtrlChanged+0x1c>)
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	70d3      	strb	r3, [r2, #3]
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	20000070 	.word	0x20000070

08008078 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity){
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
	LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8008082:	4a04      	ldr	r2, [pc, #16]	@ (8008094 <OnPingSlotPeriodicityChanged+0x1c>)
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	7413      	strb	r3, [r2, #16]
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr
 8008094:	20000070 	.word	0x20000070

08008098 <OnSystemReset>:

static void OnSystemReset(void){
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
	if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET)){
 800809c:	f005 feb6 	bl	800de0c <LmHandlerHalt>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <OnSystemReset+0x1c>
 80080a6:	f005 f991 	bl	800d3cc <LmHandlerJoinStatus>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <OnSystemReset+0x1c>
		__NVIC_SystemReset();
 80080b0:	f7ff fe4e 	bl	8007d50 <__NVIC_SystemReset>
	}
}
 80080b4:	bf00      	nop
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <OnBeaconStatusChange>:


static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params){}
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void){}
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	bf00      	nop
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <OnClassChange>:
static void OnClassChange(DeviceClass_t deviceClass){}
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	4603      	mov	r3, r0
 80080e2:	71fb      	strb	r3, [r7, #7]
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 80080f4:	4b11      	ldr	r3, [pc, #68]	@ (800813c <LoraInfo_Init+0x4c>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80080fa:	4b10      	ldr	r3, [pc, #64]	@ (800813c <LoraInfo_Init+0x4c>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8008100:	4b0e      	ldr	r3, [pc, #56]	@ (800813c <LoraInfo_Init+0x4c>)
 8008102:	2200      	movs	r2, #0
 8008104:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8008106:	4b0d      	ldr	r3, [pc, #52]	@ (800813c <LoraInfo_Init+0x4c>)
 8008108:	2200      	movs	r2, #0
 800810a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800810c:	4b0b      	ldr	r3, [pc, #44]	@ (800813c <LoraInfo_Init+0x4c>)
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f043 0301 	orr.w	r3, r3, #1
 8008114:	4a09      	ldr	r2, [pc, #36]	@ (800813c <LoraInfo_Init+0x4c>)
 8008116:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8008118:	4b08      	ldr	r3, [pc, #32]	@ (800813c <LoraInfo_Init+0x4c>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <LoraInfo_Init+0x34>
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
//    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
//    {
//      /* Wait that all printfs are completed*/
//    }
    while (1) {} /* At least one region shall be defined */
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <LoraInfo_Init+0x30>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8008124:	4b05      	ldr	r3, [pc, #20]	@ (800813c <LoraInfo_Init+0x4c>)
 8008126:	2200      	movs	r2, #0
 8008128:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800812a:	4b04      	ldr	r3, [pc, #16]	@ (800813c <LoraInfo_Init+0x4c>)
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8008130:	bf00      	nop
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	20000b5c 	.word	0x20000b5c

08008140 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8008144:	4b02      	ldr	r3, [pc, #8]	@ (8008150 <LoraInfo_GetPtr+0x10>)
}
 8008146:	4618      	mov	r0, r3
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	20000b5c 	.word	0x20000b5c

08008154 <__NVIC_SetPriority>:
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	6039      	str	r1, [r7, #0]
 800815e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008164:	2b00      	cmp	r3, #0
 8008166:	db0a      	blt.n	800817e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	b2da      	uxtb	r2, r3
 800816c:	490c      	ldr	r1, [pc, #48]	@ (80081a0 <__NVIC_SetPriority+0x4c>)
 800816e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008172:	0112      	lsls	r2, r2, #4
 8008174:	b2d2      	uxtb	r2, r2
 8008176:	440b      	add	r3, r1
 8008178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800817c:	e00a      	b.n	8008194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	b2da      	uxtb	r2, r3
 8008182:	4908      	ldr	r1, [pc, #32]	@ (80081a4 <__NVIC_SetPriority+0x50>)
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	3b04      	subs	r3, #4
 800818c:	0112      	lsls	r2, r2, #4
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	440b      	add	r3, r1
 8008192:	761a      	strb	r2, [r3, #24]
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	e000e100 	.word	0xe000e100
 80081a4:	e000ed00 	.word	0xe000ed00

080081a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80081ac:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <SysTick_Handler+0x1c>)
 80081ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80081b0:	f001 ffbc 	bl	800a12c <xTaskGetSchedulerState>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d001      	beq.n	80081be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80081ba:	f003 f8ad 	bl	800b318 <xPortSysTickHandler>
  }
}
 80081be:	bf00      	nop
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	e000e010 	.word	0xe000e010

080081c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80081cc:	2100      	movs	r1, #0
 80081ce:	f06f 0004 	mvn.w	r0, #4
 80081d2:	f7ff ffbf 	bl	8008154 <__NVIC_SetPriority>
#endif
}
 80081d6:	bf00      	nop
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e2:	f3ef 8305 	mrs	r3, IPSR
 80081e6:	603b      	str	r3, [r7, #0]
  return(result);
 80081e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081ee:	f06f 0305 	mvn.w	r3, #5
 80081f2:	607b      	str	r3, [r7, #4]
 80081f4:	e00c      	b.n	8008210 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008220 <osKernelInitialize+0x44>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081fe:	4b08      	ldr	r3, [pc, #32]	@ (8008220 <osKernelInitialize+0x44>)
 8008200:	2201      	movs	r2, #1
 8008202:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008204:	2300      	movs	r3, #0
 8008206:	607b      	str	r3, [r7, #4]
 8008208:	e002      	b.n	8008210 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800820a:	f04f 33ff 	mov.w	r3, #4294967295
 800820e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008210:	687b      	ldr	r3, [r7, #4]
}
 8008212:	4618      	mov	r0, r3
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000b6c 	.word	0x20000b6c

08008224 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800822a:	f3ef 8305 	mrs	r3, IPSR
 800822e:	603b      	str	r3, [r7, #0]
  return(result);
 8008230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008236:	f06f 0305 	mvn.w	r3, #5
 800823a:	607b      	str	r3, [r7, #4]
 800823c:	e010      	b.n	8008260 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800823e:	4b0b      	ldr	r3, [pc, #44]	@ (800826c <osKernelStart+0x48>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d109      	bne.n	800825a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008246:	f7ff ffbf 	bl	80081c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800824a:	4b08      	ldr	r3, [pc, #32]	@ (800826c <osKernelStart+0x48>)
 800824c:	2202      	movs	r2, #2
 800824e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008250:	f001 fae6 	bl	8009820 <vTaskStartScheduler>
      stat = osOK;
 8008254:	2300      	movs	r3, #0
 8008256:	607b      	str	r3, [r7, #4]
 8008258:	e002      	b.n	8008260 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008260:	687b      	ldr	r3, [r7, #4]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000b6c 	.word	0x20000b6c

08008270 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b08e      	sub	sp, #56	@ 0x38
 8008274:	af04      	add	r7, sp, #16
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008280:	f3ef 8305 	mrs	r3, IPSR
 8008284:	617b      	str	r3, [r7, #20]
  return(result);
 8008286:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008288:	2b00      	cmp	r3, #0
 800828a:	d17e      	bne.n	800838a <osThreadNew+0x11a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d07b      	beq.n	800838a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008292:	2380      	movs	r3, #128	@ 0x80
 8008294:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008296:	2318      	movs	r3, #24
 8008298:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800829e:	f04f 33ff 	mov.w	r3, #4294967295
 80082a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d045      	beq.n	8008336 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <osThreadNew+0x48>
        name = attr->name;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <osThreadNew+0x6e>
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b38      	cmp	r3, #56	@ 0x38
 80082d0:	d805      	bhi.n	80082de <osThreadNew+0x6e>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <osThreadNew+0x72>
        return (NULL);
 80082de:	2300      	movs	r3, #0
 80082e0:	e054      	b.n	800838c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	089b      	lsrs	r3, r3, #2
 80082f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00e      	beq.n	8008318 <osThreadNew+0xa8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8008300:	d90a      	bls.n	8008318 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008306:	2b00      	cmp	r3, #0
 8008308:	d006      	beq.n	8008318 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <osThreadNew+0xa8>
        mem = 1;
 8008312:	2301      	movs	r3, #1
 8008314:	61bb      	str	r3, [r7, #24]
 8008316:	e010      	b.n	800833a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10c      	bne.n	800833a <osThreadNew+0xca>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <osThreadNew+0xca>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <osThreadNew+0xca>
          mem = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	61bb      	str	r3, [r7, #24]
 8008334:	e001      	b.n	800833a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d110      	bne.n	8008362 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008348:	9202      	str	r2, [sp, #8]
 800834a:	9301      	str	r3, [sp, #4]
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6a3a      	ldr	r2, [r7, #32]
 8008354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f001 f80e 	bl	8009378 <xTaskCreateStatic>
 800835c:	4603      	mov	r3, r0
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	e013      	b.n	800838a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d110      	bne.n	800838a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	b29a      	uxth	r2, r3
 800836c:	f107 0310 	add.w	r3, r7, #16
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f001 f85c 	bl	8009438 <xTaskCreate>
 8008380:	4603      	mov	r3, r0
 8008382:	2b01      	cmp	r3, #1
 8008384:	d001      	beq.n	800838a <osThreadNew+0x11a>
            hTask = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800838a:	693b      	ldr	r3, [r7, #16]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3728      	adds	r7, #40	@ 0x28
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800839c:	f3ef 8305 	mrs	r3, IPSR
 80083a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80083a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <osDelay+0x1c>
    stat = osErrorISR;
 80083a8:	f06f 0305 	mvn.w	r3, #5
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	e007      	b.n	80083c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 f9fa 	bl	80097b4 <vTaskDelay>
    }
  }

  return (stat);
 80083c0:	68fb      	ldr	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4a07      	ldr	r2, [pc, #28]	@ (80083f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80083dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4a06      	ldr	r2, [pc, #24]	@ (80083fc <vApplicationGetIdleTaskMemory+0x30>)
 80083e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2280      	movs	r2, #128	@ 0x80
 80083e8:	601a      	str	r2, [r3, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20000b70 	.word	0x20000b70
 80083fc:	20000bcc 	.word	0x20000bcc

08008400 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4a07      	ldr	r2, [pc, #28]	@ (800842c <vApplicationGetTimerTaskMemory+0x2c>)
 8008410:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	4a06      	ldr	r2, [pc, #24]	@ (8008430 <vApplicationGetTimerTaskMemory+0x30>)
 8008416:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800841e:	601a      	str	r2, [r3, #0]
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	20000dcc 	.word	0x20000dcc
 8008430:	20000e28 	.word	0x20000e28

08008434 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f103 0208 	add.w	r2, r3, #8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f103 0208 	add.w	r2, r3, #8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f103 0208 	add.w	r2, r3, #8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	601a      	str	r2, [r3, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d103      	bne.n	80084f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e00c      	b.n	8008510 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3308      	adds	r3, #8
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e002      	b.n	8008504 <vListInsert+0x2e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	429a      	cmp	r2, r3
 800850e:	d2f6      	bcs.n	80084fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
}
 800853c:	bf00      	nop
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6892      	ldr	r2, [r2, #8]
 800855e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6852      	ldr	r2, [r2, #4]
 8008568:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d103      	bne.n	800857c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085c2:	bf00      	nop
 80085c4:	bf00      	nop
 80085c6:	e7fd      	b.n	80085c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80085c8:	f002 fe16 	bl	800b1f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085d8:	fb01 f303 	mul.w	r3, r1, r3
 80085dc:	441a      	add	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f8:	3b01      	subs	r3, #1
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085fe:	fb01 f303 	mul.w	r3, r1, r3
 8008602:	441a      	add	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	22ff      	movs	r2, #255	@ 0xff
 800860c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	22ff      	movs	r2, #255	@ 0xff
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d114      	bne.n	8008648 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01a      	beq.n	800865c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	3310      	adds	r3, #16
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fbac 	bl	8009d88 <xTaskRemoveFromEventList>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d012      	beq.n	800865c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008636:	4b0d      	ldr	r3, [pc, #52]	@ (800866c <xQueueGenericReset+0xd0>)
 8008638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	e009      	b.n	800865c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3310      	adds	r3, #16
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff fef1 	bl	8008434 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3324      	adds	r3, #36	@ 0x24
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff feec 	bl	8008434 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800865c:	f002 fdfe 	bl	800b25c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008660:	2301      	movs	r3, #1
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08e      	sub	sp, #56	@ 0x38
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10b      	bne.n	800869c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008696:	bf00      	nop
 8008698:	bf00      	nop
 800869a:	e7fd      	b.n	8008698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10b      	bne.n	80086ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80086a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop
 80086b8:	e7fd      	b.n	80086b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <xQueueGenericCreateStatic+0x56>
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <xQueueGenericCreateStatic+0x5a>
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <xQueueGenericCreateStatic+0x5c>
 80086ca:	2300      	movs	r3, #0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80086d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	623b      	str	r3, [r7, #32]
}
 80086e2:	bf00      	nop
 80086e4:	bf00      	nop
 80086e6:	e7fd      	b.n	80086e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <xQueueGenericCreateStatic+0x84>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <xQueueGenericCreateStatic+0x88>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <xQueueGenericCreateStatic+0x8a>
 80086f8:	2300      	movs	r3, #0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	61fb      	str	r3, [r7, #28]
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008716:	2350      	movs	r3, #80	@ 0x50
 8008718:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b50      	cmp	r3, #80	@ 0x50
 800871e:	d00b      	beq.n	8008738 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	61bb      	str	r3, [r7, #24]
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	e7fd      	b.n	8008734 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008738:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800873e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00d      	beq.n	8008760 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800874c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	4613      	mov	r3, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f840 	bl	80087e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008762:	4618      	mov	r0, r3
 8008764:	3730      	adds	r7, #48	@ 0x30
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800876a:	b580      	push	{r7, lr}
 800876c:	b08a      	sub	sp, #40	@ 0x28
 800876e:	af02      	add	r7, sp, #8
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	4613      	mov	r3, r2
 8008776:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10b      	bne.n	8008796 <xQueueGenericCreate+0x2c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	613b      	str	r3, [r7, #16]
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	e7fd      	b.n	8008792 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	fb02 f303 	mul.w	r3, r2, r3
 800879e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	3350      	adds	r3, #80	@ 0x50
 80087a4:	4618      	mov	r0, r3
 80087a6:	f002 fe49 	bl	800b43c <pvPortMalloc>
 80087aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d011      	beq.n	80087d6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	3350      	adds	r3, #80	@ 0x50
 80087ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087c4:	79fa      	ldrb	r2, [r7, #7]
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	4613      	mov	r3, r2
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 f805 	bl	80087e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087d6:	69bb      	ldr	r3, [r7, #24]
	}
 80087d8:	4618      	mov	r0, r3
 80087da:	3720      	adds	r7, #32
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
 80087ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d103      	bne.n	80087fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	e002      	b.n	8008802 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800880e:	2101      	movs	r1, #1
 8008810:	69b8      	ldr	r0, [r7, #24]
 8008812:	f7ff fec3 	bl	800859c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	@ 0x38
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008836:	2300      	movs	r3, #0
 8008838:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10b      	bne.n	800885c <xQueueGenericSend+0x34>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008856:	bf00      	nop
 8008858:	bf00      	nop
 800885a:	e7fd      	b.n	8008858 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d103      	bne.n	800886a <xQueueGenericSend+0x42>
 8008862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <xQueueGenericSend+0x46>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <xQueueGenericSend+0x48>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10b      	bne.n	800888c <xQueueGenericSend+0x64>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d103      	bne.n	800889a <xQueueGenericSend+0x72>
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <xQueueGenericSend+0x76>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <xQueueGenericSend+0x78>
 800889e:	2300      	movs	r3, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <xQueueGenericSend+0x94>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	623b      	str	r3, [r7, #32]
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088bc:	f001 fc36 	bl	800a12c <xTaskGetSchedulerState>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d102      	bne.n	80088cc <xQueueGenericSend+0xa4>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <xQueueGenericSend+0xa8>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e000      	b.n	80088d2 <xQueueGenericSend+0xaa>
 80088d0:	2300      	movs	r3, #0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10b      	bne.n	80088ee <xQueueGenericSend+0xc6>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	61fb      	str	r3, [r7, #28]
}
 80088e8:	bf00      	nop
 80088ea:	bf00      	nop
 80088ec:	e7fd      	b.n	80088ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088ee:	f002 fc83 	bl	800b1f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d302      	bcc.n	8008904 <xQueueGenericSend+0xdc>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d129      	bne.n	8008958 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800890a:	f000 fbc7 	bl	800909c <prvCopyDataToQueue>
 800890e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d010      	beq.n	800893a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891a:	3324      	adds	r3, #36	@ 0x24
 800891c:	4618      	mov	r0, r3
 800891e:	f001 fa33 	bl	8009d88 <xTaskRemoveFromEventList>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d013      	beq.n	8008950 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008928:	4b3f      	ldr	r3, [pc, #252]	@ (8008a28 <xQueueGenericSend+0x200>)
 800892a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	e00a      	b.n	8008950 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d007      	beq.n	8008950 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008940:	4b39      	ldr	r3, [pc, #228]	@ (8008a28 <xQueueGenericSend+0x200>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008950:	f002 fc84 	bl	800b25c <vPortExitCritical>
				return pdPASS;
 8008954:	2301      	movs	r3, #1
 8008956:	e063      	b.n	8008a20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800895e:	f002 fc7d 	bl	800b25c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008962:	2300      	movs	r3, #0
 8008964:	e05c      	b.n	8008a20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008968:	2b00      	cmp	r3, #0
 800896a:	d106      	bne.n	800897a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800896c:	f107 0314 	add.w	r3, r7, #20
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fa6d 	bl	8009e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008976:	2301      	movs	r3, #1
 8008978:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800897a:	f002 fc6f 	bl	800b25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800897e:	f000 ffb7 	bl	80098f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008982:	f002 fc39 	bl	800b1f8 <vPortEnterCritical>
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800898c:	b25b      	sxtb	r3, r3
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d103      	bne.n	800899c <xQueueGenericSend+0x174>
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800899c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089a2:	b25b      	sxtb	r3, r3
 80089a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a8:	d103      	bne.n	80089b2 <xQueueGenericSend+0x18a>
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089b2:	f002 fc53 	bl	800b25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089b6:	1d3a      	adds	r2, r7, #4
 80089b8:	f107 0314 	add.w	r3, r7, #20
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 fa5c 	bl	8009e7c <xTaskCheckForTimeOut>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d124      	bne.n	8008a14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089cc:	f000 fc5e 	bl	800928c <prvIsQueueFull>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d018      	beq.n	8008a08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d8:	3310      	adds	r3, #16
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f001 f980 	bl	8009ce4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80089e6:	f000 fbe9 	bl	80091bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089ea:	f000 ff8f 	bl	800990c <xTaskResumeAll>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f47f af7c 	bne.w	80088ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80089f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a28 <xQueueGenericSend+0x200>)
 80089f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fc:	601a      	str	r2, [r3, #0]
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	e772      	b.n	80088ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a0a:	f000 fbd7 	bl	80091bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a0e:	f000 ff7d 	bl	800990c <xTaskResumeAll>
 8008a12:	e76c      	b.n	80088ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a16:	f000 fbd1 	bl	80091bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a1a:	f000 ff77 	bl	800990c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3738      	adds	r7, #56	@ 0x38
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b090      	sub	sp, #64	@ 0x40
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10b      	bne.n	8008a5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	e7fd      	b.n	8008a58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <xQueueGenericSendFromISR+0x3e>
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <xQueueGenericSendFromISR+0x42>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <xQueueGenericSendFromISR+0x44>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10b      	bne.n	8008a8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	e7fd      	b.n	8008a88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d103      	bne.n	8008a9a <xQueueGenericSendFromISR+0x6e>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d101      	bne.n	8008a9e <xQueueGenericSendFromISR+0x72>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <xQueueGenericSendFromISR+0x74>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10b      	bne.n	8008abc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	623b      	str	r3, [r7, #32]
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008abc:	f002 fc7c 	bl	800b3b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ac0:	f3ef 8211 	mrs	r2, BASEPRI
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61fa      	str	r2, [r7, #28]
 8008ad6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ad8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d302      	bcc.n	8008aee <xQueueGenericSendFromISR+0xc2>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d12f      	bne.n	8008b4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008af4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b04:	f000 faca 	bl	800909c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d112      	bne.n	8008b38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d016      	beq.n	8008b48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1c:	3324      	adds	r3, #36	@ 0x24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f001 f932 	bl	8009d88 <xTaskRemoveFromEventList>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00e      	beq.n	8008b48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00b      	beq.n	8008b48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	e007      	b.n	8008b48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	b25a      	sxtb	r2, r3
 8008b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b4c:	e001      	b.n	8008b52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3740      	adds	r7, #64	@ 0x40
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08e      	sub	sp, #56	@ 0x38
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10b      	bne.n	8008b94 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	623b      	str	r3, [r7, #32]
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	61fb      	str	r3, [r7, #28]
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	e7fd      	b.n	8008bb0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d103      	bne.n	8008bc4 <xQueueGiveFromISR+0x5c>
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <xQueueGiveFromISR+0x60>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <xQueueGiveFromISR+0x62>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10b      	bne.n	8008be6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	61bb      	str	r3, [r7, #24]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008be6:	f002 fbe7 	bl	800b3b8 <vPortValidateInterruptPriority>
	__asm volatile
 8008bea:	f3ef 8211 	mrs	r2, BASEPRI
 8008bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	617a      	str	r2, [r7, #20]
 8008c00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d22b      	bcs.n	8008c6e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d112      	bne.n	8008c58 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d016      	beq.n	8008c68 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	3324      	adds	r3, #36	@ 0x24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 f8a2 	bl	8009d88 <xTaskRemoveFromEventList>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00e      	beq.n	8008c68 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2201      	movs	r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	e007      	b.n	8008c68 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	b25a      	sxtb	r2, r3
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6c:	e001      	b.n	8008c72 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f383 8811 	msr	BASEPRI, r3
}
 8008c7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3738      	adds	r7, #56	@ 0x38
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08c      	sub	sp, #48	@ 0x30
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10b      	bne.n	8008cba <xQueueReceive+0x32>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	623b      	str	r3, [r7, #32]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d103      	bne.n	8008cc8 <xQueueReceive+0x40>
 8008cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <xQueueReceive+0x44>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e000      	b.n	8008cce <xQueueReceive+0x46>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10b      	bne.n	8008cea <xQueueReceive+0x62>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	61fb      	str	r3, [r7, #28]
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	e7fd      	b.n	8008ce6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cea:	f001 fa1f 	bl	800a12c <xTaskGetSchedulerState>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <xQueueReceive+0x72>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <xQueueReceive+0x76>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e000      	b.n	8008d00 <xQueueReceive+0x78>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10b      	bne.n	8008d1c <xQueueReceive+0x94>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	61bb      	str	r3, [r7, #24]
}
 8008d16:	bf00      	nop
 8008d18:	bf00      	nop
 8008d1a:	e7fd      	b.n	8008d18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d1c:	f002 fa6c 	bl	800b1f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d01f      	beq.n	8008d6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d30:	f000 fa1e 	bl	8009170 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d36:	1e5a      	subs	r2, r3, #1
 8008d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00f      	beq.n	8008d64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d46:	3310      	adds	r3, #16
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 f81d 	bl	8009d88 <xTaskRemoveFromEventList>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d007      	beq.n	8008d64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d54:	4b3c      	ldr	r3, [pc, #240]	@ (8008e48 <xQueueReceive+0x1c0>)
 8008d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d64:	f002 fa7a 	bl	800b25c <vPortExitCritical>
				return pdPASS;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e069      	b.n	8008e40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d103      	bne.n	8008d7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d72:	f002 fa73 	bl	800b25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d76:	2300      	movs	r3, #0
 8008d78:	e062      	b.n	8008e40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d80:	f107 0310 	add.w	r3, r7, #16
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 f863 	bl	8009e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d8e:	f002 fa65 	bl	800b25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d92:	f000 fdad 	bl	80098f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d96:	f002 fa2f 	bl	800b1f8 <vPortEnterCritical>
 8008d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008da0:	b25b      	sxtb	r3, r3
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d103      	bne.n	8008db0 <xQueueReceive+0x128>
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008db6:	b25b      	sxtb	r3, r3
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbc:	d103      	bne.n	8008dc6 <xQueueReceive+0x13e>
 8008dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dc6:	f002 fa49 	bl	800b25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dca:	1d3a      	adds	r2, r7, #4
 8008dcc:	f107 0310 	add.w	r3, r7, #16
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 f852 	bl	8009e7c <xTaskCheckForTimeOut>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d123      	bne.n	8008e26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008de0:	f000 fa3e 	bl	8009260 <prvIsQueueEmpty>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d017      	beq.n	8008e1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	3324      	adds	r3, #36	@ 0x24
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 ff76 	bl	8009ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008df8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dfa:	f000 f9df 	bl	80091bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dfe:	f000 fd85 	bl	800990c <xTaskResumeAll>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d189      	bne.n	8008d1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e08:	4b0f      	ldr	r3, [pc, #60]	@ (8008e48 <xQueueReceive+0x1c0>)
 8008e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	e780      	b.n	8008d1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e1c:	f000 f9ce 	bl	80091bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e20:	f000 fd74 	bl	800990c <xTaskResumeAll>
 8008e24:	e77a      	b.n	8008d1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e28:	f000 f9c8 	bl	80091bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e2c:	f000 fd6e 	bl	800990c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e32:	f000 fa15 	bl	8009260 <prvIsQueueEmpty>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f43f af6f 	beq.w	8008d1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3730      	adds	r7, #48	@ 0x30
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08e      	sub	sp, #56	@ 0x38
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e56:	2300      	movs	r3, #0
 8008e58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10b      	bne.n	8008e80 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	623b      	str	r3, [r7, #32]
}
 8008e7a:	bf00      	nop
 8008e7c:	bf00      	nop
 8008e7e:	e7fd      	b.n	8008e7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	61fb      	str	r3, [r7, #28]
}
 8008e9a:	bf00      	nop
 8008e9c:	bf00      	nop
 8008e9e:	e7fd      	b.n	8008e9c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ea0:	f001 f944 	bl	800a12c <xTaskGetSchedulerState>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d102      	bne.n	8008eb0 <xQueueSemaphoreTake+0x64>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <xQueueSemaphoreTake+0x68>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e000      	b.n	8008eb6 <xQueueSemaphoreTake+0x6a>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	61bb      	str	r3, [r7, #24]
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	e7fd      	b.n	8008ece <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ed2:	f002 f991 	bl	800b1f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d024      	beq.n	8008f2c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee4:	1e5a      	subs	r2, r3, #1
 8008ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d104      	bne.n	8008efc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ef2:	f001 fa95 	bl	800a420 <pvTaskIncrementMutexHeldCount>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00f      	beq.n	8008f24 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f06:	3310      	adds	r3, #16
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 ff3d 	bl	8009d88 <xTaskRemoveFromEventList>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f14:	4b54      	ldr	r3, [pc, #336]	@ (8009068 <xQueueSemaphoreTake+0x21c>)
 8008f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f24:	f002 f99a 	bl	800b25c <vPortExitCritical>
				return pdPASS;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e098      	b.n	800905e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d112      	bne.n	8008f58 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00b      	beq.n	8008f50 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	617b      	str	r3, [r7, #20]
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	e7fd      	b.n	8008f4c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f50:	f002 f984 	bl	800b25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f54:	2300      	movs	r3, #0
 8008f56:	e082      	b.n	800905e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d106      	bne.n	8008f6c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f5e:	f107 030c 	add.w	r3, r7, #12
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 ff74 	bl	8009e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f6c:	f002 f976 	bl	800b25c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f70:	f000 fcbe 	bl	80098f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f74:	f002 f940 	bl	800b1f8 <vPortEnterCritical>
 8008f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d103      	bne.n	8008f8e <xQueueSemaphoreTake+0x142>
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f94:	b25b      	sxtb	r3, r3
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9a:	d103      	bne.n	8008fa4 <xQueueSemaphoreTake+0x158>
 8008f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fa4:	f002 f95a 	bl	800b25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fa8:	463a      	mov	r2, r7
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 ff63 	bl	8009e7c <xTaskCheckForTimeOut>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d132      	bne.n	8009022 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008fbe:	f000 f94f 	bl	8009260 <prvIsQueueEmpty>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d026      	beq.n	8009016 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008fd0:	f002 f912 	bl	800b1f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f8c5 	bl	800a168 <xTaskPriorityInherit>
 8008fde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008fe0:	f002 f93c 	bl	800b25c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe6:	3324      	adds	r3, #36	@ 0x24
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	4611      	mov	r1, r2
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fe79 	bl	8009ce4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ff2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ff4:	f000 f8e2 	bl	80091bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ff8:	f000 fc88 	bl	800990c <xTaskResumeAll>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f47f af67 	bne.w	8008ed2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009004:	4b18      	ldr	r3, [pc, #96]	@ (8009068 <xQueueSemaphoreTake+0x21c>)
 8009006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	e75d      	b.n	8008ed2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009016:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009018:	f000 f8d0 	bl	80091bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800901c:	f000 fc76 	bl	800990c <xTaskResumeAll>
 8009020:	e757      	b.n	8008ed2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009024:	f000 f8ca 	bl	80091bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009028:	f000 fc70 	bl	800990c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800902c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800902e:	f000 f917 	bl	8009260 <prvIsQueueEmpty>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	f43f af4c 	beq.w	8008ed2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800903a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00d      	beq.n	800905c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009040:	f002 f8da 	bl	800b1f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009044:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009046:	f000 f811 	bl	800906c <prvGetDisinheritPriorityAfterTimeout>
 800904a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009052:	4618      	mov	r0, r3
 8009054:	f001 f960 	bl	800a318 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009058:	f002 f900 	bl	800b25c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800905c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800905e:	4618      	mov	r0, r3
 8009060:	3738      	adds	r7, #56	@ 0x38
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d006      	beq.n	800908a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e001      	b.n	800908e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800908e:	68fb      	ldr	r3, [r7, #12]
	}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10d      	bne.n	80090d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d14d      	bne.n	800915e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f001 f8b6 	bl	800a238 <xTaskPriorityDisinherit>
 80090cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	609a      	str	r2, [r3, #8]
 80090d4:	e043      	b.n	800915e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d119      	bne.n	8009110 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6858      	ldr	r0, [r3, #4]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e4:	461a      	mov	r2, r3
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	f013 fbe4 	bl	801c8b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f4:	441a      	add	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	429a      	cmp	r2, r3
 8009104:	d32b      	bcc.n	800915e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	605a      	str	r2, [r3, #4]
 800910e:	e026      	b.n	800915e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	68d8      	ldr	r0, [r3, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009118:	461a      	mov	r2, r3
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	f013 fbca 	bl	801c8b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009128:	425b      	negs	r3, r3
 800912a:	441a      	add	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d207      	bcs.n	800914c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009144:	425b      	negs	r3, r3
 8009146:	441a      	add	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b02      	cmp	r3, #2
 8009150:	d105      	bne.n	800915e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	3b01      	subs	r3, #1
 800915c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009166:	697b      	ldr	r3, [r7, #20]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d018      	beq.n	80091b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800918a:	441a      	add	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	68da      	ldr	r2, [r3, #12]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	429a      	cmp	r2, r3
 800919a:	d303      	bcc.n	80091a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68d9      	ldr	r1, [r3, #12]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ac:	461a      	mov	r2, r3
 80091ae:	6838      	ldr	r0, [r7, #0]
 80091b0:	f013 fb80 	bl	801c8b4 <memcpy>
	}
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091c4:	f002 f818 	bl	800b1f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091d0:	e011      	b.n	80091f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d012      	beq.n	8009200 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3324      	adds	r3, #36	@ 0x24
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fdd2 	bl	8009d88 <xTaskRemoveFromEventList>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091ea:	f000 febb 	bl	8009f64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dce9      	bgt.n	80091d2 <prvUnlockQueue+0x16>
 80091fe:	e000      	b.n	8009202 <prvUnlockQueue+0x46>
					break;
 8009200:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	22ff      	movs	r2, #255	@ 0xff
 8009206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800920a:	f002 f827 	bl	800b25c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800920e:	f001 fff3 	bl	800b1f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009218:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800921a:	e011      	b.n	8009240 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d012      	beq.n	800924a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3310      	adds	r3, #16
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fdad 	bl	8009d88 <xTaskRemoveFromEventList>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009234:	f000 fe96 	bl	8009f64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	3b01      	subs	r3, #1
 800923c:	b2db      	uxtb	r3, r3
 800923e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009244:	2b00      	cmp	r3, #0
 8009246:	dce9      	bgt.n	800921c <prvUnlockQueue+0x60>
 8009248:	e000      	b.n	800924c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800924a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	22ff      	movs	r2, #255	@ 0xff
 8009250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009254:	f002 f802 	bl	800b25c <vPortExitCritical>
}
 8009258:	bf00      	nop
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009268:	f001 ffc6 	bl	800b1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009274:	2301      	movs	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	e001      	b.n	800927e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800927e:	f001 ffed 	bl	800b25c <vPortExitCritical>

	return xReturn;
 8009282:	68fb      	ldr	r3, [r7, #12]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009294:	f001 ffb0 	bl	800b1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d102      	bne.n	80092aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092a4:	2301      	movs	r3, #1
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e001      	b.n	80092ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092ae:	f001 ffd5 	bl	800b25c <vPortExitCritical>

	return xReturn;
 80092b2:	68fb      	ldr	r3, [r7, #12]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092c6:	2300      	movs	r3, #0
 80092c8:	60fb      	str	r3, [r7, #12]
 80092ca:	e014      	b.n	80092f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80092cc:	4a0f      	ldr	r2, [pc, #60]	@ (800930c <vQueueAddToRegistry+0x50>)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10b      	bne.n	80092f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80092d8:	490c      	ldr	r1, [pc, #48]	@ (800930c <vQueueAddToRegistry+0x50>)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092e2:	4a0a      	ldr	r2, [pc, #40]	@ (800930c <vQueueAddToRegistry+0x50>)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	4413      	add	r3, r2
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092ee:	e006      	b.n	80092fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3301      	adds	r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b07      	cmp	r3, #7
 80092fa:	d9e7      	bls.n	80092cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092fc:	bf00      	nop
 80092fe:	bf00      	nop
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	20001228 	.word	0x20001228

08009310 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009320:	f001 ff6a 	bl	800b1f8 <vPortEnterCritical>
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800932a:	b25b      	sxtb	r3, r3
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009330:	d103      	bne.n	800933a <vQueueWaitForMessageRestricted+0x2a>
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009340:	b25b      	sxtb	r3, r3
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	d103      	bne.n	8009350 <vQueueWaitForMessageRestricted+0x40>
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009350:	f001 ff84 	bl	800b25c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	3324      	adds	r3, #36	@ 0x24
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fce3 	bl	8009d30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800936a:	6978      	ldr	r0, [r7, #20]
 800936c:	f7ff ff26 	bl	80091bc <prvUnlockQueue>
	}
 8009370:	bf00      	nop
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08e      	sub	sp, #56	@ 0x38
 800937c:	af04      	add	r7, sp, #16
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	2b00      	cmp	r3, #0
 800938a:	d10b      	bne.n	80093a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	623b      	str	r3, [r7, #32]
}
 800939e:	bf00      	nop
 80093a0:	bf00      	nop
 80093a2:	e7fd      	b.n	80093a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d10b      	bne.n	80093c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	61fb      	str	r3, [r7, #28]
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	e7fd      	b.n	80093be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093c2:	235c      	movs	r3, #92	@ 0x5c
 80093c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80093ca:	d00b      	beq.n	80093e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	61bb      	str	r3, [r7, #24]
}
 80093de:	bf00      	nop
 80093e0:	bf00      	nop
 80093e2:	e7fd      	b.n	80093e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d01e      	beq.n	800942a <xTaskCreateStatic+0xb2>
 80093ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d01b      	beq.n	800942a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009404:	2300      	movs	r3, #0
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	9302      	str	r3, [sp, #8]
 800940c:	f107 0314 	add.w	r3, r7, #20
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f850 	bl	80094c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009422:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009424:	f000 f8e2 	bl	80095ec <prvAddNewTaskToReadyList>
 8009428:	e001      	b.n	800942e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800942e:	697b      	ldr	r3, [r7, #20]
	}
 8009430:	4618      	mov	r0, r3
 8009432:	3728      	adds	r7, #40	@ 0x28
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08c      	sub	sp, #48	@ 0x30
 800943c:	af04      	add	r7, sp, #16
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	4613      	mov	r3, r2
 8009446:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009448:	88fb      	ldrh	r3, [r7, #6]
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4618      	mov	r0, r3
 800944e:	f001 fff5 	bl	800b43c <pvPortMalloc>
 8009452:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00e      	beq.n	8009478 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800945a:	205c      	movs	r0, #92	@ 0x5c
 800945c:	f001 ffee 	bl	800b43c <pvPortMalloc>
 8009460:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	631a      	str	r2, [r3, #48]	@ 0x30
 800946e:	e005      	b.n	800947c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009470:	6978      	ldr	r0, [r7, #20]
 8009472:	f002 f8b7 	bl	800b5e4 <vPortFree>
 8009476:	e001      	b.n	800947c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009478:	2300      	movs	r3, #0
 800947a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d017      	beq.n	80094b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800948a:	88fa      	ldrh	r2, [r7, #6]
 800948c:	2300      	movs	r3, #0
 800948e:	9303      	str	r3, [sp, #12]
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	9302      	str	r3, [sp, #8]
 8009494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f80e 	bl	80094c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094a6:	69f8      	ldr	r0, [r7, #28]
 80094a8:	f000 f8a0 	bl	80095ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094ac:	2301      	movs	r3, #1
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	e002      	b.n	80094b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094b2:	f04f 33ff 	mov.w	r3, #4294967295
 80094b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094b8:	69bb      	ldr	r3, [r7, #24]
	}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3720      	adds	r7, #32
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b088      	sub	sp, #32
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	461a      	mov	r2, r3
 80094da:	21a5      	movs	r1, #165	@ 0xa5
 80094dc:	f012 fb38 	bl	801bb50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80094ea:	3b01      	subs	r3, #1
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	f023 0307 	bic.w	r3, r3, #7
 80094f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	f003 0307 	and.w	r3, r3, #7
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	617b      	str	r3, [r7, #20]
}
 8009516:	bf00      	nop
 8009518:	bf00      	nop
 800951a:	e7fd      	b.n	8009518 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d01f      	beq.n	8009562 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009522:	2300      	movs	r3, #0
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	e012      	b.n	800954e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	4413      	add	r3, r2
 800952e:	7819      	ldrb	r1, [r3, #0]
 8009530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	3334      	adds	r3, #52	@ 0x34
 8009538:	460a      	mov	r2, r1
 800953a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800953c:	68ba      	ldr	r2, [r7, #8]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	4413      	add	r3, r2
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d006      	beq.n	8009556 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	3301      	adds	r3, #1
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	2b0f      	cmp	r3, #15
 8009552:	d9e9      	bls.n	8009528 <prvInitialiseNewTask+0x66>
 8009554:	e000      	b.n	8009558 <prvInitialiseNewTask+0x96>
			{
				break;
 8009556:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009560:	e003      	b.n	800956a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009564:	2200      	movs	r2, #0
 8009566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	2b37      	cmp	r3, #55	@ 0x37
 800956e:	d901      	bls.n	8009574 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009570:	2337      	movs	r3, #55	@ 0x37
 8009572:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009578:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800957a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800957e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	2200      	movs	r2, #0
 8009584:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	3304      	adds	r3, #4
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe ff72 	bl	8008474 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009592:	3318      	adds	r3, #24
 8009594:	4618      	mov	r0, r3
 8009596:	f7fe ff6d 	bl	8008474 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800959e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b2:	2200      	movs	r2, #0
 80095b4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	68f9      	ldr	r1, [r7, #12]
 80095ca:	69b8      	ldr	r0, [r7, #24]
 80095cc:	f001 fce4 	bl	800af98 <pxPortInitialiseStack>
 80095d0:	4602      	mov	r2, r0
 80095d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80095dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095e2:	bf00      	nop
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095f4:	f001 fe00 	bl	800b1f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095f8:	4b2d      	ldr	r3, [pc, #180]	@ (80096b0 <prvAddNewTaskToReadyList+0xc4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3301      	adds	r3, #1
 80095fe:	4a2c      	ldr	r2, [pc, #176]	@ (80096b0 <prvAddNewTaskToReadyList+0xc4>)
 8009600:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009602:	4b2c      	ldr	r3, [pc, #176]	@ (80096b4 <prvAddNewTaskToReadyList+0xc8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800960a:	4a2a      	ldr	r2, [pc, #168]	@ (80096b4 <prvAddNewTaskToReadyList+0xc8>)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009610:	4b27      	ldr	r3, [pc, #156]	@ (80096b0 <prvAddNewTaskToReadyList+0xc4>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d110      	bne.n	800963a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009618:	f000 fcca 	bl	8009fb0 <prvInitialiseTaskLists>
 800961c:	e00d      	b.n	800963a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800961e:	4b26      	ldr	r3, [pc, #152]	@ (80096b8 <prvAddNewTaskToReadyList+0xcc>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009626:	4b23      	ldr	r3, [pc, #140]	@ (80096b4 <prvAddNewTaskToReadyList+0xc8>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	429a      	cmp	r2, r3
 8009632:	d802      	bhi.n	800963a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009634:	4a1f      	ldr	r2, [pc, #124]	@ (80096b4 <prvAddNewTaskToReadyList+0xc8>)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800963a:	4b20      	ldr	r3, [pc, #128]	@ (80096bc <prvAddNewTaskToReadyList+0xd0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	4a1e      	ldr	r2, [pc, #120]	@ (80096bc <prvAddNewTaskToReadyList+0xd0>)
 8009642:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009644:	4b1d      	ldr	r3, [pc, #116]	@ (80096bc <prvAddNewTaskToReadyList+0xd0>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009650:	4b1b      	ldr	r3, [pc, #108]	@ (80096c0 <prvAddNewTaskToReadyList+0xd4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d903      	bls.n	8009660 <prvAddNewTaskToReadyList+0x74>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965c:	4a18      	ldr	r2, [pc, #96]	@ (80096c0 <prvAddNewTaskToReadyList+0xd4>)
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009664:	4613      	mov	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	4413      	add	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4a15      	ldr	r2, [pc, #84]	@ (80096c4 <prvAddNewTaskToReadyList+0xd8>)
 800966e:	441a      	add	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f7fe ff09 	bl	800848e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800967c:	f001 fdee 	bl	800b25c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009680:	4b0d      	ldr	r3, [pc, #52]	@ (80096b8 <prvAddNewTaskToReadyList+0xcc>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00e      	beq.n	80096a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009688:	4b0a      	ldr	r3, [pc, #40]	@ (80096b4 <prvAddNewTaskToReadyList+0xc8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009692:	429a      	cmp	r2, r3
 8009694:	d207      	bcs.n	80096a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009696:	4b0c      	ldr	r3, [pc, #48]	@ (80096c8 <prvAddNewTaskToReadyList+0xdc>)
 8009698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	2000173c 	.word	0x2000173c
 80096b4:	20001268 	.word	0x20001268
 80096b8:	20001748 	.word	0x20001748
 80096bc:	20001758 	.word	0x20001758
 80096c0:	20001744 	.word	0x20001744
 80096c4:	2000126c 	.word	0x2000126c
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80096d4:	f001 fd90 	bl	800b1f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <vTaskDelete+0x18>
 80096de:	4b2d      	ldr	r3, [pc, #180]	@ (8009794 <vTaskDelete+0xc8>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	e000      	b.n	80096e6 <vTaskDelete+0x1a>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3304      	adds	r3, #4
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe ff2b 	bl	8008548 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d004      	beq.n	8009704 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	3318      	adds	r3, #24
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fe ff22 	bl	8008548 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009704:	4b24      	ldr	r3, [pc, #144]	@ (8009798 <vTaskDelete+0xcc>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3301      	adds	r3, #1
 800970a:	4a23      	ldr	r2, [pc, #140]	@ (8009798 <vTaskDelete+0xcc>)
 800970c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800970e:	4b21      	ldr	r3, [pc, #132]	@ (8009794 <vTaskDelete+0xc8>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	429a      	cmp	r2, r3
 8009716:	d10b      	bne.n	8009730 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3304      	adds	r3, #4
 800971c:	4619      	mov	r1, r3
 800971e:	481f      	ldr	r0, [pc, #124]	@ (800979c <vTaskDelete+0xd0>)
 8009720:	f7fe feb5 	bl	800848e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8009724:	4b1e      	ldr	r3, [pc, #120]	@ (80097a0 <vTaskDelete+0xd4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3301      	adds	r3, #1
 800972a:	4a1d      	ldr	r2, [pc, #116]	@ (80097a0 <vTaskDelete+0xd4>)
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	e009      	b.n	8009744 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8009730:	4b1c      	ldr	r3, [pc, #112]	@ (80097a4 <vTaskDelete+0xd8>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3b01      	subs	r3, #1
 8009736:	4a1b      	ldr	r2, [pc, #108]	@ (80097a4 <vTaskDelete+0xd8>)
 8009738:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fca6 	bl	800a08c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009740:	f000 fcd4 	bl	800a0ec <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8009744:	f001 fd8a 	bl	800b25c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8009748:	4b17      	ldr	r3, [pc, #92]	@ (80097a8 <vTaskDelete+0xdc>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01c      	beq.n	800978a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8009750:	4b10      	ldr	r3, [pc, #64]	@ (8009794 <vTaskDelete+0xc8>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	429a      	cmp	r2, r3
 8009758:	d117      	bne.n	800978a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800975a:	4b14      	ldr	r3, [pc, #80]	@ (80097ac <vTaskDelete+0xe0>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00b      	beq.n	800977a <vTaskDelete+0xae>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60bb      	str	r3, [r7, #8]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800977a:	4b0d      	ldr	r3, [pc, #52]	@ (80097b0 <vTaskDelete+0xe4>)
 800977c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20001268 	.word	0x20001268
 8009798:	20001758 	.word	0x20001758
 800979c:	20001710 	.word	0x20001710
 80097a0:	20001724 	.word	0x20001724
 80097a4:	2000173c 	.word	0x2000173c
 80097a8:	20001748 	.word	0x20001748
 80097ac:	20001764 	.word	0x20001764
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d018      	beq.n	80097f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097c6:	4b14      	ldr	r3, [pc, #80]	@ (8009818 <vTaskDelay+0x64>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <vTaskDelay+0x32>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	60bb      	str	r3, [r7, #8]
}
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
 80097e4:	e7fd      	b.n	80097e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097e6:	f000 f883 	bl	80098f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097ea:	2100      	movs	r1, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f001 f81f 	bl	800a830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097f2:	f000 f88b 	bl	800990c <xTaskResumeAll>
 80097f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d107      	bne.n	800980e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80097fe:	4b07      	ldr	r3, [pc, #28]	@ (800981c <vTaskDelay+0x68>)
 8009800:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800980e:	bf00      	nop
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20001764 	.word	0x20001764
 800981c:	e000ed04 	.word	0xe000ed04

08009820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	@ 0x28
 8009824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800982a:	2300      	movs	r3, #0
 800982c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800982e:	463a      	mov	r2, r7
 8009830:	1d39      	adds	r1, r7, #4
 8009832:	f107 0308 	add.w	r3, r7, #8
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fdc8 	bl	80083cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	9202      	str	r2, [sp, #8]
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	2300      	movs	r3, #0
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	2300      	movs	r3, #0
 800984c:	460a      	mov	r2, r1
 800984e:	4922      	ldr	r1, [pc, #136]	@ (80098d8 <vTaskStartScheduler+0xb8>)
 8009850:	4822      	ldr	r0, [pc, #136]	@ (80098dc <vTaskStartScheduler+0xbc>)
 8009852:	f7ff fd91 	bl	8009378 <xTaskCreateStatic>
 8009856:	4603      	mov	r3, r0
 8009858:	4a21      	ldr	r2, [pc, #132]	@ (80098e0 <vTaskStartScheduler+0xc0>)
 800985a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800985c:	4b20      	ldr	r3, [pc, #128]	@ (80098e0 <vTaskStartScheduler+0xc0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009864:	2301      	movs	r3, #1
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	e001      	b.n	800986e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d102      	bne.n	800987a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009874:	f001 f836 	bl	800a8e4 <xTimerCreateTimerTask>
 8009878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d116      	bne.n	80098ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	613b      	str	r3, [r7, #16]
}
 8009892:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009894:	4b13      	ldr	r3, [pc, #76]	@ (80098e4 <vTaskStartScheduler+0xc4>)
 8009896:	f04f 32ff 	mov.w	r2, #4294967295
 800989a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800989c:	4b12      	ldr	r3, [pc, #72]	@ (80098e8 <vTaskStartScheduler+0xc8>)
 800989e:	2201      	movs	r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80098a2:	4b12      	ldr	r3, [pc, #72]	@ (80098ec <vTaskStartScheduler+0xcc>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80098a8:	f001 fc02 	bl	800b0b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80098ac:	e00f      	b.n	80098ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b4:	d10b      	bne.n	80098ce <vTaskStartScheduler+0xae>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	60fb      	str	r3, [r7, #12]
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <vTaskStartScheduler+0xaa>
}
 80098ce:	bf00      	nop
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	080223fc 	.word	0x080223fc
 80098dc:	08009f7d 	.word	0x08009f7d
 80098e0:	20001760 	.word	0x20001760
 80098e4:	2000175c 	.word	0x2000175c
 80098e8:	20001748 	.word	0x20001748
 80098ec:	20001740 	.word	0x20001740

080098f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098f4:	4b04      	ldr	r3, [pc, #16]	@ (8009908 <vTaskSuspendAll+0x18>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	4a03      	ldr	r2, [pc, #12]	@ (8009908 <vTaskSuspendAll+0x18>)
 80098fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098fe:	bf00      	nop
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	20001764 	.word	0x20001764

0800990c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009916:	2300      	movs	r3, #0
 8009918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800991a:	4b42      	ldr	r3, [pc, #264]	@ (8009a24 <xTaskResumeAll+0x118>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10b      	bne.n	800993a <xTaskResumeAll+0x2e>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	603b      	str	r3, [r7, #0]
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	e7fd      	b.n	8009936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800993a:	f001 fc5d 	bl	800b1f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800993e:	4b39      	ldr	r3, [pc, #228]	@ (8009a24 <xTaskResumeAll+0x118>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3b01      	subs	r3, #1
 8009944:	4a37      	ldr	r2, [pc, #220]	@ (8009a24 <xTaskResumeAll+0x118>)
 8009946:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009948:	4b36      	ldr	r3, [pc, #216]	@ (8009a24 <xTaskResumeAll+0x118>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d162      	bne.n	8009a16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009950:	4b35      	ldr	r3, [pc, #212]	@ (8009a28 <xTaskResumeAll+0x11c>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05e      	beq.n	8009a16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009958:	e02f      	b.n	80099ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995a:	4b34      	ldr	r3, [pc, #208]	@ (8009a2c <xTaskResumeAll+0x120>)
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3318      	adds	r3, #24
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fdee 	bl	8008548 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	3304      	adds	r3, #4
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fde9 	bl	8008548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800997a:	4b2d      	ldr	r3, [pc, #180]	@ (8009a30 <xTaskResumeAll+0x124>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	429a      	cmp	r2, r3
 8009980:	d903      	bls.n	800998a <xTaskResumeAll+0x7e>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009986:	4a2a      	ldr	r2, [pc, #168]	@ (8009a30 <xTaskResumeAll+0x124>)
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4a27      	ldr	r2, [pc, #156]	@ (8009a34 <xTaskResumeAll+0x128>)
 8009998:	441a      	add	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3304      	adds	r3, #4
 800999e:	4619      	mov	r1, r3
 80099a0:	4610      	mov	r0, r2
 80099a2:	f7fe fd74 	bl	800848e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099aa:	4b23      	ldr	r3, [pc, #140]	@ (8009a38 <xTaskResumeAll+0x12c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d302      	bcc.n	80099ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80099b4:	4b21      	ldr	r3, [pc, #132]	@ (8009a3c <xTaskResumeAll+0x130>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099ba:	4b1c      	ldr	r3, [pc, #112]	@ (8009a2c <xTaskResumeAll+0x120>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1cb      	bne.n	800995a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80099c8:	f000 fb90 	bl	800a0ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80099cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a40 <xTaskResumeAll+0x134>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d010      	beq.n	80099fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099d8:	f000 f846 	bl	8009a68 <xTaskIncrementTick>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80099e2:	4b16      	ldr	r3, [pc, #88]	@ (8009a3c <xTaskResumeAll+0x130>)
 80099e4:	2201      	movs	r2, #1
 80099e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1f1      	bne.n	80099d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80099f4:	4b12      	ldr	r3, [pc, #72]	@ (8009a40 <xTaskResumeAll+0x134>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099fa:	4b10      	ldr	r3, [pc, #64]	@ (8009a3c <xTaskResumeAll+0x130>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d009      	beq.n	8009a16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a06:	4b0f      	ldr	r3, [pc, #60]	@ (8009a44 <xTaskResumeAll+0x138>)
 8009a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a16:	f001 fc21 	bl	800b25c <vPortExitCritical>

	return xAlreadyYielded;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20001764 	.word	0x20001764
 8009a28:	2000173c 	.word	0x2000173c
 8009a2c:	200016fc 	.word	0x200016fc
 8009a30:	20001744 	.word	0x20001744
 8009a34:	2000126c 	.word	0x2000126c
 8009a38:	20001268 	.word	0x20001268
 8009a3c:	20001750 	.word	0x20001750
 8009a40:	2000174c 	.word	0x2000174c
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a4e:	4b05      	ldr	r3, [pc, #20]	@ (8009a64 <xTaskGetTickCount+0x1c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a54:	687b      	ldr	r3, [r7, #4]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	20001740 	.word	0x20001740

08009a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a72:	4b4f      	ldr	r3, [pc, #316]	@ (8009bb0 <xTaskIncrementTick+0x148>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f040 8090 	bne.w	8009b9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8009bb4 <xTaskIncrementTick+0x14c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3301      	adds	r3, #1
 8009a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a84:	4a4b      	ldr	r2, [pc, #300]	@ (8009bb4 <xTaskIncrementTick+0x14c>)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d121      	bne.n	8009ad4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a90:	4b49      	ldr	r3, [pc, #292]	@ (8009bb8 <xTaskIncrementTick+0x150>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	603b      	str	r3, [r7, #0]
}
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	e7fd      	b.n	8009aae <xTaskIncrementTick+0x46>
 8009ab2:	4b41      	ldr	r3, [pc, #260]	@ (8009bb8 <xTaskIncrementTick+0x150>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	60fb      	str	r3, [r7, #12]
 8009ab8:	4b40      	ldr	r3, [pc, #256]	@ (8009bbc <xTaskIncrementTick+0x154>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a3e      	ldr	r2, [pc, #248]	@ (8009bb8 <xTaskIncrementTick+0x150>)
 8009abe:	6013      	str	r3, [r2, #0]
 8009ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8009bbc <xTaskIncrementTick+0x154>)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8009bc0 <xTaskIncrementTick+0x158>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3301      	adds	r3, #1
 8009acc:	4a3c      	ldr	r2, [pc, #240]	@ (8009bc0 <xTaskIncrementTick+0x158>)
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	f000 fb0c 	bl	800a0ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8009bc4 <xTaskIncrementTick+0x15c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	693a      	ldr	r2, [r7, #16]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d349      	bcc.n	8009b72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ade:	4b36      	ldr	r3, [pc, #216]	@ (8009bb8 <xTaskIncrementTick+0x150>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d104      	bne.n	8009af2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae8:	4b36      	ldr	r3, [pc, #216]	@ (8009bc4 <xTaskIncrementTick+0x15c>)
 8009aea:	f04f 32ff 	mov.w	r2, #4294967295
 8009aee:	601a      	str	r2, [r3, #0]
					break;
 8009af0:	e03f      	b.n	8009b72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af2:	4b31      	ldr	r3, [pc, #196]	@ (8009bb8 <xTaskIncrementTick+0x150>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d203      	bcs.n	8009b12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8009bc4 <xTaskIncrementTick+0x15c>)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b10:	e02f      	b.n	8009b72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	3304      	adds	r3, #4
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fd16 	bl	8008548 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	3318      	adds	r3, #24
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fd0d 	bl	8008548 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b32:	4b25      	ldr	r3, [pc, #148]	@ (8009bc8 <xTaskIncrementTick+0x160>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d903      	bls.n	8009b42 <xTaskIncrementTick+0xda>
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	4a22      	ldr	r2, [pc, #136]	@ (8009bc8 <xTaskIncrementTick+0x160>)
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bcc <xTaskIncrementTick+0x164>)
 8009b50:	441a      	add	r2, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	3304      	adds	r3, #4
 8009b56:	4619      	mov	r1, r3
 8009b58:	4610      	mov	r0, r2
 8009b5a:	f7fe fc98 	bl	800848e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b62:	4b1b      	ldr	r3, [pc, #108]	@ (8009bd0 <xTaskIncrementTick+0x168>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d3b8      	bcc.n	8009ade <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b70:	e7b5      	b.n	8009ade <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b72:	4b17      	ldr	r3, [pc, #92]	@ (8009bd0 <xTaskIncrementTick+0x168>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b78:	4914      	ldr	r1, [pc, #80]	@ (8009bcc <xTaskIncrementTick+0x164>)
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d901      	bls.n	8009b8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b8e:	4b11      	ldr	r3, [pc, #68]	@ (8009bd4 <xTaskIncrementTick+0x16c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009b96:	2301      	movs	r3, #1
 8009b98:	617b      	str	r3, [r7, #20]
 8009b9a:	e004      	b.n	8009ba6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd8 <xTaskIncrementTick+0x170>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8009bd8 <xTaskIncrementTick+0x170>)
 8009ba4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ba6:	697b      	ldr	r3, [r7, #20]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20001764 	.word	0x20001764
 8009bb4:	20001740 	.word	0x20001740
 8009bb8:	200016f4 	.word	0x200016f4
 8009bbc:	200016f8 	.word	0x200016f8
 8009bc0:	20001754 	.word	0x20001754
 8009bc4:	2000175c 	.word	0x2000175c
 8009bc8:	20001744 	.word	0x20001744
 8009bcc:	2000126c 	.word	0x2000126c
 8009bd0:	20001268 	.word	0x20001268
 8009bd4:	20001750 	.word	0x20001750
 8009bd8:	2000174c 	.word	0x2000174c

08009bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009be2:	4b3b      	ldr	r3, [pc, #236]	@ (8009cd0 <vTaskSwitchContext+0xf4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bea:	4b3a      	ldr	r3, [pc, #232]	@ (8009cd4 <vTaskSwitchContext+0xf8>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bf0:	e069      	b.n	8009cc6 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8009bf2:	4b38      	ldr	r3, [pc, #224]	@ (8009cd4 <vTaskSwitchContext+0xf8>)
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009bf8:	4b37      	ldr	r3, [pc, #220]	@ (8009cd8 <vTaskSwitchContext+0xfc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfe:	613b      	str	r3, [r7, #16]
 8009c00:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009c04:	60fb      	str	r3, [r7, #12]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d111      	bne.n	8009c34 <vTaskSwitchContext+0x58>
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	3304      	adds	r3, #4
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d10b      	bne.n	8009c34 <vTaskSwitchContext+0x58>
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d105      	bne.n	8009c34 <vTaskSwitchContext+0x58>
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	330c      	adds	r3, #12
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d008      	beq.n	8009c46 <vTaskSwitchContext+0x6a>
 8009c34:	4b28      	ldr	r3, [pc, #160]	@ (8009cd8 <vTaskSwitchContext+0xfc>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	4b27      	ldr	r3, [pc, #156]	@ (8009cd8 <vTaskSwitchContext+0xfc>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3334      	adds	r3, #52	@ 0x34
 8009c3e:	4619      	mov	r1, r3
 8009c40:	4610      	mov	r0, r2
 8009c42:	f7f7 fc2f 	bl	80014a4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c46:	4b25      	ldr	r3, [pc, #148]	@ (8009cdc <vTaskSwitchContext+0x100>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	617b      	str	r3, [r7, #20]
 8009c4c:	e011      	b.n	8009c72 <vTaskSwitchContext+0x96>
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10b      	bne.n	8009c6c <vTaskSwitchContext+0x90>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	607b      	str	r3, [r7, #4]
}
 8009c66:	bf00      	nop
 8009c68:	bf00      	nop
 8009c6a:	e7fd      	b.n	8009c68 <vTaskSwitchContext+0x8c>
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	3b01      	subs	r3, #1
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	491b      	ldr	r1, [pc, #108]	@ (8009ce0 <vTaskSwitchContext+0x104>)
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0e3      	beq.n	8009c4e <vTaskSwitchContext+0x72>
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4a13      	ldr	r2, [pc, #76]	@ (8009ce0 <vTaskSwitchContext+0x104>)
 8009c92:	4413      	add	r3, r2
 8009c94:	60bb      	str	r3, [r7, #8]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	605a      	str	r2, [r3, #4]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d104      	bne.n	8009cb6 <vTaskSwitchContext+0xda>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	605a      	str	r2, [r3, #4]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	4a06      	ldr	r2, [pc, #24]	@ (8009cd8 <vTaskSwitchContext+0xfc>)
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	4a06      	ldr	r2, [pc, #24]	@ (8009cdc <vTaskSwitchContext+0x100>)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	6013      	str	r3, [r2, #0]
}
 8009cc6:	bf00      	nop
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20001764 	.word	0x20001764
 8009cd4:	20001750 	.word	0x20001750
 8009cd8:	20001268 	.word	0x20001268
 8009cdc:	20001744 	.word	0x20001744
 8009ce0:	2000126c 	.word	0x2000126c

08009ce4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	60fb      	str	r3, [r7, #12]
}
 8009d06:	bf00      	nop
 8009d08:	bf00      	nop
 8009d0a:	e7fd      	b.n	8009d08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d0c:	4b07      	ldr	r3, [pc, #28]	@ (8009d2c <vTaskPlaceOnEventList+0x48>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3318      	adds	r3, #24
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7fe fbde 	bl	80084d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	6838      	ldr	r0, [r7, #0]
 8009d1e:	f000 fd87 	bl	800a830 <prvAddCurrentTaskToDelayedList>
}
 8009d22:	bf00      	nop
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20001268 	.word	0x20001268

08009d30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	617b      	str	r3, [r7, #20]
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop
 8009d58:	e7fd      	b.n	8009d56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d84 <vTaskPlaceOnEventListRestricted+0x54>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3318      	adds	r3, #24
 8009d60:	4619      	mov	r1, r3
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7fe fb93 	bl	800848e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d74:	6879      	ldr	r1, [r7, #4]
 8009d76:	68b8      	ldr	r0, [r7, #8]
 8009d78:	f000 fd5a 	bl	800a830 <prvAddCurrentTaskToDelayedList>
	}
 8009d7c:	bf00      	nop
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	20001268 	.word	0x20001268

08009d88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10b      	bne.n	8009db6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	60fb      	str	r3, [r7, #12]
}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	e7fd      	b.n	8009db2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	3318      	adds	r3, #24
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fbc4 	bl	8008548 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e38 <xTaskRemoveFromEventList+0xb0>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11d      	bne.n	8009e04 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fbbb 	bl	8008548 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd6:	4b19      	ldr	r3, [pc, #100]	@ (8009e3c <xTaskRemoveFromEventList+0xb4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d903      	bls.n	8009de6 <xTaskRemoveFromEventList+0x5e>
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de2:	4a16      	ldr	r2, [pc, #88]	@ (8009e3c <xTaskRemoveFromEventList+0xb4>)
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4a13      	ldr	r2, [pc, #76]	@ (8009e40 <xTaskRemoveFromEventList+0xb8>)
 8009df4:	441a      	add	r2, r3
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	f7fe fb46 	bl	800848e <vListInsertEnd>
 8009e02:	e005      	b.n	8009e10 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	3318      	adds	r3, #24
 8009e08:	4619      	mov	r1, r3
 8009e0a:	480e      	ldr	r0, [pc, #56]	@ (8009e44 <xTaskRemoveFromEventList+0xbc>)
 8009e0c:	f7fe fb3f 	bl	800848e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e14:	4b0c      	ldr	r3, [pc, #48]	@ (8009e48 <xTaskRemoveFromEventList+0xc0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d905      	bls.n	8009e2a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e22:	4b0a      	ldr	r3, [pc, #40]	@ (8009e4c <xTaskRemoveFromEventList+0xc4>)
 8009e24:	2201      	movs	r2, #1
 8009e26:	601a      	str	r2, [r3, #0]
 8009e28:	e001      	b.n	8009e2e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e2e:	697b      	ldr	r3, [r7, #20]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20001764 	.word	0x20001764
 8009e3c:	20001744 	.word	0x20001744
 8009e40:	2000126c 	.word	0x2000126c
 8009e44:	200016fc 	.word	0x200016fc
 8009e48:	20001268 	.word	0x20001268
 8009e4c:	20001750 	.word	0x20001750

08009e50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e58:	4b06      	ldr	r3, [pc, #24]	@ (8009e74 <vTaskInternalSetTimeOutState+0x24>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e60:	4b05      	ldr	r3, [pc, #20]	@ (8009e78 <vTaskInternalSetTimeOutState+0x28>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	605a      	str	r2, [r3, #4]
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	20001754 	.word	0x20001754
 8009e78:	20001740 	.word	0x20001740

08009e7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10b      	bne.n	8009ea4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e90:	f383 8811 	msr	BASEPRI, r3
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	f3bf 8f4f 	dsb	sy
 8009e9c:	613b      	str	r3, [r7, #16]
}
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
 8009ea2:	e7fd      	b.n	8009ea0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10b      	bne.n	8009ec2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	60fb      	str	r3, [r7, #12]
}
 8009ebc:	bf00      	nop
 8009ebe:	bf00      	nop
 8009ec0:	e7fd      	b.n	8009ebe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009ec2:	f001 f999 	bl	800b1f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ec6:	4b24      	ldr	r3, [pc, #144]	@ (8009f58 <xTaskCheckForTimeOut+0xdc>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8009ed6:	4b21      	ldr	r3, [pc, #132]	@ (8009f5c <xTaskCheckForTimeOut+0xe0>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8009f5c <xTaskCheckForTimeOut+0xe0>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
				xReturn = pdTRUE;
 8009eec:	2301      	movs	r3, #1
 8009eee:	61fb      	str	r3, [r7, #28]
 8009ef0:	e02b      	b.n	8009f4a <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efa:	d102      	bne.n	8009f02 <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009efc:	2300      	movs	r3, #0
 8009efe:	61fb      	str	r3, [r7, #28]
 8009f00:	e023      	b.n	8009f4a <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	4b16      	ldr	r3, [pc, #88]	@ (8009f60 <xTaskCheckForTimeOut+0xe4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d007      	beq.n	8009f1e <xTaskCheckForTimeOut+0xa2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d302      	bcc.n	8009f1e <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	e015      	b.n	8009f4a <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d20b      	bcs.n	8009f40 <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	1ad2      	subs	r2, r2, r3
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff ff8b 	bl	8009e50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61fb      	str	r3, [r7, #28]
 8009f3e:	e004      	b.n	8009f4a <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f46:	2301      	movs	r3, #1
 8009f48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f4a:	f001 f987 	bl	800b25c <vPortExitCritical>

	return xReturn;
 8009f4e:	69fb      	ldr	r3, [r7, #28]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3720      	adds	r7, #32
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20001740 	.word	0x20001740
 8009f5c:	20001268 	.word	0x20001268
 8009f60:	20001754 	.word	0x20001754

08009f64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f68:	4b03      	ldr	r3, [pc, #12]	@ (8009f78 <vTaskMissedYield+0x14>)
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]
}
 8009f6e:	bf00      	nop
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	20001750 	.word	0x20001750

08009f7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f84:	f000 f854 	bl	800a030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f88:	4b07      	ldr	r3, [pc, #28]	@ (8009fa8 <prvIdleTask+0x2c>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d907      	bls.n	8009fa0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009f90:	4b06      	ldr	r3, [pc, #24]	@ (8009fac <prvIdleTask+0x30>)
 8009f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009fa0:	f7f7 fa78 	bl	8001494 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009fa4:	e7ee      	b.n	8009f84 <prvIdleTask+0x8>
 8009fa6:	bf00      	nop
 8009fa8:	2000126c 	.word	0x2000126c
 8009fac:	e000ed04 	.word	0xe000ed04

08009fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	607b      	str	r3, [r7, #4]
 8009fba:	e00c      	b.n	8009fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4a12      	ldr	r2, [pc, #72]	@ (800a010 <prvInitialiseTaskLists+0x60>)
 8009fc8:	4413      	add	r3, r2
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fa32 	bl	8008434 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b37      	cmp	r3, #55	@ 0x37
 8009fda:	d9ef      	bls.n	8009fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fdc:	480d      	ldr	r0, [pc, #52]	@ (800a014 <prvInitialiseTaskLists+0x64>)
 8009fde:	f7fe fa29 	bl	8008434 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fe2:	480d      	ldr	r0, [pc, #52]	@ (800a018 <prvInitialiseTaskLists+0x68>)
 8009fe4:	f7fe fa26 	bl	8008434 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fe8:	480c      	ldr	r0, [pc, #48]	@ (800a01c <prvInitialiseTaskLists+0x6c>)
 8009fea:	f7fe fa23 	bl	8008434 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fee:	480c      	ldr	r0, [pc, #48]	@ (800a020 <prvInitialiseTaskLists+0x70>)
 8009ff0:	f7fe fa20 	bl	8008434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ff4:	480b      	ldr	r0, [pc, #44]	@ (800a024 <prvInitialiseTaskLists+0x74>)
 8009ff6:	f7fe fa1d 	bl	8008434 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ffa:	4b0b      	ldr	r3, [pc, #44]	@ (800a028 <prvInitialiseTaskLists+0x78>)
 8009ffc:	4a05      	ldr	r2, [pc, #20]	@ (800a014 <prvInitialiseTaskLists+0x64>)
 8009ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a000:	4b0a      	ldr	r3, [pc, #40]	@ (800a02c <prvInitialiseTaskLists+0x7c>)
 800a002:	4a05      	ldr	r2, [pc, #20]	@ (800a018 <prvInitialiseTaskLists+0x68>)
 800a004:	601a      	str	r2, [r3, #0]
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	2000126c 	.word	0x2000126c
 800a014:	200016cc 	.word	0x200016cc
 800a018:	200016e0 	.word	0x200016e0
 800a01c:	200016fc 	.word	0x200016fc
 800a020:	20001710 	.word	0x20001710
 800a024:	20001728 	.word	0x20001728
 800a028:	200016f4 	.word	0x200016f4
 800a02c:	200016f8 	.word	0x200016f8

0800a030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a036:	e019      	b.n	800a06c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a038:	f001 f8de 	bl	800b1f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a03c:	4b10      	ldr	r3, [pc, #64]	@ (800a080 <prvCheckTasksWaitingTermination+0x50>)
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3304      	adds	r3, #4
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe fa7d 	bl	8008548 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a04e:	4b0d      	ldr	r3, [pc, #52]	@ (800a084 <prvCheckTasksWaitingTermination+0x54>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3b01      	subs	r3, #1
 800a054:	4a0b      	ldr	r2, [pc, #44]	@ (800a084 <prvCheckTasksWaitingTermination+0x54>)
 800a056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a058:	4b0b      	ldr	r3, [pc, #44]	@ (800a088 <prvCheckTasksWaitingTermination+0x58>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	4a0a      	ldr	r2, [pc, #40]	@ (800a088 <prvCheckTasksWaitingTermination+0x58>)
 800a060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a062:	f001 f8fb 	bl	800b25c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f810 	bl	800a08c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a06c:	4b06      	ldr	r3, [pc, #24]	@ (800a088 <prvCheckTasksWaitingTermination+0x58>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e1      	bne.n	800a038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20001710 	.word	0x20001710
 800a084:	2000173c 	.word	0x2000173c
 800a088:	20001724 	.word	0x20001724

0800a08c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d108      	bne.n	800a0b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 fa9e 	bl	800b5e4 <vPortFree>
				vPortFree( pxTCB );
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 fa9b 	bl	800b5e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0ae:	e019      	b.n	800a0e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d103      	bne.n	800a0c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 fa92 	bl	800b5e4 <vPortFree>
	}
 800a0c0:	e010      	b.n	800a0e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d00b      	beq.n	800a0e4 <prvDeleteTCB+0x58>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	60fb      	str	r3, [r7, #12]
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	e7fd      	b.n	800a0e0 <prvDeleteTCB+0x54>
	}
 800a0e4:	bf00      	nop
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a124 <prvResetNextTaskUnblockTime+0x38>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <prvResetNextTaskUnblockTime+0x3c>)
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a104:	e008      	b.n	800a118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a106:	4b07      	ldr	r3, [pc, #28]	@ (800a124 <prvResetNextTaskUnblockTime+0x38>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4a04      	ldr	r2, [pc, #16]	@ (800a128 <prvResetNextTaskUnblockTime+0x3c>)
 800a116:	6013      	str	r3, [r2, #0]
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	200016f4 	.word	0x200016f4
 800a128:	2000175c 	.word	0x2000175c

0800a12c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a132:	4b0b      	ldr	r3, [pc, #44]	@ (800a160 <xTaskGetSchedulerState+0x34>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a13a:	2301      	movs	r3, #1
 800a13c:	607b      	str	r3, [r7, #4]
 800a13e:	e008      	b.n	800a152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a140:	4b08      	ldr	r3, [pc, #32]	@ (800a164 <xTaskGetSchedulerState+0x38>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d102      	bne.n	800a14e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a148:	2302      	movs	r3, #2
 800a14a:	607b      	str	r3, [r7, #4]
 800a14c:	e001      	b.n	800a152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a14e:	2300      	movs	r3, #0
 800a150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a152:	687b      	ldr	r3, [r7, #4]
	}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	20001748 	.word	0x20001748
 800a164:	20001764 	.word	0x20001764

0800a168 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d051      	beq.n	800a222 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a182:	4b2a      	ldr	r3, [pc, #168]	@ (800a22c <xTaskPriorityInherit+0xc4>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d241      	bcs.n	800a210 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	db06      	blt.n	800a1a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a194:	4b25      	ldr	r3, [pc, #148]	@ (800a22c <xTaskPriorityInherit+0xc4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6959      	ldr	r1, [r3, #20]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4a1f      	ldr	r2, [pc, #124]	@ (800a230 <xTaskPriorityInherit+0xc8>)
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4299      	cmp	r1, r3
 800a1b8:	d122      	bne.n	800a200 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7fe f9c2 	bl	8008548 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1c4:	4b19      	ldr	r3, [pc, #100]	@ (800a22c <xTaskPriorityInherit+0xc4>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d2:	4b18      	ldr	r3, [pc, #96]	@ (800a234 <xTaskPriorityInherit+0xcc>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d903      	bls.n	800a1e2 <xTaskPriorityInherit+0x7a>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1de:	4a15      	ldr	r2, [pc, #84]	@ (800a234 <xTaskPriorityInherit+0xcc>)
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4a10      	ldr	r2, [pc, #64]	@ (800a230 <xTaskPriorityInherit+0xc8>)
 800a1f0:	441a      	add	r2, r3
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	f7fe f948 	bl	800848e <vListInsertEnd>
 800a1fe:	e004      	b.n	800a20a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a200:	4b0a      	ldr	r3, [pc, #40]	@ (800a22c <xTaskPriorityInherit+0xc4>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	e008      	b.n	800a222 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a214:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <xTaskPriorityInherit+0xc4>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d201      	bcs.n	800a222 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a21e:	2301      	movs	r3, #1
 800a220:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a222:	68fb      	ldr	r3, [r7, #12]
	}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20001268 	.word	0x20001268
 800a230:	2000126c 	.word	0x2000126c
 800a234:	20001744 	.word	0x20001744

0800a238 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a244:	2300      	movs	r3, #0
 800a246:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d058      	beq.n	800a300 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a24e:	4b2f      	ldr	r3, [pc, #188]	@ (800a30c <xTaskPriorityDisinherit+0xd4>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	693a      	ldr	r2, [r7, #16]
 800a254:	429a      	cmp	r2, r3
 800a256:	d00b      	beq.n	800a270 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	60fb      	str	r3, [r7, #12]
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	e7fd      	b.n	800a26c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10b      	bne.n	800a290 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60bb      	str	r3, [r7, #8]
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	e7fd      	b.n	800a28c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d02c      	beq.n	800a300 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d128      	bne.n	800a300 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe f948 	bl	8008548 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a310 <xTaskPriorityDisinherit+0xd8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d903      	bls.n	800a2e0 <xTaskPriorityDisinherit+0xa8>
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2dc:	4a0c      	ldr	r2, [pc, #48]	@ (800a310 <xTaskPriorityDisinherit+0xd8>)
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4a09      	ldr	r2, [pc, #36]	@ (800a314 <xTaskPriorityDisinherit+0xdc>)
 800a2ee:	441a      	add	r2, r3
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	f7fe f8c9 	bl	800848e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a300:	697b      	ldr	r3, [r7, #20]
	}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	20001268 	.word	0x20001268
 800a310:	20001744 	.word	0x20001744
 800a314:	2000126c 	.word	0x2000126c

0800a318 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a326:	2301      	movs	r3, #1
 800a328:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d06c      	beq.n	800a40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10b      	bne.n	800a350 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	60fb      	str	r3, [r7, #12]
}
 800a34a:	bf00      	nop
 800a34c:	bf00      	nop
 800a34e:	e7fd      	b.n	800a34c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	429a      	cmp	r2, r3
 800a358:	d902      	bls.n	800a360 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	61fb      	str	r3, [r7, #28]
 800a35e:	e002      	b.n	800a366 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a364:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	69fa      	ldr	r2, [r7, #28]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d04c      	beq.n	800a40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	429a      	cmp	r2, r3
 800a378:	d147      	bne.n	800a40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a37a:	4b26      	ldr	r3, [pc, #152]	@ (800a414 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	429a      	cmp	r2, r3
 800a382:	d10b      	bne.n	800a39c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	60bb      	str	r3, [r7, #8]
}
 800a396:	bf00      	nop
 800a398:	bf00      	nop
 800a39a:	e7fd      	b.n	800a398 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	69fa      	ldr	r2, [r7, #28]
 800a3a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	db04      	blt.n	800a3ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	6959      	ldr	r1, [r3, #20]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4a13      	ldr	r2, [pc, #76]	@ (800a418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a3ca:	4413      	add	r3, r2
 800a3cc:	4299      	cmp	r1, r3
 800a3ce:	d11c      	bne.n	800a40a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe f8b7 	bl	8008548 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3de:	4b0f      	ldr	r3, [pc, #60]	@ (800a41c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d903      	bls.n	800a3ee <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a41c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a3ec:	6013      	str	r3, [r2, #0]
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4a07      	ldr	r2, [pc, #28]	@ (800a418 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a3fc:	441a      	add	r2, r3
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	3304      	adds	r3, #4
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f7fe f842 	bl	800848e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a40a:	bf00      	nop
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20001268 	.word	0x20001268
 800a418:	2000126c 	.word	0x2000126c
 800a41c:	20001744 	.word	0x20001744

0800a420 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a420:	b480      	push	{r7}
 800a422:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a424:	4b07      	ldr	r3, [pc, #28]	@ (800a444 <pvTaskIncrementMutexHeldCount+0x24>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d004      	beq.n	800a436 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <pvTaskIncrementMutexHeldCount+0x24>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a432:	3201      	adds	r2, #1
 800a434:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a436:	4b03      	ldr	r3, [pc, #12]	@ (800a444 <pvTaskIncrementMutexHeldCount+0x24>)
 800a438:	681b      	ldr	r3, [r3, #0]
	}
 800a43a:	4618      	mov	r0, r3
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	20001268 	.word	0x20001268

0800a448 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a456:	f000 fecf 	bl	800b1f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a45a:	4b26      	ldr	r3, [pc, #152]	@ (800a4f4 <xTaskNotifyWait+0xac>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b02      	cmp	r3, #2
 800a466:	d01a      	beq.n	800a49e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a468:	4b22      	ldr	r3, [pc, #136]	@ (800a4f4 <xTaskNotifyWait+0xac>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	43d2      	mvns	r2, r2
 800a472:	400a      	ands	r2, r1
 800a474:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a476:	4b1f      	ldr	r3, [pc, #124]	@ (800a4f4 <xTaskNotifyWait+0xac>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00b      	beq.n	800a49e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a486:	2101      	movs	r1, #1
 800a488:	6838      	ldr	r0, [r7, #0]
 800a48a:	f000 f9d1 	bl	800a830 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a48e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f8 <xTaskNotifyWait+0xb0>)
 800a490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a49e:	f000 fedd 	bl	800b25c <vPortExitCritical>

		taskENTER_CRITICAL();
 800a4a2:	f000 fea9 	bl	800b1f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d004      	beq.n	800a4b6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a4ac:	4b11      	ldr	r3, [pc, #68]	@ (800a4f4 <xTaskNotifyWait+0xac>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a4f4 <xTaskNotifyWait+0xac>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d002      	beq.n	800a4ca <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	617b      	str	r3, [r7, #20]
 800a4c8:	e008      	b.n	800a4dc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f4 <xTaskNotifyWait+0xac>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	43d2      	mvns	r2, r2
 800a4d4:	400a      	ands	r2, r1
 800a4d6:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a4dc:	4b05      	ldr	r3, [pc, #20]	@ (800a4f4 <xTaskNotifyWait+0xac>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800a4e6:	f000 feb9 	bl	800b25c <vPortExitCritical>

		return xReturn;
 800a4ea:	697b      	ldr	r3, [r7, #20]
	}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20001268 	.word	0x20001268
 800a4f8:	e000ed04 	.word	0xe000ed04

0800a4fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08a      	sub	sp, #40	@ 0x28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	4613      	mov	r3, r2
 800a50a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a50c:	2301      	movs	r3, #1
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10b      	bne.n	800a52e <xTaskGenericNotify+0x32>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	61bb      	str	r3, [r7, #24]
}
 800a528:	bf00      	nop
 800a52a:	bf00      	nop
 800a52c:	e7fd      	b.n	800a52a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a532:	f000 fe61 	bl	800b1f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a54a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	2202      	movs	r2, #2
 800a550:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	2b04      	cmp	r3, #4
 800a558:	d827      	bhi.n	800a5aa <xTaskGenericNotify+0xae>
 800a55a:	a201      	add	r2, pc, #4	@ (adr r2, 800a560 <xTaskGenericNotify+0x64>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a5cd 	.word	0x0800a5cd
 800a564:	0800a575 	.word	0x0800a575
 800a568:	0800a583 	.word	0x0800a583
 800a56c:	0800a58f 	.word	0x0800a58f
 800a570:	0800a597 	.word	0x0800a597
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	431a      	orrs	r2, r3
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a580:	e027      	b.n	800a5d2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a58c:	e021      	b.n	800a5d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a594:	e01d      	b.n	800a5d2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a596:	7ffb      	ldrb	r3, [r7, #31]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d003      	beq.n	800a5a4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a5a2:	e016      	b.n	800a5d2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a5a8:	e013      	b.n	800a5d2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b2:	d00d      	beq.n	800a5d0 <xTaskGenericNotify+0xd4>
	__asm volatile
 800a5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	617b      	str	r3, [r7, #20]
}
 800a5c6:	bf00      	nop
 800a5c8:	bf00      	nop
 800a5ca:	e7fd      	b.n	800a5c8 <xTaskGenericNotify+0xcc>
					break;
 800a5cc:	bf00      	nop
 800a5ce:	e000      	b.n	800a5d2 <xTaskGenericNotify+0xd6>

					break;
 800a5d0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a5d2:	7ffb      	ldrb	r3, [r7, #31]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d13b      	bne.n	800a650 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fd ffb3 	bl	8008548 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e6:	4b1e      	ldr	r3, [pc, #120]	@ (800a660 <xTaskGenericNotify+0x164>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d903      	bls.n	800a5f6 <xTaskGenericNotify+0xfa>
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f2:	4a1b      	ldr	r2, [pc, #108]	@ (800a660 <xTaskGenericNotify+0x164>)
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4a18      	ldr	r2, [pc, #96]	@ (800a664 <xTaskGenericNotify+0x168>)
 800a604:	441a      	add	r2, r3
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	3304      	adds	r3, #4
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7fd ff3e 	bl	800848e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00b      	beq.n	800a632 <xTaskGenericNotify+0x136>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	613b      	str	r3, [r7, #16]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a636:	4b0c      	ldr	r3, [pc, #48]	@ (800a668 <xTaskGenericNotify+0x16c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d907      	bls.n	800a650 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a640:	4b0a      	ldr	r3, [pc, #40]	@ (800a66c <xTaskGenericNotify+0x170>)
 800a642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a650:	f000 fe04 	bl	800b25c <vPortExitCritical>

		return xReturn;
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a656:	4618      	mov	r0, r3
 800a658:	3728      	adds	r7, #40	@ 0x28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20001744 	.word	0x20001744
 800a664:	2000126c 	.word	0x2000126c
 800a668:	20001268 	.word	0x20001268
 800a66c:	e000ed04 	.word	0xe000ed04

0800a670 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08e      	sub	sp, #56	@ 0x38
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	4613      	mov	r3, r2
 800a67e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a680:	2301      	movs	r3, #1
 800a682:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10b      	bne.n	800a6a2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800a68a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68e:	f383 8811 	msr	BASEPRI, r3
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	f3bf 8f4f 	dsb	sy
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a69c:	bf00      	nop
 800a69e:	bf00      	nop
 800a6a0:	e7fd      	b.n	800a69e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6a2:	f000 fe89 	bl	800b3b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800a6aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	623a      	str	r2, [r7, #32]
 800a6c0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a6c2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d003      	beq.n	800a6d4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a6da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800a6e6:	79fb      	ldrb	r3, [r7, #7]
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d829      	bhi.n	800a740 <xTaskGenericNotifyFromISR+0xd0>
 800a6ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f4 <xTaskGenericNotifyFromISR+0x84>)
 800a6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f2:	bf00      	nop
 800a6f4:	0800a763 	.word	0x0800a763
 800a6f8:	0800a709 	.word	0x0800a709
 800a6fc:	0800a717 	.word	0x0800a717
 800a700:	0800a723 	.word	0x0800a723
 800a704:	0800a72b 	.word	0x0800a72b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	431a      	orrs	r2, r3
 800a710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a712:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a714:	e028      	b.n	800a768 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a71a:	1c5a      	adds	r2, r3, #1
 800a71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a720:	e022      	b.n	800a768 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a728:	e01e      	b.n	800a768 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a72a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d003      	beq.n	800a73a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a738:	e016      	b.n	800a768 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800a73e:	e013      	b.n	800a768 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a748:	d00d      	beq.n	800a766 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	61bb      	str	r3, [r7, #24]
}
 800a75c:	bf00      	nop
 800a75e:	bf00      	nop
 800a760:	e7fd      	b.n	800a75e <xTaskGenericNotifyFromISR+0xee>
					break;
 800a762:	bf00      	nop
 800a764:	e000      	b.n	800a768 <xTaskGenericNotifyFromISR+0xf8>
					break;
 800a766:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a768:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d147      	bne.n	800a800 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	617b      	str	r3, [r7, #20]
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	e7fd      	b.n	800a78c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a790:	4b21      	ldr	r3, [pc, #132]	@ (800a818 <xTaskGenericNotifyFromISR+0x1a8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d11d      	bne.n	800a7d4 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	3304      	adds	r3, #4
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fd fed3 	bl	8008548 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a6:	4b1d      	ldr	r3, [pc, #116]	@ (800a81c <xTaskGenericNotifyFromISR+0x1ac>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d903      	bls.n	800a7b6 <xTaskGenericNotifyFromISR+0x146>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b2:	4a1a      	ldr	r2, [pc, #104]	@ (800a81c <xTaskGenericNotifyFromISR+0x1ac>)
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4a17      	ldr	r2, [pc, #92]	@ (800a820 <xTaskGenericNotifyFromISR+0x1b0>)
 800a7c4:	441a      	add	r2, r3
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	f7fd fe5e 	bl	800848e <vListInsertEnd>
 800a7d2:	e005      	b.n	800a7e0 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d6:	3318      	adds	r3, #24
 800a7d8:	4619      	mov	r1, r3
 800a7da:	4812      	ldr	r0, [pc, #72]	@ (800a824 <xTaskGenericNotifyFromISR+0x1b4>)
 800a7dc:	f7fd fe57 	bl	800848e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7e4:	4b10      	ldr	r3, [pc, #64]	@ (800a828 <xTaskGenericNotifyFromISR+0x1b8>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d908      	bls.n	800a800 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a7ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d002      	beq.n	800a7fa <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a7f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a7fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a82c <xTaskGenericNotifyFromISR+0x1bc>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a802:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	f383 8811 	msr	BASEPRI, r3
}
 800a80a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a80e:	4618      	mov	r0, r3
 800a810:	3738      	adds	r7, #56	@ 0x38
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20001764 	.word	0x20001764
 800a81c:	20001744 	.word	0x20001744
 800a820:	2000126c 	.word	0x2000126c
 800a824:	200016fc 	.word	0x200016fc
 800a828:	20001268 	.word	0x20001268
 800a82c:	20001750 	.word	0x20001750

0800a830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a83a:	4b24      	ldr	r3, [pc, #144]	@ (800a8cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800a840:	4b23      	ldr	r3, [pc, #140]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a84a:	4b21      	ldr	r3, [pc, #132]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3304      	adds	r3, #4
 800a850:	4618      	mov	r0, r3
 800a852:	f7fd fe79 	bl	8008548 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d10a      	bne.n	800a874 <prvAddCurrentTaskToDelayedList+0x44>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a864:	4b1a      	ldr	r3, [pc, #104]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3304      	adds	r3, #4
 800a86a:	4619      	mov	r1, r3
 800a86c:	4819      	ldr	r0, [pc, #100]	@ (800a8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a86e:	f7fd fe0e 	bl	800848e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a872:	e026      	b.n	800a8c2 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4413      	add	r3, r2
 800a87a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a87c:	4b14      	ldr	r3, [pc, #80]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d209      	bcs.n	800a8a0 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a88c:	4b12      	ldr	r3, [pc, #72]	@ (800a8d8 <prvAddCurrentTaskToDelayedList+0xa8>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3304      	adds	r3, #4
 800a896:	4619      	mov	r1, r3
 800a898:	4610      	mov	r0, r2
 800a89a:	f7fd fe1c 	bl	80084d6 <vListInsert>
}
 800a89e:	e010      	b.n	800a8c2 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8dc <prvAddCurrentTaskToDelayedList+0xac>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f7fd fe12 	bl	80084d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d202      	bcs.n	800a8c2 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800a8bc:	4a08      	ldr	r2, [pc, #32]	@ (800a8e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	6013      	str	r3, [r2, #0]
}
 800a8c2:	bf00      	nop
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20001740 	.word	0x20001740
 800a8d0:	20001268 	.word	0x20001268
 800a8d4:	20001728 	.word	0x20001728
 800a8d8:	200016f8 	.word	0x200016f8
 800a8dc:	200016f4 	.word	0x200016f4
 800a8e0:	2000175c 	.word	0x2000175c

0800a8e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08a      	sub	sp, #40	@ 0x28
 800a8e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8ee:	f000 fb13 	bl	800af18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8f2:	4b1d      	ldr	r3, [pc, #116]	@ (800a968 <xTimerCreateTimerTask+0x84>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d021      	beq.n	800a93e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a902:	1d3a      	adds	r2, r7, #4
 800a904:	f107 0108 	add.w	r1, r7, #8
 800a908:	f107 030c 	add.w	r3, r7, #12
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fd fd77 	bl	8008400 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a912:	6879      	ldr	r1, [r7, #4]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	9202      	str	r2, [sp, #8]
 800a91a:	9301      	str	r3, [sp, #4]
 800a91c:	2302      	movs	r3, #2
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	2300      	movs	r3, #0
 800a922:	460a      	mov	r2, r1
 800a924:	4911      	ldr	r1, [pc, #68]	@ (800a96c <xTimerCreateTimerTask+0x88>)
 800a926:	4812      	ldr	r0, [pc, #72]	@ (800a970 <xTimerCreateTimerTask+0x8c>)
 800a928:	f7fe fd26 	bl	8009378 <xTaskCreateStatic>
 800a92c:	4603      	mov	r3, r0
 800a92e:	4a11      	ldr	r2, [pc, #68]	@ (800a974 <xTimerCreateTimerTask+0x90>)
 800a930:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a932:	4b10      	ldr	r3, [pc, #64]	@ (800a974 <xTimerCreateTimerTask+0x90>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a93a:	2301      	movs	r3, #1
 800a93c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10b      	bne.n	800a95c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	613b      	str	r3, [r7, #16]
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	e7fd      	b.n	800a958 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a95c:	697b      	ldr	r3, [r7, #20]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20001798 	.word	0x20001798
 800a96c:	08022404 	.word	0x08022404
 800a970:	0800aab1 	.word	0x0800aab1
 800a974:	2000179c 	.word	0x2000179c

0800a978 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	@ 0x28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a986:	2300      	movs	r3, #0
 800a988:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10b      	bne.n	800a9a8 <xTimerGenericCommand+0x30>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	623b      	str	r3, [r7, #32]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9a8:	4b19      	ldr	r3, [pc, #100]	@ (800aa10 <xTimerGenericCommand+0x98>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d02a      	beq.n	800aa06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b05      	cmp	r3, #5
 800a9c0:	dc18      	bgt.n	800a9f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9c2:	f7ff fbb3 	bl	800a12c <xTaskGetSchedulerState>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d109      	bne.n	800a9e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9cc:	4b10      	ldr	r3, [pc, #64]	@ (800aa10 <xTimerGenericCommand+0x98>)
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	f107 0110 	add.w	r1, r7, #16
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d8:	f7fd ff26 	bl	8008828 <xQueueGenericSend>
 800a9dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9de:	e012      	b.n	800aa06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800aa10 <xTimerGenericCommand+0x98>)
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	f107 0110 	add.w	r1, r7, #16
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f7fd ff1c 	bl	8008828 <xQueueGenericSend>
 800a9f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a9f2:	e008      	b.n	800aa06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9f4:	4b06      	ldr	r3, [pc, #24]	@ (800aa10 <xTimerGenericCommand+0x98>)
 800a9f6:	6818      	ldr	r0, [r3, #0]
 800a9f8:	f107 0110 	add.w	r1, r7, #16
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	f7fe f814 	bl	8008a2c <xQueueGenericSendFromISR>
 800aa04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3728      	adds	r7, #40	@ 0x28
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	20001798 	.word	0x20001798

0800aa14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b088      	sub	sp, #32
 800aa18:	af02      	add	r7, sp, #8
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa1e:	4b23      	ldr	r3, [pc, #140]	@ (800aaac <prvProcessExpiredTimer+0x98>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fd fd8b 	bl	8008548 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d023      	beq.n	800aa88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	699a      	ldr	r2, [r3, #24]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	18d1      	adds	r1, r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	6978      	ldr	r0, [r7, #20]
 800aa4e:	f000 f8d5 	bl	800abfc <prvInsertTimerInActiveList>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d020      	beq.n	800aa9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	2100      	movs	r1, #0
 800aa62:	6978      	ldr	r0, [r7, #20]
 800aa64:	f7ff ff88 	bl	800a978 <xTimerGenericCommand>
 800aa68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d114      	bne.n	800aa9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	60fb      	str	r3, [r7, #12]
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	e7fd      	b.n	800aa84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa8e:	f023 0301 	bic.w	r3, r3, #1
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	6a1b      	ldr	r3, [r3, #32]
 800aa9e:	6978      	ldr	r0, [r7, #20]
 800aaa0:	4798      	blx	r3
}
 800aaa2:	bf00      	nop
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20001790 	.word	0x20001790

0800aab0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aab8:	f107 0308 	add.w	r3, r7, #8
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f859 	bl	800ab74 <prvGetNextExpireTime>
 800aac2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 f805 	bl	800aad8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aace:	f000 f8d7 	bl	800ac80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aad2:	bf00      	nop
 800aad4:	e7f0      	b.n	800aab8 <prvTimerTask+0x8>
	...

0800aad8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aae2:	f7fe ff05 	bl	80098f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aae6:	f107 0308 	add.w	r3, r7, #8
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 f866 	bl	800abbc <prvSampleTimeNow>
 800aaf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d130      	bne.n	800ab5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10a      	bne.n	800ab14 <prvProcessTimerOrBlockTask+0x3c>
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d806      	bhi.n	800ab14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab06:	f7fe ff01 	bl	800990c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab0a:	68f9      	ldr	r1, [r7, #12]
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7ff ff81 	bl	800aa14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab12:	e024      	b.n	800ab5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d008      	beq.n	800ab2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab1a:	4b13      	ldr	r3, [pc, #76]	@ (800ab68 <prvProcessTimerOrBlockTask+0x90>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d101      	bne.n	800ab28 <prvProcessTimerOrBlockTask+0x50>
 800ab24:	2301      	movs	r3, #1
 800ab26:	e000      	b.n	800ab2a <prvProcessTimerOrBlockTask+0x52>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab2c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab6c <prvProcessTimerOrBlockTask+0x94>)
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	f7fe fbe9 	bl	8009310 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab3e:	f7fe fee5 	bl	800990c <xTaskResumeAll>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab48:	4b09      	ldr	r3, [pc, #36]	@ (800ab70 <prvProcessTimerOrBlockTask+0x98>)
 800ab4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	f3bf 8f6f 	isb	sy
}
 800ab58:	e001      	b.n	800ab5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab5a:	f7fe fed7 	bl	800990c <xTaskResumeAll>
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20001794 	.word	0x20001794
 800ab6c:	20001798 	.word	0x20001798
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab7c:	4b0e      	ldr	r3, [pc, #56]	@ (800abb8 <prvGetNextExpireTime+0x44>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d101      	bne.n	800ab8a <prvGetNextExpireTime+0x16>
 800ab86:	2201      	movs	r2, #1
 800ab88:	e000      	b.n	800ab8c <prvGetNextExpireTime+0x18>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab98:	4b07      	ldr	r3, [pc, #28]	@ (800abb8 <prvGetNextExpireTime+0x44>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	60fb      	str	r3, [r7, #12]
 800aba2:	e001      	b.n	800aba8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aba4:	2300      	movs	r3, #0
 800aba6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aba8:	68fb      	ldr	r3, [r7, #12]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20001790 	.word	0x20001790

0800abbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abc4:	f7fe ff40 	bl	8009a48 <xTaskGetTickCount>
 800abc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abca:	4b0b      	ldr	r3, [pc, #44]	@ (800abf8 <prvSampleTimeNow+0x3c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d205      	bcs.n	800abe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abd4:	f000 f93a 	bl	800ae4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	e002      	b.n	800abe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800abe6:	4a04      	ldr	r2, [pc, #16]	@ (800abf8 <prvSampleTimeNow+0x3c>)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800abec:	68fb      	ldr	r3, [r7, #12]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	200017a0 	.word	0x200017a0

0800abfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d812      	bhi.n	800ac48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	1ad2      	subs	r2, r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d302      	bcc.n	800ac36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac30:	2301      	movs	r3, #1
 800ac32:	617b      	str	r3, [r7, #20]
 800ac34:	e01b      	b.n	800ac6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac36:	4b10      	ldr	r3, [pc, #64]	@ (800ac78 <prvInsertTimerInActiveList+0x7c>)
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4610      	mov	r0, r2
 800ac42:	f7fd fc48 	bl	80084d6 <vListInsert>
 800ac46:	e012      	b.n	800ac6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d206      	bcs.n	800ac5e <prvInsertTimerInActiveList+0x62>
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d302      	bcc.n	800ac5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	617b      	str	r3, [r7, #20]
 800ac5c:	e007      	b.n	800ac6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac5e:	4b07      	ldr	r3, [pc, #28]	@ (800ac7c <prvInsertTimerInActiveList+0x80>)
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3304      	adds	r3, #4
 800ac66:	4619      	mov	r1, r3
 800ac68:	4610      	mov	r0, r2
 800ac6a:	f7fd fc34 	bl	80084d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac6e:	697b      	ldr	r3, [r7, #20]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20001794 	.word	0x20001794
 800ac7c:	20001790 	.word	0x20001790

0800ac80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08e      	sub	sp, #56	@ 0x38
 800ac84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac86:	e0ce      	b.n	800ae26 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	da19      	bge.n	800acc2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac8e:	1d3b      	adds	r3, r7, #4
 800ac90:	3304      	adds	r3, #4
 800ac92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d10b      	bne.n	800acb2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ac9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	61fb      	str	r3, [r7, #28]
}
 800acac:	bf00      	nop
 800acae:	bf00      	nop
 800acb0:	e7fd      	b.n	800acae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800acb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acb8:	6850      	ldr	r0, [r2, #4]
 800acba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acbc:	6892      	ldr	r2, [r2, #8]
 800acbe:	4611      	mov	r1, r2
 800acc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f2c0 80ae 	blt.w	800ae26 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d004      	beq.n	800ace0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	3304      	adds	r3, #4
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fd fc34 	bl	8008548 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ace0:	463b      	mov	r3, r7
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff ff6a 	bl	800abbc <prvSampleTimeNow>
 800ace8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b09      	cmp	r3, #9
 800acee:	f200 8097 	bhi.w	800ae20 <prvProcessReceivedCommands+0x1a0>
 800acf2:	a201      	add	r2, pc, #4	@ (adr r2, 800acf8 <prvProcessReceivedCommands+0x78>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad21 	.word	0x0800ad21
 800acfc:	0800ad21 	.word	0x0800ad21
 800ad00:	0800ad21 	.word	0x0800ad21
 800ad04:	0800ad97 	.word	0x0800ad97
 800ad08:	0800adab 	.word	0x0800adab
 800ad0c:	0800adf7 	.word	0x0800adf7
 800ad10:	0800ad21 	.word	0x0800ad21
 800ad14:	0800ad21 	.word	0x0800ad21
 800ad18:	0800ad97 	.word	0x0800ad97
 800ad1c:	0800adab 	.word	0x0800adab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad26:	f043 0301 	orr.w	r3, r3, #1
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	18d1      	adds	r1, r2, r3
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad40:	f7ff ff5c 	bl	800abfc <prvInsertTimerInActiveList>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d06c      	beq.n	800ae24 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d061      	beq.n	800ae24 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	441a      	add	r2, r3
 800ad68:	2300      	movs	r3, #0
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	2100      	movs	r1, #0
 800ad70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad72:	f7ff fe01 	bl	800a978 <xTimerGenericCommand>
 800ad76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d152      	bne.n	800ae24 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	61bb      	str	r3, [r7, #24]
}
 800ad90:	bf00      	nop
 800ad92:	bf00      	nop
 800ad94:	e7fd      	b.n	800ad92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ad9c:	f023 0301 	bic.w	r3, r3, #1
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ada8:	e03d      	b.n	800ae26 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adb0:	f043 0301 	orr.w	r3, r3, #1
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10b      	bne.n	800ade2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	617b      	str	r3, [r7, #20]
}
 800addc:	bf00      	nop
 800adde:	bf00      	nop
 800ade0:	e7fd      	b.n	800adde <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	699a      	ldr	r2, [r3, #24]
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	18d1      	adds	r1, r2, r3
 800adea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adf0:	f7ff ff04 	bl	800abfc <prvInsertTimerInActiveList>
					break;
 800adf4:	e017      	b.n	800ae26 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800adf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adfc:	f003 0302 	and.w	r3, r3, #2
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ae04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae06:	f000 fbed 	bl	800b5e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae0a:	e00c      	b.n	800ae26 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae12:	f023 0301 	bic.w	r3, r3, #1
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae1e:	e002      	b.n	800ae26 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ae20:	bf00      	nop
 800ae22:	e000      	b.n	800ae26 <prvProcessReceivedCommands+0x1a6>
					break;
 800ae24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae26:	4b08      	ldr	r3, [pc, #32]	@ (800ae48 <prvProcessReceivedCommands+0x1c8>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	1d39      	adds	r1, r7, #4
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fd ff2a 	bl	8008c88 <xQueueReceive>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f47f af26 	bne.w	800ac88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ae3c:	bf00      	nop
 800ae3e:	bf00      	nop
 800ae40:	3730      	adds	r7, #48	@ 0x30
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20001798 	.word	0x20001798

0800ae4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b088      	sub	sp, #32
 800ae50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae52:	e049      	b.n	800aee8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae54:	4b2e      	ldr	r3, [pc, #184]	@ (800af10 <prvSwitchTimerLists+0xc4>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae5e:	4b2c      	ldr	r3, [pc, #176]	@ (800af10 <prvSwitchTimerLists+0xc4>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fd fb6b 	bl	8008548 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d02f      	beq.n	800aee8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	4413      	add	r3, r2
 800ae90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d90e      	bls.n	800aeb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aea6:	4b1a      	ldr	r3, [pc, #104]	@ (800af10 <prvSwitchTimerLists+0xc4>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3304      	adds	r3, #4
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f7fd fb10 	bl	80084d6 <vListInsert>
 800aeb6:	e017      	b.n	800aee8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aeb8:	2300      	movs	r3, #0
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	2300      	movs	r3, #0
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	2100      	movs	r1, #0
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7ff fd58 	bl	800a978 <xTimerGenericCommand>
 800aec8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10b      	bne.n	800aee8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed4:	f383 8811 	msr	BASEPRI, r3
 800aed8:	f3bf 8f6f 	isb	sy
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	603b      	str	r3, [r7, #0]
}
 800aee2:	bf00      	nop
 800aee4:	bf00      	nop
 800aee6:	e7fd      	b.n	800aee4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aee8:	4b09      	ldr	r3, [pc, #36]	@ (800af10 <prvSwitchTimerLists+0xc4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1b0      	bne.n	800ae54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aef2:	4b07      	ldr	r3, [pc, #28]	@ (800af10 <prvSwitchTimerLists+0xc4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aef8:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <prvSwitchTimerLists+0xc8>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a04      	ldr	r2, [pc, #16]	@ (800af10 <prvSwitchTimerLists+0xc4>)
 800aefe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af00:	4a04      	ldr	r2, [pc, #16]	@ (800af14 <prvSwitchTimerLists+0xc8>)
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	6013      	str	r3, [r2, #0]
}
 800af06:	bf00      	nop
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20001790 	.word	0x20001790
 800af14:	20001794 	.word	0x20001794

0800af18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af1e:	f000 f96b 	bl	800b1f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af22:	4b15      	ldr	r3, [pc, #84]	@ (800af78 <prvCheckForValidListAndQueue+0x60>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d120      	bne.n	800af6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af2a:	4814      	ldr	r0, [pc, #80]	@ (800af7c <prvCheckForValidListAndQueue+0x64>)
 800af2c:	f7fd fa82 	bl	8008434 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af30:	4813      	ldr	r0, [pc, #76]	@ (800af80 <prvCheckForValidListAndQueue+0x68>)
 800af32:	f7fd fa7f 	bl	8008434 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af36:	4b13      	ldr	r3, [pc, #76]	@ (800af84 <prvCheckForValidListAndQueue+0x6c>)
 800af38:	4a10      	ldr	r2, [pc, #64]	@ (800af7c <prvCheckForValidListAndQueue+0x64>)
 800af3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af3c:	4b12      	ldr	r3, [pc, #72]	@ (800af88 <prvCheckForValidListAndQueue+0x70>)
 800af3e:	4a10      	ldr	r2, [pc, #64]	@ (800af80 <prvCheckForValidListAndQueue+0x68>)
 800af40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af42:	2300      	movs	r3, #0
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	4b11      	ldr	r3, [pc, #68]	@ (800af8c <prvCheckForValidListAndQueue+0x74>)
 800af48:	4a11      	ldr	r2, [pc, #68]	@ (800af90 <prvCheckForValidListAndQueue+0x78>)
 800af4a:	2110      	movs	r1, #16
 800af4c:	200a      	movs	r0, #10
 800af4e:	f7fd fb8f 	bl	8008670 <xQueueGenericCreateStatic>
 800af52:	4603      	mov	r3, r0
 800af54:	4a08      	ldr	r2, [pc, #32]	@ (800af78 <prvCheckForValidListAndQueue+0x60>)
 800af56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af58:	4b07      	ldr	r3, [pc, #28]	@ (800af78 <prvCheckForValidListAndQueue+0x60>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af60:	4b05      	ldr	r3, [pc, #20]	@ (800af78 <prvCheckForValidListAndQueue+0x60>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	490b      	ldr	r1, [pc, #44]	@ (800af94 <prvCheckForValidListAndQueue+0x7c>)
 800af66:	4618      	mov	r0, r3
 800af68:	f7fe f9a8 	bl	80092bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af6c:	f000 f976 	bl	800b25c <vPortExitCritical>
}
 800af70:	bf00      	nop
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20001798 	.word	0x20001798
 800af7c:	20001768 	.word	0x20001768
 800af80:	2000177c 	.word	0x2000177c
 800af84:	20001790 	.word	0x20001790
 800af88:	20001794 	.word	0x20001794
 800af8c:	20001844 	.word	0x20001844
 800af90:	200017a4 	.word	0x200017a4
 800af94:	0802240c 	.word	0x0802240c

0800af98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3b04      	subs	r3, #4
 800afa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800afb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	3b04      	subs	r3, #4
 800afb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	f023 0201 	bic.w	r2, r3, #1
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3b04      	subs	r3, #4
 800afc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afc8:	4a0c      	ldr	r2, [pc, #48]	@ (800affc <pxPortInitialiseStack+0x64>)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3b14      	subs	r3, #20
 800afd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	3b04      	subs	r3, #4
 800afde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f06f 0202 	mvn.w	r2, #2
 800afe6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3b20      	subs	r3, #32
 800afec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afee:	68fb      	ldr	r3, [r7, #12]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	0800b001 	.word	0x0800b001

0800b000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b00a:	4b13      	ldr	r3, [pc, #76]	@ (800b058 <prvTaskExitError+0x58>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b012:	d00b      	beq.n	800b02c <prvTaskExitError+0x2c>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	60fb      	str	r3, [r7, #12]
}
 800b026:	bf00      	nop
 800b028:	bf00      	nop
 800b02a:	e7fd      	b.n	800b028 <prvTaskExitError+0x28>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	60bb      	str	r3, [r7, #8]
}
 800b03e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b040:	bf00      	nop
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d0fc      	beq.n	800b042 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b048:	bf00      	nop
 800b04a:	bf00      	nop
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
 800b056:	bf00      	nop
 800b058:	20000088 	.word	0x20000088
 800b05c:	00000000 	.word	0x00000000

0800b060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b060:	4b07      	ldr	r3, [pc, #28]	@ (800b080 <pxCurrentTCBConst2>)
 800b062:	6819      	ldr	r1, [r3, #0]
 800b064:	6808      	ldr	r0, [r1, #0]
 800b066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06a:	f380 8809 	msr	PSP, r0
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f04f 0000 	mov.w	r0, #0
 800b076:	f380 8811 	msr	BASEPRI, r0
 800b07a:	4770      	bx	lr
 800b07c:	f3af 8000 	nop.w

0800b080 <pxCurrentTCBConst2>:
 800b080:	20001268 	.word	0x20001268
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop

0800b088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b088:	4808      	ldr	r0, [pc, #32]	@ (800b0ac <prvPortStartFirstTask+0x24>)
 800b08a:	6800      	ldr	r0, [r0, #0]
 800b08c:	6800      	ldr	r0, [r0, #0]
 800b08e:	f380 8808 	msr	MSP, r0
 800b092:	f04f 0000 	mov.w	r0, #0
 800b096:	f380 8814 	msr	CONTROL, r0
 800b09a:	b662      	cpsie	i
 800b09c:	b661      	cpsie	f
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	df00      	svc	0
 800b0a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0aa:	bf00      	nop
 800b0ac:	e000ed08 	.word	0xe000ed08

0800b0b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0b6:	4b47      	ldr	r3, [pc, #284]	@ (800b1d4 <xPortStartScheduler+0x124>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a47      	ldr	r2, [pc, #284]	@ (800b1d8 <xPortStartScheduler+0x128>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d10b      	bne.n	800b0d8 <xPortStartScheduler+0x28>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	613b      	str	r3, [r7, #16]
}
 800b0d2:	bf00      	nop
 800b0d4:	bf00      	nop
 800b0d6:	e7fd      	b.n	800b0d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b0d8:	4b3e      	ldr	r3, [pc, #248]	@ (800b1d4 <xPortStartScheduler+0x124>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b1dc <xPortStartScheduler+0x12c>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d10b      	bne.n	800b0fa <xPortStartScheduler+0x4a>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	60fb      	str	r3, [r7, #12]
}
 800b0f4:	bf00      	nop
 800b0f6:	bf00      	nop
 800b0f8:	e7fd      	b.n	800b0f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0fa:	4b39      	ldr	r3, [pc, #228]	@ (800b1e0 <xPortStartScheduler+0x130>)
 800b0fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	b2db      	uxtb	r3, r3
 800b104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	22ff      	movs	r2, #255	@ 0xff
 800b10a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	b2db      	uxtb	r3, r3
 800b112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b114:	78fb      	ldrb	r3, [r7, #3]
 800b116:	b2db      	uxtb	r3, r3
 800b118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	4b31      	ldr	r3, [pc, #196]	@ (800b1e4 <xPortStartScheduler+0x134>)
 800b120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b122:	4b31      	ldr	r3, [pc, #196]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b124:	2207      	movs	r2, #7
 800b126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b128:	e009      	b.n	800b13e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b12a:	4b2f      	ldr	r3, [pc, #188]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3b01      	subs	r3, #1
 800b130:	4a2d      	ldr	r2, [pc, #180]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	b2db      	uxtb	r3, r3
 800b138:	005b      	lsls	r3, r3, #1
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b146:	2b80      	cmp	r3, #128	@ 0x80
 800b148:	d0ef      	beq.n	800b12a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b14a:	4b27      	ldr	r3, [pc, #156]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f1c3 0307 	rsb	r3, r3, #7
 800b152:	2b04      	cmp	r3, #4
 800b154:	d00b      	beq.n	800b16e <xPortStartScheduler+0xbe>
	__asm volatile
 800b156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	60bb      	str	r3, [r7, #8]
}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	e7fd      	b.n	800b16a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b16e:	4b1e      	ldr	r3, [pc, #120]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	021b      	lsls	r3, r3, #8
 800b174:	4a1c      	ldr	r2, [pc, #112]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b178:	4b1b      	ldr	r3, [pc, #108]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b180:	4a19      	ldr	r2, [pc, #100]	@ (800b1e8 <xPortStartScheduler+0x138>)
 800b182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	b2da      	uxtb	r2, r3
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b18c:	4b17      	ldr	r3, [pc, #92]	@ (800b1ec <xPortStartScheduler+0x13c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a16      	ldr	r2, [pc, #88]	@ (800b1ec <xPortStartScheduler+0x13c>)
 800b192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b198:	4b14      	ldr	r3, [pc, #80]	@ (800b1ec <xPortStartScheduler+0x13c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a13      	ldr	r2, [pc, #76]	@ (800b1ec <xPortStartScheduler+0x13c>)
 800b19e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b1a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1a4:	f000 f8da 	bl	800b35c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b1a8:	4b11      	ldr	r3, [pc, #68]	@ (800b1f0 <xPortStartScheduler+0x140>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1ae:	f000 f8f9 	bl	800b3a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1b2:	4b10      	ldr	r3, [pc, #64]	@ (800b1f4 <xPortStartScheduler+0x144>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a0f      	ldr	r2, [pc, #60]	@ (800b1f4 <xPortStartScheduler+0x144>)
 800b1b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b1bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1be:	f7ff ff63 	bl	800b088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1c2:	f7fe fd0b 	bl	8009bdc <vTaskSwitchContext>
	prvTaskExitError();
 800b1c6:	f7ff ff1b 	bl	800b000 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	e000ed00 	.word	0xe000ed00
 800b1d8:	410fc271 	.word	0x410fc271
 800b1dc:	410fc270 	.word	0x410fc270
 800b1e0:	e000e400 	.word	0xe000e400
 800b1e4:	20001894 	.word	0x20001894
 800b1e8:	20001898 	.word	0x20001898
 800b1ec:	e000ed20 	.word	0xe000ed20
 800b1f0:	20000088 	.word	0x20000088
 800b1f4:	e000ef34 	.word	0xe000ef34

0800b1f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	607b      	str	r3, [r7, #4]
}
 800b210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b212:	4b10      	ldr	r3, [pc, #64]	@ (800b254 <vPortEnterCritical+0x5c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	4a0e      	ldr	r2, [pc, #56]	@ (800b254 <vPortEnterCritical+0x5c>)
 800b21a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b21c:	4b0d      	ldr	r3, [pc, #52]	@ (800b254 <vPortEnterCritical+0x5c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d110      	bne.n	800b246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b224:	4b0c      	ldr	r3, [pc, #48]	@ (800b258 <vPortEnterCritical+0x60>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00b      	beq.n	800b246 <vPortEnterCritical+0x4e>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	603b      	str	r3, [r7, #0]
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <vPortEnterCritical+0x4a>
	}
}
 800b246:	bf00      	nop
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	20000088 	.word	0x20000088
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b262:	4b12      	ldr	r3, [pc, #72]	@ (800b2ac <vPortExitCritical+0x50>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10b      	bne.n	800b282 <vPortExitCritical+0x26>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	607b      	str	r3, [r7, #4]
}
 800b27c:	bf00      	nop
 800b27e:	bf00      	nop
 800b280:	e7fd      	b.n	800b27e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b282:	4b0a      	ldr	r3, [pc, #40]	@ (800b2ac <vPortExitCritical+0x50>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3b01      	subs	r3, #1
 800b288:	4a08      	ldr	r2, [pc, #32]	@ (800b2ac <vPortExitCritical+0x50>)
 800b28a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b28c:	4b07      	ldr	r3, [pc, #28]	@ (800b2ac <vPortExitCritical+0x50>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <vPortExitCritical+0x44>
 800b294:	2300      	movs	r3, #0
 800b296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	f383 8811 	msr	BASEPRI, r3
}
 800b29e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	20000088 	.word	0x20000088

0800b2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2b0:	f3ef 8009 	mrs	r0, PSP
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	4b15      	ldr	r3, [pc, #84]	@ (800b310 <pxCurrentTCBConst>)
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	f01e 0f10 	tst.w	lr, #16
 800b2c0:	bf08      	it	eq
 800b2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ca:	6010      	str	r0, [r2, #0]
 800b2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b2d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b2d4:	f380 8811 	msr	BASEPRI, r0
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	f3bf 8f6f 	isb	sy
 800b2e0:	f7fe fc7c 	bl	8009bdc <vTaskSwitchContext>
 800b2e4:	f04f 0000 	mov.w	r0, #0
 800b2e8:	f380 8811 	msr	BASEPRI, r0
 800b2ec:	bc09      	pop	{r0, r3}
 800b2ee:	6819      	ldr	r1, [r3, #0]
 800b2f0:	6808      	ldr	r0, [r1, #0]
 800b2f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f6:	f01e 0f10 	tst.w	lr, #16
 800b2fa:	bf08      	it	eq
 800b2fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b300:	f380 8809 	msr	PSP, r0
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	f3af 8000 	nop.w

0800b310 <pxCurrentTCBConst>:
 800b310:	20001268 	.word	0x20001268
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop

0800b318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	607b      	str	r3, [r7, #4]
}
 800b330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b332:	f7fe fb99 	bl	8009a68 <xTaskIncrementTick>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d003      	beq.n	800b344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b33c:	4b06      	ldr	r3, [pc, #24]	@ (800b358 <xPortSysTickHandler+0x40>)
 800b33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	2300      	movs	r3, #0
 800b346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	f383 8811 	msr	BASEPRI, r3
}
 800b34e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b350:	bf00      	nop
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	e000ed04 	.word	0xe000ed04

0800b35c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b35c:	b480      	push	{r7}
 800b35e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b360:	4b0b      	ldr	r3, [pc, #44]	@ (800b390 <vPortSetupTimerInterrupt+0x34>)
 800b362:	2200      	movs	r2, #0
 800b364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b366:	4b0b      	ldr	r3, [pc, #44]	@ (800b394 <vPortSetupTimerInterrupt+0x38>)
 800b368:	2200      	movs	r2, #0
 800b36a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b36c:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <vPortSetupTimerInterrupt+0x3c>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a0a      	ldr	r2, [pc, #40]	@ (800b39c <vPortSetupTimerInterrupt+0x40>)
 800b372:	fba2 2303 	umull	r2, r3, r2, r3
 800b376:	099b      	lsrs	r3, r3, #6
 800b378:	4a09      	ldr	r2, [pc, #36]	@ (800b3a0 <vPortSetupTimerInterrupt+0x44>)
 800b37a:	3b01      	subs	r3, #1
 800b37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b37e:	4b04      	ldr	r3, [pc, #16]	@ (800b390 <vPortSetupTimerInterrupt+0x34>)
 800b380:	2207      	movs	r2, #7
 800b382:	601a      	str	r2, [r3, #0]
}
 800b384:	bf00      	nop
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	e000e010 	.word	0xe000e010
 800b394:	e000e018 	.word	0xe000e018
 800b398:	20000004 	.word	0x20000004
 800b39c:	10624dd3 	.word	0x10624dd3
 800b3a0:	e000e014 	.word	0xe000e014

0800b3a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b3b4 <vPortEnableVFP+0x10>
 800b3a8:	6801      	ldr	r1, [r0, #0]
 800b3aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b3ae:	6001      	str	r1, [r0, #0]
 800b3b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3b2:	bf00      	nop
 800b3b4:	e000ed88 	.word	0xe000ed88

0800b3b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3be:	f3ef 8305 	mrs	r3, IPSR
 800b3c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2b0f      	cmp	r3, #15
 800b3c8:	d915      	bls.n	800b3f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3ca:	4a18      	ldr	r2, [pc, #96]	@ (800b42c <vPortValidateInterruptPriority+0x74>)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3d4:	4b16      	ldr	r3, [pc, #88]	@ (800b430 <vPortValidateInterruptPriority+0x78>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	7afa      	ldrb	r2, [r7, #11]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d20b      	bcs.n	800b3f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	607b      	str	r3, [r7, #4]
}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	e7fd      	b.n	800b3f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b434 <vPortValidateInterruptPriority+0x7c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800b438 <vPortValidateInterruptPriority+0x80>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	429a      	cmp	r2, r3
 800b404:	d90b      	bls.n	800b41e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40a:	f383 8811 	msr	BASEPRI, r3
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	603b      	str	r3, [r7, #0]
}
 800b418:	bf00      	nop
 800b41a:	bf00      	nop
 800b41c:	e7fd      	b.n	800b41a <vPortValidateInterruptPriority+0x62>
	}
 800b41e:	bf00      	nop
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	e000e3f0 	.word	0xe000e3f0
 800b430:	20001894 	.word	0x20001894
 800b434:	e000ed0c 	.word	0xe000ed0c
 800b438:	20001898 	.word	0x20001898

0800b43c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b08a      	sub	sp, #40	@ 0x28
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b444:	2300      	movs	r3, #0
 800b446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b448:	f7fe fa52 	bl	80098f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b44c:	4b5f      	ldr	r3, [pc, #380]	@ (800b5cc <pvPortMalloc+0x190>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b454:	f000 f92a 	bl	800b6ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b458:	4b5d      	ldr	r3, [pc, #372]	@ (800b5d0 <pvPortMalloc+0x194>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4013      	ands	r3, r2
 800b460:	2b00      	cmp	r3, #0
 800b462:	f040 8095 	bne.w	800b590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01e      	beq.n	800b4aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b46c:	2208      	movs	r2, #8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4413      	add	r3, r2
 800b472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f003 0307 	and.w	r3, r3, #7
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d015      	beq.n	800b4aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f023 0307 	bic.w	r3, r3, #7
 800b484:	3308      	adds	r3, #8
 800b486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00b      	beq.n	800b4aa <pvPortMalloc+0x6e>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	617b      	str	r3, [r7, #20]
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop
 800b4a8:	e7fd      	b.n	800b4a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d06f      	beq.n	800b590 <pvPortMalloc+0x154>
 800b4b0:	4b48      	ldr	r3, [pc, #288]	@ (800b5d4 <pvPortMalloc+0x198>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d86a      	bhi.n	800b590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4ba:	4b47      	ldr	r3, [pc, #284]	@ (800b5d8 <pvPortMalloc+0x19c>)
 800b4bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4be:	4b46      	ldr	r3, [pc, #280]	@ (800b5d8 <pvPortMalloc+0x19c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4c4:	e004      	b.n	800b4d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d903      	bls.n	800b4e2 <pvPortMalloc+0xa6>
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1f1      	bne.n	800b4c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4e2:	4b3a      	ldr	r3, [pc, #232]	@ (800b5cc <pvPortMalloc+0x190>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d051      	beq.n	800b590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2208      	movs	r2, #8
 800b4f2:	4413      	add	r3, r2
 800b4f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	1ad2      	subs	r2, r2, r3
 800b506:	2308      	movs	r3, #8
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d920      	bls.n	800b550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4413      	add	r3, r2
 800b514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	f003 0307 	and.w	r3, r3, #7
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00b      	beq.n	800b538 <pvPortMalloc+0xfc>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	e7fd      	b.n	800b534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	1ad2      	subs	r2, r2, r3
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b54a:	69b8      	ldr	r0, [r7, #24]
 800b54c:	f000 f910 	bl	800b770 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b550:	4b20      	ldr	r3, [pc, #128]	@ (800b5d4 <pvPortMalloc+0x198>)
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5d4 <pvPortMalloc+0x198>)
 800b55c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b55e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d4 <pvPortMalloc+0x198>)
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b1e      	ldr	r3, [pc, #120]	@ (800b5dc <pvPortMalloc+0x1a0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	429a      	cmp	r2, r3
 800b568:	d203      	bcs.n	800b572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b56a:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d4 <pvPortMalloc+0x198>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a1b      	ldr	r2, [pc, #108]	@ (800b5dc <pvPortMalloc+0x1a0>)
 800b570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	4b16      	ldr	r3, [pc, #88]	@ (800b5d0 <pvPortMalloc+0x194>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	431a      	orrs	r2, r3
 800b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b582:	2200      	movs	r2, #0
 800b584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b586:	4b16      	ldr	r3, [pc, #88]	@ (800b5e0 <pvPortMalloc+0x1a4>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3301      	adds	r3, #1
 800b58c:	4a14      	ldr	r2, [pc, #80]	@ (800b5e0 <pvPortMalloc+0x1a4>)
 800b58e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b590:	f7fe f9bc 	bl	800990c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b59a:	f7f5 ff97 	bl	80014cc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	f003 0307 	and.w	r3, r3, #7
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00b      	beq.n	800b5c0 <pvPortMalloc+0x184>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	60fb      	str	r3, [r7, #12]
}
 800b5ba:	bf00      	nop
 800b5bc:	bf00      	nop
 800b5be:	e7fd      	b.n	800b5bc <pvPortMalloc+0x180>
	return pvReturn;
 800b5c0:	69fb      	ldr	r3, [r7, #28]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3728      	adds	r7, #40	@ 0x28
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	2000b8a4 	.word	0x2000b8a4
 800b5d0:	2000b8b8 	.word	0x2000b8b8
 800b5d4:	2000b8a8 	.word	0x2000b8a8
 800b5d8:	2000b89c 	.word	0x2000b89c
 800b5dc:	2000b8ac 	.word	0x2000b8ac
 800b5e0:	2000b8b0 	.word	0x2000b8b0

0800b5e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d04f      	beq.n	800b696 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5f6:	2308      	movs	r3, #8
 800b5f8:	425b      	negs	r3, r3
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	4b25      	ldr	r3, [pc, #148]	@ (800b6a0 <vPortFree+0xbc>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4013      	ands	r3, r2
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10b      	bne.n	800b62a <vPortFree+0x46>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b616:	f383 8811 	msr	BASEPRI, r3
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	60fb      	str	r3, [r7, #12]
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop
 800b628:	e7fd      	b.n	800b626 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00b      	beq.n	800b64a <vPortFree+0x66>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	60bb      	str	r3, [r7, #8]
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	e7fd      	b.n	800b646 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	4b14      	ldr	r3, [pc, #80]	@ (800b6a0 <vPortFree+0xbc>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4013      	ands	r3, r2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d01e      	beq.n	800b696 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d11a      	bne.n	800b696 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	4b0e      	ldr	r3, [pc, #56]	@ (800b6a0 <vPortFree+0xbc>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	43db      	mvns	r3, r3
 800b66a:	401a      	ands	r2, r3
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b670:	f7fe f93e 	bl	80098f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a4 <vPortFree+0xc0>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4413      	add	r3, r2
 800b67e:	4a09      	ldr	r2, [pc, #36]	@ (800b6a4 <vPortFree+0xc0>)
 800b680:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b682:	6938      	ldr	r0, [r7, #16]
 800b684:	f000 f874 	bl	800b770 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b688:	4b07      	ldr	r3, [pc, #28]	@ (800b6a8 <vPortFree+0xc4>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3301      	adds	r3, #1
 800b68e:	4a06      	ldr	r2, [pc, #24]	@ (800b6a8 <vPortFree+0xc4>)
 800b690:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b692:	f7fe f93b 	bl	800990c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b696:	bf00      	nop
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	2000b8b8 	.word	0x2000b8b8
 800b6a4:	2000b8a8 	.word	0x2000b8a8
 800b6a8:	2000b8b4 	.word	0x2000b8b4

0800b6ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6b2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800b6b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6b8:	4b27      	ldr	r3, [pc, #156]	@ (800b758 <prvHeapInit+0xac>)
 800b6ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f003 0307 	and.w	r3, r3, #7
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d00c      	beq.n	800b6e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	3307      	adds	r3, #7
 800b6ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f023 0307 	bic.w	r3, r3, #7
 800b6d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	4a1f      	ldr	r2, [pc, #124]	@ (800b758 <prvHeapInit+0xac>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b75c <prvHeapInit+0xb0>)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	@ (800b75c <prvHeapInit+0xb0>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	1a9b      	subs	r3, r3, r2
 800b6fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f023 0307 	bic.w	r3, r3, #7
 800b706:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4a15      	ldr	r2, [pc, #84]	@ (800b760 <prvHeapInit+0xb4>)
 800b70c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b70e:	4b14      	ldr	r3, [pc, #80]	@ (800b760 <prvHeapInit+0xb4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2200      	movs	r2, #0
 800b714:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b716:	4b12      	ldr	r3, [pc, #72]	@ (800b760 <prvHeapInit+0xb4>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2200      	movs	r2, #0
 800b71c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b72c:	4b0c      	ldr	r3, [pc, #48]	@ (800b760 <prvHeapInit+0xb4>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	4a0a      	ldr	r2, [pc, #40]	@ (800b764 <prvHeapInit+0xb8>)
 800b73a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	4a09      	ldr	r2, [pc, #36]	@ (800b768 <prvHeapInit+0xbc>)
 800b742:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b744:	4b09      	ldr	r3, [pc, #36]	@ (800b76c <prvHeapInit+0xc0>)
 800b746:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b74a:	601a      	str	r2, [r3, #0]
}
 800b74c:	bf00      	nop
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	2000189c 	.word	0x2000189c
 800b75c:	2000b89c 	.word	0x2000b89c
 800b760:	2000b8a4 	.word	0x2000b8a4
 800b764:	2000b8ac 	.word	0x2000b8ac
 800b768:	2000b8a8 	.word	0x2000b8a8
 800b76c:	2000b8b8 	.word	0x2000b8b8

0800b770 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b778:	4b28      	ldr	r3, [pc, #160]	@ (800b81c <prvInsertBlockIntoFreeList+0xac>)
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	e002      	b.n	800b784 <prvInsertBlockIntoFreeList+0x14>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d8f7      	bhi.n	800b77e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	4413      	add	r3, r2
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d108      	bne.n	800b7b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	441a      	add	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	441a      	add	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d118      	bne.n	800b7f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	4b15      	ldr	r3, [pc, #84]	@ (800b820 <prvInsertBlockIntoFreeList+0xb0>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d00d      	beq.n	800b7ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	441a      	add	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	601a      	str	r2, [r3, #0]
 800b7ec:	e008      	b.n	800b800 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b820 <prvInsertBlockIntoFreeList+0xb0>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	e003      	b.n	800b800 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	429a      	cmp	r2, r3
 800b806:	d002      	beq.n	800b80e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b80e:	bf00      	nop
 800b810:	3714      	adds	r7, #20
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	2000b89c 	.word	0x2000b89c
 800b820:	2000b8a4 	.word	0x2000b8a4

0800b824 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	33f1      	adds	r3, #241	@ 0xf1
 800b830:	2210      	movs	r2, #16
 800b832:	2100      	movs	r1, #0
 800b834:	4618      	mov	r0, r3
 800b836:	f00e fc25 	bl	801a084 <memset1>
    ctx->M_n = 0;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	22f0      	movs	r2, #240	@ 0xf0
 800b846:	2100      	movs	r1, #0
 800b848:	4618      	mov	r0, r3
 800b84a:	f00e fc1b 	bl	801a084 <memset1>
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	461a      	mov	r2, r3
 800b864:	2110      	movs	r1, #16
 800b866:	6838      	ldr	r0, [r7, #0]
 800b868:	f000 fe60 	bl	800c52c <lorawan_aes_set_key>
}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08c      	sub	sp, #48	@ 0x30
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 80a1 	beq.w	800b9ce <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b892:	f1c3 0310 	rsb	r3, r3, #16
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	4293      	cmp	r3, r2
 800b89a:	bf28      	it	cs
 800b89c:	4613      	movcs	r3, r2
 800b89e:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b8ac:	4413      	add	r3, r2
 800b8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8b0:	b292      	uxth	r2, r2
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f00e fba8 	bl	801a00a <memcpy1>
        ctx->M_n += mlen;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c2:	441a      	add	r2, r3
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b8d0:	2b0f      	cmp	r3, #15
 800b8d2:	f240 808d 	bls.w	800b9f0 <AES_CMAC_Update+0x17c>
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	f000 8088 	beq.w	800b9f0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b8e4:	e015      	b.n	800b912 <AES_CMAC_Update+0x9e>
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ea:	4413      	add	r3, r2
 800b8ec:	33f1      	adds	r3, #241	@ 0xf1
 800b8ee:	781a      	ldrb	r2, [r3, #0]
 800b8f0:	68f9      	ldr	r1, [r7, #12]
 800b8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f4:	440b      	add	r3, r1
 800b8f6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	4053      	eors	r3, r2
 800b8fe:	b2d9      	uxtb	r1, r3
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b904:	4413      	add	r3, r2
 800b906:	33f1      	adds	r3, #241	@ 0xf1
 800b908:	460a      	mov	r2, r1
 800b90a:	701a      	strb	r2, [r3, #0]
 800b90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b90e:	3301      	adds	r3, #1
 800b910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b914:	2b0f      	cmp	r3, #15
 800b916:	dde6      	ble.n	800b8e6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b91e:	f107 0314 	add.w	r3, r7, #20
 800b922:	2210      	movs	r2, #16
 800b924:	4618      	mov	r0, r3
 800b926:	f00e fb70 	bl	801a00a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	f107 0114 	add.w	r1, r7, #20
 800b930:	f107 0314 	add.w	r3, r7, #20
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fed7 	bl	800c6e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	33f1      	adds	r3, #241	@ 0xf1
 800b93e:	f107 0114 	add.w	r1, r7, #20
 800b942:	2210      	movs	r2, #16
 800b944:	4618      	mov	r0, r3
 800b946:	f00e fb60 	bl	801a00a <memcpy1>

        data += mlen;
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	4413      	add	r3, r2
 800b950:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b95a:	e038      	b.n	800b9ce <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b95c:	2300      	movs	r3, #0
 800b95e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b960:	e013      	b.n	800b98a <AES_CMAC_Update+0x116>
 800b962:	68fa      	ldr	r2, [r7, #12]
 800b964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b966:	4413      	add	r3, r2
 800b968:	33f1      	adds	r3, #241	@ 0xf1
 800b96a:	781a      	ldrb	r2, [r3, #0]
 800b96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96e:	68b9      	ldr	r1, [r7, #8]
 800b970:	440b      	add	r3, r1
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	4053      	eors	r3, r2
 800b976:	b2d9      	uxtb	r1, r3
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97c:	4413      	add	r3, r2
 800b97e:	33f1      	adds	r3, #241	@ 0xf1
 800b980:	460a      	mov	r2, r1
 800b982:	701a      	strb	r2, [r3, #0]
 800b984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b986:	3301      	adds	r3, #1
 800b988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98c:	2b0f      	cmp	r3, #15
 800b98e:	dde8      	ble.n	800b962 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b996:	f107 0314 	add.w	r3, r7, #20
 800b99a:	2210      	movs	r2, #16
 800b99c:	4618      	mov	r0, r3
 800b99e:	f00e fb34 	bl	801a00a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	f107 0114 	add.w	r1, r7, #20
 800b9a8:	f107 0314 	add.w	r3, r7, #20
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 fe9b 	bl	800c6e8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	33f1      	adds	r3, #241	@ 0xf1
 800b9b6:	f107 0114 	add.w	r1, r7, #20
 800b9ba:	2210      	movs	r2, #16
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f00e fb24 	bl	801a00a <memcpy1>

        data += 16;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	3310      	adds	r3, #16
 800b9c6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3b10      	subs	r3, #16
 800b9cc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b10      	cmp	r3, #16
 800b9d2:	d8c3      	bhi.n	800b95c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	b292      	uxth	r2, r2
 800b9de:	68b9      	ldr	r1, [r7, #8]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f00e fb12 	bl	801a00a <memcpy1>
    ctx->M_n = len;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b9ee:	e000      	b.n	800b9f2 <AES_CMAC_Update+0x17e>
            return;
 800b9f0:	bf00      	nop
}
 800b9f2:	3730      	adds	r7, #48	@ 0x30
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b092      	sub	sp, #72	@ 0x48
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800ba02:	f107 031c 	add.w	r3, r7, #28
 800ba06:	2210      	movs	r2, #16
 800ba08:	2100      	movs	r1, #0
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f00e fb3a 	bl	801a084 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	f107 011c 	add.w	r1, r7, #28
 800ba16:	f107 031c 	add.w	r3, r7, #28
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 fe64 	bl	800c6e8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800ba20:	7f3b      	ldrb	r3, [r7, #28]
 800ba22:	b25b      	sxtb	r3, r3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	da30      	bge.n	800ba8a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800ba28:	2300      	movs	r3, #0
 800ba2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba2c:	e01b      	b.n	800ba66 <AES_CMAC_Final+0x6e>
 800ba2e:	f107 021c 	add.w	r2, r7, #28
 800ba32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba34:	4413      	add	r3, r2
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	b25a      	sxtb	r2, r3
 800ba3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba3e:	3301      	adds	r3, #1
 800ba40:	3348      	adds	r3, #72	@ 0x48
 800ba42:	443b      	add	r3, r7
 800ba44:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ba48:	09db      	lsrs	r3, r3, #7
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	b25b      	sxtb	r3, r3
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	b25b      	sxtb	r3, r3
 800ba52:	b2d9      	uxtb	r1, r3
 800ba54:	f107 021c 	add.w	r2, r7, #28
 800ba58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba5a:	4413      	add	r3, r2
 800ba5c:	460a      	mov	r2, r1
 800ba5e:	701a      	strb	r2, [r3, #0]
 800ba60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba62:	3301      	adds	r3, #1
 800ba64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba68:	2b0e      	cmp	r3, #14
 800ba6a:	dde0      	ble.n	800ba2e <AES_CMAC_Final+0x36>
 800ba6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba70:	005b      	lsls	r3, r3, #1
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800ba78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba7c:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800ba80:	43db      	mvns	r3, r3
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba88:	e027      	b.n	800bada <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba8e:	e01b      	b.n	800bac8 <AES_CMAC_Final+0xd0>
 800ba90:	f107 021c 	add.w	r2, r7, #28
 800ba94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba96:	4413      	add	r3, r2
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	b25a      	sxtb	r2, r3
 800ba9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baa0:	3301      	adds	r3, #1
 800baa2:	3348      	adds	r3, #72	@ 0x48
 800baa4:	443b      	add	r3, r7
 800baa6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800baaa:	09db      	lsrs	r3, r3, #7
 800baac:	b2db      	uxtb	r3, r3
 800baae:	b25b      	sxtb	r3, r3
 800bab0:	4313      	orrs	r3, r2
 800bab2:	b25b      	sxtb	r3, r3
 800bab4:	b2d9      	uxtb	r1, r3
 800bab6:	f107 021c 	add.w	r2, r7, #28
 800baba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800babc:	4413      	add	r3, r2
 800babe:	460a      	mov	r2, r1
 800bac0:	701a      	strb	r2, [r3, #0]
 800bac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bac4:	3301      	adds	r3, #1
 800bac6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baca:	2b0e      	cmp	r3, #14
 800bacc:	dde0      	ble.n	800ba90 <AES_CMAC_Final+0x98>
 800bace:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bad2:	005b      	lsls	r3, r3, #1
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bae0:	2b10      	cmp	r3, #16
 800bae2:	d11d      	bne.n	800bb20 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800bae4:	2300      	movs	r3, #0
 800bae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bae8:	e016      	b.n	800bb18 <AES_CMAC_Final+0x120>
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baee:	4413      	add	r3, r2
 800baf0:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800baf4:	781a      	ldrb	r2, [r3, #0]
 800baf6:	f107 011c 	add.w	r1, r7, #28
 800bafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bafc:	440b      	add	r3, r1
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	4053      	eors	r3, r2
 800bb02:	b2d9      	uxtb	r1, r3
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb08:	4413      	add	r3, r2
 800bb0a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bb0e:	460a      	mov	r2, r1
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb14:	3301      	adds	r3, #1
 800bb16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb1a:	2b0f      	cmp	r3, #15
 800bb1c:	dde5      	ble.n	800baea <AES_CMAC_Final+0xf2>
 800bb1e:	e096      	b.n	800bc4e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800bb20:	7f3b      	ldrb	r3, [r7, #28]
 800bb22:	b25b      	sxtb	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	da30      	bge.n	800bb8a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800bb28:	2300      	movs	r3, #0
 800bb2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb2c:	e01b      	b.n	800bb66 <AES_CMAC_Final+0x16e>
 800bb2e:	f107 021c 	add.w	r2, r7, #28
 800bb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb34:	4413      	add	r3, r2
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	b25a      	sxtb	r2, r3
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3e:	3301      	adds	r3, #1
 800bb40:	3348      	adds	r3, #72	@ 0x48
 800bb42:	443b      	add	r3, r7
 800bb44:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bb48:	09db      	lsrs	r3, r3, #7
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	b25b      	sxtb	r3, r3
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	b25b      	sxtb	r3, r3
 800bb52:	b2d9      	uxtb	r1, r3
 800bb54:	f107 021c 	add.w	r2, r7, #28
 800bb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5a:	4413      	add	r3, r2
 800bb5c:	460a      	mov	r2, r1
 800bb5e:	701a      	strb	r2, [r3, #0]
 800bb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb62:	3301      	adds	r3, #1
 800bb64:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb68:	2b0e      	cmp	r3, #14
 800bb6a:	dde0      	ble.n	800bb2e <AES_CMAC_Final+0x136>
 800bb6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb70:	005b      	lsls	r3, r3, #1
 800bb72:	b2db      	uxtb	r3, r3
 800bb74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800bb78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb7c:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800bb80:	43db      	mvns	r3, r3
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb88:	e027      	b.n	800bbda <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb8e:	e01b      	b.n	800bbc8 <AES_CMAC_Final+0x1d0>
 800bb90:	f107 021c 	add.w	r2, r7, #28
 800bb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb96:	4413      	add	r3, r2
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	b25a      	sxtb	r2, r3
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba0:	3301      	adds	r3, #1
 800bba2:	3348      	adds	r3, #72	@ 0x48
 800bba4:	443b      	add	r3, r7
 800bba6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bbaa:	09db      	lsrs	r3, r3, #7
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	b25b      	sxtb	r3, r3
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	b25b      	sxtb	r3, r3
 800bbb4:	b2d9      	uxtb	r1, r3
 800bbb6:	f107 021c 	add.w	r2, r7, #28
 800bbba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbbc:	4413      	add	r3, r2
 800bbbe:	460a      	mov	r2, r1
 800bbc0:	701a      	strb	r2, [r3, #0]
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbca:	2b0e      	cmp	r3, #14
 800bbcc:	dde0      	ble.n	800bb90 <AES_CMAC_Final+0x198>
 800bbce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	2280      	movs	r2, #128	@ 0x80
 800bbe6:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800bbea:	e007      	b.n	800bbfc <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800bc10:	2b0f      	cmp	r3, #15
 800bc12:	d9eb      	bls.n	800bbec <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800bc14:	2300      	movs	r3, #0
 800bc16:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc18:	e016      	b.n	800bc48 <AES_CMAC_Final+0x250>
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1e:	4413      	add	r3, r2
 800bc20:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bc24:	781a      	ldrb	r2, [r3, #0]
 800bc26:	f107 011c 	add.w	r1, r7, #28
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	440b      	add	r3, r1
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	4053      	eors	r3, r2
 800bc32:	b2d9      	uxtb	r1, r3
 800bc34:	683a      	ldr	r2, [r7, #0]
 800bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc38:	4413      	add	r3, r2
 800bc3a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bc3e:	460a      	mov	r2, r1
 800bc40:	701a      	strb	r2, [r3, #0]
 800bc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc44:	3301      	adds	r3, #1
 800bc46:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4a:	2b0f      	cmp	r3, #15
 800bc4c:	dde5      	ble.n	800bc1a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800bc4e:	2300      	movs	r3, #0
 800bc50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc52:	e015      	b.n	800bc80 <AES_CMAC_Final+0x288>
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc58:	4413      	add	r3, r2
 800bc5a:	33f1      	adds	r3, #241	@ 0xf1
 800bc5c:	781a      	ldrb	r2, [r3, #0]
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc62:	440b      	add	r3, r1
 800bc64:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	4053      	eors	r3, r2
 800bc6c:	b2d9      	uxtb	r1, r3
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc72:	4413      	add	r3, r2
 800bc74:	33f1      	adds	r3, #241	@ 0xf1
 800bc76:	460a      	mov	r2, r1
 800bc78:	701a      	strb	r2, [r3, #0]
 800bc7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc82:	2b0f      	cmp	r3, #15
 800bc84:	dde6      	ble.n	800bc54 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800bc8c:	f107 030c 	add.w	r3, r7, #12
 800bc90:	2210      	movs	r2, #16
 800bc92:	4618      	mov	r0, r3
 800bc94:	f00e f9b9 	bl	801a00a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	f107 030c 	add.w	r3, r7, #12
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 fd21 	bl	800c6e8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bca6:	f107 031c 	add.w	r3, r7, #28
 800bcaa:	2210      	movs	r2, #16
 800bcac:	2100      	movs	r1, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f00e f9e8 	bl	801a084 <memset1>
}
 800bcb4:	bf00      	nop
 800bcb6:	3748      	adds	r7, #72	@ 0x48
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	781a      	ldrb	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	7852      	ldrb	r2, [r2, #1]
 800bcd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3302      	adds	r3, #2
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	7892      	ldrb	r2, [r2, #2]
 800bce0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3303      	adds	r3, #3
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	78d2      	ldrb	r2, [r2, #3]
 800bcea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	7912      	ldrb	r2, [r2, #4]
 800bcf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3305      	adds	r3, #5
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	7952      	ldrb	r2, [r2, #5]
 800bcfe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3306      	adds	r3, #6
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	7992      	ldrb	r2, [r2, #6]
 800bd08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	79d2      	ldrb	r2, [r2, #7]
 800bd12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	3308      	adds	r3, #8
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	7a12      	ldrb	r2, [r2, #8]
 800bd1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3309      	adds	r3, #9
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	7a52      	ldrb	r2, [r2, #9]
 800bd26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	330a      	adds	r3, #10
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	7a92      	ldrb	r2, [r2, #10]
 800bd30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	330b      	adds	r3, #11
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	7ad2      	ldrb	r2, [r2, #11]
 800bd3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	330c      	adds	r3, #12
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	7b12      	ldrb	r2, [r2, #12]
 800bd44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	330d      	adds	r3, #13
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	7b52      	ldrb	r2, [r2, #13]
 800bd4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	330e      	adds	r3, #14
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	7b92      	ldrb	r2, [r2, #14]
 800bd58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	330f      	adds	r3, #15
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	7bd2      	ldrb	r2, [r2, #15]
 800bd62:	701a      	strb	r2, [r3, #0]
#endif
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800bd7e:	e007      	b.n	800bd90 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	1c53      	adds	r3, r2, #1
 800bd84:	60bb      	str	r3, [r7, #8]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	1c59      	adds	r1, r3, #1
 800bd8a:	60f9      	str	r1, [r7, #12]
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bd90:	79fb      	ldrb	r3, [r7, #7]
 800bd92:	1e5a      	subs	r2, r3, #1
 800bd94:	71fa      	strb	r2, [r7, #7]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1f2      	bne.n	800bd80 <copy_block_nn+0x10>
}
 800bd9a:	bf00      	nop
 800bd9c:	bf00      	nop
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	781a      	ldrb	r2, [r3, #0]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	4053      	eors	r3, r2
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	7819      	ldrb	r1, [r3, #0]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	781a      	ldrb	r2, [r3, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	404a      	eors	r2, r1
 800bdd4:	b2d2      	uxtb	r2, r2
 800bdd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	3302      	adds	r3, #2
 800bddc:	7819      	ldrb	r1, [r3, #0]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	3302      	adds	r3, #2
 800bde2:	781a      	ldrb	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3302      	adds	r3, #2
 800bde8:	404a      	eors	r2, r1
 800bdea:	b2d2      	uxtb	r2, r2
 800bdec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3303      	adds	r3, #3
 800bdf2:	7819      	ldrb	r1, [r3, #0]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	3303      	adds	r3, #3
 800bdf8:	781a      	ldrb	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	3303      	adds	r3, #3
 800bdfe:	404a      	eors	r2, r1
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3304      	adds	r3, #4
 800be08:	7819      	ldrb	r1, [r3, #0]
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	3304      	adds	r3, #4
 800be0e:	781a      	ldrb	r2, [r3, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	3304      	adds	r3, #4
 800be14:	404a      	eors	r2, r1
 800be16:	b2d2      	uxtb	r2, r2
 800be18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	3305      	adds	r3, #5
 800be1e:	7819      	ldrb	r1, [r3, #0]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	3305      	adds	r3, #5
 800be24:	781a      	ldrb	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	3305      	adds	r3, #5
 800be2a:	404a      	eors	r2, r1
 800be2c:	b2d2      	uxtb	r2, r2
 800be2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3306      	adds	r3, #6
 800be34:	7819      	ldrb	r1, [r3, #0]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	3306      	adds	r3, #6
 800be3a:	781a      	ldrb	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3306      	adds	r3, #6
 800be40:	404a      	eors	r2, r1
 800be42:	b2d2      	uxtb	r2, r2
 800be44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	3307      	adds	r3, #7
 800be4a:	7819      	ldrb	r1, [r3, #0]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	3307      	adds	r3, #7
 800be50:	781a      	ldrb	r2, [r3, #0]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3307      	adds	r3, #7
 800be56:	404a      	eors	r2, r1
 800be58:	b2d2      	uxtb	r2, r2
 800be5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3308      	adds	r3, #8
 800be60:	7819      	ldrb	r1, [r3, #0]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	3308      	adds	r3, #8
 800be66:	781a      	ldrb	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3308      	adds	r3, #8
 800be6c:	404a      	eors	r2, r1
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	3309      	adds	r3, #9
 800be76:	7819      	ldrb	r1, [r3, #0]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	3309      	adds	r3, #9
 800be7c:	781a      	ldrb	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	3309      	adds	r3, #9
 800be82:	404a      	eors	r2, r1
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	330a      	adds	r3, #10
 800be8c:	7819      	ldrb	r1, [r3, #0]
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	330a      	adds	r3, #10
 800be92:	781a      	ldrb	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	330a      	adds	r3, #10
 800be98:	404a      	eors	r2, r1
 800be9a:	b2d2      	uxtb	r2, r2
 800be9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	330b      	adds	r3, #11
 800bea2:	7819      	ldrb	r1, [r3, #0]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	330b      	adds	r3, #11
 800bea8:	781a      	ldrb	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	330b      	adds	r3, #11
 800beae:	404a      	eors	r2, r1
 800beb0:	b2d2      	uxtb	r2, r2
 800beb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	330c      	adds	r3, #12
 800beb8:	7819      	ldrb	r1, [r3, #0]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	330c      	adds	r3, #12
 800bebe:	781a      	ldrb	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	330c      	adds	r3, #12
 800bec4:	404a      	eors	r2, r1
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	330d      	adds	r3, #13
 800bece:	7819      	ldrb	r1, [r3, #0]
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	330d      	adds	r3, #13
 800bed4:	781a      	ldrb	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	330d      	adds	r3, #13
 800beda:	404a      	eors	r2, r1
 800bedc:	b2d2      	uxtb	r2, r2
 800bede:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	330e      	adds	r3, #14
 800bee4:	7819      	ldrb	r1, [r3, #0]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	330e      	adds	r3, #14
 800beea:	781a      	ldrb	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	330e      	adds	r3, #14
 800bef0:	404a      	eors	r2, r1
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	330f      	adds	r3, #15
 800befa:	7819      	ldrb	r1, [r3, #0]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	330f      	adds	r3, #15
 800bf00:	781a      	ldrb	r2, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	330f      	adds	r3, #15
 800bf06:	404a      	eors	r2, r1
 800bf08:	b2d2      	uxtb	r2, r2
 800bf0a:	701a      	strb	r2, [r3, #0]
#endif
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	781a      	ldrb	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	4053      	eors	r3, r2
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	3301      	adds	r3, #1
 800bf38:	7819      	ldrb	r1, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	781a      	ldrb	r2, [r3, #0]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3301      	adds	r3, #1
 800bf44:	404a      	eors	r2, r1
 800bf46:	b2d2      	uxtb	r2, r2
 800bf48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	3302      	adds	r3, #2
 800bf4e:	7819      	ldrb	r1, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3302      	adds	r3, #2
 800bf54:	781a      	ldrb	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3302      	adds	r3, #2
 800bf5a:	404a      	eors	r2, r1
 800bf5c:	b2d2      	uxtb	r2, r2
 800bf5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3303      	adds	r3, #3
 800bf64:	7819      	ldrb	r1, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3303      	adds	r3, #3
 800bf6a:	781a      	ldrb	r2, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3303      	adds	r3, #3
 800bf70:	404a      	eors	r2, r1
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	7819      	ldrb	r1, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	781a      	ldrb	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	3304      	adds	r3, #4
 800bf86:	404a      	eors	r2, r1
 800bf88:	b2d2      	uxtb	r2, r2
 800bf8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3305      	adds	r3, #5
 800bf90:	7819      	ldrb	r1, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	3305      	adds	r3, #5
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3305      	adds	r3, #5
 800bf9c:	404a      	eors	r2, r1
 800bf9e:	b2d2      	uxtb	r2, r2
 800bfa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	3306      	adds	r3, #6
 800bfa6:	7819      	ldrb	r1, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3306      	adds	r3, #6
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3306      	adds	r3, #6
 800bfb2:	404a      	eors	r2, r1
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	3307      	adds	r3, #7
 800bfbc:	7819      	ldrb	r1, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3307      	adds	r3, #7
 800bfc2:	781a      	ldrb	r2, [r3, #0]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3307      	adds	r3, #7
 800bfc8:	404a      	eors	r2, r1
 800bfca:	b2d2      	uxtb	r2, r2
 800bfcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	7819      	ldrb	r1, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	781a      	ldrb	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3308      	adds	r3, #8
 800bfde:	404a      	eors	r2, r1
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	3309      	adds	r3, #9
 800bfe8:	7819      	ldrb	r1, [r3, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3309      	adds	r3, #9
 800bfee:	781a      	ldrb	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3309      	adds	r3, #9
 800bff4:	404a      	eors	r2, r1
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	330a      	adds	r3, #10
 800bffe:	7819      	ldrb	r1, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	330a      	adds	r3, #10
 800c004:	781a      	ldrb	r2, [r3, #0]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	330a      	adds	r3, #10
 800c00a:	404a      	eors	r2, r1
 800c00c:	b2d2      	uxtb	r2, r2
 800c00e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	330b      	adds	r3, #11
 800c014:	7819      	ldrb	r1, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	330b      	adds	r3, #11
 800c01a:	781a      	ldrb	r2, [r3, #0]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	330b      	adds	r3, #11
 800c020:	404a      	eors	r2, r1
 800c022:	b2d2      	uxtb	r2, r2
 800c024:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	330c      	adds	r3, #12
 800c02a:	7819      	ldrb	r1, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	330c      	adds	r3, #12
 800c030:	781a      	ldrb	r2, [r3, #0]
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	330c      	adds	r3, #12
 800c036:	404a      	eors	r2, r1
 800c038:	b2d2      	uxtb	r2, r2
 800c03a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	330d      	adds	r3, #13
 800c040:	7819      	ldrb	r1, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	330d      	adds	r3, #13
 800c046:	781a      	ldrb	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	330d      	adds	r3, #13
 800c04c:	404a      	eors	r2, r1
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	330e      	adds	r3, #14
 800c056:	7819      	ldrb	r1, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	330e      	adds	r3, #14
 800c05c:	781a      	ldrb	r2, [r3, #0]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	330e      	adds	r3, #14
 800c062:	404a      	eors	r2, r1
 800c064:	b2d2      	uxtb	r2, r2
 800c066:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	330f      	adds	r3, #15
 800c06c:	7819      	ldrb	r1, [r3, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	330f      	adds	r3, #15
 800c072:	781a      	ldrb	r2, [r3, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	330f      	adds	r3, #15
 800c078:	404a      	eors	r2, r1
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c07e:	bf00      	nop
 800c080:	3714      	adds	r7, #20
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7ff fe86 	bl	800bda8 <xor_block>
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	4b48      	ldr	r3, [pc, #288]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c0b4:	5c9a      	ldrb	r2, [r3, r2]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	3304      	adds	r3, #4
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	4a43      	ldr	r2, [pc, #268]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c0c8:	5c52      	ldrb	r2, [r2, r1]
 800c0ca:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	4a3e      	ldr	r2, [pc, #248]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c0da:	5c52      	ldrb	r2, [r2, r1]
 800c0dc:	701a      	strb	r2, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	330c      	adds	r3, #12
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	330c      	adds	r3, #12
 800c0ea:	4a3a      	ldr	r2, [pc, #232]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c0ec:	5c52      	ldrb	r2, [r2, r1]
 800c0ee:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	785b      	ldrb	r3, [r3, #1]
 800c0f4:	73fb      	strb	r3, [r7, #15]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3305      	adds	r3, #5
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	3301      	adds	r3, #1
 800c102:	4a34      	ldr	r2, [pc, #208]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c104:	5c52      	ldrb	r2, [r2, r1]
 800c106:	701a      	strb	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3309      	adds	r3, #9
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	4619      	mov	r1, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	3305      	adds	r3, #5
 800c114:	4a2f      	ldr	r2, [pc, #188]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c116:	5c52      	ldrb	r2, [r2, r1]
 800c118:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	330d      	adds	r3, #13
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	4619      	mov	r1, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3309      	adds	r3, #9
 800c126:	4a2b      	ldr	r2, [pc, #172]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c128:	5c52      	ldrb	r2, [r2, r1]
 800c12a:	701a      	strb	r2, [r3, #0]
 800c12c:	7bfa      	ldrb	r2, [r7, #15]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	330d      	adds	r3, #13
 800c132:	4928      	ldr	r1, [pc, #160]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c134:	5c8a      	ldrb	r2, [r1, r2]
 800c136:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	789b      	ldrb	r3, [r3, #2]
 800c13c:	73fb      	strb	r3, [r7, #15]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	330a      	adds	r3, #10
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	4619      	mov	r1, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3302      	adds	r3, #2
 800c14a:	4a22      	ldr	r2, [pc, #136]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c14c:	5c52      	ldrb	r2, [r2, r1]
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	7bfa      	ldrb	r2, [r7, #15]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	330a      	adds	r3, #10
 800c156:	491f      	ldr	r1, [pc, #124]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c158:	5c8a      	ldrb	r2, [r1, r2]
 800c15a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	799b      	ldrb	r3, [r3, #6]
 800c160:	73fb      	strb	r3, [r7, #15]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	330e      	adds	r3, #14
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	4619      	mov	r1, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	3306      	adds	r3, #6
 800c16e:	4a19      	ldr	r2, [pc, #100]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c170:	5c52      	ldrb	r2, [r2, r1]
 800c172:	701a      	strb	r2, [r3, #0]
 800c174:	7bfa      	ldrb	r2, [r7, #15]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	330e      	adds	r3, #14
 800c17a:	4916      	ldr	r1, [pc, #88]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c17c:	5c8a      	ldrb	r2, [r1, r2]
 800c17e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	7bdb      	ldrb	r3, [r3, #15]
 800c184:	73fb      	strb	r3, [r7, #15]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	330b      	adds	r3, #11
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	4619      	mov	r1, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	330f      	adds	r3, #15
 800c192:	4a10      	ldr	r2, [pc, #64]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c194:	5c52      	ldrb	r2, [r2, r1]
 800c196:	701a      	strb	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3307      	adds	r3, #7
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	330b      	adds	r3, #11
 800c1a4:	4a0b      	ldr	r2, [pc, #44]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c1a6:	5c52      	ldrb	r2, [r2, r1]
 800c1a8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	3303      	adds	r3, #3
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3307      	adds	r3, #7
 800c1b6:	4a07      	ldr	r2, [pc, #28]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c1b8:	5c52      	ldrb	r2, [r2, r1]
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	7bfa      	ldrb	r2, [r7, #15]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3303      	adds	r3, #3
 800c1c2:	4904      	ldr	r1, [pc, #16]	@ (800c1d4 <shift_sub_rows+0x130>)
 800c1c4:	5c8a      	ldrb	r2, [r1, r2]
 800c1c6:	701a      	strb	r2, [r3, #0]
}
 800c1c8:	bf00      	nop
 800c1ca:	3714      	adds	r7, #20
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr
 800c1d4:	0802289c 	.word	0x0802289c

0800c1d8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c1e0:	f107 0308 	add.w	r3, r7, #8
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff fd68 	bl	800bcbc <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c1ec:	7a3b      	ldrb	r3, [r7, #8]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	4b9a      	ldr	r3, [pc, #616]	@ (800c45c <mix_sub_columns+0x284>)
 800c1f2:	5c9a      	ldrb	r2, [r3, r2]
 800c1f4:	7b7b      	ldrb	r3, [r7, #13]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	4b99      	ldr	r3, [pc, #612]	@ (800c460 <mix_sub_columns+0x288>)
 800c1fa:	5c5b      	ldrb	r3, [r3, r1]
 800c1fc:	4053      	eors	r3, r2
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	7cbb      	ldrb	r3, [r7, #18]
 800c202:	4619      	mov	r1, r3
 800c204:	4b97      	ldr	r3, [pc, #604]	@ (800c464 <mix_sub_columns+0x28c>)
 800c206:	5c5b      	ldrb	r3, [r3, r1]
 800c208:	4053      	eors	r3, r2
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	7dfb      	ldrb	r3, [r7, #23]
 800c20e:	4619      	mov	r1, r3
 800c210:	4b94      	ldr	r3, [pc, #592]	@ (800c464 <mix_sub_columns+0x28c>)
 800c212:	5c5b      	ldrb	r3, [r3, r1]
 800c214:	4053      	eors	r3, r2
 800c216:	b2da      	uxtb	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c21c:	7a3b      	ldrb	r3, [r7, #8]
 800c21e:	461a      	mov	r2, r3
 800c220:	4b90      	ldr	r3, [pc, #576]	@ (800c464 <mix_sub_columns+0x28c>)
 800c222:	5c9a      	ldrb	r2, [r3, r2]
 800c224:	7b7b      	ldrb	r3, [r7, #13]
 800c226:	4619      	mov	r1, r3
 800c228:	4b8c      	ldr	r3, [pc, #560]	@ (800c45c <mix_sub_columns+0x284>)
 800c22a:	5c5b      	ldrb	r3, [r3, r1]
 800c22c:	4053      	eors	r3, r2
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	7cbb      	ldrb	r3, [r7, #18]
 800c232:	4619      	mov	r1, r3
 800c234:	4b8a      	ldr	r3, [pc, #552]	@ (800c460 <mix_sub_columns+0x288>)
 800c236:	5c5b      	ldrb	r3, [r3, r1]
 800c238:	4053      	eors	r3, r2
 800c23a:	b2d9      	uxtb	r1, r3
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	461a      	mov	r2, r3
 800c240:	4b88      	ldr	r3, [pc, #544]	@ (800c464 <mix_sub_columns+0x28c>)
 800c242:	5c9a      	ldrb	r2, [r3, r2]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	3301      	adds	r3, #1
 800c248:	404a      	eors	r2, r1
 800c24a:	b2d2      	uxtb	r2, r2
 800c24c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c24e:	7a3b      	ldrb	r3, [r7, #8]
 800c250:	461a      	mov	r2, r3
 800c252:	4b84      	ldr	r3, [pc, #528]	@ (800c464 <mix_sub_columns+0x28c>)
 800c254:	5c9a      	ldrb	r2, [r3, r2]
 800c256:	7b7b      	ldrb	r3, [r7, #13]
 800c258:	4619      	mov	r1, r3
 800c25a:	4b82      	ldr	r3, [pc, #520]	@ (800c464 <mix_sub_columns+0x28c>)
 800c25c:	5c5b      	ldrb	r3, [r3, r1]
 800c25e:	4053      	eors	r3, r2
 800c260:	b2da      	uxtb	r2, r3
 800c262:	7cbb      	ldrb	r3, [r7, #18]
 800c264:	4619      	mov	r1, r3
 800c266:	4b7d      	ldr	r3, [pc, #500]	@ (800c45c <mix_sub_columns+0x284>)
 800c268:	5c5b      	ldrb	r3, [r3, r1]
 800c26a:	4053      	eors	r3, r2
 800c26c:	b2d9      	uxtb	r1, r3
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	461a      	mov	r2, r3
 800c272:	4b7b      	ldr	r3, [pc, #492]	@ (800c460 <mix_sub_columns+0x288>)
 800c274:	5c9a      	ldrb	r2, [r3, r2]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3302      	adds	r3, #2
 800c27a:	404a      	eors	r2, r1
 800c27c:	b2d2      	uxtb	r2, r2
 800c27e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c280:	7a3b      	ldrb	r3, [r7, #8]
 800c282:	461a      	mov	r2, r3
 800c284:	4b76      	ldr	r3, [pc, #472]	@ (800c460 <mix_sub_columns+0x288>)
 800c286:	5c9a      	ldrb	r2, [r3, r2]
 800c288:	7b7b      	ldrb	r3, [r7, #13]
 800c28a:	4619      	mov	r1, r3
 800c28c:	4b75      	ldr	r3, [pc, #468]	@ (800c464 <mix_sub_columns+0x28c>)
 800c28e:	5c5b      	ldrb	r3, [r3, r1]
 800c290:	4053      	eors	r3, r2
 800c292:	b2da      	uxtb	r2, r3
 800c294:	7cbb      	ldrb	r3, [r7, #18]
 800c296:	4619      	mov	r1, r3
 800c298:	4b72      	ldr	r3, [pc, #456]	@ (800c464 <mix_sub_columns+0x28c>)
 800c29a:	5c5b      	ldrb	r3, [r3, r1]
 800c29c:	4053      	eors	r3, r2
 800c29e:	b2d9      	uxtb	r1, r3
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	4b6d      	ldr	r3, [pc, #436]	@ (800c45c <mix_sub_columns+0x284>)
 800c2a6:	5c9a      	ldrb	r2, [r3, r2]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3303      	adds	r3, #3
 800c2ac:	404a      	eors	r2, r1
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c2b2:	7b3b      	ldrb	r3, [r7, #12]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	4b69      	ldr	r3, [pc, #420]	@ (800c45c <mix_sub_columns+0x284>)
 800c2b8:	5c9a      	ldrb	r2, [r3, r2]
 800c2ba:	7c7b      	ldrb	r3, [r7, #17]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	4b68      	ldr	r3, [pc, #416]	@ (800c460 <mix_sub_columns+0x288>)
 800c2c0:	5c5b      	ldrb	r3, [r3, r1]
 800c2c2:	4053      	eors	r3, r2
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	7dbb      	ldrb	r3, [r7, #22]
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	4b66      	ldr	r3, [pc, #408]	@ (800c464 <mix_sub_columns+0x28c>)
 800c2cc:	5c5b      	ldrb	r3, [r3, r1]
 800c2ce:	4053      	eors	r3, r2
 800c2d0:	b2d9      	uxtb	r1, r3
 800c2d2:	7afb      	ldrb	r3, [r7, #11]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	4b63      	ldr	r3, [pc, #396]	@ (800c464 <mix_sub_columns+0x28c>)
 800c2d8:	5c9a      	ldrb	r2, [r3, r2]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	404a      	eors	r2, r1
 800c2e0:	b2d2      	uxtb	r2, r2
 800c2e2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c2e4:	7b3b      	ldrb	r3, [r7, #12]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4b5e      	ldr	r3, [pc, #376]	@ (800c464 <mix_sub_columns+0x28c>)
 800c2ea:	5c9a      	ldrb	r2, [r3, r2]
 800c2ec:	7c7b      	ldrb	r3, [r7, #17]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4b5a      	ldr	r3, [pc, #360]	@ (800c45c <mix_sub_columns+0x284>)
 800c2f2:	5c5b      	ldrb	r3, [r3, r1]
 800c2f4:	4053      	eors	r3, r2
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	7dbb      	ldrb	r3, [r7, #22]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	4b58      	ldr	r3, [pc, #352]	@ (800c460 <mix_sub_columns+0x288>)
 800c2fe:	5c5b      	ldrb	r3, [r3, r1]
 800c300:	4053      	eors	r3, r2
 800c302:	b2d9      	uxtb	r1, r3
 800c304:	7afb      	ldrb	r3, [r7, #11]
 800c306:	461a      	mov	r2, r3
 800c308:	4b56      	ldr	r3, [pc, #344]	@ (800c464 <mix_sub_columns+0x28c>)
 800c30a:	5c9a      	ldrb	r2, [r3, r2]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	3305      	adds	r3, #5
 800c310:	404a      	eors	r2, r1
 800c312:	b2d2      	uxtb	r2, r2
 800c314:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c316:	7b3b      	ldrb	r3, [r7, #12]
 800c318:	461a      	mov	r2, r3
 800c31a:	4b52      	ldr	r3, [pc, #328]	@ (800c464 <mix_sub_columns+0x28c>)
 800c31c:	5c9a      	ldrb	r2, [r3, r2]
 800c31e:	7c7b      	ldrb	r3, [r7, #17]
 800c320:	4619      	mov	r1, r3
 800c322:	4b50      	ldr	r3, [pc, #320]	@ (800c464 <mix_sub_columns+0x28c>)
 800c324:	5c5b      	ldrb	r3, [r3, r1]
 800c326:	4053      	eors	r3, r2
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	7dbb      	ldrb	r3, [r7, #22]
 800c32c:	4619      	mov	r1, r3
 800c32e:	4b4b      	ldr	r3, [pc, #300]	@ (800c45c <mix_sub_columns+0x284>)
 800c330:	5c5b      	ldrb	r3, [r3, r1]
 800c332:	4053      	eors	r3, r2
 800c334:	b2d9      	uxtb	r1, r3
 800c336:	7afb      	ldrb	r3, [r7, #11]
 800c338:	461a      	mov	r2, r3
 800c33a:	4b49      	ldr	r3, [pc, #292]	@ (800c460 <mix_sub_columns+0x288>)
 800c33c:	5c9a      	ldrb	r2, [r3, r2]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	3306      	adds	r3, #6
 800c342:	404a      	eors	r2, r1
 800c344:	b2d2      	uxtb	r2, r2
 800c346:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c348:	7b3b      	ldrb	r3, [r7, #12]
 800c34a:	461a      	mov	r2, r3
 800c34c:	4b44      	ldr	r3, [pc, #272]	@ (800c460 <mix_sub_columns+0x288>)
 800c34e:	5c9a      	ldrb	r2, [r3, r2]
 800c350:	7c7b      	ldrb	r3, [r7, #17]
 800c352:	4619      	mov	r1, r3
 800c354:	4b43      	ldr	r3, [pc, #268]	@ (800c464 <mix_sub_columns+0x28c>)
 800c356:	5c5b      	ldrb	r3, [r3, r1]
 800c358:	4053      	eors	r3, r2
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	7dbb      	ldrb	r3, [r7, #22]
 800c35e:	4619      	mov	r1, r3
 800c360:	4b40      	ldr	r3, [pc, #256]	@ (800c464 <mix_sub_columns+0x28c>)
 800c362:	5c5b      	ldrb	r3, [r3, r1]
 800c364:	4053      	eors	r3, r2
 800c366:	b2d9      	uxtb	r1, r3
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	461a      	mov	r2, r3
 800c36c:	4b3b      	ldr	r3, [pc, #236]	@ (800c45c <mix_sub_columns+0x284>)
 800c36e:	5c9a      	ldrb	r2, [r3, r2]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3307      	adds	r3, #7
 800c374:	404a      	eors	r2, r1
 800c376:	b2d2      	uxtb	r2, r2
 800c378:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c37a:	7c3b      	ldrb	r3, [r7, #16]
 800c37c:	461a      	mov	r2, r3
 800c37e:	4b37      	ldr	r3, [pc, #220]	@ (800c45c <mix_sub_columns+0x284>)
 800c380:	5c9a      	ldrb	r2, [r3, r2]
 800c382:	7d7b      	ldrb	r3, [r7, #21]
 800c384:	4619      	mov	r1, r3
 800c386:	4b36      	ldr	r3, [pc, #216]	@ (800c460 <mix_sub_columns+0x288>)
 800c388:	5c5b      	ldrb	r3, [r3, r1]
 800c38a:	4053      	eors	r3, r2
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	7abb      	ldrb	r3, [r7, #10]
 800c390:	4619      	mov	r1, r3
 800c392:	4b34      	ldr	r3, [pc, #208]	@ (800c464 <mix_sub_columns+0x28c>)
 800c394:	5c5b      	ldrb	r3, [r3, r1]
 800c396:	4053      	eors	r3, r2
 800c398:	b2d9      	uxtb	r1, r3
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
 800c39c:	461a      	mov	r2, r3
 800c39e:	4b31      	ldr	r3, [pc, #196]	@ (800c464 <mix_sub_columns+0x28c>)
 800c3a0:	5c9a      	ldrb	r2, [r3, r2]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	404a      	eors	r2, r1
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c3ac:	7c3b      	ldrb	r3, [r7, #16]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	4b2c      	ldr	r3, [pc, #176]	@ (800c464 <mix_sub_columns+0x28c>)
 800c3b2:	5c9a      	ldrb	r2, [r3, r2]
 800c3b4:	7d7b      	ldrb	r3, [r7, #21]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4b28      	ldr	r3, [pc, #160]	@ (800c45c <mix_sub_columns+0x284>)
 800c3ba:	5c5b      	ldrb	r3, [r3, r1]
 800c3bc:	4053      	eors	r3, r2
 800c3be:	b2da      	uxtb	r2, r3
 800c3c0:	7abb      	ldrb	r3, [r7, #10]
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4b26      	ldr	r3, [pc, #152]	@ (800c460 <mix_sub_columns+0x288>)
 800c3c6:	5c5b      	ldrb	r3, [r3, r1]
 800c3c8:	4053      	eors	r3, r2
 800c3ca:	b2d9      	uxtb	r1, r3
 800c3cc:	7bfb      	ldrb	r3, [r7, #15]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	4b24      	ldr	r3, [pc, #144]	@ (800c464 <mix_sub_columns+0x28c>)
 800c3d2:	5c9a      	ldrb	r2, [r3, r2]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	3309      	adds	r3, #9
 800c3d8:	404a      	eors	r2, r1
 800c3da:	b2d2      	uxtb	r2, r2
 800c3dc:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c3de:	7c3b      	ldrb	r3, [r7, #16]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	4b20      	ldr	r3, [pc, #128]	@ (800c464 <mix_sub_columns+0x28c>)
 800c3e4:	5c9a      	ldrb	r2, [r3, r2]
 800c3e6:	7d7b      	ldrb	r3, [r7, #21]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	4b1e      	ldr	r3, [pc, #120]	@ (800c464 <mix_sub_columns+0x28c>)
 800c3ec:	5c5b      	ldrb	r3, [r3, r1]
 800c3ee:	4053      	eors	r3, r2
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	7abb      	ldrb	r3, [r7, #10]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4b19      	ldr	r3, [pc, #100]	@ (800c45c <mix_sub_columns+0x284>)
 800c3f8:	5c5b      	ldrb	r3, [r3, r1]
 800c3fa:	4053      	eors	r3, r2
 800c3fc:	b2d9      	uxtb	r1, r3
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	461a      	mov	r2, r3
 800c402:	4b17      	ldr	r3, [pc, #92]	@ (800c460 <mix_sub_columns+0x288>)
 800c404:	5c9a      	ldrb	r2, [r3, r2]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	330a      	adds	r3, #10
 800c40a:	404a      	eors	r2, r1
 800c40c:	b2d2      	uxtb	r2, r2
 800c40e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c410:	7c3b      	ldrb	r3, [r7, #16]
 800c412:	461a      	mov	r2, r3
 800c414:	4b12      	ldr	r3, [pc, #72]	@ (800c460 <mix_sub_columns+0x288>)
 800c416:	5c9a      	ldrb	r2, [r3, r2]
 800c418:	7d7b      	ldrb	r3, [r7, #21]
 800c41a:	4619      	mov	r1, r3
 800c41c:	4b11      	ldr	r3, [pc, #68]	@ (800c464 <mix_sub_columns+0x28c>)
 800c41e:	5c5b      	ldrb	r3, [r3, r1]
 800c420:	4053      	eors	r3, r2
 800c422:	b2da      	uxtb	r2, r3
 800c424:	7abb      	ldrb	r3, [r7, #10]
 800c426:	4619      	mov	r1, r3
 800c428:	4b0e      	ldr	r3, [pc, #56]	@ (800c464 <mix_sub_columns+0x28c>)
 800c42a:	5c5b      	ldrb	r3, [r3, r1]
 800c42c:	4053      	eors	r3, r2
 800c42e:	b2d9      	uxtb	r1, r3
 800c430:	7bfb      	ldrb	r3, [r7, #15]
 800c432:	461a      	mov	r2, r3
 800c434:	4b09      	ldr	r3, [pc, #36]	@ (800c45c <mix_sub_columns+0x284>)
 800c436:	5c9a      	ldrb	r2, [r3, r2]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	330b      	adds	r3, #11
 800c43c:	404a      	eors	r2, r1
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c442:	7d3b      	ldrb	r3, [r7, #20]
 800c444:	461a      	mov	r2, r3
 800c446:	4b05      	ldr	r3, [pc, #20]	@ (800c45c <mix_sub_columns+0x284>)
 800c448:	5c9a      	ldrb	r2, [r3, r2]
 800c44a:	7a7b      	ldrb	r3, [r7, #9]
 800c44c:	4619      	mov	r1, r3
 800c44e:	4b04      	ldr	r3, [pc, #16]	@ (800c460 <mix_sub_columns+0x288>)
 800c450:	5c5b      	ldrb	r3, [r3, r1]
 800c452:	4053      	eors	r3, r2
 800c454:	b2da      	uxtb	r2, r3
 800c456:	7bbb      	ldrb	r3, [r7, #14]
 800c458:	4619      	mov	r1, r3
 800c45a:	e005      	b.n	800c468 <mix_sub_columns+0x290>
 800c45c:	0802299c 	.word	0x0802299c
 800c460:	08022a9c 	.word	0x08022a9c
 800c464:	0802289c 	.word	0x0802289c
 800c468:	4b2d      	ldr	r3, [pc, #180]	@ (800c520 <mix_sub_columns+0x348>)
 800c46a:	5c5b      	ldrb	r3, [r3, r1]
 800c46c:	4053      	eors	r3, r2
 800c46e:	b2d9      	uxtb	r1, r3
 800c470:	7cfb      	ldrb	r3, [r7, #19]
 800c472:	461a      	mov	r2, r3
 800c474:	4b2a      	ldr	r3, [pc, #168]	@ (800c520 <mix_sub_columns+0x348>)
 800c476:	5c9a      	ldrb	r2, [r3, r2]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	330c      	adds	r3, #12
 800c47c:	404a      	eors	r2, r1
 800c47e:	b2d2      	uxtb	r2, r2
 800c480:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c482:	7d3b      	ldrb	r3, [r7, #20]
 800c484:	461a      	mov	r2, r3
 800c486:	4b26      	ldr	r3, [pc, #152]	@ (800c520 <mix_sub_columns+0x348>)
 800c488:	5c9a      	ldrb	r2, [r3, r2]
 800c48a:	7a7b      	ldrb	r3, [r7, #9]
 800c48c:	4619      	mov	r1, r3
 800c48e:	4b25      	ldr	r3, [pc, #148]	@ (800c524 <mix_sub_columns+0x34c>)
 800c490:	5c5b      	ldrb	r3, [r3, r1]
 800c492:	4053      	eors	r3, r2
 800c494:	b2da      	uxtb	r2, r3
 800c496:	7bbb      	ldrb	r3, [r7, #14]
 800c498:	4619      	mov	r1, r3
 800c49a:	4b23      	ldr	r3, [pc, #140]	@ (800c528 <mix_sub_columns+0x350>)
 800c49c:	5c5b      	ldrb	r3, [r3, r1]
 800c49e:	4053      	eors	r3, r2
 800c4a0:	b2d9      	uxtb	r1, r3
 800c4a2:	7cfb      	ldrb	r3, [r7, #19]
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b1e      	ldr	r3, [pc, #120]	@ (800c520 <mix_sub_columns+0x348>)
 800c4a8:	5c9a      	ldrb	r2, [r3, r2]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	330d      	adds	r3, #13
 800c4ae:	404a      	eors	r2, r1
 800c4b0:	b2d2      	uxtb	r2, r2
 800c4b2:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c4b4:	7d3b      	ldrb	r3, [r7, #20]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	4b19      	ldr	r3, [pc, #100]	@ (800c520 <mix_sub_columns+0x348>)
 800c4ba:	5c9a      	ldrb	r2, [r3, r2]
 800c4bc:	7a7b      	ldrb	r3, [r7, #9]
 800c4be:	4619      	mov	r1, r3
 800c4c0:	4b17      	ldr	r3, [pc, #92]	@ (800c520 <mix_sub_columns+0x348>)
 800c4c2:	5c5b      	ldrb	r3, [r3, r1]
 800c4c4:	4053      	eors	r3, r2
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	4b15      	ldr	r3, [pc, #84]	@ (800c524 <mix_sub_columns+0x34c>)
 800c4ce:	5c5b      	ldrb	r3, [r3, r1]
 800c4d0:	4053      	eors	r3, r2
 800c4d2:	b2d9      	uxtb	r1, r3
 800c4d4:	7cfb      	ldrb	r3, [r7, #19]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	4b13      	ldr	r3, [pc, #76]	@ (800c528 <mix_sub_columns+0x350>)
 800c4da:	5c9a      	ldrb	r2, [r3, r2]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	330e      	adds	r3, #14
 800c4e0:	404a      	eors	r2, r1
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c4e6:	7d3b      	ldrb	r3, [r7, #20]
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c528 <mix_sub_columns+0x350>)
 800c4ec:	5c9a      	ldrb	r2, [r3, r2]
 800c4ee:	7a7b      	ldrb	r3, [r7, #9]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c520 <mix_sub_columns+0x348>)
 800c4f4:	5c5b      	ldrb	r3, [r3, r1]
 800c4f6:	4053      	eors	r3, r2
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	7bbb      	ldrb	r3, [r7, #14]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	4b08      	ldr	r3, [pc, #32]	@ (800c520 <mix_sub_columns+0x348>)
 800c500:	5c5b      	ldrb	r3, [r3, r1]
 800c502:	4053      	eors	r3, r2
 800c504:	b2d9      	uxtb	r1, r3
 800c506:	7cfb      	ldrb	r3, [r7, #19]
 800c508:	461a      	mov	r2, r3
 800c50a:	4b06      	ldr	r3, [pc, #24]	@ (800c524 <mix_sub_columns+0x34c>)
 800c50c:	5c9a      	ldrb	r2, [r3, r2]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	330f      	adds	r3, #15
 800c512:	404a      	eors	r2, r1
 800c514:	b2d2      	uxtb	r2, r2
 800c516:	701a      	strb	r2, [r3, #0]
  }
 800c518:	bf00      	nop
 800c51a:	3718      	adds	r7, #24
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	0802289c 	.word	0x0802289c
 800c524:	0802299c 	.word	0x0802299c
 800c528:	08022a9c 	.word	0x08022a9c

0800c52c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	460b      	mov	r3, r1
 800c536:	607a      	str	r2, [r7, #4]
 800c538:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c53a:	7afb      	ldrb	r3, [r7, #11]
 800c53c:	3b10      	subs	r3, #16
 800c53e:	2b10      	cmp	r3, #16
 800c540:	bf8c      	ite	hi
 800c542:	2201      	movhi	r2, #1
 800c544:	2200      	movls	r2, #0
 800c546:	b2d2      	uxtb	r2, r2
 800c548:	2a00      	cmp	r2, #0
 800c54a:	d10b      	bne.n	800c564 <lorawan_aes_set_key+0x38>
 800c54c:	4a64      	ldr	r2, [pc, #400]	@ (800c6e0 <lorawan_aes_set_key+0x1b4>)
 800c54e:	fa22 f303 	lsr.w	r3, r2, r3
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	bf14      	ite	ne
 800c55a:	2301      	movne	r3, #1
 800c55c:	2300      	moveq	r3, #0
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b00      	cmp	r3, #0
 800c562:	d105      	bne.n	800c570 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800c56c:	23ff      	movs	r3, #255	@ 0xff
 800c56e:	e0b2      	b.n	800c6d6 <lorawan_aes_set_key+0x1aa>
        break;
 800c570:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	7afa      	ldrb	r2, [r7, #11]
 800c576:	68f9      	ldr	r1, [r7, #12]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff fbf9 	bl	800bd70 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	331c      	adds	r3, #28
 800c582:	b2db      	uxtb	r3, r3
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c588:	7c7b      	ldrb	r3, [r7, #17]
 800c58a:	091b      	lsrs	r3, r3, #4
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	3b01      	subs	r3, #1
 800c590:	b2da      	uxtb	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c598:	7afb      	ldrb	r3, [r7, #11]
 800c59a:	75fb      	strb	r3, [r7, #23]
 800c59c:	2301      	movs	r3, #1
 800c59e:	75bb      	strb	r3, [r7, #22]
 800c5a0:	e093      	b.n	800c6ca <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	3b04      	subs	r3, #4
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	5cd3      	ldrb	r3, [r2, r3]
 800c5aa:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c5ac:	7dfb      	ldrb	r3, [r7, #23]
 800c5ae:	3b03      	subs	r3, #3
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	5cd3      	ldrb	r3, [r2, r3]
 800c5b4:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	3b02      	subs	r3, #2
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	5cd3      	ldrb	r3, [r2, r3]
 800c5be:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c5c0:	7dfb      	ldrb	r3, [r7, #23]
 800c5c2:	3b01      	subs	r3, #1
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	5cd3      	ldrb	r3, [r2, r3]
 800c5c8:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c5ca:	7dfb      	ldrb	r3, [r7, #23]
 800c5cc:	7afa      	ldrb	r2, [r7, #11]
 800c5ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5d2:	fb01 f202 	mul.w	r2, r1, r2
 800c5d6:	1a9b      	subs	r3, r3, r2
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d127      	bne.n	800c62e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800c5de:	7d7b      	ldrb	r3, [r7, #21]
 800c5e0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c5e2:	7d3b      	ldrb	r3, [r7, #20]
 800c5e4:	4a3f      	ldr	r2, [pc, #252]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c5e6:	5cd2      	ldrb	r2, [r2, r3]
 800c5e8:	7dbb      	ldrb	r3, [r7, #22]
 800c5ea:	4053      	eors	r3, r2
 800c5ec:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c5ee:	7cfb      	ldrb	r3, [r7, #19]
 800c5f0:	4a3c      	ldr	r2, [pc, #240]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c5f2:	5cd3      	ldrb	r3, [r2, r3]
 800c5f4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c5f6:	7cbb      	ldrb	r3, [r7, #18]
 800c5f8:	4a3a      	ldr	r2, [pc, #232]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c5fa:	5cd3      	ldrb	r3, [r2, r3]
 800c5fc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c5fe:	7c3b      	ldrb	r3, [r7, #16]
 800c600:	4a38      	ldr	r2, [pc, #224]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c602:	5cd3      	ldrb	r3, [r2, r3]
 800c604:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c606:	7dbb      	ldrb	r3, [r7, #22]
 800c608:	005b      	lsls	r3, r3, #1
 800c60a:	b25a      	sxtb	r2, r3
 800c60c:	7dbb      	ldrb	r3, [r7, #22]
 800c60e:	09db      	lsrs	r3, r3, #7
 800c610:	b2db      	uxtb	r3, r3
 800c612:	4619      	mov	r1, r3
 800c614:	0049      	lsls	r1, r1, #1
 800c616:	440b      	add	r3, r1
 800c618:	4619      	mov	r1, r3
 800c61a:	00c8      	lsls	r0, r1, #3
 800c61c:	4619      	mov	r1, r3
 800c61e:	4603      	mov	r3, r0
 800c620:	440b      	add	r3, r1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	b25b      	sxtb	r3, r3
 800c626:	4053      	eors	r3, r2
 800c628:	b25b      	sxtb	r3, r3
 800c62a:	75bb      	strb	r3, [r7, #22]
 800c62c:	e01c      	b.n	800c668 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c62e:	7afb      	ldrb	r3, [r7, #11]
 800c630:	2b18      	cmp	r3, #24
 800c632:	d919      	bls.n	800c668 <lorawan_aes_set_key+0x13c>
 800c634:	7dfb      	ldrb	r3, [r7, #23]
 800c636:	7afa      	ldrb	r2, [r7, #11]
 800c638:	fbb3 f1f2 	udiv	r1, r3, r2
 800c63c:	fb01 f202 	mul.w	r2, r1, r2
 800c640:	1a9b      	subs	r3, r3, r2
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b10      	cmp	r3, #16
 800c646:	d10f      	bne.n	800c668 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800c648:	7d7b      	ldrb	r3, [r7, #21]
 800c64a:	4a26      	ldr	r2, [pc, #152]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c64c:	5cd3      	ldrb	r3, [r2, r3]
 800c64e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c650:	7d3b      	ldrb	r3, [r7, #20]
 800c652:	4a24      	ldr	r2, [pc, #144]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c654:	5cd3      	ldrb	r3, [r2, r3]
 800c656:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c658:	7cfb      	ldrb	r3, [r7, #19]
 800c65a:	4a22      	ldr	r2, [pc, #136]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c65c:	5cd3      	ldrb	r3, [r2, r3]
 800c65e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c660:	7cbb      	ldrb	r3, [r7, #18]
 800c662:	4a20      	ldr	r2, [pc, #128]	@ (800c6e4 <lorawan_aes_set_key+0x1b8>)
 800c664:	5cd3      	ldrb	r3, [r2, r3]
 800c666:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c668:	7dfa      	ldrb	r2, [r7, #23]
 800c66a:	7afb      	ldrb	r3, [r7, #11]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c670:	7c3b      	ldrb	r3, [r7, #16]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	5cd1      	ldrb	r1, [r2, r3]
 800c676:	7dfb      	ldrb	r3, [r7, #23]
 800c678:	7d7a      	ldrb	r2, [r7, #21]
 800c67a:	404a      	eors	r2, r1
 800c67c:	b2d1      	uxtb	r1, r2
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c682:	7c3b      	ldrb	r3, [r7, #16]
 800c684:	3301      	adds	r3, #1
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	5cd1      	ldrb	r1, [r2, r3]
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	3301      	adds	r3, #1
 800c68e:	7d3a      	ldrb	r2, [r7, #20]
 800c690:	404a      	eors	r2, r1
 800c692:	b2d1      	uxtb	r1, r2
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c698:	7c3b      	ldrb	r3, [r7, #16]
 800c69a:	3302      	adds	r3, #2
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	5cd1      	ldrb	r1, [r2, r3]
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	3302      	adds	r3, #2
 800c6a4:	7cfa      	ldrb	r2, [r7, #19]
 800c6a6:	404a      	eors	r2, r1
 800c6a8:	b2d1      	uxtb	r1, r2
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c6ae:	7c3b      	ldrb	r3, [r7, #16]
 800c6b0:	3303      	adds	r3, #3
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	5cd1      	ldrb	r1, [r2, r3]
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	3303      	adds	r3, #3
 800c6ba:	7cba      	ldrb	r2, [r7, #18]
 800c6bc:	404a      	eors	r2, r1
 800c6be:	b2d1      	uxtb	r1, r2
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c6c4:	7dfb      	ldrb	r3, [r7, #23]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	75fb      	strb	r3, [r7, #23]
 800c6ca:	7dfa      	ldrb	r2, [r7, #23]
 800c6cc:	7c7b      	ldrb	r3, [r7, #17]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	f4ff af67 	bcc.w	800c5a2 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	00010101 	.word	0x00010101
 800c6e4:	0802289c 	.word	0x0802289c

0800c6e8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08a      	sub	sp, #40	@ 0x28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d038      	beq.n	800c770 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	f107 0314 	add.w	r3, r7, #20
 800c704:	68f9      	ldr	r1, [r7, #12]
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff fc06 	bl	800bf18 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c70c:	2301      	movs	r3, #1
 800c70e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c712:	e014      	b.n	800c73e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c714:	f107 0314 	add.w	r3, r7, #20
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fd5d 	bl	800c1d8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c724:	0112      	lsls	r2, r2, #4
 800c726:	441a      	add	r2, r3
 800c728:	f107 0314 	add.w	r3, r7, #20
 800c72c:	4611      	mov	r1, r2
 800c72e:	4618      	mov	r0, r3
 800c730:	f7ff fcab 	bl	800c08a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c738:	3301      	adds	r3, #1
 800c73a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c744:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c748:	429a      	cmp	r2, r3
 800c74a:	d3e3      	bcc.n	800c714 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c74c:	f107 0314 	add.w	r3, r7, #20
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fca7 	bl	800c0a4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c75c:	0112      	lsls	r2, r2, #4
 800c75e:	441a      	add	r2, r3
 800c760:	f107 0314 	add.w	r3, r7, #20
 800c764:	4619      	mov	r1, r3
 800c766:	68b8      	ldr	r0, [r7, #8]
 800c768:	f7ff fbd6 	bl	800bf18 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	e000      	b.n	800c772 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c770:	23ff      	movs	r3, #255	@ 0xff
}
 800c772:	4618      	mov	r0, r3
 800c774:	3728      	adds	r7, #40	@ 0x28
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
	...

0800c77c <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800c786:	f107 0208 	add.w	r2, r7, #8
 800c78a:	79fb      	ldrb	r3, [r7, #7]
 800c78c:	4611      	mov	r1, r2
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 f95e 	bl	800ca50 <SecureElementGetKeyByID>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d115      	bne.n	800c7c6 <PrintKey+0x4a>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c79a:	2300      	movs	r3, #0
 800c79c:	73fb      	strb	r3, [r7, #15]
 800c79e:	e00d      	b.n	800c7bc <PrintKey+0x40>
        {
            if( KeyLabel[i].keyID == keyID )
 800c7a0:	7bfa      	ldrb	r2, [r7, #15]
 800c7a2:	490a      	ldr	r1, [pc, #40]	@ (800c7cc <PrintKey+0x50>)
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	4413      	add	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	440b      	add	r3, r1
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	79fa      	ldrb	r2, [r7, #7]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d006      	beq.n	800c7c4 <PrintKey+0x48>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	73fb      	strb	r3, [r7, #15]
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	2b0a      	cmp	r3, #10
 800c7c0:	d9ee      	bls.n	800c7a0 <PrintKey+0x24>
 800c7c2:	e000      	b.n	800c7c6 <PrintKey+0x4a>
                MW_LOG( TS_OFF, VLEVEL_M,
                        "###### %s %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
                        KeyLabel[i].keyStr,
                        HEX16( extractable_key ) );
#endif /* LORAWAN_KMS */
                return;
 800c7c4:	bf00      	nop
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	08022b9c 	.word	0x08022b9c

0800c7d0 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800c7de:	f107 0310 	add.w	r3, r7, #16
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fb9e 	bl	800cf24 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );

    SecureElementGetJoinEui( joinEui );
 800c7e8:	f107 0318 	add.w	r3, r7, #24
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f000 fbc9 	bl	800cf84 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );

    SecureElementGetDevAddr( mode, &devAddr );
 800c7f2:	f107 020c 	add.w	r2, r7, #12
 800c7f6:	79fb      	ldrb	r3, [r7, #7]
 800c7f8:	4611      	mov	r1, r2
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 fbf6 	bl	800cfec <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800c800:	bf00      	nop
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	6039      	str	r1, [r7, #0]
 800c812:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c814:	2300      	movs	r3, #0
 800c816:	73fb      	strb	r3, [r7, #15]
 800c818:	e01a      	b.n	800c850 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c81a:	4b12      	ldr	r3, [pc, #72]	@ (800c864 <GetKeyByID+0x5c>)
 800c81c:	6819      	ldr	r1, [r3, #0]
 800c81e:	7bfa      	ldrb	r2, [r7, #15]
 800c820:	4613      	mov	r3, r2
 800c822:	011b      	lsls	r3, r3, #4
 800c824:	4413      	add	r3, r2
 800c826:	440b      	add	r3, r1
 800c828:	3318      	adds	r3, #24
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	79fa      	ldrb	r2, [r7, #7]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d10b      	bne.n	800c84a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c832:	4b0c      	ldr	r3, [pc, #48]	@ (800c864 <GetKeyByID+0x5c>)
 800c834:	6819      	ldr	r1, [r3, #0]
 800c836:	7bfa      	ldrb	r2, [r7, #15]
 800c838:	4613      	mov	r3, r2
 800c83a:	011b      	lsls	r3, r3, #4
 800c83c:	4413      	add	r3, r2
 800c83e:	3318      	adds	r3, #24
 800c840:	18ca      	adds	r2, r1, r3
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c846:	2300      	movs	r3, #0
 800c848:	e006      	b.n	800c858 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
 800c84c:	3301      	adds	r3, #1
 800c84e:	73fb      	strb	r3, [r7, #15]
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	2b0a      	cmp	r3, #10
 800c854:	d9e1      	bls.n	800c81a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c856:	2303      	movs	r3, #3
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	2000b8bc 	.word	0x2000b8bc

0800c868 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800c868:	b590      	push	{r4, r7, lr}
 800c86a:	b0d1      	sub	sp, #324	@ 0x144
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800c872:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800c876:	6020      	str	r0, [r4, #0]
 800c878:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c87c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800c880:	6001      	str	r1, [r0, #0]
 800c882:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800c886:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800c88a:	600a      	str	r2, [r1, #0]
 800c88c:	461a      	mov	r2, r3
 800c88e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c892:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800c896:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c898:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c89c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <ComputeCmac+0x46>
 800c8a6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	e05d      	b.n	800c96e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c8b2:	f107 0314 	add.w	r3, r7, #20
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe ffb4 	bl	800b824 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c8bc:	f107 0210 	add.w	r2, r7, #16
 800c8c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c8c4:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	4611      	mov	r1, r2
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff ff9b 	bl	800c808 <GetKeyByID>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c8d8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d144      	bne.n	800c96a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c8e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c8e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	f107 0314 	add.w	r3, r7, #20
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe ffaf 	bl	800b856 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c8f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c8fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d009      	beq.n	800c91a <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800c906:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c90a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c90e:	f107 0014 	add.w	r0, r7, #20
 800c912:	2210      	movs	r2, #16
 800c914:	6819      	ldr	r1, [r3, #0]
 800c916:	f7fe ffad 	bl	800b874 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c91a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c91e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800c922:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c926:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c92a:	f107 0014 	add.w	r0, r7, #20
 800c92e:	6812      	ldr	r2, [r2, #0]
 800c930:	6819      	ldr	r1, [r3, #0]
 800c932:	f7fe ff9f 	bl	800b874 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c936:	f107 0214 	add.w	r2, r7, #20
 800c93a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff f859 	bl	800b9f8 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800c946:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800c94a:	461a      	mov	r2, r3
 800c94c:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c950:	021b      	lsls	r3, r3, #8
 800c952:	431a      	orrs	r2, r3
 800c954:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c958:	041b      	lsls	r3, r3, #16
 800c95a:	431a      	orrs	r2, r3
 800c95c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c960:	061b      	lsls	r3, r3, #24
 800c962:	431a      	orrs	r2, r3
 800c964:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c968:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c96a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800c96e:	4618      	mov	r0, r3
 800c970:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800c974:	46bd      	mov	sp, r7
 800c976:	bd90      	pop	{r4, r7, pc}

0800c978 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c986:	2302      	movs	r3, #2
 800c988:	e00a      	b.n	800c9a0 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800c98a:	4a07      	ldr	r2, [pc, #28]	@ (800c9a8 <SecureElementInit+0x30>)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800c990:	4b05      	ldr	r3, [pc, #20]	@ (800c9a8 <SecureElementInit+0x30>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	22d8      	movs	r2, #216	@ 0xd8
 800c996:	4905      	ldr	r1, [pc, #20]	@ (800c9ac <SecureElementInit+0x34>)
 800c998:	4618      	mov	r0, r3
 800c99a:	f00d fb36 	bl	801a00a <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	2000b8bc 	.word	0x2000b8bc
 800c9ac:	080232c0 	.word	0x080232c0

0800c9b0 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800c9be:	f107 030c 	add.w	r3, r7, #12
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 faae 	bl	800cf24 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800c9c8:	f107 0308 	add.w	r3, r7, #8
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	2001      	movs	r0, #1
 800c9d0:	f000 fb0c 	bl	800cfec <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d024      	beq.n	800ca24 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c9de:	2300      	movs	r3, #0
 800c9e0:	75bb      	strb	r3, [r7, #22]
 800c9e2:	e00c      	b.n	800c9fe <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800c9e4:	7dbb      	ldrb	r3, [r7, #22]
 800c9e6:	3318      	adds	r3, #24
 800c9e8:	443b      	add	r3, r7
 800c9ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	75fb      	strb	r3, [r7, #23]
                break;
 800c9f6:	e005      	b.n	800ca04 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800c9f8:	7dbb      	ldrb	r3, [r7, #22]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	75bb      	strb	r3, [r7, #22]
 800c9fe:	7dbb      	ldrb	r3, [r7, #22]
 800ca00:	2b07      	cmp	r3, #7
 800ca02:	d9ef      	bls.n	800c9e4 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
 800ca06:	f083 0301 	eor.w	r3, r3, #1
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d009      	beq.n	800ca24 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800ca10:	f107 020c 	add.w	r2, r7, #12
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	4610      	mov	r0, r2
 800ca18:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800ca1a:	f107 030c 	add.w	r3, r7, #12
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 fa68 	bl	800cef4 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00c      	beq.n	800ca44 <SecureElementInitMcuID+0x94>
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d109      	bne.n	800ca44 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800ca30:	f107 0208 	add.w	r2, r7, #8
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	4610      	mov	r0, r2
 800ca38:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	2001      	movs	r0, #1
 800ca40:	f000 fab8 	bl	800cfb4 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	6039      	str	r1, [r7, #0]
 800ca5a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	73fb      	strb	r3, [r7, #15]
 800ca60:	e01a      	b.n	800ca98 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ca62:	4b12      	ldr	r3, [pc, #72]	@ (800caac <SecureElementGetKeyByID+0x5c>)
 800ca64:	6819      	ldr	r1, [r3, #0]
 800ca66:	7bfa      	ldrb	r2, [r7, #15]
 800ca68:	4613      	mov	r3, r2
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	4413      	add	r3, r2
 800ca6e:	440b      	add	r3, r1
 800ca70:	3318      	adds	r3, #24
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	79fa      	ldrb	r2, [r7, #7]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d10b      	bne.n	800ca92 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ca7a:	4b0c      	ldr	r3, [pc, #48]	@ (800caac <SecureElementGetKeyByID+0x5c>)
 800ca7c:	6819      	ldr	r1, [r3, #0]
 800ca7e:	7bfa      	ldrb	r2, [r7, #15]
 800ca80:	4613      	mov	r3, r2
 800ca82:	011b      	lsls	r3, r3, #4
 800ca84:	4413      	add	r3, r2
 800ca86:	3318      	adds	r3, #24
 800ca88:	18ca      	adds	r2, r1, r3
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e006      	b.n	800caa0 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	3301      	adds	r3, #1
 800ca96:	73fb      	strb	r3, [r7, #15]
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
 800ca9a:	2b0a      	cmp	r3, #10
 800ca9c:	d9e1      	bls.n	800ca62 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ca9e:	2303      	movs	r3, #3
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	2000b8bc 	.word	0x2000b8bc

0800cab0 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800cab4:	2000      	movs	r0, #0
 800cab6:	f7ff fe61 	bl	800c77c <PrintKey>
    PrintKey( NWK_KEY );
 800caba:	2001      	movs	r0, #1
 800cabc:	f7ff fe5e 	bl	800c77c <PrintKey>
    PrintKey( APP_S_KEY );
 800cac0:	2009      	movs	r0, #9
 800cac2:	f7ff fe5b 	bl	800c77c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800cac6:	2008      	movs	r0, #8
 800cac8:	f7ff fe58 	bl	800c77c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800cacc:	2000      	movs	r0, #0
 800cace:	f7ff fe7f 	bl	800c7d0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	4603      	mov	r3, r0
 800cae0:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800cae2:	200b      	movs	r0, #11
 800cae4:	f7ff fe4a 	bl	800c77c <PrintKey>
    PrintKey( MC_KE_KEY );
 800cae8:	200c      	movs	r0, #12
 800caea:	f7ff fe47 	bl	800c77c <PrintKey>
    PrintKey( APP_S_KEY );
 800caee:	2009      	movs	r0, #9
 800caf0:	f7ff fe44 	bl	800c77c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800caf4:	2008      	movs	r0, #8
 800caf6:	f7ff fe41 	bl	800c77c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800cafa:	200a      	movs	r0, #10
 800cafc:	f7ff fe3e 	bl	800c77c <PrintKey>
    PrintIds( mode );
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7ff fe64 	bl	800c7d0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3708      	adds	r7, #8
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
	...

0800cb14 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	6039      	str	r1, [r7, #0]
 800cb1e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cb26:	2302      	movs	r3, #2
 800cb28:	e04c      	b.n	800cbc4 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	77fb      	strb	r3, [r7, #31]
 800cb2e:	e045      	b.n	800cbbc <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cb30:	4b26      	ldr	r3, [pc, #152]	@ (800cbcc <SecureElementSetKey+0xb8>)
 800cb32:	6819      	ldr	r1, [r3, #0]
 800cb34:	7ffa      	ldrb	r2, [r7, #31]
 800cb36:	4613      	mov	r3, r2
 800cb38:	011b      	lsls	r3, r3, #4
 800cb3a:	4413      	add	r3, r2
 800cb3c:	440b      	add	r3, r1
 800cb3e:	3318      	adds	r3, #24
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	79fa      	ldrb	r2, [r7, #7]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d136      	bne.n	800cbb6 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800cb48:	79fb      	ldrb	r3, [r7, #7]
 800cb4a:	2b0d      	cmp	r3, #13
 800cb4c:	d123      	bne.n	800cb96 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800cb4e:	2306      	movs	r3, #6
 800cb50:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
 800cb56:	f107 0310 	add.w	r3, r7, #16
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	605a      	str	r2, [r3, #4]
 800cb60:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800cb62:	f107 030c 	add.w	r3, r7, #12
 800cb66:	220c      	movs	r2, #12
 800cb68:	2110      	movs	r1, #16
 800cb6a:	6838      	ldr	r0, [r7, #0]
 800cb6c:	f000 f876 	bl	800cc5c <SecureElementAesEncrypt>
 800cb70:	4603      	mov	r3, r0
 800cb72:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800cb74:	4b15      	ldr	r3, [pc, #84]	@ (800cbcc <SecureElementSetKey+0xb8>)
 800cb76:	6819      	ldr	r1, [r3, #0]
 800cb78:	7ffa      	ldrb	r2, [r7, #31]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	011b      	lsls	r3, r3, #4
 800cb7e:	4413      	add	r3, r2
 800cb80:	3318      	adds	r3, #24
 800cb82:	440b      	add	r3, r1
 800cb84:	3301      	adds	r3, #1
 800cb86:	f107 010c 	add.w	r1, r7, #12
 800cb8a:	2210      	movs	r2, #16
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f00d fa3c 	bl	801a00a <memcpy1>
                return retval;
 800cb92:	7fbb      	ldrb	r3, [r7, #30]
 800cb94:	e016      	b.n	800cbc4 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800cb96:	4b0d      	ldr	r3, [pc, #52]	@ (800cbcc <SecureElementSetKey+0xb8>)
 800cb98:	6819      	ldr	r1, [r3, #0]
 800cb9a:	7ffa      	ldrb	r2, [r7, #31]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	4413      	add	r3, r2
 800cba2:	3318      	adds	r3, #24
 800cba4:	440b      	add	r3, r1
 800cba6:	3301      	adds	r3, #1
 800cba8:	2210      	movs	r2, #16
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f00d fa2c 	bl	801a00a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e006      	b.n	800cbc4 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cbb6:	7ffb      	ldrb	r3, [r7, #31]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	77fb      	strb	r3, [r7, #31]
 800cbbc:	7ffb      	ldrb	r3, [r7, #31]
 800cbbe:	2b0a      	cmp	r3, #10
 800cbc0:	d9b6      	bls.n	800cb30 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cbc2:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	2000b8bc 	.word	0x2000b8bc

0800cbd0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af02      	add	r7, sp, #8
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800cbde:	78fb      	ldrb	r3, [r7, #3]
 800cbe0:	2b0b      	cmp	r3, #11
 800cbe2:	d901      	bls.n	800cbe8 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e009      	b.n	800cbfc <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800cbe8:	78fa      	ldrb	r2, [r7, #3]
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	68b9      	ldr	r1, [r7, #8]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	f7ff fe37 	bl	800c868 <ComputeCmac>
 800cbfa:	4603      	mov	r3, r0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af02      	add	r7, sp, #8
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
 800cc10:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d101      	bne.n	800cc1c <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cc18:	2302      	movs	r3, #2
 800cc1a:	e01b      	b.n	800cc54 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800cc1c:	2306      	movs	r3, #6
 800cc1e:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800cc24:	78fa      	ldrb	r2, [r7, #3]
 800cc26:	f107 0310 	add.w	r3, r7, #16
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	4613      	mov	r3, r2
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	68f9      	ldr	r1, [r7, #12]
 800cc32:	2000      	movs	r0, #0
 800cc34:	f7ff fe18 	bl	800c868 <ComputeCmac>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800cc42:	7dfb      	ldrb	r3, [r7, #23]
 800cc44:	e006      	b.n	800cc54 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d001      	beq.n	800cc52 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3718      	adds	r7, #24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b0c2      	sub	sp, #264	@ 0x108
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cc68:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800cc6c:	6001      	str	r1, [r0, #0]
 800cc6e:	4611      	mov	r1, r2
 800cc70:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800cc74:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800cc82:	460a      	mov	r2, r1
 800cc84:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d006      	beq.n	800cc9a <SecureElementAesEncrypt+0x3e>
 800cc8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	e059      	b.n	800cd52 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800cc9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f003 030f 	and.w	r3, r3, #15
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ccb0:	2305      	movs	r3, #5
 800ccb2:	e04e      	b.n	800cd52 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ccb4:	f107 0314 	add.w	r3, r7, #20
 800ccb8:	22f0      	movs	r2, #240	@ 0xf0
 800ccba:	2100      	movs	r1, #0
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f00d f9e1 	bl	801a084 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ccc2:	f107 0210 	add.w	r2, r7, #16
 800ccc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccca:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	4611      	mov	r1, r2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7ff fd98 	bl	800c808 <GetKeyByID>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ccde:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d133      	bne.n	800cd4e <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	3301      	adds	r3, #1
 800ccea:	f107 0214 	add.w	r2, r7, #20
 800ccee:	2110      	movs	r1, #16
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff fc1b 	bl	800c52c <lorawan_aes_set_key>

        uint8_t block = 0;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800ccfc:	e020      	b.n	800cd40 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800ccfe:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	18d0      	adds	r0, r2, r3
 800cd06:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cd0a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800cd0e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800cd12:	6812      	ldr	r2, [r2, #0]
 800cd14:	4413      	add	r3, r2
 800cd16:	f107 0214 	add.w	r2, r7, #20
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	f7ff fce4 	bl	800c6e8 <lorawan_aes_encrypt>
            block = block + 16;
 800cd20:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800cd24:	3310      	adds	r3, #16
 800cd26:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800cd2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800cd32:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800cd36:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800cd3a:	6812      	ldr	r2, [r2, #0]
 800cd3c:	3a10      	subs	r2, #16
 800cd3e:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800cd40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1d7      	bne.n	800ccfe <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800cd4e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd72:	2302      	movs	r3, #2
 800cd74:	e02e      	b.n	800cdd4 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800cd76:	2306      	movs	r3, #6
 800cd78:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800cd7a:	78bb      	ldrb	r3, [r7, #2]
 800cd7c:	2b0c      	cmp	r3, #12
 800cd7e:	d104      	bne.n	800cd8a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	2b0b      	cmp	r3, #11
 800cd84:	d001      	beq.n	800cd8a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800cd86:	2303      	movs	r3, #3
 800cd88:	e024      	b.n	800cdd4 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]
 800cd8e:	f107 0310 	add.w	r3, r7, #16
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	605a      	str	r2, [r3, #4]
 800cd98:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800cd9a:	f107 030c 	add.w	r3, r7, #12
 800cd9e:	78fa      	ldrb	r2, [r7, #3]
 800cda0:	2110      	movs	r1, #16
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7ff ff5a 	bl	800cc5c <SecureElementAesEncrypt>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cdac:	7ffb      	ldrb	r3, [r7, #31]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800cdb2:	7ffb      	ldrb	r3, [r7, #31]
 800cdb4:	e00e      	b.n	800cdd4 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800cdb6:	f107 020c 	add.w	r2, r7, #12
 800cdba:	78bb      	ldrb	r3, [r7, #2]
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7ff fea8 	bl	800cb14 <SecureElementSetKey>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cdc8:	7ffb      	ldrb	r3, [r7, #31]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800cdce:	7ffb      	ldrb	r3, [r7, #31]
 800cdd0:	e000      	b.n	800cdd4 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800cdd2:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3720      	adds	r7, #32
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b086      	sub	sp, #24
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	607b      	str	r3, [r7, #4]
 800cde6:	4603      	mov	r3, r0
 800cde8:	73fb      	strb	r3, [r7, #15]
 800cdea:	4613      	mov	r3, r2
 800cdec:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d005      	beq.n	800ce00 <SecureElementProcessJoinAccept+0x24>
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <SecureElementProcessJoinAccept+0x24>
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ce00:	2302      	movs	r3, #2
 800ce02:	e05c      	b.n	800cebe <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ce04:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce08:	2b21      	cmp	r3, #33	@ 0x21
 800ce0a:	d901      	bls.n	800ce10 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ce0c:	2305      	movs	r3, #5
 800ce0e:	e056      	b.n	800cebe <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800ce10:	2301      	movs	r3, #1
 800ce12:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ce14:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ce20:	f00d f8f3 	bl	801a00a <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	1c58      	adds	r0, r3, #1
 800ce28:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce32:	3301      	adds	r3, #1
 800ce34:	7dfa      	ldrb	r2, [r7, #23]
 800ce36:	f7ff ff11 	bl	800cc5c <SecureElementAesEncrypt>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ce40:	2307      	movs	r3, #7
 800ce42:	e03c      	b.n	800cebe <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ce44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce46:	330b      	adds	r3, #11
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	09db      	lsrs	r3, r3, #7
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce50:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ce52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce56:	3b04      	subs	r3, #4
 800ce58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce5a:	4413      	add	r3, r2
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce64:	3b03      	subs	r3, #3
 800ce66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce68:	4413      	add	r3, r2
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	021b      	lsls	r3, r3, #8
 800ce6e:	ea41 0203 	orr.w	r2, r1, r3
 800ce72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce76:	3b02      	subs	r3, #2
 800ce78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce7a:	440b      	add	r3, r1
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	041b      	lsls	r3, r3, #16
 800ce80:	431a      	orrs	r2, r3
 800ce82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce8a:	440b      	add	r3, r1
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	061b      	lsls	r3, r3, #24
 800ce90:	4313      	orrs	r3, r2
 800ce92:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d10d      	bne.n	800ceb8 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ce9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cea0:	3b04      	subs	r3, #4
 800cea2:	4619      	mov	r1, r3
 800cea4:	2301      	movs	r3, #1
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ceaa:	f7ff feab 	bl	800cc04 <SecureElementVerifyAesCmac>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d003      	beq.n	800cebc <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e002      	b.n	800cebe <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ceb8:	2304      	movs	r3, #4
 800ceba:	e000      	b.n	800cebe <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
	...

0800cec8 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ced6:	2302      	movs	r3, #2
 800ced8:	e006      	b.n	800cee8 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800ceda:	4b05      	ldr	r3, [pc, #20]	@ (800cef0 <SecureElementRandomNumber+0x28>)
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	4798      	blx	r3
 800cee0:	4602      	mov	r2, r0
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	08022c78 	.word	0x08022c78

0800cef4 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf02:	2302      	movs	r3, #2
 800cf04:	e007      	b.n	800cf16 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800cf06:	4b06      	ldr	r3, [pc, #24]	@ (800cf20 <SecureElementSetDevEui+0x2c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	6879      	ldr	r1, [r7, #4]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f00d f87b 	bl	801a00a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cf14:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	2000b8bc 	.word	0x2000b8bc

0800cf24 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf32:	2302      	movs	r3, #2
 800cf34:	e007      	b.n	800cf46 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800cf36:	4b06      	ldr	r3, [pc, #24]	@ (800cf50 <SecureElementGetDevEui+0x2c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2208      	movs	r2, #8
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f00d f863 	bl	801a00a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cf44:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	2000b8bc 	.word	0x2000b8bc

0800cf54 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d101      	bne.n	800cf66 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf62:	2302      	movs	r3, #2
 800cf64:	e008      	b.n	800cf78 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800cf66:	4b06      	ldr	r3, [pc, #24]	@ (800cf80 <SecureElementSetJoinEui+0x2c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	2208      	movs	r2, #8
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f00d f84a 	bl	801a00a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cf76:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	2000b8bc 	.word	0x2000b8bc

0800cf84 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d101      	bne.n	800cf96 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf92:	2302      	movs	r3, #2
 800cf94:	e008      	b.n	800cfa8 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800cf96:	4b06      	ldr	r3, [pc, #24]	@ (800cfb0 <SecureElementGetJoinEui+0x2c>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	2208      	movs	r2, #8
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f00d f832 	bl	801a00a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cfa6:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3708      	adds	r7, #8
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	2000b8bc 	.word	0x2000b8bc

0800cfb4 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	4603      	mov	r3, r0
 800cfbc:	6039      	str	r1, [r7, #0]
 800cfbe:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800cfc0:	79fb      	ldrb	r3, [r7, #7]
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d104      	bne.n	800cfd0 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800cfc6:	4b08      	ldr	r3, [pc, #32]	@ (800cfe8 <SecureElementSetDevAddr+0x34>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	611a      	str	r2, [r3, #16]
 800cfce:	e003      	b.n	800cfd8 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800cfd0:	4b05      	ldr	r3, [pc, #20]	@ (800cfe8 <SecureElementSetDevAddr+0x34>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800cfd8:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	370c      	adds	r7, #12
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe4:	4770      	bx	lr
 800cfe6:	bf00      	nop
 800cfe8:	2000b8bc 	.word	0x2000b8bc

0800cfec <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	6039      	str	r1, [r7, #0]
 800cff6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cffe:	2302      	movs	r3, #2
 800d000:	e00e      	b.n	800d020 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d105      	bne.n	800d014 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800d008:	4b08      	ldr	r3, [pc, #32]	@ (800d02c <SecureElementGetDevAddr+0x40>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	691a      	ldr	r2, [r3, #16]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	601a      	str	r2, [r3, #0]
 800d012:	e004      	b.n	800d01e <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800d014:	4b05      	ldr	r3, [pc, #20]	@ (800d02c <SecureElementGetDevAddr+0x40>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	695a      	ldr	r2, [r3, #20]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800d01e:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800d020:	4618      	mov	r0, r3
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr
 800d02c:	2000b8bc 	.word	0x2000b8bc

0800d030 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d03a:	4a22      	ldr	r2, [pc, #136]	@ (800d0c4 <LmHandlerInit+0x94>)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d040:	4b21      	ldr	r3, [pc, #132]	@ (800d0c8 <LmHandlerInit+0x98>)
 800d042:	4a22      	ldr	r2, [pc, #136]	@ (800d0cc <LmHandlerInit+0x9c>)
 800d044:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d046:	4b20      	ldr	r3, [pc, #128]	@ (800d0c8 <LmHandlerInit+0x98>)
 800d048:	4a21      	ldr	r2, [pc, #132]	@ (800d0d0 <LmHandlerInit+0xa0>)
 800d04a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d04c:	4b1e      	ldr	r3, [pc, #120]	@ (800d0c8 <LmHandlerInit+0x98>)
 800d04e:	4a21      	ldr	r2, [pc, #132]	@ (800d0d4 <LmHandlerInit+0xa4>)
 800d050:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d052:	4b1d      	ldr	r3, [pc, #116]	@ (800d0c8 <LmHandlerInit+0x98>)
 800d054:	4a20      	ldr	r2, [pc, #128]	@ (800d0d8 <LmHandlerInit+0xa8>)
 800d056:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d058:	4b1a      	ldr	r3, [pc, #104]	@ (800d0c4 <LmHandlerInit+0x94>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a1f      	ldr	r2, [pc, #124]	@ (800d0dc <LmHandlerInit+0xac>)
 800d060:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d062:	4b18      	ldr	r3, [pc, #96]	@ (800d0c4 <LmHandlerInit+0x94>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	4a1c      	ldr	r2, [pc, #112]	@ (800d0dc <LmHandlerInit+0xac>)
 800d06a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d06c:	4b15      	ldr	r3, [pc, #84]	@ (800d0c4 <LmHandlerInit+0x94>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	4a1a      	ldr	r2, [pc, #104]	@ (800d0dc <LmHandlerInit+0xac>)
 800d074:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800d076:	4b13      	ldr	r3, [pc, #76]	@ (800d0c4 <LmHandlerInit+0x94>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	4a17      	ldr	r2, [pc, #92]	@ (800d0dc <LmHandlerInit+0xac>)
 800d07e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d080:	4b16      	ldr	r3, [pc, #88]	@ (800d0dc <LmHandlerInit+0xac>)
 800d082:	4a17      	ldr	r2, [pc, #92]	@ (800d0e0 <LmHandlerInit+0xb0>)
 800d084:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d086:	4b0f      	ldr	r3, [pc, #60]	@ (800d0c4 <LmHandlerInit+0x94>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	4a13      	ldr	r2, [pc, #76]	@ (800d0dc <LmHandlerInit+0xac>)
 800d08e:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800d090:	4914      	ldr	r1, [pc, #80]	@ (800d0e4 <LmHandlerInit+0xb4>)
 800d092:	2000      	movs	r0, #0
 800d094:	f000 fd48 	bl	800db28 <LmHandlerPackageRegister>
 800d098:	4603      	mov	r3, r0
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d002      	beq.n	800d0a4 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800d09e:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a2:	e00a      	b.n	800d0ba <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800d0a4:	463b      	mov	r3, r7
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f001 fa09 	bl	800e4be <LmhpPackagesRegistrationInit>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b6:	e000      	b.n	800d0ba <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	2000b904 	.word	0x2000b904
 800d0c8:	2000b908 	.word	0x2000b908
 800d0cc:	0800d7ed 	.word	0x0800d7ed
 800d0d0:	0800d861 	.word	0x0800d861
 800d0d4:	0800d941 	.word	0x0800d941
 800d0d8:	0800da95 	.word	0x0800da95
 800d0dc:	2000b918 	.word	0x2000b918
 800d0e0:	0800de79 	.word	0x0800de79
 800d0e4:	2000008c 	.word	0x2000008c

0800d0e8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b092      	sub	sp, #72	@ 0x48
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800d0f0:	2218      	movs	r2, #24
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	4851      	ldr	r0, [pc, #324]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d0f6:	f00c ff88 	bl	801a00a <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d0fa:	f7fb f821 	bl	8008140 <LoraInfo_GetPtr>
 800d0fe:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800d100:	4b4e      	ldr	r3, [pc, #312]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	461a      	mov	r2, r3
 800d106:	2301      	movs	r3, #1
 800d108:	4093      	lsls	r3, r2
 800d10a:	461a      	mov	r2, r3
 800d10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	4013      	ands	r3, r2
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <LmHandlerConfigure+0x32>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
        while( 1 ) {} /* error: Region is not defined in the MW */
 800d116:	bf00      	nop
 800d118:	e7fd      	b.n	800d116 <LmHandlerConfigure+0x2e>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800d11a:	4b48      	ldr	r3, [pc, #288]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	4947      	ldr	r1, [pc, #284]	@ (800d240 <LmHandlerConfigure+0x158>)
 800d122:	4848      	ldr	r0, [pc, #288]	@ (800d244 <LmHandlerConfigure+0x15c>)
 800d124:	f004 fc02 	bl	801192c <LoRaMacInitialization>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <LmHandlerConfigure+0x4c>
    {
        return LORAMAC_HANDLER_ERROR;
 800d12e:	f04f 33ff 	mov.w	r3, #4294967295
 800d132:	e07e      	b.n	800d232 <LmHandlerConfigure+0x14a>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800d134:	2305      	movs	r3, #5
 800d136:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d138:	2300      	movs	r3, #0
 800d13a:	623b      	str	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d13c:	f107 031c 	add.w	r3, r7, #28
 800d140:	4618      	mov	r0, r3
 800d142:	f005 f9a9 	bl	8012498 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800d146:	4b3e      	ldr	r3, [pc, #248]	@ (800d240 <LmHandlerConfigure+0x158>)
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	4a3d      	ldr	r2, [pc, #244]	@ (800d240 <LmHandlerConfigure+0x158>)
 800d14c:	68d2      	ldr	r2, [r2, #12]
 800d14e:	4611      	mov	r1, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f7ff fc2d 	bl	800c9b0 <SecureElementInitMcuID>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <LmHandlerConfigure+0x7a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d15c:	f04f 33ff 	mov.w	r3, #4294967295
 800d160:	e067      	b.n	800d232 <LmHandlerConfigure+0x14a>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800d162:	2306      	movs	r3, #6
 800d164:	773b      	strb	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d166:	f107 031c 	add.w	r3, r7, #28
 800d16a:	4618      	mov	r0, r3
 800d16c:	f004 ffb4 	bl	80120d8 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	4a35      	ldr	r2, [pc, #212]	@ (800d248 <LmHandlerConfigure+0x160>)
 800d174:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d176:	f107 031c 	add.w	r3, r7, #28
 800d17a:	4618      	mov	r0, r3
 800d17c:	f005 f98c 	bl	8012498 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800d180:	2302      	movs	r3, #2
 800d182:	773b      	strb	r3, [r7, #28]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800d184:	4b30      	ldr	r3, [pc, #192]	@ (800d248 <LmHandlerConfigure+0x160>)
 800d186:	623b      	str	r3, [r7, #32]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d188:	f107 031c 	add.w	r3, r7, #28
 800d18c:	4618      	mov	r0, r3
 800d18e:	f004 ffa3 	bl	80120d8 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800d192:	2303      	movs	r3, #3
 800d194:	773b      	strb	r3, [r7, #28]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800d196:	4b2d      	ldr	r3, [pc, #180]	@ (800d24c <LmHandlerConfigure+0x164>)
 800d198:	623b      	str	r3, [r7, #32]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d19a:	f107 031c 	add.w	r3, r7, #28
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f004 ff9a 	bl	80120d8 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800d1a4:	f7ff fc84 	bl	800cab0 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d1a8:	230f      	movs	r3, #15
 800d1aa:	773b      	strb	r3, [r7, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	f887 3020 	strb.w	r3, [r7, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d1b2:	f107 031c 	add.w	r3, r7, #28
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f005 f96e 	bl	8012498 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d1bc:	2310      	movs	r3, #16
 800d1be:	773b      	strb	r3, [r7, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	f887 3020 	strb.w	r3, [r7, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d1c6:	f107 031c 	add.w	r3, r7, #28
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f005 f964 	bl	8012498 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d1d0:	2304      	movs	r3, #4
 800d1d2:	773b      	strb	r3, [r7, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d1d4:	4b19      	ldr	r3, [pc, #100]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d1d6:	789b      	ldrb	r3, [r3, #2]
 800d1d8:	f887 3020 	strb.w	r3, [r7, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d1dc:	f107 031c 	add.w	r3, r7, #28
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f005 f959 	bl	8012498 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d1e6:	2339      	movs	r3, #57	@ 0x39
 800d1e8:	773b      	strb	r3, [r7, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d1ea:	4b14      	ldr	r3, [pc, #80]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	623b      	str	r3, [r7, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d1f0:	f107 031c 	add.w	r3, r7, #28
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f005 f94f 	bl	8012498 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d1fa:	230f      	movs	r3, #15
 800d1fc:	753b      	strb	r3, [r7, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d1fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d200:	7819      	ldrb	r1, [r3, #0]
 800d202:	f107 0308 	add.w	r3, r7, #8
 800d206:	f107 0214 	add.w	r2, r7, #20
 800d20a:	4618      	mov	r0, r3
 800d20c:	f008 f870 	bl	80152f0 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	bf14      	ite	ne
 800d216:	2301      	movne	r3, #1
 800d218:	2300      	moveq	r3, #0
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	4b07      	ldr	r3, [pc, #28]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d21e:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800d220:	2014      	movs	r0, #20
 800d222:	f000 facb 	bl	800d7bc <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d226:	4b05      	ldr	r3, [pc, #20]	@ (800d23c <LmHandlerConfigure+0x154>)
 800d228:	79db      	ldrb	r3, [r3, #7]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f005 ff44 	bl	80130b8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3748      	adds	r7, #72	@ 0x48
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	2000b8ec 	.word	0x2000b8ec
 800d240:	2000b918 	.word	0x2000b918
 800d244:	2000b908 	.word	0x2000b908
 800d248:	2000b8c0 	.word	0x2000b8c0
 800d24c:	2000b8c8 	.word	0x2000b8c8

0800d250 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800d254:	f002 fb2e 	bl	800f8b4 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800d258:	f000 fda4 	bl	800dda4 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800d25c:	f000 fd74 	bl	800dd48 <LmHandlerPackageIsTxPending>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d26c:	4b04      	ldr	r3, [pc, #16]	@ (800d280 <LmHandlerGetDutyCycleWaitTime+0x18>)
 800d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800d272:	4610      	mov	r0, r2
 800d274:	4619      	mov	r1, r3
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	2000b930 	.word	0x2000b930

0800d284 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b092      	sub	sp, #72	@ 0x48
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	460a      	mov	r2, r1
 800d28e:	71fb      	strb	r3, [r7, #7]
 800d290:	4613      	mov	r3, r2
 800d292:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d294:	2301      	movs	r3, #1
 800d296:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d29a:	4b47      	ldr	r3, [pc, #284]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d29c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800d2a6:	4b44      	ldr	r3, [pc, #272]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d2a8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d2ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    if( mode == ACTIVATION_TYPE_OTAA )
 800d2b0:	79fb      	ldrb	r3, [r7, #7]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d110      	bne.n	800d2d8 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d2bc:	4b3f      	ldr	r3, [pc, #252]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d2be:	2202      	movs	r2, #2
 800d2c0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800d2c2:	4a3e      	ldr	r2, [pc, #248]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d2c4:	79bb      	ldrb	r3, [r7, #6]
 800d2c6:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800d2c8:	f004 fe48 	bl	8011f5c <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800d2cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f005 fc97 	bl	8012c04 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800d2d6:	e06b      	b.n	800d3b0 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d2de:	4b37      	ldr	r3, [pc, #220]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d2e0:	2201      	movs	r2, #1
 800d2e2:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d2e4:	4b34      	ldr	r3, [pc, #208]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d2e6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d2ea:	4b34      	ldr	r3, [pc, #208]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d2ec:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800d2ee:	4b32      	ldr	r3, [pc, #200]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d2f0:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800d2f4:	4b31      	ldr	r3, [pc, #196]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d2f6:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d2f8:	4b30      	ldr	r3, [pc, #192]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d2fe:	4a2f      	ldr	r2, [pc, #188]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d300:	79bb      	ldrb	r3, [r7, #6]
 800d302:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800d304:	4b2e      	ldr	r3, [pc, #184]	@ (800d3c0 <LmHandlerJoin+0x13c>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	f083 0301 	eor.w	r3, r3, #1
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d034      	beq.n	800d37c <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d312:	231e      	movs	r3, #30
 800d314:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d316:	4b28      	ldr	r3, [pc, #160]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d318:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d31c:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d31e:	f107 0308 	add.w	r3, r7, #8
 800d322:	4618      	mov	r0, r3
 800d324:	f005 f8b8 	bl	8012498 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d328:	231f      	movs	r3, #31
 800d32a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d32c:	4b22      	ldr	r3, [pc, #136]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d32e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d332:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d334:	f107 0308 	add.w	r3, r7, #8
 800d338:	4618      	mov	r0, r3
 800d33a:	f005 f8ad 	bl	8012498 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800d33e:	2321      	movs	r3, #33	@ 0x21
 800d340:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800d342:	4b1d      	ldr	r3, [pc, #116]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d344:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d348:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d34a:	f107 0308 	add.w	r3, r7, #8
 800d34e:	4618      	mov	r0, r3
 800d350:	f005 f8a2 	bl	8012498 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d354:	2320      	movs	r3, #32
 800d356:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800d358:	4b17      	ldr	r3, [pc, #92]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d35a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d35e:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d360:	f107 0308 	add.w	r3, r7, #8
 800d364:	4618      	mov	r0, r3
 800d366:	f005 f897 	bl	8012498 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d36a:	2328      	movs	r3, #40	@ 0x28
 800d36c:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d36e:	4b15      	ldr	r3, [pc, #84]	@ (800d3c4 <LmHandlerJoin+0x140>)
 800d370:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d372:	f107 0308 	add.w	r3, r7, #8
 800d376:	4618      	mov	r0, r3
 800d378:	f005 f88e 	bl	8012498 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800d37c:	f004 fdee 	bl	8011f5c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d380:	2301      	movs	r3, #1
 800d382:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d384:	2301      	movs	r3, #1
 800d386:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d388:	f107 0308 	add.w	r3, r7, #8
 800d38c:	4618      	mov	r0, r3
 800d38e:	f005 f883 	bl	8012498 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d392:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c8 <LmHandlerJoin+0x144>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d004      	beq.n	800d3a6 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d39c:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c8 <LmHandlerJoin+0x144>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a2:	4806      	ldr	r0, [pc, #24]	@ (800d3bc <LmHandlerJoin+0x138>)
 800d3a4:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d3a6:	4b04      	ldr	r3, [pc, #16]	@ (800d3b8 <LmHandlerJoin+0x134>)
 800d3a8:	785b      	ldrb	r3, [r3, #1]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 f936 	bl	800d61c <LmHandlerRequestClass>
}
 800d3b0:	bf00      	nop
 800d3b2:	3748      	adds	r7, #72	@ 0x48
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	2000b8ec 	.word	0x2000b8ec
 800d3bc:	20000098 	.word	0x20000098
 800d3c0:	2000ba2a 	.word	0x2000ba2a
 800d3c4:	01000300 	.word	0x01000300
 800d3c8:	2000b904 	.word	0x2000b904

0800d3cc <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b08c      	sub	sp, #48	@ 0x30
 800d3d0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d3d6:	1d3b      	adds	r3, r7, #4
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f004 fe7d 	bl	80120d8 <LoRaMacMibGetRequestConfirm>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800d3e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d3ec:	7a3b      	ldrb	r3, [r7, #8]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d101      	bne.n	800d3f6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e002      	b.n	800d3fc <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e000      	b.n	800d3fc <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d3fa:	2300      	movs	r3, #0
    }
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3730      	adds	r7, #48	@ 0x30
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08c      	sub	sp, #48	@ 0x30
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	460b      	mov	r3, r1
 800d40e:	70fb      	strb	r3, [r7, #3]
 800d410:	4613      	mov	r3, r2
 800d412:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d414:	23ff      	movs	r3, #255	@ 0xff
 800d416:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800d41a:	f001 ffcf 	bl	800f3bc <LoRaMacIsBusy>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d002      	beq.n	800d42a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d424:	f06f 0301 	mvn.w	r3, #1
 800d428:	e0be      	b.n	800d5a8 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800d42a:	f001 ffe5 	bl	800f3f8 <LoRaMacIsStopped>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d002      	beq.n	800d43a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d434:	f06f 0302 	mvn.w	r3, #2
 800d438:	e0b6      	b.n	800d5a8 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d43a:	f7ff ffc7 	bl	800d3cc <LmHandlerJoinStatus>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b01      	cmp	r3, #1
 800d442:	d00a      	beq.n	800d45a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d444:	4b5a      	ldr	r3, [pc, #360]	@ (800d5b0 <LmHandlerSend+0x1ac>)
 800d446:	79db      	ldrb	r3, [r3, #7]
 800d448:	4a59      	ldr	r2, [pc, #356]	@ (800d5b0 <LmHandlerSend+0x1ac>)
 800d44a:	7a12      	ldrb	r2, [r2, #8]
 800d44c:	4611      	mov	r1, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7ff ff18 	bl	800d284 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d454:	f06f 0302 	mvn.w	r3, #2
 800d458:	e0a6      	b.n	800d5a8 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800d45a:	4b56      	ldr	r3, [pc, #344]	@ (800d5b4 <LmHandlerSend+0x1b0>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	4798      	blx	r3
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00d      	beq.n	800d484 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	781a      	ldrb	r2, [r3, #0]
 800d46c:	4b51      	ldr	r3, [pc, #324]	@ (800d5b4 <LmHandlerSend+0x1b0>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d006      	beq.n	800d484 <LmHandlerSend+0x80>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800d47e:	f06f 0303 	mvn.w	r3, #3
 800d482:	e091      	b.n	800d5a8 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800d484:	4a4c      	ldr	r2, [pc, #304]	@ (800d5b8 <LmHandlerSend+0x1b4>)
 800d486:	78fb      	ldrb	r3, [r7, #3]
 800d488:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d48a:	78fb      	ldrb	r3, [r7, #3]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	bf14      	ite	ne
 800d490:	2301      	movne	r3, #1
 800d492:	2300      	moveq	r3, #0
 800d494:	b2db      	uxtb	r3, r3
 800d496:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d498:	4b48      	ldr	r3, [pc, #288]	@ (800d5bc <LmHandlerSend+0x1b8>)
 800d49a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d49e:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	785b      	ldrb	r3, [r3, #1]
 800d4a4:	f107 020c 	add.w	r2, r7, #12
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f004 fd8e 	bl	8011fcc <LoRaMacQueryTxPossible>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d009      	beq.n	800d4ca <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d4c2:	23f9      	movs	r3, #249	@ 0xf9
 800d4c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d4c8:	e008      	b.n	800d4dc <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	785b      	ldrb	r3, [r3, #1]
 800d4d4:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800d4dc:	4b36      	ldr	r3, [pc, #216]	@ (800d5b8 <LmHandlerSend+0x1b4>)
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	3310      	adds	r3, #16
 800d4e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4e6:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d4ea:	4b34      	ldr	r3, [pc, #208]	@ (800d5bc <LmHandlerSend+0x1b8>)
 800d4ec:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d4f0:	4b31      	ldr	r3, [pc, #196]	@ (800d5b8 <LmHandlerSend+0x1b4>)
 800d4f2:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800d4f4:	78ba      	ldrb	r2, [r7, #2]
 800d4f6:	f107 0310 	add.w	r3, r7, #16
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f005 fcd7 	bl	8012eb0 <LoRaMacMcpsRequest>
 800d502:	4603      	mov	r3, r0
 800d504:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d508:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d50c:	492c      	ldr	r1, [pc, #176]	@ (800d5c0 <LmHandlerSend+0x1bc>)
 800d50e:	e9c1 2300 	strd	r2, r3, [r1]

    switch( status )
 800d512:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d516:	2b11      	cmp	r3, #17
 800d518:	d83f      	bhi.n	800d59a <LmHandlerSend+0x196>
 800d51a:	a201      	add	r2, pc, #4	@ (adr r2, 800d520 <LmHandlerSend+0x11c>)
 800d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d520:	0800d569 	.word	0x0800d569
 800d524:	0800d57b 	.word	0x0800d57b
 800d528:	0800d59b 	.word	0x0800d59b
 800d52c:	0800d59b 	.word	0x0800d59b
 800d530:	0800d59b 	.word	0x0800d59b
 800d534:	0800d59b 	.word	0x0800d59b
 800d538:	0800d59b 	.word	0x0800d59b
 800d53c:	0800d583 	.word	0x0800d583
 800d540:	0800d59b 	.word	0x0800d59b
 800d544:	0800d59b 	.word	0x0800d59b
 800d548:	0800d59b 	.word	0x0800d59b
 800d54c:	0800d593 	.word	0x0800d593
 800d550:	0800d59b 	.word	0x0800d59b
 800d554:	0800d59b 	.word	0x0800d59b
 800d558:	0800d57b 	.word	0x0800d57b
 800d55c:	0800d57b 	.word	0x0800d57b
 800d560:	0800d57b 	.word	0x0800d57b
 800d564:	0800d58b 	.word	0x0800d58b
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800d568:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d56c:	f113 0f07 	cmn.w	r3, #7
 800d570:	d017      	beq.n	800d5a2 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d572:	2300      	movs	r3, #0
 800d574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            break;
 800d578:	e013      	b.n	800d5a2 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d57a:	23fe      	movs	r3, #254	@ 0xfe
 800d57c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d580:	e010      	b.n	800d5a4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d582:	23fd      	movs	r3, #253	@ 0xfd
 800d584:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d588:	e00c      	b.n	800d5a4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d58a:	23fb      	movs	r3, #251	@ 0xfb
 800d58c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d590:	e008      	b.n	800d5a4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d592:	23fa      	movs	r3, #250	@ 0xfa
 800d594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d598:	e004      	b.n	800d5a4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d59a:	23ff      	movs	r3, #255	@ 0xff
 800d59c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d5a0:	e000      	b.n	800d5a4 <LmHandlerSend+0x1a0>
            break;
 800d5a2:	bf00      	nop
    }

    return lmhStatus;
 800d5a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3730      	adds	r7, #48	@ 0x30
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	20000098 	.word	0x20000098
 800d5b4:	2000b8d8 	.word	0x2000b8d8
 800d5b8:	200000a4 	.word	0x200000a4
 800d5bc:	2000b8ec 	.word	0x2000b8ec
 800d5c0:	2000b930 	.word	0x2000b930

0800d5c4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b088      	sub	sp, #32
 800d5c8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d5ca:	230a      	movs	r3, #10
 800d5cc:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d5ce:	463b      	mov	r3, r7
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f005 fb17 	bl	8012c04 <LoRaMacMlmeRequest>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	77fb      	strb	r3, [r7, #31]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d5da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d5de:	4907      	ldr	r1, [pc, #28]	@ (800d5fc <LmHandlerDeviceTimeReq+0x38>)
 800d5e0:	e9c1 2300 	strd	r2, r3, [r1]

    if( status == LORAMAC_STATUS_OK )
 800d5e4:	7ffb      	ldrb	r3, [r7, #31]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <LmHandlerDeviceTimeReq+0x2a>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	e001      	b.n	800d5f2 <LmHandlerDeviceTimeReq+0x2e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d5ee:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3720      	adds	r7, #32
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	2000b930 	.word	0x2000b930

0800d600 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	4603      	mov	r3, r0
 800d608:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d60a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d60e:	4618      	mov	r0, r3
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr
	...

0800d61c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b08e      	sub	sp, #56	@ 0x38
 800d620:	af00      	add	r7, sp, #0
 800d622:	4603      	mov	r3, r0
 800d624:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d626:	2300      	movs	r3, #0
 800d628:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800d62c:	f001 fec6 	bl	800f3bc <LoRaMacIsBusy>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d002      	beq.n	800d63c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d636:	f06f 0301 	mvn.w	r3, #1
 800d63a:	e071      	b.n	800d720 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800d63c:	f7ff fec6 	bl	800d3cc <LmHandlerJoinStatus>
 800d640:	4603      	mov	r3, r0
 800d642:	2b01      	cmp	r3, #1
 800d644:	d002      	beq.n	800d64c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d646:	f06f 0302 	mvn.w	r3, #2
 800d64a:	e069      	b.n	800d720 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d64c:	2300      	movs	r3, #0
 800d64e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d650:	f107 030c 	add.w	r3, r7, #12
 800d654:	4618      	mov	r0, r3
 800d656:	f004 fd3f 	bl	80120d8 <LoRaMacMibGetRequestConfirm>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d660:	f04f 33ff 	mov.w	r3, #4294967295
 800d664:	e05c      	b.n	800d720 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800d666:	7c3b      	ldrb	r3, [r7, #16]
 800d668:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800d66c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800d670:	79fb      	ldrb	r3, [r7, #7]
 800d672:	429a      	cmp	r2, r3
 800d674:	d052      	beq.n	800d71c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d028      	beq.n	800d6ce <LmHandlerRequestClass+0xb2>
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	dc48      	bgt.n	800d712 <LmHandlerRequestClass+0xf6>
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <LmHandlerRequestClass+0x6e>
 800d684:	2b01      	cmp	r3, #1
 800d686:	d01e      	beq.n	800d6c6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800d688:	e043      	b.n	800d712 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800d68a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d041      	beq.n	800d716 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d696:	f107 030c 	add.w	r3, r7, #12
 800d69a:	4618      	mov	r0, r3
 800d69c:	f004 fefc 	bl	8012498 <LoRaMacMibSetRequestConfirm>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10b      	bne.n	800d6be <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d6a6:	4b20      	ldr	r3, [pc, #128]	@ (800d728 <LmHandlerRequestClass+0x10c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d032      	beq.n	800d716 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d6b0:	4b1d      	ldr	r3, [pc, #116]	@ (800d728 <LmHandlerRequestClass+0x10c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6b6:	79fa      	ldrb	r2, [r7, #7]
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4798      	blx	r3
                break;
 800d6bc:	e02b      	b.n	800d716 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d6be:	23ff      	movs	r3, #255	@ 0xff
 800d6c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d6c4:	e027      	b.n	800d716 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d6c6:	23ff      	movs	r3, #255	@ 0xff
 800d6c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d6cc:	e026      	b.n	800d71c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800d6ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d6d6:	23ff      	movs	r3, #255	@ 0xff
 800d6d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d6dc:	e01d      	b.n	800d71a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800d6de:	79fb      	ldrb	r3, [r7, #7]
 800d6e0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d6e2:	f107 030c 	add.w	r3, r7, #12
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f004 fed6 	bl	8012498 <LoRaMacMibSetRequestConfirm>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10b      	bne.n	800d70a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800d6f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d728 <LmHandlerRequestClass+0x10c>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00e      	beq.n	800d71a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800d6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d728 <LmHandlerRequestClass+0x10c>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d702:	79fa      	ldrb	r2, [r7, #7]
 800d704:	4610      	mov	r0, r2
 800d706:	4798      	blx	r3
                break;
 800d708:	e007      	b.n	800d71a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800d70a:	23ff      	movs	r3, #255	@ 0xff
 800d70c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800d710:	e003      	b.n	800d71a <LmHandlerRequestClass+0xfe>
                break;
 800d712:	bf00      	nop
 800d714:	e002      	b.n	800d71c <LmHandlerRequestClass+0x100>
                break;
 800d716:	bf00      	nop
 800d718:	e000      	b.n	800d71c <LmHandlerRequestClass+0x100>
                break;
 800d71a:	bf00      	nop
        }
    }
    return errorStatus;
 800d71c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d720:	4618      	mov	r0, r3
 800d722:	3738      	adds	r7, #56	@ 0x38
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	2000b904 	.word	0x2000b904

0800d72c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08c      	sub	sp, #48	@ 0x30
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d102      	bne.n	800d740 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d73a:	f04f 33ff 	mov.w	r3, #4294967295
 800d73e:	e010      	b.n	800d762 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d740:	2300      	movs	r3, #0
 800d742:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d744:	f107 0308 	add.w	r3, r7, #8
 800d748:	4618      	mov	r0, r3
 800d74a:	f004 fcc5 	bl	80120d8 <LoRaMacMibGetRequestConfirm>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d002      	beq.n	800d75a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d754:	f04f 33ff 	mov.w	r3, #4294967295
 800d758:	e003      	b.n	800d762 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d75a:	7b3a      	ldrb	r2, [r7, #12]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d760:	2300      	movs	r3, #0
}
 800d762:	4618      	mov	r0, r3
 800d764:	3730      	adds	r7, #48	@ 0x30
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
	...

0800d76c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b08c      	sub	sp, #48	@ 0x30
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d102      	bne.n	800d780 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d77a:	f04f 33ff 	mov.w	r3, #4294967295
 800d77e:	e016      	b.n	800d7ae <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d780:	231f      	movs	r3, #31
 800d782:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800d784:	f107 0308 	add.w	r3, r7, #8
 800d788:	4618      	mov	r0, r3
 800d78a:	f004 fca5 	bl	80120d8 <LoRaMacMibGetRequestConfirm>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d794:	f04f 33ff 	mov.w	r3, #4294967295
 800d798:	e009      	b.n	800d7ae <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d79a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f993 2000 	ldrsb.w	r2, [r3]
 800d7a8:	4b03      	ldr	r3, [pc, #12]	@ (800d7b8 <LmHandlerGetTxDatarate+0x4c>)
 800d7aa:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3730      	adds	r7, #48	@ 0x30
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	2000b8ec 	.word	0x2000b8ec

0800d7bc <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08c      	sub	sp, #48	@ 0x30
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d7c4:	2322      	movs	r3, #34	@ 0x22
 800d7c6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d7cc:	f107 0308 	add.w	r3, r7, #8
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f004 fe61 	bl	8012498 <LoRaMacMibSetRequestConfirm>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d7e0:	e000      	b.n	800d7e4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3730      	adds	r7, #48	@ 0x30
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d7f4:	4b18      	ldr	r3, [pc, #96]	@ (800d858 <McpsConfirm+0x6c>)
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	785a      	ldrb	r2, [r3, #1]
 800d7fe:	4b16      	ldr	r3, [pc, #88]	@ (800d858 <McpsConfirm+0x6c>)
 800d800:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	789b      	ldrb	r3, [r3, #2]
 800d806:	b25a      	sxtb	r2, r3
 800d808:	4b13      	ldr	r3, [pc, #76]	@ (800d858 <McpsConfirm+0x6c>)
 800d80a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	4a11      	ldr	r2, [pc, #68]	@ (800d858 <McpsConfirm+0x6c>)
 800d812:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d81a:	4b0f      	ldr	r3, [pc, #60]	@ (800d858 <McpsConfirm+0x6c>)
 800d81c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	695b      	ldr	r3, [r3, #20]
 800d822:	b2da      	uxtb	r2, r3
 800d824:	4b0c      	ldr	r3, [pc, #48]	@ (800d858 <McpsConfirm+0x6c>)
 800d826:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	791b      	ldrb	r3, [r3, #4]
 800d82c:	461a      	mov	r2, r3
 800d82e:	4b0a      	ldr	r3, [pc, #40]	@ (800d858 <McpsConfirm+0x6c>)
 800d830:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800d832:	4b0a      	ldr	r3, [pc, #40]	@ (800d85c <McpsConfirm+0x70>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d004      	beq.n	800d846 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d83c:	4b07      	ldr	r3, [pc, #28]	@ (800d85c <McpsConfirm+0x70>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d842:	4805      	ldr	r0, [pc, #20]	@ (800d858 <McpsConfirm+0x6c>)
 800d844:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d846:	6879      	ldr	r1, [r7, #4]
 800d848:	2000      	movs	r0, #0
 800d84a:	f000 f9eb 	bl	800dc24 <LmHandlerPackagesNotify>
}
 800d84e:	bf00      	nop
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	200000a4 	.word	0x200000a4
 800d85c:	2000b904 	.word	0x2000b904

0800d860 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b088      	sub	sp, #32
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d86a:	2300      	movs	r3, #0
 800d86c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800d86e:	4b32      	ldr	r3, [pc, #200]	@ (800d938 <McpsIndication+0xd8>)
 800d870:	2201      	movs	r2, #1
 800d872:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	785a      	ldrb	r2, [r3, #1]
 800d878:	4b2f      	ldr	r3, [pc, #188]	@ (800d938 <McpsIndication+0xd8>)
 800d87a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d87c:	4b2e      	ldr	r3, [pc, #184]	@ (800d938 <McpsIndication+0xd8>)
 800d87e:	785b      	ldrb	r3, [r3, #1]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d155      	bne.n	800d930 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	791b      	ldrb	r3, [r3, #4]
 800d888:	b25a      	sxtb	r2, r3
 800d88a:	4b2b      	ldr	r3, [pc, #172]	@ (800d938 <McpsIndication+0xd8>)
 800d88c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d894:	b25a      	sxtb	r2, r3
 800d896:	4b28      	ldr	r3, [pc, #160]	@ (800d938 <McpsIndication+0xd8>)
 800d898:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d8a0:	4b25      	ldr	r3, [pc, #148]	@ (800d938 <McpsIndication+0xd8>)
 800d8a2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	78da      	ldrb	r2, [r3, #3]
 800d8a8:	4b23      	ldr	r3, [pc, #140]	@ (800d938 <McpsIndication+0xd8>)
 800d8aa:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	4a21      	ldr	r2, [pc, #132]	@ (800d938 <McpsIndication+0xd8>)
 800d8b2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	78db      	ldrb	r3, [r3, #3]
 800d8b8:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	7b1b      	ldrb	r3, [r3, #12]
 800d8be:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	689b      	ldr	r3, [r3, #8]
 800d8c4:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800d8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800d93c <McpsIndication+0xdc>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d007      	beq.n	800d8e0 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d8d0:	4b1a      	ldr	r3, [pc, #104]	@ (800d93c <McpsIndication+0xdc>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d6:	f107 0218 	add.w	r2, r7, #24
 800d8da:	4917      	ldr	r1, [pc, #92]	@ (800d938 <McpsIndication+0xd8>)
 800d8dc:	4610      	mov	r0, r2
 800d8de:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800d8e0:	4b16      	ldr	r3, [pc, #88]	@ (800d93c <McpsIndication+0xdc>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d007      	beq.n	800d8fa <McpsIndication+0x9a>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7e1b      	ldrb	r3, [r3, #24]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d8f2:	4b12      	ldr	r3, [pc, #72]	@ (800d93c <McpsIndication+0xdc>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	2001      	movs	r0, #1
 800d8fe:	f000 f991 	bl	800dc24 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d902:	f107 0317 	add.w	r3, r7, #23
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff ff10 	bl	800d72c <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	795b      	ldrb	r3, [r3, #5]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00e      	beq.n	800d932 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800d914:	2300      	movs	r3, #0
 800d916:	733b      	strb	r3, [r7, #12]
 800d918:	2300      	movs	r3, #0
 800d91a:	737b      	strb	r3, [r7, #13]
 800d91c:	2300      	movs	r3, #0
 800d91e:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800d920:	f107 030c 	add.w	r3, r7, #12
 800d924:	2201      	movs	r2, #1
 800d926:	2100      	movs	r1, #0
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff fd6b 	bl	800d404 <LmHandlerSend>
 800d92e:	e000      	b.n	800d932 <McpsIndication+0xd2>
        return;
 800d930:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800d932:	3720      	adds	r7, #32
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	200000c0 	.word	0x200000c0
 800d93c:	2000b904 	.word	0x2000b904

0800d940 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b08c      	sub	sp, #48	@ 0x30
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d948:	4b4a      	ldr	r3, [pc, #296]	@ (800da74 <MlmeConfirm+0x134>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	785a      	ldrb	r2, [r3, #1]
 800d952:	4b48      	ldr	r3, [pc, #288]	@ (800da74 <MlmeConfirm+0x134>)
 800d954:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d956:	4b48      	ldr	r3, [pc, #288]	@ (800da78 <MlmeConfirm+0x138>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d004      	beq.n	800d96a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d960:	4b45      	ldr	r3, [pc, #276]	@ (800da78 <MlmeConfirm+0x138>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d966:	4843      	ldr	r0, [pc, #268]	@ (800da74 <MlmeConfirm+0x134>)
 800d968:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	2002      	movs	r0, #2
 800d96e:	f000 f959 	bl	800dc24 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	3b01      	subs	r3, #1
 800d978:	2b0c      	cmp	r3, #12
 800d97a:	d874      	bhi.n	800da66 <MlmeConfirm+0x126>
 800d97c:	a201      	add	r2, pc, #4	@ (adr r2, 800d984 <MlmeConfirm+0x44>)
 800d97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d982:	bf00      	nop
 800d984:	0800d9b9 	.word	0x0800d9b9
 800d988:	0800da67 	.word	0x0800da67
 800d98c:	0800da67 	.word	0x0800da67
 800d990:	0800da67 	.word	0x0800da67
 800d994:	0800da35 	.word	0x0800da35
 800d998:	0800da67 	.word	0x0800da67
 800d99c:	0800da67 	.word	0x0800da67
 800d9a0:	0800da67 	.word	0x0800da67
 800d9a4:	0800da67 	.word	0x0800da67
 800d9a8:	0800da67 	.word	0x0800da67
 800d9ac:	0800da67 	.word	0x0800da67
 800d9b0:	0800da4d 	.word	0x0800da4d
 800d9b4:	0800da67 	.word	0x0800da67
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800d9b8:	2306      	movs	r3, #6
 800d9ba:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d9bc:	f107 0308 	add.w	r3, r7, #8
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f004 fb89 	bl	80120d8 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800da7c <MlmeConfirm+0x13c>)
 800d9c8:	79db      	ldrb	r3, [r3, #7]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff faf0 	bl	800cfb4 <SecureElementSetDevAddr>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d102      	bne.n	800d9e0 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	4a28      	ldr	r2, [pc, #160]	@ (800da80 <MlmeConfirm+0x140>)
 800d9de:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d9e0:	4828      	ldr	r0, [pc, #160]	@ (800da84 <MlmeConfirm+0x144>)
 800d9e2:	f7ff fec3 	bl	800d76c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d9e6:	4828      	ldr	r0, [pc, #160]	@ (800da88 <MlmeConfirm+0x148>)
 800d9e8:	f000 fa1e 	bl	800de28 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d9ec:	4b21      	ldr	r3, [pc, #132]	@ (800da74 <MlmeConfirm+0x134>)
 800d9ee:	785b      	ldrb	r3, [r3, #1]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d108      	bne.n	800da06 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d9f4:	4b21      	ldr	r3, [pc, #132]	@ (800da7c <MlmeConfirm+0x13c>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d9fa:	4b24      	ldr	r3, [pc, #144]	@ (800da8c <MlmeConfirm+0x14c>)
 800d9fc:	785b      	ldrb	r3, [r3, #1]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7ff fe0c 	bl	800d61c <LmHandlerRequestClass>
 800da04:	e002      	b.n	800da0c <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800da06:	4b1d      	ldr	r3, [pc, #116]	@ (800da7c <MlmeConfirm+0x13c>)
 800da08:	22ff      	movs	r2, #255	@ 0xff
 800da0a:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800da0c:	4b1a      	ldr	r3, [pc, #104]	@ (800da78 <MlmeConfirm+0x138>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da12:	2b00      	cmp	r3, #0
 800da14:	d004      	beq.n	800da20 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800da16:	4b18      	ldr	r3, [pc, #96]	@ (800da78 <MlmeConfirm+0x138>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da1c:	4817      	ldr	r0, [pc, #92]	@ (800da7c <MlmeConfirm+0x13c>)
 800da1e:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800da20:	4b14      	ldr	r3, [pc, #80]	@ (800da74 <MlmeConfirm+0x134>)
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d120      	bne.n	800da6a <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800da28:	4b14      	ldr	r3, [pc, #80]	@ (800da7c <MlmeConfirm+0x13c>)
 800da2a:	79db      	ldrb	r3, [r3, #7]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff f853 	bl	800cad8 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800da32:	e01a      	b.n	800da6a <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800da34:	4b16      	ldr	r3, [pc, #88]	@ (800da90 <MlmeConfirm+0x150>)
 800da36:	2201      	movs	r2, #1
 800da38:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	7c1a      	ldrb	r2, [r3, #16]
 800da3e:	4b14      	ldr	r3, [pc, #80]	@ (800da90 <MlmeConfirm+0x150>)
 800da40:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	7c5a      	ldrb	r2, [r3, #17]
 800da46:	4b12      	ldr	r3, [pc, #72]	@ (800da90 <MlmeConfirm+0x150>)
 800da48:	74da      	strb	r2, [r3, #19]
            }
            break;
 800da4a:	e00f      	b.n	800da6c <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	785b      	ldrb	r3, [r3, #1]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d105      	bne.n	800da60 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800da54:	4b0d      	ldr	r3, [pc, #52]	@ (800da8c <MlmeConfirm+0x14c>)
 800da56:	7c1b      	ldrb	r3, [r3, #16]
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff fdd1 	bl	800d600 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800da5e:	e005      	b.n	800da6c <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800da60:	f7ff fdb0 	bl	800d5c4 <LmHandlerDeviceTimeReq>
            break;
 800da64:	e002      	b.n	800da6c <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800da66:	bf00      	nop
 800da68:	e000      	b.n	800da6c <MlmeConfirm+0x12c>
            break;
 800da6a:	bf00      	nop
    }
}
 800da6c:	bf00      	nop
 800da6e:	3730      	adds	r7, #48	@ 0x30
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	200000a4 	.word	0x200000a4
 800da78:	2000b904 	.word	0x2000b904
 800da7c:	20000098 	.word	0x20000098
 800da80:	2000b8c0 	.word	0x2000b8c0
 800da84:	2000009c 	.word	0x2000009c
 800da88:	2000009d 	.word	0x2000009d
 800da8c:	2000b8ec 	.word	0x2000b8ec
 800da90:	200000c0 	.word	0x200000c0

0800da94 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800da9e:	4b20      	ldr	r3, [pc, #128]	@ (800db20 <MlmeIndication+0x8c>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	785a      	ldrb	r2, [r3, #1]
 800daa8:	4b1d      	ldr	r3, [pc, #116]	@ (800db20 <MlmeIndication+0x8c>)
 800daaa:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	789b      	ldrb	r3, [r3, #2]
 800dab0:	b25a      	sxtb	r2, r3
 800dab2:	4b1b      	ldr	r3, [pc, #108]	@ (800db20 <MlmeIndication+0x8c>)
 800dab4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dabc:	b25a      	sxtb	r2, r3
 800dabe:	4b18      	ldr	r3, [pc, #96]	@ (800db20 <MlmeIndication+0x8c>)
 800dac0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800dac8:	4b15      	ldr	r3, [pc, #84]	@ (800db20 <MlmeIndication+0x8c>)
 800daca:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	78da      	ldrb	r2, [r3, #3]
 800dad0:	4b13      	ldr	r3, [pc, #76]	@ (800db20 <MlmeIndication+0x8c>)
 800dad2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	4a11      	ldr	r2, [pc, #68]	@ (800db20 <MlmeIndication+0x8c>)
 800dada:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800dadc:	4b11      	ldr	r3, [pc, #68]	@ (800db24 <MlmeIndication+0x90>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00d      	beq.n	800db02 <MlmeIndication+0x6e>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b0b      	cmp	r3, #11
 800daec:	d009      	beq.n	800db02 <MlmeIndication+0x6e>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	2b0f      	cmp	r3, #15
 800daf4:	d005      	beq.n	800db02 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800daf6:	4b0b      	ldr	r3, [pc, #44]	@ (800db24 <MlmeIndication+0x90>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dafc:	4908      	ldr	r1, [pc, #32]	@ (800db20 <MlmeIndication+0x8c>)
 800dafe:	2000      	movs	r0, #0
 800db00:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800db02:	6879      	ldr	r1, [r7, #4]
 800db04:	2003      	movs	r0, #3
 800db06:	f000 f88d 	bl	800dc24 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b0b      	cmp	r3, #11
 800db10:	d001      	beq.n	800db16 <MlmeIndication+0x82>
 800db12:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800db14:	e000      	b.n	800db18 <MlmeIndication+0x84>
            break;
 800db16:	bf00      	nop
    }
}
 800db18:	bf00      	nop
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	200000c0 	.word	0x200000c0
 800db24:	2000b904 	.word	0x2000b904

0800db28 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	4603      	mov	r3, r0
 800db30:	6039      	str	r1, [r7, #0]
 800db32:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800db34:	2300      	movs	r3, #0
 800db36:	60fb      	str	r3, [r7, #12]
    switch( id )
 800db38:	79fb      	ldrb	r3, [r7, #7]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d104      	bne.n	800db48 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800db3e:	f000 f9a7 	bl	800de90 <LmhpCompliancePackageFactory>
 800db42:	4603      	mov	r3, r0
 800db44:	60fb      	str	r3, [r7, #12]
                break;
 800db46:	e00d      	b.n	800db64 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800db48:	f107 020c 	add.w	r2, r7, #12
 800db4c:	79fb      	ldrb	r3, [r7, #7]
 800db4e:	4611      	mov	r1, r2
 800db50:	4618      	mov	r0, r3
 800db52:	f000 fcbf 	bl	800e4d4 <LmhpPackagesRegister>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d002      	beq.n	800db62 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800db5c:	f04f 33ff 	mov.w	r3, #4294967295
 800db60:	e031      	b.n	800dbc6 <LmHandlerPackageRegister+0x9e>
                }
                break;
 800db62:	bf00      	nop
            }
    }
    if( package != NULL )
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d02b      	beq.n	800dbc2 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800db6a:	79fb      	ldrb	r3, [r7, #7]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	4918      	ldr	r1, [pc, #96]	@ (800dbd0 <LmHandlerPackageRegister+0xa8>)
 800db70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800db74:	79fb      	ldrb	r3, [r7, #7]
 800db76:	4a16      	ldr	r2, [pc, #88]	@ (800dbd0 <LmHandlerPackageRegister+0xa8>)
 800db78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db7c:	4a15      	ldr	r2, [pc, #84]	@ (800dbd4 <LmHandlerPackageRegister+0xac>)
 800db7e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800db80:	79fb      	ldrb	r3, [r7, #7]
 800db82:	4a13      	ldr	r2, [pc, #76]	@ (800dbd0 <LmHandlerPackageRegister+0xa8>)
 800db84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db88:	4a13      	ldr	r2, [pc, #76]	@ (800dbd8 <LmHandlerPackageRegister+0xb0>)
 800db8a:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800db8c:	79fb      	ldrb	r3, [r7, #7]
 800db8e:	4a10      	ldr	r2, [pc, #64]	@ (800dbd0 <LmHandlerPackageRegister+0xa8>)
 800db90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db94:	4a11      	ldr	r2, [pc, #68]	@ (800dbdc <LmHandlerPackageRegister+0xb4>)
 800db96:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800db98:	4b11      	ldr	r3, [pc, #68]	@ (800dbe0 <LmHandlerPackageRegister+0xb8>)
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	79fb      	ldrb	r3, [r7, #7]
 800db9e:	490c      	ldr	r1, [pc, #48]	@ (800dbd0 <LmHandlerPackageRegister+0xa8>)
 800dba0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dba4:	6992      	ldr	r2, [r2, #24]
 800dba6:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800dba8:	79fb      	ldrb	r3, [r7, #7]
 800dbaa:	4a09      	ldr	r2, [pc, #36]	@ (800dbd0 <LmHandlerPackageRegister+0xa8>)
 800dbac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	4a0c      	ldr	r2, [pc, #48]	@ (800dbe4 <LmHandlerPackageRegister+0xbc>)
 800dbb4:	6851      	ldr	r1, [r2, #4]
 800dbb6:	4a0b      	ldr	r2, [pc, #44]	@ (800dbe4 <LmHandlerPackageRegister+0xbc>)
 800dbb8:	7852      	ldrb	r2, [r2, #1]
 800dbba:	6838      	ldr	r0, [r7, #0]
 800dbbc:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e001      	b.n	800dbc6 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800dbc2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	2000b8d8 	.word	0x2000b8d8
 800dbd4:	0800d285 	.word	0x0800d285
 800dbd8:	0800d405 	.word	0x0800d405
 800dbdc:	0800d5c5 	.word	0x0800d5c5
 800dbe0:	2000b904 	.word	0x2000b904
 800dbe4:	200000d4 	.word	0x200000d4

0800dbe8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	4603      	mov	r3, r0
 800dbf0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d80e      	bhi.n	800dc16 <LmHandlerPackageIsInitialized+0x2e>
 800dbf8:	79fb      	ldrb	r3, [r7, #7]
 800dbfa:	4a09      	ldr	r2, [pc, #36]	@ (800dc20 <LmHandlerPackageIsInitialized+0x38>)
 800dbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d007      	beq.n	800dc16 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	4a05      	ldr	r2, [pc, #20]	@ (800dc20 <LmHandlerPackageIsInitialized+0x38>)
 800dc0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	4798      	blx	r3
 800dc12:	4603      	mov	r3, r0
 800dc14:	e000      	b.n	800dc18 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800dc16:	2300      	movs	r3, #0
    }
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	2000b8d8 	.word	0x2000b8d8

0800dc24 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	6039      	str	r1, [r7, #0]
 800dc2e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dc30:	2300      	movs	r3, #0
 800dc32:	73fb      	strb	r3, [r7, #15]
 800dc34:	e07c      	b.n	800dd30 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800dc36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc3a:	4a42      	ldr	r2, [pc, #264]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dc3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d06f      	beq.n	800dd24 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800dc44:	79fb      	ldrb	r3, [r7, #7]
 800dc46:	2b03      	cmp	r3, #3
 800dc48:	d863      	bhi.n	800dd12 <LmHandlerPackagesNotify+0xee>
 800dc4a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc50 <LmHandlerPackagesNotify+0x2c>)
 800dc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc50:	0800dc61 	.word	0x0800dc61
 800dc54:	0800dc83 	.word	0x0800dc83
 800dc58:	0800dccf 	.word	0x0800dccf
 800dc5c:	0800dcf1 	.word	0x0800dcf1
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800dc60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc64:	4a37      	ldr	r2, [pc, #220]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dc66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc6a:	69db      	ldr	r3, [r3, #28]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d052      	beq.n	800dd16 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800dc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc74:	4a33      	ldr	r2, [pc, #204]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc7a:	69db      	ldr	r3, [r3, #28]
 800dc7c:	6838      	ldr	r0, [r7, #0]
 800dc7e:	4798      	blx	r3
                        }
                        break;
 800dc80:	e049      	b.n	800dd16 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800dc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc86:	4a2f      	ldr	r2, [pc, #188]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d043      	beq.n	800dd1a <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800dc92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc96:	4a2b      	ldr	r2, [pc, #172]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc9c:	781a      	ldrb	r2, [r3, #0]
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d00a      	beq.n	800dcbc <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800dca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d135      	bne.n	800dd1a <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800dcae:	4b25      	ldr	r3, [pc, #148]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	4798      	blx	r3
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d02e      	beq.n	800dd1a <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800dcbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcc0:	4a20      	ldr	r2, [pc, #128]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcc6:	6a1b      	ldr	r3, [r3, #32]
 800dcc8:	6838      	ldr	r0, [r7, #0]
 800dcca:	4798      	blx	r3
                        }
                        break;
 800dccc:	e025      	b.n	800dd1a <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800dcce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcd2:	4a1c      	ldr	r2, [pc, #112]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d01f      	beq.n	800dd1e <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800dcde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dce2:	4a18      	ldr	r2, [pc, #96]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcea:	6838      	ldr	r0, [r7, #0]
 800dcec:	4798      	blx	r3
                        }
                        break;
 800dcee:	e016      	b.n	800dd1e <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800dcf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcf4:	4a13      	ldr	r2, [pc, #76]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dcf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d010      	beq.n	800dd22 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800dd00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd04:	4a0f      	ldr	r2, [pc, #60]	@ (800dd44 <LmHandlerPackagesNotify+0x120>)
 800dd06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd0c:	6838      	ldr	r0, [r7, #0]
 800dd0e:	4798      	blx	r3
                        }
                        break;
 800dd10:	e007      	b.n	800dd22 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800dd12:	bf00      	nop
 800dd14:	e006      	b.n	800dd24 <LmHandlerPackagesNotify+0x100>
                        break;
 800dd16:	bf00      	nop
 800dd18:	e004      	b.n	800dd24 <LmHandlerPackagesNotify+0x100>
                        break;
 800dd1a:	bf00      	nop
 800dd1c:	e002      	b.n	800dd24 <LmHandlerPackagesNotify+0x100>
                        break;
 800dd1e:	bf00      	nop
 800dd20:	e000      	b.n	800dd24 <LmHandlerPackagesNotify+0x100>
                        break;
 800dd22:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dd24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	73fb      	strb	r3, [r7, #15]
 800dd30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd34:	2b04      	cmp	r3, #4
 800dd36:	f77f af7e 	ble.w	800dc36 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800dd3a:	bf00      	nop
 800dd3c:	bf00      	nop
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	2000b8d8 	.word	0x2000b8d8

0800dd48 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dd4e:	2300      	movs	r3, #0
 800dd50:	71fb      	strb	r3, [r7, #7]
 800dd52:	e01c      	b.n	800dd8e <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800dd54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd58:	4a11      	ldr	r2, [pc, #68]	@ (800dda0 <LmHandlerPackageIsTxPending+0x58>)
 800dd5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00f      	beq.n	800dd82 <LmHandlerPackageIsTxPending+0x3a>
 800dd62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00b      	beq.n	800dd82 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800dd6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd6e:	4a0c      	ldr	r2, [pc, #48]	@ (800dda0 <LmHandlerPackageIsTxPending+0x58>)
 800dd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	4798      	blx	r3
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	e00a      	b.n	800dd98 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dd82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	3301      	adds	r3, #1
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	71fb      	strb	r3, [r7, #7]
 800dd8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd92:	2b04      	cmp	r3, #4
 800dd94:	ddde      	ble.n	800dd54 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	2000b8d8 	.word	0x2000b8d8

0800dda4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ddaa:	2300      	movs	r3, #0
 800ddac:	71fb      	strb	r3, [r7, #7]
 800ddae:	e022      	b.n	800ddf6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ddb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddb4:	4a14      	ldr	r2, [pc, #80]	@ (800de08 <LmHandlerPackagesProcess+0x64>)
 800ddb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d015      	beq.n	800ddea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ddbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddc2:	4a11      	ldr	r2, [pc, #68]	@ (800de08 <LmHandlerPackagesProcess+0x64>)
 800ddc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddc8:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00d      	beq.n	800ddea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ddce:	79fb      	ldrb	r3, [r7, #7]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff ff09 	bl	800dbe8 <LmHandlerPackageIsInitialized>
 800ddd6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d006      	beq.n	800ddea <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800dddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dde0:	4a09      	ldr	r2, [pc, #36]	@ (800de08 <LmHandlerPackagesProcess+0x64>)
 800dde2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ddea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	71fb      	strb	r3, [r7, #7]
 800ddf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	ddd8      	ble.n	800ddb0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ddfe:	bf00      	nop
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	2000b8d8 	.word	0x2000b8d8

0800de0c <LmHandlerHalt>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800de10:	f004 f8b2 	bl	8011f78 <LoRaMacHalt>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800de1a:	2300      	movs	r3, #0
 800de1c:	e001      	b.n	800de22 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800de1e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800de22:	4618      	mov	r0, r3
 800de24:	bd80      	pop	{r7, pc}
	...

0800de28 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b08c      	sub	sp, #48	@ 0x30
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d102      	bne.n	800de3c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800de36:	f04f 33ff 	mov.w	r3, #4294967295
 800de3a:	e016      	b.n	800de6a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800de3c:	2320      	movs	r3, #32
 800de3e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800de40:	f107 0308 	add.w	r3, r7, #8
 800de44:	4618      	mov	r0, r3
 800de46:	f004 f947 	bl	80120d8 <LoRaMacMibGetRequestConfirm>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800de50:	f04f 33ff 	mov.w	r3, #4294967295
 800de54:	e009      	b.n	800de6a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800de56:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f993 2000 	ldrsb.w	r2, [r3]
 800de64:	4b03      	ldr	r3, [pc, #12]	@ (800de74 <LmHandlerGetTxPower+0x4c>)
 800de66:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3730      	adds	r7, #48	@ 0x30
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	2000b8ec 	.word	0x2000b8ec

0800de78 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	4603      	mov	r3, r0
 800de80:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800de82:	bf00      	nop
 800de84:	370c      	adds	r7, #12
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
	...

0800de90 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800de90:	b480      	push	{r7}
 800de92:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800de94:	4b02      	ldr	r3, [pc, #8]	@ (800dea0 <LmhpCompliancePackageFactory+0x10>)
}
 800de96:	4618      	mov	r0, r3
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	200000dc 	.word	0x200000dc

0800dea4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	4613      	mov	r3, r2
 800deb0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00f      	beq.n	800ded8 <LmhpComplianceInit+0x34>
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00c      	beq.n	800ded8 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800debe:	4a0d      	ldr	r2, [pc, #52]	@ (800def4 <LmhpComplianceInit+0x50>)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800dec4:	4a0c      	ldr	r2, [pc, #48]	@ (800def8 <LmhpComplianceInit+0x54>)
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800deca:	4a0b      	ldr	r2, [pc, #44]	@ (800def8 <LmhpComplianceInit+0x54>)
 800decc:	79fb      	ldrb	r3, [r7, #7]
 800dece:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800ded0:	4b09      	ldr	r3, [pc, #36]	@ (800def8 <LmhpComplianceInit+0x54>)
 800ded2:	2201      	movs	r2, #1
 800ded4:	701a      	strb	r2, [r3, #0]
 800ded6:	e006      	b.n	800dee6 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800ded8:	4b06      	ldr	r3, [pc, #24]	@ (800def4 <LmhpComplianceInit+0x50>)
 800deda:	2200      	movs	r2, #0
 800dedc:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800dede:	4b06      	ldr	r3, [pc, #24]	@ (800def8 <LmhpComplianceInit+0x54>)
 800dee0:	2200      	movs	r2, #0
 800dee2:	701a      	strb	r2, [r3, #0]
    }
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	2000ba64 	.word	0x2000ba64
 800def8:	2000ba50 	.word	0x2000ba50

0800defc <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800defc:	b480      	push	{r7}
 800defe:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800df00:	4b03      	ldr	r3, [pc, #12]	@ (800df10 <LmhpComplianceIsInitialized+0x14>)
 800df02:	781b      	ldrb	r3, [r3, #0]
}
 800df04:	4618      	mov	r0, r3
 800df06:	46bd      	mov	sp, r7
 800df08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0c:	4770      	bx	lr
 800df0e:	bf00      	nop
 800df10:	2000ba50 	.word	0x2000ba50

0800df14 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800df14:	b480      	push	{r7}
 800df16:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800df18:	4b07      	ldr	r3, [pc, #28]	@ (800df38 <LmhpComplianceIsRunning+0x24>)
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	f083 0301 	eor.w	r3, r3, #1
 800df20:	b2db      	uxtb	r3, r3
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800df26:	2300      	movs	r3, #0
 800df28:	e001      	b.n	800df2e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800df2a:	4b03      	ldr	r3, [pc, #12]	@ (800df38 <LmhpComplianceIsRunning+0x24>)
 800df2c:	785b      	ldrb	r3, [r3, #1]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	2000ba50 	.word	0x2000ba50

0800df3c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800df44:	4b0f      	ldr	r3, [pc, #60]	@ (800df84 <LmhpComplianceOnMcpsConfirm+0x48>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f083 0301 	eor.w	r3, r3, #1
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d112      	bne.n	800df78 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800df52:	4b0c      	ldr	r3, [pc, #48]	@ (800df84 <LmhpComplianceOnMcpsConfirm+0x48>)
 800df54:	785b      	ldrb	r3, [r3, #1]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00f      	beq.n	800df7a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d10b      	bne.n	800df7a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800df66:	2b00      	cmp	r3, #0
 800df68:	d007      	beq.n	800df7a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800df6a:	4b06      	ldr	r3, [pc, #24]	@ (800df84 <LmhpComplianceOnMcpsConfirm+0x48>)
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	3301      	adds	r3, #1
 800df70:	b29a      	uxth	r2, r3
 800df72:	4b04      	ldr	r3, [pc, #16]	@ (800df84 <LmhpComplianceOnMcpsConfirm+0x48>)
 800df74:	819a      	strh	r2, [r3, #12]
 800df76:	e000      	b.n	800df7a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800df78:	bf00      	nop
    }
}
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr
 800df84:	2000ba50 	.word	0x2000ba50

0800df88 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800df90:	4b12      	ldr	r3, [pc, #72]	@ (800dfdc <LmhpComplianceOnMlmeConfirm+0x54>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	f083 0301 	eor.w	r3, r3, #1
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d116      	bne.n	800dfcc <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800df9e:	4b0f      	ldr	r3, [pc, #60]	@ (800dfdc <LmhpComplianceOnMlmeConfirm+0x54>)
 800dfa0:	785b      	ldrb	r3, [r3, #1]
 800dfa2:	f083 0301 	eor.w	r3, r3, #1
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d111      	bne.n	800dfd0 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	2b05      	cmp	r3, #5
 800dfb2:	d10e      	bne.n	800dfd2 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800dfb4:	4b09      	ldr	r3, [pc, #36]	@ (800dfdc <LmhpComplianceOnMlmeConfirm+0x54>)
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	7c1a      	ldrb	r2, [r3, #16]
 800dfbe:	4b07      	ldr	r3, [pc, #28]	@ (800dfdc <LmhpComplianceOnMlmeConfirm+0x54>)
 800dfc0:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7c5a      	ldrb	r2, [r3, #17]
 800dfc6:	4b05      	ldr	r3, [pc, #20]	@ (800dfdc <LmhpComplianceOnMlmeConfirm+0x54>)
 800dfc8:	741a      	strb	r2, [r3, #16]
 800dfca:	e002      	b.n	800dfd2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800dfcc:	bf00      	nop
 800dfce:	e000      	b.n	800dfd2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800dfd0:	bf00      	nop
    }
}
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	2000ba50 	.word	0x2000ba50

0800dfe0 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800dfe6:	4b36      	ldr	r3, [pc, #216]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	f083 0301 	eor.w	r3, r3, #1
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800dff4:	f04f 33ff 	mov.w	r3, #4294967295
 800dff8:	e05e      	b.n	800e0b8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800dffa:	4b31      	ldr	r3, [pc, #196]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800dffc:	785b      	ldrb	r3, [r3, #1]
 800dffe:	f083 0301 	eor.w	r3, r3, #1
 800e002:	b2db      	uxtb	r3, r3
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e008:	2300      	movs	r3, #0
 800e00a:	e055      	b.n	800e0b8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800e00c:	4b2c      	ldr	r3, [pc, #176]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e00e:	7b9b      	ldrb	r3, [r3, #14]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d019      	beq.n	800e048 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800e014:	4b2a      	ldr	r3, [pc, #168]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e016:	2200      	movs	r2, #0
 800e018:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800e01a:	4b29      	ldr	r3, [pc, #164]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e01c:	2203      	movs	r2, #3
 800e01e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800e020:	4b27      	ldr	r3, [pc, #156]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e022:	689b      	ldr	r3, [r3, #8]
 800e024:	2205      	movs	r2, #5
 800e026:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800e028:	4b25      	ldr	r3, [pc, #148]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	3301      	adds	r3, #1
 800e02e:	4a24      	ldr	r2, [pc, #144]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e030:	7bd2      	ldrb	r2, [r2, #15]
 800e032:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800e034:	4b22      	ldr	r3, [pc, #136]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	3302      	adds	r3, #2
 800e03a:	4a21      	ldr	r2, [pc, #132]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e03c:	7c12      	ldrb	r2, [r2, #16]
 800e03e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800e040:	4b1f      	ldr	r3, [pc, #124]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e042:	2201      	movs	r2, #1
 800e044:	709a      	strb	r2, [r3, #2]
 800e046:	e01c      	b.n	800e082 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800e048:	4b1d      	ldr	r3, [pc, #116]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e04a:	789b      	ldrb	r3, [r3, #2]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d005      	beq.n	800e05c <LmhpComplianceTxProcess+0x7c>
 800e050:	2b04      	cmp	r3, #4
 800e052:	d116      	bne.n	800e082 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800e054:	4b1a      	ldr	r3, [pc, #104]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e056:	2201      	movs	r2, #1
 800e058:	709a      	strb	r2, [r3, #2]
                break;
 800e05a:	e012      	b.n	800e082 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800e05c:	4b18      	ldr	r3, [pc, #96]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e05e:	2202      	movs	r2, #2
 800e060:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800e062:	4b17      	ldr	r3, [pc, #92]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e064:	899b      	ldrh	r3, [r3, #12]
 800e066:	0a1b      	lsrs	r3, r3, #8
 800e068:	b29a      	uxth	r2, r3
 800e06a:	4b15      	ldr	r3, [pc, #84]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	b2d2      	uxtb	r2, r2
 800e070:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800e072:	4b13      	ldr	r3, [pc, #76]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e074:	899a      	ldrh	r2, [r3, #12]
 800e076:	4b12      	ldr	r3, [pc, #72]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	3301      	adds	r3, #1
 800e07c:	b2d2      	uxtb	r2, r2
 800e07e:	701a      	strb	r2, [r3, #0]
                break;
 800e080:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800e082:	23e0      	movs	r3, #224	@ 0xe0
 800e084:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800e086:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e088:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800e08a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800e08c:	4b0c      	ldr	r3, [pc, #48]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e08e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800e090:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800e092:	480c      	ldr	r0, [pc, #48]	@ (800e0c4 <LmhpComplianceTxProcess+0xe4>)
 800e094:	f00c fb74 	bl	801a780 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800e098:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c8 <LmhpComplianceTxProcess+0xe8>)
 800e09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d102      	bne.n	800e0a6 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a4:	e008      	b.n	800e0b8 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800e0a6:	4b08      	ldr	r3, [pc, #32]	@ (800e0c8 <LmhpComplianceTxProcess+0xe8>)
 800e0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0aa:	4a05      	ldr	r2, [pc, #20]	@ (800e0c0 <LmhpComplianceTxProcess+0xe0>)
 800e0ac:	78d2      	ldrb	r2, [r2, #3]
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	4638      	mov	r0, r7
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	4798      	blx	r3
 800e0b6:	4603      	mov	r3, r0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	2000ba50 	.word	0x2000ba50
 800e0c4:	2000ba30 	.word	0x2000ba30
 800e0c8:	200000dc 	.word	0x200000dc

0800e0cc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b0aa      	sub	sp, #168	@ 0xa8
 800e0d0:	af04      	add	r7, sp, #16
 800e0d2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e0d4:	4ba8      	ldr	r3, [pc, #672]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	f083 0301 	eor.w	r3, r3, #1
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f040 81cc 	bne.w	800e47c <LmhpComplianceOnMcpsIndication+0x3b0>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	7b5b      	ldrb	r3, [r3, #13]
 800e0e8:	f083 0301 	eor.w	r3, r3, #1
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f040 81c6 	bne.w	800e480 <LmhpComplianceOnMcpsIndication+0x3b4>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800e0f4:	4ba0      	ldr	r3, [pc, #640]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e0f6:	785b      	ldrb	r3, [r3, #1]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d00c      	beq.n	800e116 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	7b9b      	ldrb	r3, [r3, #14]
 800e100:	f083 0301 	eor.w	r3, r3, #1
 800e104:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800e106:	2b00      	cmp	r3, #0
 800e108:	d005      	beq.n	800e116 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800e10a:	4b9b      	ldr	r3, [pc, #620]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e10c:	899b      	ldrh	r3, [r3, #12]
 800e10e:	3301      	adds	r3, #1
 800e110:	b29a      	uxth	r2, r3
 800e112:	4b99      	ldr	r3, [pc, #612]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e114:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	78db      	ldrb	r3, [r3, #3]
 800e11a:	2be0      	cmp	r3, #224	@ 0xe0
 800e11c:	f040 81b2 	bne.w	800e484 <LmhpComplianceOnMcpsIndication+0x3b8>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800e120:	4b95      	ldr	r3, [pc, #596]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e122:	785b      	ldrb	r3, [r3, #1]
 800e124:	f083 0301 	eor.w	r3, r3, #1
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d066      	beq.n	800e1fc <LmhpComplianceOnMcpsIndication+0x130>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	7b1b      	ldrb	r3, [r3, #12]
 800e132:	2b04      	cmp	r3, #4
 800e134:	f040 81ad 	bne.w	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800e13e:	2b01      	cmp	r3, #1
 800e140:	f040 81a7 	bne.w	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	3301      	adds	r3, #1
 800e14a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	f040 81a0 	bne.w	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	3302      	adds	r3, #2
 800e158:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	f040 8199 	bne.w	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	3303      	adds	r3, #3
 800e166:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800e168:	2b01      	cmp	r3, #1
 800e16a:	f040 8192 	bne.w	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800e16e:	4b82      	ldr	r3, [pc, #520]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e170:	2200      	movs	r2, #0
 800e172:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800e174:	4b80      	ldr	r3, [pc, #512]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e176:	22e0      	movs	r2, #224	@ 0xe0
 800e178:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800e17a:	4b7f      	ldr	r3, [pc, #508]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e17c:	2202      	movs	r2, #2
 800e17e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800e180:	4b7d      	ldr	r3, [pc, #500]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e182:	2200      	movs	r2, #0
 800e184:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800e186:	4b7c      	ldr	r3, [pc, #496]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e188:	2200      	movs	r2, #0
 800e18a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800e18c:	4b7a      	ldr	r3, [pc, #488]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e18e:	2200      	movs	r2, #0
 800e190:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800e192:	4b79      	ldr	r3, [pc, #484]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e194:	2200      	movs	r2, #0
 800e196:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800e198:	4b77      	ldr	r3, [pc, #476]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e19a:	2201      	movs	r2, #1
 800e19c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800e19e:	4b76      	ldr	r3, [pc, #472]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800e1a4:	2304      	movs	r3, #4
 800e1a6:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e1ac:	f107 0308 	add.w	r3, r7, #8
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f004 f971 	bl	8012498 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	f004 ff7e 	bl	80130b8 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800e1bc:	4b6f      	ldr	r3, [pc, #444]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d003      	beq.n	800e1ce <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800e1c6:	4b6d      	ldr	r3, [pc, #436]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9302      	str	r3, [sp, #8]
 800e1d2:	4b6b      	ldr	r3, [pc, #428]	@ (800e380 <LmhpComplianceOnMcpsIndication+0x2b4>)
 800e1d4:	9301      	str	r3, [sp, #4]
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	f04f 32ff 	mov.w	r2, #4294967295
 800e1de:	f04f 0300 	mov.w	r3, #0
 800e1e2:	4868      	ldr	r0, [pc, #416]	@ (800e384 <LmhpComplianceOnMcpsIndication+0x2b8>)
 800e1e4:	f00c fa90 	bl	801a708 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800e1e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1ec:	f04f 0300 	mov.w	r3, #0
 800e1f0:	4864      	ldr	r0, [pc, #400]	@ (800e384 <LmhpComplianceOnMcpsIndication+0x2b8>)
 800e1f2:	f00c fbb9 	bl	801a968 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800e1f6:	f7ff fef3 	bl	800dfe0 <LmhpComplianceTxProcess>
 800e1fa:	e14a      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	781a      	ldrb	r2, [r3, #0]
 800e202:	4b5d      	ldr	r3, [pc, #372]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e204:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800e206:	4b5c      	ldr	r3, [pc, #368]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e208:	789b      	ldrb	r3, [r3, #2]
 800e20a:	2b0a      	cmp	r3, #10
 800e20c:	f200 813c 	bhi.w	800e488 <LmhpComplianceOnMcpsIndication+0x3bc>
 800e210:	a201      	add	r2, pc, #4	@ (adr r2, 800e218 <LmhpComplianceOnMcpsIndication+0x14c>)
 800e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e216:	bf00      	nop
 800e218:	0800e245 	.word	0x0800e245
 800e21c:	0800e28f 	.word	0x0800e28f
 800e220:	0800e297 	.word	0x0800e297
 800e224:	0800e2a5 	.word	0x0800e2a5
 800e228:	0800e2b3 	.word	0x0800e2b3
 800e22c:	0800e30b 	.word	0x0800e30b
 800e230:	0800e31d 	.word	0x0800e31d
 800e234:	0800e38d 	.word	0x0800e38d
 800e238:	0800e435 	.word	0x0800e435
 800e23c:	0800e447 	.word	0x0800e447
 800e240:	0800e461 	.word	0x0800e461
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800e244:	484f      	ldr	r0, [pc, #316]	@ (800e384 <LmhpComplianceOnMcpsIndication+0x2b8>)
 800e246:	f00c fb1f 	bl	801a888 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800e24a:	4b4b      	ldr	r3, [pc, #300]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800e250:	4b49      	ldr	r3, [pc, #292]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e252:	2200      	movs	r2, #0
 800e254:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800e256:	2304      	movs	r3, #4
 800e258:	723b      	strb	r3, [r7, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e25a:	4b48      	ldr	r3, [pc, #288]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	733b      	strb	r3, [r7, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800e262:	f107 0308 	add.w	r3, r7, #8
 800e266:	4618      	mov	r0, r3
 800e268:	f004 f916 	bl	8012498 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e26c:	4b43      	ldr	r3, [pc, #268]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	785b      	ldrb	r3, [r3, #1]
 800e272:	4618      	mov	r0, r3
 800e274:	f004 ff20 	bl	80130b8 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800e278:	4b40      	ldr	r3, [pc, #256]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 8104 	beq.w	800e48c <LmhpComplianceOnMcpsIndication+0x3c0>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800e284:	4b3d      	ldr	r3, [pc, #244]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	4798      	blx	r3
                    }
                }
                break;
 800e28c:	e0fe      	b.n	800e48c <LmhpComplianceOnMcpsIndication+0x3c0>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800e28e:	4b3a      	ldr	r3, [pc, #232]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e290:	2202      	movs	r2, #2
 800e292:	719a      	strb	r2, [r3, #6]
                break;
 800e294:	e0fd      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800e296:	4b38      	ldr	r3, [pc, #224]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e298:	2201      	movs	r2, #1
 800e29a:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800e29c:	4b36      	ldr	r3, [pc, #216]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e29e:	2201      	movs	r2, #1
 800e2a0:	709a      	strb	r2, [r3, #2]
                break;
 800e2a2:	e0f6      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800e2a4:	4b34      	ldr	r3, [pc, #208]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800e2aa:	4b33      	ldr	r3, [pc, #204]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	709a      	strb	r2, [r3, #2]
                break;
 800e2b0:	e0ef      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	7b1a      	ldrb	r2, [r3, #12]
 800e2b6:	4b30      	ldr	r3, [pc, #192]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e2b8:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800e2ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	2204      	movs	r2, #4
 800e2c0:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e2c8:	e012      	b.n	800e2f0 <LmhpComplianceOnMcpsIndication+0x224>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	689a      	ldr	r2, [r3, #8]
 800e2ce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e2d2:	4413      	add	r3, r2
 800e2d4:	781a      	ldrb	r2, [r3, #0]
 800e2d6:	4b28      	ldr	r3, [pc, #160]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e2d8:	6899      	ldr	r1, [r3, #8]
 800e2da:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e2de:	440b      	add	r3, r1
 800e2e0:	3201      	adds	r2, #1
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800e2e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800e2f0:	4b21      	ldr	r3, [pc, #132]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e2f2:	795a      	ldrb	r2, [r3, #5]
 800e2f4:	4b20      	ldr	r3, [pc, #128]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e2f6:	799b      	ldrb	r3, [r3, #6]
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	bf28      	it	cs
 800e2fc:	4613      	movcs	r3, r2
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800e304:	429a      	cmp	r2, r3
 800e306:	d3e0      	bcc.n	800e2ca <LmhpComplianceOnMcpsIndication+0x1fe>
                }
                break;
 800e308:	e0c3      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800e30a:	2305      	movs	r3, #5
 800e30c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

                    LoRaMacMlmeRequest( &mlmeReq );
 800e310:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800e314:	4618      	mov	r0, r3
 800e316:	f004 fc75 	bl	8012c04 <LoRaMacMlmeRequest>
                }
                break;
 800e31a:	e0ba      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800e31c:	4819      	ldr	r0, [pc, #100]	@ (800e384 <LmhpComplianceOnMcpsIndication+0x2b8>)
 800e31e:	f00c fab3 	bl	801a888 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800e322:	4b15      	ldr	r3, [pc, #84]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e324:	2200      	movs	r2, #0
 800e326:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800e328:	4b13      	ldr	r3, [pc, #76]	@ (800e378 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800e32a:	2200      	movs	r2, #0
 800e32c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800e32e:	2304      	movs	r3, #4
 800e330:	723b      	strb	r3, [r7, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800e332:	4b12      	ldr	r3, [pc, #72]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	733b      	strb	r3, [r7, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800e33a:	f107 0308 	add.w	r3, r7, #8
 800e33e:	4618      	mov	r0, r3
 800e340:	f004 f8aa 	bl	8012498 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800e344:	4b0d      	ldr	r3, [pc, #52]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	785b      	ldrb	r3, [r3, #1]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f004 feb4 	bl	80130b8 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800e350:	4b0a      	ldr	r3, [pc, #40]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <LmhpComplianceOnMcpsIndication+0x296>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800e35a:	4b08      	ldr	r3, [pc, #32]	@ (800e37c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800e362:	4b09      	ldr	r3, [pc, #36]	@ (800e388 <LmhpComplianceOnMcpsIndication+0x2bc>)
 800e364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 8092 	beq.w	800e490 <LmhpComplianceOnMcpsIndication+0x3c4>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800e36c:	4b06      	ldr	r3, [pc, #24]	@ (800e388 <LmhpComplianceOnMcpsIndication+0x2bc>)
 800e36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e370:	2101      	movs	r1, #1
 800e372:	2002      	movs	r0, #2
 800e374:	4798      	blx	r3
                    }
                }
                break;
 800e376:	e08b      	b.n	800e490 <LmhpComplianceOnMcpsIndication+0x3c4>
 800e378:	2000ba50 	.word	0x2000ba50
 800e37c:	2000ba64 	.word	0x2000ba64
 800e380:	0800e4ab 	.word	0x0800e4ab
 800e384:	2000ba30 	.word	0x2000ba30
 800e388:	200000dc 	.word	0x200000dc
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	7b1b      	ldrb	r3, [r3, #12]
 800e390:	2b03      	cmp	r3, #3
 800e392:	d113      	bne.n	800e3bc <LmhpComplianceOnMcpsIndication+0x2f0>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800e394:	2306      	movs	r3, #6
 800e396:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	021b      	lsls	r3, r3, #8
 800e3a4:	b21a      	sxth	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	3302      	adds	r3, #2
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	b21b      	sxth	r3, r3
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	b21b      	sxth	r3, r3
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800e3ba:	e032      	b.n	800e422 <LmhpComplianceOnMcpsIndication+0x356>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	7b1b      	ldrb	r3, [r3, #12]
 800e3c0:	2b07      	cmp	r3, #7
 800e3c2:	d12e      	bne.n	800e422 <LmhpComplianceOnMcpsIndication+0x356>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800e3c4:	2307      	movs	r3, #7
 800e3c6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	021b      	lsls	r3, r3, #8
 800e3d4:	b21a      	sxth	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	3302      	adds	r3, #2
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	b21b      	sxth	r3, r3
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	b21b      	sxth	r3, r3
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	3303      	adds	r3, #3
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	041a      	lsls	r2, r3, #16
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	689b      	ldr	r3, [r3, #8]
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	021b      	lsls	r3, r3, #8
 800e3fe:	4313      	orrs	r3, r2
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	6892      	ldr	r2, [r2, #8]
 800e404:	3205      	adds	r2, #5
 800e406:	7812      	ldrb	r2, [r2, #0]
 800e408:	4313      	orrs	r3, r2
 800e40a:	461a      	mov	r2, r3
 800e40c:	2364      	movs	r3, #100	@ 0x64
 800e40e:	fb02 f303 	mul.w	r3, r2, r3
 800e412:	66bb      	str	r3, [r7, #104]	@ 0x68
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	689b      	ldr	r3, [r3, #8]
 800e418:	3306      	adds	r3, #6
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	b25b      	sxtb	r3, r3
 800e41e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800e422:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800e426:	4618      	mov	r0, r3
 800e428:	f004 fbec 	bl	8012c04 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800e42c:	4b1a      	ldr	r3, [pc, #104]	@ (800e498 <LmhpComplianceOnMcpsIndication+0x3cc>)
 800e42e:	2201      	movs	r2, #1
 800e430:	709a      	strb	r2, [r3, #2]
                }
                break;
 800e432:	e02e      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800e434:	230a      	movs	r3, #10
 800e436:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800e43a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800e43e:	4618      	mov	r0, r3
 800e440:	f004 fbe0 	bl	8012c04 <LoRaMacMlmeRequest>
                }
                break;
 800e444:	e025      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800e446:	2300      	movs	r3, #0
 800e448:	723b      	strb	r3, [r7, #8]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	3301      	adds	r3, #1
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	733b      	strb	r3, [r7, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800e454:	f107 0308 	add.w	r3, r7, #8
 800e458:	4618      	mov	r0, r3
 800e45a:	f004 f81d 	bl	8012498 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800e45e:	e018      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800e460:	230d      	movs	r3, #13
 800e462:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	785b      	ldrb	r3, [r3, #1]
 800e46c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

                    LoRaMacMlmeRequest( &mlmeReq );
 800e470:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e474:	4618      	mov	r0, r3
 800e476:	f004 fbc5 	bl	8012c04 <LoRaMacMlmeRequest>
                }
                break;
 800e47a:	e00a      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
        return;
 800e47c:	bf00      	nop
 800e47e:	e008      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
        return;
 800e480:	bf00      	nop
 800e482:	e006      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
        return;
 800e484:	bf00      	nop
 800e486:	e004      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
            default:
                break;
 800e488:	bf00      	nop
 800e48a:	e002      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
                break;
 800e48c:	bf00      	nop
 800e48e:	e000      	b.n	800e492 <LmhpComplianceOnMcpsIndication+0x3c6>
                break;
 800e490:	bf00      	nop
        }
    }
}
 800e492:	3798      	adds	r7, #152	@ 0x98
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	2000ba50 	.word	0x2000ba50

0800e49c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e49c:	b480      	push	{r7}
 800e49e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800e4a0:	bf00      	nop
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b082      	sub	sp, #8
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800e4b2:	f7ff fd95 	bl	800dfe0 <LmhpComplianceTxProcess>
}
 800e4b6:	bf00      	nop
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}

0800e4be <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800e4be:	b480      	push	{r7}
 800e4c0:	b083      	sub	sp, #12
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	6039      	str	r1, [r7, #0]
 800e4de:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800e4e0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800e4f0:	b590      	push	{r4, r7, lr}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e4f6:	f00c fb01 	bl	801aafc <UTIL_TIMER_GetCurrentTime>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	490d      	ldr	r1, [pc, #52]	@ (800e534 <OnRadioTxDone+0x44>)
 800e500:	e9c1 2300 	strd	r2, r3, [r1]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e504:	4c0c      	ldr	r4, [pc, #48]	@ (800e538 <OnRadioTxDone+0x48>)
 800e506:	463b      	mov	r3, r7
 800e508:	4618      	mov	r0, r3
 800e50a:	f00c f82b 	bl	801a564 <SysTimeGet>
 800e50e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800e512:	463a      	mov	r2, r7
 800e514:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e518:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e51c:	4a07      	ldr	r2, [pc, #28]	@ (800e53c <OnRadioTxDone+0x4c>)
 800e51e:	7813      	ldrb	r3, [r2, #0]
 800e520:	f043 0310 	orr.w	r3, r3, #16
 800e524:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e526:	f003 f941 	bl	80117ac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800e52a:	bf00      	nop
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd90      	pop	{r4, r7, pc}
 800e532:	bf00      	nop
 800e534:	2000c7e0 	.word	0x2000c7e0
 800e538:	2000ba68 	.word	0x2000ba68
 800e53c:	2000c7d8 	.word	0x2000c7d8

0800e540 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	4608      	mov	r0, r1
 800e54a:	4611      	mov	r1, r2
 800e54c:	461a      	mov	r2, r3
 800e54e:	4603      	mov	r3, r0
 800e550:	817b      	strh	r3, [r7, #10]
 800e552:	460b      	mov	r3, r1
 800e554:	813b      	strh	r3, [r7, #8]
 800e556:	4613      	mov	r3, r2
 800e558:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e55a:	f00c facf 	bl	801aafc <UTIL_TIMER_GetCurrentTime>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	490d      	ldr	r1, [pc, #52]	@ (800e598 <OnRadioRxDone+0x58>)
 800e564:	e9c1 2300 	strd	r2, r3, [r1]
    RxDoneParams.Payload = payload;
 800e568:	4a0b      	ldr	r2, [pc, #44]	@ (800e598 <OnRadioRxDone+0x58>)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6093      	str	r3, [r2, #8]
    RxDoneParams.Size = size;
 800e56e:	4a0a      	ldr	r2, [pc, #40]	@ (800e598 <OnRadioRxDone+0x58>)
 800e570:	897b      	ldrh	r3, [r7, #10]
 800e572:	8193      	strh	r3, [r2, #12]
    RxDoneParams.Rssi = rssi;
 800e574:	4a08      	ldr	r2, [pc, #32]	@ (800e598 <OnRadioRxDone+0x58>)
 800e576:	893b      	ldrh	r3, [r7, #8]
 800e578:	81d3      	strh	r3, [r2, #14]
    RxDoneParams.Snr = snr;
 800e57a:	4a07      	ldr	r2, [pc, #28]	@ (800e598 <OnRadioRxDone+0x58>)
 800e57c:	79fb      	ldrb	r3, [r7, #7]
 800e57e:	7413      	strb	r3, [r2, #16]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e580:	4a06      	ldr	r2, [pc, #24]	@ (800e59c <OnRadioRxDone+0x5c>)
 800e582:	7813      	ldrb	r3, [r2, #0]
 800e584:	f043 0308 	orr.w	r3, r3, #8
 800e588:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800e58a:	f003 f90f 	bl	80117ac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800e58e:	bf00      	nop
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	2000c7e8 	.word	0x2000c7e8
 800e59c:	2000c7d8 	.word	0x2000c7d8

0800e5a0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e5a4:	4a04      	ldr	r2, [pc, #16]	@ (800e5b8 <OnRadioTxTimeout+0x18>)
 800e5a6:	7813      	ldrb	r3, [r2, #0]
 800e5a8:	f043 0304 	orr.w	r3, r3, #4
 800e5ac:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e5ae:	f003 f8fd 	bl	80117ac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800e5b2:	bf00      	nop
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	2000c7d8 	.word	0x2000c7d8

0800e5bc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e5c0:	4a04      	ldr	r2, [pc, #16]	@ (800e5d4 <OnRadioRxError+0x18>)
 800e5c2:	7813      	ldrb	r3, [r2, #0]
 800e5c4:	f043 0302 	orr.w	r3, r3, #2
 800e5c8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e5ca:	f003 f8ef 	bl	80117ac <OnMacProcessNotify>
}
 800e5ce:	bf00      	nop
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	2000c7d8 	.word	0x2000c7d8

0800e5d8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e5dc:	4a04      	ldr	r2, [pc, #16]	@ (800e5f0 <OnRadioRxTimeout+0x18>)
 800e5de:	7813      	ldrb	r3, [r2, #0]
 800e5e0:	f043 0301 	orr.w	r3, r3, #1
 800e5e4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800e5e6:	f003 f8e1 	bl	80117ac <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800e5ea:	bf00      	nop
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	2000c7d8 	.word	0x2000c7d8

0800e5f4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e5f8:	4b09      	ldr	r3, [pc, #36]	@ (800e620 <UpdateRxSlotIdleState+0x2c>)
 800e5fa:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	d004      	beq.n	800e60c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e602:	4b08      	ldr	r3, [pc, #32]	@ (800e624 <UpdateRxSlotIdleState+0x30>)
 800e604:	2206      	movs	r2, #6
 800e606:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e60a:	e003      	b.n	800e614 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e60c:	4b05      	ldr	r3, [pc, #20]	@ (800e624 <UpdateRxSlotIdleState+0x30>)
 800e60e:	2202      	movs	r2, #2
 800e610:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
}
 800e614:	bf00      	nop
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	2000bfc0 	.word	0x2000bfc0
 800e624:	2000ba68 	.word	0x2000ba68

0800e628 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e62c:	b096      	sub	sp, #88	@ 0x58
 800e62e:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e630:	4b5b      	ldr	r3, [pc, #364]	@ (800e7a0 <ProcessRadioTxDone+0x178>)
 800e632:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e636:	2b02      	cmp	r3, #2
 800e638:	d002      	beq.n	800e640 <ProcessRadioTxDone+0x18>
    {
        Radio.Sleep( );
 800e63a:	4b5a      	ldr	r3, [pc, #360]	@ (800e7a4 <ProcessRadioTxDone+0x17c>)
 800e63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e63e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e640:	f3ef 8310 	mrs	r3, PRIMASK
 800e644:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 800e646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800e648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("cpsid i" : : : "memory");
 800e64a:	b672      	cpsid	i
}
 800e64c:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800e64e:	f00c fa55 	bl	801aafc <UTIL_TIMER_GetCurrentTime>
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	4611      	mov	r1, r2
 800e658:	4b53      	ldr	r3, [pc, #332]	@ (800e7a8 <ProcessRadioTxDone+0x180>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	4613      	mov	r3, r2
 800e660:	1acb      	subs	r3, r1, r3
 800e662:	64bb      	str	r3, [r7, #72]	@ 0x48
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800e664:	4b51      	ldr	r3, [pc, #324]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e666:	f8d3 23d0 	ldr.w	r2, [r3, #976]	@ 0x3d0
 800e66a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	2200      	movs	r2, #0
 800e670:	469a      	mov	sl, r3
 800e672:	4693      	mov	fp, r2
 800e674:	4652      	mov	r2, sl
 800e676:	465b      	mov	r3, fp
 800e678:	484d      	ldr	r0, [pc, #308]	@ (800e7b0 <ProcessRadioTxDone+0x188>)
 800e67a:	f00c f975 	bl	801a968 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e67e:	484c      	ldr	r0, [pc, #304]	@ (800e7b0 <ProcessRadioTxDone+0x188>)
 800e680:	f00c f87e 	bl	801a780 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800e684:	4b49      	ldr	r3, [pc, #292]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e686:	f8d3 23d4 	ldr.w	r2, [r3, #980]	@ 0x3d4
 800e68a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e68c:	1ad3      	subs	r3, r2, r3
 800e68e:	2200      	movs	r2, #0
 800e690:	4698      	mov	r8, r3
 800e692:	4691      	mov	r9, r2
 800e694:	4642      	mov	r2, r8
 800e696:	464b      	mov	r3, r9
 800e698:	4846      	ldr	r0, [pc, #280]	@ (800e7b4 <ProcessRadioTxDone+0x18c>)
 800e69a:	f00c f965 	bl	801a968 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e69e:	4845      	ldr	r0, [pc, #276]	@ (800e7b4 <ProcessRadioTxDone+0x18c>)
 800e6a0:	f00c f86e 	bl	801a780 <UTIL_TIMER_Start>
 800e6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6a6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6aa:	f383 8810 	msr	PRIMASK, r3
}
 800e6ae:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800e6b0:	4b3b      	ldr	r3, [pc, #236]	@ (800e7a0 <ProcessRadioTxDone+0x178>)
 800e6b2:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d004      	beq.n	800e6c4 <ProcessRadioTxDone+0x9c>
 800e6ba:	4b3c      	ldr	r3, [pc, #240]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e6bc:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d01c      	beq.n	800e6fe <ProcessRadioTxDone+0xd6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800e6c4:	2316      	movs	r3, #22
 800e6c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e6ca:	4b35      	ldr	r3, [pc, #212]	@ (800e7a0 <ProcessRadioTxDone+0x178>)
 800e6cc:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 800e6d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e6d4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f006 fe09 	bl	80152f0 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e6de:	4b33      	ldr	r3, [pc, #204]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e6e0:	f8d3 23d4 	ldr.w	r2, [r3, #980]	@ 0x3d4
 800e6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e6:	4413      	add	r3, r2
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	461c      	mov	r4, r3
 800e6ec:	4615      	mov	r5, r2
 800e6ee:	4622      	mov	r2, r4
 800e6f0:	462b      	mov	r3, r5
 800e6f2:	4831      	ldr	r0, [pc, #196]	@ (800e7b8 <ProcessRadioTxDone+0x190>)
 800e6f4:	f00c f938 	bl	801a968 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800e6f8:	482f      	ldr	r0, [pc, #188]	@ (800e7b8 <ProcessRadioTxDone+0x190>)
 800e6fa:	f00c f841 	bl	801a780 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e6fe:	4b2a      	ldr	r3, [pc, #168]	@ (800e7a8 <ProcessRadioTxDone+0x180>)
 800e700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e704:	4926      	ldr	r1, [pc, #152]	@ (800e7a0 <ProcessRadioTxDone+0x178>)
 800e706:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e70a:	4b28      	ldr	r3, [pc, #160]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e70c:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 800e710:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e712:	4b25      	ldr	r3, [pc, #148]	@ (800e7a8 <ProcessRadioTxDone+0x180>)
 800e714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e718:	e9c7 2304 	strd	r2, r3, [r7, #16]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e71c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e720:	4618      	mov	r0, r3
 800e722:	f00b ff59 	bl	801a5d8 <SysTimeGetMcuTime>
 800e726:	4638      	mov	r0, r7
 800e728:	4b1d      	ldr	r3, [pc, #116]	@ (800e7a0 <ProcessRadioTxDone+0x178>)
 800e72a:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800e72e:	9200      	str	r2, [sp, #0]
 800e730:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800e734:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e738:	ca06      	ldmia	r2, {r1, r2}
 800e73a:	f00b fea9 	bl	801a490 <SysTimeSub>
 800e73e:	f107 0320 	add.w	r3, r7, #32
 800e742:	463a      	mov	r2, r7
 800e744:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e748:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e74c:	4b17      	ldr	r3, [pc, #92]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e74e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e756:	e9c7 2306 	strd	r2, r3, [r7, #24]
    txDone.Joined  = true;
 800e75a:	2301      	movs	r3, #1
 800e75c:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e75e:	4b10      	ldr	r3, [pc, #64]	@ (800e7a0 <ProcessRadioTxDone+0x178>)
 800e760:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <ProcessRadioTxDone+0x144>
    {
        txDone.Joined  = false;
 800e768:	2300      	movs	r3, #0
 800e76a:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e76c:	4b0c      	ldr	r3, [pc, #48]	@ (800e7a0 <ProcessRadioTxDone+0x178>)
 800e76e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e772:	f107 0208 	add.w	r2, r7, #8
 800e776:	4611      	mov	r1, r2
 800e778:	4618      	mov	r0, r3
 800e77a:	f006 fdda 	bl	8015332 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800e77e:	4b0b      	ldr	r3, [pc, #44]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e780:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800e784:	f083 0301 	eor.w	r3, r3, #1
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d003      	beq.n	800e796 <ProcessRadioTxDone+0x16e>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e78e:	4b07      	ldr	r3, [pc, #28]	@ (800e7ac <ProcessRadioTxDone+0x184>)
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
    }
#endif /* LORAMAC_VERSION */
}
 800e796:	bf00      	nop
 800e798:	3750      	adds	r7, #80	@ 0x50
 800e79a:	46bd      	mov	sp, r7
 800e79c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e7a0:	2000bfc0 	.word	0x2000bfc0
 800e7a4:	08022c78 	.word	0x08022c78
 800e7a8:	2000c7e0 	.word	0x2000c7e0
 800e7ac:	2000ba68 	.word	0x2000ba68
 800e7b0:	2000bdf8 	.word	0x2000bdf8
 800e7b4:	2000be18 	.word	0x2000be18
 800e7b8:	2000be80 	.word	0x2000be80

0800e7bc <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e7c0:	4b10      	ldr	r3, [pc, #64]	@ (800e804 <PrepareRxDoneAbort+0x48>)
 800e7c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7ca:	4a0e      	ldr	r2, [pc, #56]	@ (800e804 <PrepareRxDoneAbort+0x48>)
 800e7cc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e804 <PrepareRxDoneAbort+0x48>)
 800e7d2:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d002      	beq.n	800e7e0 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800e7da:	2000      	movs	r0, #0
 800e7dc:	f001 f96c 	bl	800fab8 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e7e0:	4a08      	ldr	r2, [pc, #32]	@ (800e804 <PrepareRxDoneAbort+0x48>)
 800e7e2:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800e7e6:	f043 0302 	orr.w	r3, r3, #2
 800e7ea:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e7ee:	4a05      	ldr	r2, [pc, #20]	@ (800e804 <PrepareRxDoneAbort+0x48>)
 800e7f0:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800e7f4:	f043 0310 	orr.w	r3, r3, #16
 800e7f8:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd

    UpdateRxSlotIdleState( );
 800e7fc:	f7ff fefa 	bl	800e5f4 <UpdateRxSlotIdleState>
}
 800e800:	bf00      	nop
 800e802:	bd80      	pop	{r7, pc}
 800e804:	2000ba68 	.word	0x2000ba68

0800e808 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e808:	b5b0      	push	{r4, r5, r7, lr}
 800e80a:	b0ae      	sub	sp, #184	@ 0xb8
 800e80c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e80e:	2313      	movs	r3, #19
 800e810:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e814:	4b79      	ldr	r3, [pc, #484]	@ (800e9fc <ProcessRadioRxDone+0x1f4>)
 800e816:	689b      	ldr	r3, [r3, #8]
 800e818:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint16_t size = RxDoneParams.Size;
 800e81c:	4b77      	ldr	r3, [pc, #476]	@ (800e9fc <ProcessRadioRxDone+0x1f4>)
 800e81e:	899b      	ldrh	r3, [r3, #12]
 800e820:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
    int16_t rssi = RxDoneParams.Rssi;
 800e824:	4b75      	ldr	r3, [pc, #468]	@ (800e9fc <ProcessRadioRxDone+0x1f4>)
 800e826:	89db      	ldrh	r3, [r3, #14]
 800e828:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    int8_t snr = RxDoneParams.Snr;
 800e82c:	4b73      	ldr	r3, [pc, #460]	@ (800e9fc <ProcessRadioRxDone+0x1f4>)
 800e82e:	7c1b      	ldrb	r3, [r3, #16]
 800e830:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    uint8_t pktHeaderLen = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    uint32_t downLinkCounter = 0;
 800e83a:	2300      	movs	r3, #0
 800e83c:	61fb      	str	r3, [r7, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e83e:	4b70      	ldr	r3, [pc, #448]	@ (800ea00 <ProcessRadioRxDone+0x1f8>)
 800e840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800e844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    uint8_t multicast = 0;
 800e848:	2300      	movs	r3, #0
 800e84a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e84e:	2301      	movs	r3, #1
 800e850:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800e854:	2301      	movs	r3, #1
 800e856:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e85a:	4b6a      	ldr	r3, [pc, #424]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c
    MacCtx.RxStatus.Rssi = rssi;
 800e862:	4a68      	ldr	r2, [pc, #416]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e864:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800e868:	f8a2 34c8 	strh.w	r3, [r2, #1224]	@ 0x4c8
    MacCtx.RxStatus.Snr = snr;
 800e86c:	4a65      	ldr	r2, [pc, #404]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e86e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e872:	f882 34ca 	strb.w	r3, [r2, #1226]	@ 0x4ca
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e876:	4b63      	ldr	r3, [pc, #396]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e878:	f893 24cc 	ldrb.w	r2, [r3, #1228]	@ 0x4cc
 800e87c:	4b61      	ldr	r3, [pc, #388]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e87e:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
    MacCtx.McpsIndication.Port = 0;
 800e882:	4b60      	ldr	r3, [pc, #384]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e884:	2200      	movs	r2, #0
 800e886:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
    MacCtx.McpsIndication.Multicast = 0;
 800e88a:	4b5e      	ldr	r3, [pc, #376]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 244a 	strb.w	r2, [r3, #1098]	@ 0x44a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e892:	4b5c      	ldr	r3, [pc, #368]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e894:	2200      	movs	r2, #0
 800e896:	f883 244d 	strb.w	r2, [r3, #1101]	@ 0x44d
    MacCtx.McpsIndication.Buffer = NULL;
 800e89a:	4b5a      	ldr	r3, [pc, #360]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
    MacCtx.McpsIndication.BufferSize = 0;
 800e8a2:	4b58      	ldr	r3, [pc, #352]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
    MacCtx.McpsIndication.RxData = false;
 800e8aa:	4b56      	ldr	r3, [pc, #344]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455
    MacCtx.McpsIndication.AckReceived = false;
 800e8b2:	4b54      	ldr	r3, [pc, #336]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2456 	strb.w	r2, [r3, #1110]	@ 0x456
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e8ba:	4b52      	ldr	r3, [pc, #328]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f8c3 2458 	str.w	r2, [r3, #1112]	@ 0x458
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e8c2:	4b50      	ldr	r3, [pc, #320]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.McpsIndication.DevAddress = 0;
 800e8ca:	4b4e      	ldr	r3, [pc, #312]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e8d2:	4b4c      	ldr	r3, [pc, #304]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e8da:	4b4b      	ldr	r3, [pc, #300]	@ (800ea08 <ProcessRadioRxDone+0x200>)
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8de:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e8e0:	484a      	ldr	r0, [pc, #296]	@ (800ea0c <ProcessRadioRxDone+0x204>)
 800e8e2:	f00b ffd1 	bl	801a888 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e8e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800e8f0:	f004 fd31 	bl	8013356 <LoRaMacClassBRxBeacon>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00b      	beq.n	800e912 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e8fa:	4a42      	ldr	r2, [pc, #264]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e8fc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800e900:	f8a2 34be 	strh.w	r3, [r2, #1214]	@ 0x4be
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e904:	4a3f      	ldr	r2, [pc, #252]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e906:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e90a:	f882 34c0 	strb.w	r3, [r2, #1216]	@ 0x4c0
        return;
 800e90e:	f000 bc2d 	b.w	800f16c <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e912:	4b3b      	ldr	r3, [pc, #236]	@ (800ea00 <ProcessRadioRxDone+0x1f8>)
 800e914:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d11e      	bne.n	800e95a <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e91c:	f004 fd30 	bl	8013380 <LoRaMacClassBIsPingExpected>
 800e920:	4603      	mov	r3, r0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d00a      	beq.n	800e93c <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e926:	2000      	movs	r0, #0
 800e928:	f004 fcd9 	bl	80132de <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e92c:	2000      	movs	r0, #0
 800e92e:	f004 fcfe 	bl	801332e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e932:	4b34      	ldr	r3, [pc, #208]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e934:	2204      	movs	r2, #4
 800e936:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
 800e93a:	e00e      	b.n	800e95a <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e93c:	f004 fd28 	bl	8013390 <LoRaMacClassBIsMulticastExpected>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d009      	beq.n	800e95a <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e946:	2000      	movs	r0, #0
 800e948:	f004 fcd4 	bl	80132f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e94c:	2000      	movs	r0, #0
 800e94e:	f004 fcf8 	bl	8013342 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e952:	4b2c      	ldr	r3, [pc, #176]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e954:	2205      	movs	r2, #5
 800e956:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800e95a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e962:	4b28      	ldr	r3, [pc, #160]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e964:	2201      	movs	r2, #1
 800e966:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
        PrepareRxDoneAbort( );
 800e96a:	f7ff ff27 	bl	800e7bc <PrepareRxDoneAbort>
        return;
 800e96e:	e3fd      	b.n	800f16c <ProcessRadioRxDone+0x964>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e970:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800e974:	1c5a      	adds	r2, r3, #1
 800e976:	f887 2096 	strb.w	r2, [r7, #150]	@ 0x96
 800e97a:	461a      	mov	r2, r3
 800e97c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e980:	4413      	add	r3, r2
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800e988:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800e98c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e990:	b2db      	uxtb	r3, r3
 800e992:	3b01      	subs	r3, #1
 800e994:	2b06      	cmp	r3, #6
 800e996:	f200 83c2 	bhi.w	800f11e <ProcessRadioRxDone+0x916>
 800e99a:	a201      	add	r2, pc, #4	@ (adr r2, 800e9a0 <ProcessRadioRxDone+0x198>)
 800e99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a0:	0800e9bd 	.word	0x0800e9bd
 800e9a4:	0800f11f 	.word	0x0800f11f
 800e9a8:	0800ebaf 	.word	0x0800ebaf
 800e9ac:	0800f11f 	.word	0x0800f11f
 800e9b0:	0800eba7 	.word	0x0800eba7
 800e9b4:	0800f11f 	.word	0x0800f11f
 800e9b8:	0800f0c3 	.word	0x0800f0c3
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e9bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800e9c0:	2b10      	cmp	r3, #16
 800e9c2:	d806      	bhi.n	800e9d2 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800e9cc:	f7ff fef6 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800e9d0:	e3cc      	b.n	800f16c <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e9d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e9d6:	623b      	str	r3, [r7, #32]
            macMsgJoinAccept.BufSize = size;
 800e9d8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800e9dc:	b2db      	uxtb	r3, r3
 800e9de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e9e2:	4b07      	ldr	r3, [pc, #28]	@ (800ea00 <ProcessRadioRxDone+0x1f8>)
 800e9e4:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d011      	beq.n	800ea10 <ProcessRadioRxDone+0x208>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ea04 <ProcessRadioRxDone+0x1fc>)
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800e9f4:	f7ff fee2 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800e9f8:	e3b8      	b.n	800f16c <ProcessRadioRxDone+0x964>
 800e9fa:	bf00      	nop
 800e9fc:	2000c7e8 	.word	0x2000c7e8
 800ea00:	2000bfc0 	.word	0x2000bfc0
 800ea04:	2000ba68 	.word	0x2000ba68
 800ea08:	08022c78 	.word	0x08022c78
 800ea0c:	2000be18 	.word	0x2000be18
            }

            SecureElementGetJoinEui( joinEui );
 800ea10:	f107 0310 	add.w	r3, r7, #16
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe fab5 	bl	800cf84 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800ea1a:	f107 0220 	add.w	r2, r7, #32
 800ea1e:	f107 0310 	add.w	r3, r7, #16
 800ea22:	4619      	mov	r1, r3
 800ea24:	20ff      	movs	r0, #255	@ 0xff
 800ea26:	f005 fee9 	bl	80147fc <LoRaMacCryptoHandleJoinAccept>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800ea30:	2300      	movs	r3, #0
 800ea32:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ea36:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800ea3a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	b25b      	sxtb	r3, r3
 800ea42:	733b      	strb	r3, [r7, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea44:	4bbd      	ldr	r3, [pc, #756]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ea46:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800ea4a:	737b      	strb	r3, [r7, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800ea4c:	4bbb      	ldr	r3, [pc, #748]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ea4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ea52:	f107 010c 	add.w	r1, r7, #12
 800ea56:	2207      	movs	r2, #7
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f006 fc8d 	bl	8015378 <RegionVerify>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800ea64:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f040 8090 	bne.w	800eb8e <ProcessRadioRxDone+0x386>
 800ea6e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 808b 	beq.w	800eb8e <ProcessRadioRxDone+0x386>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ea78:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4baf      	ldr	r3, [pc, #700]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ea80:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ea84:	4bad      	ldr	r3, [pc, #692]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ea86:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800ea8a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ea8e:	021b      	lsls	r3, r3, #8
 800ea90:	4313      	orrs	r3, r2
 800ea92:	4aaa      	ldr	r2, [pc, #680]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ea94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ea98:	4ba8      	ldr	r3, [pc, #672]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ea9a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800ea9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800eaa2:	041b      	lsls	r3, r3, #16
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	4aa5      	ldr	r2, [pc, #660]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eaa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800eaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaae:	4aa3      	ldr	r2, [pc, #652]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eab0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800eab4:	4ba1      	ldr	r3, [pc, #644]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800eaba:	4619      	mov	r1, r3
 800eabc:	2002      	movs	r0, #2
 800eabe:	f7fe fa79 	bl	800cfb4 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800eac2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800eac6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	461a      	mov	r2, r3
 800eace:	4b9b      	ldr	r3, [pc, #620]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ead0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ead4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800ead8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	461a      	mov	r2, r3
 800eae0:	4b96      	ldr	r3, [pc, #600]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eae2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800eae6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800eaea:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4b92      	ldr	r3, [pc, #584]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eaf4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800eaf8:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800eafc:	461a      	mov	r2, r3
 800eafe:	4b8f      	ldr	r3, [pc, #572]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb00:	669a      	str	r2, [r3, #104]	@ 0x68
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800eb02:	4b8e      	ldr	r3, [pc, #568]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d102      	bne.n	800eb10 <ProcessRadioRxDone+0x308>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800eb0a:	4b8c      	ldr	r3, [pc, #560]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	669a      	str	r2, [r3, #104]	@ 0x68
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800eb10:	4b8a      	ldr	r3, [pc, #552]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb14:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb18:	fb02 f303 	mul.w	r3, r2, r3
 800eb1c:	4a87      	ldr	r2, [pc, #540]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb1e:	6693      	str	r3, [r2, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800eb20:	4b86      	ldr	r3, [pc, #536]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb24:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800eb28:	4a84      	ldr	r2, [pc, #528]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb2a:	66d3      	str	r3, [r2, #108]	@ 0x6c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800eb2c:	4b83      	ldr	r3, [pc, #524]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800eb34:	4b81      	ldr	r3, [pc, #516]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800eb3c:	f107 0320 	add.w	r3, r7, #32
 800eb40:	3312      	adds	r3, #18
 800eb42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800eb46:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	3b11      	subs	r3, #17
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800eb54:	4b79      	ldr	r3, [pc, #484]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb56:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800eb5a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800eb5e:	4611      	mov	r1, r2
 800eb60:	4618      	mov	r0, r3
 800eb62:	f006 fc20 	bl	80153a6 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800eb66:	4b75      	ldr	r3, [pc, #468]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800eb68:	2202      	movs	r2, #2
 800eb6a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800eb6e:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 800eb72:	4618      	mov	r0, r3
 800eb74:	f005 f90e 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	f000 82d7 	beq.w	800f12e <ProcessRadioRxDone+0x926>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800eb80:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 800eb84:	4619      	mov	r1, r3
 800eb86:	2000      	movs	r0, #0
 800eb88:	f005 f878 	bl	8013c7c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800eb8c:	e2cf      	b.n	800f12e <ProcessRadioRxDone+0x926>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eb8e:	2001      	movs	r0, #1
 800eb90:	f005 f900 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f000 82c8 	beq.w	800f12c <ProcessRadioRxDone+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	2007      	movs	r0, #7
 800eba0:	f005 f86c 	bl	8013c7c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800eba4:	e2c2      	b.n	800f12c <ProcessRadioRxDone+0x924>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800eba6:	4b66      	ldr	r3, [pc, #408]	@ (800ed40 <ProcessRadioRxDone+0x538>)
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ebae:	4b63      	ldr	r3, [pc, #396]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ebb0:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800ebb4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ebb8:	4b61      	ldr	r3, [pc, #388]	@ (800ed40 <ProcessRadioRxDone+0x538>)
 800ebba:	f893 344c 	ldrb.w	r3, [r3, #1100]	@ 0x44c
 800ebbe:	b25b      	sxtb	r3, r3
 800ebc0:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ebc4:	230d      	movs	r3, #13
 800ebc6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ebca:	4b5c      	ldr	r3, [pc, #368]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ebcc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d002      	beq.n	800ebda <ProcessRadioRxDone+0x3d2>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ebd4:	230e      	movs	r3, #14
 800ebd6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ebda:	4b58      	ldr	r3, [pc, #352]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ebdc:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 800ebe0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800ebe4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f006 fb81 	bl	80152f0 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ebee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ebf2:	3b0d      	subs	r3, #13
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	b21b      	sxth	r3, r3
 800ebf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ebfc:	b21a      	sxth	r2, r3
 800ebfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec00:	b21b      	sxth	r3, r3
 800ec02:	429a      	cmp	r2, r3
 800ec04:	dc03      	bgt.n	800ec0e <ProcessRadioRxDone+0x406>
 800ec06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ec0a:	2b0b      	cmp	r3, #11
 800ec0c:	d806      	bhi.n	800ec1c <ProcessRadioRxDone+0x414>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec0e:	4b4c      	ldr	r3, [pc, #304]	@ (800ed40 <ProcessRadioRxDone+0x538>)
 800ec10:	2201      	movs	r2, #1
 800ec12:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800ec16:	f7ff fdd1 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800ec1a:	e2a7      	b.n	800f16c <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800ec1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec20:	64bb      	str	r3, [r7, #72]	@ 0x48
            macMsgData.BufSize = size;
 800ec22:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ec2c:	4b45      	ldr	r3, [pc, #276]	@ (800ed44 <ProcessRadioRxDone+0x53c>)
 800ec2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ec30:	23ff      	movs	r3, #255	@ 0xff
 800ec32:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ec36:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f006 f8de 	bl	8014dfc <LoRaMacParserData>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d006      	beq.n	800ec54 <ProcessRadioRxDone+0x44c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec46:	4b3e      	ldr	r3, [pc, #248]	@ (800ed40 <ProcessRadioRxDone+0x538>)
 800ec48:	2201      	movs	r2, #1
 800ec4a:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800ec4e:	f7ff fdb5 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800ec52:	e28b      	b.n	800f16c <ProcessRadioRxDone+0x964>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ec54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec56:	4a3a      	ldr	r2, [pc, #232]	@ (800ed40 <ProcessRadioRxDone+0x538>)
 800ec58:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ec5c:	f107 021a 	add.w	r2, r7, #26
 800ec60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ec64:	4611      	mov	r1, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f002 fcc4 	bl	80115f4 <DetermineFrameType>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d006      	beq.n	800ec80 <ProcessRadioRxDone+0x478>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec72:	4b33      	ldr	r3, [pc, #204]	@ (800ed40 <ProcessRadioRxDone+0x538>)
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800ec7a:	f7ff fd9f 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800ec7e:	e275      	b.n	800f16c <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ec80:	2300      	movs	r3, #0
 800ec82:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            downLinkCounter = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	61fb      	str	r3, [r7, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
 800ec90:	e04f      	b.n	800ed32 <ProcessRadioRxDone+0x52a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ec92:	f897 20a1 	ldrb.w	r2, [r7, #161]	@ 0xa1
 800ec96:	4929      	ldr	r1, [pc, #164]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ec98:	4613      	mov	r3, r2
 800ec9a:	005b      	lsls	r3, r3, #1
 800ec9c:	4413      	add	r3, r2
 800ec9e:	011b      	lsls	r3, r3, #4
 800eca0:	440b      	add	r3, r1
 800eca2:	33fc      	adds	r3, #252	@ 0xfc
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d13d      	bne.n	800ed28 <ProcessRadioRxDone+0x520>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ecac:	f897 20a1 	ldrb.w	r2, [r7, #161]	@ 0xa1
 800ecb0:	4922      	ldr	r1, [pc, #136]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	005b      	lsls	r3, r3, #1
 800ecb6:	4413      	add	r3, r2
 800ecb8:	011b      	lsls	r3, r3, #4
 800ecba:	440b      	add	r3, r1
 800ecbc:	33f9      	adds	r3, #249	@ 0xf9
 800ecbe:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d031      	beq.n	800ed28 <ProcessRadioRxDone+0x520>
                {
                    multicast = 1;
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ecca:	f897 20a1 	ldrb.w	r2, [r7, #161]	@ 0xa1
 800ecce:	491b      	ldr	r1, [pc, #108]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ecd0:	4613      	mov	r3, r2
 800ecd2:	005b      	lsls	r3, r3, #1
 800ecd4:	4413      	add	r3, r2
 800ecd6:	011b      	lsls	r3, r3, #4
 800ecd8:	440b      	add	r3, r1
 800ecda:	33fa      	adds	r3, #250	@ 0xfa
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ece2:	f897 20a1 	ldrb.w	r2, [r7, #161]	@ 0xa1
 800ece6:	4915      	ldr	r1, [pc, #84]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ece8:	4613      	mov	r3, r2
 800ecea:	005b      	lsls	r3, r3, #1
 800ecec:	4413      	add	r3, r2
 800ecee:	011b      	lsls	r3, r3, #4
 800ecf0:	440b      	add	r3, r1
 800ecf2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	61fb      	str	r3, [r7, #28]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ecfc:	f897 20a1 	ldrb.w	r2, [r7, #161]	@ 0xa1
 800ed00:	490e      	ldr	r1, [pc, #56]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ed02:	4613      	mov	r3, r2
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	4413      	add	r3, r2
 800ed08:	011b      	lsls	r3, r3, #4
 800ed0a:	440b      	add	r3, r1
 800ed0c:	33fc      	adds	r3, #252	@ 0xfc
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed14:	4b09      	ldr	r3, [pc, #36]	@ (800ed3c <ProcessRadioRxDone+0x534>)
 800ed16:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d114      	bne.n	800ed48 <ProcessRadioRxDone+0x540>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ed1e:	4b08      	ldr	r3, [pc, #32]	@ (800ed40 <ProcessRadioRxDone+0x538>)
 800ed20:	2203      	movs	r2, #3
 800ed22:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
                    }
                    break;
 800ed26:	e00f      	b.n	800ed48 <ProcessRadioRxDone+0x540>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ed28:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	f887 30a1 	strb.w	r3, [r7, #161]	@ 0xa1
 800ed32:	f897 30a1 	ldrb.w	r3, [r7, #161]	@ 0xa1
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d0ab      	beq.n	800ec92 <ProcessRadioRxDone+0x48a>
 800ed3a:	e006      	b.n	800ed4a <ProcessRadioRxDone+0x542>
 800ed3c:	2000bfc0 	.word	0x2000bfc0
 800ed40:	2000ba68 	.word	0x2000ba68
 800ed44:	2000bca0 	.word	0x2000bca0
                    break;
 800ed48:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ed4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d117      	bne.n	800ed82 <ProcessRadioRxDone+0x57a>
 800ed52:	7ebb      	ldrb	r3, [r7, #26]
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d10d      	bne.n	800ed74 <ProcessRadioRxDone+0x56c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed58:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ed5c:	f003 0320 	and.w	r3, r3, #32
 800ed60:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d106      	bne.n	800ed74 <ProcessRadioRxDone+0x56c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ed66:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ed6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed6e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d006      	beq.n	800ed82 <ProcessRadioRxDone+0x57a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed74:	4bb6      	ldr	r3, [pc, #728]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                PrepareRxDoneAbort( );
 800ed7c:	f7ff fd1e 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800ed80:	e1f4      	b.n	800f16c <ProcessRadioRxDone+0x964>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ed82:	2315      	movs	r3, #21
 800ed84:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ed88:	4bb2      	ldr	r3, [pc, #712]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ed8a:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 800ed8e:	463b      	mov	r3, r7
 800ed90:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800ed94:	4618      	mov	r0, r3
 800ed96:	f006 faab 	bl	80152f0 <RegionGetPhyParam>
 800ed9a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800ed9e:	463a      	mov	r2, r7
 800eda0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eda4:	e883 0003 	stmia.w	r3, {r0, r1}

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800eda8:	7eb9      	ldrb	r1, [r7, #26]
 800edaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800edac:	b29b      	uxth	r3, r3
 800edae:	4da9      	ldr	r5, [pc, #676]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800edb0:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 800edb4:	f897 00a2 	ldrb.w	r0, [r7, #162]	@ 0xa2
 800edb8:	f107 021c 	add.w	r2, r7, #28
 800edbc:	9202      	str	r2, [sp, #8]
 800edbe:	f107 021b 	add.w	r2, r7, #27
 800edc2:	9201      	str	r2, [sp, #4]
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	f8d5 3138 	ldr.w	r3, [r5, #312]	@ 0x138
 800edca:	4622      	mov	r2, r4
 800edcc:	f000 fe9c 	bl	800fb08 <GetFCntDown>
 800edd0:	4603      	mov	r3, r0
 800edd2:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800edd6:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d035      	beq.n	800ee4a <ProcessRadioRxDone+0x642>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800edde:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800ede2:	2b07      	cmp	r3, #7
 800ede4:	d119      	bne.n	800ee1a <ProcessRadioRxDone+0x612>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ede6:	4b9a      	ldr	r3, [pc, #616]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ede8:	2208      	movs	r2, #8
 800edea:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800edee:	4b99      	ldr	r3, [pc, #612]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800edf0:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d11d      	bne.n	800ee34 <ProcessRadioRxDone+0x62c>
 800edf8:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800edfc:	f023 031f 	bic.w	r3, r3, #31
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	2ba0      	cmp	r3, #160	@ 0xa0
 800ee04:	d116      	bne.n	800ee34 <ProcessRadioRxDone+0x62c>
 800ee06:	4b93      	ldr	r3, [pc, #588]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ee08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ee0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d111      	bne.n	800ee34 <ProcessRadioRxDone+0x62c>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800ee10:	4b90      	ldr	r3, [pc, #576]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ee18:	e00c      	b.n	800ee34 <ProcessRadioRxDone+0x62c>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800ee1a:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800ee1e:	2b08      	cmp	r3, #8
 800ee20:	d104      	bne.n	800ee2c <ProcessRadioRxDone+0x624>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800ee22:	4b8b      	ldr	r3, [pc, #556]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee24:	220a      	movs	r2, #10
 800ee26:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
 800ee2a:	e003      	b.n	800ee34 <ProcessRadioRxDone+0x62c>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee2c:	4b88      	ldr	r3, [pc, #544]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ee34:	69fb      	ldr	r3, [r7, #28]
 800ee36:	4a86      	ldr	r2, [pc, #536]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee38:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	4a84      	ldr	r2, [pc, #528]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee40:	f8c2 34ac 	str.w	r3, [r2, #1196]	@ 0x4ac
                PrepareRxDoneAbort( );
 800ee44:	f7ff fcba 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800ee48:	e190      	b.n	800f16c <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ee4a:	7efa      	ldrb	r2, [r7, #27]
 800ee4c:	69f9      	ldr	r1, [r7, #28]
 800ee4e:	f897 00a2 	ldrb.w	r0, [r7, #162]	@ 0xa2
 800ee52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ee5e:	f005 fe2f 	bl	8014ac0 <LoRaMacCryptoUnsecureMessage>
 800ee62:	4603      	mov	r3, r0
 800ee64:	f887 30a0 	strb.w	r3, [r7, #160]	@ 0xa0
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ee68:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00f      	beq.n	800ee90 <ProcessRadioRxDone+0x688>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ee70:	f897 30a0 	ldrb.w	r3, [r7, #160]	@ 0xa0
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d104      	bne.n	800ee82 <ProcessRadioRxDone+0x67a>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ee78:	4b75      	ldr	r3, [pc, #468]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee7a:	220b      	movs	r2, #11
 800ee7c:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
 800ee80:	e003      	b.n	800ee8a <ProcessRadioRxDone+0x682>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ee82:	4b73      	ldr	r3, [pc, #460]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee84:	220c      	movs	r2, #12
 800ee86:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                }
                PrepareRxDoneAbort( );
 800ee8a:	f7ff fc97 	bl	800e7bc <PrepareRxDoneAbort>
                return;
 800ee8e:	e16d      	b.n	800f16c <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ee90:	4b6f      	ldr	r3, [pc, #444]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
            MacCtx.McpsIndication.Multicast = multicast;
 800ee98:	4a6d      	ldr	r2, [pc, #436]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ee9a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800ee9e:	f882 344a 	strb.w	r3, [r2, #1098]	@ 0x44a
            MacCtx.McpsIndication.Buffer = NULL;
 800eea2:	4b6b      	ldr	r3, [pc, #428]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eea4:	2200      	movs	r2, #0
 800eea6:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
            MacCtx.McpsIndication.BufferSize = 0;
 800eeaa:	4b69      	ldr	r3, [pc, #420]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	4a66      	ldr	r2, [pc, #408]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eeb6:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	4a64      	ldr	r2, [pc, #400]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eebe:	f8c2 34ac 	str.w	r3, [r2, #1196]	@ 0x4ac
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800eec2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800eec6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	bf14      	ite	ne
 800eed0:	2301      	movne	r3, #1
 800eed2:	2300      	moveq	r3, #0
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	4b5e      	ldr	r3, [pc, #376]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eed8:	f883 2456 	strb.w	r2, [r3, #1110]	@ 0x456

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eedc:	4b5c      	ldr	r3, [pc, #368]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eede:	2200      	movs	r2, #0
 800eee0:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800eee4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800eee8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	bf14      	ite	ne
 800eef2:	2301      	movne	r3, #1
 800eef4:	2300      	moveq	r3, #0
 800eef6:	b2da      	uxtb	r2, r3
 800eef8:	4b55      	ldr	r3, [pc, #340]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eefa:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eefe:	4b54      	ldr	r3, [pc, #336]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef00:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d004      	beq.n	800ef12 <ProcessRadioRxDone+0x70a>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ef08:	4b51      	ldr	r3, [pc, #324]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef0a:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d102      	bne.n	800ef18 <ProcessRadioRxDone+0x710>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ef12:	4b50      	ldr	r3, [pc, #320]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ef18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d104      	bne.n	800ef2a <ProcessRadioRxDone+0x722>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ef20:	4b4b      	ldr	r3, [pc, #300]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef22:	2202      	movs	r2, #2
 800ef24:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
 800ef28:	e01f      	b.n	800ef6a <ProcessRadioRxDone+0x762>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ef2a:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800ef2e:	f023 031f 	bic.w	r3, r3, #31
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	2ba0      	cmp	r3, #160	@ 0xa0
 800ef36:	d110      	bne.n	800ef5a <ProcessRadioRxDone+0x752>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ef38:	4b46      	ldr	r3, [pc, #280]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ef40:	4b44      	ldr	r3, [pc, #272]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ef42:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d102      	bne.n	800ef50 <ProcessRadioRxDone+0x748>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ef4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef4c:	4a41      	ldr	r2, [pc, #260]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ef4e:	6413      	str	r3, [r2, #64]	@ 0x40
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ef50:	4b3f      	ldr	r3, [pc, #252]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef52:	2201      	movs	r2, #1
 800ef54:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
 800ef58:	e007      	b.n	800ef6a <ProcessRadioRxDone+0x762>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ef5a:	4b3e      	ldr	r3, [pc, #248]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ef62:	4b3b      	ldr	r3, [pc, #236]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800ef6a:	4b3a      	ldr	r3, [pc, #232]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ef6c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d106      	bne.n	800ef82 <ProcessRadioRxDone+0x77a>
 800ef74:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ef78:	f003 0310 	and.w	r3, r3, #16
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d008      	beq.n	800ef94 <ProcessRadioRxDone+0x78c>
 800ef82:	4b34      	ldr	r3, [pc, #208]	@ (800f054 <ProcessRadioRxDone+0x84c>)
 800ef84:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d103      	bne.n	800ef94 <ProcessRadioRxDone+0x78c>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800ef8c:	4b30      	ldr	r3, [pc, #192]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef8e:	2201      	movs	r2, #1
 800ef90:	f883 244d 	strb.w	r2, [r3, #1101]	@ 0x44d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ef94:	4b2e      	ldr	r3, [pc, #184]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef96:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 800ef9a:	4a2d      	ldr	r2, [pc, #180]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800ef9c:	f892 2468 	ldrb.w	r2, [r2, #1128]	@ 0x468
 800efa0:	f897 1054 	ldrb.w	r1, [r7, #84]	@ 0x54
 800efa4:	4618      	mov	r0, r3
 800efa6:	f001 ff3b 	bl	8010e20 <RemoveMacCommands>

            switch( fType )
 800efaa:	7ebb      	ldrb	r3, [r7, #26]
 800efac:	2b03      	cmp	r3, #3
 800efae:	d879      	bhi.n	800f0a4 <ProcessRadioRxDone+0x89c>
 800efb0:	a201      	add	r2, pc, #4	@ (adr r2, 800efb8 <ProcessRadioRxDone+0x7b0>)
 800efb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb6:	bf00      	nop
 800efb8:	0800efc9 	.word	0x0800efc9
 800efbc:	0800f019 	.word	0x0800f019
 800efc0:	0800f059 	.word	0x0800f059
 800efc4:	0800f07f 	.word	0x0800f07f
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800efc8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800efcc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	461c      	mov	r4, r3
 800efd4:	4b1e      	ldr	r3, [pc, #120]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800efd6:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 800efda:	f997 1097 	ldrsb.w	r1, [r7, #151]	@ 0x97
 800efde:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800efe2:	f102 0010 	add.w	r0, r2, #16
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	460b      	mov	r3, r1
 800efea:	4622      	mov	r2, r4
 800efec:	2100      	movs	r1, #0
 800efee:	f000 ff05 	bl	800fdfc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eff2:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800eff6:	4b16      	ldr	r3, [pc, #88]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800eff8:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800effc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800effe:	4a14      	ldr	r2, [pc, #80]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800f000:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f004:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 800f008:	4b11      	ldr	r3, [pc, #68]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800f00a:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
                    MacCtx.McpsIndication.RxData = true;
 800f00e:	4b10      	ldr	r3, [pc, #64]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800f010:	2201      	movs	r2, #1
 800f012:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455
                    break;
 800f016:	e04c      	b.n	800f0b2 <ProcessRadioRxDone+0x8aa>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f018:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f01c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f020:	b2db      	uxtb	r3, r3
 800f022:	461c      	mov	r4, r3
 800f024:	4b0a      	ldr	r3, [pc, #40]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800f026:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 800f02a:	f997 1097 	ldrsb.w	r1, [r7, #151]	@ 0x97
 800f02e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800f032:	f102 0010 	add.w	r0, r2, #16
 800f036:	9300      	str	r3, [sp, #0]
 800f038:	460b      	mov	r3, r1
 800f03a:	4622      	mov	r2, r4
 800f03c:	2100      	movs	r1, #0
 800f03e:	f000 fedd 	bl	800fdfc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f042:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800f046:	4b02      	ldr	r3, [pc, #8]	@ (800f050 <ProcessRadioRxDone+0x848>)
 800f048:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    break;
 800f04c:	e031      	b.n	800f0b2 <ProcessRadioRxDone+0x8aa>
 800f04e:	bf00      	nop
 800f050:	2000ba68 	.word	0x2000ba68
 800f054:	2000bfc0 	.word	0x2000bfc0
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f058:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f05a:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 800f05e:	4b45      	ldr	r3, [pc, #276]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f060:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 800f064:	f997 1097 	ldrsb.w	r1, [r7, #151]	@ 0x97
 800f068:	9300      	str	r3, [sp, #0]
 800f06a:	460b      	mov	r3, r1
 800f06c:	2100      	movs	r1, #0
 800f06e:	f000 fec5 	bl	800fdfc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f072:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800f076:	4b3f      	ldr	r3, [pc, #252]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f078:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    break;
 800f07c:	e019      	b.n	800f0b2 <ProcessRadioRxDone+0x8aa>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f07e:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800f082:	4b3c      	ldr	r3, [pc, #240]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f084:	f883 244b 	strb.w	r2, [r3, #1099]	@ 0x44b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f08a:	4a3a      	ldr	r2, [pc, #232]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f08c:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f090:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 800f094:	4b37      	ldr	r3, [pc, #220]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f096:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454
                    MacCtx.McpsIndication.RxData = true;
 800f09a:	4b36      	ldr	r3, [pc, #216]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f09c:	2201      	movs	r2, #1
 800f09e:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455
                    break;
 800f0a2:	e006      	b.n	800f0b2 <ProcessRadioRxDone+0x8aa>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f0a4:	4b33      	ldr	r3, [pc, #204]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
                    PrepareRxDoneAbort( );
 800f0ac:	f7ff fb86 	bl	800e7bc <PrepareRxDoneAbort>
                    break;
 800f0b0:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f0b2:	4a30      	ldr	r2, [pc, #192]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f0b4:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f0b8:	f043 0302 	orr.w	r3, r3, #2
 800f0bc:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd

            break;
 800f0c0:	e035      	b.n	800f12e <ProcessRadioRxDone+0x926>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f0c2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800f0c6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800f0ca:	18d1      	adds	r1, r2, r3
 800f0cc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	461a      	mov	r2, r3
 800f0dc:	4826      	ldr	r0, [pc, #152]	@ (800f178 <ProcessRadioRxDone+0x970>)
 800f0de:	f00a ff94 	bl	801a00a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f0e2:	4b24      	ldr	r3, [pc, #144]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f0e4:	2203      	movs	r2, #3
 800f0e6:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f0ea:	4b22      	ldr	r3, [pc, #136]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f0f2:	4b20      	ldr	r3, [pc, #128]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f0f4:	4a20      	ldr	r2, [pc, #128]	@ (800f178 <ProcessRadioRxDone+0x970>)
 800f0f6:	f8c3 2450 	str.w	r2, [r3, #1104]	@ 0x450
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f0fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800f104:	1ad3      	subs	r3, r2, r3
 800f106:	b2da      	uxtb	r2, r3
 800f108:	4b1a      	ldr	r3, [pc, #104]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f10a:	f883 2454 	strb.w	r2, [r3, #1108]	@ 0x454

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f10e:	4a19      	ldr	r2, [pc, #100]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f110:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f114:	f043 0302 	orr.w	r3, r3, #2
 800f118:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
            break;
 800f11c:	e007      	b.n	800f12e <ProcessRadioRxDone+0x926>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f11e:	4b15      	ldr	r3, [pc, #84]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f120:	2201      	movs	r2, #1
 800f122:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
            PrepareRxDoneAbort( );
 800f126:	f7ff fb49 	bl	800e7bc <PrepareRxDoneAbort>
            break;
 800f12a:	e000      	b.n	800f12e <ProcessRadioRxDone+0x926>
            break;
 800f12c:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800f12e:	4b11      	ldr	r3, [pc, #68]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f130:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800f134:	2b00      	cmp	r3, #0
 800f136:	d008      	beq.n	800f14a <ProcessRadioRxDone+0x942>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800f138:	4b0e      	ldr	r3, [pc, #56]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f13a:	f893 346c 	ldrb.w	r3, [r3, #1132]	@ 0x46c
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00b      	beq.n	800f15a <ProcessRadioRxDone+0x952>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f142:	2000      	movs	r0, #0
 800f144:	f000 fcb8 	bl	800fab8 <OnAckTimeoutTimerEvent>
 800f148:	e007      	b.n	800f15a <ProcessRadioRxDone+0x952>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f14a:	4b0c      	ldr	r3, [pc, #48]	@ (800f17c <ProcessRadioRxDone+0x974>)
 800f14c:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800f150:	2b02      	cmp	r3, #2
 800f152:	d102      	bne.n	800f15a <ProcessRadioRxDone+0x952>
        {
            OnAckTimeoutTimerEvent( NULL );
 800f154:	2000      	movs	r0, #0
 800f156:	f000 fcaf 	bl	800fab8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f15a:	4a06      	ldr	r2, [pc, #24]	@ (800f174 <ProcessRadioRxDone+0x96c>)
 800f15c:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f160:	f043 0310 	orr.w	r3, r3, #16
 800f164:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f168:	f7ff fa44 	bl	800e5f4 <UpdateRxSlotIdleState>
}
 800f16c:	37a8      	adds	r7, #168	@ 0xa8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bdb0      	pop	{r4, r5, r7, pc}
 800f172:	bf00      	nop
 800f174:	2000ba68 	.word	0x2000ba68
 800f178:	2000bca0 	.word	0x2000bca0
 800f17c:	2000bfc0 	.word	0x2000bfc0

0800f180 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f184:	4b11      	ldr	r3, [pc, #68]	@ (800f1cc <ProcessRadioTxTimeout+0x4c>)
 800f186:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d002      	beq.n	800f194 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f18e:	4b10      	ldr	r3, [pc, #64]	@ (800f1d0 <ProcessRadioTxTimeout+0x50>)
 800f190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f192:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f194:	f7ff fa2e 	bl	800e5f4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f198:	4b0e      	ldr	r3, [pc, #56]	@ (800f1d4 <ProcessRadioTxTimeout+0x54>)
 800f19a:	2202      	movs	r2, #2
 800f19c:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f1a0:	2002      	movs	r0, #2
 800f1a2:	f004 fdc3 	bl	8013d2c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d4 <ProcessRadioTxTimeout+0x54>)
 800f1a8:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d003      	beq.n	800f1b8 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800f1b0:	4b08      	ldr	r3, [pc, #32]	@ (800f1d4 <ProcessRadioTxTimeout+0x54>)
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f1b8:	4a06      	ldr	r2, [pc, #24]	@ (800f1d4 <ProcessRadioTxTimeout+0x54>)
 800f1ba:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f1be:	f043 0310 	orr.w	r3, r3, #16
 800f1c2:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
}
 800f1c6:	bf00      	nop
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	2000bfc0 	.word	0x2000bfc0
 800f1d0:	08022c78 	.word	0x08022c78
 800f1d4:	2000ba68 	.word	0x2000ba68

0800f1d8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f1d8:	b5b0      	push	{r4, r5, r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	460a      	mov	r2, r1
 800f1e2:	71fb      	strb	r3, [r7, #7]
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f1ec:	4b43      	ldr	r3, [pc, #268]	@ (800f2fc <HandleRadioRxErrorTimeout+0x124>)
 800f1ee:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d002      	beq.n	800f1fc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f1f6:	4b42      	ldr	r3, [pc, #264]	@ (800f300 <HandleRadioRxErrorTimeout+0x128>)
 800f1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1fa:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f1fc:	f004 f8b8 	bl	8013370 <LoRaMacClassBIsBeaconExpected>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d007      	beq.n	800f216 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f206:	2002      	movs	r0, #2
 800f208:	f004 f85e 	bl	80132c8 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f20c:	2000      	movs	r0, #0
 800f20e:	f004 f884 	bl	801331a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f212:	2301      	movs	r3, #1
 800f214:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f216:	4b39      	ldr	r3, [pc, #228]	@ (800f2fc <HandleRadioRxErrorTimeout+0x124>)
 800f218:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d119      	bne.n	800f254 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f220:	f004 f8ae 	bl	8013380 <LoRaMacClassBIsPingExpected>
 800f224:	4603      	mov	r3, r0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d007      	beq.n	800f23a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f22a:	2000      	movs	r0, #0
 800f22c:	f004 f857 	bl	80132de <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f230:	2000      	movs	r0, #0
 800f232:	f004 f87c 	bl	801332e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f236:	2301      	movs	r3, #1
 800f238:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f23a:	f004 f8a9 	bl	8013390 <LoRaMacClassBIsMulticastExpected>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d007      	beq.n	800f254 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f244:	2000      	movs	r0, #0
 800f246:	f004 f855 	bl	80132f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f24a:	2000      	movs	r0, #0
 800f24c:	f004 f879 	bl	8013342 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f250:	2301      	movs	r3, #1
 800f252:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f254:	7bfb      	ldrb	r3, [r7, #15]
 800f256:	f083 0301 	eor.w	r3, r3, #1
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d047      	beq.n	800f2f0 <HandleRadioRxErrorTimeout+0x118>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f260:	4b28      	ldr	r3, [pc, #160]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f262:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800f266:	2b00      	cmp	r3, #0
 800f268:	d129      	bne.n	800f2be <HandleRadioRxErrorTimeout+0xe6>
        {
            if( MacCtx.NodeAckRequested == true )
 800f26a:	4b26      	ldr	r3, [pc, #152]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f26c:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800f270:	2b00      	cmp	r3, #0
 800f272:	d003      	beq.n	800f27c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f274:	4a23      	ldr	r2, [pc, #140]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f276:	79fb      	ldrb	r3, [r7, #7]
 800f278:	f882 3469 	strb.w	r3, [r2, #1129]	@ 0x469
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f27c:	79fb      	ldrb	r3, [r7, #7]
 800f27e:	4618      	mov	r0, r3
 800f280:	f004 fd54 	bl	8013d2c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f284:	4b1d      	ldr	r3, [pc, #116]	@ (800f2fc <HandleRadioRxErrorTimeout+0x124>)
 800f286:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800f28a:	4610      	mov	r0, r2
 800f28c:	4619      	mov	r1, r3
 800f28e:	f00b fc4b 	bl	801ab28 <UTIL_TIMER_GetElapsedTime>
 800f292:	4602      	mov	r2, r0
 800f294:	460b      	mov	r3, r1
 800f296:	491b      	ldr	r1, [pc, #108]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f298:	f8d1 13d4 	ldr.w	r1, [r1, #980]	@ 0x3d4
 800f29c:	2000      	movs	r0, #0
 800f29e:	460c      	mov	r4, r1
 800f2a0:	4605      	mov	r5, r0
 800f2a2:	42a2      	cmp	r2, r4
 800f2a4:	41ab      	sbcs	r3, r5
 800f2a6:	d323      	bcc.n	800f2f0 <HandleRadioRxErrorTimeout+0x118>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f2a8:	4817      	ldr	r0, [pc, #92]	@ (800f308 <HandleRadioRxErrorTimeout+0x130>)
 800f2aa:	f00b faed 	bl	801a888 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f2ae:	4a15      	ldr	r2, [pc, #84]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f2b0:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f2b4:	f043 0310 	orr.w	r3, r3, #16
 800f2b8:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
 800f2bc:	e018      	b.n	800f2f0 <HandleRadioRxErrorTimeout+0x118>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f2be:	4b11      	ldr	r3, [pc, #68]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f2c0:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d003      	beq.n	800f2d0 <HandleRadioRxErrorTimeout+0xf8>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f2c8:	4a0e      	ldr	r2, [pc, #56]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f2ca:	79bb      	ldrb	r3, [r7, #6]
 800f2cc:	f882 3469 	strb.w	r3, [r2, #1129]	@ 0x469
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f2d0:	79bb      	ldrb	r3, [r7, #6]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f004 fd2a 	bl	8013d2c <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f2d8:	4b08      	ldr	r3, [pc, #32]	@ (800f2fc <HandleRadioRxErrorTimeout+0x124>)
 800f2da:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d006      	beq.n	800f2f0 <HandleRadioRxErrorTimeout+0x118>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f2e2:	4a08      	ldr	r2, [pc, #32]	@ (800f304 <HandleRadioRxErrorTimeout+0x12c>)
 800f2e4:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f2e8:	f043 0310 	orr.w	r3, r3, #16
 800f2ec:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f2f0:	f7ff f980 	bl	800e5f4 <UpdateRxSlotIdleState>
}
 800f2f4:	bf00      	nop
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bdb0      	pop	{r4, r5, r7, pc}
 800f2fc:	2000bfc0 	.word	0x2000bfc0
 800f300:	08022c78 	.word	0x08022c78
 800f304:	2000ba68 	.word	0x2000ba68
 800f308:	2000be18 	.word	0x2000be18

0800f30c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f310:	2106      	movs	r1, #6
 800f312:	2005      	movs	r0, #5
 800f314:	f7ff ff60 	bl	800f1d8 <HandleRadioRxErrorTimeout>
}
 800f318:	bf00      	nop
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f320:	2104      	movs	r1, #4
 800f322:	2003      	movs	r0, #3
 800f324:	f7ff ff58 	bl	800f1d8 <HandleRadioRxErrorTimeout>
}
 800f328:	bf00      	nop
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f332:	f3ef 8310 	mrs	r3, PRIMASK
 800f336:	607b      	str	r3, [r7, #4]
  return(result);
 800f338:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f33a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f33c:	b672      	cpsid	i
}
 800f33e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f340:	4b1d      	ldr	r3, [pc, #116]	@ (800f3b8 <LoRaMacHandleIrqEvents+0x8c>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f346:	4b1c      	ldr	r3, [pc, #112]	@ (800f3b8 <LoRaMacHandleIrqEvents+0x8c>)
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	f383 8810 	msr	PRIMASK, r3
}
 800f356:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d027      	beq.n	800f3ae <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f35e:	783b      	ldrb	r3, [r7, #0]
 800f360:	f003 0310 	and.w	r3, r3, #16
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	d001      	beq.n	800f36e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f36a:	f7ff f95d 	bl	800e628 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f36e:	783b      	ldrb	r3, [r7, #0]
 800f370:	f003 0308 	and.w	r3, r3, #8
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b00      	cmp	r3, #0
 800f378:	d001      	beq.n	800f37e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f37a:	f7ff fa45 	bl	800e808 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f37e:	783b      	ldrb	r3, [r7, #0]
 800f380:	f003 0304 	and.w	r3, r3, #4
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b00      	cmp	r3, #0
 800f388:	d001      	beq.n	800f38e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f38a:	f7ff fef9 	bl	800f180 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f38e:	783b      	ldrb	r3, [r7, #0]
 800f390:	f003 0302 	and.w	r3, r3, #2
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f39a:	f7ff ffb7 	bl	800f30c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f39e:	783b      	ldrb	r3, [r7, #0]
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f3aa:	f7ff ffb7 	bl	800f31c <ProcessRadioRxTimeout>
        }
    }
}
 800f3ae:	bf00      	nop
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	2000c7d8 	.word	0x2000c7d8

0800f3bc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f3bc:	b480      	push	{r7}
 800f3be:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f4 <LoRaMacIsBusy+0x38>)
 800f3c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3c6:	2b01      	cmp	r3, #1
 800f3c8:	d101      	bne.n	800f3ce <LoRaMacIsBusy+0x12>
    {
        return false;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	e00c      	b.n	800f3e8 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f3ce:	4b09      	ldr	r3, [pc, #36]	@ (800f3f4 <LoRaMacIsBusy+0x38>)
 800f3d0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f3d8:	4b06      	ldr	r3, [pc, #24]	@ (800f3f4 <LoRaMacIsBusy+0x38>)
 800f3da:	f893 34ce 	ldrb.w	r3, [r3, #1230]	@ 0x4ce
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d101      	bne.n	800f3e6 <LoRaMacIsBusy+0x2a>
    {
        return false;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	e000      	b.n	800f3e8 <LoRaMacIsBusy+0x2c>
    }
    return true;
 800f3e6:	2301      	movs	r3, #1
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	2000ba68 	.word	0x2000ba68

0800f3f8 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800f3fc:	4b06      	ldr	r3, [pc, #24]	@ (800f418 <LoRaMacIsStopped+0x20>)
 800f3fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f402:	2b01      	cmp	r3, #1
 800f404:	d101      	bne.n	800f40a <LoRaMacIsStopped+0x12>
    {
        return true;
 800f406:	2301      	movs	r3, #1
 800f408:	e000      	b.n	800f40c <LoRaMacIsStopped+0x14>
    }
    return false;
 800f40a:	2300      	movs	r3, #0
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	2000ba68 	.word	0x2000ba68

0800f41c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f426:	4a05      	ldr	r2, [pc, #20]	@ (800f43c <LoRaMacEnableRequests+0x20>)
 800f428:	79fb      	ldrb	r3, [r7, #7]
 800f42a:	f882 34ce 	strb.w	r3, [r2, #1230]	@ 0x4ce
}
 800f42e:	bf00      	nop
 800f430:	370c      	adds	r7, #12
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	2000ba68 	.word	0x2000ba68

0800f440 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f446:	4b2c      	ldr	r3, [pc, #176]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f448:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f44c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f44e:	4b2a      	ldr	r3, [pc, #168]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f450:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f454:	2b00      	cmp	r3, #0
 800f456:	d14a      	bne.n	800f4ee <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f458:	4b27      	ldr	r3, [pc, #156]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f45a:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f45e:	f003 0301 	and.w	r3, r3, #1
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b00      	cmp	r3, #0
 800f466:	d006      	beq.n	800f476 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f468:	4a23      	ldr	r2, [pc, #140]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f46a:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f46e:	f36f 0300 	bfc	r3, #0, #1
 800f472:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f476:	4b20      	ldr	r3, [pc, #128]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f478:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f47c:	f003 0304 	and.w	r3, r3, #4
 800f480:	b2db      	uxtb	r3, r3
 800f482:	2b00      	cmp	r3, #0
 800f484:	d006      	beq.n	800f494 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f486:	4a1c      	ldr	r2, [pc, #112]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f488:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f48c:	f36f 0382 	bfc	r3, #2, #1
 800f490:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f494:	2001      	movs	r0, #1
 800f496:	f7ff ffc1 	bl	800f41c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f49a:	793b      	ldrb	r3, [r7, #4]
 800f49c:	f003 0301 	and.w	r3, r3, #1
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d005      	beq.n	800f4b2 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f4a6:	4b14      	ldr	r3, [pc, #80]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f4a8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	4813      	ldr	r0, [pc, #76]	@ (800f4fc <LoRaMacHandleRequestEvents+0xbc>)
 800f4b0:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f4b2:	793b      	ldrb	r3, [r7, #4]
 800f4b4:	f003 0304 	and.w	r3, r3, #4
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00e      	beq.n	800f4dc <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f4be:	4810      	ldr	r0, [pc, #64]	@ (800f500 <LoRaMacHandleRequestEvents+0xc0>)
 800f4c0:	f004 fc82 	bl	8013dc8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f4c4:	f004 fcd2 	bl	8013e6c <LoRaMacConfirmQueueGetCnt>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d006      	beq.n	800f4dc <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f4ce:	4a0a      	ldr	r2, [pc, #40]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f4d0:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f4d4:	f043 0304 	orr.w	r3, r3, #4
 800f4d8:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f4dc:	f003 ff7a 	bl	80133d4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f4e0:	4a05      	ldr	r2, [pc, #20]	@ (800f4f8 <LoRaMacHandleRequestEvents+0xb8>)
 800f4e2:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f4e6:	f36f 1304 	bfc	r3, #4, #1
 800f4ea:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
    }
}
 800f4ee:	bf00      	nop
 800f4f0:	3708      	adds	r7, #8
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
 800f4f6:	bf00      	nop
 800f4f8:	2000ba68 	.word	0x2000ba68
 800f4fc:	2000bed0 	.word	0x2000bed0
 800f500:	2000bee8 	.word	0x2000bee8

0800f504 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f508:	4b16      	ldr	r3, [pc, #88]	@ (800f564 <LoRaMacHandleIndicationEvents+0x60>)
 800f50a:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f50e:	f003 0308 	and.w	r3, r3, #8
 800f512:	b2db      	uxtb	r3, r3
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00d      	beq.n	800f534 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f518:	4a12      	ldr	r2, [pc, #72]	@ (800f564 <LoRaMacHandleIndicationEvents+0x60>)
 800f51a:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f51e:	f36f 03c3 	bfc	r3, #3, #1
 800f522:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f526:	4b0f      	ldr	r3, [pc, #60]	@ (800f564 <LoRaMacHandleIndicationEvents+0x60>)
 800f528:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	490e      	ldr	r1, [pc, #56]	@ (800f568 <LoRaMacHandleIndicationEvents+0x64>)
 800f530:	480e      	ldr	r0, [pc, #56]	@ (800f56c <LoRaMacHandleIndicationEvents+0x68>)
 800f532:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f534:	4b0b      	ldr	r3, [pc, #44]	@ (800f564 <LoRaMacHandleIndicationEvents+0x60>)
 800f536:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f53a:	f003 0302 	and.w	r3, r3, #2
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00d      	beq.n	800f560 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f544:	4a07      	ldr	r2, [pc, #28]	@ (800f564 <LoRaMacHandleIndicationEvents+0x60>)
 800f546:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f54a:	f36f 0341 	bfc	r3, #1, #1
 800f54e:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f552:	4b04      	ldr	r3, [pc, #16]	@ (800f564 <LoRaMacHandleIndicationEvents+0x60>)
 800f554:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	4903      	ldr	r1, [pc, #12]	@ (800f568 <LoRaMacHandleIndicationEvents+0x64>)
 800f55c:	4804      	ldr	r0, [pc, #16]	@ (800f570 <LoRaMacHandleIndicationEvents+0x6c>)
 800f55e:	4798      	blx	r3
    }
}
 800f560:	bf00      	nop
 800f562:	bd80      	pop	{r7, pc}
 800f564:	2000ba68 	.word	0x2000ba68
 800f568:	2000bf30 	.word	0x2000bf30
 800f56c:	2000bf10 	.word	0x2000bf10
 800f570:	2000beb0 	.word	0x2000beb0

0800f574 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f57a:	4b32      	ldr	r3, [pc, #200]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f57c:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	b2db      	uxtb	r3, r3
 800f586:	2b00      	cmp	r3, #0
 800f588:	d058      	beq.n	800f63c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800f58a:	2300      	movs	r3, #0
 800f58c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f58e:	2300      	movs	r3, #0
 800f590:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f592:	4b2c      	ldr	r3, [pc, #176]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f594:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d004      	beq.n	800f5a6 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f59c:	4b29      	ldr	r3, [pc, #164]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f59e:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f5a2:	2b03      	cmp	r3, #3
 800f5a4:	d104      	bne.n	800f5b0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f5a6:	f002 f875 	bl	8011694 <CheckRetransUnconfirmedUplink>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	71fb      	strb	r3, [r7, #7]
 800f5ae:	e020      	b.n	800f5f2 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f5b0:	4b24      	ldr	r3, [pc, #144]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f5b2:	f893 3468 	ldrb.w	r3, [r3, #1128]	@ 0x468
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d11b      	bne.n	800f5f2 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800f5ba:	4b22      	ldr	r3, [pc, #136]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f5bc:	f893 343b 	ldrb.w	r3, [r3, #1083]	@ 0x43b
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d014      	beq.n	800f5ee <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f5c4:	f002 f892 	bl	80116ec <CheckRetransConfirmedUplink>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f5cc:	4b1e      	ldr	r3, [pc, #120]	@ (800f648 <LoRaMacHandleMcpsRequest+0xd4>)
 800f5ce:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d10d      	bne.n	800f5f2 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800f5d6:	79fb      	ldrb	r3, [r7, #7]
 800f5d8:	f083 0301 	eor.w	r3, r3, #1
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d002      	beq.n	800f5e8 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800f5e2:	f002 f917 	bl	8011814 <AckTimeoutRetriesProcess>
 800f5e6:	e004      	b.n	800f5f2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800f5e8:	f002 f950 	bl	801188c <AckTimeoutRetriesFinalize>
 800f5ec:	e001      	b.n	800f5f2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f5f2:	79fb      	ldrb	r3, [r7, #7]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00d      	beq.n	800f614 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f5f8:	4814      	ldr	r0, [pc, #80]	@ (800f64c <LoRaMacHandleMcpsRequest+0xd8>)
 800f5fa:	f00b f945 	bl	801a888 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f5fe:	4b11      	ldr	r3, [pc, #68]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f600:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f604:	f023 0320 	bic.w	r3, r3, #32
 800f608:	4a0e      	ldr	r2, [pc, #56]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f60a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800f60e:	f002 f891 	bl	8011734 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f612:	e013      	b.n	800f63c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800f614:	79bb      	ldrb	r3, [r7, #6]
 800f616:	f083 0301 	eor.w	r3, r3, #1
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00d      	beq.n	800f63c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f620:	4a08      	ldr	r2, [pc, #32]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f622:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f626:	f36f 1304 	bfc	r3, #4, #1
 800f62a:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
            MacCtx.AckTimeoutRetry = false;
 800f62e:	4b05      	ldr	r3, [pc, #20]	@ (800f644 <LoRaMacHandleMcpsRequest+0xd0>)
 800f630:	2200      	movs	r2, #0
 800f632:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
            OnTxDelayedTimerEvent( NULL );
 800f636:	2000      	movs	r0, #0
 800f638:	f000 f994 	bl	800f964 <OnTxDelayedTimerEvent>
}
 800f63c:	bf00      	nop
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	2000ba68 	.word	0x2000ba68
 800f648:	2000bfc0 	.word	0x2000bfc0
 800f64c:	2000bdd8 	.word	0x2000bdd8

0800f650 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f654:	4b1b      	ldr	r3, [pc, #108]	@ (800f6c4 <LoRaMacHandleMlmeRequest+0x74>)
 800f656:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f65a:	f003 0304 	and.w	r3, r3, #4
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	2b00      	cmp	r3, #0
 800f662:	d02c      	beq.n	800f6be <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f664:	2001      	movs	r0, #1
 800f666:	f004 fb95 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 800f66a:	4603      	mov	r3, r0
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d012      	beq.n	800f696 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f670:	2001      	movs	r0, #1
 800f672:	f004 fb31 	bl	8013cd8 <LoRaMacConfirmQueueGetStatus>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d103      	bne.n	800f684 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f67c:	4b11      	ldr	r3, [pc, #68]	@ (800f6c4 <LoRaMacHandleMlmeRequest+0x74>)
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f684:	4b0f      	ldr	r3, [pc, #60]	@ (800f6c4 <LoRaMacHandleMlmeRequest+0x74>)
 800f686:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f68a:	f023 0302 	bic.w	r3, r3, #2
 800f68e:	4a0d      	ldr	r2, [pc, #52]	@ (800f6c4 <LoRaMacHandleMlmeRequest+0x74>)
 800f690:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f694:	e013      	b.n	800f6be <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f696:	2006      	movs	r0, #6
 800f698:	f004 fb7c 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d105      	bne.n	800f6ae <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800f6a2:	2007      	movs	r0, #7
 800f6a4:	f004 fb76 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 800f6a8:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d007      	beq.n	800f6be <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f6ae:	4b05      	ldr	r3, [pc, #20]	@ (800f6c4 <LoRaMacHandleMlmeRequest+0x74>)
 800f6b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f6b4:	f023 0302 	bic.w	r3, r3, #2
 800f6b8:	4a02      	ldr	r2, [pc, #8]	@ (800f6c4 <LoRaMacHandleMlmeRequest+0x74>)
 800f6ba:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f6be:	bf00      	nop
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	2000ba68 	.word	0x2000ba68

0800f6c8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f6cc:	200c      	movs	r0, #12
 800f6ce:	f004 fb61 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d019      	beq.n	800f70c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800f714 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6da:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f6de:	f003 0301 	and.w	r3, r3, #1
 800f6e2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d111      	bne.n	800f70c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f6e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f714 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6ea:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f6ee:	f003 0304 	and.w	r3, r3, #4
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d009      	beq.n	800f70c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f6f8:	4b06      	ldr	r3, [pc, #24]	@ (800f714 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f6fe:	f023 0302 	bic.w	r3, r3, #2
 800f702:	4a04      	ldr	r2, [pc, #16]	@ (800f714 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f704:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f708:	2301      	movs	r3, #1
 800f70a:	e000      	b.n	800f70e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f70c:	2300      	movs	r3, #0
}
 800f70e:	4618      	mov	r0, r3
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	2000ba68 	.word	0x2000ba68

0800f718 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f718:	b480      	push	{r7}
 800f71a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f71c:	4b0d      	ldr	r3, [pc, #52]	@ (800f754 <LoRaMacCheckForRxAbort+0x3c>)
 800f71e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00f      	beq.n	800f74a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f72a:	4b0a      	ldr	r3, [pc, #40]	@ (800f754 <LoRaMacCheckForRxAbort+0x3c>)
 800f72c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f734:	4a07      	ldr	r2, [pc, #28]	@ (800f754 <LoRaMacCheckForRxAbort+0x3c>)
 800f736:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f73a:	4b06      	ldr	r3, [pc, #24]	@ (800f754 <LoRaMacCheckForRxAbort+0x3c>)
 800f73c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f740:	f023 0302 	bic.w	r3, r3, #2
 800f744:	4a03      	ldr	r2, [pc, #12]	@ (800f754 <LoRaMacCheckForRxAbort+0x3c>)
 800f746:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f74a:	bf00      	nop
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr
 800f754:	2000ba68 	.word	0x2000ba68

0800f758 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f760:	2300      	movs	r3, #0
 800f762:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f764:	2300      	movs	r3, #0
 800f766:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f768:	4b51      	ldr	r3, [pc, #324]	@ (800f8b0 <LoRaMacHandleNvm+0x158>)
 800f76a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f040 8099 	bne.w	800f8a6 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2124      	movs	r1, #36	@ 0x24
 800f778:	4618      	mov	r0, r3
 800f77a:	f00a fc9d 	bl	801a0b8 <Crc32>
 800f77e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	429a      	cmp	r2, r3
 800f788:	d006      	beq.n	800f798 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f790:	89fb      	ldrh	r3, [r7, #14]
 800f792:	f043 0301 	orr.w	r3, r3, #1
 800f796:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	3328      	adds	r3, #40	@ 0x28
 800f79c:	212c      	movs	r1, #44	@ 0x2c
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f00a fc8a 	bl	801a0b8 <Crc32>
 800f7a4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d006      	beq.n	800f7be <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	651a      	str	r2, [r3, #80]	@ 0x50
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f7b6:	89fb      	ldrh	r3, [r7, #14]
 800f7b8:	f043 0302 	orr.w	r3, r3, #2
 800f7bc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	3358      	adds	r3, #88	@ 0x58
 800f7c2:	21fc      	movs	r1, #252	@ 0xfc
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f00a fc77 	bl	801a0b8 <Crc32>
 800f7ca:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800f7d2:	68ba      	ldr	r2, [r7, #8]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d007      	beq.n	800f7e8 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	68ba      	ldr	r2, [r7, #8]
 800f7dc:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f7e0:	89fb      	ldrh	r3, [r7, #14]
 800f7e2:	f043 0304 	orr.w	r3, r3, #4
 800f7e6:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800f7ee:	21d4      	movs	r1, #212	@ 0xd4
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f00a fc61 	bl	801a0b8 <Crc32>
 800f7f6:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	429a      	cmp	r2, r3
 800f802:	d007      	beq.n	800f814 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f80c:	89fb      	ldrh	r3, [r7, #14]
 800f80e:	f043 0308 	orr.w	r3, r3, #8
 800f812:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800f81a:	f44f 7192 	mov.w	r1, #292	@ 0x124
 800f81e:	4618      	mov	r0, r3
 800f820:	f00a fc4a 	bl	801a0b8 <Crc32>
 800f824:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d007      	beq.n	800f842 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	68ba      	ldr	r2, [r7, #8]
 800f836:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f83a:	89fb      	ldrh	r3, [r7, #14]
 800f83c:	f043 0310 	orr.w	r3, r3, #16
 800f840:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f848:	f44f 6194 	mov.w	r1, #1184	@ 0x4a0
 800f84c:	4618      	mov	r0, r3
 800f84e:	f00a fc33 	bl	801a0b8 <Crc32>
 800f852:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	@ 0x7f8
 800f85a:	68ba      	ldr	r2, [r7, #8]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d007      	beq.n	800f870 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	f8c3 27f8 	str.w	r2, [r3, #2040]	@ 0x7f8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f868:	89fb      	ldrh	r3, [r7, #14]
 800f86a:	f043 0320 	orr.w	r3, r3, #32
 800f86e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f203 73fc 	addw	r3, r3, #2044	@ 0x7fc
 800f876:	2114      	movs	r1, #20
 800f878:	4618      	mov	r0, r3
 800f87a:	f00a fc1d 	bl	801a0b8 <Crc32>
 800f87e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 3810 	ldr.w	r3, [r3, #2064]	@ 0x810
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d007      	beq.n	800f89c <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f894:	89fb      	ldrh	r3, [r7, #14]
 800f896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f89a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f89c:	89fb      	ldrh	r3, [r7, #14]
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f001 ff9a 	bl	80117d8 <CallNvmDataChangeCallback>
 800f8a4:	e000      	b.n	800f8a8 <LoRaMacHandleNvm+0x150>
        return;
 800f8a6:	bf00      	nop
}
 800f8a8:	3710      	adds	r7, #16
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}
 800f8ae:	bf00      	nop
 800f8b0:	2000ba68 	.word	0x2000ba68

0800f8b4 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b082      	sub	sp, #8
 800f8b8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f8be:	f7ff fd35 	bl	800f32c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f8c2:	f003 fdfc 	bl	80134be <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f8c6:	4b25      	ldr	r3, [pc, #148]	@ (800f95c <LoRaMacProcess+0xa8>)
 800f8c8:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f8cc:	f003 0310 	and.w	r3, r3, #16
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d023      	beq.n	800f91e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	f7ff fda0 	bl	800f41c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f8dc:	f7ff ff1c 	bl	800f718 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f8e0:	f002 f808 	bl	80118f4 <IsRequestPending>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d006      	beq.n	800f8f8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f8ea:	f7ff feed 	bl	800f6c8 <LoRaMacCheckForBeaconAcquisition>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	79fb      	ldrb	r3, [r7, #7]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f8f8:	79fb      	ldrb	r3, [r7, #7]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d103      	bne.n	800f906 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f8fe:	f7ff fea7 	bl	800f650 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f902:	f7ff fe37 	bl	800f574 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f906:	f7ff fd9b 	bl	800f440 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f90a:	2001      	movs	r0, #1
 800f90c:	f7ff fd86 	bl	800f41c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f910:	4a12      	ldr	r2, [pc, #72]	@ (800f95c <LoRaMacProcess+0xa8>)
 800f912:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f916:	f043 0320 	orr.w	r3, r3, #32
 800f91a:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
    }
    LoRaMacHandleIndicationEvents( );
 800f91e:	f7ff fdf1 	bl	800f504 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f922:	4b0e      	ldr	r3, [pc, #56]	@ (800f95c <LoRaMacProcess+0xa8>)
 800f924:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800f928:	2b02      	cmp	r3, #2
 800f92a:	d101      	bne.n	800f930 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800f92c:	f001 fbf2 	bl	8011114 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f930:	4b0a      	ldr	r3, [pc, #40]	@ (800f95c <LoRaMacProcess+0xa8>)
 800f932:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 800f936:	f003 0320 	and.w	r3, r3, #32
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d009      	beq.n	800f954 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f940:	4a06      	ldr	r2, [pc, #24]	@ (800f95c <LoRaMacProcess+0xa8>)
 800f942:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800f946:	f36f 1345 	bfc	r3, #5, #1
 800f94a:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
        LoRaMacHandleNvm( &Nvm );
 800f94e:	4804      	ldr	r0, [pc, #16]	@ (800f960 <LoRaMacProcess+0xac>)
 800f950:	f7ff ff02 	bl	800f758 <LoRaMacHandleNvm>
    }
}
 800f954:	bf00      	nop
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	2000ba68 	.word	0x2000ba68
 800f960:	2000bfc0 	.word	0x2000bfc0

0800f964 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f96c:	4817      	ldr	r0, [pc, #92]	@ (800f9cc <OnTxDelayedTimerEvent+0x68>)
 800f96e:	f00a ff8b 	bl	801a888 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f972:	4b17      	ldr	r3, [pc, #92]	@ (800f9d0 <OnTxDelayedTimerEvent+0x6c>)
 800f974:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f978:	f023 0320 	bic.w	r3, r3, #32
 800f97c:	4a14      	ldr	r2, [pc, #80]	@ (800f9d0 <OnTxDelayedTimerEvent+0x6c>)
 800f97e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f982:	2001      	movs	r0, #1
 800f984:	f001 f900 	bl	8010b88 <ScheduleTx>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d018      	beq.n	800f9c0 <OnTxDelayedTimerEvent+0x5c>
 800f98e:	2b0b      	cmp	r3, #11
 800f990:	d016      	beq.n	800f9c0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f992:	4b10      	ldr	r3, [pc, #64]	@ (800f9d4 <OnTxDelayedTimerEvent+0x70>)
 800f994:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 800f998:	b2da      	uxtb	r2, r3
 800f99a:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d0 <OnTxDelayedTimerEvent+0x6c>)
 800f99c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800f9a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f9d0 <OnTxDelayedTimerEvent+0x6c>)
 800f9a2:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
 800f9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f9d0 <OnTxDelayedTimerEvent+0x6c>)
 800f9a8:	f883 246d 	strb.w	r2, [r3, #1133]	@ 0x46d
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f9ac:	4b08      	ldr	r3, [pc, #32]	@ (800f9d0 <OnTxDelayedTimerEvent+0x6c>)
 800f9ae:	2209      	movs	r2, #9
 800f9b0:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f9b4:	2009      	movs	r0, #9
 800f9b6:	f004 f9b9 	bl	8013d2c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f9ba:	f001 febb 	bl	8011734 <StopRetransmission>
            break;
 800f9be:	e000      	b.n	800f9c2 <OnTxDelayedTimerEvent+0x5e>
            break;
 800f9c0:	bf00      	nop
        }
    }
}
 800f9c2:	bf00      	nop
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	2000bdd8 	.word	0x2000bdd8
 800f9d0:	2000ba68 	.word	0x2000ba68
 800f9d4:	2000bfc0 	.word	0x2000bfc0

0800f9d8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f9e0:	4b14      	ldr	r3, [pc, #80]	@ (800fa34 <OnRxWindow1TimerEvent+0x5c>)
 800f9e2:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 800f9e6:	4b13      	ldr	r3, [pc, #76]	@ (800fa34 <OnRxWindow1TimerEvent+0x5c>)
 800f9e8:	f883 23d8 	strb.w	r2, [r3, #984]	@ 0x3d8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f9ec:	4b12      	ldr	r3, [pc, #72]	@ (800fa38 <OnRxWindow1TimerEvent+0x60>)
 800f9ee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f9f2:	b25a      	sxtb	r2, r3
 800f9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800fa34 <OnRxWindow1TimerEvent+0x5c>)
 800f9f6:	f883 23db 	strb.w	r2, [r3, #987]	@ 0x3db
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800fa38 <OnRxWindow1TimerEvent+0x60>)
 800f9fc:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 800fa00:	4b0c      	ldr	r3, [pc, #48]	@ (800fa34 <OnRxWindow1TimerEvent+0x5c>)
 800fa02:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fa06:	4b0c      	ldr	r3, [pc, #48]	@ (800fa38 <OnRxWindow1TimerEvent+0x60>)
 800fa08:	f893 209c 	ldrb.w	r2, [r3, #156]	@ 0x9c
 800fa0c:	4b09      	ldr	r3, [pc, #36]	@ (800fa34 <OnRxWindow1TimerEvent+0x5c>)
 800fa0e:	f883 23e9 	strb.w	r2, [r3, #1001]	@ 0x3e9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fa12:	4b08      	ldr	r3, [pc, #32]	@ (800fa34 <OnRxWindow1TimerEvent+0x5c>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	f883 23ea 	strb.w	r2, [r3, #1002]	@ 0x3ea
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fa1a:	4b06      	ldr	r3, [pc, #24]	@ (800fa34 <OnRxWindow1TimerEvent+0x5c>)
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	f883 23eb 	strb.w	r2, [r3, #1003]	@ 0x3eb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fa22:	4906      	ldr	r1, [pc, #24]	@ (800fa3c <OnRxWindow1TimerEvent+0x64>)
 800fa24:	4806      	ldr	r0, [pc, #24]	@ (800fa40 <OnRxWindow1TimerEvent+0x68>)
 800fa26:	f001 fb41 	bl	80110ac <RxWindowSetup>
}
 800fa2a:	bf00      	nop
 800fa2c:	3708      	adds	r7, #8
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	2000ba68 	.word	0x2000ba68
 800fa38:	2000bfc0 	.word	0x2000bfc0
 800fa3c:	2000be40 	.word	0x2000be40
 800fa40:	2000bdf8 	.word	0x2000bdf8

0800fa44 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fa4c:	4b16      	ldr	r3, [pc, #88]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa4e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d023      	beq.n	800fa9e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fa56:	4b14      	ldr	r3, [pc, #80]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa58:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 800fa5c:	4b12      	ldr	r3, [pc, #72]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa5e:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fa62:	4b12      	ldr	r3, [pc, #72]	@ (800faac <OnRxWindow2TimerEvent+0x68>)
 800fa64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa66:	4a10      	ldr	r2, [pc, #64]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa68:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa6c:	4b0f      	ldr	r3, [pc, #60]	@ (800faac <OnRxWindow2TimerEvent+0x68>)
 800fa6e:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 800fa72:	4b0d      	ldr	r3, [pc, #52]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa74:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fa78:	4b0c      	ldr	r3, [pc, #48]	@ (800faac <OnRxWindow2TimerEvent+0x68>)
 800fa7a:	f893 209c 	ldrb.w	r2, [r3, #156]	@ 0x9c
 800fa7e:	4b0a      	ldr	r3, [pc, #40]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa80:	f883 23fd 	strb.w	r2, [r3, #1021]	@ 0x3fd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fa84:	4b08      	ldr	r3, [pc, #32]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa86:	2200      	movs	r2, #0
 800fa88:	f883 23fe 	strb.w	r2, [r3, #1022]	@ 0x3fe
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fa8c:	4b06      	ldr	r3, [pc, #24]	@ (800faa8 <OnRxWindow2TimerEvent+0x64>)
 800fa8e:	2201      	movs	r2, #1
 800fa90:	f883 23ff 	strb.w	r2, [r3, #1023]	@ 0x3ff
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fa94:	4906      	ldr	r1, [pc, #24]	@ (800fab0 <OnRxWindow2TimerEvent+0x6c>)
 800fa96:	4807      	ldr	r0, [pc, #28]	@ (800fab4 <OnRxWindow2TimerEvent+0x70>)
 800fa98:	f001 fb08 	bl	80110ac <RxWindowSetup>
 800fa9c:	e000      	b.n	800faa0 <OnRxWindow2TimerEvent+0x5c>
        return;
 800fa9e:	bf00      	nop
}
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	2000ba68 	.word	0x2000ba68
 800faac:	2000bfc0 	.word	0x2000bfc0
 800fab0:	2000be54 	.word	0x2000be54
 800fab4:	2000be18 	.word	0x2000be18

0800fab8 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800fac0:	480e      	ldr	r0, [pc, #56]	@ (800fafc <OnAckTimeoutTimerEvent+0x44>)
 800fac2:	f00a fee1 	bl	801a888 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fac6:	4b0e      	ldr	r3, [pc, #56]	@ (800fb00 <OnAckTimeoutTimerEvent+0x48>)
 800fac8:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 800facc:	2b00      	cmp	r3, #0
 800face:	d003      	beq.n	800fad8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800fad0:	4b0b      	ldr	r3, [pc, #44]	@ (800fb00 <OnAckTimeoutTimerEvent+0x48>)
 800fad2:	2201      	movs	r2, #1
 800fad4:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800fad8:	4b0a      	ldr	r3, [pc, #40]	@ (800fb04 <OnAckTimeoutTimerEvent+0x4c>)
 800fada:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800fade:	2b02      	cmp	r3, #2
 800fae0:	d106      	bne.n	800faf0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800fae2:	4a07      	ldr	r2, [pc, #28]	@ (800fb00 <OnAckTimeoutTimerEvent+0x48>)
 800fae4:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 800fae8:	f043 0310 	orr.w	r3, r3, #16
 800faec:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
    }
    OnMacProcessNotify( );
 800faf0:	f001 fe5c 	bl	80117ac <OnMacProcessNotify>
}
 800faf4:	bf00      	nop
 800faf6:	3708      	adds	r7, #8
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	2000be80 	.word	0x2000be80
 800fb00:	2000ba68 	.word	0x2000ba68
 800fb04:	2000bfc0 	.word	0x2000bfc0

0800fb08 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	60ba      	str	r2, [r7, #8]
 800fb10:	607b      	str	r3, [r7, #4]
 800fb12:	4603      	mov	r3, r0
 800fb14:	73fb      	strb	r3, [r7, #15]
 800fb16:	460b      	mov	r3, r1
 800fb18:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d005      	beq.n	800fb2c <GetFCntDown+0x24>
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d002      	beq.n	800fb2c <GetFCntDown+0x24>
 800fb26:	6a3b      	ldr	r3, [r7, #32]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d101      	bne.n	800fb30 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fb2c:	230a      	movs	r3, #10
 800fb2e:	e029      	b.n	800fb84 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fb30:	7bfb      	ldrb	r3, [r7, #15]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d016      	beq.n	800fb64 <GetFCntDown+0x5c>
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d118      	bne.n	800fb6c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fb3a:	79bb      	ldrb	r3, [r7, #6]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d10d      	bne.n	800fb5c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fb40:	7bbb      	ldrb	r3, [r7, #14]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <GetFCntDown+0x44>
 800fb46:	7bbb      	ldrb	r3, [r7, #14]
 800fb48:	2b03      	cmp	r3, #3
 800fb4a:	d103      	bne.n	800fb54 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fb52:	e00d      	b.n	800fb70 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	2201      	movs	r2, #1
 800fb58:	701a      	strb	r2, [r3, #0]
            break;
 800fb5a:	e009      	b.n	800fb70 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	2203      	movs	r2, #3
 800fb60:	701a      	strb	r2, [r3, #0]
            break;
 800fb62:	e005      	b.n	800fb70 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	2204      	movs	r2, #4
 800fb68:	701a      	strb	r2, [r3, #0]
            break;
 800fb6a:	e001      	b.n	800fb70 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fb6c:	2305      	movs	r3, #5
 800fb6e:	e009      	b.n	800fb84 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	7818      	ldrb	r0, [r3, #0]
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	89db      	ldrh	r3, [r3, #14]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	8b39      	ldrh	r1, [r7, #24]
 800fb7c:	6a3b      	ldr	r3, [r7, #32]
 800fb7e:	f004 fd1f 	bl	80145c0 <LoRaMacCryptoGetFCntDown>
 800fb82:	4603      	mov	r3, r0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fb8c:	b5b0      	push	{r4, r5, r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	4603      	mov	r3, r0
 800fb94:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb96:	2303      	movs	r3, #3
 800fb98:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fb9a:	4b6e      	ldr	r3, [pc, #440]	@ (800fd54 <SwitchClass+0x1c8>)
 800fb9c:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	f000 80bb 	beq.w	800fd1c <SwitchClass+0x190>
 800fba6:	2b02      	cmp	r3, #2
 800fba8:	f300 80ce 	bgt.w	800fd48 <SwitchClass+0x1bc>
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d003      	beq.n	800fbb8 <SwitchClass+0x2c>
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	f000 80a5 	beq.w	800fd00 <SwitchClass+0x174>
 800fbb6:	e0c7      	b.n	800fd48 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d109      	bne.n	800fbd2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fbbe:	4b65      	ldr	r3, [pc, #404]	@ (800fd54 <SwitchClass+0x1c8>)
 800fbc0:	4a64      	ldr	r2, [pc, #400]	@ (800fd54 <SwitchClass+0x1c8>)
 800fbc2:	3384      	adds	r3, #132	@ 0x84
 800fbc4:	327c      	adds	r2, #124	@ 0x7c
 800fbc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbca:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800fbd2:	79fb      	ldrb	r3, [r7, #7]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d10c      	bne.n	800fbf2 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fbd8:	79fb      	ldrb	r3, [r7, #7]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f003 fc01 	bl	80133e2 <LoRaMacClassBSwitchClass>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fbe4:	7bfb      	ldrb	r3, [r7, #15]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d103      	bne.n	800fbf2 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fbea:	4a5a      	ldr	r2, [pc, #360]	@ (800fd54 <SwitchClass+0x1c8>)
 800fbec:	79fb      	ldrb	r3, [r7, #7]
 800fbee:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
                }
            }

            if( deviceClass == CLASS_C )
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	2b02      	cmp	r3, #2
 800fbf6:	f040 80a2 	bne.w	800fd3e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fbfa:	4a56      	ldr	r2, [pc, #344]	@ (800fd54 <SwitchClass+0x1c8>)
 800fbfc:	79fb      	ldrb	r3, [r7, #7]
 800fbfe:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fc02:	4a55      	ldr	r2, [pc, #340]	@ (800fd58 <SwitchClass+0x1cc>)
 800fc04:	4b54      	ldr	r3, [pc, #336]	@ (800fd58 <SwitchClass+0x1cc>)
 800fc06:	f502 6480 	add.w	r4, r2, #1024	@ 0x400
 800fc0a:	f503 757b 	add.w	r5, r3, #1004	@ 0x3ec
 800fc0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc12:	682b      	ldr	r3, [r5, #0]
 800fc14:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fc16:	4b50      	ldr	r3, [pc, #320]	@ (800fd58 <SwitchClass+0x1cc>)
 800fc18:	2202      	movs	r2, #2
 800fc1a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fc1e:	2300      	movs	r3, #0
 800fc20:	73bb      	strb	r3, [r7, #14]
 800fc22:	e05d      	b.n	800fce0 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fc24:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc28:	494a      	ldr	r1, [pc, #296]	@ (800fd54 <SwitchClass+0x1c8>)
 800fc2a:	4613      	mov	r3, r2
 800fc2c:	005b      	lsls	r3, r3, #1
 800fc2e:	4413      	add	r3, r2
 800fc30:	011b      	lsls	r3, r3, #4
 800fc32:	440b      	add	r3, r1
 800fc34:	33f9      	adds	r3, #249	@ 0xf9
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d04b      	beq.n	800fcd4 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800fc3c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc40:	4944      	ldr	r1, [pc, #272]	@ (800fd54 <SwitchClass+0x1c8>)
 800fc42:	4613      	mov	r3, r2
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	4413      	add	r3, r2
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	440b      	add	r3, r1
 800fc4c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800fc50:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d13e      	bne.n	800fcd4 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800fc56:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc5a:	493e      	ldr	r1, [pc, #248]	@ (800fd54 <SwitchClass+0x1c8>)
 800fc5c:	4613      	mov	r3, r2
 800fc5e:	005b      	lsls	r3, r3, #1
 800fc60:	4413      	add	r3, r2
 800fc62:	011b      	lsls	r3, r3, #4
 800fc64:	440b      	add	r3, r1
 800fc66:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a39      	ldr	r2, [pc, #228]	@ (800fd54 <SwitchClass+0x1c8>)
 800fc6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800fc72:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800fc76:	4937      	ldr	r1, [pc, #220]	@ (800fd54 <SwitchClass+0x1c8>)
 800fc78:	4613      	mov	r3, r2
 800fc7a:	005b      	lsls	r3, r3, #1
 800fc7c:	4413      	add	r3, r2
 800fc7e:	011b      	lsls	r3, r3, #4
 800fc80:	440b      	add	r3, r1
 800fc82:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800fc86:	f993 3000 	ldrsb.w	r3, [r3]
 800fc8a:	b2da      	uxtb	r2, r3
 800fc8c:	4b31      	ldr	r3, [pc, #196]	@ (800fd54 <SwitchClass+0x1c8>)
 800fc8e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fc92:	4b31      	ldr	r3, [pc, #196]	@ (800fd58 <SwitchClass+0x1cc>)
 800fc94:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 800fc98:	4b2f      	ldr	r3, [pc, #188]	@ (800fd58 <SwitchClass+0x1cc>)
 800fc9a:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fc9e:	4b2d      	ldr	r3, [pc, #180]	@ (800fd54 <SwitchClass+0x1c8>)
 800fca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fca4:	4a2c      	ldr	r2, [pc, #176]	@ (800fd58 <SwitchClass+0x1cc>)
 800fca6:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fcaa:	4b2a      	ldr	r3, [pc, #168]	@ (800fd54 <SwitchClass+0x1c8>)
 800fcac:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 800fcb0:	4b29      	ldr	r3, [pc, #164]	@ (800fd58 <SwitchClass+0x1cc>)
 800fcb2:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fcb6:	4b27      	ldr	r3, [pc, #156]	@ (800fd54 <SwitchClass+0x1c8>)
 800fcb8:	f893 209c 	ldrb.w	r2, [r3, #156]	@ 0x9c
 800fcbc:	4b26      	ldr	r3, [pc, #152]	@ (800fd58 <SwitchClass+0x1cc>)
 800fcbe:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fcc2:	4b25      	ldr	r3, [pc, #148]	@ (800fd58 <SwitchClass+0x1cc>)
 800fcc4:	2203      	movs	r2, #3
 800fcc6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fcca:	4b23      	ldr	r3, [pc, #140]	@ (800fd58 <SwitchClass+0x1cc>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
                        break;
 800fcd2:	e009      	b.n	800fce8 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fcd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	3301      	adds	r3, #1
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	73bb      	strb	r3, [r7, #14]
 800fce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	dd9d      	ble.n	800fc24 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fce8:	4b1b      	ldr	r3, [pc, #108]	@ (800fd58 <SwitchClass+0x1cc>)
 800fcea:	2200      	movs	r2, #0
 800fcec:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fcf0:	4b1a      	ldr	r3, [pc, #104]	@ (800fd5c <SwitchClass+0x1d0>)
 800fcf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcf4:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fcf6:	f001 fa0d 	bl	8011114 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fcfe:	e01e      	b.n	800fd3e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fd00:	79fb      	ldrb	r3, [r7, #7]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f003 fb6d 	bl	80133e2 <LoRaMacClassBSwitchClass>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fd0c:	7bfb      	ldrb	r3, [r7, #15]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d117      	bne.n	800fd42 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd12:	4a10      	ldr	r2, [pc, #64]	@ (800fd54 <SwitchClass+0x1c8>)
 800fd14:	79fb      	ldrb	r3, [r7, #7]
 800fd16:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            }
            break;
 800fd1a:	e012      	b.n	800fd42 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d111      	bne.n	800fd46 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800fd22:	4b0d      	ldr	r3, [pc, #52]	@ (800fd58 <SwitchClass+0x1cc>)
 800fd24:	2206      	movs	r2, #6
 800fd26:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd2a:	4a0a      	ldr	r2, [pc, #40]	@ (800fd54 <SwitchClass+0x1c8>)
 800fd2c:	79fb      	ldrb	r3, [r7, #7]
 800fd2e:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fd32:	4b0a      	ldr	r3, [pc, #40]	@ (800fd5c <SwitchClass+0x1d0>)
 800fd34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd36:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800fd3c:	e003      	b.n	800fd46 <SwitchClass+0x1ba>
            break;
 800fd3e:	bf00      	nop
 800fd40:	e002      	b.n	800fd48 <SwitchClass+0x1bc>
            break;
 800fd42:	bf00      	nop
 800fd44:	e000      	b.n	800fd48 <SwitchClass+0x1bc>
            break;
 800fd46:	bf00      	nop
        }
    }

    return status;
 800fd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3710      	adds	r7, #16
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bdb0      	pop	{r4, r5, r7, pc}
 800fd52:	bf00      	nop
 800fd54:	2000bfc0 	.word	0x2000bfc0
 800fd58:	2000ba68 	.word	0x2000ba68
 800fd5c:	08022c78 	.word	0x08022c78

0800fd60 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b086      	sub	sp, #24
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	4603      	mov	r3, r0
 800fd68:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fd6a:	4b0f      	ldr	r3, [pc, #60]	@ (800fda8 <GetMaxAppPayloadWithoutFOptsLength+0x48>)
 800fd6c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800fd70:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fd72:	79fb      	ldrb	r3, [r7, #7]
 800fd74:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fd76:	230d      	movs	r3, #13
 800fd78:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fd7a:	4b0b      	ldr	r3, [pc, #44]	@ (800fda8 <GetMaxAppPayloadWithoutFOptsLength+0x48>)
 800fd7c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fd84:	230e      	movs	r3, #14
 800fd86:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fd88:	4b07      	ldr	r3, [pc, #28]	@ (800fda8 <GetMaxAppPayloadWithoutFOptsLength+0x48>)
 800fd8a:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 800fd8e:	f107 0308 	add.w	r3, r7, #8
 800fd92:	f107 0210 	add.w	r2, r7, #16
 800fd96:	4618      	mov	r0, r3
 800fd98:	f005 faaa 	bl	80152f0 <RegionGetPhyParam>

    return phyParam.Value;
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	b2db      	uxtb	r3, r3
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3718      	adds	r7, #24
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	2000bfc0 	.word	0x2000bfc0

0800fdac <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	71fb      	strb	r3, [r7, #7]
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	71bb      	strb	r3, [r7, #6]
 800fdba:	4613      	mov	r3, r2
 800fdbc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fdc6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7ff ffc8 	bl	800fd60 <GetMaxAppPayloadWithoutFOptsLength>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	797b      	ldrb	r3, [r7, #5]
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	4413      	add	r3, r2
 800fdde:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fde0:	89ba      	ldrh	r2, [r7, #12]
 800fde2:	89fb      	ldrh	r3, [r7, #14]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d804      	bhi.n	800fdf2 <ValidatePayloadLength+0x46>
 800fde8:	89bb      	ldrh	r3, [r7, #12]
 800fdea:	2bff      	cmp	r3, #255	@ 0xff
 800fdec:	d801      	bhi.n	800fdf2 <ValidatePayloadLength+0x46>
    {
        return true;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e000      	b.n	800fdf4 <ValidatePayloadLength+0x48>
    }
    return false;
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fdfc:	b590      	push	{r4, r7, lr}
 800fdfe:	b0a7      	sub	sp, #156	@ 0x9c
 800fe00:	af02      	add	r7, sp, #8
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	4608      	mov	r0, r1
 800fe06:	4611      	mov	r1, r2
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	70fb      	strb	r3, [r7, #3]
 800fe0e:	460b      	mov	r3, r1
 800fe10:	70bb      	strb	r3, [r7, #2]
 800fe12:	4613      	mov	r3, r2
 800fe14:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    bool adrBlockFound = false;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fe22:	2300      	movs	r3, #0
 800fe24:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800fe28:	f000 bc86 	b.w	8010738 <ProcessMacCommands+0x93c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fe2c:	78fb      	ldrb	r3, [r7, #3]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	4413      	add	r3, r2
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	4618      	mov	r0, r3
 800fe36:	f003 fdd1 	bl	80139dc <LoRaMacCommandsGetCmdSize>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	78fb      	ldrb	r3, [r7, #3]
 800fe40:	441a      	add	r2, r3
 800fe42:	78bb      	ldrb	r3, [r7, #2]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	f300 847d 	bgt.w	8010744 <ProcessMacCommands+0x948>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fe4a:	78fb      	ldrb	r3, [r7, #3]
 800fe4c:	1c5a      	adds	r2, r3, #1
 800fe4e:	70fa      	strb	r2, [r7, #3]
 800fe50:	461a      	mov	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4413      	add	r3, r2
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	3b02      	subs	r3, #2
 800fe5a:	2b11      	cmp	r3, #17
 800fe5c:	f200 8474 	bhi.w	8010748 <ProcessMacCommands+0x94c>
 800fe60:	a201      	add	r2, pc, #4	@ (adr r2, 800fe68 <ProcessMacCommands+0x6c>)
 800fe62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe66:	bf00      	nop
 800fe68:	0800feb1 	.word	0x0800feb1
 800fe6c:	0800fef3 	.word	0x0800fef3
 800fe70:	0801000f 	.word	0x0801000f
 800fe74:	0801004d 	.word	0x0801004d
 800fe78:	08010139 	.word	0x08010139
 800fe7c:	08010195 	.word	0x08010195
 800fe80:	08010251 	.word	0x08010251
 800fe84:	080102a7 	.word	0x080102a7
 800fe88:	0801038b 	.word	0x0801038b
 800fe8c:	08010749 	.word	0x08010749
 800fe90:	08010749 	.word	0x08010749
 800fe94:	08010431 	.word	0x08010431
 800fe98:	08010749 	.word	0x08010749
 800fe9c:	08010749 	.word	0x08010749
 800fea0:	08010547 	.word	0x08010547
 800fea4:	0801057b 	.word	0x0801057b
 800fea8:	0801061d 	.word	0x0801061d
 800feac:	08010695 	.word	0x08010695
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800feb0:	2005      	movs	r0, #5
 800feb2:	f003 ff6f 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 842e 	beq.w	801071a <ProcessMacCommands+0x91e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800febe:	2105      	movs	r1, #5
 800fec0:	2000      	movs	r0, #0
 800fec2:	f003 fedb 	bl	8013c7c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800fec6:	78fb      	ldrb	r3, [r7, #3]
 800fec8:	1c5a      	adds	r2, r3, #1
 800feca:	70fa      	strb	r2, [r7, #3]
 800fecc:	461a      	mov	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4413      	add	r3, r2
 800fed2:	781a      	ldrb	r2, [r3, #0]
 800fed4:	4bac      	ldr	r3, [pc, #688]	@ (8010188 <ProcessMacCommands+0x38c>)
 800fed6:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800feda:	78fb      	ldrb	r3, [r7, #3]
 800fedc:	1c5a      	adds	r2, r3, #1
 800fede:	70fa      	strb	r2, [r7, #3]
 800fee0:	461a      	mov	r2, r3
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4413      	add	r3, r2
 800fee6:	781a      	ldrb	r2, [r3, #0]
 800fee8:	4ba7      	ldr	r3, [pc, #668]	@ (8010188 <ProcessMacCommands+0x38c>)
 800feea:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
                }
                break;
 800feee:	f000 bc14 	b.w	801071a <ProcessMacCommands+0x91e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800fef2:	2300      	movs	r3, #0
 800fef4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                int8_t linkAdrTxPower = TX_POWER_0;
 800fef8:	2300      	movs	r3, #0
 800fefa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
                uint8_t linkAdrNbRep = 0;
 800fefe:	2300      	movs	r3, #0
 800ff00:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
                uint8_t linkAdrNbBytesParsed = 0;
 800ff04:	2300      	movs	r3, #0
 800ff06:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800ff0a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ff0e:	f083 0301 	eor.w	r3, r3, #1
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f000 8402 	beq.w	801071e <ProcessMacCommands+0x922>
                {
                    adrBlockFound = true;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800ff20:	78fb      	ldrb	r3, [r7, #3]
 800ff22:	3b01      	subs	r3, #1
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	4413      	add	r3, r2
 800ff28:	667b      	str	r3, [r7, #100]	@ 0x64
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ff2a:	78ba      	ldrb	r2, [r7, #2]
 800ff2c:	78fb      	ldrb	r3, [r7, #3]
 800ff2e:	1ad3      	subs	r3, r2, r3
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	3301      	adds	r3, #1
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ff3a:	4b94      	ldr	r3, [pc, #592]	@ (801018c <ProcessMacCommands+0x390>)
 800ff3c:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800ff40:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ff44:	4b91      	ldr	r3, [pc, #580]	@ (801018c <ProcessMacCommands+0x390>)
 800ff46:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ff4a:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ff4e:	4b8f      	ldr	r3, [pc, #572]	@ (801018c <ProcessMacCommands+0x390>)
 800ff50:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 800ff54:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ff58:	4b8c      	ldr	r3, [pc, #560]	@ (801018c <ProcessMacCommands+0x390>)
 800ff5a:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
 800ff5e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ff62:	4b8a      	ldr	r3, [pc, #552]	@ (801018c <ProcessMacCommands+0x390>)
 800ff64:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800ff68:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ff6c:	4b87      	ldr	r3, [pc, #540]	@ (801018c <ProcessMacCommands+0x390>)
 800ff6e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800ff72:	663b      	str	r3, [r7, #96]	@ 0x60

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ff74:	4b85      	ldr	r3, [pc, #532]	@ (801018c <ProcessMacCommands+0x390>)
 800ff76:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
 800ff7a:	f107 045e 	add.w	r4, r7, #94	@ 0x5e
 800ff7e:	f107 025f 	add.w	r2, r7, #95	@ 0x5f
 800ff82:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800ff86:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800ff8a:	9301      	str	r3, [sp, #4]
 800ff8c:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	4623      	mov	r3, r4
 800ff94:	f005 fa72 	bl	801547c <RegionLinkAdrReq>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ff9e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ffa2:	f003 0307 	and.w	r3, r3, #7
 800ffa6:	2b07      	cmp	r3, #7
 800ffa8:	d10e      	bne.n	800ffc8 <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ffaa:	f997 205f 	ldrsb.w	r2, [r7, #95]	@ 0x5f
 800ffae:	4b77      	ldr	r3, [pc, #476]	@ (801018c <ProcessMacCommands+0x390>)
 800ffb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ffb4:	f997 205e 	ldrsb.w	r2, [r7, #94]	@ 0x5e
 800ffb8:	4b74      	ldr	r3, [pc, #464]	@ (801018c <ProcessMacCommands+0x390>)
 800ffba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ffbe:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800ffc2:	4b72      	ldr	r3, [pc, #456]	@ (801018c <ProcessMacCommands+0x390>)
 800ffc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ffc8:	2300      	movs	r3, #0
 800ffca:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800ffce:	e00b      	b.n	800ffe8 <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ffd0:	f107 0373 	add.w	r3, r7, #115	@ 0x73
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	2003      	movs	r0, #3
 800ffda:	f003 fb9d 	bl	8013718 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ffde:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800ffe8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800ffec:	4a68      	ldr	r2, [pc, #416]	@ (8010190 <ProcessMacCommands+0x394>)
 800ffee:	fba2 2303 	umull	r2, r3, r2, r3
 800fff2:	089b      	lsrs	r3, r3, #2
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d3e8      	bcc.n	800ffd0 <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800fffe:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8010002:	78fb      	ldrb	r3, [r7, #3]
 8010004:	4413      	add	r3, r2
 8010006:	b2db      	uxtb	r3, r3
 8010008:	3b01      	subs	r3, #1
 801000a:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801000c:	e387      	b.n	801071e <ProcessMacCommands+0x922>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801000e:	78fb      	ldrb	r3, [r7, #3]
 8010010:	1c5a      	adds	r2, r3, #1
 8010012:	70fa      	strb	r2, [r7, #3]
 8010014:	461a      	mov	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4413      	add	r3, r2
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	f003 030f 	and.w	r3, r3, #15
 8010020:	b2da      	uxtb	r2, r3
 8010022:	4b5a      	ldr	r3, [pc, #360]	@ (801018c <ProcessMacCommands+0x390>)
 8010024:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010028:	4b58      	ldr	r3, [pc, #352]	@ (801018c <ProcessMacCommands+0x390>)
 801002a:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 801002e:	461a      	mov	r2, r3
 8010030:	2301      	movs	r3, #1
 8010032:	4093      	lsls	r3, r2
 8010034:	b29a      	uxth	r2, r3
 8010036:	4b55      	ldr	r3, [pc, #340]	@ (801018c <ProcessMacCommands+0x390>)
 8010038:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801003c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010040:	2200      	movs	r2, #0
 8010042:	4619      	mov	r1, r3
 8010044:	2004      	movs	r0, #4
 8010046:	f003 fb67 	bl	8013718 <LoRaMacCommandsAddCmd>
                break;
 801004a:	e375      	b.n	8010738 <ProcessMacCommands+0x93c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801004c:	2307      	movs	r3, #7
 801004e:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010052:	78fb      	ldrb	r3, [r7, #3]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	4413      	add	r3, r2
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	091b      	lsrs	r3, r3, #4
 801005c:	b2db      	uxtb	r3, r3
 801005e:	b25b      	sxtb	r3, r3
 8010060:	f003 0307 	and.w	r3, r3, #7
 8010064:	b25b      	sxtb	r3, r3
 8010066:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801006a:	78fb      	ldrb	r3, [r7, #3]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	4413      	add	r3, r2
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	b25b      	sxtb	r3, r3
 8010074:	f003 030f 	and.w	r3, r3, #15
 8010078:	b25b      	sxtb	r3, r3
 801007a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                macIndex++;
 801007e:	78fb      	ldrb	r3, [r7, #3]
 8010080:	3301      	adds	r3, #1
 8010082:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010084:	78fb      	ldrb	r3, [r7, #3]
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	70fa      	strb	r2, [r7, #3]
 801008a:	461a      	mov	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4413      	add	r3, r2
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	65bb      	str	r3, [r7, #88]	@ 0x58
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010094:	78fb      	ldrb	r3, [r7, #3]
 8010096:	1c5a      	adds	r2, r3, #1
 8010098:	70fa      	strb	r2, [r7, #3]
 801009a:	461a      	mov	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4413      	add	r3, r2
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	021a      	lsls	r2, r3, #8
 80100a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80100a6:	4313      	orrs	r3, r2
 80100a8:	65bb      	str	r3, [r7, #88]	@ 0x58
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80100aa:	78fb      	ldrb	r3, [r7, #3]
 80100ac:	1c5a      	adds	r2, r3, #1
 80100ae:	70fa      	strb	r2, [r7, #3]
 80100b0:	461a      	mov	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4413      	add	r3, r2
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	041a      	lsls	r2, r3, #16
 80100ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80100bc:	4313      	orrs	r3, r2
 80100be:	65bb      	str	r3, [r7, #88]	@ 0x58
                rxParamSetupReq.Frequency *= 100;
 80100c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80100c2:	2264      	movs	r2, #100	@ 0x64
 80100c4:	fb02 f303 	mul.w	r3, r2, r3
 80100c8:	65bb      	str	r3, [r7, #88]	@ 0x58

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80100ca:	4b30      	ldr	r3, [pc, #192]	@ (801018c <ProcessMacCommands+0x390>)
 80100cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80100d0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80100d4:	4611      	mov	r1, r2
 80100d6:	4618      	mov	r0, r3
 80100d8:	f005 f9ea 	bl	80154b0 <RegionRxParamSetupReq>
 80100dc:	4603      	mov	r3, r0
 80100de:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

                if( ( status & 0x07 ) == 0x07 )
 80100e2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80100e6:	f003 0307 	and.w	r3, r3, #7
 80100ea:	2b07      	cmp	r3, #7
 80100ec:	d118      	bne.n	8010120 <ProcessMacCommands+0x324>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80100ee:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80100f2:	b2da      	uxtb	r2, r3
 80100f4:	4b25      	ldr	r3, [pc, #148]	@ (801018c <ProcessMacCommands+0x390>)
 80100f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80100fa:	f997 3054 	ldrsb.w	r3, [r7, #84]	@ 0x54
 80100fe:	b2da      	uxtb	r2, r3
 8010100:	4b22      	ldr	r3, [pc, #136]	@ (801018c <ProcessMacCommands+0x390>)
 8010102:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010108:	4a20      	ldr	r2, [pc, #128]	@ (801018c <ProcessMacCommands+0x390>)
 801010a:	67d3      	str	r3, [r2, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801010c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801010e:	4a1f      	ldr	r2, [pc, #124]	@ (801018c <ProcessMacCommands+0x390>)
 8010110:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010114:	f997 3055 	ldrsb.w	r3, [r7, #85]	@ 0x55
 8010118:	b2da      	uxtb	r2, r3
 801011a:	4b1c      	ldr	r3, [pc, #112]	@ (801018c <ProcessMacCommands+0x390>)
 801011c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
                }
                macCmdPayload[0] = status;
 8010120:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8010124:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010128:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801012c:	2201      	movs	r2, #1
 801012e:	4619      	mov	r1, r3
 8010130:	2005      	movs	r0, #5
 8010132:	f003 faf1 	bl	8013718 <LoRaMacCommandsAddCmd>
                break;
 8010136:	e2ff      	b.n	8010738 <ProcessMacCommands+0x93c>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010138:	23ff      	movs	r3, #255	@ 0xff
 801013a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801013e:	4b12      	ldr	r3, [pc, #72]	@ (8010188 <ProcessMacCommands+0x38c>)
 8010140:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010144:	2b00      	cmp	r3, #0
 8010146:	d00d      	beq.n	8010164 <ProcessMacCommands+0x368>
 8010148:	4b0f      	ldr	r3, [pc, #60]	@ (8010188 <ProcessMacCommands+0x38c>)
 801014a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d007      	beq.n	8010164 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010154:	4b0c      	ldr	r3, [pc, #48]	@ (8010188 <ProcessMacCommands+0x38c>)
 8010156:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4798      	blx	r3
 801015e:	4603      	mov	r3, r0
 8010160:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
                }
                macCmdPayload[0] = batteryLevel;
 8010164:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8010168:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801016c:	787b      	ldrb	r3, [r7, #1]
 801016e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010172:	b2db      	uxtb	r3, r3
 8010174:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010178:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801017c:	2202      	movs	r2, #2
 801017e:	4619      	mov	r1, r3
 8010180:	2006      	movs	r0, #6
 8010182:	f003 fac9 	bl	8013718 <LoRaMacCommandsAddCmd>
                break;
 8010186:	e2d7      	b.n	8010738 <ProcessMacCommands+0x93c>
 8010188:	2000ba68 	.word	0x2000ba68
 801018c:	2000bfc0 	.word	0x2000bfc0
 8010190:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010194:	2303      	movs	r3, #3
 8010196:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

                newChannelReq.ChannelId = payload[macIndex++];
 801019a:	78fb      	ldrb	r3, [r7, #3]
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	70fa      	strb	r2, [r7, #3]
 80101a0:	461a      	mov	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4413      	add	r3, r2
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	b25b      	sxtb	r3, r3
 80101aa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
                newChannelReq.NewChannel = &chParam;
 80101ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80101b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80101b4:	78fb      	ldrb	r3, [r7, #3]
 80101b6:	1c5a      	adds	r2, r3, #1
 80101b8:	70fa      	strb	r2, [r7, #3]
 80101ba:	461a      	mov	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4413      	add	r3, r2
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	643b      	str	r3, [r7, #64]	@ 0x40
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80101c4:	78fb      	ldrb	r3, [r7, #3]
 80101c6:	1c5a      	adds	r2, r3, #1
 80101c8:	70fa      	strb	r2, [r7, #3]
 80101ca:	461a      	mov	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4413      	add	r3, r2
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	021a      	lsls	r2, r3, #8
 80101d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101d6:	4313      	orrs	r3, r2
 80101d8:	643b      	str	r3, [r7, #64]	@ 0x40
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80101da:	78fb      	ldrb	r3, [r7, #3]
 80101dc:	1c5a      	adds	r2, r3, #1
 80101de:	70fa      	strb	r2, [r7, #3]
 80101e0:	461a      	mov	r2, r3
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	4413      	add	r3, r2
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	041a      	lsls	r2, r3, #16
 80101ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101ec:	4313      	orrs	r3, r2
 80101ee:	643b      	str	r3, [r7, #64]	@ 0x40
                chParam.Frequency *= 100;
 80101f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80101f2:	2264      	movs	r2, #100	@ 0x64
 80101f4:	fb02 f303 	mul.w	r3, r2, r3
 80101f8:	643b      	str	r3, [r7, #64]	@ 0x40
                chParam.Rx1Frequency = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	647b      	str	r3, [r7, #68]	@ 0x44
                chParam.DrRange.Value = payload[macIndex++];
 80101fe:	78fb      	ldrb	r3, [r7, #3]
 8010200:	1c5a      	adds	r2, r3, #1
 8010202:	70fa      	strb	r2, [r7, #3]
 8010204:	461a      	mov	r2, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4413      	add	r3, r2
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	b25b      	sxtb	r3, r3
 801020e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010212:	4b85      	ldr	r3, [pc, #532]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010214:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8010218:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801021c:	4611      	mov	r1, r2
 801021e:	4618      	mov	r0, r3
 8010220:	f005 f959 	bl	80154d6 <RegionNewChannelReq>
 8010224:	4603      	mov	r3, r0
 8010226:	b2db      	uxtb	r3, r3
 8010228:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

                if( ( int8_t )status >= 0 )
 801022c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8010230:	b25b      	sxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	f2c0 8275 	blt.w	8010722 <ProcessMacCommands+0x926>
                {
                    macCmdPayload[0] = status;
 8010238:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 801023c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010240:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010244:	2201      	movs	r2, #1
 8010246:	4619      	mov	r1, r3
 8010248:	2007      	movs	r0, #7
 801024a:	f003 fa65 	bl	8013718 <LoRaMacCommandsAddCmd>
                }
                break;
 801024e:	e268      	b.n	8010722 <ProcessMacCommands+0x926>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010250:	78fb      	ldrb	r3, [r7, #3]
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	70fa      	strb	r2, [r7, #3]
 8010256:	461a      	mov	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	4413      	add	r3, r2
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	f003 030f 	and.w	r3, r3, #15
 8010262:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

                if( delay == 0 )
 8010266:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 801026a:	2b00      	cmp	r3, #0
 801026c:	d104      	bne.n	8010278 <ProcessMacCommands+0x47c>
                {
                    delay++;
 801026e:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8010272:	3301      	adds	r3, #1
 8010274:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010278:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 801027c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010280:	fb02 f303 	mul.w	r3, r2, r3
 8010284:	461a      	mov	r2, r3
 8010286:	4b68      	ldr	r3, [pc, #416]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010288:	669a      	str	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801028a:	4b67      	ldr	r3, [pc, #412]	@ (8010428 <ProcessMacCommands+0x62c>)
 801028c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801028e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8010292:	4a65      	ldr	r2, [pc, #404]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010294:	66d3      	str	r3, [r2, #108]	@ 0x6c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010296:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801029a:	2200      	movs	r2, #0
 801029c:	4619      	mov	r1, r3
 801029e:	2008      	movs	r0, #8
 80102a0:	f003 fa3a 	bl	8013718 <LoRaMacCommandsAddCmd>
                break;
 80102a4:	e248      	b.n	8010738 <ProcessMacCommands+0x93c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80102a6:	78fb      	ldrb	r3, [r7, #3]
 80102a8:	1c5a      	adds	r2, r3, #1
 80102aa:	70fa      	strb	r2, [r7, #3]
 80102ac:	461a      	mov	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4413      	add	r3, r2
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

                txParamSetupReq.UplinkDwellTime = 0;
 80102b8:	2300      	movs	r3, #0
 80102ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                txParamSetupReq.DownlinkDwellTime = 0;
 80102be:	2300      	movs	r3, #0
 80102c0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80102c4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80102c8:	f003 0320 	and.w	r3, r3, #32
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d002      	beq.n	80102d6 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80102d0:	2301      	movs	r3, #1
 80102d2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80102d6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80102da:	f003 0310 	and.w	r3, r3, #16
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d002      	beq.n	80102e8 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80102e2:	2301      	movs	r3, #1
 80102e4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80102e8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80102ec:	f003 030f 	and.w	r3, r3, #15
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80102f6:	4b4c      	ldr	r3, [pc, #304]	@ (8010428 <ProcessMacCommands+0x62c>)
 80102f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80102fc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8010300:	4611      	mov	r1, r2
 8010302:	4618      	mov	r0, r3
 8010304:	f005 f8fa 	bl	80154fc <RegionTxParamSetupReq>
 8010308:	4603      	mov	r3, r0
 801030a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801030e:	f000 820a 	beq.w	8010726 <ProcessMacCommands+0x92a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010312:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8010316:	4b44      	ldr	r3, [pc, #272]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010318:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801031c:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8010320:	4b41      	ldr	r3, [pc, #260]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010322:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8010326:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801032a:	461a      	mov	r2, r3
 801032c:	4b3f      	ldr	r3, [pc, #252]	@ (801042c <ProcessMacCommands+0x630>)
 801032e:	5c9b      	ldrb	r3, [r3, r2]
 8010330:	ee07 3a90 	vmov	s15, r3
 8010334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010338:	4b3b      	ldr	r3, [pc, #236]	@ (8010428 <ProcessMacCommands+0x62c>)
 801033a:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801033e:	2302      	movs	r3, #2
 8010340:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010344:	4b38      	ldr	r3, [pc, #224]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010346:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 801034a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801034e:	4b36      	ldr	r3, [pc, #216]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010350:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8010354:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010358:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801035c:	4618      	mov	r0, r3
 801035e:	f004 ffc7 	bl	80152f0 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010364:	b25a      	sxtb	r2, r3
 8010366:	4b30      	ldr	r3, [pc, #192]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010368:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 801036c:	4293      	cmp	r3, r2
 801036e:	bfb8      	it	lt
 8010370:	4613      	movlt	r3, r2
 8010372:	b25a      	sxtb	r2, r3
 8010374:	4b2c      	ldr	r3, [pc, #176]	@ (8010428 <ProcessMacCommands+0x62c>)
 8010376:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801037a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801037e:	2200      	movs	r2, #0
 8010380:	4619      	mov	r1, r3
 8010382:	2009      	movs	r0, #9
 8010384:	f003 f9c8 	bl	8013718 <LoRaMacCommandsAddCmd>
                }
                break;
 8010388:	e1cd      	b.n	8010726 <ProcessMacCommands+0x92a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801038a:	2303      	movs	r3, #3
 801038c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

                dlChannelReq.ChannelId = payload[macIndex++];
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	1c5a      	adds	r2, r3, #1
 8010394:	70fa      	strb	r2, [r7, #3]
 8010396:	461a      	mov	r2, r3
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4413      	add	r3, r2
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80103a2:	78fb      	ldrb	r3, [r7, #3]
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	70fa      	strb	r2, [r7, #3]
 80103a8:	461a      	mov	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4413      	add	r3, r2
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80103b2:	78fb      	ldrb	r3, [r7, #3]
 80103b4:	1c5a      	adds	r2, r3, #1
 80103b6:	70fa      	strb	r2, [r7, #3]
 80103b8:	461a      	mov	r2, r3
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4413      	add	r3, r2
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	021a      	lsls	r2, r3, #8
 80103c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c4:	4313      	orrs	r3, r2
 80103c6:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80103c8:	78fb      	ldrb	r3, [r7, #3]
 80103ca:	1c5a      	adds	r2, r3, #1
 80103cc:	70fa      	strb	r2, [r7, #3]
 80103ce:	461a      	mov	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4413      	add	r3, r2
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	041a      	lsls	r2, r3, #16
 80103d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103da:	4313      	orrs	r3, r2
 80103dc:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80103de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e0:	2264      	movs	r2, #100	@ 0x64
 80103e2:	fb02 f303 	mul.w	r3, r2, r3
 80103e6:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80103e8:	4b0f      	ldr	r3, [pc, #60]	@ (8010428 <ProcessMacCommands+0x62c>)
 80103ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80103ee:	f107 0220 	add.w	r2, r7, #32
 80103f2:	4611      	mov	r1, r2
 80103f4:	4618      	mov	r0, r3
 80103f6:	f005 f894 	bl	8015522 <RegionDlChannelReq>
 80103fa:	4603      	mov	r3, r0
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

                if( ( int8_t )status >= 0 )
 8010402:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8010406:	b25b      	sxtb	r3, r3
 8010408:	2b00      	cmp	r3, #0
 801040a:	f2c0 818e 	blt.w	801072a <ProcessMacCommands+0x92e>
                {
                    macCmdPayload[0] = status;
 801040e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8010412:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8010416:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801041a:	2201      	movs	r2, #1
 801041c:	4619      	mov	r1, r3
 801041e:	200a      	movs	r0, #10
 8010420:	f003 f97a 	bl	8013718 <LoRaMacCommandsAddCmd>
                }
                break;
 8010424:	e181      	b.n	801072a <ProcessMacCommands+0x92e>
 8010426:	bf00      	nop
 8010428:	2000bfc0 	.word	0x2000bfc0
 801042c:	08022c20 	.word	0x08022c20
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010430:	200a      	movs	r0, #10
 8010432:	f003 fcaf 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 8178 	beq.w	801072e <ProcessMacCommands+0x932>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801043e:	210a      	movs	r1, #10
 8010440:	2000      	movs	r0, #0
 8010442:	f003 fc1b 	bl	8013c7c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010446:	f107 0318 	add.w	r3, r7, #24
 801044a:	2200      	movs	r2, #0
 801044c:	601a      	str	r2, [r3, #0]
 801044e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010450:	f107 0310 	add.w	r3, r7, #16
 8010454:	2200      	movs	r2, #0
 8010456:	601a      	str	r2, [r3, #0]
 8010458:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801045a:	f107 0308 	add.w	r3, r7, #8
 801045e:	2200      	movs	r2, #0
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010464:	78fb      	ldrb	r3, [r7, #3]
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	70fa      	strb	r2, [r7, #3]
 801046a:	461a      	mov	r2, r3
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	4413      	add	r3, r2
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010474:	78fb      	ldrb	r3, [r7, #3]
 8010476:	1c5a      	adds	r2, r3, #1
 8010478:	70fa      	strb	r2, [r7, #3]
 801047a:	461a      	mov	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4413      	add	r3, r2
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	021a      	lsls	r2, r3, #8
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	4313      	orrs	r3, r2
 8010488:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801048a:	78fb      	ldrb	r3, [r7, #3]
 801048c:	1c5a      	adds	r2, r3, #1
 801048e:	70fa      	strb	r2, [r7, #3]
 8010490:	461a      	mov	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4413      	add	r3, r2
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	041a      	lsls	r2, r3, #16
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	4313      	orrs	r3, r2
 801049e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80104a0:	78fb      	ldrb	r3, [r7, #3]
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	70fa      	strb	r2, [r7, #3]
 80104a6:	461a      	mov	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4413      	add	r3, r2
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	061a      	lsls	r2, r3, #24
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	4313      	orrs	r3, r2
 80104b4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80104b6:	78fb      	ldrb	r3, [r7, #3]
 80104b8:	1c5a      	adds	r2, r3, #1
 80104ba:	70fa      	strb	r2, [r7, #3]
 80104bc:	461a      	mov	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4413      	add	r3, r2
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	b21b      	sxth	r3, r3
 80104c6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80104c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80104cc:	461a      	mov	r2, r3
 80104ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80104d2:	fb02 f303 	mul.w	r3, r2, r3
 80104d6:	121b      	asrs	r3, r3, #8
 80104d8:	b21b      	sxth	r3, r3
 80104da:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80104dc:	f107 0310 	add.w	r3, r7, #16
 80104e0:	f107 0218 	add.w	r2, r7, #24
 80104e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80104e8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80104ec:	693a      	ldr	r2, [r7, #16]
 80104ee:	4b98      	ldr	r3, [pc, #608]	@ (8010750 <ProcessMacCommands+0x954>)
 80104f0:	4413      	add	r3, r2
 80104f2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80104f4:	f107 0308 	add.w	r3, r7, #8
 80104f8:	4618      	mov	r0, r3
 80104fa:	f00a f833 	bl	801a564 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80104fe:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8010502:	4b94      	ldr	r3, [pc, #592]	@ (8010754 <ProcessMacCommands+0x958>)
 8010504:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8010508:	9200      	str	r2, [sp, #0]
 801050a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 801050e:	f107 0210 	add.w	r2, r7, #16
 8010512:	ca06      	ldmia	r2, {r1, r2}
 8010514:	f009 ffbc 	bl	801a490 <SysTimeSub>
 8010518:	f107 0010 	add.w	r0, r7, #16
 801051c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010522:	f107 0208 	add.w	r2, r7, #8
 8010526:	ca06      	ldmia	r2, {r1, r2}
 8010528:	f009 ff78 	bl	801a41c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 801052c:	f107 0310 	add.w	r3, r7, #16
 8010530:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010534:	f009 ffe6 	bl	801a504 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010538:	f002 ff98 	bl	801346c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801053c:	4b85      	ldr	r3, [pc, #532]	@ (8010754 <ProcessMacCommands+0x958>)
 801053e:	2201      	movs	r2, #1
 8010540:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8010544:	e0f3      	b.n	801072e <ProcessMacCommands+0x932>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010546:	200d      	movs	r0, #13
 8010548:	f003 fc24 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 801054c:	4603      	mov	r3, r0
 801054e:	2b00      	cmp	r3, #0
 8010550:	f000 80ef 	beq.w	8010732 <ProcessMacCommands+0x936>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010554:	210d      	movs	r1, #13
 8010556:	2000      	movs	r0, #0
 8010558:	f003 fb90 	bl	8013c7c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801055c:	4b7d      	ldr	r3, [pc, #500]	@ (8010754 <ProcessMacCommands+0x958>)
 801055e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8010562:	2b04      	cmp	r3, #4
 8010564:	f000 80e5 	beq.w	8010732 <ProcessMacCommands+0x936>
 8010568:	4b7a      	ldr	r3, [pc, #488]	@ (8010754 <ProcessMacCommands+0x958>)
 801056a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 801056e:	2b05      	cmp	r3, #5
 8010570:	f000 80df 	beq.w	8010732 <ProcessMacCommands+0x936>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010574:	f002 ff57 	bl	8013426 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010578:	e0db      	b.n	8010732 <ProcessMacCommands+0x936>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801057a:	2303      	movs	r3, #3
 801057c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                uint32_t frequency = 0;
 8010580:	2300      	movs	r3, #0
 8010582:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010586:	78fb      	ldrb	r3, [r7, #3]
 8010588:	1c5a      	adds	r2, r3, #1
 801058a:	70fa      	strb	r2, [r7, #3]
 801058c:	461a      	mov	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4413      	add	r3, r2
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010598:	78fb      	ldrb	r3, [r7, #3]
 801059a:	1c5a      	adds	r2, r3, #1
 801059c:	70fa      	strb	r2, [r7, #3]
 801059e:	461a      	mov	r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4413      	add	r3, r2
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	021b      	lsls	r3, r3, #8
 80105a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80105ac:	4313      	orrs	r3, r2
 80105ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80105b2:	78fb      	ldrb	r3, [r7, #3]
 80105b4:	1c5a      	adds	r2, r3, #1
 80105b6:	70fa      	strb	r2, [r7, #3]
 80105b8:	461a      	mov	r2, r3
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	4413      	add	r3, r2
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	041b      	lsls	r3, r3, #16
 80105c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80105c6:	4313      	orrs	r3, r2
 80105c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                frequency *= 100;
 80105cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80105d0:	2264      	movs	r2, #100	@ 0x64
 80105d2:	fb02 f303 	mul.w	r3, r2, r3
 80105d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                datarate = payload[macIndex++] & 0x0F;
 80105da:	78fb      	ldrb	r3, [r7, #3]
 80105dc:	1c5a      	adds	r2, r3, #1
 80105de:	70fa      	strb	r2, [r7, #3]
 80105e0:	461a      	mov	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	4413      	add	r3, r2
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f003 030f 	and.w	r3, r3, #15
 80105ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80105f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80105f4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80105f8:	4618      	mov	r0, r3
 80105fa:	f002 ff1b 	bl	8013434 <LoRaMacClassBPingSlotChannelReq>
 80105fe:	4603      	mov	r3, r0
 8010600:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                macCmdPayload[0] = status;
 8010604:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8010608:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801060c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010610:	2201      	movs	r2, #1
 8010612:	4619      	mov	r1, r3
 8010614:	2011      	movs	r0, #17
 8010616:	f003 f87f 	bl	8013718 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 801061a:	e08d      	b.n	8010738 <ProcessMacCommands+0x93c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801061c:	200e      	movs	r0, #14
 801061e:	f003 fbb9 	bl	8013d94 <LoRaMacConfirmQueueIsCmdActive>
 8010622:	4603      	mov	r3, r0
 8010624:	2b00      	cmp	r3, #0
 8010626:	f000 8086 	beq.w	8010736 <ProcessMacCommands+0x93a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801062a:	210e      	movs	r1, #14
 801062c:	2000      	movs	r0, #0
 801062e:	f003 fb25 	bl	8013c7c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010632:	2300      	movs	r3, #0
 8010634:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
                    uint8_t beaconTimingChannel = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801063e:	78fb      	ldrb	r3, [r7, #3]
 8010640:	1c5a      	adds	r2, r3, #1
 8010642:	70fa      	strb	r2, [r7, #3]
 8010644:	461a      	mov	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	4413      	add	r3, r2
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010650:	78fb      	ldrb	r3, [r7, #3]
 8010652:	1c5a      	adds	r2, r3, #1
 8010654:	70fa      	strb	r2, [r7, #3]
 8010656:	461a      	mov	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	4413      	add	r3, r2
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	021b      	lsls	r3, r3, #8
 8010660:	b21a      	sxth	r2, r3
 8010662:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8010666:	4313      	orrs	r3, r2
 8010668:	b21b      	sxth	r3, r3
 801066a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
                    beaconTimingChannel = payload[macIndex++];
 801066e:	78fb      	ldrb	r3, [r7, #3]
 8010670:	1c5a      	adds	r2, r3, #1
 8010672:	70fa      	strb	r2, [r7, #3]
 8010674:	461a      	mov	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4413      	add	r3, r2
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010680:	4b35      	ldr	r3, [pc, #212]	@ (8010758 <ProcessMacCommands+0x95c>)
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	f897 1085 	ldrb.w	r1, [r7, #133]	@ 0x85
 801068a:	f8b7 0086 	ldrh.w	r0, [r7, #134]	@ 0x86
 801068e:	f002 fede 	bl	801344e <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010692:	e050      	b.n	8010736 <ProcessMacCommands+0x93a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010694:	2300      	movs	r3, #0
 8010696:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                    frequency = ( uint32_t )payload[macIndex++];
 801069a:	78fb      	ldrb	r3, [r7, #3]
 801069c:	1c5a      	adds	r2, r3, #1
 801069e:	70fa      	strb	r2, [r7, #3]
 80106a0:	461a      	mov	r2, r3
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	4413      	add	r3, r2
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80106ac:	78fb      	ldrb	r3, [r7, #3]
 80106ae:	1c5a      	adds	r2, r3, #1
 80106b0:	70fa      	strb	r2, [r7, #3]
 80106b2:	461a      	mov	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4413      	add	r3, r2
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	021b      	lsls	r3, r3, #8
 80106bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80106c0:	4313      	orrs	r3, r2
 80106c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80106c6:	78fb      	ldrb	r3, [r7, #3]
 80106c8:	1c5a      	adds	r2, r3, #1
 80106ca:	70fa      	strb	r2, [r7, #3]
 80106cc:	461a      	mov	r2, r3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	4413      	add	r3, r2
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	041b      	lsls	r3, r3, #16
 80106d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80106da:	4313      	orrs	r3, r2
 80106dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                    frequency *= 100;
 80106e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80106e4:	2264      	movs	r2, #100	@ 0x64
 80106e6:	fb02 f303 	mul.w	r3, r2, r3
 80106ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80106ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80106f2:	f002 fec2 	bl	801347a <LoRaMacClassBBeaconFreqReq>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <ProcessMacCommands+0x908>
                    {
                        macCmdPayload[0] = 1;
 80106fc:	2301      	movs	r3, #1
 80106fe:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8010702:	e002      	b.n	801070a <ProcessMacCommands+0x90e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801070a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801070e:	2201      	movs	r2, #1
 8010710:	4619      	mov	r1, r3
 8010712:	2013      	movs	r0, #19
 8010714:	f003 f800 	bl	8013718 <LoRaMacCommandsAddCmd>
                }
                break;
 8010718:	e00e      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 801071a:	bf00      	nop
 801071c:	e00c      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 801071e:	bf00      	nop
 8010720:	e00a      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 8010722:	bf00      	nop
 8010724:	e008      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 8010726:	bf00      	nop
 8010728:	e006      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 801072a:	bf00      	nop
 801072c:	e004      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 801072e:	bf00      	nop
 8010730:	e002      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 8010732:	bf00      	nop
 8010734:	e000      	b.n	8010738 <ProcessMacCommands+0x93c>
                break;
 8010736:	bf00      	nop
    while( macIndex < commandsSize )
 8010738:	78fa      	ldrb	r2, [r7, #3]
 801073a:	78bb      	ldrb	r3, [r7, #2]
 801073c:	429a      	cmp	r2, r3
 801073e:	f4ff ab75 	bcc.w	800fe2c <ProcessMacCommands+0x30>
 8010742:	e002      	b.n	801074a <ProcessMacCommands+0x94e>
            return;
 8010744:	bf00      	nop
 8010746:	e000      	b.n	801074a <ProcessMacCommands+0x94e>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010748:	bf00      	nop
        }
    }
}
 801074a:	3794      	adds	r7, #148	@ 0x94
 801074c:	46bd      	mov	sp, r7
 801074e:	bd90      	pop	{r4, r7, pc}
 8010750:	12d53d80 	.word	0x12d53d80
 8010754:	2000ba68 	.word	0x2000ba68
 8010758:	2000c7e8 	.word	0x2000c7e8

0801075c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b08e      	sub	sp, #56	@ 0x38
 8010760:	af02      	add	r7, sp, #8
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	607a      	str	r2, [r7, #4]
 8010766:	461a      	mov	r2, r3
 8010768:	460b      	mov	r3, r1
 801076a:	72fb      	strb	r3, [r7, #11]
 801076c:	4613      	mov	r3, r2
 801076e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010770:	2303      	movs	r3, #3
 8010772:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010776:	4b67      	ldr	r3, [pc, #412]	@ (8010914 <Send+0x1b8>)
 8010778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801077c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010780:	4b64      	ldr	r3, [pc, #400]	@ (8010914 <Send+0x1b8>)
 8010782:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010786:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801078a:	4b62      	ldr	r3, [pc, #392]	@ (8010914 <Send+0x1b8>)
 801078c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801078e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010790:	4b60      	ldr	r3, [pc, #384]	@ (8010914 <Send+0x1b8>)
 8010792:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8010796:	2b00      	cmp	r3, #0
 8010798:	d101      	bne.n	801079e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801079a:	2307      	movs	r3, #7
 801079c:	e0b5      	b.n	801090a <Send+0x1ae>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801079e:	4b5d      	ldr	r3, [pc, #372]	@ (8010914 <Send+0x1b8>)
 80107a0:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d106      	bne.n	80107b6 <Send+0x5a>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80107a8:	495a      	ldr	r1, [pc, #360]	@ (8010914 <Send+0x1b8>)
 80107aa:	f04f 0200 	mov.w	r2, #0
 80107ae:	f04f 0300 	mov.w	r3, #0
 80107b2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    }

    fCtrl.Value = 0;
 80107b6:	2300      	movs	r3, #0
 80107b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80107bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80107c0:	f36f 0303 	bfc	r3, #0, #4
 80107c4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80107c8:	4b52      	ldr	r3, [pc, #328]	@ (8010914 <Send+0x1b8>)
 80107ca:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 80107ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80107d2:	f362 13c7 	bfi	r3, r2, #7, #1
 80107d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80107da:	4b4e      	ldr	r3, [pc, #312]	@ (8010914 <Send+0x1b8>)
 80107dc:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d106      	bne.n	80107f2 <Send+0x96>
    {
        fCtrl.Bits.FPending      = 1;
 80107e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80107e8:	f043 0310 	orr.w	r3, r3, #16
 80107ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80107f0:	e005      	b.n	80107fe <Send+0xa2>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80107f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80107f6:	f36f 1304 	bfc	r3, #4, #1
 80107fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80107fe:	4b45      	ldr	r3, [pc, #276]	@ (8010914 <Send+0x1b8>)
 8010800:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010804:	2b00      	cmp	r3, #0
 8010806:	d005      	beq.n	8010814 <Send+0xb8>
    {
        fCtrl.Bits.Ack = 1;
 8010808:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801080c:	f043 0320 	orr.w	r3, r3, #32
 8010810:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8010814:	2301      	movs	r3, #1
 8010816:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010818:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801081c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010820:	b2db      	uxtb	r3, r3
 8010822:	2b00      	cmp	r3, #0
 8010824:	bf14      	ite	ne
 8010826:	2301      	movne	r3, #1
 8010828:	2300      	moveq	r3, #0
 801082a:	b2db      	uxtb	r3, r3
 801082c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801082e:	4b39      	ldr	r3, [pc, #228]	@ (8010914 <Send+0x1b8>)
 8010830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010832:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010834:	4b37      	ldr	r3, [pc, #220]	@ (8010914 <Send+0x1b8>)
 8010836:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 801083a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801083c:	4b35      	ldr	r3, [pc, #212]	@ (8010914 <Send+0x1b8>)
 801083e:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8010842:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010844:	4b33      	ldr	r3, [pc, #204]	@ (8010914 <Send+0x1b8>)
 8010846:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 801084a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801084e:	4b31      	ldr	r3, [pc, #196]	@ (8010914 <Send+0x1b8>)
 8010850:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
 8010854:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010858:	4b2e      	ldr	r3, [pc, #184]	@ (8010914 <Send+0x1b8>)
 801085a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 801085e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010862:	4b2c      	ldr	r3, [pc, #176]	@ (8010914 <Send+0x1b8>)
 8010864:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8010868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801086c:	4b29      	ldr	r3, [pc, #164]	@ (8010914 <Send+0x1b8>)
 801086e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8010872:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010874:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010878:	f107 0014 	add.w	r0, r7, #20
 801087c:	4a26      	ldr	r2, [pc, #152]	@ (8010918 <Send+0x1bc>)
 801087e:	4927      	ldr	r1, [pc, #156]	@ (801091c <Send+0x1c0>)
 8010880:	f002 fcfe 	bl	8013280 <LoRaMacAdrCalcNext>
 8010884:	4603      	mov	r3, r0
 8010886:	461a      	mov	r2, r3
 8010888:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801088c:	f362 1386 	bfi	r3, r2, #6, #1
 8010890:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010894:	7afa      	ldrb	r2, [r7, #11]
 8010896:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 801089a:	893b      	ldrh	r3, [r7, #8]
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f000 fc7b 	bl	801119c <PrepareFrame>
 80108a6:	4603      	mov	r3, r0
 80108a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80108ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d003      	beq.n	80108bc <Send+0x160>
 80108b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108b8:	2b0a      	cmp	r3, #10
 80108ba:	d107      	bne.n	80108cc <Send+0x170>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80108bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80108c0:	4618      	mov	r0, r3
 80108c2:	f000 f961 	bl	8010b88 <ScheduleTx>
 80108c6:	4603      	mov	r3, r0
 80108c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80108cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00a      	beq.n	80108ea <Send+0x18e>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80108d4:	4a0f      	ldr	r2, [pc, #60]	@ (8010914 <Send+0x1b8>)
 80108d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80108da:	f882 3045 	strb.w	r3, [r2, #69]	@ 0x45
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80108de:	4a0d      	ldr	r2, [pc, #52]	@ (8010914 <Send+0x1b8>)
 80108e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80108e4:	f882 3044 	strb.w	r3, [r2, #68]	@ 0x44
 80108e8:	e00d      	b.n	8010906 <Send+0x1aa>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80108ea:	4b0a      	ldr	r3, [pc, #40]	@ (8010914 <Send+0x1b8>)
 80108ec:	2200      	movs	r2, #0
 80108ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80108f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f4:	4a07      	ldr	r2, [pc, #28]	@ (8010914 <Send+0x1b8>)
 80108f6:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80108f8:	f002 ffb4 	bl	8013864 <LoRaMacCommandsRemoveNoneStickyCmds>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d001      	beq.n	8010906 <Send+0x1aa>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010902:	2313      	movs	r3, #19
 8010904:	e001      	b.n	801090a <Send+0x1ae>
        }
    }
    return status;
 8010906:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801090a:	4618      	mov	r0, r3
 801090c:	3730      	adds	r7, #48	@ 0x30
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	2000bfc0 	.word	0x2000bfc0
 8010918:	2000c004 	.word	0x2000c004
 801091c:	2000c005 	.word	0x2000c005

08010920 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801092a:	2300      	movs	r3, #0
 801092c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801092e:	2300      	movs	r3, #0
 8010930:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010932:	2301      	movs	r3, #1
 8010934:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010936:	79fb      	ldrb	r3, [r7, #7]
 8010938:	2bff      	cmp	r3, #255	@ 0xff
 801093a:	d11f      	bne.n	801097c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801093c:	2000      	movs	r0, #0
 801093e:	f7ff f925 	bl	800fb8c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010942:	4b15      	ldr	r3, [pc, #84]	@ (8010998 <SendReJoinReq+0x78>)
 8010944:	2200      	movs	r2, #0
 8010946:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801094a:	4b13      	ldr	r3, [pc, #76]	@ (8010998 <SendReJoinReq+0x78>)
 801094c:	4a13      	ldr	r2, [pc, #76]	@ (801099c <SendReJoinReq+0x7c>)
 801094e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010952:	4b11      	ldr	r3, [pc, #68]	@ (8010998 <SendReJoinReq+0x78>)
 8010954:	22ff      	movs	r2, #255	@ 0xff
 8010956:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801095a:	7b3b      	ldrb	r3, [r7, #12]
 801095c:	f36f 1347 	bfc	r3, #5, #3
 8010960:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010962:	7b3a      	ldrb	r2, [r7, #12]
 8010964:	4b0c      	ldr	r3, [pc, #48]	@ (8010998 <SendReJoinReq+0x78>)
 8010966:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801096a:	480d      	ldr	r0, [pc, #52]	@ (80109a0 <SendReJoinReq+0x80>)
 801096c:	f7fc fb0a 	bl	800cf84 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8010970:	480c      	ldr	r0, [pc, #48]	@ (80109a4 <SendReJoinReq+0x84>)
 8010972:	f7fc fad7 	bl	800cf24 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8010976:	2300      	movs	r3, #0
 8010978:	73fb      	strb	r3, [r7, #15]

            break;
 801097a:	e002      	b.n	8010982 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801097c:	2302      	movs	r3, #2
 801097e:	73bb      	strb	r3, [r7, #14]
            break;
 8010980:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010982:	7bfb      	ldrb	r3, [r7, #15]
 8010984:	4618      	mov	r0, r3
 8010986:	f000 f8ff 	bl	8010b88 <ScheduleTx>
 801098a:	4603      	mov	r3, r0
 801098c:	73bb      	strb	r3, [r7, #14]
    return status;
 801098e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010990:	4618      	mov	r0, r3
 8010992:	3710      	adds	r7, #16
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}
 8010998:	2000ba68 	.word	0x2000ba68
 801099c:	2000ba6a 	.word	0x2000ba6a
 80109a0:	2000bb76 	.word	0x2000bb76
 80109a4:	2000bb7e 	.word	0x2000bb7e

080109a8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80109ac:	f002 fce0 	bl	8013370 <LoRaMacClassBIsBeaconExpected>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d001      	beq.n	80109ba <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80109b6:	230e      	movs	r3, #14
 80109b8:	e013      	b.n	80109e2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80109ba:	4b0b      	ldr	r3, [pc, #44]	@ (80109e8 <CheckForClassBCollision+0x40>)
 80109bc:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d10d      	bne.n	80109e0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80109c4:	f002 fcdc 	bl	8013380 <LoRaMacClassBIsPingExpected>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d001      	beq.n	80109d2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80109ce:	230f      	movs	r3, #15
 80109d0:	e007      	b.n	80109e2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80109d2:	f002 fcdd 	bl	8013390 <LoRaMacClassBIsMulticastExpected>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d001      	beq.n	80109e0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80109dc:	230f      	movs	r3, #15
 80109de:	e000      	b.n	80109e2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80109e0:	2300      	movs	r3, #0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	2000bfc0 	.word	0x2000bfc0

080109ec <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80109ec:	b590      	push	{r4, r7, lr}
 80109ee:	b083      	sub	sp, #12
 80109f0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80109f2:	4b2d      	ldr	r3, [pc, #180]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 80109f4:	f893 4058 	ldrb.w	r4, [r3, #88]	@ 0x58
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80109f8:	4b2b      	ldr	r3, [pc, #172]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 80109fa:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
 80109fe:	4b2a      	ldr	r3, [pc, #168]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a00:	f893 108d 	ldrb.w	r1, [r3, #141]	@ 0x8d
 8010a04:	4b28      	ldr	r3, [pc, #160]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a06:	f993 2045 	ldrsb.w	r2, [r3, #69]	@ 0x45
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010a0a:	4b27      	ldr	r3, [pc, #156]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a0c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010a10:	b25b      	sxtb	r3, r3
 8010a12:	f004 fddd 	bl	80155d0 <RegionApplyDrOffset>
 8010a16:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a18:	b259      	sxtb	r1, r3
 8010a1a:	4b23      	ldr	r3, [pc, #140]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a1c:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8010a20:	4b21      	ldr	r3, [pc, #132]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a24:	4821      	ldr	r0, [pc, #132]	@ (8010aac <ComputeRxWindowParameters+0xc0>)
 8010a26:	9000      	str	r0, [sp, #0]
 8010a28:	4620      	mov	r0, r4
 8010a2a:	f004 fce1 	bl	80153f0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a30:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010a34:	4b1c      	ldr	r3, [pc, #112]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a36:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010a3a:	b259      	sxtb	r1, r3
 8010a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a3e:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8010a42:	4b19      	ldr	r3, [pc, #100]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a46:	4c1a      	ldr	r4, [pc, #104]	@ (8010ab0 <ComputeRxWindowParameters+0xc4>)
 8010a48:	9400      	str	r4, [sp, #0]
 8010a4a:	f004 fcd1 	bl	80153f0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010a4e:	4b16      	ldr	r3, [pc, #88]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010a52:	4a18      	ldr	r2, [pc, #96]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a54:	f8d2 23e4 	ldr.w	r2, [r2, #996]	@ 0x3e4
 8010a58:	4413      	add	r3, r2
 8010a5a:	4a16      	ldr	r2, [pc, #88]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a5c:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010a60:	4b11      	ldr	r3, [pc, #68]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a64:	4a13      	ldr	r2, [pc, #76]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a66:	f8d2 23f8 	ldr.w	r2, [r2, #1016]	@ 0x3f8
 8010a6a:	4413      	add	r3, r2
 8010a6c:	4a11      	ldr	r2, [pc, #68]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a6e:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8010a72:	4b10      	ldr	r3, [pc, #64]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a74:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010a78:	2b04      	cmp	r3, #4
 8010a7a:	d011      	beq.n	8010aa0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010a80:	4a0c      	ldr	r2, [pc, #48]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a82:	f8d2 23e4 	ldr.w	r2, [r2, #996]	@ 0x3e4
 8010a86:	4413      	add	r3, r2
 8010a88:	4a0a      	ldr	r2, [pc, #40]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a8a:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010a8e:	4b06      	ldr	r3, [pc, #24]	@ (8010aa8 <ComputeRxWindowParameters+0xbc>)
 8010a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a92:	4a08      	ldr	r2, [pc, #32]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a94:	f8d2 23f8 	ldr.w	r2, [r2, #1016]	@ 0x3f8
 8010a98:	4413      	add	r3, r2
 8010a9a:	4a06      	ldr	r2, [pc, #24]	@ (8010ab4 <ComputeRxWindowParameters+0xc8>)
 8010a9c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    }
}
 8010aa0:	bf00      	nop
 8010aa2:	3704      	adds	r7, #4
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd90      	pop	{r4, r7, pc}
 8010aa8:	2000bfc0 	.word	0x2000bfc0
 8010aac:	2000be40 	.word	0x2000be40
 8010ab0:	2000be54 	.word	0x2000be54
 8010ab4:	2000ba68 	.word	0x2000ba68

08010ab8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010ac2:	4b13      	ldr	r3, [pc, #76]	@ (8010b10 <VerifyTxFrame+0x58>)
 8010ac4:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d01b      	beq.n	8010b04 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010acc:	1d3b      	adds	r3, r7, #4
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f002 ff18 	bl	8013904 <LoRaMacCommandsGetSizeSerializedCmds>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d001      	beq.n	8010ade <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010ada:	2313      	movs	r3, #19
 8010adc:	e013      	b.n	8010b06 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010ade:	4b0d      	ldr	r3, [pc, #52]	@ (8010b14 <VerifyTxFrame+0x5c>)
 8010ae0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8010b10 <VerifyTxFrame+0x58>)
 8010ae6:	f992 1045 	ldrsb.w	r1, [r2, #69]	@ 0x45
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	b2d2      	uxtb	r2, r2
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7ff f95c 	bl	800fdac <ValidatePayloadLength>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f083 0301 	eor.w	r3, r3, #1
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d001      	beq.n	8010b04 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010b00:	2308      	movs	r3, #8
 8010b02:	e000      	b.n	8010b06 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	2000bfc0 	.word	0x2000bfc0
 8010b14:	2000ba68 	.word	0x2000ba68

08010b18 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010b1e:	4b18      	ldr	r3, [pc, #96]	@ (8010b80 <SerializeTxFrame+0x68>)
 8010b20:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <SerializeTxFrame+0x16>
 8010b28:	2b04      	cmp	r3, #4
 8010b2a:	d011      	beq.n	8010b50 <SerializeTxFrame+0x38>
 8010b2c:	e021      	b.n	8010b72 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010b2e:	4815      	ldr	r0, [pc, #84]	@ (8010b84 <SerializeTxFrame+0x6c>)
 8010b30:	f004 fa56 	bl	8014fe0 <LoRaMacSerializerJoinRequest>
 8010b34:	4603      	mov	r3, r0
 8010b36:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010b38:	79fb      	ldrb	r3, [r7, #7]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d001      	beq.n	8010b42 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b3e:	2311      	movs	r3, #17
 8010b40:	e01a      	b.n	8010b78 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010b42:	4b0f      	ldr	r3, [pc, #60]	@ (8010b80 <SerializeTxFrame+0x68>)
 8010b44:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010b48:	461a      	mov	r2, r3
 8010b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010b80 <SerializeTxFrame+0x68>)
 8010b4c:	801a      	strh	r2, [r3, #0]
            break;
 8010b4e:	e012      	b.n	8010b76 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010b50:	480c      	ldr	r0, [pc, #48]	@ (8010b84 <SerializeTxFrame+0x6c>)
 8010b52:	f004 fac7 	bl	80150e4 <LoRaMacSerializerData>
 8010b56:	4603      	mov	r3, r0
 8010b58:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010b5a:	79fb      	ldrb	r3, [r7, #7]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d001      	beq.n	8010b64 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b60:	2311      	movs	r3, #17
 8010b62:	e009      	b.n	8010b78 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010b64:	4b06      	ldr	r3, [pc, #24]	@ (8010b80 <SerializeTxFrame+0x68>)
 8010b66:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	4b04      	ldr	r3, [pc, #16]	@ (8010b80 <SerializeTxFrame+0x68>)
 8010b6e:	801a      	strh	r2, [r3, #0]
            break;
 8010b70:	e001      	b.n	8010b76 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b72:	2303      	movs	r3, #3
 8010b74:	e000      	b.n	8010b78 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010b76:	2300      	movs	r3, #0
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3708      	adds	r7, #8
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	2000ba68 	.word	0x2000ba68
 8010b84:	2000bb70 	.word	0x2000bb70

08010b88 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b092      	sub	sp, #72	@ 0x48
 8010b8c:	af02      	add	r7, sp, #8
 8010b8e:	4603      	mov	r3, r0
 8010b90:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b92:	2303      	movs	r3, #3
 8010b94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010b98:	f7ff ff06 	bl	80109a8 <CheckForClassBCollision>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if( status != LORAMAC_STATUS_OK )
 8010ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d002      	beq.n	8010bb0 <ScheduleTx+0x28>
    {
        return status;
 8010baa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010bae:	e09d      	b.n	8010cec <ScheduleTx+0x164>
    }

    // Update back-off
    CalculateBackOff( );
 8010bb0:	f000 f908 	bl	8010dc4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010bb4:	f7ff ffb0 	bl	8010b18 <SerializeTxFrame>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if( status != LORAMAC_STATUS_OK )
 8010bbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d002      	beq.n	8010bcc <ScheduleTx+0x44>
    {
        return status;
 8010bc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010bca:	e08f      	b.n	8010cec <ScheduleTx+0x164>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010bcc:	4b49      	ldr	r3, [pc, #292]	@ (8010cf4 <ScheduleTx+0x16c>)
 8010bce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8010bd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010bd6:	4b47      	ldr	r3, [pc, #284]	@ (8010cf4 <ScheduleTx+0x16c>)
 8010bd8:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 8010bdc:	f887 3020 	strb.w	r3, [r7, #32]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010be0:	4b44      	ldr	r3, [pc, #272]	@ (8010cf4 <ScheduleTx+0x16c>)
 8010be2:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8010be6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010bea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f009 fcf2 	bl	801a5d8 <SysTimeGetMcuTime>
 8010bf4:	4638      	mov	r0, r7
 8010bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8010cf4 <ScheduleTx+0x16c>)
 8010bf8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8010bfc:	9200      	str	r2, [sp, #0]
 8010bfe:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010c02:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010c06:	ca06      	ldmia	r2, {r1, r2}
 8010c08:	f009 fc42 	bl	801a490 <SysTimeSub>
 8010c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c10:	463a      	mov	r2, r7
 8010c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c16:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010c1a:	4b36      	ldr	r3, [pc, #216]	@ (8010cf4 <ScheduleTx+0x16c>)
 8010c1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8010c20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010c24:	2300      	movs	r3, #0
 8010c26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    nextChan.Joined = true;
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010c30:	4b31      	ldr	r3, [pc, #196]	@ (8010cf8 <ScheduleTx+0x170>)
 8010c32:	881b      	ldrh	r3, [r3, #0]
 8010c34:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010c36:	4b2f      	ldr	r3, [pc, #188]	@ (8010cf4 <ScheduleTx+0x16c>)
 8010c38:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d105      	bne.n	8010c4c <ScheduleTx+0xc4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010c40:	2301      	movs	r3, #1
 8010c42:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        nextChan.Joined = false;
 8010c46:	2300      	movs	r3, #0
 8010c48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010c4c:	4b29      	ldr	r3, [pc, #164]	@ (8010cf4 <ScheduleTx+0x16c>)
 8010c4e:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
 8010c52:	f107 0110 	add.w	r1, r7, #16
 8010c56:	4b29      	ldr	r3, [pc, #164]	@ (8010cfc <ScheduleTx+0x174>)
 8010c58:	9300      	str	r3, [sp, #0]
 8010c5a:	4b29      	ldr	r3, [pc, #164]	@ (8010d00 <ScheduleTx+0x178>)
 8010c5c:	4a29      	ldr	r2, [pc, #164]	@ (8010d04 <ScheduleTx+0x17c>)
 8010c5e:	f004 fc8d 	bl	801557c <RegionNextChannel>
 8010c62:	4603      	mov	r3, r0
 8010c64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if( status != LORAMAC_STATUS_OK )
 8010c68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d028      	beq.n	8010cc2 <ScheduleTx+0x13a>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8010c70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010c74:	2b0b      	cmp	r3, #11
 8010c76:	d121      	bne.n	8010cbc <ScheduleTx+0x134>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010c78:	4b1f      	ldr	r3, [pc, #124]	@ (8010cf8 <ScheduleTx+0x170>)
 8010c7a:	f503 639a 	add.w	r3, r3, #1232	@ 0x4d0
 8010c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c82:	4313      	orrs	r3, r2
 8010c84:	d01d      	beq.n	8010cc2 <ScheduleTx+0x13a>
            {
                if( allowDelayedTx == true )
 8010c86:	7bfb      	ldrb	r3, [r7, #15]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d014      	beq.n	8010cb6 <ScheduleTx+0x12e>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8010cf8 <ScheduleTx+0x170>)
 8010c8e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c92:	f043 0320 	orr.w	r3, r3, #32
 8010c96:	4a18      	ldr	r2, [pc, #96]	@ (8010cf8 <ScheduleTx+0x170>)
 8010c98:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010c9c:	4b16      	ldr	r3, [pc, #88]	@ (8010cf8 <ScheduleTx+0x170>)
 8010c9e:	f503 639a 	add.w	r3, r3, #1232	@ 0x4d0
 8010ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca6:	4818      	ldr	r0, [pc, #96]	@ (8010d08 <ScheduleTx+0x180>)
 8010ca8:	f009 fe5e 	bl	801a968 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8010cac:	4816      	ldr	r0, [pc, #88]	@ (8010d08 <ScheduleTx+0x180>)
 8010cae:	f009 fd67 	bl	801a780 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	e01a      	b.n	8010cec <ScheduleTx+0x164>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8010cb6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010cba:	e017      	b.n	8010cec <ScheduleTx+0x164>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010cbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010cc0:	e014      	b.n	8010cec <ScheduleTx+0x164>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010cc2:	f7ff fe93 	bl	80109ec <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010cc6:	f7ff fef7 	bl	8010ab8 <VerifyTxFrame>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if( status != LORAMAC_STATUS_OK )
 8010cd0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <ScheduleTx+0x156>
    {
        return status;
 8010cd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010cdc:	e006      	b.n	8010cec <ScheduleTx+0x164>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010cde:	4b06      	ldr	r3, [pc, #24]	@ (8010cf8 <ScheduleTx+0x170>)
 8010ce0:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f000 fb73 	bl	80113d0 <SendFrameOnChannel>
 8010cea:	4603      	mov	r3, r0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3740      	adds	r7, #64	@ 0x40
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	2000bfc0 	.word	0x2000bfc0
 8010cf8:	2000ba68 	.word	0x2000ba68
 8010cfc:	2000bff8 	.word	0x2000bff8
 8010d00:	2000bf38 	.word	0x2000bf38
 8010d04:	2000bea5 	.word	0x2000bea5
 8010d08:	2000bdd8 	.word	0x2000bdd8

08010d0c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	460a      	mov	r2, r1
 8010d16:	71fb      	strb	r3, [r7, #7]
 8010d18:	4613      	mov	r3, r2
 8010d1a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010d1c:	2313      	movs	r3, #19
 8010d1e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010d20:	2300      	movs	r3, #0
 8010d22:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010d24:	4b25      	ldr	r3, [pc, #148]	@ (8010dbc <SecureFrame+0xb0>)
 8010d26:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d002      	beq.n	8010d34 <SecureFrame+0x28>
 8010d2e:	2b04      	cmp	r3, #4
 8010d30:	d011      	beq.n	8010d56 <SecureFrame+0x4a>
 8010d32:	e03b      	b.n	8010dac <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010d34:	4822      	ldr	r0, [pc, #136]	@ (8010dc0 <SecureFrame+0xb4>)
 8010d36:	f003 fd1d 	bl	8014774 <LoRaMacCryptoPrepareJoinRequest>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010d3e:	7bfb      	ldrb	r3, [r7, #15]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d001      	beq.n	8010d48 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d44:	2311      	movs	r3, #17
 8010d46:	e034      	b.n	8010db2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010d48:	4b1c      	ldr	r3, [pc, #112]	@ (8010dbc <SecureFrame+0xb0>)
 8010d4a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010d4e:	461a      	mov	r2, r3
 8010d50:	4b1a      	ldr	r3, [pc, #104]	@ (8010dbc <SecureFrame+0xb0>)
 8010d52:	801a      	strh	r2, [r3, #0]
            break;
 8010d54:	e02c      	b.n	8010db0 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010d56:	f107 0308 	add.w	r3, r7, #8
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f003 fc18 	bl	8014590 <LoRaMacCryptoGetFCntUp>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d001      	beq.n	8010d6a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010d66:	2312      	movs	r3, #18
 8010d68:	e023      	b.n	8010db2 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8010d6a:	4b14      	ldr	r3, [pc, #80]	@ (8010dbc <SecureFrame+0xb0>)
 8010d6c:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d104      	bne.n	8010d7e <SecureFrame+0x72>
 8010d74:	4b11      	ldr	r3, [pc, #68]	@ (8010dbc <SecureFrame+0xb0>)
 8010d76:	f893 343a 	ldrb.w	r3, [r3, #1082]	@ 0x43a
 8010d7a:	2b01      	cmp	r3, #1
 8010d7c:	d902      	bls.n	8010d84 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	3b01      	subs	r3, #1
 8010d82:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010d84:	68b8      	ldr	r0, [r7, #8]
 8010d86:	79ba      	ldrb	r2, [r7, #6]
 8010d88:	79f9      	ldrb	r1, [r7, #7]
 8010d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc0 <SecureFrame+0xb4>)
 8010d8c:	f003 fe20 	bl	80149d0 <LoRaMacCryptoSecureMessage>
 8010d90:	4603      	mov	r3, r0
 8010d92:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d001      	beq.n	8010d9e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010d9a:	2311      	movs	r3, #17
 8010d9c:	e009      	b.n	8010db2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010d9e:	4b07      	ldr	r3, [pc, #28]	@ (8010dbc <SecureFrame+0xb0>)
 8010da0:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010da4:	461a      	mov	r2, r3
 8010da6:	4b05      	ldr	r3, [pc, #20]	@ (8010dbc <SecureFrame+0xb0>)
 8010da8:	801a      	strh	r2, [r3, #0]
            break;
 8010daa:	e001      	b.n	8010db0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010dac:	2303      	movs	r3, #3
 8010dae:	e000      	b.n	8010db2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8010db0:	2300      	movs	r3, #0
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3710      	adds	r7, #16
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	2000ba68 	.word	0x2000ba68
 8010dc0:	2000bb70 	.word	0x2000bb70

08010dc4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010dc4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8010dc8:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010dca:	4e13      	ldr	r6, [pc, #76]	@ (8010e18 <CalculateBackOff+0x54>)
 8010dcc:	e9d6 890e 	ldrd	r8, r9, [r6, #56]	@ 0x38
 8010dd0:	ea58 0609 	orrs.w	r6, r8, r9
 8010dd4:	d11b      	bne.n	8010e0e <CalculateBackOff+0x4a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010dd6:	4e10      	ldr	r6, [pc, #64]	@ (8010e18 <CalculateBackOff+0x54>)
 8010dd8:	f8b6 612e 	ldrh.w	r6, [r6, #302]	@ 0x12e
 8010ddc:	b2b6      	uxth	r6, r6
 8010dde:	f04f 0c00 	mov.w	ip, #0
 8010de2:	4634      	mov	r4, r6
 8010de4:	4665      	mov	r5, ip
 8010de6:	1e62      	subs	r2, r4, #1
 8010de8:	f145 33ff 	adc.w	r3, r5, #4294967295
 8010dec:	4c0b      	ldr	r4, [pc, #44]	@ (8010e1c <CalculateBackOff+0x58>)
 8010dee:	f504 6488 	add.w	r4, r4, #1088	@ 0x440
 8010df2:	e9d4 4500 	ldrd	r4, r5, [r4]
 8010df6:	fb04 fc03 	mul.w	ip, r4, r3
 8010dfa:	fb02 f605 	mul.w	r6, r2, r5
 8010dfe:	4466      	add	r6, ip
 8010e00:	fba2 0104 	umull	r0, r1, r2, r4
 8010e04:	1873      	adds	r3, r6, r1
 8010e06:	4619      	mov	r1, r3
 8010e08:	4b03      	ldr	r3, [pc, #12]	@ (8010e18 <CalculateBackOff+0x54>)
 8010e0a:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
    }
}
 8010e0e:	bf00      	nop
 8010e10:	46bd      	mov	sp, r7
 8010e12:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8010e16:	4770      	bx	lr
 8010e18:	2000bfc0 	.word	0x2000bfc0
 8010e1c:	2000ba68 	.word	0x2000ba68

08010e20 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	4603      	mov	r3, r0
 8010e28:	7139      	strb	r1, [r7, #4]
 8010e2a:	71fb      	strb	r3, [r7, #7]
 8010e2c:	4613      	mov	r3, r2
 8010e2e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010e30:	79fb      	ldrb	r3, [r7, #7]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <RemoveMacCommands+0x1c>
 8010e36:	79fb      	ldrb	r3, [r7, #7]
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d10d      	bne.n	8010e58 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010e3c:	79bb      	ldrb	r3, [r7, #6]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d108      	bne.n	8010e54 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010e42:	793b      	ldrb	r3, [r7, #4]
 8010e44:	f003 0320 	and.w	r3, r3, #32
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d004      	beq.n	8010e58 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010e4e:	f002 fd2d 	bl	80138ac <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010e52:	e001      	b.n	8010e58 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010e54:	f002 fd2a 	bl	80138ac <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010e58:	bf00      	nop
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8010e60:	b5b0      	push	{r4, r5, r7, lr}
 8010e62:	b090      	sub	sp, #64	@ 0x40
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	4603      	mov	r3, r0
 8010e68:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8010e6a:	79fb      	ldrb	r3, [r7, #7]
 8010e6c:	f083 0301 	eor.w	r3, r3, #1
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d003      	beq.n	8010e7e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010e76:	4b80      	ldr	r3, [pc, #512]	@ (8011078 <ResetMacParameters+0x218>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010e7e:	4b7e      	ldr	r3, [pc, #504]	@ (8011078 <ResetMacParameters+0x218>)
 8010e80:	2200      	movs	r2, #0
 8010e82:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010e84:	4b7d      	ldr	r3, [pc, #500]	@ (801107c <ResetMacParameters+0x21c>)
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8010e8c:	4b7b      	ldr	r3, [pc, #492]	@ (801107c <ResetMacParameters+0x21c>)
 8010e8e:	2201      	movs	r2, #1
 8010e90:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010e94:	4b79      	ldr	r3, [pc, #484]	@ (801107c <ResetMacParameters+0x21c>)
 8010e96:	2201      	movs	r2, #1
 8010e98:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
    MacCtx.AckTimeoutRetry = false;
 8010e9c:	4b77      	ldr	r3, [pc, #476]	@ (801107c <ResetMacParameters+0x21c>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010ea4:	4b74      	ldr	r3, [pc, #464]	@ (8011078 <ResetMacParameters+0x218>)
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010eac:	4b72      	ldr	r3, [pc, #456]	@ (8011078 <ResetMacParameters+0x218>)
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010eb4:	4b70      	ldr	r3, [pc, #448]	@ (8011078 <ResetMacParameters+0x218>)
 8010eb6:	f993 20ec 	ldrsb.w	r2, [r3, #236]	@ 0xec
 8010eba:	4b6f      	ldr	r3, [pc, #444]	@ (8011078 <ResetMacParameters+0x218>)
 8010ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010ec0:	4b6d      	ldr	r3, [pc, #436]	@ (8011078 <ResetMacParameters+0x218>)
 8010ec2:	f993 20ed 	ldrsb.w	r2, [r3, #237]	@ 0xed
 8010ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8011078 <ResetMacParameters+0x218>)
 8010ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8011078 <ResetMacParameters+0x218>)
 8010ece:	f893 20c1 	ldrb.w	r2, [r3, #193]	@ 0xc1
 8010ed2:	4b69      	ldr	r3, [pc, #420]	@ (8011078 <ResetMacParameters+0x218>)
 8010ed4:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010ed8:	4b67      	ldr	r3, [pc, #412]	@ (8011078 <ResetMacParameters+0x218>)
 8010eda:	4a67      	ldr	r2, [pc, #412]	@ (8011078 <ResetMacParameters+0x218>)
 8010edc:	337c      	adds	r3, #124	@ 0x7c
 8010ede:	32c4      	adds	r2, #196	@ 0xc4
 8010ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ee4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010ee8:	4b63      	ldr	r3, [pc, #396]	@ (8011078 <ResetMacParameters+0x218>)
 8010eea:	4a63      	ldr	r2, [pc, #396]	@ (8011078 <ResetMacParameters+0x218>)
 8010eec:	3384      	adds	r3, #132	@ 0x84
 8010eee:	32cc      	adds	r2, #204	@ 0xcc
 8010ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ef4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8011078 <ResetMacParameters+0x218>)
 8010efa:	f893 20d4 	ldrb.w	r2, [r3, #212]	@ 0xd4
 8010efe:	4b5e      	ldr	r3, [pc, #376]	@ (8011078 <ResetMacParameters+0x218>)
 8010f00:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010f04:	4b5c      	ldr	r3, [pc, #368]	@ (8011078 <ResetMacParameters+0x218>)
 8010f06:	f893 20d5 	ldrb.w	r2, [r3, #213]	@ 0xd5
 8010f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8011078 <ResetMacParameters+0x218>)
 8010f0c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010f10:	4b59      	ldr	r3, [pc, #356]	@ (8011078 <ResetMacParameters+0x218>)
 8010f12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010f16:	4a58      	ldr	r2, [pc, #352]	@ (8011078 <ResetMacParameters+0x218>)
 8010f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010f1c:	4b56      	ldr	r3, [pc, #344]	@ (8011078 <ResetMacParameters+0x218>)
 8010f1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010f22:	4a55      	ldr	r2, [pc, #340]	@ (8011078 <ResetMacParameters+0x218>)
 8010f24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010f28:	4b53      	ldr	r3, [pc, #332]	@ (8011078 <ResetMacParameters+0x218>)
 8010f2a:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 8010f2e:	4b52      	ldr	r3, [pc, #328]	@ (8011078 <ResetMacParameters+0x218>)
 8010f30:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010f34:	4b50      	ldr	r3, [pc, #320]	@ (8011078 <ResetMacParameters+0x218>)
 8010f36:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	@ 0xe2
 8010f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8011078 <ResetMacParameters+0x218>)
 8010f3c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a

    MacCtx.NodeAckRequested = false;
 8010f40:	4b4e      	ldr	r3, [pc, #312]	@ (801107c <ResetMacParameters+0x21c>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    Nvm.MacGroup1.SrvAckRequested = false;
 8010f48:	4b4b      	ldr	r3, [pc, #300]	@ (8011078 <ResetMacParameters+0x218>)
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8010f50:	4b49      	ldr	r3, [pc, #292]	@ (8011078 <ResetMacParameters+0x218>)
 8010f52:	2200      	movs	r2, #0
 8010f54:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8010f58:	4b47      	ldr	r3, [pc, #284]	@ (8011078 <ResetMacParameters+0x218>)
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    Nvm.MacGroup2.ForceRejoinType = 0;
 8010f60:	4b45      	ldr	r3, [pc, #276]	@ (8011078 <ResetMacParameters+0x218>)
 8010f62:	2200      	movs	r2, #0
 8010f64:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8010f68:	4b43      	ldr	r3, [pc, #268]	@ (8011078 <ResetMacParameters+0x218>)
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8010f70:	4b41      	ldr	r3, [pc, #260]	@ (8011078 <ResetMacParameters+0x218>)
 8010f72:	2200      	movs	r2, #0
 8010f74:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8010f78:	4b3f      	ldr	r3, [pc, #252]	@ (8011078 <ResetMacParameters+0x218>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8010f80:	4b3d      	ldr	r3, [pc, #244]	@ (8011078 <ResetMacParameters+0x218>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	f883 2152 	strb.w	r2, [r3, #338]	@ 0x152
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8010f88:	4b3b      	ldr	r3, [pc, #236]	@ (8011078 <ResetMacParameters+0x218>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f883 2153 	strb.w	r2, [r3, #339]	@ 0x153

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010f90:	2301      	movs	r3, #1
 8010f92:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010f94:	4b3a      	ldr	r3, [pc, #232]	@ (8011080 <ResetMacParameters+0x220>)
 8010f96:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010f98:	4b3a      	ldr	r3, [pc, #232]	@ (8011084 <ResetMacParameters+0x224>)
 8010f9a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010f9c:	4b36      	ldr	r3, [pc, #216]	@ (8011078 <ResetMacParameters+0x218>)
 8010f9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8010fa2:	f107 020c 	add.w	r2, r7, #12
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f004 f9d3 	bl	8015354 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010fae:	4b33      	ldr	r3, [pc, #204]	@ (801107c <ResetMacParameters+0x21c>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f883 243d 	strb.w	r2, [r3, #1085]	@ 0x43d

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010fb6:	4b31      	ldr	r3, [pc, #196]	@ (801107c <ResetMacParameters+0x21c>)
 8010fb8:	f893 243d 	ldrb.w	r2, [r3, #1085]	@ 0x43d
 8010fbc:	4b2f      	ldr	r3, [pc, #188]	@ (801107c <ResetMacParameters+0x21c>)
 8010fbe:	f883 23ec 	strb.w	r2, [r3, #1004]	@ 0x3ec
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8011078 <ResetMacParameters+0x218>)
 8010fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010fc6:	4a2d      	ldr	r2, [pc, #180]	@ (801107c <ResetMacParameters+0x21c>)
 8010fc8:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8011078 <ResetMacParameters+0x218>)
 8010fce:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 8010fd2:	4b2a      	ldr	r3, [pc, #168]	@ (801107c <ResetMacParameters+0x21c>)
 8010fd4:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010fd8:	4b27      	ldr	r3, [pc, #156]	@ (8011078 <ResetMacParameters+0x218>)
 8010fda:	f893 209c 	ldrb.w	r2, [r3, #156]	@ 0x9c
 8010fde:	4b27      	ldr	r3, [pc, #156]	@ (801107c <ResetMacParameters+0x21c>)
 8010fe0:	f883 23fd 	strb.w	r2, [r3, #1021]	@ 0x3fd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010fe4:	4b25      	ldr	r3, [pc, #148]	@ (801107c <ResetMacParameters+0x21c>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	f883 23fe 	strb.w	r2, [r3, #1022]	@ 0x3fe
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010fec:	4b23      	ldr	r3, [pc, #140]	@ (801107c <ResetMacParameters+0x21c>)
 8010fee:	2201      	movs	r2, #1
 8010ff0:	f883 23ff 	strb.w	r2, [r3, #1023]	@ 0x3ff
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010ff4:	4a21      	ldr	r2, [pc, #132]	@ (801107c <ResetMacParameters+0x21c>)
 8010ff6:	4b21      	ldr	r3, [pc, #132]	@ (801107c <ResetMacParameters+0x21c>)
 8010ff8:	f502 6480 	add.w	r4, r2, #1024	@ 0x400
 8010ffc:	f503 757b 	add.w	r5, r3, #1004	@ 0x3ec
 8011000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011004:	682b      	ldr	r3, [r5, #0]
 8011006:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011008:	4b1c      	ldr	r3, [pc, #112]	@ (801107c <ResetMacParameters+0x21c>)
 801100a:	2201      	movs	r2, #1
 801100c:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011010:	4b1a      	ldr	r3, [pc, #104]	@ (801107c <ResetMacParameters+0x21c>)
 8011012:	2202      	movs	r2, #2
 8011014:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011018:	2300      	movs	r3, #0
 801101a:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 801101c:	2300      	movs	r3, #0
 801101e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8011020:	4b16      	ldr	r3, [pc, #88]	@ (801107c <ResetMacParameters+0x21c>)
 8011022:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011026:	2b00      	cmp	r3, #0
 8011028:	d009      	beq.n	801103e <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801102a:	4b14      	ldr	r3, [pc, #80]	@ (801107c <ResetMacParameters+0x21c>)
 801102c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011034:	4b11      	ldr	r3, [pc, #68]	@ (801107c <ResetMacParameters+0x21c>)
 8011036:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801103a:	695b      	ldr	r3, [r3, #20]
 801103c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801103e:	4b12      	ldr	r3, [pc, #72]	@ (8011088 <ResetMacParameters+0x228>)
 8011040:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011042:	4b12      	ldr	r3, [pc, #72]	@ (801108c <ResetMacParameters+0x22c>)
 8011044:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011046:	4b12      	ldr	r3, [pc, #72]	@ (8011090 <ResetMacParameters+0x230>)
 8011048:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801104a:	4b12      	ldr	r3, [pc, #72]	@ (8011094 <ResetMacParameters+0x234>)
 801104c:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801104e:	4b12      	ldr	r3, [pc, #72]	@ (8011098 <ResetMacParameters+0x238>)
 8011050:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011052:	4b12      	ldr	r3, [pc, #72]	@ (801109c <ResetMacParameters+0x23c>)
 8011054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011056:	4b12      	ldr	r3, [pc, #72]	@ (80110a0 <ResetMacParameters+0x240>)
 8011058:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801105a:	4b12      	ldr	r3, [pc, #72]	@ (80110a4 <ResetMacParameters+0x244>)
 801105c:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801105e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8011062:	f107 0318 	add.w	r3, r7, #24
 8011066:	4a10      	ldr	r2, [pc, #64]	@ (80110a8 <ResetMacParameters+0x248>)
 8011068:	4618      	mov	r0, r3
 801106a:	f002 f921 	bl	80132b0 <LoRaMacClassBInit>
}
 801106e:	bf00      	nop
 8011070:	3740      	adds	r7, #64	@ 0x40
 8011072:	46bd      	mov	sp, r7
 8011074:	bdb0      	pop	{r4, r5, r7, pc}
 8011076:	bf00      	nop
 8011078:	2000bfc0 	.word	0x2000bfc0
 801107c:	2000ba68 	.word	0x2000ba68
 8011080:	2000c1f0 	.word	0x2000c1f0
 8011084:	2000c318 	.word	0x2000c318
 8011088:	2000bf10 	.word	0x2000bf10
 801108c:	2000beb0 	.word	0x2000beb0
 8011090:	2000bee8 	.word	0x2000bee8
 8011094:	2000bf35 	.word	0x2000bf35
 8011098:	2000c0b4 	.word	0x2000c0b4
 801109c:	2000c018 	.word	0x2000c018
 80110a0:	2000c01c 	.word	0x2000c01c
 80110a4:	2000c0b8 	.word	0x2000c0b8
 80110a8:	2000c7bc 	.word	0x2000c7bc

080110ac <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f009 fbe6 	bl	801a888 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80110bc:	4b11      	ldr	r3, [pc, #68]	@ (8011104 <RxWindowSetup+0x58>)
 80110be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110c0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80110c2:	4b11      	ldr	r3, [pc, #68]	@ (8011108 <RxWindowSetup+0x5c>)
 80110c4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80110c8:	4a10      	ldr	r2, [pc, #64]	@ (801110c <RxWindowSetup+0x60>)
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f004 f9a9 	bl	8015424 <RegionRxConfig>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d010      	beq.n	80110fa <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80110d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011110 <RxWindowSetup+0x64>)
 80110da:	f893 244c 	ldrb.w	r2, [r3, #1100]	@ 0x44c
 80110de:	4b0c      	ldr	r3, [pc, #48]	@ (8011110 <RxWindowSetup+0x64>)
 80110e0:	f883 24aa 	strb.w	r2, [r3, #1194]	@ 0x4aa
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80110e4:	4b07      	ldr	r3, [pc, #28]	@ (8011104 <RxWindowSetup+0x58>)
 80110e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110e8:	4a07      	ldr	r2, [pc, #28]	@ (8011108 <RxWindowSetup+0x5c>)
 80110ea:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80110ec:	4610      	mov	r0, r2
 80110ee:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	7cda      	ldrb	r2, [r3, #19]
 80110f4:	4b06      	ldr	r3, [pc, #24]	@ (8011110 <RxWindowSetup+0x64>)
 80110f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
    }
}
 80110fa:	bf00      	nop
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	08022c78 	.word	0x08022c78
 8011108:	2000bfc0 	.word	0x2000bfc0
 801110c:	2000beb4 	.word	0x2000beb4
 8011110:	2000ba68 	.word	0x2000ba68

08011114 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011114:	b590      	push	{r4, r7, lr}
 8011116:	b083      	sub	sp, #12
 8011118:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801111a:	4b1b      	ldr	r3, [pc, #108]	@ (8011188 <OpenContinuousRxCWindow+0x74>)
 801111c:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011120:	4b19      	ldr	r3, [pc, #100]	@ (8011188 <OpenContinuousRxCWindow+0x74>)
 8011122:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011126:	b259      	sxtb	r1, r3
 8011128:	4b17      	ldr	r3, [pc, #92]	@ (8011188 <OpenContinuousRxCWindow+0x74>)
 801112a:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 801112e:	4b16      	ldr	r3, [pc, #88]	@ (8011188 <OpenContinuousRxCWindow+0x74>)
 8011130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011132:	4c16      	ldr	r4, [pc, #88]	@ (801118c <OpenContinuousRxCWindow+0x78>)
 8011134:	9400      	str	r4, [sp, #0]
 8011136:	f004 f95b 	bl	80153f0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801113a:	4b15      	ldr	r3, [pc, #84]	@ (8011190 <OpenContinuousRxCWindow+0x7c>)
 801113c:	2202      	movs	r2, #2
 801113e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011142:	4b13      	ldr	r3, [pc, #76]	@ (8011190 <OpenContinuousRxCWindow+0x7c>)
 8011144:	2201      	movs	r2, #1
 8011146:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801114a:	4b0f      	ldr	r3, [pc, #60]	@ (8011188 <OpenContinuousRxCWindow+0x74>)
 801114c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011150:	4a10      	ldr	r2, [pc, #64]	@ (8011194 <OpenContinuousRxCWindow+0x80>)
 8011152:	490e      	ldr	r1, [pc, #56]	@ (801118c <OpenContinuousRxCWindow+0x78>)
 8011154:	4618      	mov	r0, r3
 8011156:	f004 f965 	bl	8015424 <RegionRxConfig>
 801115a:	4603      	mov	r3, r0
 801115c:	2b00      	cmp	r3, #0
 801115e:	d00f      	beq.n	8011180 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011160:	4b0b      	ldr	r3, [pc, #44]	@ (8011190 <OpenContinuousRxCWindow+0x7c>)
 8011162:	f893 244c 	ldrb.w	r2, [r3, #1100]	@ 0x44c
 8011166:	4b0a      	ldr	r3, [pc, #40]	@ (8011190 <OpenContinuousRxCWindow+0x7c>)
 8011168:	f883 24aa 	strb.w	r2, [r3, #1194]	@ 0x4aa
        Radio.Rx( 0 ); // Continuous mode
 801116c:	4b0a      	ldr	r3, [pc, #40]	@ (8011198 <OpenContinuousRxCWindow+0x84>)
 801116e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011170:	2000      	movs	r0, #0
 8011172:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8011174:	4b06      	ldr	r3, [pc, #24]	@ (8011190 <OpenContinuousRxCWindow+0x7c>)
 8011176:	f893 2413 	ldrb.w	r2, [r3, #1043]	@ 0x413
 801117a:	4b05      	ldr	r3, [pc, #20]	@ (8011190 <OpenContinuousRxCWindow+0x7c>)
 801117c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
    }
}
 8011180:	bf00      	nop
 8011182:	3704      	adds	r7, #4
 8011184:	46bd      	mov	sp, r7
 8011186:	bd90      	pop	{r4, r7, pc}
 8011188:	2000bfc0 	.word	0x2000bfc0
 801118c:	2000be68 	.word	0x2000be68
 8011190:	2000ba68 	.word	0x2000ba68
 8011194:	2000beb4 	.word	0x2000beb4
 8011198:	08022c78 	.word	0x08022c78

0801119c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b088      	sub	sp, #32
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	60b9      	str	r1, [r7, #8]
 80111a6:	603b      	str	r3, [r7, #0]
 80111a8:	4613      	mov	r3, r2
 80111aa:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80111ac:	4b81      	ldr	r3, [pc, #516]	@ (80113b4 <PrepareFrame+0x218>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80111b2:	4b80      	ldr	r3, [pc, #512]	@ (80113b4 <PrepareFrame+0x218>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
    uint32_t fCntUp = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80111be:	2300      	movs	r3, #0
 80111c0:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d101      	bne.n	80111d0 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80111d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80111d2:	461a      	mov	r2, r3
 80111d4:	6839      	ldr	r1, [r7, #0]
 80111d6:	4878      	ldr	r0, [pc, #480]	@ (80113b8 <PrepareFrame+0x21c>)
 80111d8:	f008 ff17 	bl	801a00a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80111dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80111de:	b2da      	uxtb	r2, r3
 80111e0:	4b74      	ldr	r3, [pc, #464]	@ (80113b4 <PrepareFrame+0x218>)
 80111e2:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	781a      	ldrb	r2, [r3, #0]
 80111ea:	4b72      	ldr	r3, [pc, #456]	@ (80113b4 <PrepareFrame+0x218>)
 80111ec:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	2b07      	cmp	r3, #7
 80111fa:	f000 80b9 	beq.w	8011370 <PrepareFrame+0x1d4>
 80111fe:	2b07      	cmp	r3, #7
 8011200:	f300 80ce 	bgt.w	80113a0 <PrepareFrame+0x204>
 8011204:	2b02      	cmp	r3, #2
 8011206:	d006      	beq.n	8011216 <PrepareFrame+0x7a>
 8011208:	2b04      	cmp	r3, #4
 801120a:	f040 80c9 	bne.w	80113a0 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801120e:	4b69      	ldr	r3, [pc, #420]	@ (80113b4 <PrepareFrame+0x218>)
 8011210:	2201      	movs	r2, #1
 8011212:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8011216:	4b67      	ldr	r3, [pc, #412]	@ (80113b4 <PrepareFrame+0x218>)
 8011218:	2204      	movs	r2, #4
 801121a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801121e:	4b65      	ldr	r3, [pc, #404]	@ (80113b4 <PrepareFrame+0x218>)
 8011220:	4a66      	ldr	r2, [pc, #408]	@ (80113bc <PrepareFrame+0x220>)
 8011222:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011226:	4b63      	ldr	r3, [pc, #396]	@ (80113b4 <PrepareFrame+0x218>)
 8011228:	22ff      	movs	r2, #255	@ 0xff
 801122a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	781a      	ldrb	r2, [r3, #0]
 8011232:	4b60      	ldr	r3, [pc, #384]	@ (80113b4 <PrepareFrame+0x218>)
 8011234:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011238:	4a5e      	ldr	r2, [pc, #376]	@ (80113b4 <PrepareFrame+0x218>)
 801123a:	79fb      	ldrb	r3, [r7, #7]
 801123c:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011240:	4b5f      	ldr	r3, [pc, #380]	@ (80113c0 <PrepareFrame+0x224>)
 8011242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011246:	4a5b      	ldr	r2, [pc, #364]	@ (80113b4 <PrepareFrame+0x218>)
 8011248:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	781a      	ldrb	r2, [r3, #0]
 8011250:	4b58      	ldr	r3, [pc, #352]	@ (80113b4 <PrepareFrame+0x218>)
 8011252:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011256:	4b57      	ldr	r3, [pc, #348]	@ (80113b4 <PrepareFrame+0x218>)
 8011258:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 801125c:	4b55      	ldr	r3, [pc, #340]	@ (80113b4 <PrepareFrame+0x218>)
 801125e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8011262:	4b54      	ldr	r3, [pc, #336]	@ (80113b4 <PrepareFrame+0x218>)
 8011264:	4a54      	ldr	r2, [pc, #336]	@ (80113b8 <PrepareFrame+0x21c>)
 8011266:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801126a:	f107 0318 	add.w	r3, r7, #24
 801126e:	4618      	mov	r0, r3
 8011270:	f003 f98e 	bl	8014590 <LoRaMacCryptoGetFCntUp>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d001      	beq.n	801127e <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801127a:	2312      	movs	r3, #18
 801127c:	e096      	b.n	80113ac <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801127e:	69bb      	ldr	r3, [r7, #24]
 8011280:	b29a      	uxth	r2, r3
 8011282:	4b4c      	ldr	r3, [pc, #304]	@ (80113b4 <PrepareFrame+0x218>)
 8011284:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8011288:	4b4a      	ldr	r3, [pc, #296]	@ (80113b4 <PrepareFrame+0x218>)
 801128a:	2200      	movs	r2, #0
 801128c:	f883 246d 	strb.w	r2, [r3, #1133]	@ 0x46d
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8011290:	4b48      	ldr	r3, [pc, #288]	@ (80113b4 <PrepareFrame+0x218>)
 8011292:	2200      	movs	r2, #0
 8011294:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	4a46      	ldr	r2, [pc, #280]	@ (80113b4 <PrepareFrame+0x218>)
 801129c:	f8c2 3478 	str.w	r3, [r2, #1144]	@ 0x478

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80112a0:	f107 0314 	add.w	r3, r7, #20
 80112a4:	4618      	mov	r0, r3
 80112a6:	f002 fb2d 	bl	8013904 <LoRaMacCommandsGetSizeSerializedCmds>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d001      	beq.n	80112b4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112b0:	2313      	movs	r3, #19
 80112b2:	e07b      	b.n	80113ac <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 80112b4:	697b      	ldr	r3, [r7, #20]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d074      	beq.n	80113a4 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80112ba:	4b41      	ldr	r3, [pc, #260]	@ (80113c0 <PrepareFrame+0x224>)
 80112bc:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fe fd4d 	bl	800fd60 <GetMaxAppPayloadWithoutFOptsLength>
 80112c6:	4603      	mov	r3, r0
 80112c8:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80112ca:	4b3a      	ldr	r3, [pc, #232]	@ (80113b4 <PrepareFrame+0x218>)
 80112cc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d01d      	beq.n	8011310 <PrepareFrame+0x174>
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	2b0f      	cmp	r3, #15
 80112d8:	d81a      	bhi.n	8011310 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80112da:	f107 0314 	add.w	r3, r7, #20
 80112de:	4a39      	ldr	r2, [pc, #228]	@ (80113c4 <PrepareFrame+0x228>)
 80112e0:	4619      	mov	r1, r3
 80112e2:	200f      	movs	r0, #15
 80112e4:	f002 fb26 	bl	8013934 <LoRaMacCommandsSerializeCmds>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d001      	beq.n	80112f2 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112ee:	2313      	movs	r3, #19
 80112f0:	e05c      	b.n	80113ac <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	f003 030f 	and.w	r3, r3, #15
 80112f8:	b2d9      	uxtb	r1, r3
 80112fa:	68ba      	ldr	r2, [r7, #8]
 80112fc:	7813      	ldrb	r3, [r2, #0]
 80112fe:	f361 0303 	bfi	r3, r1, #0, #4
 8011302:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	781a      	ldrb	r2, [r3, #0]
 8011308:	4b2a      	ldr	r3, [pc, #168]	@ (80113b4 <PrepareFrame+0x218>)
 801130a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801130e:	e049      	b.n	80113a4 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011310:	4b28      	ldr	r3, [pc, #160]	@ (80113b4 <PrepareFrame+0x218>)
 8011312:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011316:	2b00      	cmp	r3, #0
 8011318:	d010      	beq.n	801133c <PrepareFrame+0x1a0>
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	2b0f      	cmp	r3, #15
 801131e:	d90d      	bls.n	801133c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011320:	7ffb      	ldrb	r3, [r7, #31]
 8011322:	f107 0114 	add.w	r1, r7, #20
 8011326:	4a28      	ldr	r2, [pc, #160]	@ (80113c8 <PrepareFrame+0x22c>)
 8011328:	4618      	mov	r0, r3
 801132a:	f002 fb03 	bl	8013934 <LoRaMacCommandsSerializeCmds>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d001      	beq.n	8011338 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011334:	2313      	movs	r3, #19
 8011336:	e039      	b.n	80113ac <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011338:	230a      	movs	r3, #10
 801133a:	e037      	b.n	80113ac <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801133c:	7ffb      	ldrb	r3, [r7, #31]
 801133e:	f107 0114 	add.w	r1, r7, #20
 8011342:	4a21      	ldr	r2, [pc, #132]	@ (80113c8 <PrepareFrame+0x22c>)
 8011344:	4618      	mov	r0, r3
 8011346:	f002 faf5 	bl	8013934 <LoRaMacCommandsSerializeCmds>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d001      	beq.n	8011354 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011350:	2313      	movs	r3, #19
 8011352:	e02b      	b.n	80113ac <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011354:	4b17      	ldr	r3, [pc, #92]	@ (80113b4 <PrepareFrame+0x218>)
 8011356:	2200      	movs	r2, #0
 8011358:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 801135c:	4b15      	ldr	r3, [pc, #84]	@ (80113b4 <PrepareFrame+0x218>)
 801135e:	4a1a      	ldr	r2, [pc, #104]	@ (80113c8 <PrepareFrame+0x22c>)
 8011360:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	b2da      	uxtb	r2, r3
 8011368:	4b12      	ldr	r3, [pc, #72]	@ (80113b4 <PrepareFrame+0x218>)
 801136a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 801136e:	e019      	b.n	80113a4 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d018      	beq.n	80113a8 <PrepareFrame+0x20c>
 8011376:	4b0f      	ldr	r3, [pc, #60]	@ (80113b4 <PrepareFrame+0x218>)
 8011378:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801137c:	2b00      	cmp	r3, #0
 801137e:	d013      	beq.n	80113a8 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8011380:	4812      	ldr	r0, [pc, #72]	@ (80113cc <PrepareFrame+0x230>)
 8011382:	4b0c      	ldr	r3, [pc, #48]	@ (80113b4 <PrepareFrame+0x218>)
 8011384:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011388:	461a      	mov	r2, r3
 801138a:	6839      	ldr	r1, [r7, #0]
 801138c:	f008 fe3d 	bl	801a00a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8011390:	4b08      	ldr	r3, [pc, #32]	@ (80113b4 <PrepareFrame+0x218>)
 8011392:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011396:	3301      	adds	r3, #1
 8011398:	b29a      	uxth	r2, r3
 801139a:	4b06      	ldr	r3, [pc, #24]	@ (80113b4 <PrepareFrame+0x218>)
 801139c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801139e:	e003      	b.n	80113a8 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80113a0:	2302      	movs	r3, #2
 80113a2:	e003      	b.n	80113ac <PrepareFrame+0x210>
            break;
 80113a4:	bf00      	nop
 80113a6:	e000      	b.n	80113aa <PrepareFrame+0x20e>
            break;
 80113a8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80113aa:	2300      	movs	r3, #0
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3720      	adds	r7, #32
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	2000ba68 	.word	0x2000ba68
 80113b8:	2000bba0 	.word	0x2000bba0
 80113bc:	2000ba6a 	.word	0x2000ba6a
 80113c0:	2000bfc0 	.word	0x2000bfc0
 80113c4:	2000bb80 	.word	0x2000bb80
 80113c8:	2000bf40 	.word	0x2000bf40
 80113cc:	2000ba6b 	.word	0x2000ba6b

080113d0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b08c      	sub	sp, #48	@ 0x30
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113da:	2303      	movs	r3, #3
 80113dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80113e0:	2300      	movs	r3, #0
 80113e2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80113e4:	79fb      	ldrb	r3, [r7, #7]
 80113e6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80113e8:	4b4e      	ldr	r3, [pc, #312]	@ (8011524 <SendFrameOnChannel+0x154>)
 80113ea:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 80113ee:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80113f0:	4b4c      	ldr	r3, [pc, #304]	@ (8011524 <SendFrameOnChannel+0x154>)
 80113f2:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
 80113f6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80113f8:	4b4a      	ldr	r3, [pc, #296]	@ (8011524 <SendFrameOnChannel+0x154>)
 80113fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80113fe:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011400:	4b48      	ldr	r3, [pc, #288]	@ (8011524 <SendFrameOnChannel+0x154>)
 8011402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011406:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011408:	4b47      	ldr	r3, [pc, #284]	@ (8011528 <SendFrameOnChannel+0x158>)
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801140e:	4b45      	ldr	r3, [pc, #276]	@ (8011524 <SendFrameOnChannel+0x154>)
 8011410:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
 8011414:	f107 020f 	add.w	r2, r7, #15
 8011418:	f107 0110 	add.w	r1, r7, #16
 801141c:	4b43      	ldr	r3, [pc, #268]	@ (801152c <SendFrameOnChannel+0x15c>)
 801141e:	f004 f816 	bl	801544e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011422:	4b41      	ldr	r3, [pc, #260]	@ (8011528 <SendFrameOnChannel+0x158>)
 8011424:	2201      	movs	r2, #1
 8011426:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801142a:	4b3e      	ldr	r3, [pc, #248]	@ (8011524 <SendFrameOnChannel+0x154>)
 801142c:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 8011430:	b2da      	uxtb	r2, r3
 8011432:	4b3d      	ldr	r3, [pc, #244]	@ (8011528 <SendFrameOnChannel+0x158>)
 8011434:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
    MacCtx.McpsConfirm.TxPower = txPower;
 8011438:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801143c:	4b3a      	ldr	r3, [pc, #232]	@ (8011528 <SendFrameOnChannel+0x158>)
 801143e:	f883 246b 	strb.w	r2, [r3, #1131]	@ 0x46b
    MacCtx.McpsConfirm.Channel = channel;
 8011442:	79fb      	ldrb	r3, [r7, #7]
 8011444:	4a38      	ldr	r2, [pc, #224]	@ (8011528 <SendFrameOnChannel+0x158>)
 8011446:	f8c2 347c 	str.w	r3, [r2, #1148]	@ 0x47c

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801144a:	4b37      	ldr	r3, [pc, #220]	@ (8011528 <SendFrameOnChannel+0x158>)
 801144c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011454:	4934      	ldr	r1, [pc, #208]	@ (8011528 <SendFrameOnChannel+0x158>)
 8011456:	f501 618e 	add.w	r1, r1, #1136	@ 0x470
 801145a:	e9c1 2300 	strd	r2, r3, [r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801145e:	4b32      	ldr	r3, [pc, #200]	@ (8011528 <SendFrameOnChannel+0x158>)
 8011460:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011468:	492f      	ldr	r1, [pc, #188]	@ (8011528 <SendFrameOnChannel+0x158>)
 801146a:	f501 6192 	add.w	r1, r1, #1168	@ 0x490
 801146e:	e941 2302 	strd	r2, r3, [r1, #-8]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011472:	f001 ff95 	bl	80133a0 <LoRaMacClassBIsBeaconModeActive>
 8011476:	4603      	mov	r3, r0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d010      	beq.n	801149e <SendFrameOnChannel+0xce>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801147c:	4b2a      	ldr	r3, [pc, #168]	@ (8011528 <SendFrameOnChannel+0x158>)
 801147e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011486:	4610      	mov	r0, r2
 8011488:	4619      	mov	r1, r3
 801148a:	f002 f801 	bl	8013490 <LoRaMacClassBIsUplinkCollision>
 801148e:	e9c7 0108 	strd	r0, r1, [r7, #32]

        if( collisionTime > 0 )
 8011492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8011496:	4313      	orrs	r3, r2
 8011498:	d001      	beq.n	801149e <SendFrameOnChannel+0xce>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 801149a:	2310      	movs	r3, #16
 801149c:	e03e      	b.n	801151c <SendFrameOnChannel+0x14c>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801149e:	4b21      	ldr	r3, [pc, #132]	@ (8011524 <SendFrameOnChannel+0x154>)
 80114a0:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d101      	bne.n	80114ac <SendFrameOnChannel+0xdc>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80114a8:	f002 f802 	bl	80134b0 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80114ac:	f001 ff8b 	bl	80133c6 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80114b0:	4b1c      	ldr	r3, [pc, #112]	@ (8011524 <SendFrameOnChannel+0x154>)
 80114b2:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	4a1b      	ldr	r2, [pc, #108]	@ (8011528 <SendFrameOnChannel+0x158>)
 80114ba:	f892 243d 	ldrb.w	r2, [r2, #1085]	@ 0x43d
 80114be:	4611      	mov	r1, r2
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ff fc23 	bl	8010d0c <SecureFrame>
 80114c6:	4603      	mov	r3, r0
 80114c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if( status != LORAMAC_STATUS_OK )
 80114cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d002      	beq.n	80114da <SendFrameOnChannel+0x10a>
    {
        return status;
 80114d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80114d8:	e020      	b.n	801151c <SendFrameOnChannel+0x14c>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80114da:	4b13      	ldr	r3, [pc, #76]	@ (8011528 <SendFrameOnChannel+0x158>)
 80114dc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80114e0:	f043 0302 	orr.w	r3, r3, #2
 80114e4:	4a10      	ldr	r2, [pc, #64]	@ (8011528 <SendFrameOnChannel+0x158>)
 80114e6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80114ea:	4b0f      	ldr	r3, [pc, #60]	@ (8011528 <SendFrameOnChannel+0x158>)
 80114ec:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 80114f0:	f083 0301 	eor.w	r3, r3, #1
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d007      	beq.n	801150a <SendFrameOnChannel+0x13a>
    {
        MacCtx.ChannelsNbTransCounter++;
 80114fa:	4b0b      	ldr	r3, [pc, #44]	@ (8011528 <SendFrameOnChannel+0x158>)
 80114fc:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8011500:	3301      	adds	r3, #1
 8011502:	b2da      	uxtb	r2, r3
 8011504:	4b08      	ldr	r3, [pc, #32]	@ (8011528 <SendFrameOnChannel+0x158>)
 8011506:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 801150a:	4b09      	ldr	r3, [pc, #36]	@ (8011530 <SendFrameOnChannel+0x160>)
 801150c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801150e:	4a06      	ldr	r2, [pc, #24]	@ (8011528 <SendFrameOnChannel+0x158>)
 8011510:	8812      	ldrh	r2, [r2, #0]
 8011512:	b2d2      	uxtb	r2, r2
 8011514:	4611      	mov	r1, r2
 8011516:	4807      	ldr	r0, [pc, #28]	@ (8011534 <SendFrameOnChannel+0x164>)
 8011518:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3730      	adds	r7, #48	@ 0x30
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	2000bfc0 	.word	0x2000bfc0
 8011528:	2000ba68 	.word	0x2000ba68
 801152c:	2000bea8 	.word	0x2000bea8
 8011530:	08022c78 	.word	0x08022c78
 8011534:	2000ba6a 	.word	0x2000ba6a

08011538 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8011542:	4b16      	ldr	r3, [pc, #88]	@ (801159c <SetTxContinuousWave+0x64>)
 8011544:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 8011548:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801154a:	4b15      	ldr	r3, [pc, #84]	@ (80115a0 <SetTxContinuousWave+0x68>)
 801154c:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 8011550:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011552:	4b13      	ldr	r3, [pc, #76]	@ (80115a0 <SetTxContinuousWave+0x68>)
 8011554:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
 8011558:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801155a:	4b11      	ldr	r3, [pc, #68]	@ (80115a0 <SetTxContinuousWave+0x68>)
 801155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011560:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011562:	4b0f      	ldr	r3, [pc, #60]	@ (80115a0 <SetTxContinuousWave+0x68>)
 8011564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011568:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801156a:	88fb      	ldrh	r3, [r7, #6]
 801156c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801156e:	4b0c      	ldr	r3, [pc, #48]	@ (80115a0 <SetTxContinuousWave+0x68>)
 8011570:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011574:	f107 0208 	add.w	r2, r7, #8
 8011578:	4611      	mov	r1, r2
 801157a:	4618      	mov	r0, r3
 801157c:	f004 f816 	bl	80155ac <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011580:	4b06      	ldr	r3, [pc, #24]	@ (801159c <SetTxContinuousWave+0x64>)
 8011582:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011586:	f043 0302 	orr.w	r3, r3, #2
 801158a:	4a04      	ldr	r2, [pc, #16]	@ (801159c <SetTxContinuousWave+0x64>)
 801158c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	2000ba68 	.word	0x2000ba68
 80115a0:	2000bfc0 	.word	0x2000bfc0

080115a4 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	4603      	mov	r3, r0
 80115ac:	6039      	str	r1, [r7, #0]
 80115ae:	80fb      	strh	r3, [r7, #6]
 80115b0:	4613      	mov	r3, r2
 80115b2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80115b4:	4b09      	ldr	r3, [pc, #36]	@ (80115dc <SetTxContinuousWave1+0x38>)
 80115b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115b8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80115bc:	88fa      	ldrh	r2, [r7, #6]
 80115be:	6838      	ldr	r0, [r7, #0]
 80115c0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80115c2:	4b07      	ldr	r3, [pc, #28]	@ (80115e0 <SetTxContinuousWave1+0x3c>)
 80115c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80115c8:	f043 0302 	orr.w	r3, r3, #2
 80115cc:	4a04      	ldr	r2, [pc, #16]	@ (80115e0 <SetTxContinuousWave1+0x3c>)
 80115ce:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80115d2:	2300      	movs	r3, #0
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	08022c78 	.word	0x08022c78
 80115e0:	2000ba68 	.word	0x2000ba68

080115e4 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80115e4:	b480      	push	{r7}
 80115e6:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80115e8:	2300      	movs	r3, #0
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr

080115f4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <DetermineFrameType+0x16>
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d101      	bne.n	801160e <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801160a:	2303      	movs	r3, #3
 801160c:	e03b      	b.n	8011686 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	7b1b      	ldrb	r3, [r3, #12]
 8011612:	f003 030f 	and.w	r3, r3, #15
 8011616:	b2db      	uxtb	r3, r3
 8011618:	2b00      	cmp	r3, #0
 801161a:	d008      	beq.n	801162e <DetermineFrameType+0x3a>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d003      	beq.n	801162e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	2200      	movs	r2, #0
 801162a:	701a      	strb	r2, [r3, #0]
 801162c:	e02a      	b.n	8011684 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011634:	2b00      	cmp	r3, #0
 8011636:	d103      	bne.n	8011640 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	2201      	movs	r2, #1
 801163c:	701a      	strb	r2, [r3, #0]
 801163e:	e021      	b.n	8011684 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	7b1b      	ldrb	r3, [r3, #12]
 8011644:	f003 030f 	and.w	r3, r3, #15
 8011648:	b2db      	uxtb	r3, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	d108      	bne.n	8011660 <DetermineFrameType+0x6c>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d103      	bne.n	8011660 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2202      	movs	r2, #2
 801165c:	701a      	strb	r2, [r3, #0]
 801165e:	e011      	b.n	8011684 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	7b1b      	ldrb	r3, [r3, #12]
 8011664:	f003 030f 	and.w	r3, r3, #15
 8011668:	b2db      	uxtb	r3, r3
 801166a:	2b00      	cmp	r3, #0
 801166c:	d108      	bne.n	8011680 <DetermineFrameType+0x8c>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d003      	beq.n	8011680 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	2203      	movs	r2, #3
 801167c:	701a      	strb	r2, [r3, #0]
 801167e:	e001      	b.n	8011684 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011680:	2318      	movs	r3, #24
 8011682:	e000      	b.n	8011686 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011684:	2300      	movs	r3, #0
}
 8011686:	4618      	mov	r0, r3
 8011688:	370c      	adds	r7, #12
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr
	...

08011694 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8011694:	b480      	push	{r7}
 8011696:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011698:	4b12      	ldr	r3, [pc, #72]	@ (80116e4 <CheckRetransUnconfirmedUplink+0x50>)
 801169a:	f893 2438 	ldrb.w	r2, [r3, #1080]	@ 0x438
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801169e:	4b12      	ldr	r3, [pc, #72]	@ (80116e8 <CheckRetransUnconfirmedUplink+0x54>)
 80116a0:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    if( MacCtx.ChannelsNbTransCounter >=
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d301      	bcc.n	80116ac <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80116a8:	2301      	movs	r3, #1
 80116aa:	e016      	b.n	80116da <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80116ac:	4b0d      	ldr	r3, [pc, #52]	@ (80116e4 <CheckRetransUnconfirmedUplink+0x50>)
 80116ae:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 80116b2:	f003 0302 	and.w	r3, r3, #2
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00d      	beq.n	80116d8 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80116bc:	4b0a      	ldr	r3, [pc, #40]	@ (80116e8 <CheckRetransUnconfirmedUplink+0x54>)
 80116be:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d101      	bne.n	80116ca <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80116c6:	2301      	movs	r3, #1
 80116c8:	e007      	b.n	80116da <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80116ca:	4b06      	ldr	r3, [pc, #24]	@ (80116e4 <CheckRetransUnconfirmedUplink+0x50>)
 80116cc:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d101      	bne.n	80116d8 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80116d4:	2301      	movs	r3, #1
 80116d6:	e000      	b.n	80116da <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80116d8:	2300      	movs	r3, #0
}
 80116da:	4618      	mov	r0, r3
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr
 80116e4:	2000ba68 	.word	0x2000ba68
 80116e8:	2000bfc0 	.word	0x2000bfc0

080116ec <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80116ec:	b480      	push	{r7}
 80116ee:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80116f0:	4b0f      	ldr	r3, [pc, #60]	@ (8011730 <CheckRetransConfirmedUplink+0x44>)
 80116f2:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
        MacCtx.AckTimeoutRetries )
 80116f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011730 <CheckRetransConfirmedUplink+0x44>)
 80116f8:	f893 3439 	ldrb.w	r3, [r3, #1081]	@ 0x439
    if( MacCtx.AckTimeoutRetriesCounter >=
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d301      	bcc.n	8011704 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011700:	2301      	movs	r3, #1
 8011702:	e00f      	b.n	8011724 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011704:	4b0a      	ldr	r3, [pc, #40]	@ (8011730 <CheckRetransConfirmedUplink+0x44>)
 8011706:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 801170a:	f003 0302 	and.w	r3, r3, #2
 801170e:	b2db      	uxtb	r3, r3
 8011710:	2b00      	cmp	r3, #0
 8011712:	d006      	beq.n	8011722 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011714:	4b06      	ldr	r3, [pc, #24]	@ (8011730 <CheckRetransConfirmedUplink+0x44>)
 8011716:	f893 346c 	ldrb.w	r3, [r3, #1132]	@ 0x46c
 801171a:	2b00      	cmp	r3, #0
 801171c:	d001      	beq.n	8011722 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 801171e:	2301      	movs	r3, #1
 8011720:	e000      	b.n	8011724 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	46bd      	mov	sp, r7
 8011728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	2000ba68 	.word	0x2000ba68

08011734 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011734:	b480      	push	{r7}
 8011736:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011738:	4b1a      	ldr	r3, [pc, #104]	@ (80117a4 <StopRetransmission+0x70>)
 801173a:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 801173e:	f003 0302 	and.w	r3, r3, #2
 8011742:	b2db      	uxtb	r3, r3
 8011744:	2b00      	cmp	r3, #0
 8011746:	d009      	beq.n	801175c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011748:	4b16      	ldr	r3, [pc, #88]	@ (80117a4 <StopRetransmission+0x70>)
 801174a:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801174e:	2b00      	cmp	r3, #0
 8011750:	d00e      	beq.n	8011770 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011752:	4b14      	ldr	r3, [pc, #80]	@ (80117a4 <StopRetransmission+0x70>)
 8011754:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011758:	2b01      	cmp	r3, #1
 801175a:	d009      	beq.n	8011770 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801175c:	4b12      	ldr	r3, [pc, #72]	@ (80117a8 <StopRetransmission+0x74>)
 801175e:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8011762:	2b00      	cmp	r3, #0
 8011764:	d004      	beq.n	8011770 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8011766:	4b10      	ldr	r3, [pc, #64]	@ (80117a8 <StopRetransmission+0x74>)
 8011768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801176a:	3301      	adds	r3, #1
 801176c:	4a0e      	ldr	r2, [pc, #56]	@ (80117a8 <StopRetransmission+0x74>)
 801176e:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011770:	4b0c      	ldr	r3, [pc, #48]	@ (80117a4 <StopRetransmission+0x70>)
 8011772:	2200      	movs	r2, #0
 8011774:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.NodeAckRequested = false;
 8011778:	4b0a      	ldr	r3, [pc, #40]	@ (80117a4 <StopRetransmission+0x70>)
 801177a:	2200      	movs	r2, #0
 801177c:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8011780:	4b08      	ldr	r3, [pc, #32]	@ (80117a4 <StopRetransmission+0x70>)
 8011782:	2200      	movs	r2, #0
 8011784:	f883 243b 	strb.w	r2, [r3, #1083]	@ 0x43b
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011788:	4b06      	ldr	r3, [pc, #24]	@ (80117a4 <StopRetransmission+0x70>)
 801178a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801178e:	f023 0302 	bic.w	r3, r3, #2
 8011792:	4a04      	ldr	r2, [pc, #16]	@ (80117a4 <StopRetransmission+0x70>)
 8011794:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8011798:	2301      	movs	r3, #1
}
 801179a:	4618      	mov	r0, r3
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr
 80117a4:	2000ba68 	.word	0x2000ba68
 80117a8:	2000bfc0 	.word	0x2000bfc0

080117ac <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80117b0:	4b08      	ldr	r3, [pc, #32]	@ (80117d4 <OnMacProcessNotify+0x28>)
 80117b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <OnMacProcessNotify+0x24>
 80117ba:	4b06      	ldr	r3, [pc, #24]	@ (80117d4 <OnMacProcessNotify+0x28>)
 80117bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117c0:	695b      	ldr	r3, [r3, #20]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d004      	beq.n	80117d0 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80117c6:	4b03      	ldr	r3, [pc, #12]	@ (80117d4 <OnMacProcessNotify+0x28>)
 80117c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117cc:	695b      	ldr	r3, [r3, #20]
 80117ce:	4798      	blx	r3
    }
}
 80117d0:	bf00      	nop
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	2000ba68 	.word	0x2000ba68

080117d8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	4603      	mov	r3, r0
 80117e0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80117e2:	4b0b      	ldr	r3, [pc, #44]	@ (8011810 <CallNvmDataChangeCallback+0x38>)
 80117e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00c      	beq.n	8011806 <CallNvmDataChangeCallback+0x2e>
 80117ec:	4b08      	ldr	r3, [pc, #32]	@ (8011810 <CallNvmDataChangeCallback+0x38>)
 80117ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d006      	beq.n	8011806 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80117f8:	4b05      	ldr	r3, [pc, #20]	@ (8011810 <CallNvmDataChangeCallback+0x38>)
 80117fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80117fe:	691b      	ldr	r3, [r3, #16]
 8011800:	88fa      	ldrh	r2, [r7, #6]
 8011802:	4610      	mov	r0, r2
 8011804:	4798      	blx	r3
    }
}
 8011806:	bf00      	nop
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	2000ba68 	.word	0x2000ba68

08011814 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801181a:	4b1a      	ldr	r3, [pc, #104]	@ (8011884 <AckTimeoutRetriesProcess+0x70>)
 801181c:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
 8011820:	4b18      	ldr	r3, [pc, #96]	@ (8011884 <AckTimeoutRetriesProcess+0x70>)
 8011822:	f893 3439 	ldrb.w	r3, [r3, #1081]	@ 0x439
 8011826:	429a      	cmp	r2, r3
 8011828:	d227      	bcs.n	801187a <AckTimeoutRetriesProcess+0x66>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801182a:	4b16      	ldr	r3, [pc, #88]	@ (8011884 <AckTimeoutRetriesProcess+0x70>)
 801182c:	f893 343a 	ldrb.w	r3, [r3, #1082]	@ 0x43a
 8011830:	3301      	adds	r3, #1
 8011832:	b2da      	uxtb	r2, r3
 8011834:	4b13      	ldr	r3, [pc, #76]	@ (8011884 <AckTimeoutRetriesProcess+0x70>)
 8011836:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801183a:	4b12      	ldr	r3, [pc, #72]	@ (8011884 <AckTimeoutRetriesProcess+0x70>)
 801183c:	f893 343a 	ldrb.w	r3, [r3, #1082]	@ 0x43a
 8011840:	f003 0301 	and.w	r3, r3, #1
 8011844:	b2db      	uxtb	r3, r3
 8011846:	2b00      	cmp	r3, #0
 8011848:	d017      	beq.n	801187a <AckTimeoutRetriesProcess+0x66>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801184a:	2322      	movs	r3, #34	@ 0x22
 801184c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801184e:	4b0e      	ldr	r3, [pc, #56]	@ (8011888 <AckTimeoutRetriesProcess+0x74>)
 8011850:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8011854:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011856:	4b0c      	ldr	r3, [pc, #48]	@ (8011888 <AckTimeoutRetriesProcess+0x74>)
 8011858:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 801185c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801185e:	4b0a      	ldr	r3, [pc, #40]	@ (8011888 <AckTimeoutRetriesProcess+0x74>)
 8011860:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011864:	463b      	mov	r3, r7
 8011866:	f107 0208 	add.w	r2, r7, #8
 801186a:	4618      	mov	r0, r3
 801186c:	f003 fd40 	bl	80152f0 <RegionGetPhyParam>
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	b25a      	sxtb	r2, r3
 8011874:	4b04      	ldr	r3, [pc, #16]	@ (8011888 <AckTimeoutRetriesProcess+0x74>)
 8011876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        }
    }
}
 801187a:	bf00      	nop
 801187c:	3710      	adds	r7, #16
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
 8011882:	bf00      	nop
 8011884:	2000ba68 	.word	0x2000ba68
 8011888:	2000bfc0 	.word	0x2000bfc0

0801188c <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8011892:	4b14      	ldr	r3, [pc, #80]	@ (80118e4 <AckTimeoutRetriesFinalize+0x58>)
 8011894:	f893 346c 	ldrb.w	r3, [r3, #1132]	@ 0x46c
 8011898:	f083 0301 	eor.w	r3, r3, #1
 801189c:	b2db      	uxtb	r3, r3
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d015      	beq.n	80118ce <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80118a2:	2302      	movs	r3, #2
 80118a4:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80118a6:	4b10      	ldr	r3, [pc, #64]	@ (80118e8 <AckTimeoutRetriesFinalize+0x5c>)
 80118a8:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80118aa:	4b10      	ldr	r3, [pc, #64]	@ (80118ec <AckTimeoutRetriesFinalize+0x60>)
 80118ac:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80118ae:	4b10      	ldr	r3, [pc, #64]	@ (80118f0 <AckTimeoutRetriesFinalize+0x64>)
 80118b0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80118b4:	1d3a      	adds	r2, r7, #4
 80118b6:	4611      	mov	r1, r2
 80118b8:	4618      	mov	r0, r3
 80118ba:	f003 fd4b 	bl	8015354 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80118be:	4b09      	ldr	r3, [pc, #36]	@ (80118e4 <AckTimeoutRetriesFinalize+0x58>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
        MacCtx.McpsConfirm.AckReceived = false;
 80118c6:	4b07      	ldr	r3, [pc, #28]	@ (80118e4 <AckTimeoutRetriesFinalize+0x58>)
 80118c8:	2200      	movs	r2, #0
 80118ca:	f883 246c 	strb.w	r2, [r3, #1132]	@ 0x46c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80118ce:	4b05      	ldr	r3, [pc, #20]	@ (80118e4 <AckTimeoutRetriesFinalize+0x58>)
 80118d0:	f893 243a 	ldrb.w	r2, [r3, #1082]	@ 0x43a
 80118d4:	4b03      	ldr	r3, [pc, #12]	@ (80118e4 <AckTimeoutRetriesFinalize+0x58>)
 80118d6:	f883 246d 	strb.w	r2, [r3, #1133]	@ 0x46d
}
 80118da:	bf00      	nop
 80118dc:	3710      	adds	r7, #16
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	2000ba68 	.word	0x2000ba68
 80118e8:	2000c1f0 	.word	0x2000c1f0
 80118ec:	2000c318 	.word	0x2000c318
 80118f0:	2000bfc0 	.word	0x2000bfc0

080118f4 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80118f4:	b480      	push	{r7}
 80118f6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80118f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011928 <IsRequestPending+0x34>)
 80118fa:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 80118fe:	f003 0304 	and.w	r3, r3, #4
 8011902:	b2db      	uxtb	r3, r3
 8011904:	2b00      	cmp	r3, #0
 8011906:	d107      	bne.n	8011918 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011908:	4b07      	ldr	r3, [pc, #28]	@ (8011928 <IsRequestPending+0x34>)
 801190a:	f893 34cd 	ldrb.w	r3, [r3, #1229]	@ 0x4cd
 801190e:	f003 0301 	and.w	r3, r3, #1
 8011912:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011914:	2b00      	cmp	r3, #0
 8011916:	d001      	beq.n	801191c <IsRequestPending+0x28>
    {
        return 1;
 8011918:	2301      	movs	r3, #1
 801191a:	e000      	b.n	801191e <IsRequestPending+0x2a>
    }
    return 0;
 801191c:	2300      	movs	r3, #0
}
 801191e:	4618      	mov	r0, r3
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr
 8011928:	2000ba68 	.word	0x2000ba68

0801192c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801192c:	b590      	push	{r4, r7, lr}
 801192e:	b093      	sub	sp, #76	@ 0x4c
 8011930:	af04      	add	r7, sp, #16
 8011932:	6178      	str	r0, [r7, #20]
 8011934:	6139      	str	r1, [r7, #16]
 8011936:	4613      	mov	r3, r2
 8011938:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d002      	beq.n	8011946 <LoRaMacInitialization+0x1a>
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d101      	bne.n	801194a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011946:	2303      	movs	r3, #3
 8011948:	e2da      	b.n	8011f00 <LoRaMacInitialization+0x5d4>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d00b      	beq.n	801196a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011956:	2b00      	cmp	r3, #0
 8011958:	d007      	beq.n	801196a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801195e:	2b00      	cmp	r3, #0
 8011960:	d003      	beq.n	801196a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011966:	2b00      	cmp	r3, #0
 8011968:	d101      	bne.n	801196e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801196a:	2303      	movs	r3, #3
 801196c:	e2c8      	b.n	8011f00 <LoRaMacInitialization+0x5d4>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801196e:	7bfb      	ldrb	r3, [r7, #15]
 8011970:	4618      	mov	r0, r3
 8011972:	f003 fcac 	bl	80152ce <RegionIsActive>
 8011976:	4603      	mov	r3, r0
 8011978:	f083 0301 	eor.w	r3, r3, #1
 801197c:	b2db      	uxtb	r3, r3
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011982:	2309      	movs	r3, #9
 8011984:	e2bc      	b.n	8011f00 <LoRaMacInitialization+0x5d4>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011986:	6978      	ldr	r0, [r7, #20]
 8011988:	f002 f8fa 	bl	8013b80 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 801198c:	f640 0218 	movw	r2, #2072	@ 0x818
 8011990:	2100      	movs	r1, #0
 8011992:	48d9      	ldr	r0, [pc, #868]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011994:	f008 fb76 	bl	801a084 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011998:	f44f 62ab 	mov.w	r2, #1368	@ 0x558
 801199c:	2100      	movs	r1, #0
 801199e:	48d7      	ldr	r0, [pc, #860]	@ (8011cfc <LoRaMacInitialization+0x3d0>)
 80119a0:	f008 fb70 	bl	801a084 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 80119a4:	4bd5      	ldr	r3, [pc, #852]	@ (8011cfc <LoRaMacInitialization+0x3d0>)
 80119a6:	2201      	movs	r2, #1
 80119a8:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a
    MacCtx.AckTimeoutRetries = 1;
 80119ac:	4bd3      	ldr	r3, [pc, #844]	@ (8011cfc <LoRaMacInitialization+0x3d0>)
 80119ae:	2201      	movs	r2, #1
 80119b0:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80119b4:	4ad0      	ldr	r2, [pc, #832]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 80119b6:	7bfb      	ldrb	r3, [r7, #15]
 80119b8:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80119bc:	4bce      	ldr	r3, [pc, #824]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 80119be:	2200      	movs	r2, #0
 80119c0:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80119c4:	4bcc      	ldr	r3, [pc, #816]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 80119c6:	2200      	movs	r2, #0
 80119c8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80119cc:	4bca      	ldr	r3, [pc, #808]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 80119ce:	4acc      	ldr	r2, [pc, #816]	@ (8011d00 <LoRaMacInitialization+0x3d4>)
 80119d0:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80119d4:	230f      	movs	r3, #15
 80119d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119da:	4bc7      	ldr	r3, [pc, #796]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 80119dc:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 80119e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80119e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80119e8:	4618      	mov	r0, r3
 80119ea:	f003 fc81 	bl	80152f0 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80119ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	bf14      	ite	ne
 80119f4:	2301      	movne	r3, #1
 80119f6:	2300      	moveq	r3, #0
 80119f8:	b2da      	uxtb	r2, r3
 80119fa:	4bbf      	ldr	r3, [pc, #764]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 80119fc:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011a00:	230a      	movs	r3, #10
 8011a02:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a06:	4bbc      	ldr	r3, [pc, #752]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011a08:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011a0c:	463b      	mov	r3, r7
 8011a0e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011a12:	4618      	mov	r0, r3
 8011a14:	f003 fc6c 	bl	80152f0 <RegionGetPhyParam>
 8011a18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011a1c:	463a      	mov	r2, r7
 8011a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a22:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a28:	b25a      	sxtb	r2, r3
 8011a2a:	4bb3      	ldr	r3, [pc, #716]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011a2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011a30:	2306      	movs	r3, #6
 8011a32:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a36:	4bb0      	ldr	r3, [pc, #704]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011a38:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011a3c:	463b      	mov	r3, r7
 8011a3e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011a42:	4618      	mov	r0, r3
 8011a44:	f003 fc54 	bl	80152f0 <RegionGetPhyParam>
 8011a48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011a4c:	463a      	mov	r2, r7
 8011a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a52:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a58:	b25a      	sxtb	r2, r3
 8011a5a:	4ba7      	ldr	r3, [pc, #668]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011a5c:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011a60:	2310      	movs	r3, #16
 8011a62:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a66:	4ba4      	ldr	r3, [pc, #656]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011a68:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011a6c:	463b      	mov	r3, r7
 8011a6e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011a72:	4618      	mov	r0, r3
 8011a74:	f003 fc3c 	bl	80152f0 <RegionGetPhyParam>
 8011a78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011a7c:	463a      	mov	r2, r7
 8011a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a82:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a88:	4a9b      	ldr	r2, [pc, #620]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011a8a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011a8e:	2311      	movs	r3, #17
 8011a90:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a94:	4b98      	ldr	r3, [pc, #608]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011a96:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011a9a:	463b      	mov	r3, r7
 8011a9c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f003 fc25 	bl	80152f0 <RegionGetPhyParam>
 8011aa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011aaa:	463a      	mov	r2, r7
 8011aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ab0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab6:	4a90      	ldr	r2, [pc, #576]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011ab8:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011abc:	2312      	movs	r3, #18
 8011abe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011ac4:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011ac8:	463b      	mov	r3, r7
 8011aca:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f003 fc0e 	bl	80152f0 <RegionGetPhyParam>
 8011ad4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011ad8:	463a      	mov	r2, r7
 8011ada:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ade:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae4:	4a84      	ldr	r2, [pc, #528]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011ae6:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011aea:	2313      	movs	r3, #19
 8011aec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011af0:	4b81      	ldr	r3, [pc, #516]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011af2:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011af6:	463b      	mov	r3, r7
 8011af8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011afc:	4618      	mov	r0, r3
 8011afe:	f003 fbf7 	bl	80152f0 <RegionGetPhyParam>
 8011b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011b06:	463a      	mov	r2, r7
 8011b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b0c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b12:	4a79      	ldr	r2, [pc, #484]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011b14:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011b18:	2314      	movs	r3, #20
 8011b1a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b1e:	4b76      	ldr	r3, [pc, #472]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011b20:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011b24:	463b      	mov	r3, r7
 8011b26:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f003 fbe0 	bl	80152f0 <RegionGetPhyParam>
 8011b30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011b34:	463a      	mov	r2, r7
 8011b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b3a:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b40:	4a6d      	ldr	r2, [pc, #436]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011b42:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011b46:	2317      	movs	r3, #23
 8011b48:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b4c:	4b6a      	ldr	r3, [pc, #424]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011b4e:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011b52:	463b      	mov	r3, r7
 8011b54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f003 fbc9 	bl	80152f0 <RegionGetPhyParam>
 8011b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011b62:	463a      	mov	r2, r7
 8011b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b68:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b6e:	b2da      	uxtb	r2, r3
 8011b70:	4b61      	ldr	r3, [pc, #388]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011b72:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011b76:	2318      	movs	r3, #24
 8011b78:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011b7e:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011b82:	463b      	mov	r3, r7
 8011b84:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f003 fbb1 	bl	80152f0 <RegionGetPhyParam>
 8011b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011b92:	463a      	mov	r2, r7
 8011b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b98:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b9e:	4a56      	ldr	r2, [pc, #344]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011ba0:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba6:	4a54      	ldr	r2, [pc, #336]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011ba8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011bac:	2319      	movs	r3, #25
 8011bae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bb2:	4b51      	ldr	r3, [pc, #324]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011bb4:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011bb8:	463b      	mov	r3, r7
 8011bba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f003 fb96 	bl	80152f0 <RegionGetPhyParam>
 8011bc4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011bc8:	463a      	mov	r2, r7
 8011bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bce:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd4:	b2da      	uxtb	r2, r3
 8011bd6:	4b48      	ldr	r3, [pc, #288]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011bd8:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bde:	b2da      	uxtb	r2, r3
 8011be0:	4b45      	ldr	r3, [pc, #276]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011be2:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011be6:	231e      	movs	r3, #30
 8011be8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bec:	4b42      	ldr	r3, [pc, #264]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011bee:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011bf2:	463b      	mov	r3, r7
 8011bf4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f003 fb79 	bl	80152f0 <RegionGetPhyParam>
 8011bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011c02:	463a      	mov	r2, r7
 8011c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c08:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c0e:	b2da      	uxtb	r2, r3
 8011c10:	4b39      	ldr	r3, [pc, #228]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011c12:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011c16:	231f      	movs	r3, #31
 8011c18:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c1c:	4b36      	ldr	r3, [pc, #216]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011c1e:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011c22:	463b      	mov	r3, r7
 8011c24:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f003 fb61 	bl	80152f0 <RegionGetPhyParam>
 8011c2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011c32:	463a      	mov	r2, r7
 8011c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c38:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3e:	b2da      	uxtb	r2, r3
 8011c40:	4b2d      	ldr	r3, [pc, #180]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011c42:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011c46:	2320      	movs	r3, #32
 8011c48:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011c4e:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011c52:	463b      	mov	r3, r7
 8011c54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f003 fb49 	bl	80152f0 <RegionGetPhyParam>
 8011c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011c62:	463a      	mov	r2, r7
 8011c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c68:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c6e:	4a22      	ldr	r2, [pc, #136]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011c70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011c74:	2321      	movs	r3, #33	@ 0x21
 8011c76:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011c7c:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011c80:	463b      	mov	r3, r7
 8011c82:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011c86:	4618      	mov	r0, r3
 8011c88:	f003 fb32 	bl	80152f0 <RegionGetPhyParam>
 8011c8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011c90:	463a      	mov	r2, r7
 8011c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c96:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c9c:	4a16      	ldr	r2, [pc, #88]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011c9e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011ca2:	230b      	movs	r3, #11
 8011ca4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ca8:	4b13      	ldr	r3, [pc, #76]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011caa:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011cae:	463b      	mov	r3, r7
 8011cb0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f003 fb1b 	bl	80152f0 <RegionGetPhyParam>
 8011cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011cbe:	463a      	mov	r2, r7
 8011cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cc4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8011cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011cce:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011cd2:	230c      	movs	r3, #12
 8011cd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011cd8:	4b07      	ldr	r3, [pc, #28]	@ (8011cf8 <LoRaMacInitialization+0x3cc>)
 8011cda:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8011cde:	463b      	mov	r3, r7
 8011ce0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f003 fb03 	bl	80152f0 <RegionGetPhyParam>
 8011cea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011cee:	463a      	mov	r2, r7
 8011cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011cf4:	e006      	b.n	8011d04 <LoRaMacInitialization+0x3d8>
 8011cf6:	bf00      	nop
 8011cf8:	2000bfc0 	.word	0x2000bfc0
 8011cfc:	2000ba68 	.word	0x2000ba68
 8011d00:	01000300 	.word	0x01000300
 8011d04:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8011d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d0e:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011d12:	4b7d      	ldr	r3, [pc, #500]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d14:	2201      	movs	r2, #1
 8011d16:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d1c:	220a      	movs	r2, #10
 8011d1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011d22:	4b79      	ldr	r3, [pc, #484]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d24:	2206      	movs	r2, #6
 8011d26:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011d2a:	4b77      	ldr	r3, [pc, #476]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011d30:	4a75      	ldr	r2, [pc, #468]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d32:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011d34:	4b74      	ldr	r3, [pc, #464]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d36:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8011d3a:	4b73      	ldr	r3, [pc, #460]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d3c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011d40:	4b71      	ldr	r3, [pc, #452]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011d46:	4a70      	ldr	r2, [pc, #448]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d48:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011d50:	4a6d      	ldr	r2, [pc, #436]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d52:	6693      	str	r3, [r2, #104]	@ 0x68
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011d54:	4b6c      	ldr	r3, [pc, #432]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8011d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d5c:	66d3      	str	r3, [r2, #108]	@ 0x6c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8011d64:	4a68      	ldr	r2, [pc, #416]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d66:	6713      	str	r3, [r2, #112]	@ 0x70
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011d68:	4b67      	ldr	r3, [pc, #412]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d6a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011d6e:	4a66      	ldr	r2, [pc, #408]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d70:	6753      	str	r3, [r2, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011d72:	4b65      	ldr	r3, [pc, #404]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d74:	f893 20c0 	ldrb.w	r2, [r3, #192]	@ 0xc0
 8011d78:	4b63      	ldr	r3, [pc, #396]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011d84:	4b61      	ldr	r3, [pc, #388]	@ (8011f0c <LoRaMacInitialization+0x5e0>)
 8011d86:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011d88:	4b61      	ldr	r3, [pc, #388]	@ (8011f10 <LoRaMacInitialization+0x5e4>)
 8011d8a:	623b      	str	r3, [r7, #32]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011d8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011d92:	f107 021c 	add.w	r2, r7, #28
 8011d96:	4611      	mov	r1, r2
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f003 fadb 	bl	8015354 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8011da6:	2000      	movs	r0, #0
 8011da8:	f7ff f85a 	bl	8010e60 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011dac:	4b56      	ldr	r3, [pc, #344]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011dae:	2201      	movs	r2, #1
 8011db0:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129

    MacCtx.MacPrimitives = primitives;
 8011db4:	4a57      	ldr	r2, [pc, #348]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8011dbc:	4b55      	ldr	r3, [pc, #340]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f883 24cd 	strb.w	r2, [r3, #1229]	@ 0x4cd
    MacCtx.MacState = LORAMAC_STOPPED;
 8011dc4:	4b53      	ldr	r3, [pc, #332]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011dc6:	2201      	movs	r2, #1
 8011dc8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011dcc:	494e      	ldr	r1, [pc, #312]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011dce:	f04f 0200 	mov.w	r2, #0
 8011dd2:	f04f 0300 	mov.w	r3, #0
 8011dd6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011dda:	494b      	ldr	r1, [pc, #300]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011ddc:	f04f 0200 	mov.w	r2, #0
 8011de0:	f04f 0300 	mov.w	r3, #0
 8011de4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011de8:	2300      	movs	r3, #0
 8011dea:	9302      	str	r3, [sp, #8]
 8011dec:	4b4a      	ldr	r3, [pc, #296]	@ (8011f18 <LoRaMacInitialization+0x5ec>)
 8011dee:	9301      	str	r3, [sp, #4]
 8011df0:	2300      	movs	r3, #0
 8011df2:	9300      	str	r3, [sp, #0]
 8011df4:	f04f 32ff 	mov.w	r2, #4294967295
 8011df8:	f04f 0300 	mov.w	r3, #0
 8011dfc:	4847      	ldr	r0, [pc, #284]	@ (8011f1c <LoRaMacInitialization+0x5f0>)
 8011dfe:	f008 fc83 	bl	801a708 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011e02:	2300      	movs	r3, #0
 8011e04:	9302      	str	r3, [sp, #8]
 8011e06:	4b46      	ldr	r3, [pc, #280]	@ (8011f20 <LoRaMacInitialization+0x5f4>)
 8011e08:	9301      	str	r3, [sp, #4]
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	9300      	str	r3, [sp, #0]
 8011e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8011e12:	f04f 0300 	mov.w	r3, #0
 8011e16:	4843      	ldr	r0, [pc, #268]	@ (8011f24 <LoRaMacInitialization+0x5f8>)
 8011e18:	f008 fc76 	bl	801a708 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	9302      	str	r3, [sp, #8]
 8011e20:	4b41      	ldr	r3, [pc, #260]	@ (8011f28 <LoRaMacInitialization+0x5fc>)
 8011e22:	9301      	str	r3, [sp, #4]
 8011e24:	2300      	movs	r3, #0
 8011e26:	9300      	str	r3, [sp, #0]
 8011e28:	f04f 32ff 	mov.w	r2, #4294967295
 8011e2c:	f04f 0300 	mov.w	r3, #0
 8011e30:	483e      	ldr	r0, [pc, #248]	@ (8011f2c <LoRaMacInitialization+0x600>)
 8011e32:	f008 fc69 	bl	801a708 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011e36:	2300      	movs	r3, #0
 8011e38:	9302      	str	r3, [sp, #8]
 8011e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8011f30 <LoRaMacInitialization+0x604>)
 8011e3c:	9301      	str	r3, [sp, #4]
 8011e3e:	2300      	movs	r3, #0
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	f04f 32ff 	mov.w	r2, #4294967295
 8011e46:	f04f 0300 	mov.w	r3, #0
 8011e4a:	483a      	ldr	r0, [pc, #232]	@ (8011f34 <LoRaMacInitialization+0x608>)
 8011e4c:	f008 fc5c 	bl	801a708 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011e50:	4c2d      	ldr	r4, [pc, #180]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011e52:	463b      	mov	r3, r7
 8011e54:	4618      	mov	r0, r3
 8011e56:	f008 fbbf 	bl	801a5d8 <SysTimeGetMcuTime>
 8011e5a:	f504 7398 	add.w	r3, r4, #304	@ 0x130
 8011e5e:	463a      	mov	r2, r7
 8011e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e64:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011e68:	4b2a      	ldr	r3, [pc, #168]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011e6a:	4a33      	ldr	r2, [pc, #204]	@ (8011f38 <LoRaMacInitialization+0x60c>)
 8011e6c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011e70:	4b28      	ldr	r3, [pc, #160]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011e72:	4a32      	ldr	r2, [pc, #200]	@ (8011f3c <LoRaMacInitialization+0x610>)
 8011e74:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011e78:	4b26      	ldr	r3, [pc, #152]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011e7a:	4a31      	ldr	r2, [pc, #196]	@ (8011f40 <LoRaMacInitialization+0x614>)
 8011e7c:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011e80:	4b24      	ldr	r3, [pc, #144]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011e82:	4a30      	ldr	r2, [pc, #192]	@ (8011f44 <LoRaMacInitialization+0x618>)
 8011e84:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011e88:	4b22      	ldr	r3, [pc, #136]	@ (8011f14 <LoRaMacInitialization+0x5e8>)
 8011e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8011f48 <LoRaMacInitialization+0x61c>)
 8011e8c:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011e90:	4b2e      	ldr	r3, [pc, #184]	@ (8011f4c <LoRaMacInitialization+0x620>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	482e      	ldr	r0, [pc, #184]	@ (8011f50 <LoRaMacInitialization+0x624>)
 8011e96:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8011e98:	482e      	ldr	r0, [pc, #184]	@ (8011f54 <LoRaMacInitialization+0x628>)
 8011e9a:	f7fa fd6d 	bl	800c978 <SecureElementInit>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d001      	beq.n	8011ea8 <LoRaMacInitialization+0x57c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ea4:	2311      	movs	r3, #17
 8011ea6:	e02b      	b.n	8011f00 <LoRaMacInitialization+0x5d4>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011ea8:	4817      	ldr	r0, [pc, #92]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011eaa:	f002 fb33 	bl	8014514 <LoRaMacCryptoInit>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d001      	beq.n	8011eb8 <LoRaMacInitialization+0x58c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eb4:	2311      	movs	r3, #17
 8011eb6:	e023      	b.n	8011f00 <LoRaMacInitialization+0x5d4>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011eb8:	f001 fc1e 	bl	80136f8 <LoRaMacCommandsInit>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d001      	beq.n	8011ec6 <LoRaMacInitialization+0x59a>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ec2:	2313      	movs	r3, #19
 8011ec4:	e01c      	b.n	8011f00 <LoRaMacInitialization+0x5d4>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011ec6:	4824      	ldr	r0, [pc, #144]	@ (8011f58 <LoRaMacInitialization+0x62c>)
 8011ec8:	f002 fbf0 	bl	80146ac <LoRaMacCryptoSetMulticastReference>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d001      	beq.n	8011ed6 <LoRaMacInitialization+0x5aa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ed2:	2311      	movs	r3, #17
 8011ed4:	e014      	b.n	8011f00 <LoRaMacInitialization+0x5d4>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8011f4c <LoRaMacInitialization+0x620>)
 8011ed8:	699b      	ldr	r3, [r3, #24]
 8011eda:	4798      	blx	r3
 8011edc:	4603      	mov	r3, r0
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f008 f86c 	bl	8019fbc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011ee4:	4b19      	ldr	r3, [pc, #100]	@ (8011f4c <LoRaMacInitialization+0x620>)
 8011ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011ee8:	4a07      	ldr	r2, [pc, #28]	@ (8011f08 <LoRaMacInitialization+0x5dc>)
 8011eea:	f892 2129 	ldrb.w	r2, [r2, #297]	@ 0x129
 8011eee:	4610      	mov	r0, r2
 8011ef0:	4798      	blx	r3
    Radio.Sleep( );
 8011ef2:	4b16      	ldr	r3, [pc, #88]	@ (8011f4c <LoRaMacInitialization+0x620>)
 8011ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ef6:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011ef8:	2001      	movs	r0, #1
 8011efa:	f7fd fa8f 	bl	800f41c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011efe:	2300      	movs	r3, #0
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	373c      	adds	r7, #60	@ 0x3c
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd90      	pop	{r4, r7, pc}
 8011f08:	2000bfc0 	.word	0x2000bfc0
 8011f0c:	2000c1f0 	.word	0x2000c1f0
 8011f10:	2000c318 	.word	0x2000c318
 8011f14:	2000ba68 	.word	0x2000ba68
 8011f18:	0800f965 	.word	0x0800f965
 8011f1c:	2000bdd8 	.word	0x2000bdd8
 8011f20:	0800f9d9 	.word	0x0800f9d9
 8011f24:	2000bdf8 	.word	0x2000bdf8
 8011f28:	0800fa45 	.word	0x0800fa45
 8011f2c:	2000be18 	.word	0x2000be18
 8011f30:	0800fab9 	.word	0x0800fab9
 8011f34:	2000be80 	.word	0x2000be80
 8011f38:	0800e4f1 	.word	0x0800e4f1
 8011f3c:	0800e541 	.word	0x0800e541
 8011f40:	0800e5bd 	.word	0x0800e5bd
 8011f44:	0800e5a1 	.word	0x0800e5a1
 8011f48:	0800e5d9 	.word	0x0800e5d9
 8011f4c:	08022c78 	.word	0x08022c78
 8011f50:	2000bdb4 	.word	0x2000bdb4
 8011f54:	2000c118 	.word	0x2000c118
 8011f58:	2000c0b8 	.word	0x2000c0b8

08011f5c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011f60:	4b04      	ldr	r3, [pc, #16]	@ (8011f74 <LoRaMacStart+0x18>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8011f68:	f7fc fb44 	bl	800e5f4 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8011f6c:	2300      	movs	r3, #0
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	2000ba68 	.word	0x2000ba68

08011f78 <LoRaMacHalt>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011f7c:	480d      	ldr	r0, [pc, #52]	@ (8011fb4 <LoRaMacHalt+0x3c>)
 8011f7e:	f008 fc83 	bl	801a888 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011f82:	480d      	ldr	r0, [pc, #52]	@ (8011fb8 <LoRaMacHalt+0x40>)
 8011f84:	f008 fc80 	bl	801a888 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011f88:	480c      	ldr	r0, [pc, #48]	@ (8011fbc <LoRaMacHalt+0x44>)
 8011f8a:	f008 fc7d 	bl	801a888 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8011f8e:	480c      	ldr	r0, [pc, #48]	@ (8011fc0 <LoRaMacHalt+0x48>)
 8011f90:	f008 fc7a 	bl	801a888 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011f94:	f001 fa17 	bl	80133c6 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011f98:	4b0a      	ldr	r3, [pc, #40]	@ (8011fc4 <LoRaMacHalt+0x4c>)
 8011f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f9c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8011fc8 <LoRaMacHalt+0x50>)
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8011fa6:	4b08      	ldr	r3, [pc, #32]	@ (8011fc8 <LoRaMacHalt+0x50>)
 8011fa8:	2201      	movs	r2, #1
 8011faa:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	2000bdd8 	.word	0x2000bdd8
 8011fb8:	2000bdf8 	.word	0x2000bdf8
 8011fbc:	2000be18 	.word	0x2000be18
 8011fc0:	2000be80 	.word	0x2000be80
 8011fc4:	08022c78 	.word	0x08022c78
 8011fc8:	2000ba68 	.word	0x2000ba68

08011fcc <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b08a      	sub	sp, #40	@ 0x28
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	6039      	str	r1, [r7, #0]
 8011fd6:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8011fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fdc:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011fde:	4b3d      	ldr	r3, [pc, #244]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8011fe0:	f993 30ed 	ldrsb.w	r3, [r3, #237]	@ 0xed
 8011fe4:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8011fe8:	f993 30ec 	ldrsb.w	r3, [r3, #236]	@ 0xec
 8011fec:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d101      	bne.n	8011ffc <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ff8:	2303      	movs	r3, #3
 8011ffa:	e066      	b.n	80120ca <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8011ffc:	4b35      	ldr	r3, [pc, #212]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8011ffe:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012002:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8012004:	2300      	movs	r3, #0
 8012006:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012008:	4b32      	ldr	r3, [pc, #200]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 801200a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 801200e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012010:	4b30      	ldr	r3, [pc, #192]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8012012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012014:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012016:	4b2f      	ldr	r3, [pc, #188]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8012018:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 801201c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801201e:	4b2d      	ldr	r3, [pc, #180]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8012020:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8012024:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012026:	4b2b      	ldr	r3, [pc, #172]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8012028:	f993 3045 	ldrsb.w	r3, [r3, #69]	@ 0x45
 801202c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012030:	4b28      	ldr	r3, [pc, #160]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8012032:	f993 3044 	ldrsb.w	r3, [r3, #68]	@ 0x44
 8012036:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801203a:	4b26      	ldr	r3, [pc, #152]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 801203c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8012040:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012044:	4b23      	ldr	r3, [pc, #140]	@ (80120d4 <LoRaMacQueryTxPossible+0x108>)
 8012046:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801204a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801204e:	f107 0310 	add.w	r3, r7, #16
 8012052:	f107 020e 	add.w	r2, r7, #14
 8012056:	f107 010f 	add.w	r1, r7, #15
 801205a:	f107 0014 	add.w	r0, r7, #20
 801205e:	f001 f90f 	bl	8013280 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012066:	4618      	mov	r0, r3
 8012068:	f7fd fe7a 	bl	800fd60 <GetMaxAppPayloadWithoutFOptsLength>
 801206c:	4603      	mov	r3, r0
 801206e:	461a      	mov	r2, r3
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012074:	f107 0308 	add.w	r3, r7, #8
 8012078:	4618      	mov	r0, r3
 801207a:	f001 fc43 	bl	8013904 <LoRaMacCommandsGetSizeSerializedCmds>
 801207e:	4603      	mov	r3, r0
 8012080:	2b00      	cmp	r3, #0
 8012082:	d001      	beq.n	8012088 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012084:	2313      	movs	r3, #19
 8012086:	e020      	b.n	80120ca <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	2b0f      	cmp	r3, #15
 801208c:	d819      	bhi.n	80120c2 <LoRaMacQueryTxPossible+0xf6>
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	785b      	ldrb	r3, [r3, #1]
 8012092:	461a      	mov	r2, r3
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	429a      	cmp	r2, r3
 8012098:	d313      	bcc.n	80120c2 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	785a      	ldrb	r2, [r3, #1]
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	b2db      	uxtb	r3, r3
 80120a2:	1ad3      	subs	r3, r2, r3
 80120a4:	b2da      	uxtb	r2, r3
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	785b      	ldrb	r3, [r3, #1]
 80120ae:	4619      	mov	r1, r3
 80120b0:	79fa      	ldrb	r2, [r7, #7]
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	4413      	add	r3, r2
 80120b6:	4299      	cmp	r1, r3
 80120b8:	d301      	bcc.n	80120be <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 80120ba:	2300      	movs	r3, #0
 80120bc:	e005      	b.n	80120ca <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80120be:	2308      	movs	r3, #8
 80120c0:	e003      	b.n	80120ca <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	2200      	movs	r2, #0
 80120c6:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80120c8:	2308      	movs	r3, #8
    }
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3728      	adds	r7, #40	@ 0x28
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	bf00      	nop
 80120d4:	2000bfc0 	.word	0x2000bfc0

080120d8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80120d8:	b590      	push	{r4, r7, lr}
 80120da:	b089      	sub	sp, #36	@ 0x24
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80120e0:	2300      	movs	r3, #0
 80120e2:	77fb      	strb	r3, [r7, #31]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80120ea:	2303      	movs	r3, #3
 80120ec:	e1cd      	b.n	801248a <LoRaMacMibGetRequestConfirm+0x3b2>
    }

    switch( mibGet->Type )
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80120f4:	f200 81c2 	bhi.w	801247c <LoRaMacMibGetRequestConfirm+0x3a4>
 80120f8:	a201      	add	r2, pc, #4	@ (adr r2, 8012100 <LoRaMacMibGetRequestConfirm+0x28>)
 80120fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fe:	bf00      	nop
 8012100:	08012201 	.word	0x08012201
 8012104:	0801220d 	.word	0x0801220d
 8012108:	08012219 	.word	0x08012219
 801210c:	08012225 	.word	0x08012225
 8012110:	08012231 	.word	0x08012231
 8012114:	0801223d 	.word	0x0801223d
 8012118:	08012249 	.word	0x08012249
 801211c:	0801247d 	.word	0x0801247d
 8012120:	0801247d 	.word	0x0801247d
 8012124:	0801247d 	.word	0x0801247d
 8012128:	0801247d 	.word	0x0801247d
 801212c:	0801247d 	.word	0x0801247d
 8012130:	0801247d 	.word	0x0801247d
 8012134:	0801247d 	.word	0x0801247d
 8012138:	0801247d 	.word	0x0801247d
 801213c:	0801225d 	.word	0x0801225d
 8012140:	08012269 	.word	0x08012269
 8012144:	08012275 	.word	0x08012275
 8012148:	08012295 	.word	0x08012295
 801214c:	080122a7 	.word	0x080122a7
 8012150:	080122b9 	.word	0x080122b9
 8012154:	080122cb 	.word	0x080122cb
 8012158:	08012309 	.word	0x08012309
 801215c:	080122dd 	.word	0x080122dd
 8012160:	08012335 	.word	0x08012335
 8012164:	08012341 	.word	0x08012341
 8012168:	0801234b 	.word	0x0801234b
 801216c:	08012355 	.word	0x08012355
 8012170:	0801235f 	.word	0x0801235f
 8012174:	08012369 	.word	0x08012369
 8012178:	08012373 	.word	0x08012373
 801217c:	0801237f 	.word	0x0801237f
 8012180:	08012397 	.word	0x08012397
 8012184:	0801238b 	.word	0x0801238b
 8012188:	080123a3 	.word	0x080123a3
 801218c:	080123ad 	.word	0x080123ad
 8012190:	080123b9 	.word	0x080123b9
 8012194:	080123d5 	.word	0x080123d5
 8012198:	080123c5 	.word	0x080123c5
 801219c:	080123cd 	.word	0x080123cd
 80121a0:	0801247d 	.word	0x0801247d
 80121a4:	080123e1 	.word	0x080123e1
 80121a8:	0801247d 	.word	0x0801247d
 80121ac:	0801247d 	.word	0x0801247d
 80121b0:	0801247d 	.word	0x0801247d
 80121b4:	0801247d 	.word	0x0801247d
 80121b8:	0801247d 	.word	0x0801247d
 80121bc:	0801247d 	.word	0x0801247d
 80121c0:	0801247d 	.word	0x0801247d
 80121c4:	0801247d 	.word	0x0801247d
 80121c8:	0801247d 	.word	0x0801247d
 80121cc:	0801247d 	.word	0x0801247d
 80121d0:	0801247d 	.word	0x0801247d
 80121d4:	0801247d 	.word	0x0801247d
 80121d8:	0801247d 	.word	0x0801247d
 80121dc:	0801247d 	.word	0x0801247d
 80121e0:	0801247d 	.word	0x0801247d
 80121e4:	080123f5 	.word	0x080123f5
 80121e8:	08012401 	.word	0x08012401
 80121ec:	0801240d 	.word	0x0801240d
 80121f0:	08012419 	.word	0x08012419
 80121f4:	08012425 	.word	0x08012425
 80121f8:	08012431 	.word	0x08012431
 80121fc:	08012457 	.word	0x08012457
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012200:	4ba4      	ldr	r3, [pc, #656]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012202:	f893 2128 	ldrb.w	r2, [r3, #296]	@ 0x128
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	711a      	strb	r2, [r3, #4]
            break;
 801220a:	e13d      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801220c:	4ba1      	ldr	r3, [pc, #644]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801220e:	f893 213c 	ldrb.w	r2, [r3, #316]	@ 0x13c
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	711a      	strb	r2, [r3, #4]
            break;
 8012216:	e137      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	4618      	mov	r0, r3
 801221e:	f7fa fe81 	bl	800cf24 <SecureElementGetDevEui>
            break;
 8012222:	e131      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	685b      	ldr	r3, [r3, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	f7fa feab 	bl	800cf84 <SecureElementGetJoinEui>
            break;
 801222e:	e12b      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8012230:	4b98      	ldr	r3, [pc, #608]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012232:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	711a      	strb	r2, [r3, #4]
            break;
 801223a:	e125      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801223c:	4b95      	ldr	r3, [pc, #596]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801223e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	605a      	str	r2, [r3, #4]
            break;
 8012246:	e11f      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8012248:	4b92      	ldr	r3, [pc, #584]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801224a:	f893 213c 	ldrb.w	r2, [r3, #316]	@ 0x13c
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	3304      	adds	r3, #4
 8012252:	4619      	mov	r1, r3
 8012254:	4610      	mov	r0, r2
 8012256:	f7fa fec9 	bl	800cfec <SecureElementGetDevAddr>
            break;
 801225a:	e115      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801225c:	4b8d      	ldr	r3, [pc, #564]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801225e:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	711a      	strb	r2, [r3, #4]
            break;
 8012266:	e10f      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012268:	4b8a      	ldr	r3, [pc, #552]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801226a:	f893 209c 	ldrb.w	r2, [r3, #156]	@ 0x9c
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	711a      	strb	r2, [r3, #4]
            break;
 8012272:	e109      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012274:	231d      	movs	r3, #29
 8012276:	763b      	strb	r3, [r7, #24]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012278:	4b86      	ldr	r3, [pc, #536]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801227a:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 801227e:	f107 0310 	add.w	r3, r7, #16
 8012282:	f107 0218 	add.w	r2, r7, #24
 8012286:	4618      	mov	r0, r3
 8012288:	f003 f832 	bl	80152f0 <RegionGetPhyParam>

            mibGet->Param.ChannelList = phyParam.Channels;
 801228c:	693a      	ldr	r2, [r7, #16]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	605a      	str	r2, [r3, #4]
            break;
 8012292:	e0f9      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	4a7f      	ldr	r2, [pc, #508]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012298:	3304      	adds	r3, #4
 801229a:	327c      	adds	r2, #124	@ 0x7c
 801229c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122a0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122a4:	e0f0      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	4a7a      	ldr	r2, [pc, #488]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80122aa:	3304      	adds	r3, #4
 80122ac:	32c4      	adds	r2, #196	@ 0xc4
 80122ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122b2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122b6:	e0e7      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	4a76      	ldr	r2, [pc, #472]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80122bc:	3304      	adds	r3, #4
 80122be:	3284      	adds	r2, #132	@ 0x84
 80122c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122c4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122c8:	e0de      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	4a71      	ldr	r2, [pc, #452]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80122ce:	3304      	adds	r3, #4
 80122d0:	32cc      	adds	r2, #204	@ 0xcc
 80122d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122d6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80122da:	e0d5      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80122dc:	231b      	movs	r3, #27
 80122de:	763b      	strb	r3, [r7, #24]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122e0:	4b6c      	ldr	r3, [pc, #432]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80122e2:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 80122e6:	463b      	mov	r3, r7
 80122e8:	f107 0218 	add.w	r2, r7, #24
 80122ec:	4618      	mov	r0, r3
 80122ee:	f002 ffff 	bl	80152f0 <RegionGetPhyParam>
 80122f2:	f107 0310 	add.w	r3, r7, #16
 80122f6:	463a      	mov	r2, r7
 80122f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122fc:	e883 0003 	stmia.w	r3, {r0, r1}

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012300:	693a      	ldr	r2, [r7, #16]
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	605a      	str	r2, [r3, #4]
            break;
 8012306:	e0bf      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012308:	231a      	movs	r3, #26
 801230a:	763b      	strb	r3, [r7, #24]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801230c:	4b61      	ldr	r3, [pc, #388]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801230e:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8012312:	463b      	mov	r3, r7
 8012314:	f107 0218 	add.w	r2, r7, #24
 8012318:	4618      	mov	r0, r3
 801231a:	f002 ffe9 	bl	80152f0 <RegionGetPhyParam>
 801231e:	f107 0310 	add.w	r3, r7, #16
 8012322:	463a      	mov	r2, r7
 8012324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012328:	e883 0003 	stmia.w	r3, {r0, r1}

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801232c:	693a      	ldr	r2, [r7, #16]
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	605a      	str	r2, [r3, #4]
            break;
 8012332:	e0a9      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012334:	4b57      	ldr	r3, [pc, #348]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012336:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	711a      	strb	r2, [r3, #4]
            break;
 801233e:	e0a3      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8012340:	4b54      	ldr	r3, [pc, #336]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012342:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	605a      	str	r2, [r3, #4]
            break;
 8012348:	e09e      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801234a:	4b52      	ldr	r3, [pc, #328]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801234c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	605a      	str	r2, [r3, #4]
            break;
 8012352:	e099      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012354:	4b4f      	ldr	r3, [pc, #316]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012356:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	605a      	str	r2, [r3, #4]
            break;
 801235c:	e094      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801235e:	4b4d      	ldr	r3, [pc, #308]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012360:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	605a      	str	r2, [r3, #4]
            break;
 8012366:	e08f      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012368:	4b4a      	ldr	r3, [pc, #296]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801236a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	605a      	str	r2, [r3, #4]
            break;
 8012370:	e08a      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012372:	4b48      	ldr	r3, [pc, #288]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012374:	f993 20ed 	ldrsb.w	r2, [r3, #237]	@ 0xed
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	711a      	strb	r2, [r3, #4]
            break;
 801237c:	e084      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801237e:	4b45      	ldr	r3, [pc, #276]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012380:	f993 2045 	ldrsb.w	r2, [r3, #69]	@ 0x45
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	711a      	strb	r2, [r3, #4]
            break;
 8012388:	e07e      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801238a:	4b42      	ldr	r3, [pc, #264]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801238c:	f993 20ec 	ldrsb.w	r2, [r3, #236]	@ 0xec
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	711a      	strb	r2, [r3, #4]
            break;
 8012394:	e078      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012396:	4b3f      	ldr	r3, [pc, #252]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012398:	f993 2044 	ldrsb.w	r2, [r3, #68]	@ 0x44
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	711a      	strb	r2, [r3, #4]
            break;
 80123a0:	e072      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80123a2:	4b3c      	ldr	r3, [pc, #240]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80123a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	605a      	str	r2, [r3, #4]
            break;
 80123aa:	e06d      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80123ac:	4b39      	ldr	r3, [pc, #228]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80123ae:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	711a      	strb	r2, [r3, #4]
            break;
 80123b6:	e067      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80123b8:	4b36      	ldr	r3, [pc, #216]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80123ba:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	605a      	str	r2, [r3, #4]
            break;
 80123c2:	e061      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	4a33      	ldr	r2, [pc, #204]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80123c8:	605a      	str	r2, [r3, #4]
            break;
 80123ca:	e05d      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2200      	movs	r2, #0
 80123d0:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80123d2:	e059      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80123d4:	4b2f      	ldr	r3, [pc, #188]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80123d6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	605a      	str	r2, [r3, #4]
            break;
 80123de:	e053      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	4a2c      	ldr	r2, [pc, #176]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80123e4:	f8d2 2138 	ldr.w	r2, [r2, #312]	@ 0x138
 80123e8:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80123ea:	68fc      	ldr	r4, [r7, #12]
 80123ec:	f003 f912 	bl	8015614 <RegionGetVersion>
 80123f0:	60a0      	str	r0, [r4, #8]
            break;
 80123f2:	e049      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80123f4:	4b27      	ldr	r3, [pc, #156]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 80123f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	605a      	str	r2, [r3, #4]
            break;
 80123fe:	e043      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012400:	4b24      	ldr	r3, [pc, #144]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012402:	f8b3 2098 	ldrh.w	r2, [r3, #152]	@ 0x98
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	809a      	strh	r2, [r3, #4]
            break;
 801240a:	e03d      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801240c:	4b21      	ldr	r3, [pc, #132]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801240e:	f8b3 209a 	ldrh.w	r2, [r3, #154]	@ 0x9a
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	809a      	strh	r2, [r3, #4]
            break;
 8012416:	e037      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012418:	4b1e      	ldr	r3, [pc, #120]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801241a:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	@ 0xe0
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	809a      	strh	r2, [r3, #4]
            break;
 8012422:	e031      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012424:	4b1b      	ldr	r3, [pc, #108]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012426:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	@ 0xe2
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	809a      	strh	r2, [r3, #4]
            break;
 801242e:	e02b      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8012430:	4b18      	ldr	r3, [pc, #96]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012432:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012436:	2b00      	cmp	r3, #0
 8012438:	d007      	beq.n	801244a <LoRaMacMibGetRequestConfirm+0x372>
 801243a:	4b16      	ldr	r3, [pc, #88]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801243c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012440:	2b06      	cmp	r3, #6
 8012442:	d002      	beq.n	801244a <LoRaMacMibGetRequestConfirm+0x372>
            {
                status = LORAMAC_STATUS_ERROR;
 8012444:	2318      	movs	r3, #24
 8012446:	77fb      	strb	r3, [r7, #31]
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8012448:	e01e      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 801244a:	4b12      	ldr	r3, [pc, #72]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 801244c:	f9b3 27f0 	ldrsh.w	r2, [r3, #2032]	@ 0x7f0
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	809a      	strh	r2, [r3, #4]
            break;
 8012454:	e018      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8012456:	4b0f      	ldr	r3, [pc, #60]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012458:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801245c:	2b00      	cmp	r3, #0
 801245e:	d007      	beq.n	8012470 <LoRaMacMibGetRequestConfirm+0x398>
 8012460:	4b0c      	ldr	r3, [pc, #48]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012462:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012466:	2b06      	cmp	r3, #6
 8012468:	d002      	beq.n	8012470 <LoRaMacMibGetRequestConfirm+0x398>
            {
                status = LORAMAC_STATUS_ERROR;
 801246a:	2318      	movs	r3, #24
 801246c:	77fb      	strb	r3, [r7, #31]
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 801246e:	e00b      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 8012470:	4b08      	ldr	r3, [pc, #32]	@ (8012494 <LoRaMacMibGetRequestConfirm+0x3bc>)
 8012472:	f8d3 27f4 	ldr.w	r2, [r3, #2036]	@ 0x7f4
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	605a      	str	r2, [r3, #4]
            break;
 801247a:	e005      	b.n	8012488 <LoRaMacMibGetRequestConfirm+0x3b0>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801247c:	68f8      	ldr	r0, [r7, #12]
 801247e:	f000 ffbc 	bl	80133fa <LoRaMacClassBMibGetRequestConfirm>
 8012482:	4603      	mov	r3, r0
 8012484:	77fb      	strb	r3, [r7, #31]
            break;
 8012486:	bf00      	nop
        }
    }
    return status;
 8012488:	7ffb      	ldrb	r3, [r7, #31]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3724      	adds	r7, #36	@ 0x24
 801248e:	46bd      	mov	sp, r7
 8012490:	bd90      	pop	{r4, r7, pc}
 8012492:	bf00      	nop
 8012494:	2000bfc0 	.word	0x2000bfc0

08012498 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b086      	sub	sp, #24
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80124a0:	2300      	movs	r3, #0
 80124a2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d101      	bne.n	80124ae <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124aa:	2303      	movs	r3, #3
 80124ac:	e3a3      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80124ae:	4bbb      	ldr	r3, [pc, #748]	@ (801279c <LoRaMacMibSetRequestConfirm+0x304>)
 80124b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80124b4:	f003 0302 	and.w	r3, r3, #2
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d001      	beq.n	80124c0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80124bc:	2301      	movs	r3, #1
 80124be:	e39a      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
    }

    switch( mibSet->Type )
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80124c6:	f200 8374 	bhi.w	8012bb2 <LoRaMacMibSetRequestConfirm+0x71a>
 80124ca:	a201      	add	r2, pc, #4	@ (adr r2, 80124d0 <LoRaMacMibSetRequestConfirm+0x38>)
 80124cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124d0:	080125d1 	.word	0x080125d1
 80124d4:	080125e1 	.word	0x080125e1
 80124d8:	080125fb 	.word	0x080125fb
 80124dc:	08012613 	.word	0x08012613
 80124e0:	0801262b 	.word	0x0801262b
 80124e4:	08012637 	.word	0x08012637
 80124e8:	08012643 	.word	0x08012643
 80124ec:	0801266d 	.word	0x0801266d
 80124f0:	08012693 	.word	0x08012693
 80124f4:	080126b9 	.word	0x080126b9
 80124f8:	080126df 	.word	0x080126df
 80124fc:	08012705 	.word	0x08012705
 8012500:	0801272b 	.word	0x0801272b
 8012504:	08012751 	.word	0x08012751
 8012508:	08012777 	.word	0x08012777
 801250c:	080127a5 	.word	0x080127a5
 8012510:	080127c5 	.word	0x080127c5
 8012514:	08012bb3 	.word	0x08012bb3
 8012518:	080127d1 	.word	0x080127d1
 801251c:	08012841 	.word	0x08012841
 8012520:	08012881 	.word	0x08012881
 8012524:	080128e3 	.word	0x080128e3
 8012528:	08012953 	.word	0x08012953
 801252c:	08012923 	.word	0x08012923
 8012530:	08012983 	.word	0x08012983
 8012534:	080129a5 	.word	0x080129a5
 8012538:	080129af 	.word	0x080129af
 801253c:	080129b9 	.word	0x080129b9
 8012540:	080129c3 	.word	0x080129c3
 8012544:	080129cd 	.word	0x080129cd
 8012548:	080129d7 	.word	0x080129d7
 801254c:	08012a09 	.word	0x08012a09
 8012550:	08012a7d 	.word	0x08012a7d
 8012554:	08012a43 	.word	0x08012a43
 8012558:	08012aaf 	.word	0x08012aaf
 801255c:	08012ac5 	.word	0x08012ac5
 8012560:	08012add 	.word	0x08012add
 8012564:	08012ae9 	.word	0x08012ae9
 8012568:	08012af5 	.word	0x08012af5
 801256c:	08012bb3 	.word	0x08012bb3
 8012570:	08012aff 	.word	0x08012aff
 8012574:	08012bb3 	.word	0x08012bb3
 8012578:	08012bb3 	.word	0x08012bb3
 801257c:	08012bb3 	.word	0x08012bb3
 8012580:	08012bb3 	.word	0x08012bb3
 8012584:	08012bb3 	.word	0x08012bb3
 8012588:	08012bb3 	.word	0x08012bb3
 801258c:	08012bb3 	.word	0x08012bb3
 8012590:	08012bb3 	.word	0x08012bb3
 8012594:	08012bb3 	.word	0x08012bb3
 8012598:	08012bb3 	.word	0x08012bb3
 801259c:	08012bb3 	.word	0x08012bb3
 80125a0:	08012bb3 	.word	0x08012bb3
 80125a4:	08012bb3 	.word	0x08012bb3
 80125a8:	08012bb3 	.word	0x08012bb3
 80125ac:	08012bb3 	.word	0x08012bb3
 80125b0:	08012bb3 	.word	0x08012bb3
 80125b4:	08012b29 	.word	0x08012b29
 80125b8:	08012b35 	.word	0x08012b35
 80125bc:	08012b41 	.word	0x08012b41
 80125c0:	08012b4d 	.word	0x08012b4d
 80125c4:	08012b59 	.word	0x08012b59
 80125c8:	08012b65 	.word	0x08012b65
 80125cc:	08012b8d 	.word	0x08012b8d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	791b      	ldrb	r3, [r3, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7fd fad9 	bl	800fb8c <SwitchClass>
 80125da:	4603      	mov	r3, r0
 80125dc:	75fb      	strb	r3, [r7, #23]
            break;
 80125de:	e309      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	791b      	ldrb	r3, [r3, #4]
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d005      	beq.n	80125f4 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	791a      	ldrb	r2, [r3, #4]
 80125ec:	4b6c      	ldr	r3, [pc, #432]	@ (80127a0 <LoRaMacMibSetRequestConfirm+0x308>)
 80125ee:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80125f2:	e2ff      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125f4:	2303      	movs	r3, #3
 80125f6:	75fb      	strb	r3, [r7, #23]
            break;
 80125f8:	e2fc      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fa fc78 	bl	800cef4 <SecureElementSetDevEui>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	f000 82d9 	beq.w	8012bbe <LoRaMacMibSetRequestConfirm+0x726>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801260c:	2303      	movs	r3, #3
 801260e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012610:	e2d5      	b.n	8012bbe <LoRaMacMibSetRequestConfirm+0x726>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	4618      	mov	r0, r3
 8012618:	f7fa fc9c 	bl	800cf54 <SecureElementSetJoinEui>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	f000 82cf 	beq.w	8012bc2 <LoRaMacMibSetRequestConfirm+0x72a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012624:	2303      	movs	r3, #3
 8012626:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012628:	e2cb      	b.n	8012bc2 <LoRaMacMibSetRequestConfirm+0x72a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	791a      	ldrb	r2, [r3, #4]
 801262e:	4b5c      	ldr	r3, [pc, #368]	@ (80127a0 <LoRaMacMibSetRequestConfirm+0x308>)
 8012630:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            break;
 8012634:	e2de      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	4a59      	ldr	r2, [pc, #356]	@ (80127a0 <LoRaMacMibSetRequestConfirm+0x308>)
 801263c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
            break;
 8012640:	e2d8      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8012642:	4b57      	ldr	r3, [pc, #348]	@ (80127a0 <LoRaMacMibSetRequestConfirm+0x308>)
 8012644:	f893 213c 	ldrb.w	r2, [r3, #316]	@ 0x13c
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	685b      	ldr	r3, [r3, #4]
 801264c:	4619      	mov	r1, r3
 801264e:	4610      	mov	r0, r2
 8012650:	f7fa fcb0 	bl	800cfb4 <SecureElementSetDevAddr>
 8012654:	4603      	mov	r3, r0
 8012656:	2b00      	cmp	r3, #0
 8012658:	d002      	beq.n	8012660 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801265a:	2303      	movs	r3, #3
 801265c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801265e:	e2c9      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	4a4e      	ldr	r2, [pc, #312]	@ (80127a0 <LoRaMacMibSetRequestConfirm+0x308>)
 8012666:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
            break;
 801266a:	e2c3      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d00b      	beq.n	801268c <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	4619      	mov	r1, r3
 801267a:	2000      	movs	r0, #0
 801267c:	f002 f842 	bl	8014704 <LoRaMacCryptoSetKey>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	f000 829f 	beq.w	8012bc6 <LoRaMacMibSetRequestConfirm+0x72e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012688:	2311      	movs	r3, #17
 801268a:	e2b4      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801268c:	2303      	movs	r3, #3
 801268e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012690:	e299      	b.n	8012bc6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d00b      	beq.n	80126b2 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	4619      	mov	r1, r3
 80126a0:	2001      	movs	r0, #1
 80126a2:	f002 f82f 	bl	8014704 <LoRaMacCryptoSetKey>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	f000 828e 	beq.w	8012bca <LoRaMacMibSetRequestConfirm+0x732>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126ae:	2311      	movs	r3, #17
 80126b0:	e2a1      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126b2:	2303      	movs	r3, #3
 80126b4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126b6:	e288      	b.n	8012bca <LoRaMacMibSetRequestConfirm+0x732>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	685b      	ldr	r3, [r3, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d00b      	beq.n	80126d8 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	4619      	mov	r1, r3
 80126c6:	2008      	movs	r0, #8
 80126c8:	f002 f81c 	bl	8014704 <LoRaMacCryptoSetKey>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	f000 827d 	beq.w	8012bce <LoRaMacMibSetRequestConfirm+0x736>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126d4:	2311      	movs	r3, #17
 80126d6:	e28e      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126d8:	2303      	movs	r3, #3
 80126da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126dc:	e277      	b.n	8012bce <LoRaMacMibSetRequestConfirm+0x736>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00b      	beq.n	80126fe <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	4619      	mov	r1, r3
 80126ec:	2009      	movs	r0, #9
 80126ee:	f002 f809 	bl	8014704 <LoRaMacCryptoSetKey>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f000 826c 	beq.w	8012bd2 <LoRaMacMibSetRequestConfirm+0x73a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80126fa:	2311      	movs	r3, #17
 80126fc:	e27b      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126fe:	2303      	movs	r3, #3
 8012700:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012702:	e266      	b.n	8012bd2 <LoRaMacMibSetRequestConfirm+0x73a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d00b      	beq.n	8012724 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	4619      	mov	r1, r3
 8012712:	200c      	movs	r0, #12
 8012714:	f001 fff6 	bl	8014704 <LoRaMacCryptoSetKey>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	f000 825b 	beq.w	8012bd6 <LoRaMacMibSetRequestConfirm+0x73e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012720:	2311      	movs	r3, #17
 8012722:	e268      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012724:	2303      	movs	r3, #3
 8012726:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012728:	e255      	b.n	8012bd6 <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d00b      	beq.n	801274a <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	4619      	mov	r1, r3
 8012738:	200d      	movs	r0, #13
 801273a:	f001 ffe3 	bl	8014704 <LoRaMacCryptoSetKey>
 801273e:	4603      	mov	r3, r0
 8012740:	2b00      	cmp	r3, #0
 8012742:	f000 824a 	beq.w	8012bda <LoRaMacMibSetRequestConfirm+0x742>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012746:	2311      	movs	r3, #17
 8012748:	e255      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801274a:	2303      	movs	r3, #3
 801274c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801274e:	e244      	b.n	8012bda <LoRaMacMibSetRequestConfirm+0x742>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	685b      	ldr	r3, [r3, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d00b      	beq.n	8012770 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	685b      	ldr	r3, [r3, #4]
 801275c:	4619      	mov	r1, r3
 801275e:	200e      	movs	r0, #14
 8012760:	f001 ffd0 	bl	8014704 <LoRaMacCryptoSetKey>
 8012764:	4603      	mov	r3, r0
 8012766:	2b00      	cmp	r3, #0
 8012768:	f000 8239 	beq.w	8012bde <LoRaMacMibSetRequestConfirm+0x746>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801276c:	2311      	movs	r3, #17
 801276e:	e242      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012770:	2303      	movs	r3, #3
 8012772:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012774:	e233      	b.n	8012bde <LoRaMacMibSetRequestConfirm+0x746>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d00b      	beq.n	8012796 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	4619      	mov	r1, r3
 8012784:	200f      	movs	r0, #15
 8012786:	f001 ffbd 	bl	8014704 <LoRaMacCryptoSetKey>
 801278a:	4603      	mov	r3, r0
 801278c:	2b00      	cmp	r3, #0
 801278e:	f000 8228 	beq.w	8012be2 <LoRaMacMibSetRequestConfirm+0x74a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012792:	2311      	movs	r3, #17
 8012794:	e22f      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012796:	2303      	movs	r3, #3
 8012798:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801279a:	e222      	b.n	8012be2 <LoRaMacMibSetRequestConfirm+0x74a>
 801279c:	2000ba68 	.word	0x2000ba68
 80127a0:	2000bfc0 	.word	0x2000bfc0
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	791a      	ldrb	r2, [r3, #4]
 80127a8:	4bb2      	ldr	r3, [pc, #712]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80127aa:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80127ae:	4bb2      	ldr	r3, [pc, #712]	@ (8012a78 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80127b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80127b2:	4ab0      	ldr	r2, [pc, #704]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80127b4:	f892 2129 	ldrb.w	r2, [r2, #297]	@ 0x129
 80127b8:	4610      	mov	r0, r2
 80127ba:	4798      	blx	r3
            Radio.Sleep( );
 80127bc:	4bae      	ldr	r3, [pc, #696]	@ (8012a78 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80127be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127c0:	4798      	blx	r3
            break;
 80127c2:	e217      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	791a      	ldrb	r2, [r3, #4]
 80127c8:	4baa      	ldr	r3, [pc, #680]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80127ca:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
            break;
 80127ce:	e211      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	7a1b      	ldrb	r3, [r3, #8]
 80127d4:	b25b      	sxtb	r3, r3
 80127d6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127d8:	4ba6      	ldr	r3, [pc, #664]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80127da:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80127de:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80127e0:	4ba4      	ldr	r3, [pc, #656]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80127e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80127e6:	f107 0108 	add.w	r1, r7, #8
 80127ea:	2207      	movs	r2, #7
 80127ec:	4618      	mov	r0, r3
 80127ee:	f002 fdc3 	bl	8015378 <RegionVerify>
 80127f2:	4603      	mov	r3, r0
 80127f4:	f083 0301 	eor.w	r3, r3, #1
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d002      	beq.n	8012804 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127fe:	2303      	movs	r3, #3
 8012800:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8012802:	e1f7      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801280a:	4b9a      	ldr	r3, [pc, #616]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801280c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012810:	f107 0108 	add.w	r1, r7, #8
 8012814:	2200      	movs	r2, #0
 8012816:	4618      	mov	r0, r3
 8012818:	f002 fdae 	bl	8015378 <RegionVerify>
 801281c:	4603      	mov	r3, r0
 801281e:	f083 0301 	eor.w	r3, r3, #1
 8012822:	b2db      	uxtb	r3, r3
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012828:	2303      	movs	r3, #3
 801282a:	75fb      	strb	r3, [r7, #23]
            break;
 801282c:	e1e2      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801282e:	4b91      	ldr	r3, [pc, #580]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	337c      	adds	r3, #124	@ 0x7c
 8012834:	3204      	adds	r2, #4
 8012836:	e892 0003 	ldmia.w	r2, {r0, r1}
 801283a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801283e:	e1d9      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	7a1b      	ldrb	r3, [r3, #8]
 8012844:	b25b      	sxtb	r3, r3
 8012846:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012848:	4b8a      	ldr	r3, [pc, #552]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801284a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 801284e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012850:	4b88      	ldr	r3, [pc, #544]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012852:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012856:	f107 0108 	add.w	r1, r7, #8
 801285a:	2207      	movs	r2, #7
 801285c:	4618      	mov	r0, r3
 801285e:	f002 fd8b 	bl	8015378 <RegionVerify>
 8012862:	4603      	mov	r3, r0
 8012864:	2b00      	cmp	r3, #0
 8012866:	d008      	beq.n	801287a <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012868:	4b82      	ldr	r3, [pc, #520]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	33c4      	adds	r3, #196	@ 0xc4
 801286e:	3204      	adds	r2, #4
 8012870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012874:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012878:	e1bc      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801287a:	2303      	movs	r3, #3
 801287c:	75fb      	strb	r3, [r7, #23]
            break;
 801287e:	e1b9      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	7a1b      	ldrb	r3, [r3, #8]
 8012884:	b25b      	sxtb	r3, r3
 8012886:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012888:	4b7a      	ldr	r3, [pc, #488]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801288a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 801288e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012890:	4b78      	ldr	r3, [pc, #480]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012892:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012896:	f107 0108 	add.w	r1, r7, #8
 801289a:	2207      	movs	r2, #7
 801289c:	4618      	mov	r0, r3
 801289e:	f002 fd6b 	bl	8015378 <RegionVerify>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d019      	beq.n	80128dc <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80128a8:	4b72      	ldr	r3, [pc, #456]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	3384      	adds	r3, #132	@ 0x84
 80128ae:	3204      	adds	r2, #4
 80128b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128b4:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80128b8:	4b6e      	ldr	r3, [pc, #440]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80128ba:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 80128be:	2b02      	cmp	r3, #2
 80128c0:	f040 8191 	bne.w	8012be6 <LoRaMacMibSetRequestConfirm+0x74e>
 80128c4:	4b6b      	ldr	r3, [pc, #428]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80128c6:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	f000 818b 	beq.w	8012be6 <LoRaMacMibSetRequestConfirm+0x74e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80128d0:	4b69      	ldr	r3, [pc, #420]	@ (8012a78 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128d4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80128d6:	f7fe fc1d 	bl	8011114 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80128da:	e184      	b.n	8012be6 <LoRaMacMibSetRequestConfirm+0x74e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128dc:	2303      	movs	r3, #3
 80128de:	75fb      	strb	r3, [r7, #23]
            break;
 80128e0:	e181      	b.n	8012be6 <LoRaMacMibSetRequestConfirm+0x74e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	7a1b      	ldrb	r3, [r3, #8]
 80128e6:	b25b      	sxtb	r3, r3
 80128e8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80128ea:	4b62      	ldr	r3, [pc, #392]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80128ec:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 80128f0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80128f2:	4b60      	ldr	r3, [pc, #384]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80128f4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80128f8:	f107 0108 	add.w	r1, r7, #8
 80128fc:	2207      	movs	r2, #7
 80128fe:	4618      	mov	r0, r3
 8012900:	f002 fd3a 	bl	8015378 <RegionVerify>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d008      	beq.n	801291c <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801290a:	4b5a      	ldr	r3, [pc, #360]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801290c:	687a      	ldr	r2, [r7, #4]
 801290e:	33cc      	adds	r3, #204	@ 0xcc
 8012910:	3204      	adds	r2, #4
 8012912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012916:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801291a:	e16b      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801291c:	2303      	movs	r3, #3
 801291e:	75fb      	strb	r3, [r7, #23]
            break;
 8012920:	e168      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	685b      	ldr	r3, [r3, #4]
 8012926:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012928:	2301      	movs	r3, #1
 801292a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801292c:	4b51      	ldr	r3, [pc, #324]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801292e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012932:	f107 020c 	add.w	r2, r7, #12
 8012936:	4611      	mov	r1, r2
 8012938:	4618      	mov	r0, r3
 801293a:	f002 fd46 	bl	80153ca <RegionChanMaskSet>
 801293e:	4603      	mov	r3, r0
 8012940:	f083 0301 	eor.w	r3, r3, #1
 8012944:	b2db      	uxtb	r3, r3
 8012946:	2b00      	cmp	r3, #0
 8012948:	f000 814f 	beq.w	8012bea <LoRaMacMibSetRequestConfirm+0x752>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801294c:	2303      	movs	r3, #3
 801294e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012950:	e14b      	b.n	8012bea <LoRaMacMibSetRequestConfirm+0x752>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012958:	2300      	movs	r3, #0
 801295a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801295c:	4b45      	ldr	r3, [pc, #276]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801295e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012962:	f107 020c 	add.w	r2, r7, #12
 8012966:	4611      	mov	r1, r2
 8012968:	4618      	mov	r0, r3
 801296a:	f002 fd2e 	bl	80153ca <RegionChanMaskSet>
 801296e:	4603      	mov	r3, r0
 8012970:	f083 0301 	eor.w	r3, r3, #1
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b00      	cmp	r3, #0
 8012978:	f000 8139 	beq.w	8012bee <LoRaMacMibSetRequestConfirm+0x756>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801297c:	2303      	movs	r3, #3
 801297e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012980:	e135      	b.n	8012bee <LoRaMacMibSetRequestConfirm+0x756>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	791b      	ldrb	r3, [r3, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d009      	beq.n	801299e <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801298e:	2b0f      	cmp	r3, #15
 8012990:	d805      	bhi.n	801299e <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	791a      	ldrb	r2, [r3, #4]
 8012996:	4b37      	ldr	r3, [pc, #220]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012998:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801299c:	e12a      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801299e:	2303      	movs	r3, #3
 80129a0:	75fb      	strb	r3, [r7, #23]
            break;
 80129a2:	e127      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	685b      	ldr	r3, [r3, #4]
 80129a8:	4a32      	ldr	r2, [pc, #200]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80129aa:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 80129ac:	e122      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	4a30      	ldr	r2, [pc, #192]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80129b4:	6693      	str	r3, [r2, #104]	@ 0x68
            break;
 80129b6:	e11d      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	685b      	ldr	r3, [r3, #4]
 80129bc:	4a2d      	ldr	r2, [pc, #180]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80129be:	66d3      	str	r3, [r2, #108]	@ 0x6c
            break;
 80129c0:	e118      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	4a2b      	ldr	r2, [pc, #172]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80129c8:	6713      	str	r3, [r2, #112]	@ 0x70
            break;
 80129ca:	e113      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	4a28      	ldr	r2, [pc, #160]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80129d2:	6753      	str	r3, [r2, #116]	@ 0x74
            break;
 80129d4:	e10e      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80129dc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80129de:	4b25      	ldr	r3, [pc, #148]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80129e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80129e4:	f107 0108 	add.w	r1, r7, #8
 80129e8:	2206      	movs	r2, #6
 80129ea:	4618      	mov	r0, r3
 80129ec:	f002 fcc4 	bl	8015378 <RegionVerify>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d005      	beq.n	8012a02 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80129f6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129fa:	4b1e      	ldr	r3, [pc, #120]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80129fc:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a00:	e0f8      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a02:	2303      	movs	r3, #3
 8012a04:	75fb      	strb	r3, [r7, #23]
            break;
 8012a06:	e0f5      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a0e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a10:	4b18      	ldr	r3, [pc, #96]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012a12:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8012a16:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012a18:	4b16      	ldr	r3, [pc, #88]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012a1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012a1e:	f107 0108 	add.w	r1, r7, #8
 8012a22:	2205      	movs	r2, #5
 8012a24:	4618      	mov	r0, r3
 8012a26:	f002 fca7 	bl	8015378 <RegionVerify>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d005      	beq.n	8012a3c <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012a30:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a34:	4b0f      	ldr	r3, [pc, #60]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a3a:	e0db      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a3c:	2303      	movs	r3, #3
 8012a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8012a40:	e0d8      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a48:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012a4c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012a50:	f107 0108 	add.w	r1, r7, #8
 8012a54:	220a      	movs	r2, #10
 8012a56:	4618      	mov	r0, r3
 8012a58:	f002 fc8e 	bl	8015378 <RegionVerify>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d005      	beq.n	8012a6e <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012a62:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012a66:	4b03      	ldr	r3, [pc, #12]	@ (8012a74 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8012a68:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a6c:	e0c2      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a6e:	2303      	movs	r3, #3
 8012a70:	75fb      	strb	r3, [r7, #23]
            break;
 8012a72:	e0bf      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
 8012a74:	2000bfc0 	.word	0x2000bfc0
 8012a78:	08022c78 	.word	0x08022c78
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012a82:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012a84:	4b5e      	ldr	r3, [pc, #376]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012a86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012a8a:	f107 0108 	add.w	r1, r7, #8
 8012a8e:	2209      	movs	r2, #9
 8012a90:	4618      	mov	r0, r3
 8012a92:	f002 fc71 	bl	8015378 <RegionVerify>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d005      	beq.n	8012aa8 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012a9c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012aa0:	4b57      	ldr	r3, [pc, #348]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012aa6:	e0a5      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012aa8:	2303      	movs	r3, #3
 8012aaa:	75fb      	strb	r3, [r7, #23]
            break;
 8012aac:	e0a2      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	4a53      	ldr	r2, [pc, #332]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012ab4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8012ab8:	4b51      	ldr	r3, [pc, #324]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012abe:	4a50      	ldr	r2, [pc, #320]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012ac0:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8012ac2:	e097      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	791a      	ldrb	r2, [r3, #4]
 8012ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012aca:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
 8012ace:	4b4c      	ldr	r3, [pc, #304]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012ad0:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 8012ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012ad6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            break;
 8012ada:	e08b      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	4a47      	ldr	r2, [pc, #284]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012ae2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
            break;
 8012ae6:	e085      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	4a44      	ldr	r2, [pc, #272]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012aee:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
            break;
 8012af2:	e07f      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012af4:	f7fe fd76 	bl	80115e4 <RestoreNvmData>
 8012af8:	4603      	mov	r3, r0
 8012afa:	75fb      	strb	r3, [r7, #23]
            break;
 8012afc:	e07a      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	799b      	ldrb	r3, [r3, #6]
 8012b02:	2b01      	cmp	r3, #1
 8012b04:	d80d      	bhi.n	8012b22 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012b06:	4a3e      	ldr	r2, [pc, #248]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6858      	ldr	r0, [r3, #4]
 8012b14:	f001 fd2a 	bl	801456c <LoRaMacCryptoSetLrWanVersion>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d069      	beq.n	8012bf2 <LoRaMacMibSetRequestConfirm+0x75a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b1e:	2311      	movs	r3, #17
 8012b20:	e069      	b.n	8012bf6 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b22:	2303      	movs	r3, #3
 8012b24:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b26:	e064      	b.n	8012bf2 <LoRaMacMibSetRequestConfirm+0x75a>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	4a34      	ldr	r2, [pc, #208]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b2e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
            break;
 8012b32:	e05f      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	889a      	ldrh	r2, [r3, #4]
 8012b38:	4b31      	ldr	r3, [pc, #196]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b3a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
            break;
 8012b3e:	e059      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	889a      	ldrh	r2, [r3, #4]
 8012b44:	4b2e      	ldr	r3, [pc, #184]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b46:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
            break;
 8012b4a:	e053      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	889a      	ldrh	r2, [r3, #4]
 8012b50:	4b2b      	ldr	r3, [pc, #172]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b52:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
            break;
 8012b56:	e04d      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	889a      	ldrh	r2, [r3, #4]
 8012b5c:	4b28      	ldr	r3, [pc, #160]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b5e:	f8a3 20e2 	strh.w	r2, [r3, #226]	@ 0xe2
            break;
 8012b62:	e047      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8012b64:	4b26      	ldr	r3, [pc, #152]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d007      	beq.n	8012b7e <LoRaMacMibSetRequestConfirm+0x6e6>
 8012b6e:	4b24      	ldr	r3, [pc, #144]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b70:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012b74:	2b06      	cmp	r3, #6
 8012b76:	d002      	beq.n	8012b7e <LoRaMacMibSetRequestConfirm+0x6e6>
            {
                status = LORAMAC_STATUS_ERROR;
 8012b78:	2318      	movs	r3, #24
 8012b7a:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8012b7c:	e03a      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8012b84:	4b1e      	ldr	r3, [pc, #120]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b86:	f8a3 27f0 	strh.w	r2, [r3, #2032]	@ 0x7f0
            break;
 8012b8a:	e033      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8012b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d007      	beq.n	8012ba6 <LoRaMacMibSetRequestConfirm+0x70e>
 8012b96:	4b1a      	ldr	r3, [pc, #104]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012b98:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8012b9c:	2b06      	cmp	r3, #6
 8012b9e:	d002      	beq.n	8012ba6 <LoRaMacMibSetRequestConfirm+0x70e>
            {
                status = LORAMAC_STATUS_ERROR;
 8012ba0:	2318      	movs	r3, #24
 8012ba2:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8012ba4:	e026      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	4a15      	ldr	r2, [pc, #84]	@ (8012c00 <LoRaMacMibSetRequestConfirm+0x768>)
 8012bac:	f8c2 37f4 	str.w	r3, [r2, #2036]	@ 0x7f4
            break;
 8012bb0:	e020      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f000 fc2c 	bl	8013410 <LoRaMacMibClassBSetRequestConfirm>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	75fb      	strb	r3, [r7, #23]
            break;
 8012bbc:	e01a      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bbe:	bf00      	nop
 8012bc0:	e018      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bc2:	bf00      	nop
 8012bc4:	e016      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bc6:	bf00      	nop
 8012bc8:	e014      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bca:	bf00      	nop
 8012bcc:	e012      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bce:	bf00      	nop
 8012bd0:	e010      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bd2:	bf00      	nop
 8012bd4:	e00e      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bd6:	bf00      	nop
 8012bd8:	e00c      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bda:	bf00      	nop
 8012bdc:	e00a      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bde:	bf00      	nop
 8012be0:	e008      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012be2:	bf00      	nop
 8012be4:	e006      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012be6:	bf00      	nop
 8012be8:	e004      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bea:	bf00      	nop
 8012bec:	e002      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bee:	bf00      	nop
 8012bf0:	e000      	b.n	8012bf4 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8012bf2:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	3718      	adds	r7, #24
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	2000bfc0 	.word	0x2000bfc0

08012c04 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b086      	sub	sp, #24
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012c0c:	2302      	movs	r3, #2
 8012c0e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012c10:	2300      	movs	r3, #0
 8012c12:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d101      	bne.n	8012c1e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c1a:	2303      	movs	r3, #3
 8012c1c:	e13d      	b.n	8012e9a <LoRaMacMlmeRequest+0x296>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012c1e:	f7fc fbcd 	bl	800f3bc <LoRaMacIsBusy>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d001      	beq.n	8012c2c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	e136      	b.n	8012e9a <LoRaMacMlmeRequest+0x296>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012c2c:	f001 f92a 	bl	8013e84 <LoRaMacConfirmQueueIsFull>
 8012c30:	4603      	mov	r3, r0
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d001      	beq.n	8012c3a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8012c36:	2301      	movs	r3, #1
 8012c38:	e12f      	b.n	8012e9a <LoRaMacMlmeRequest+0x296>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012c3a:	f001 f917 	bl	8013e6c <LoRaMacConfirmQueueGetCnt>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d104      	bne.n	8012c4e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012c44:	2228      	movs	r2, #40	@ 0x28
 8012c46:	2100      	movs	r1, #0
 8012c48:	4896      	ldr	r0, [pc, #600]	@ (8012ea4 <LoRaMacMlmeRequest+0x2a0>)
 8012c4a:	f007 fa1b 	bl	801a084 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012c4e:	4b96      	ldr	r3, [pc, #600]	@ (8012ea8 <LoRaMacMlmeRequest+0x2a4>)
 8012c50:	2201      	movs	r2, #1
 8012c52:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012c56:	4a94      	ldr	r2, [pc, #592]	@ (8012ea8 <LoRaMacMlmeRequest+0x2a4>)
 8012c58:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 8012c5c:	f043 0304 	orr.w	r3, r3, #4
 8012c60:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
    queueElement.Request = mlmeRequest->Type;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012c6a:	2301      	movs	r3, #1
 8012c6c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	3b01      	subs	r3, #1
 8012c78:	2b0d      	cmp	r3, #13
 8012c7a:	f200 80e1 	bhi.w	8012e40 <LoRaMacMlmeRequest+0x23c>
 8012c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8012c84 <LoRaMacMlmeRequest+0x80>)
 8012c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c84:	08012cbd 	.word	0x08012cbd
 8012c88:	08012e41 	.word	0x08012e41
 8012c8c:	08012e41 	.word	0x08012e41
 8012c90:	08012e41 	.word	0x08012e41
 8012c94:	08012d35 	.word	0x08012d35
 8012c98:	08012d53 	.word	0x08012d53
 8012c9c:	08012d63 	.word	0x08012d63
 8012ca0:	08012e41 	.word	0x08012e41
 8012ca4:	08012e41 	.word	0x08012e41
 8012ca8:	08012d7f 	.word	0x08012d7f
 8012cac:	08012e41 	.word	0x08012e41
 8012cb0:	08012e15 	.word	0x08012e15
 8012cb4:	08012db5 	.word	0x08012db5
 8012cb8:	08012df7 	.word	0x08012df7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012cbc:	4b7a      	ldr	r3, [pc, #488]	@ (8012ea8 <LoRaMacMlmeRequest+0x2a4>)
 8012cbe:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012cc2:	f003 0320 	and.w	r3, r3, #32
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d001      	beq.n	8012cce <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e0e5      	b.n	8012e9a <LoRaMacMlmeRequest+0x296>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8012cce:	2000      	movs	r0, #0
 8012cd0:	f7fe f8c6 	bl	8010e60 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012cd4:	4b75      	ldr	r3, [pc, #468]	@ (8012eac <LoRaMacMlmeRequest+0x2a8>)
 8012cd6:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	795b      	ldrb	r3, [r3, #5]
 8012cde:	b25b      	sxtb	r3, r3
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	f002 fc30 	bl	8015548 <RegionAlternateDr>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	461a      	mov	r2, r3
 8012cec:	4b6f      	ldr	r3, [pc, #444]	@ (8012eac <LoRaMacMlmeRequest+0x2a8>)
 8012cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8012cf8:	4b6c      	ldr	r3, [pc, #432]	@ (8012eac <LoRaMacMlmeRequest+0x2a8>)
 8012cfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012cfe:	2307      	movs	r3, #7
 8012d00:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8012d02:	20ff      	movs	r0, #255	@ 0xff
 8012d04:	f7fd fe0c 	bl	8010920 <SendReJoinReq>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8012d0c:	7dfb      	ldrb	r3, [r7, #23]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	f000 8098 	beq.w	8012e44 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012d14:	4b65      	ldr	r3, [pc, #404]	@ (8012eac <LoRaMacMlmeRequest+0x2a8>)
 8012d16:	f893 0058 	ldrb.w	r0, [r3, #88]	@ 0x58
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	795b      	ldrb	r3, [r3, #5]
 8012d1e:	b25b      	sxtb	r3, r3
 8012d20:	2201      	movs	r2, #1
 8012d22:	4619      	mov	r1, r3
 8012d24:	f002 fc10 	bl	8015548 <RegionAlternateDr>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8012eac <LoRaMacMlmeRequest+0x2a8>)
 8012d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012d32:	e087      	b.n	8012e44 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012d34:	2300      	movs	r3, #0
 8012d36:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d38:	f107 030c 	add.w	r3, r7, #12
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	4619      	mov	r1, r3
 8012d40:	2002      	movs	r0, #2
 8012d42:	f000 fce9 	bl	8013718 <LoRaMacCommandsAddCmd>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d07d      	beq.n	8012e48 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d4c:	2313      	movs	r3, #19
 8012d4e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d50:	e07a      	b.n	8012e48 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	889b      	ldrh	r3, [r3, #4]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fe fbee 	bl	8011538 <SetTxContinuousWave>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	75fb      	strb	r3, [r7, #23]
            break;
 8012d60:	e079      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	8898      	ldrh	r0, [r3, #4]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6899      	ldr	r1, [r3, #8]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	461a      	mov	r2, r3
 8012d74:	f7fe fc16 	bl	80115a4 <SetTxContinuousWave1>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	75fb      	strb	r3, [r7, #23]
            break;
 8012d7c:	e06b      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8012d82:	f107 0308 	add.w	r3, r7, #8
 8012d86:	4619      	mov	r1, r3
 8012d88:	200d      	movs	r0, #13
 8012d8a:	f000 fd45 	bl	8013818 <LoRaMacCommandsGetCmd>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d102      	bne.n	8012d9a <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8012d94:	2300      	movs	r3, #0
 8012d96:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8012d98:	e058      	b.n	8012e4c <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d9a:	f107 030c 	add.w	r3, r7, #12
 8012d9e:	2200      	movs	r2, #0
 8012da0:	4619      	mov	r1, r3
 8012da2:	200d      	movs	r0, #13
 8012da4:	f000 fcb8 	bl	8013718 <LoRaMacCommandsAddCmd>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d04e      	beq.n	8012e4c <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012dae:	2313      	movs	r3, #19
 8012db0:	75fb      	strb	r3, [r7, #23]
            break;
 8012db2:	e04b      	b.n	8012e4c <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012db4:	4b3d      	ldr	r3, [pc, #244]	@ (8012eac <LoRaMacMlmeRequest+0x2a8>)
 8012db6:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d148      	bne.n	8012e50 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	791b      	ldrb	r3, [r3, #4]
 8012dc2:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	791b      	ldrb	r3, [r3, #4]
 8012dc8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f000 faee 	bl	80133b0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012dd4:	7dbb      	ldrb	r3, [r7, #22]
 8012dd6:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ddc:	f107 030c 	add.w	r3, r7, #12
 8012de0:	2201      	movs	r2, #1
 8012de2:	4619      	mov	r1, r3
 8012de4:	2010      	movs	r0, #16
 8012de6:	f000 fc97 	bl	8013718 <LoRaMacCommandsAddCmd>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d02f      	beq.n	8012e50 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012df0:	2313      	movs	r3, #19
 8012df2:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8012df4:	e02c      	b.n	8012e50 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012df6:	2300      	movs	r3, #0
 8012df8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012dfa:	f107 030c 	add.w	r3, r7, #12
 8012dfe:	2200      	movs	r2, #0
 8012e00:	4619      	mov	r1, r3
 8012e02:	2012      	movs	r0, #18
 8012e04:	f000 fc88 	bl	8013718 <LoRaMacCommandsAddCmd>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d022      	beq.n	8012e54 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e0e:	2313      	movs	r3, #19
 8012e10:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012e12:	e01f      	b.n	8012e54 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012e14:	2301      	movs	r3, #1
 8012e16:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012e18:	f000 fa77 	bl	801330a <LoRaMacClassBIsAcquisitionInProgress>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	f083 0301 	eor.w	r3, r3, #1
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d008      	beq.n	8012e3a <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012e28:	2000      	movs	r0, #0
 8012e2a:	f000 fa4d 	bl	80132c8 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012e2e:	2000      	movs	r0, #0
 8012e30:	f000 fa73 	bl	801331a <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012e34:	2300      	movs	r3, #0
 8012e36:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012e38:	e00d      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	75fb      	strb	r3, [r7, #23]
            break;
 8012e3e:	e00a      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8012e40:	bf00      	nop
 8012e42:	e008      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
            break;
 8012e44:	bf00      	nop
 8012e46:	e006      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
            break;
 8012e48:	bf00      	nop
 8012e4a:	e004      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
            break;
 8012e4c:	bf00      	nop
 8012e4e:	e002      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
            break;
 8012e50:	bf00      	nop
 8012e52:	e000      	b.n	8012e56 <LoRaMacMlmeRequest+0x252>
            break;
 8012e54:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012e56:	4b14      	ldr	r3, [pc, #80]	@ (8012ea8 <LoRaMacMlmeRequest+0x2a4>)
 8012e58:	f503 639a 	add.w	r3, r3, #1232	@ 0x4d0
 8012e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e60:	6879      	ldr	r1, [r7, #4]
 8012e62:	e9c1 2304 	strd	r2, r3, [r1, #16]

    if( status != LORAMAC_STATUS_OK )
 8012e66:	7dfb      	ldrb	r3, [r7, #23]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d010      	beq.n	8012e8e <LoRaMacMlmeRequest+0x28a>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012e6c:	f000 fffe 	bl	8013e6c <LoRaMacConfirmQueueGetCnt>
 8012e70:	4603      	mov	r3, r0
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d110      	bne.n	8012e98 <LoRaMacMlmeRequest+0x294>
        {
            MacCtx.NodeAckRequested = false;
 8012e76:	4b0c      	ldr	r3, [pc, #48]	@ (8012ea8 <LoRaMacMlmeRequest+0x2a4>)
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8012ea8 <LoRaMacMlmeRequest+0x2a4>)
 8012e80:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 8012e84:	f36f 0382 	bfc	r3, #2, #1
 8012e88:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
 8012e8c:	e004      	b.n	8012e98 <LoRaMacMlmeRequest+0x294>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012e8e:	f107 0310 	add.w	r3, r7, #16
 8012e92:	4618      	mov	r0, r3
 8012e94:	f000 fe96 	bl	8013bc4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3718      	adds	r7, #24
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	2000bee8 	.word	0x2000bee8
 8012ea8:	2000ba68 	.word	0x2000ba68
 8012eac:	2000bfc0 	.word	0x2000bfc0

08012eb0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b08e      	sub	sp, #56	@ 0x38
 8012eb4:	af02      	add	r7, sp, #8
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	460b      	mov	r3, r1
 8012eba:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012ebc:	2302      	movs	r3, #2
 8012ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    void* fBuffer = NULL;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    bool readyToSend = false;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    if( mcpsRequest == NULL )
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d101      	bne.n	8012ee2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012ede:	2303      	movs	r3, #3
 8012ee0:	e0df      	b.n	80130a2 <LoRaMacMcpsRequest+0x1f2>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8012ee2:	f7fc fa6b 	bl	800f3bc <LoRaMacIsBusy>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d001      	beq.n	8012ef0 <LoRaMacMcpsRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 8012eec:	2301      	movs	r3, #1
 8012eee:	e0d8      	b.n	80130a2 <LoRaMacMcpsRequest+0x1f2>
    }

    macHdr.Value = 0;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012ef4:	2218      	movs	r2, #24
 8012ef6:	2100      	movs	r1, #0
 8012ef8:	486c      	ldr	r0, [pc, #432]	@ (80130ac <LoRaMacMcpsRequest+0x1fc>)
 8012efa:	f007 f8c3 	bl	801a084 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012efe:	4b6c      	ldr	r3, [pc, #432]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8012f00:	2201      	movs	r2, #1
 8012f02:	f883 2469 	strb.w	r2, [r3, #1129]	@ 0x469

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012f06:	4b6a      	ldr	r3, [pc, #424]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8012f08:	2201      	movs	r2, #1
 8012f0a:	f883 243a 	strb.w	r2, [r3, #1082]	@ 0x43a

    switch( mcpsRequest->Type )
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	2b03      	cmp	r3, #3
 8012f14:	d041      	beq.n	8012f9a <LoRaMacMcpsRequest+0xea>
 8012f16:	2b03      	cmp	r3, #3
 8012f18:	dc55      	bgt.n	8012fc6 <LoRaMacMcpsRequest+0x116>
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d002      	beq.n	8012f24 <LoRaMacMcpsRequest+0x74>
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d01b      	beq.n	8012f5a <LoRaMacMcpsRequest+0xaa>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012f22:	e050      	b.n	8012fc6 <LoRaMacMcpsRequest+0x116>
            readyToSend = true;
 8012f24:	2301      	movs	r3, #1
 8012f26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            MacCtx.AckTimeoutRetries = 1;
 8012f2a:	4b61      	ldr	r3, [pc, #388]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012f32:	7b3b      	ldrb	r3, [r7, #12]
 8012f34:	2202      	movs	r2, #2
 8012f36:	f362 1347 	bfi	r3, r2, #5, #3
 8012f3a:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	791b      	ldrb	r3, [r3, #4]
 8012f40:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	62bb      	str	r3, [r7, #40]	@ 0x28
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	899b      	ldrh	r3, [r3, #12]
 8012f4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	7b9b      	ldrb	r3, [r3, #14]
 8012f54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8012f58:	e036      	b.n	8012fc8 <LoRaMacMcpsRequest+0x118>
            readyToSend = true;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	7bdb      	ldrb	r3, [r3, #15]
 8012f64:	2b08      	cmp	r3, #8
 8012f66:	bf28      	it	cs
 8012f68:	2308      	movcs	r3, #8
 8012f6a:	b2da      	uxtb	r2, r3
 8012f6c:	4b50      	ldr	r3, [pc, #320]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8012f6e:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012f72:	7b3b      	ldrb	r3, [r7, #12]
 8012f74:	2204      	movs	r2, #4
 8012f76:	f362 1347 	bfi	r3, r2, #5, #3
 8012f7a:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	791b      	ldrb	r3, [r3, #4]
 8012f80:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	689b      	ldr	r3, [r3, #8]
 8012f88:	62bb      	str	r3, [r7, #40]	@ 0x28
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	899b      	ldrh	r3, [r3, #12]
 8012f8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	7b9b      	ldrb	r3, [r3, #14]
 8012f94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8012f98:	e016      	b.n	8012fc8 <LoRaMacMcpsRequest+0x118>
            readyToSend = true;
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            MacCtx.AckTimeoutRetries = 1;
 8012fa0:	4b43      	ldr	r3, [pc, #268]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012fa8:	7b3b      	ldrb	r3, [r7, #12]
 8012faa:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8012fae:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	891b      	ldrh	r3, [r3, #8]
 8012fba:	84fb      	strh	r3, [r7, #38]	@ 0x26
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	7a9b      	ldrb	r3, [r3, #10]
 8012fc0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8012fc4:	e000      	b.n	8012fc8 <LoRaMacMcpsRequest+0x118>
            break;
 8012fc6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012fc8:	2302      	movs	r3, #2
 8012fca:	773b      	strb	r3, [r7, #28]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012fcc:	4b39      	ldr	r3, [pc, #228]	@ (80130b4 <LoRaMacMcpsRequest+0x204>)
 8012fce:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8012fd2:	77bb      	strb	r3, [r7, #30]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012fd4:	4b37      	ldr	r3, [pc, #220]	@ (80130b4 <LoRaMacMcpsRequest+0x204>)
 8012fd6:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8012fda:	f107 0310 	add.w	r3, r7, #16
 8012fde:	f107 021c 	add.w	r2, r7, #28
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f002 f984 	bl	80152f0 <RegionGetPhyParam>
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	b25b      	sxtb	r3, r3
 8012fec:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	bfb8      	it	lt
 8012ff4:	4613      	movlt	r3, r2
 8012ff6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    if( readyToSend == true )
 8012ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d045      	beq.n	801308e <LoRaMacMcpsRequest+0x1de>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8013002:	4b2c      	ldr	r3, [pc, #176]	@ (80130b4 <LoRaMacMcpsRequest+0x204>)
 8013004:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8013008:	f083 0301 	eor.w	r3, r3, #1
 801300c:	b2db      	uxtb	r3, r3
 801300e:	2b00      	cmp	r3, #0
 8013010:	d01a      	beq.n	8013048 <LoRaMacMcpsRequest+0x198>
        {
            verify.DatarateParams.Datarate = datarate;
 8013012:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013016:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013018:	4b26      	ldr	r3, [pc, #152]	@ (80130b4 <LoRaMacMcpsRequest+0x204>)
 801301a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 801301e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8013020:	4b24      	ldr	r3, [pc, #144]	@ (80130b4 <LoRaMacMcpsRequest+0x204>)
 8013022:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8013026:	f107 0108 	add.w	r1, r7, #8
 801302a:	2205      	movs	r2, #5
 801302c:	4618      	mov	r0, r3
 801302e:	f002 f9a3 	bl	8015378 <RegionVerify>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d005      	beq.n	8013044 <LoRaMacMcpsRequest+0x194>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013038:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801303c:	4b1d      	ldr	r3, [pc, #116]	@ (80130b4 <LoRaMacMcpsRequest+0x204>)
 801303e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013042:	e001      	b.n	8013048 <LoRaMacMcpsRequest+0x198>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8013044:	2303      	movs	r3, #3
 8013046:	e02c      	b.n	80130a2 <LoRaMacMcpsRequest+0x1f2>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8013048:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801304a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 801304e:	f107 000c 	add.w	r0, r7, #12
 8013052:	78fb      	ldrb	r3, [r7, #3]
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	4613      	mov	r3, r2
 8013058:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801305a:	f7fd fb7f 	bl	801075c <Send>
 801305e:	4603      	mov	r3, r0
 8013060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if( status == LORAMAC_STATUS_OK )
 8013064:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013068:	2b00      	cmp	r3, #0
 801306a:	d10c      	bne.n	8013086 <LoRaMacMcpsRequest+0x1d6>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	781a      	ldrb	r2, [r3, #0]
 8013070:	4b0f      	ldr	r3, [pc, #60]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8013072:	f883 2468 	strb.w	r2, [r3, #1128]	@ 0x468
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013076:	4a0e      	ldr	r2, [pc, #56]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8013078:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 801307c:	f043 0301 	orr.w	r3, r3, #1
 8013080:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
 8013084:	e003      	b.n	801308e <LoRaMacMcpsRequest+0x1de>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013086:	4b0a      	ldr	r3, [pc, #40]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8013088:	2200      	movs	r2, #0
 801308a:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801308e:	4b08      	ldr	r3, [pc, #32]	@ (80130b0 <LoRaMacMcpsRequest+0x200>)
 8013090:	f503 639a 	add.w	r3, r3, #1232	@ 0x4d0
 8013094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013098:	6879      	ldr	r1, [r7, #4]
 801309a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return status;
 801309e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3730      	adds	r7, #48	@ 0x30
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	2000bed0 	.word	0x2000bed0
 80130b0:	2000ba68 	.word	0x2000ba68
 80130b4:	2000bfc0 	.word	0x2000bfc0

080130b8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	4603      	mov	r3, r0
 80130c0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80130c2:	79fb      	ldrb	r3, [r7, #7]
 80130c4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80130c6:	4b0d      	ldr	r3, [pc, #52]	@ (80130fc <LoRaMacTestSetDutyCycleOn+0x44>)
 80130c8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80130cc:	f107 010c 	add.w	r1, r7, #12
 80130d0:	220f      	movs	r2, #15
 80130d2:	4618      	mov	r0, r3
 80130d4:	f002 f950 	bl	8015378 <RegionVerify>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d00a      	beq.n	80130f4 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80130de:	4a07      	ldr	r2, [pc, #28]	@ (80130fc <LoRaMacTestSetDutyCycleOn+0x44>)
 80130e0:	79fb      	ldrb	r3, [r7, #7]
 80130e2:	f882 312c 	strb.w	r3, [r2, #300]	@ 0x12c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80130e6:	4a06      	ldr	r2, [pc, #24]	@ (8013100 <LoRaMacTestSetDutyCycleOn+0x48>)
 80130e8:	f892 34cd 	ldrb.w	r3, [r2, #1229]	@ 0x4cd
 80130ec:	f043 0320 	orr.w	r3, r3, #32
 80130f0:	f882 34cd 	strb.w	r3, [r2, #1229]	@ 0x4cd
    }
}
 80130f4:	bf00      	nop
 80130f6:	3710      	adds	r7, #16
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	2000bfc0 	.word	0x2000bfc0
 8013100:	2000ba68 	.word	0x2000ba68

08013104 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b090      	sub	sp, #64	@ 0x40
 8013108:	af00      	add	r7, sp, #0
 801310a:	6178      	str	r0, [r7, #20]
 801310c:	6139      	str	r1, [r7, #16]
 801310e:	60fa      	str	r2, [r7, #12]
 8013110:	60bb      	str	r3, [r7, #8]
    bool adrAckReq = false;
 8013112:	2300      	movs	r3, #0
 8013114:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    int8_t datarate = adrNext->Datarate;
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	7c1b      	ldrb	r3, [r3, #16]
 801311c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    int8_t txPower = adrNext->TxPower;
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	7c5b      	ldrb	r3, [r3, #17]
 8013124:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	689a      	ldr	r2, [r3, #8]
 801312c:	68bb      	ldr	r3, [r7, #8]
 801312e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	795b      	ldrb	r3, [r3, #5]
 8013134:	2b00      	cmp	r3, #0
 8013136:	f000 8095 	beq.w	8013264 <CalcNextV10X+0x160>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801313a:	2302      	movs	r3, #2
 801313c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	7c9b      	ldrb	r3, [r3, #18]
 8013144:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	7cd9      	ldrb	r1, [r3, #19]
 801314c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013150:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8013154:	4618      	mov	r0, r3
 8013156:	f002 f8cb 	bl	80152f0 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 801315a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801315c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        datarate = MAX( datarate, minTxDatarate );
 8013160:	f997 203c 	ldrsb.w	r2, [r7, #60]	@ 0x3c
 8013164:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8013168:	4293      	cmp	r3, r2
 801316a:	bfb8      	it	lt
 801316c:	4613      	movlt	r3, r2
 801316e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

        if( datarate == minTxDatarate )
 8013172:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8013176:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 801317a:	429a      	cmp	r2, r3
 801317c:	d106      	bne.n	801318c <CalcNextV10X+0x88>
        {
            *adrAckCounter = 0;
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	2200      	movs	r2, #0
 8013182:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8013184:	2300      	movs	r3, #0
 8013186:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801318a:	e06b      	b.n	8013264 <CalcNextV10X+0x160>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	689b      	ldr	r3, [r3, #8]
 8013190:	697a      	ldr	r2, [r7, #20]
 8013192:	8992      	ldrh	r2, [r2, #12]
 8013194:	4293      	cmp	r3, r2
 8013196:	d303      	bcc.n	80131a0 <CalcNextV10X+0x9c>
            {
                adrAckReq = true;
 8013198:	2301      	movs	r3, #1
 801319a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801319e:	e002      	b.n	80131a6 <CalcNextV10X+0xa2>
            }
            else
            {
                adrAckReq = false;
 80131a0:	2300      	movs	r3, #0
 80131a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	689b      	ldr	r3, [r3, #8]
 80131aa:	697a      	ldr	r2, [r7, #20]
 80131ac:	8992      	ldrh	r2, [r2, #12]
 80131ae:	4611      	mov	r1, r2
 80131b0:	697a      	ldr	r2, [r7, #20]
 80131b2:	89d2      	ldrh	r2, [r2, #14]
 80131b4:	440a      	add	r2, r1
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d354      	bcc.n	8013264 <CalcNextV10X+0x160>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80131ba:	2308      	movs	r3, #8
 80131bc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	7cd9      	ldrb	r1, [r3, #19]
 80131c4:	463b      	mov	r3, r7
 80131c6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80131ca:	4618      	mov	r0, r3
 80131cc:	f002 f890 	bl	80152f0 <RegionGetPhyParam>
 80131d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80131d4:	463a      	mov	r2, r7
 80131d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80131da:	e883 0003 	stmia.w	r3, {r0, r1}
                txPower = phyParam.Value;
 80131de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	689b      	ldr	r3, [r3, #8]
 80131e8:	697a      	ldr	r2, [r7, #20]
 80131ea:	89d2      	ldrh	r2, [r2, #14]
 80131ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80131f0:	fb01 f202 	mul.w	r2, r1, r2
 80131f4:	1a9b      	subs	r3, r3, r2
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d134      	bne.n	8013264 <CalcNextV10X+0x160>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80131fa:	2322      	movs	r3, #34	@ 0x22
 80131fc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    getPhy.Datarate = datarate;
 8013200:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8013204:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	7c9b      	ldrb	r3, [r3, #18]
 801320c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	7cd9      	ldrb	r1, [r3, #19]
 8013214:	463b      	mov	r3, r7
 8013216:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801321a:	4618      	mov	r0, r3
 801321c:	f002 f868 	bl	80152f0 <RegionGetPhyParam>
 8013220:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013224:	463a      	mov	r2, r7
 8013226:	e892 0003 	ldmia.w	r2, {r0, r1}
 801322a:	e883 0003 	stmia.w	r3, {r0, r1}
                    datarate = phyParam.Value;
 801322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013230:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

                    if( datarate == minTxDatarate )
 8013234:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8013238:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 801323c:	429a      	cmp	r2, r3
 801323e:	d111      	bne.n	8013264 <CalcNextV10X+0x160>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013240:	2300      	movs	r3, #0
 8013242:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        if( adrNext->UpdateChanMask == true )
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	791b      	ldrb	r3, [r3, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d00a      	beq.n	8013264 <CalcNextV10X+0x160>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801324e:	2302      	movs	r3, #2
 8013250:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                            RegionInitDefaults( adrNext->Region, &params );
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	7cdb      	ldrb	r3, [r3, #19]
 8013258:	f107 021c 	add.w	r2, r7, #28
 801325c:	4611      	mov	r1, r2
 801325e:	4618      	mov	r0, r3
 8013260:	f002 f878 	bl	8015354 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 801326a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8013272:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013274:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013278:	4618      	mov	r0, r3
 801327a:	3740      	adds	r7, #64	@ 0x40
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}

08013280 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b084      	sub	sp, #16
 8013284:	af00      	add	r7, sp, #0
 8013286:	60f8      	str	r0, [r7, #12]
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	607a      	str	r2, [r7, #4]
 801328c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	789b      	ldrb	r3, [r3, #2]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d107      	bne.n	80132a6 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	687a      	ldr	r2, [r7, #4]
 801329a:	68b9      	ldr	r1, [r7, #8]
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f7ff ff31 	bl	8013104 <CalcNextV10X>
 80132a2:	4603      	mov	r3, r0
 80132a4:	e000      	b.n	80132a8 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80132a6:	2300      	movs	r3, #0
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3710      	adds	r7, #16
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80132b0:	b480      	push	{r7}
 80132b2:	b085      	sub	sp, #20
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132bc:	bf00      	nop
 80132be:	3714      	adds	r7, #20
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr

080132c8 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	4603      	mov	r3, r0
 80132d0:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132d2:	bf00      	nop
 80132d4:	370c      	adds	r7, #12
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr

080132de <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80132de:	b480      	push	{r7}
 80132e0:	b083      	sub	sp, #12
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	4603      	mov	r3, r0
 80132e6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132e8:	bf00      	nop
 80132ea:	370c      	adds	r7, #12
 80132ec:	46bd      	mov	sp, r7
 80132ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f2:	4770      	bx	lr

080132f4 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	4603      	mov	r3, r0
 80132fc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132fe:	bf00      	nop
 8013300:	370c      	adds	r7, #12
 8013302:	46bd      	mov	sp, r7
 8013304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013308:	4770      	bx	lr

0801330a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801330a:	b480      	push	{r7}
 801330c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801330e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013310:	4618      	mov	r0, r3
 8013312:	46bd      	mov	sp, r7
 8013314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013318:	4770      	bx	lr

0801331a <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801331a:	b480      	push	{r7}
 801331c:	b083      	sub	sp, #12
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013322:	bf00      	nop
 8013324:	370c      	adds	r7, #12
 8013326:	46bd      	mov	sp, r7
 8013328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332c:	4770      	bx	lr

0801332e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801332e:	b480      	push	{r7}
 8013330:	b083      	sub	sp, #12
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013336:	bf00      	nop
 8013338:	370c      	adds	r7, #12
 801333a:	46bd      	mov	sp, r7
 801333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013340:	4770      	bx	lr

08013342 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013342:	b480      	push	{r7}
 8013344:	b083      	sub	sp, #12
 8013346:	af00      	add	r7, sp, #0
 8013348:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801334a:	bf00      	nop
 801334c:	370c      	adds	r7, #12
 801334e:	46bd      	mov	sp, r7
 8013350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013354:	4770      	bx	lr

08013356 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013356:	b480      	push	{r7}
 8013358:	b083      	sub	sp, #12
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
 801335e:	460b      	mov	r3, r1
 8013360:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013362:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013364:	4618      	mov	r0, r3
 8013366:	370c      	adds	r7, #12
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr

08013370 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013370:	b480      	push	{r7}
 8013372:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013374:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013376:	4618      	mov	r0, r3
 8013378:	46bd      	mov	sp, r7
 801337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337e:	4770      	bx	lr

08013380 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013380:	b480      	push	{r7}
 8013382:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013384:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013386:	4618      	mov	r0, r3
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr

08013390 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8013390:	b480      	push	{r7}
 8013392:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013394:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013396:	4618      	mov	r0, r3
 8013398:	46bd      	mov	sp, r7
 801339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339e:	4770      	bx	lr

080133a0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80133a0:	b480      	push	{r7}
 80133a2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80133a4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80133b0:	b480      	push	{r7}
 80133b2:	b083      	sub	sp, #12
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	4603      	mov	r3, r0
 80133b8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ba:	bf00      	nop
 80133bc:	370c      	adds	r7, #12
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr

080133c6 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80133c6:	b480      	push	{r7}
 80133c8:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ca:	bf00      	nop
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr

080133d4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80133d4:	b480      	push	{r7}
 80133d6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133d8:	bf00      	nop
 80133da:	46bd      	mov	sp, r7
 80133dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e0:	4770      	bx	lr

080133e2 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80133e2:	b480      	push	{r7}
 80133e4:	b083      	sub	sp, #12
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	4603      	mov	r3, r0
 80133ea:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80133ec:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	370c      	adds	r7, #12
 80133f2:	46bd      	mov	sp, r7
 80133f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f8:	4770      	bx	lr

080133fa <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80133fa:	b480      	push	{r7}
 80133fc:	b083      	sub	sp, #12
 80133fe:	af00      	add	r7, sp, #0
 8013400:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013402:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013404:	4618      	mov	r0, r3
 8013406:	370c      	adds	r7, #12
 8013408:	46bd      	mov	sp, r7
 801340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340e:	4770      	bx	lr

08013410 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013410:	b480      	push	{r7}
 8013412:	b083      	sub	sp, #12
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013418:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801341a:	4618      	mov	r0, r3
 801341c:	370c      	adds	r7, #12
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr

08013426 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013426:	b480      	push	{r7}
 8013428:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801342a:	bf00      	nop
 801342c:	46bd      	mov	sp, r7
 801342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013432:	4770      	bx	lr

08013434 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013434:	b480      	push	{r7}
 8013436:	b083      	sub	sp, #12
 8013438:	af00      	add	r7, sp, #0
 801343a:	4603      	mov	r3, r0
 801343c:	6039      	str	r1, [r7, #0]
 801343e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8013440:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013442:	4618      	mov	r0, r3
 8013444:	370c      	adds	r7, #12
 8013446:	46bd      	mov	sp, r7
 8013448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344c:	4770      	bx	lr

0801344e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801344e:	b480      	push	{r7}
 8013450:	b085      	sub	sp, #20
 8013452:	af00      	add	r7, sp, #0
 8013454:	e9c7 2300 	strd	r2, r3, [r7]
 8013458:	4603      	mov	r3, r0
 801345a:	81fb      	strh	r3, [r7, #14]
 801345c:	460b      	mov	r3, r1
 801345e:	737b      	strb	r3, [r7, #13]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013460:	bf00      	nop
 8013462:	3714      	adds	r7, #20
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801346c:	b480      	push	{r7}
 801346e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013470:	bf00      	nop
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr

0801347a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801347a:	b480      	push	{r7}
 801347c:	b083      	sub	sp, #12
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013482:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013484:	4618      	mov	r0, r3
 8013486:	370c      	adds	r7, #12
 8013488:	46bd      	mov	sp, r7
 801348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348e:	4770      	bx	lr

08013490 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
 8013496:	e9c7 0100 	strd	r0, r1, [r7]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801349a:	f04f 0200 	mov.w	r2, #0
 801349e:	f04f 0300 	mov.w	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134a2:	4610      	mov	r0, r2
 80134a4:	4619      	mov	r1, r3
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80134b0:	b480      	push	{r7}
 80134b2:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134b4:	bf00      	nop
 80134b6:	46bd      	mov	sp, r7
 80134b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134bc:	4770      	bx	lr

080134be <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80134be:	b480      	push	{r7}
 80134c0:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80134c2:	bf00      	nop
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr

080134cc <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80134cc:	b480      	push	{r7}
 80134ce:	b085      	sub	sp, #20
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80134d8:	2300      	movs	r3, #0
 80134da:	81fb      	strh	r3, [r7, #14]
 80134dc:	e00a      	b.n	80134f4 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80134de:	89fb      	ldrh	r3, [r7, #14]
 80134e0:	68ba      	ldr	r2, [r7, #8]
 80134e2:	4413      	add	r3, r2
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d001      	beq.n	80134ee <IsSlotFree+0x22>
        {
            return false;
 80134ea:	2300      	movs	r3, #0
 80134ec:	e006      	b.n	80134fc <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80134ee:	89fb      	ldrh	r3, [r7, #14]
 80134f0:	3301      	adds	r3, #1
 80134f2:	81fb      	strh	r3, [r7, #14]
 80134f4:	89fb      	ldrh	r3, [r7, #14]
 80134f6:	2b0f      	cmp	r3, #15
 80134f8:	d9f1      	bls.n	80134de <IsSlotFree+0x12>
        }
    }
    return true;
 80134fa:	2301      	movs	r3, #1
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3714      	adds	r7, #20
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr

08013508 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801350e:	2300      	movs	r3, #0
 8013510:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013512:	e007      	b.n	8013524 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013514:	79fb      	ldrb	r3, [r7, #7]
 8013516:	3301      	adds	r3, #1
 8013518:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	2b0f      	cmp	r3, #15
 801351e:	d101      	bne.n	8013524 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013520:	2300      	movs	r3, #0
 8013522:	e012      	b.n	801354a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013524:	79fb      	ldrb	r3, [r7, #7]
 8013526:	011b      	lsls	r3, r3, #4
 8013528:	3308      	adds	r3, #8
 801352a:	4a0a      	ldr	r2, [pc, #40]	@ (8013554 <MallocNewMacCommandSlot+0x4c>)
 801352c:	4413      	add	r3, r2
 801352e:	4618      	mov	r0, r3
 8013530:	f7ff ffcc 	bl	80134cc <IsSlotFree>
 8013534:	4603      	mov	r3, r0
 8013536:	f083 0301 	eor.w	r3, r3, #1
 801353a:	b2db      	uxtb	r3, r3
 801353c:	2b00      	cmp	r3, #0
 801353e:	d1e9      	bne.n	8013514 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013540:	79fb      	ldrb	r3, [r7, #7]
 8013542:	011b      	lsls	r3, r3, #4
 8013544:	3308      	adds	r3, #8
 8013546:	4a03      	ldr	r2, [pc, #12]	@ (8013554 <MallocNewMacCommandSlot+0x4c>)
 8013548:	4413      	add	r3, r2
}
 801354a:	4618      	mov	r0, r3
 801354c:	3708      	adds	r7, #8
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	2000c800 	.word	0x2000c800

08013558 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d101      	bne.n	801356a <FreeMacCommandSlot+0x12>
    {
        return false;
 8013566:	2300      	movs	r3, #0
 8013568:	e005      	b.n	8013576 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801356a:	2210      	movs	r2, #16
 801356c:	2100      	movs	r1, #0
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f006 fd88 	bl	801a084 <memset1>

    return true;
 8013574:	2301      	movs	r3, #1
}
 8013576:	4618      	mov	r0, r3
 8013578:	3708      	adds	r7, #8
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801357e:	b480      	push	{r7}
 8013580:	b083      	sub	sp, #12
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d101      	bne.n	8013590 <LinkedListInit+0x12>
    {
        return false;
 801358c:	2300      	movs	r3, #0
 801358e:	e006      	b.n	801359e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2200      	movs	r2, #0
 801359a:	605a      	str	r2, [r3, #4]

    return true;
 801359c:	2301      	movs	r3, #1
}
 801359e:	4618      	mov	r0, r3
 80135a0:	370c      	adds	r7, #12
 80135a2:	46bd      	mov	sp, r7
 80135a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a8:	4770      	bx	lr

080135aa <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80135aa:	b480      	push	{r7}
 80135ac:	b083      	sub	sp, #12
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
 80135b2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d002      	beq.n	80135c0 <LinkedListAdd+0x16>
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d101      	bne.n	80135c4 <LinkedListAdd+0x1a>
    {
        return false;
 80135c0:	2300      	movs	r3, #0
 80135c2:	e015      	b.n	80135f0 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d102      	bne.n	80135d2 <LinkedListAdd+0x28>
    {
        list->First = element;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d003      	beq.n	80135e2 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	683a      	ldr	r2, [r7, #0]
 80135e0:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	2200      	movs	r2, #0
 80135e6:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	683a      	ldr	r2, [r7, #0]
 80135ec:	605a      	str	r2, [r3, #4]

    return true;
 80135ee:	2301      	movs	r3, #1
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80135fc:	b480      	push	{r7}
 80135fe:	b085      	sub	sp, #20
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d002      	beq.n	8013612 <LinkedListGetPrevious+0x16>
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d101      	bne.n	8013616 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013612:	2300      	movs	r3, #0
 8013614:	e016      	b.n	8013644 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801361c:	683a      	ldr	r2, [r7, #0]
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	429a      	cmp	r2, r3
 8013622:	d00c      	beq.n	801363e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013624:	e002      	b.n	801362c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d007      	beq.n	8013642 <LinkedListGetPrevious+0x46>
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	683a      	ldr	r2, [r7, #0]
 8013638:	429a      	cmp	r2, r3
 801363a:	d1f4      	bne.n	8013626 <LinkedListGetPrevious+0x2a>
 801363c:	e001      	b.n	8013642 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801363e:	2300      	movs	r3, #0
 8013640:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013642:	68fb      	ldr	r3, [r7, #12]
}
 8013644:	4618      	mov	r0, r3
 8013646:	3714      	adds	r7, #20
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr

08013650 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b084      	sub	sp, #16
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <LinkedListRemove+0x16>
 8013660:	683b      	ldr	r3, [r7, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d101      	bne.n	801366a <LinkedListRemove+0x1a>
    {
        return false;
 8013666:	2300      	movs	r3, #0
 8013668:	e020      	b.n	80136ac <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801366a:	6839      	ldr	r1, [r7, #0]
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	f7ff ffc5 	bl	80135fc <LinkedListGetPrevious>
 8013672:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	429a      	cmp	r2, r3
 801367c:	d103      	bne.n	8013686 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	429a      	cmp	r2, r3
 801368e:	d102      	bne.n	8013696 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d003      	beq.n	80136a4 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	2200      	movs	r2, #0
 80136a8:	601a      	str	r2, [r3, #0]

    return true;
 80136aa:	2301      	movs	r3, #1
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}

080136b4 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	4603      	mov	r3, r0
 80136bc:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80136be:	79fb      	ldrb	r3, [r7, #7]
 80136c0:	2b05      	cmp	r3, #5
 80136c2:	d004      	beq.n	80136ce <IsSticky+0x1a>
 80136c4:	2b05      	cmp	r3, #5
 80136c6:	db04      	blt.n	80136d2 <IsSticky+0x1e>
 80136c8:	3b08      	subs	r3, #8
 80136ca:	2b02      	cmp	r3, #2
 80136cc:	d801      	bhi.n	80136d2 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80136ce:	2301      	movs	r3, #1
 80136d0:	e000      	b.n	80136d4 <IsSticky+0x20>
        default:
            return false;
 80136d2:	2300      	movs	r3, #0
    }
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	370c      	adds	r7, #12
 80136d8:	46bd      	mov	sp, r7
 80136da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136de:	4770      	bx	lr

080136e0 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 80136e0:	b480      	push	{r7}
 80136e2:	b083      	sub	sp, #12
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	4603      	mov	r3, r0
 80136e8:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80136ea:	2300      	movs	r3, #0
    }
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	370c      	adds	r7, #12
 80136f0:	46bd      	mov	sp, r7
 80136f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f6:	4770      	bx	lr

080136f8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80136fc:	22fc      	movs	r2, #252	@ 0xfc
 80136fe:	2100      	movs	r1, #0
 8013700:	4804      	ldr	r0, [pc, #16]	@ (8013714 <LoRaMacCommandsInit+0x1c>)
 8013702:	f006 fcbf 	bl	801a084 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013706:	4803      	ldr	r0, [pc, #12]	@ (8013714 <LoRaMacCommandsInit+0x1c>)
 8013708:	f7ff ff39 	bl	801357e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801370c:	2300      	movs	r3, #0
}
 801370e:	4618      	mov	r0, r3
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	2000c800 	.word	0x2000c800

08013718 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b086      	sub	sp, #24
 801371c:	af00      	add	r7, sp, #0
 801371e:	4603      	mov	r3, r0
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d101      	bne.n	8013730 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801372c:	2301      	movs	r3, #1
 801372e:	e03b      	b.n	80137a8 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013730:	f7ff feea 	bl	8013508 <MallocNewMacCommandSlot>
 8013734:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d101      	bne.n	8013740 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 801373c:	2302      	movs	r3, #2
 801373e:	e033      	b.n	80137a8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013740:	6979      	ldr	r1, [r7, #20]
 8013742:	481b      	ldr	r0, [pc, #108]	@ (80137b0 <LoRaMacCommandsAddCmd+0x98>)
 8013744:	f7ff ff31 	bl	80135aa <LinkedListAdd>
 8013748:	4603      	mov	r3, r0
 801374a:	f083 0301 	eor.w	r3, r3, #1
 801374e:	b2db      	uxtb	r3, r3
 8013750:	2b00      	cmp	r3, #0
 8013752:	d001      	beq.n	8013758 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013754:	2305      	movs	r3, #5
 8013756:	e027      	b.n	80137a8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	7bfa      	ldrb	r2, [r7, #15]
 801375c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	687a      	ldr	r2, [r7, #4]
 8013762:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	3305      	adds	r3, #5
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	b292      	uxth	r2, r2
 801376c:	68b9      	ldr	r1, [r7, #8]
 801376e:	4618      	mov	r0, r3
 8013770:	f006 fc4b 	bl	801a00a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013774:	7bfb      	ldrb	r3, [r7, #15]
 8013776:	4618      	mov	r0, r3
 8013778:	f7ff ff9c 	bl	80136b4 <IsSticky>
 801377c:	4603      	mov	r3, r0
 801377e:	461a      	mov	r2, r3
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8013784:	7bfb      	ldrb	r3, [r7, #15]
 8013786:	4618      	mov	r0, r3
 8013788:	f7ff ffaa 	bl	80136e0 <IsConfirmationRequired>
 801378c:	4603      	mov	r3, r0
 801378e:	461a      	mov	r2, r3
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013794:	4b06      	ldr	r3, [pc, #24]	@ (80137b0 <LoRaMacCommandsAddCmd+0x98>)
 8013796:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4413      	add	r3, r2
 801379e:	3301      	adds	r3, #1
 80137a0:	4a03      	ldr	r2, [pc, #12]	@ (80137b0 <LoRaMacCommandsAddCmd+0x98>)
 80137a2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 80137a6:	2300      	movs	r3, #0
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3718      	adds	r7, #24
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	2000c800 	.word	0x2000c800

080137b4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d101      	bne.n	80137c6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80137c2:	2301      	movs	r3, #1
 80137c4:	e021      	b.n	801380a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80137c6:	6879      	ldr	r1, [r7, #4]
 80137c8:	4812      	ldr	r0, [pc, #72]	@ (8013814 <LoRaMacCommandsRemoveCmd+0x60>)
 80137ca:	f7ff ff41 	bl	8013650 <LinkedListRemove>
 80137ce:	4603      	mov	r3, r0
 80137d0:	f083 0301 	eor.w	r3, r3, #1
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d001      	beq.n	80137de <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80137da:	2303      	movs	r3, #3
 80137dc:	e015      	b.n	801380a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80137de:	4b0d      	ldr	r3, [pc, #52]	@ (8013814 <LoRaMacCommandsRemoveCmd+0x60>)
 80137e0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	689b      	ldr	r3, [r3, #8]
 80137e8:	1ad3      	subs	r3, r2, r3
 80137ea:	3b01      	subs	r3, #1
 80137ec:	4a09      	ldr	r2, [pc, #36]	@ (8013814 <LoRaMacCommandsRemoveCmd+0x60>)
 80137ee:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f7ff feb0 	bl	8013558 <FreeMacCommandSlot>
 80137f8:	4603      	mov	r3, r0
 80137fa:	f083 0301 	eor.w	r3, r3, #1
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	d001      	beq.n	8013808 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013804:	2305      	movs	r3, #5
 8013806:	e000      	b.n	801380a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013808:	2300      	movs	r3, #0
}
 801380a:	4618      	mov	r0, r3
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	2000c800 	.word	0x2000c800

08013818 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8013818:	b480      	push	{r7}
 801381a:	b085      	sub	sp, #20
 801381c:	af00      	add	r7, sp, #0
 801381e:	4603      	mov	r3, r0
 8013820:	6039      	str	r1, [r7, #0]
 8013822:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013824:	4b0e      	ldr	r3, [pc, #56]	@ (8013860 <LoRaMacCommandsGetCmd+0x48>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801382a:	e002      	b.n	8013832 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d004      	beq.n	8013842 <LoRaMacCommandsGetCmd+0x2a>
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	791b      	ldrb	r3, [r3, #4]
 801383c:	79fa      	ldrb	r2, [r7, #7]
 801383e:	429a      	cmp	r2, r3
 8013840:	d1f4      	bne.n	801382c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	68fa      	ldr	r2, [r7, #12]
 8013846:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d101      	bne.n	8013852 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801384e:	2303      	movs	r3, #3
 8013850:	e000      	b.n	8013854 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8013852:	2300      	movs	r3, #0
}
 8013854:	4618      	mov	r0, r3
 8013856:	3714      	adds	r7, #20
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr
 8013860:	2000c800 	.word	0x2000c800

08013864 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b082      	sub	sp, #8
 8013868:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801386a:	4b0f      	ldr	r3, [pc, #60]	@ (80138a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013870:	e012      	b.n	8013898 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	7b1b      	ldrb	r3, [r3, #12]
 8013876:	f083 0301 	eor.w	r3, r3, #1
 801387a:	b2db      	uxtb	r3, r3
 801387c:	2b00      	cmp	r3, #0
 801387e:	d008      	beq.n	8013892 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f7ff ff94 	bl	80137b4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	607b      	str	r3, [r7, #4]
 8013890:	e002      	b.n	8013898 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d1e9      	bne.n	8013872 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801389e:	2300      	movs	r3, #0
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	3708      	adds	r7, #8
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}
 80138a8:	2000c800 	.word	0x2000c800

080138ac <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b082      	sub	sp, #8
 80138b0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80138b2:	4b13      	ldr	r3, [pc, #76]	@ (8013900 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80138b8:	e01a      	b.n	80138f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	791b      	ldrb	r3, [r3, #4]
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7ff fef5 	bl	80136b4 <IsSticky>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00d      	beq.n	80138ec <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	791b      	ldrb	r3, [r3, #4]
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7ff ff03 	bl	80136e0 <IsConfirmationRequired>
 80138da:	4603      	mov	r3, r0
 80138dc:	f083 0301 	eor.w	r3, r3, #1
 80138e0:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d002      	beq.n	80138ec <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f7ff ff64 	bl	80137b4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d1e1      	bne.n	80138ba <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138f6:	2300      	movs	r3, #0
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	2000c800 	.word	0x2000c800

08013904 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013904:	b480      	push	{r7}
 8013906:	b083      	sub	sp, #12
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d101      	bne.n	8013916 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013912:	2301      	movs	r3, #1
 8013914:	e005      	b.n	8013922 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013916:	4b06      	ldr	r3, [pc, #24]	@ (8013930 <LoRaMacCommandsGetSizeSerializedCmds+0x2c>)
 8013918:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013920:	2300      	movs	r3, #0
}
 8013922:	4618      	mov	r0, r3
 8013924:	370c      	adds	r7, #12
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr
 801392e:	bf00      	nop
 8013930:	2000c800 	.word	0x2000c800

08013934 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b088      	sub	sp, #32
 8013938:	af00      	add	r7, sp, #0
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	60b9      	str	r1, [r7, #8]
 801393e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013940:	4b25      	ldr	r3, [pc, #148]	@ (80139d8 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013946:	2300      	movs	r3, #0
 8013948:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d002      	beq.n	8013956 <LoRaMacCommandsSerializeCmds+0x22>
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d126      	bne.n	80139a4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013956:	2301      	movs	r3, #1
 8013958:	e039      	b.n	80139ce <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801395a:	7efb      	ldrb	r3, [r7, #27]
 801395c:	68fa      	ldr	r2, [r7, #12]
 801395e:	1ad2      	subs	r2, r2, r3
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	689b      	ldr	r3, [r3, #8]
 8013964:	3301      	adds	r3, #1
 8013966:	429a      	cmp	r2, r3
 8013968:	d320      	bcc.n	80139ac <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801396a:	7efb      	ldrb	r3, [r7, #27]
 801396c:	1c5a      	adds	r2, r3, #1
 801396e:	76fa      	strb	r2, [r7, #27]
 8013970:	461a      	mov	r2, r3
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	4413      	add	r3, r2
 8013976:	69fa      	ldr	r2, [r7, #28]
 8013978:	7912      	ldrb	r2, [r2, #4]
 801397a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801397c:	7efb      	ldrb	r3, [r7, #27]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	18d0      	adds	r0, r2, r3
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	1d59      	adds	r1, r3, #5
 8013986:	69fb      	ldr	r3, [r7, #28]
 8013988:	689b      	ldr	r3, [r3, #8]
 801398a:	b29b      	uxth	r3, r3
 801398c:	461a      	mov	r2, r3
 801398e:	f006 fb3c 	bl	801a00a <memcpy1>
            itr += curElement->PayloadSize;
 8013992:	69fb      	ldr	r3, [r7, #28]
 8013994:	689b      	ldr	r3, [r3, #8]
 8013996:	b2da      	uxtb	r2, r3
 8013998:	7efb      	ldrb	r3, [r7, #27]
 801399a:	4413      	add	r3, r2
 801399c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d1d7      	bne.n	801395a <LoRaMacCommandsSerializeCmds+0x26>
 80139aa:	e009      	b.n	80139c0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80139ac:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80139ae:	e007      	b.n	80139c0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80139b6:	69f8      	ldr	r0, [r7, #28]
 80139b8:	f7ff fefc 	bl	80137b4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d1f4      	bne.n	80139b0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80139c6:	68b8      	ldr	r0, [r7, #8]
 80139c8:	f7ff ff9c 	bl	8013904 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80139cc:	2300      	movs	r3, #0
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3720      	adds	r7, #32
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	2000c800 	.word	0x2000c800

080139dc <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	4603      	mov	r3, r0
 80139e4:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80139e6:	2300      	movs	r3, #0
 80139e8:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80139ea:	79fb      	ldrb	r3, [r7, #7]
 80139ec:	3b02      	subs	r3, #2
 80139ee:	2b11      	cmp	r3, #17
 80139f0:	d850      	bhi.n	8013a94 <LoRaMacCommandsGetCmdSize+0xb8>
 80139f2:	a201      	add	r2, pc, #4	@ (adr r2, 80139f8 <LoRaMacCommandsGetCmdSize+0x1c>)
 80139f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139f8:	08013a41 	.word	0x08013a41
 80139fc:	08013a47 	.word	0x08013a47
 8013a00:	08013a4d 	.word	0x08013a4d
 8013a04:	08013a53 	.word	0x08013a53
 8013a08:	08013a59 	.word	0x08013a59
 8013a0c:	08013a5f 	.word	0x08013a5f
 8013a10:	08013a65 	.word	0x08013a65
 8013a14:	08013a6b 	.word	0x08013a6b
 8013a18:	08013a71 	.word	0x08013a71
 8013a1c:	08013a95 	.word	0x08013a95
 8013a20:	08013a95 	.word	0x08013a95
 8013a24:	08013a77 	.word	0x08013a77
 8013a28:	08013a95 	.word	0x08013a95
 8013a2c:	08013a95 	.word	0x08013a95
 8013a30:	08013a7d 	.word	0x08013a7d
 8013a34:	08013a83 	.word	0x08013a83
 8013a38:	08013a89 	.word	0x08013a89
 8013a3c:	08013a8f 	.word	0x08013a8f
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013a40:	2303      	movs	r3, #3
 8013a42:	73fb      	strb	r3, [r7, #15]
            break;
 8013a44:	e027      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013a46:	2305      	movs	r3, #5
 8013a48:	73fb      	strb	r3, [r7, #15]
            break;
 8013a4a:	e024      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	73fb      	strb	r3, [r7, #15]
            break;
 8013a50:	e021      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013a52:	2305      	movs	r3, #5
 8013a54:	73fb      	strb	r3, [r7, #15]
            break;
 8013a56:	e01e      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	73fb      	strb	r3, [r7, #15]
            break;
 8013a5c:	e01b      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013a5e:	2306      	movs	r3, #6
 8013a60:	73fb      	strb	r3, [r7, #15]
            break;
 8013a62:	e018      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013a64:	2302      	movs	r3, #2
 8013a66:	73fb      	strb	r3, [r7, #15]
            break;
 8013a68:	e015      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013a6a:	2302      	movs	r3, #2
 8013a6c:	73fb      	strb	r3, [r7, #15]
            break;
 8013a6e:	e012      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013a70:	2305      	movs	r3, #5
 8013a72:	73fb      	strb	r3, [r7, #15]
            break;
 8013a74:	e00f      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013a76:	2306      	movs	r3, #6
 8013a78:	73fb      	strb	r3, [r7, #15]
            break;
 8013a7a:	e00c      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	73fb      	strb	r3, [r7, #15]
            break;
 8013a80:	e009      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013a82:	2305      	movs	r3, #5
 8013a84:	73fb      	strb	r3, [r7, #15]
            break;
 8013a86:	e006      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013a88:	2304      	movs	r3, #4
 8013a8a:	73fb      	strb	r3, [r7, #15]
            break;
 8013a8c:	e003      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013a8e:	2304      	movs	r3, #4
 8013a90:	73fb      	strb	r3, [r7, #15]
            break;
 8013a92:	e000      	b.n	8013a96 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013a94:	bf00      	nop
        }
    }
    return cidSize;
 8013a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a98:	4618      	mov	r0, r3
 8013a9a:	3714      	adds	r7, #20
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa2:	4770      	bx	lr

08013aa4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b083      	sub	sp, #12
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	4a08      	ldr	r2, [pc, #32]	@ (8013ad0 <IncreaseBufferPointer+0x2c>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d102      	bne.n	8013aba <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ab4:	4b07      	ldr	r3, [pc, #28]	@ (8013ad4 <IncreaseBufferPointer+0x30>)
 8013ab6:	607b      	str	r3, [r7, #4]
 8013ab8:	e002      	b.n	8013ac0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	3304      	adds	r3, #4
 8013abe:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013ac0:	687b      	ldr	r3, [r7, #4]
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	370c      	adds	r7, #12
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013acc:	4770      	bx	lr
 8013ace:	bf00      	nop
 8013ad0:	2000c918 	.word	0x2000c918
 8013ad4:	2000c908 	.word	0x2000c908

08013ad8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	4603      	mov	r3, r0
 8013ae0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013ae2:	79fb      	ldrb	r3, [r7, #7]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d101      	bne.n	8013aec <IsListEmpty+0x14>
    {
        return true;
 8013ae8:	2301      	movs	r3, #1
 8013aea:	e000      	b.n	8013aee <IsListEmpty+0x16>
    }
    return false;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	370c      	adds	r7, #12
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr

08013afa <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013afa:	b480      	push	{r7}
 8013afc:	b083      	sub	sp, #12
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	4603      	mov	r3, r0
 8013b02:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013b04:	79fb      	ldrb	r3, [r7, #7]
 8013b06:	2b04      	cmp	r3, #4
 8013b08:	d901      	bls.n	8013b0e <IsListFull+0x14>
    {
        return true;
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e000      	b.n	8013b10 <IsListFull+0x16>
    }
    return false;
 8013b0e:	2300      	movs	r3, #0
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	370c      	adds	r7, #12
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b086      	sub	sp, #24
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	4603      	mov	r3, r0
 8013b24:	60b9      	str	r1, [r7, #8]
 8013b26:	607a      	str	r2, [r7, #4]
 8013b28:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013b2e:	4b13      	ldr	r3, [pc, #76]	@ (8013b7c <GetElement+0x60>)
 8013b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7ff ffcf 	bl	8013ad8 <IsListEmpty>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d001      	beq.n	8013b44 <GetElement+0x28>
    {
        return NULL;
 8013b40:	2300      	movs	r3, #0
 8013b42:	e017      	b.n	8013b74 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b44:	2300      	movs	r3, #0
 8013b46:	74fb      	strb	r3, [r7, #19]
 8013b48:	e00d      	b.n	8013b66 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	781b      	ldrb	r3, [r3, #0]
 8013b4e:	7bfa      	ldrb	r2, [r7, #15]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d101      	bne.n	8013b58 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	e00d      	b.n	8013b74 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013b58:	6978      	ldr	r0, [r7, #20]
 8013b5a:	f7ff ffa3 	bl	8013aa4 <IncreaseBufferPointer>
 8013b5e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013b60:	7cfb      	ldrb	r3, [r7, #19]
 8013b62:	3301      	adds	r3, #1
 8013b64:	74fb      	strb	r3, [r7, #19]
 8013b66:	4b05      	ldr	r3, [pc, #20]	@ (8013b7c <GetElement+0x60>)
 8013b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b6c:	7cfa      	ldrb	r2, [r7, #19]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d3eb      	bcc.n	8013b4a <GetElement+0x2e>
    }

    return NULL;
 8013b72:	2300      	movs	r3, #0
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3718      	adds	r7, #24
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}
 8013b7c:	2000c8fc 	.word	0x2000c8fc

08013b80 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013b88:	4a0c      	ldr	r2, [pc, #48]	@ (8013bbc <LoRaMacConfirmQueueInit+0x3c>)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8013bbc <LoRaMacConfirmQueueInit+0x3c>)
 8013b90:	2200      	movs	r2, #0
 8013b92:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013b96:	4b09      	ldr	r3, [pc, #36]	@ (8013bbc <LoRaMacConfirmQueueInit+0x3c>)
 8013b98:	4a09      	ldr	r2, [pc, #36]	@ (8013bc0 <LoRaMacConfirmQueueInit+0x40>)
 8013b9a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013b9c:	4b07      	ldr	r3, [pc, #28]	@ (8013bbc <LoRaMacConfirmQueueInit+0x3c>)
 8013b9e:	4a08      	ldr	r2, [pc, #32]	@ (8013bc0 <LoRaMacConfirmQueueInit+0x40>)
 8013ba0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013ba2:	2214      	movs	r2, #20
 8013ba4:	21ff      	movs	r1, #255	@ 0xff
 8013ba6:	4806      	ldr	r0, [pc, #24]	@ (8013bc0 <LoRaMacConfirmQueueInit+0x40>)
 8013ba8:	f006 fa6c 	bl	801a084 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013bac:	4b03      	ldr	r3, [pc, #12]	@ (8013bbc <LoRaMacConfirmQueueInit+0x3c>)
 8013bae:	2201      	movs	r2, #1
 8013bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013bb4:	bf00      	nop
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	2000c8fc 	.word	0x2000c8fc
 8013bc0:	2000c908 	.word	0x2000c908

08013bc4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013bcc:	4b19      	ldr	r3, [pc, #100]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7ff ff91 	bl	8013afa <IsListFull>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d001      	beq.n	8013be2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013bde:	2300      	movs	r3, #0
 8013be0:	e023      	b.n	8013c2a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013be2:	4b14      	ldr	r3, [pc, #80]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013be4:	689b      	ldr	r3, [r3, #8]
 8013be6:	687a      	ldr	r2, [r7, #4]
 8013be8:	7812      	ldrb	r2, [r2, #0]
 8013bea:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013bec:	4b11      	ldr	r3, [pc, #68]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013bee:	689b      	ldr	r3, [r3, #8]
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	7852      	ldrb	r2, [r2, #1]
 8013bf4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013bf8:	689b      	ldr	r3, [r3, #8]
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	78d2      	ldrb	r2, [r2, #3]
 8013bfe:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8013c00:	4b0c      	ldr	r3, [pc, #48]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013c02:	689b      	ldr	r3, [r3, #8]
 8013c04:	2200      	movs	r2, #0
 8013c06:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013c08:	4b0a      	ldr	r3, [pc, #40]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	b2da      	uxtb	r2, r3
 8013c12:	4b08      	ldr	r3, [pc, #32]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013c14:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013c18:	4b06      	ldr	r3, [pc, #24]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013c1a:	689b      	ldr	r3, [r3, #8]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7ff ff41 	bl	8013aa4 <IncreaseBufferPointer>
 8013c22:	4603      	mov	r3, r0
 8013c24:	4a03      	ldr	r2, [pc, #12]	@ (8013c34 <LoRaMacConfirmQueueAdd+0x70>)
 8013c26:	6093      	str	r3, [r2, #8]

    return true;
 8013c28:	2301      	movs	r3, #1
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3708      	adds	r7, #8
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}
 8013c32:	bf00      	nop
 8013c34:	2000c8fc 	.word	0x2000c8fc

08013c38 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8013c78 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7ff ff48 	bl	8013ad8 <IsListEmpty>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d001      	beq.n	8013c52 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	e010      	b.n	8013c74 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013c52:	4b09      	ldr	r3, [pc, #36]	@ (8013c78 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c58:	3b01      	subs	r3, #1
 8013c5a:	b2da      	uxtb	r2, r3
 8013c5c:	4b06      	ldr	r3, [pc, #24]	@ (8013c78 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c5e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013c62:	4b05      	ldr	r3, [pc, #20]	@ (8013c78 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7ff ff1c 	bl	8013aa4 <IncreaseBufferPointer>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	4a02      	ldr	r2, [pc, #8]	@ (8013c78 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013c70:	6053      	str	r3, [r2, #4]

    return true;
 8013c72:	2301      	movs	r3, #1
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	bd80      	pop	{r7, pc}
 8013c78:	2000c8fc 	.word	0x2000c8fc

08013c7c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b084      	sub	sp, #16
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	4603      	mov	r3, r0
 8013c84:	460a      	mov	r2, r1
 8013c86:	71fb      	strb	r3, [r7, #7]
 8013c88:	4613      	mov	r3, r2
 8013c8a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013c90:	4b10      	ldr	r3, [pc, #64]	@ (8013cd4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7ff ff1e 	bl	8013ad8 <IsListEmpty>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	f083 0301 	eor.w	r3, r3, #1
 8013ca2:	b2db      	uxtb	r3, r3
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d011      	beq.n	8013ccc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8013cd4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013caa:	6859      	ldr	r1, [r3, #4]
 8013cac:	4b09      	ldr	r3, [pc, #36]	@ (8013cd4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013cae:	689a      	ldr	r2, [r3, #8]
 8013cb0:	79bb      	ldrb	r3, [r7, #6]
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7ff ff32 	bl	8013b1c <GetElement>
 8013cb8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d005      	beq.n	8013ccc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	79fa      	ldrb	r2, [r7, #7]
 8013cc4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2201      	movs	r2, #1
 8013cca:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013ccc:	bf00      	nop
 8013cce:	3710      	adds	r7, #16
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	2000c8fc 	.word	0x2000c8fc

08013cd8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	4603      	mov	r3, r0
 8013ce0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013ce6:	4b10      	ldr	r3, [pc, #64]	@ (8013d28 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7ff fef3 	bl	8013ad8 <IsListEmpty>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	f083 0301 	eor.w	r3, r3, #1
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d00e      	beq.n	8013d1c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8013d28 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013d00:	6859      	ldr	r1, [r3, #4]
 8013d02:	4b09      	ldr	r3, [pc, #36]	@ (8013d28 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013d04:	689a      	ldr	r2, [r3, #8]
 8013d06:	79fb      	ldrb	r3, [r7, #7]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7ff ff07 	bl	8013b1c <GetElement>
 8013d0e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d002      	beq.n	8013d1c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	785b      	ldrb	r3, [r3, #1]
 8013d1a:	e000      	b.n	8013d1e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013d1c:	2301      	movs	r3, #1
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3710      	adds	r7, #16
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop
 8013d28:	2000c8fc 	.word	0x2000c8fc

08013d2c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	4603      	mov	r3, r0
 8013d34:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013d36:	4b16      	ldr	r3, [pc, #88]	@ (8013d90 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013d3c:	4a14      	ldr	r2, [pc, #80]	@ (8013d90 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d3e:	79fb      	ldrb	r3, [r7, #7]
 8013d40:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013d44:	4b12      	ldr	r3, [pc, #72]	@ (8013d90 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7ff fec4 	bl	8013ad8 <IsListEmpty>
 8013d50:	4603      	mov	r3, r0
 8013d52:	f083 0301 	eor.w	r3, r3, #1
 8013d56:	b2db      	uxtb	r3, r3
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d015      	beq.n	8013d88 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	79fa      	ldrb	r2, [r7, #7]
 8013d60:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	78db      	ldrb	r3, [r3, #3]
 8013d66:	f083 0301 	eor.w	r3, r3, #1
 8013d6a:	b2db      	uxtb	r3, r3
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d002      	beq.n	8013d76 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	2201      	movs	r2, #1
 8013d74:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013d76:	68f8      	ldr	r0, [r7, #12]
 8013d78:	f7ff fe94 	bl	8013aa4 <IncreaseBufferPointer>
 8013d7c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013d7e:	4b04      	ldr	r3, [pc, #16]	@ (8013d90 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013d80:	689b      	ldr	r3, [r3, #8]
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d1e9      	bne.n	8013d5c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013d88:	bf00      	nop
 8013d8a:	3710      	adds	r7, #16
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	2000c8fc 	.word	0x2000c8fc

08013d94 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013d9e:	4b09      	ldr	r3, [pc, #36]	@ (8013dc4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013da0:	6859      	ldr	r1, [r3, #4]
 8013da2:	4b08      	ldr	r3, [pc, #32]	@ (8013dc4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013da4:	689a      	ldr	r2, [r3, #8]
 8013da6:	79fb      	ldrb	r3, [r7, #7]
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7ff feb7 	bl	8013b1c <GetElement>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d001      	beq.n	8013db8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013db4:	2301      	movs	r3, #1
 8013db6:	e000      	b.n	8013dba <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013db8:	2300      	movs	r3, #0
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3708      	adds	r7, #8
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	2000c8fc 	.word	0x2000c8fc

08013dc8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013dd0:	4b25      	ldr	r3, [pc, #148]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013dd6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013dd8:	2300      	movs	r3, #0
 8013dda:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8013ddc:	f107 0308 	add.w	r3, r7, #8
 8013de0:	2204      	movs	r2, #4
 8013de2:	2100      	movs	r1, #0
 8013de4:	4618      	mov	r0, r3
 8013de6:	f006 f94d 	bl	801a084 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8013dea:	2300      	movs	r3, #0
 8013dec:	73fb      	strb	r3, [r7, #15]
 8013dee:	e032      	b.n	8013e56 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013df0:	4b1d      	ldr	r3, [pc, #116]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	781a      	ldrb	r2, [r3, #0]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	785a      	ldrb	r2, [r3, #1]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013e04:	4b18      	ldr	r3, [pc, #96]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e06:	685b      	ldr	r3, [r3, #4]
 8013e08:	789b      	ldrb	r3, [r3, #2]
 8013e0a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013e0c:	7b7b      	ldrb	r3, [r7, #13]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d005      	beq.n	8013e1e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013e12:	4b15      	ldr	r3, [pc, #84]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	4798      	blx	r3
 8013e1c:	e00b      	b.n	8013e36 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013e1e:	4b12      	ldr	r3, [pc, #72]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e20:	685b      	ldr	r3, [r3, #4]
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013e26:	4b10      	ldr	r3, [pc, #64]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	785b      	ldrb	r3, [r3, #1]
 8013e2c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8013e68 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	78db      	ldrb	r3, [r3, #3]
 8013e34:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013e36:	f7ff feff 	bl	8013c38 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013e3a:	7b7b      	ldrb	r3, [r7, #13]
 8013e3c:	f083 0301 	eor.w	r3, r3, #1
 8013e40:	b2db      	uxtb	r3, r3
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d004      	beq.n	8013e50 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013e46:	f107 0308 	add.w	r3, r7, #8
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7ff feba 	bl	8013bc4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013e50:	7bfb      	ldrb	r3, [r7, #15]
 8013e52:	3301      	adds	r3, #1
 8013e54:	73fb      	strb	r3, [r7, #15]
 8013e56:	7bfa      	ldrb	r2, [r7, #15]
 8013e58:	7bbb      	ldrb	r3, [r7, #14]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d3c8      	bcc.n	8013df0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8013e5e:	bf00      	nop
 8013e60:	bf00      	nop
 8013e62:	3710      	adds	r7, #16
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	2000c8fc 	.word	0x2000c8fc

08013e6c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013e6c:	b480      	push	{r7}
 8013e6e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013e70:	4b03      	ldr	r3, [pc, #12]	@ (8013e80 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013e72:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr
 8013e80:	2000c8fc 	.word	0x2000c8fc

08013e84 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013e88:	4b06      	ldr	r3, [pc, #24]	@ (8013ea4 <LoRaMacConfirmQueueIsFull+0x20>)
 8013e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7ff fe33 	bl	8013afa <IsListFull>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d001      	beq.n	8013e9e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e000      	b.n	8013ea0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013e9e:	2300      	movs	r3, #0
    }
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	bd80      	pop	{r7, pc}
 8013ea4:	2000c8fc 	.word	0x2000c8fc

08013ea8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b08e      	sub	sp, #56	@ 0x38
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	607b      	str	r3, [r7, #4]
 8013eb2:	460b      	mov	r3, r1
 8013eb4:	817b      	strh	r3, [r7, #10]
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d101      	bne.n	8013ec4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ec0:	230a      	movs	r3, #10
 8013ec2:	e086      	b.n	8013fd2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8013eca:	2301      	movs	r3, #1
 8013ecc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8013ece:	2300      	movs	r3, #0
 8013ed0:	623b      	str	r3, [r7, #32]
 8013ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	605a      	str	r2, [r3, #4]
 8013edc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013ede:	2300      	movs	r3, #0
 8013ee0:	613b      	str	r3, [r7, #16]
 8013ee2:	f107 0314 	add.w	r3, r7, #20
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	601a      	str	r2, [r3, #0]
 8013eea:	605a      	str	r2, [r3, #4]
 8013eec:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013ef2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013ef6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	b2db      	uxtb	r3, r3
 8013efc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	0a1b      	lsrs	r3, r3, #8
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	0c1b      	lsrs	r3, r3, #16
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	0e1b      	lsrs	r3, r3, #24
 8013f12:	b2db      	uxtb	r3, r3
 8013f14:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f18:	b2db      	uxtb	r3, r3
 8013f1a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f1e:	0a1b      	lsrs	r3, r3, #8
 8013f20:	b2db      	uxtb	r3, r3
 8013f22:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f26:	0c1b      	lsrs	r3, r3, #16
 8013f28:	b2db      	uxtb	r3, r3
 8013f2a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f2e:	0e1b      	lsrs	r3, r3, #24
 8013f30:	b2db      	uxtb	r3, r3
 8013f32:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013f34:	e048      	b.n	8013fc8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013f36:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013f38:	b2db      	uxtb	r3, r3
 8013f3a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013f3c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013f3e:	3301      	adds	r3, #1
 8013f40:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013f42:	f107 0320 	add.w	r3, r7, #32
 8013f46:	7a7a      	ldrb	r2, [r7, #9]
 8013f48:	f107 0010 	add.w	r0, r7, #16
 8013f4c:	2110      	movs	r1, #16
 8013f4e:	f7f8 fe85 	bl	800cc5c <SecureElementAesEncrypt>
 8013f52:	4603      	mov	r3, r0
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d001      	beq.n	8013f5c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f58:	230f      	movs	r3, #15
 8013f5a:	e03a      	b.n	8013fd2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013f62:	e01e      	b.n	8013fa2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013f64:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013f68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013f6c:	4413      	add	r3, r2
 8013f6e:	461a      	mov	r2, r3
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	4413      	add	r3, r2
 8013f74:	7819      	ldrb	r1, [r3, #0]
 8013f76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013f7a:	3338      	adds	r3, #56	@ 0x38
 8013f7c:	443b      	add	r3, r7
 8013f7e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013f82:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8013f86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013f8a:	4403      	add	r3, r0
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	4403      	add	r3, r0
 8013f92:	404a      	eors	r2, r1
 8013f94:	b2d2      	uxtb	r2, r2
 8013f96:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013f98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013fa6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013faa:	2a10      	cmp	r2, #16
 8013fac:	bfa8      	it	ge
 8013fae:	2210      	movge	r2, #16
 8013fb0:	b212      	sxth	r2, r2
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	dbd6      	blt.n	8013f64 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013fb6:	897b      	ldrh	r3, [r7, #10]
 8013fb8:	3b10      	subs	r3, #16
 8013fba:	b29b      	uxth	r3, r3
 8013fbc:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013fc2:	3310      	adds	r3, #16
 8013fc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8013fc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	dcb2      	bgt.n	8013f36 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013fd0:	2300      	movs	r3, #0
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	3738      	adds	r7, #56	@ 0x38
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bd80      	pop	{r7, pc}

08013fda <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013fda:	b490      	push	{r4, r7}
 8013fdc:	b082      	sub	sp, #8
 8013fde:	af00      	add	r7, sp, #0
 8013fe0:	4604      	mov	r4, r0
 8013fe2:	4608      	mov	r0, r1
 8013fe4:	4611      	mov	r1, r2
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	4623      	mov	r3, r4
 8013fea:	80fb      	strh	r3, [r7, #6]
 8013fec:	4603      	mov	r3, r0
 8013fee:	717b      	strb	r3, [r7, #5]
 8013ff0:	460b      	mov	r3, r1
 8013ff2:	713b      	strb	r3, [r7, #4]
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d101      	bne.n	8014002 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ffe:	230a      	movs	r3, #10
 8014000:	e04e      	b.n	80140a0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	2249      	movs	r2, #73	@ 0x49
 8014006:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	3301      	adds	r3, #1
 801400c:	2200      	movs	r2, #0
 801400e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014010:	69bb      	ldr	r3, [r7, #24]
 8014012:	3302      	adds	r3, #2
 8014014:	2200      	movs	r2, #0
 8014016:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	3303      	adds	r3, #3
 801401c:	2200      	movs	r2, #0
 801401e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014020:	69bb      	ldr	r3, [r7, #24]
 8014022:	3304      	adds	r3, #4
 8014024:	2200      	movs	r2, #0
 8014026:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	3305      	adds	r3, #5
 801402c:	78fa      	ldrb	r2, [r7, #3]
 801402e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014030:	69bb      	ldr	r3, [r7, #24]
 8014032:	3306      	adds	r3, #6
 8014034:	693a      	ldr	r2, [r7, #16]
 8014036:	b2d2      	uxtb	r2, r2
 8014038:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801403a:	693b      	ldr	r3, [r7, #16]
 801403c:	0a1a      	lsrs	r2, r3, #8
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	3307      	adds	r3, #7
 8014042:	b2d2      	uxtb	r2, r2
 8014044:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	0c1a      	lsrs	r2, r3, #16
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	3308      	adds	r3, #8
 801404e:	b2d2      	uxtb	r2, r2
 8014050:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	0e1a      	lsrs	r2, r3, #24
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	3309      	adds	r3, #9
 801405a:	b2d2      	uxtb	r2, r2
 801405c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	330a      	adds	r3, #10
 8014062:	697a      	ldr	r2, [r7, #20]
 8014064:	b2d2      	uxtb	r2, r2
 8014066:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	0a1a      	lsrs	r2, r3, #8
 801406c:	69bb      	ldr	r3, [r7, #24]
 801406e:	330b      	adds	r3, #11
 8014070:	b2d2      	uxtb	r2, r2
 8014072:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	0c1a      	lsrs	r2, r3, #16
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	330c      	adds	r3, #12
 801407c:	b2d2      	uxtb	r2, r2
 801407e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	0e1a      	lsrs	r2, r3, #24
 8014084:	69bb      	ldr	r3, [r7, #24]
 8014086:	330d      	adds	r3, #13
 8014088:	b2d2      	uxtb	r2, r2
 801408a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	330e      	adds	r3, #14
 8014090:	2200      	movs	r2, #0
 8014092:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	330f      	adds	r3, #15
 8014098:	88fa      	ldrh	r2, [r7, #6]
 801409a:	b2d2      	uxtb	r2, r2
 801409c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801409e:	2300      	movs	r3, #0
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3708      	adds	r7, #8
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bc90      	pop	{r4, r7}
 80140a8:	4770      	bx	lr

080140aa <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80140aa:	b590      	push	{r4, r7, lr}
 80140ac:	b08b      	sub	sp, #44	@ 0x2c
 80140ae:	af04      	add	r7, sp, #16
 80140b0:	6078      	str	r0, [r7, #4]
 80140b2:	4608      	mov	r0, r1
 80140b4:	4611      	mov	r1, r2
 80140b6:	461a      	mov	r2, r3
 80140b8:	4603      	mov	r3, r0
 80140ba:	807b      	strh	r3, [r7, #2]
 80140bc:	460b      	mov	r3, r1
 80140be:	707b      	strb	r3, [r7, #1]
 80140c0:	4613      	mov	r3, r2
 80140c2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d002      	beq.n	80140d0 <ComputeCmacB0+0x26>
 80140ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d101      	bne.n	80140d4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140d0:	230a      	movs	r3, #10
 80140d2:	e024      	b.n	801411e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80140d4:	887b      	ldrh	r3, [r7, #2]
 80140d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80140da:	d901      	bls.n	80140e0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80140dc:	230e      	movs	r3, #14
 80140de:	e01e      	b.n	801411e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80140e0:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80140e4:	783a      	ldrb	r2, [r7, #0]
 80140e6:	7879      	ldrb	r1, [r7, #1]
 80140e8:	8878      	ldrh	r0, [r7, #2]
 80140ea:	f107 0308 	add.w	r3, r7, #8
 80140ee:	9302      	str	r3, [sp, #8]
 80140f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140f2:	9301      	str	r3, [sp, #4]
 80140f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	4623      	mov	r3, r4
 80140fa:	f7ff ff6e 	bl	8013fda <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80140fe:	887a      	ldrh	r2, [r7, #2]
 8014100:	7879      	ldrb	r1, [r7, #1]
 8014102:	f107 0008 	add.w	r0, r7, #8
 8014106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014108:	9300      	str	r3, [sp, #0]
 801410a:	460b      	mov	r3, r1
 801410c:	6879      	ldr	r1, [r7, #4]
 801410e:	f7f8 fd5f 	bl	800cbd0 <SecureElementComputeAesCmac>
 8014112:	4603      	mov	r3, r0
 8014114:	2b00      	cmp	r3, #0
 8014116:	d001      	beq.n	801411c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014118:	230f      	movs	r3, #15
 801411a:	e000      	b.n	801411e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801411c:	2300      	movs	r3, #0
}
 801411e:	4618      	mov	r0, r3
 8014120:	371c      	adds	r7, #28
 8014122:	46bd      	mov	sp, r7
 8014124:	bd90      	pop	{r4, r7, pc}

08014126 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014126:	b590      	push	{r4, r7, lr}
 8014128:	b0cd      	sub	sp, #308	@ 0x134
 801412a:	af04      	add	r7, sp, #16
 801412c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8014130:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8014134:	6020      	str	r0, [r4, #0]
 8014136:	460c      	mov	r4, r1
 8014138:	4610      	mov	r0, r2
 801413a:	4619      	mov	r1, r3
 801413c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014140:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8014144:	4622      	mov	r2, r4
 8014146:	801a      	strh	r2, [r3, #0]
 8014148:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801414c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8014150:	4602      	mov	r2, r0
 8014152:	701a      	strb	r2, [r3, #0]
 8014154:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014158:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801415c:	460a      	mov	r2, r1
 801415e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014160:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014164:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d101      	bne.n	8014172 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801416e:	230a      	movs	r3, #10
 8014170:	e063      	b.n	801423a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8014172:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014176:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801417a:	881b      	ldrh	r3, [r3, #0]
 801417c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014180:	d901      	bls.n	8014186 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014182:	230e      	movs	r3, #14
 8014184:	e059      	b.n	801423a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014186:	f107 030c 	add.w	r3, r7, #12
 801418a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801418e:	2100      	movs	r1, #0
 8014190:	4618      	mov	r0, r3
 8014192:	f005 ff77 	bl	801a084 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014196:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801419a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801419e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80141a2:	781a      	ldrb	r2, [r3, #0]
 80141a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80141a8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80141ac:	7819      	ldrb	r1, [r3, #0]
 80141ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80141b2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80141b6:	8818      	ldrh	r0, [r3, #0]
 80141b8:	f107 030c 	add.w	r3, r7, #12
 80141bc:	9302      	str	r3, [sp, #8]
 80141be:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80141c2:	9301      	str	r3, [sp, #4]
 80141c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	4623      	mov	r3, r4
 80141cc:	f7ff ff05 	bl	8013fda <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80141d0:	f107 030c 	add.w	r3, r7, #12
 80141d4:	3310      	adds	r3, #16
 80141d6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80141da:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80141de:	8812      	ldrh	r2, [r2, #0]
 80141e0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80141e4:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80141e8:	6809      	ldr	r1, [r1, #0]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f005 ff0d 	bl	801a00a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80141f0:	2306      	movs	r3, #6
 80141f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80141f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80141fa:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80141fe:	881b      	ldrh	r3, [r3, #0]
 8014200:	3310      	adds	r3, #16
 8014202:	4619      	mov	r1, r3
 8014204:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8014208:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801420c:	781b      	ldrb	r3, [r3, #0]
 801420e:	f107 000c 	add.w	r0, r7, #12
 8014212:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8014216:	f7f8 fcf5 	bl	800cc04 <SecureElementVerifyAesCmac>
 801421a:	4603      	mov	r3, r0
 801421c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014220:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014224:	2b00      	cmp	r3, #0
 8014226:	d101      	bne.n	801422c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014228:	2300      	movs	r3, #0
 801422a:	e006      	b.n	801423a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801422c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8014230:	2b01      	cmp	r3, #1
 8014232:	d101      	bne.n	8014238 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014234:	2301      	movs	r3, #1
 8014236:	e000      	b.n	801423a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014238:	230f      	movs	r3, #15
}
 801423a:	4618      	mov	r0, r3
 801423c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8014240:	46bd      	mov	sp, r7
 8014242:	bd90      	pop	{r4, r7, pc}

08014244 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014244:	b480      	push	{r7}
 8014246:	b085      	sub	sp, #20
 8014248:	af00      	add	r7, sp, #0
 801424a:	4603      	mov	r3, r0
 801424c:	6039      	str	r1, [r7, #0]
 801424e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014250:	2300      	movs	r3, #0
 8014252:	73fb      	strb	r3, [r7, #15]
 8014254:	e011      	b.n	801427a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014256:	7bfb      	ldrb	r3, [r7, #15]
 8014258:	4a0d      	ldr	r2, [pc, #52]	@ (8014290 <GetKeyAddrItem+0x4c>)
 801425a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801425e:	79fa      	ldrb	r2, [r7, #7]
 8014260:	429a      	cmp	r2, r3
 8014262:	d107      	bne.n	8014274 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014264:	7bfb      	ldrb	r3, [r7, #15]
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	4a09      	ldr	r2, [pc, #36]	@ (8014290 <GetKeyAddrItem+0x4c>)
 801426a:	441a      	add	r2, r3
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014270:	2300      	movs	r3, #0
 8014272:	e006      	b.n	8014282 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014274:	7bfb      	ldrb	r3, [r7, #15]
 8014276:	3301      	adds	r3, #1
 8014278:	73fb      	strb	r3, [r7, #15]
 801427a:	7bfb      	ldrb	r3, [r7, #15]
 801427c:	2b01      	cmp	r3, #1
 801427e:	d9ea      	bls.n	8014256 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014280:	230c      	movs	r3, #12
}
 8014282:	4618      	mov	r0, r3
 8014284:	3714      	adds	r7, #20
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	20000118 	.word	0x20000118

08014294 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b088      	sub	sp, #32
 8014298:	af00      	add	r7, sp, #0
 801429a:	60b9      	str	r1, [r7, #8]
 801429c:	607a      	str	r2, [r7, #4]
 801429e:	461a      	mov	r2, r3
 80142a0:	4603      	mov	r3, r0
 80142a2:	73fb      	strb	r3, [r7, #15]
 80142a4:	4613      	mov	r3, r2
 80142a6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80142a8:	2300      	movs	r3, #0
 80142aa:	613b      	str	r3, [r7, #16]
 80142ac:	f107 0314 	add.w	r3, r7, #20
 80142b0:	2200      	movs	r2, #0
 80142b2:	601a      	str	r2, [r3, #0]
 80142b4:	605a      	str	r2, [r3, #4]
 80142b6:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80142b8:	7bfb      	ldrb	r3, [r7, #15]
 80142ba:	2b08      	cmp	r3, #8
 80142bc:	d002      	beq.n	80142c4 <DeriveSessionKey10x+0x30>
 80142be:	2b09      	cmp	r3, #9
 80142c0:	d003      	beq.n	80142ca <DeriveSessionKey10x+0x36>
 80142c2:	e005      	b.n	80142d0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80142c4:	2301      	movs	r3, #1
 80142c6:	743b      	strb	r3, [r7, #16]
            break;
 80142c8:	e004      	b.n	80142d4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80142ca:	2302      	movs	r3, #2
 80142cc:	743b      	strb	r3, [r7, #16]
            break;
 80142ce:	e001      	b.n	80142d4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80142d0:	230b      	movs	r3, #11
 80142d2:	e02a      	b.n	801432a <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	0a1b      	lsrs	r3, r3, #8
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	0c1b      	lsrs	r3, r3, #16
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	0a1b      	lsrs	r3, r3, #8
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	0c1b      	lsrs	r3, r3, #16
 80142fc:	b2db      	uxtb	r3, r3
 80142fe:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014300:	89bb      	ldrh	r3, [r7, #12]
 8014302:	b2db      	uxtb	r3, r3
 8014304:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8014306:	89bb      	ldrh	r3, [r7, #12]
 8014308:	0a1b      	lsrs	r3, r3, #8
 801430a:	b29b      	uxth	r3, r3
 801430c:	b2db      	uxtb	r3, r3
 801430e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014310:	7bfa      	ldrb	r2, [r7, #15]
 8014312:	f107 0310 	add.w	r3, r7, #16
 8014316:	2101      	movs	r1, #1
 8014318:	4618      	mov	r0, r3
 801431a:	f7f8 fd1f 	bl	800cd5c <SecureElementDeriveAndStoreKey>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d001      	beq.n	8014328 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014324:	230f      	movs	r3, #15
 8014326:	e000      	b.n	801432a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014328:	2300      	movs	r3, #0
}
 801432a:	4618      	mov	r0, r3
 801432c:	3720      	adds	r7, #32
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
	...

08014334 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
 801433a:	4603      	mov	r3, r0
 801433c:	6039      	str	r1, [r7, #0]
 801433e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014346:	230a      	movs	r3, #10
 8014348:	e029      	b.n	801439e <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801434a:	79fb      	ldrb	r3, [r7, #7]
 801434c:	3b01      	subs	r3, #1
 801434e:	2b03      	cmp	r3, #3
 8014350:	d822      	bhi.n	8014398 <GetLastFcntDown+0x64>
 8014352:	a201      	add	r2, pc, #4	@ (adr r2, 8014358 <GetLastFcntDown+0x24>)
 8014354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014358:	08014369 	.word	0x08014369
 801435c:	08014375 	.word	0x08014375
 8014360:	08014381 	.word	0x08014381
 8014364:	0801438d 	.word	0x0801438d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014368:	4b10      	ldr	r3, [pc, #64]	@ (80143ac <GetLastFcntDown+0x78>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	691a      	ldr	r2, [r3, #16]
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	601a      	str	r2, [r3, #0]
            break;
 8014372:	e013      	b.n	801439c <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014374:	4b0d      	ldr	r3, [pc, #52]	@ (80143ac <GetLastFcntDown+0x78>)
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	695a      	ldr	r2, [r3, #20]
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	601a      	str	r2, [r3, #0]
            break;
 801437e:	e00d      	b.n	801439c <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014380:	4b0a      	ldr	r3, [pc, #40]	@ (80143ac <GetLastFcntDown+0x78>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	699a      	ldr	r2, [r3, #24]
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	601a      	str	r2, [r3, #0]
            break;
 801438a:	e007      	b.n	801439c <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801438c:	4b07      	ldr	r3, [pc, #28]	@ (80143ac <GetLastFcntDown+0x78>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	69da      	ldr	r2, [r3, #28]
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	601a      	str	r2, [r3, #0]
            break;
 8014396:	e001      	b.n	801439c <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014398:	2305      	movs	r3, #5
 801439a:	e000      	b.n	801439e <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	370c      	adds	r7, #12
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr
 80143aa:	bf00      	nop
 80143ac:	2000c920 	.word	0x2000c920

080143b0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	4603      	mov	r3, r0
 80143b8:	6039      	str	r1, [r7, #0]
 80143ba:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80143bc:	2300      	movs	r3, #0
 80143be:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80143c0:	f107 020c 	add.w	r2, r7, #12
 80143c4:	79fb      	ldrb	r3, [r7, #7]
 80143c6:	4611      	mov	r1, r2
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7ff ffb3 	bl	8014334 <GetLastFcntDown>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d001      	beq.n	80143d8 <CheckFCntDown+0x28>
    {
        return false;
 80143d4:	2300      	movs	r3, #0
 80143d6:	e00a      	b.n	80143ee <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	683a      	ldr	r2, [r7, #0]
 80143dc:	429a      	cmp	r2, r3
 80143de:	d803      	bhi.n	80143e8 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80143e0:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80143e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143e6:	d101      	bne.n	80143ec <CheckFCntDown+0x3c>
    {
        return true;
 80143e8:	2301      	movs	r3, #1
 80143ea:	e000      	b.n	80143ee <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80143ec:	2300      	movs	r3, #0
    }
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3710      	adds	r7, #16
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}
	...

080143f8 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143f8:	b480      	push	{r7}
 80143fa:	b083      	sub	sp, #12
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	4603      	mov	r3, r0
 8014400:	6039      	str	r1, [r7, #0]
 8014402:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014404:	79fb      	ldrb	r3, [r7, #7]
 8014406:	3b01      	subs	r3, #1
 8014408:	2b03      	cmp	r3, #3
 801440a:	d82b      	bhi.n	8014464 <UpdateFCntDown+0x6c>
 801440c:	a201      	add	r2, pc, #4	@ (adr r2, 8014414 <UpdateFCntDown+0x1c>)
 801440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014412:	bf00      	nop
 8014414:	08014425 	.word	0x08014425
 8014418:	08014437 	.word	0x08014437
 801441c:	08014449 	.word	0x08014449
 8014420:	0801445b 	.word	0x0801445b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014424:	4b13      	ldr	r3, [pc, #76]	@ (8014474 <UpdateFCntDown+0x7c>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	683a      	ldr	r2, [r7, #0]
 801442a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801442c:	4b11      	ldr	r3, [pc, #68]	@ (8014474 <UpdateFCntDown+0x7c>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	683a      	ldr	r2, [r7, #0]
 8014432:	621a      	str	r2, [r3, #32]
            break;
 8014434:	e017      	b.n	8014466 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014436:	4b0f      	ldr	r3, [pc, #60]	@ (8014474 <UpdateFCntDown+0x7c>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	683a      	ldr	r2, [r7, #0]
 801443c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801443e:	4b0d      	ldr	r3, [pc, #52]	@ (8014474 <UpdateFCntDown+0x7c>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	683a      	ldr	r2, [r7, #0]
 8014444:	621a      	str	r2, [r3, #32]
            break;
 8014446:	e00e      	b.n	8014466 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014448:	4b0a      	ldr	r3, [pc, #40]	@ (8014474 <UpdateFCntDown+0x7c>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	683a      	ldr	r2, [r7, #0]
 801444e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8014450:	4b08      	ldr	r3, [pc, #32]	@ (8014474 <UpdateFCntDown+0x7c>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	683a      	ldr	r2, [r7, #0]
 8014456:	621a      	str	r2, [r3, #32]
            break;
 8014458:	e005      	b.n	8014466 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801445a:	4b06      	ldr	r3, [pc, #24]	@ (8014474 <UpdateFCntDown+0x7c>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	683a      	ldr	r2, [r7, #0]
 8014460:	61da      	str	r2, [r3, #28]
            break;
 8014462:	e000      	b.n	8014466 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014464:	bf00      	nop
    }
}
 8014466:	bf00      	nop
 8014468:	370c      	adds	r7, #12
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr
 8014472:	bf00      	nop
 8014474:	2000c920 	.word	0x2000c920

08014478 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801447e:	4b19      	ldr	r3, [pc, #100]	@ (80144e4 <ResetFCnts+0x6c>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	2200      	movs	r2, #0
 8014484:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014486:	4b17      	ldr	r3, [pc, #92]	@ (80144e4 <ResetFCnts+0x6c>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f04f 32ff 	mov.w	r2, #4294967295
 801448e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8014490:	4b14      	ldr	r3, [pc, #80]	@ (80144e4 <ResetFCnts+0x6c>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f04f 32ff 	mov.w	r2, #4294967295
 8014498:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801449a:	4b12      	ldr	r3, [pc, #72]	@ (80144e4 <ResetFCnts+0x6c>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	f04f 32ff 	mov.w	r2, #4294967295
 80144a2:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80144a4:	4b0f      	ldr	r3, [pc, #60]	@ (80144e4 <ResetFCnts+0x6c>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	4b0e      	ldr	r3, [pc, #56]	@ (80144e4 <ResetFCnts+0x6c>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	6992      	ldr	r2, [r2, #24]
 80144ae:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144b0:	2300      	movs	r3, #0
 80144b2:	607b      	str	r3, [r7, #4]
 80144b4:	e00b      	b.n	80144ce <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80144b6:	4b0b      	ldr	r3, [pc, #44]	@ (80144e4 <ResetFCnts+0x6c>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	3306      	adds	r3, #6
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	f04f 32ff 	mov.w	r2, #4294967295
 80144c6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	3301      	adds	r3, #1
 80144cc:	607b      	str	r3, [r7, #4]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	ddf0      	ble.n	80144b6 <ResetFCnts+0x3e>
    }
}
 80144d4:	bf00      	nop
 80144d6:	bf00      	nop
 80144d8:	370c      	adds	r7, #12
 80144da:	46bd      	mov	sp, r7
 80144dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e0:	4770      	bx	lr
 80144e2:	bf00      	nop
 80144e4:	2000c920 	.word	0x2000c920

080144e8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80144e8:	b480      	push	{r7}
 80144ea:	b083      	sub	sp, #12
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80144f0:	4b07      	ldr	r3, [pc, #28]	@ (8014510 <IsJoinNonce10xOk+0x28>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	689b      	ldr	r3, [r3, #8]
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	bf8c      	ite	hi
 80144fc:	2301      	movhi	r3, #1
 80144fe:	2300      	movls	r3, #0
 8014500:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8014502:	4618      	mov	r0, r3
 8014504:	370c      	adds	r7, #12
 8014506:	46bd      	mov	sp, r7
 8014508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450c:	4770      	bx	lr
 801450e:	bf00      	nop
 8014510:	2000c920 	.word	0x2000c920

08014514 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b082      	sub	sp, #8
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d101      	bne.n	8014526 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8014522:	2309      	movs	r3, #9
 8014524:	e01c      	b.n	8014560 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014526:	4a10      	ldr	r2, [pc, #64]	@ (8014568 <LoRaMacCryptoInit+0x54>)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801452c:	4b0e      	ldr	r3, [pc, #56]	@ (8014568 <LoRaMacCryptoInit+0x54>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2228      	movs	r2, #40	@ 0x28
 8014532:	2100      	movs	r1, #0
 8014534:	4618      	mov	r0, r3
 8014536:	f005 fda5 	bl	801a084 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801453a:	4b0b      	ldr	r3, [pc, #44]	@ (8014568 <LoRaMacCryptoInit+0x54>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	2201      	movs	r2, #1
 8014540:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8014542:	4b09      	ldr	r3, [pc, #36]	@ (8014568 <LoRaMacCryptoInit+0x54>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2201      	movs	r2, #1
 8014548:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801454a:	4b07      	ldr	r3, [pc, #28]	@ (8014568 <LoRaMacCryptoInit+0x54>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2201      	movs	r2, #1
 8014550:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8014552:	4b05      	ldr	r3, [pc, #20]	@ (8014568 <LoRaMacCryptoInit+0x54>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2200      	movs	r2, #0
 8014558:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801455a:	f7ff ff8d 	bl	8014478 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801455e:	2300      	movs	r3, #0
}
 8014560:	4618      	mov	r0, r3
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	2000c920 	.word	0x2000c920

0801456c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801456c:	b480      	push	{r7}
 801456e:	b083      	sub	sp, #12
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014574:	4b05      	ldr	r3, [pc, #20]	@ (801458c <LoRaMacCryptoSetLrWanVersion+0x20>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801457c:	2300      	movs	r3, #0
}
 801457e:	4618      	mov	r0, r3
 8014580:	370c      	adds	r7, #12
 8014582:	46bd      	mov	sp, r7
 8014584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	2000c920 	.word	0x2000c920

08014590 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014590:	b480      	push	{r7}
 8014592:	b083      	sub	sp, #12
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d101      	bne.n	80145a2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801459e:	230a      	movs	r3, #10
 80145a0:	e006      	b.n	80145b0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80145a2:	4b06      	ldr	r3, [pc, #24]	@ (80145bc <LoRaMacCryptoGetFCntUp+0x2c>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	1c5a      	adds	r2, r3, #1
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80145ae:	2300      	movs	r3, #0
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	370c      	adds	r7, #12
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr
 80145bc:	2000c920 	.word	0x2000c920

080145c0 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80145c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80145c4:	b08a      	sub	sp, #40	@ 0x28
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	613a      	str	r2, [r7, #16]
 80145ca:	60fb      	str	r3, [r7, #12]
 80145cc:	4603      	mov	r3, r0
 80145ce:	75fb      	strb	r3, [r7, #23]
 80145d0:	460b      	mov	r3, r1
 80145d2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 80145d4:	2300      	movs	r3, #0
 80145d6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 80145d8:	2300      	movs	r3, #0
 80145da:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80145dc:	2313      	movs	r3, #19
 80145de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d101      	bne.n	80145ec <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145e8:	230a      	movs	r3, #10
 80145ea:	e058      	b.n	801469e <LoRaMacCryptoGetFCntDown+0xde>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80145ec:	f107 021c 	add.w	r2, r7, #28
 80145f0:	7dfb      	ldrb	r3, [r7, #23]
 80145f2:	4611      	mov	r1, r2
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7ff fe9d 	bl	8014334 <GetLastFcntDown>
 80145fa:	4603      	mov	r3, r0
 80145fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014600:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014604:	2b00      	cmp	r3, #0
 8014606:	d002      	beq.n	801460e <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8014608:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801460c:	e047      	b.n	801469e <LoRaMacCryptoGetFCntDown+0xde>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 801460e:	69fb      	ldr	r3, [r7, #28]
 8014610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014614:	d103      	bne.n	801461e <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	693a      	ldr	r2, [r7, #16]
 801461a:	601a      	str	r2, [r3, #0]
 801461c:	e01e      	b.n	801465c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	b29b      	uxth	r3, r3
 8014622:	693a      	ldr	r2, [r7, #16]
 8014624:	1ad3      	subs	r3, r2, r3
 8014626:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8014628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801462a:	2b00      	cmp	r3, #0
 801462c:	dd05      	ble.n	801463a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801462e:	69fa      	ldr	r2, [r7, #28]
 8014630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014632:	441a      	add	r2, r3
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	601a      	str	r2, [r3, #0]
 8014638:	e010      	b.n	801465c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 801463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801463c:	2b00      	cmp	r3, #0
 801463e:	d104      	bne.n	801464a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014640:	69fa      	ldr	r2, [r7, #28]
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014646:	2307      	movs	r3, #7
 8014648:	e029      	b.n	801469e <LoRaMacCryptoGetFCntDown+0xde>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	0c1b      	lsrs	r3, r3, #16
 801464e:	041b      	lsls	r3, r3, #16
 8014650:	693a      	ldr	r2, [r7, #16]
 8014652:	4413      	add	r3, r2
 8014654:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801465c:	4b12      	ldr	r3, [pc, #72]	@ (80146a8 <LoRaMacCryptoGetFCntDown+0xe8>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	789b      	ldrb	r3, [r3, #2]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d11a      	bne.n	801469c <LoRaMacCryptoGetFCntDown+0xdc>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	2200      	movs	r2, #0
 801466c:	603b      	str	r3, [r7, #0]
 801466e:	607a      	str	r2, [r7, #4]
 8014670:	69fb      	ldr	r3, [r7, #28]
 8014672:	2200      	movs	r2, #0
 8014674:	469a      	mov	sl, r3
 8014676:	4693      	mov	fp, r2
 8014678:	e9d7 1200 	ldrd	r1, r2, [r7]
 801467c:	460b      	mov	r3, r1
 801467e:	ebb3 040a 	subs.w	r4, r3, sl
 8014682:	4613      	mov	r3, r2
 8014684:	eb63 050b 	sbc.w	r5, r3, fp
 8014688:	8abb      	ldrh	r3, [r7, #20]
 801468a:	2200      	movs	r2, #0
 801468c:	4698      	mov	r8, r3
 801468e:	4691      	mov	r9, r2
 8014690:	4544      	cmp	r4, r8
 8014692:	eb75 0309 	sbcs.w	r3, r5, r9
 8014696:	db01      	blt.n	801469c <LoRaMacCryptoGetFCntDown+0xdc>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8014698:	2308      	movs	r3, #8
 801469a:	e000      	b.n	801469e <LoRaMacCryptoGetFCntDown+0xde>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801469c:	2300      	movs	r3, #0
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3728      	adds	r7, #40	@ 0x28
 80146a2:	46bd      	mov	sp, r7
 80146a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80146a8:	2000c920 	.word	0x2000c920

080146ac <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80146ac:	b480      	push	{r7}
 80146ae:	b085      	sub	sp, #20
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d101      	bne.n	80146be <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80146ba:	230a      	movs	r3, #10
 80146bc:	e019      	b.n	80146f2 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80146be:	2300      	movs	r3, #0
 80146c0:	60fb      	str	r3, [r7, #12]
 80146c2:	e012      	b.n	80146ea <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80146c4:	4b0e      	ldr	r3, [pc, #56]	@ (8014700 <LoRaMacCryptoSetMulticastReference+0x54>)
 80146c6:	6819      	ldr	r1, [r3, #0]
 80146c8:	68fa      	ldr	r2, [r7, #12]
 80146ca:	4613      	mov	r3, r2
 80146cc:	005b      	lsls	r3, r3, #1
 80146ce:	4413      	add	r3, r2
 80146d0:	011b      	lsls	r3, r3, #4
 80146d2:	461a      	mov	r2, r3
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	4413      	add	r3, r2
 80146d8:	68fa      	ldr	r2, [r7, #12]
 80146da:	3206      	adds	r2, #6
 80146dc:	0092      	lsls	r2, r2, #2
 80146de:	440a      	add	r2, r1
 80146e0:	3204      	adds	r2, #4
 80146e2:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	3301      	adds	r3, #1
 80146e8:	60fb      	str	r3, [r7, #12]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	dde9      	ble.n	80146c4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80146f0:	2300      	movs	r3, #0
}
 80146f2:	4618      	mov	r0, r3
 80146f4:	3714      	adds	r7, #20
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop
 8014700:	2000c920 	.word	0x2000c920

08014704 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	4603      	mov	r3, r0
 801470c:	6039      	str	r1, [r7, #0]
 801470e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014710:	79fb      	ldrb	r3, [r7, #7]
 8014712:	6839      	ldr	r1, [r7, #0]
 8014714:	4618      	mov	r0, r3
 8014716:	f7f8 f9fd 	bl	800cb14 <SecureElementSetKey>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	d001      	beq.n	8014724 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014720:	230f      	movs	r3, #15
 8014722:	e021      	b.n	8014768 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8014724:	79fb      	ldrb	r3, [r7, #7]
 8014726:	2b00      	cmp	r3, #0
 8014728:	d11d      	bne.n	8014766 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801472a:	4b11      	ldr	r3, [pc, #68]	@ (8014770 <LoRaMacCryptoSetKey+0x6c>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	789b      	ldrb	r3, [r3, #2]
 8014730:	210b      	movs	r1, #11
 8014732:	4618      	mov	r0, r3
 8014734:	f000 fa5c 	bl	8014bf0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014738:	4603      	mov	r3, r0
 801473a:	2b00      	cmp	r3, #0
 801473c:	d001      	beq.n	8014742 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801473e:	230f      	movs	r3, #15
 8014740:	e012      	b.n	8014768 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014742:	210c      	movs	r1, #12
 8014744:	2000      	movs	r0, #0
 8014746:	f000 fa53 	bl	8014bf0 <LoRaMacCryptoDeriveLifeTimeKey>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d001      	beq.n	8014754 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014750:	230f      	movs	r3, #15
 8014752:	e009      	b.n	8014768 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014754:	210a      	movs	r1, #10
 8014756:	2000      	movs	r0, #0
 8014758:	f000 fa4a 	bl	8014bf0 <LoRaMacCryptoDeriveLifeTimeKey>
 801475c:	4603      	mov	r3, r0
 801475e:	2b00      	cmp	r3, #0
 8014760:	d001      	beq.n	8014766 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014762:	230f      	movs	r3, #15
 8014764:	e000      	b.n	8014768 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014766:	2300      	movs	r3, #0
}
 8014768:	4618      	mov	r0, r3
 801476a:	3708      	adds	r7, #8
 801476c:	46bd      	mov	sp, r7
 801476e:	bd80      	pop	{r7, pc}
 8014770:	2000c920 	.word	0x2000c920

08014774 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af02      	add	r7, sp, #8
 801477a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d101      	bne.n	8014786 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014782:	230a      	movs	r3, #10
 8014784:	e033      	b.n	80147ee <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014786:	2301      	movs	r3, #1
 8014788:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 801478a:	2300      	movs	r3, #0
 801478c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 801478e:	f107 0308 	add.w	r3, r7, #8
 8014792:	4618      	mov	r0, r3
 8014794:	f7f8 fb98 	bl	800cec8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8014798:	68ba      	ldr	r2, [r7, #8]
 801479a:	4b17      	ldr	r3, [pc, #92]	@ (80147f8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	b292      	uxth	r2, r2
 80147a0:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80147a2:	4b15      	ldr	r3, [pc, #84]	@ (80147f8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	889a      	ldrh	r2, [r3, #4]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f000 fc17 	bl	8014fe0 <LoRaMacSerializerJoinRequest>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d001      	beq.n	80147bc <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80147b8:	2311      	movs	r3, #17
 80147ba:	e018      	b.n	80147ee <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6819      	ldr	r1, [r3, #0]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	3318      	adds	r3, #24
 80147c4:	7bfa      	ldrb	r2, [r7, #15]
 80147c6:	9300      	str	r3, [sp, #0]
 80147c8:	4613      	mov	r3, r2
 80147ca:	2213      	movs	r2, #19
 80147cc:	2000      	movs	r0, #0
 80147ce:	f7f8 f9ff 	bl	800cbd0 <SecureElementComputeAesCmac>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d001      	beq.n	80147dc <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147d8:	230f      	movs	r3, #15
 80147da:	e008      	b.n	80147ee <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f000 fbff 	bl	8014fe0 <LoRaMacSerializerJoinRequest>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d001      	beq.n	80147ec <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80147e8:	2311      	movs	r3, #17
 80147ea:	e000      	b.n	80147ee <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80147ec:	2300      	movs	r3, #0
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3710      	adds	r7, #16
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
 80147f6:	bf00      	nop
 80147f8:	2000c920 	.word	0x2000c920

080147fc <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80147fc:	b590      	push	{r4, r7, lr}
 80147fe:	b097      	sub	sp, #92	@ 0x5c
 8014800:	af04      	add	r7, sp, #16
 8014802:	4603      	mov	r3, r0
 8014804:	60b9      	str	r1, [r7, #8]
 8014806:	607a      	str	r2, [r7, #4]
 8014808:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d002      	beq.n	8014816 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d101      	bne.n	801481a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014816:	230a      	movs	r3, #10
 8014818:	e0d3      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801481a:	2313      	movs	r3, #19
 801481c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014820:	2300      	movs	r3, #0
 8014822:	617b      	str	r3, [r7, #20]
 8014824:	f107 0318 	add.w	r3, r7, #24
 8014828:	221d      	movs	r2, #29
 801482a:	2100      	movs	r1, #0
 801482c:	4618      	mov	r0, r3
 801482e:	f007 f98f 	bl	801bb50 <memset>
    uint8_t versionMinor         = 0;
 8014832:	2300      	movs	r3, #0
 8014834:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8014836:	4b65      	ldr	r3, [pc, #404]	@ (80149cc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	889b      	ldrh	r3, [r3, #4]
 801483c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681c      	ldr	r4, [r3, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	791b      	ldrb	r3, [r3, #4]
 8014848:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 801484c:	7bf8      	ldrb	r0, [r7, #15]
 801484e:	f107 0213 	add.w	r2, r7, #19
 8014852:	9202      	str	r2, [sp, #8]
 8014854:	f107 0214 	add.w	r2, r7, #20
 8014858:	9201      	str	r2, [sp, #4]
 801485a:	9300      	str	r3, [sp, #0]
 801485c:	4623      	mov	r3, r4
 801485e:	460a      	mov	r2, r1
 8014860:	68b9      	ldr	r1, [r7, #8]
 8014862:	f7f8 fabb 	bl	800cddc <SecureElementProcessJoinAccept>
 8014866:	4603      	mov	r3, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	d001      	beq.n	8014870 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801486c:	230f      	movs	r3, #15
 801486e:	e0a8      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	6818      	ldr	r0, [r3, #0]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	791b      	ldrb	r3, [r3, #4]
 8014878:	461a      	mov	r2, r3
 801487a:	f107 0314 	add.w	r3, r7, #20
 801487e:	4619      	mov	r1, r3
 8014880:	f005 fbc3 	bl	801a00a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f000 f9ee 	bl	8014c66 <LoRaMacParserJoinAccept>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d001      	beq.n	8014894 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014890:	2310      	movs	r3, #16
 8014892:	e096      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8014894:	2300      	movs	r3, #0
 8014896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	799b      	ldrb	r3, [r3, #6]
 801489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	79db      	ldrb	r3, [r3, #7]
 80148a4:	021b      	lsls	r3, r3, #8
 80148a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80148a8:	4313      	orrs	r3, r2
 80148aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	7a1b      	ldrb	r3, [r3, #8]
 80148b0:	041b      	lsls	r3, r3, #16
 80148b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80148b4:	4313      	orrs	r3, r2
 80148b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80148b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80148ba:	f7ff fe15 	bl	80144e8 <IsJoinNonce10xOk>
 80148be:	4603      	mov	r3, r0
 80148c0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 80148c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d010      	beq.n	80148ee <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80148cc:	4b3f      	ldr	r3, [pc, #252]	@ (80149cc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80148d2:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80148d4:	7cfb      	ldrb	r3, [r7, #19]
 80148d6:	210b      	movs	r1, #11
 80148d8:	4618      	mov	r0, r3
 80148da:	f000 f989 	bl	8014bf0 <LoRaMacCryptoDeriveLifeTimeKey>
 80148de:	4603      	mov	r3, r0
 80148e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d005      	beq.n	80148f8 <LoRaMacCryptoHandleJoinAccept+0xfc>
 80148ec:	e001      	b.n	80148f2 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80148ee:	2303      	movs	r3, #3
 80148f0:	e067      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 80148f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80148f6:	e064      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80148f8:	210c      	movs	r1, #12
 80148fa:	2000      	movs	r0, #0
 80148fc:	f000 f978 	bl	8014bf0 <LoRaMacCryptoDeriveLifeTimeKey>
 8014900:	4603      	mov	r3, r0
 8014902:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014906:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801490a:	2b00      	cmp	r3, #0
 801490c:	d002      	beq.n	8014914 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 801490e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014912:	e056      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8014914:	210a      	movs	r1, #10
 8014916:	2000      	movs	r0, #0
 8014918:	f000 f96a 	bl	8014bf0 <LoRaMacCryptoDeriveLifeTimeKey>
 801491c:	4603      	mov	r3, r0
 801491e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014922:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014926:	2b00      	cmp	r3, #0
 8014928:	d002      	beq.n	8014930 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801492a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801492e:	e048      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	7a5b      	ldrb	r3, [r3, #9]
 8014934:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	7a9b      	ldrb	r3, [r3, #10]
 801493a:	021b      	lsls	r3, r3, #8
 801493c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801493e:	4313      	orrs	r3, r2
 8014940:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	7adb      	ldrb	r3, [r3, #11]
 8014946:	041b      	lsls	r3, r3, #16
 8014948:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801494a:	4313      	orrs	r3, r2
 801494c:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801494e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014952:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014954:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014956:	2009      	movs	r0, #9
 8014958:	f7ff fc9c 	bl	8014294 <DeriveSessionKey10x>
 801495c:	4603      	mov	r3, r0
 801495e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014962:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014966:	2b00      	cmp	r3, #0
 8014968:	d002      	beq.n	8014970 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801496a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801496e:	e028      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014970:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014976:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014978:	2008      	movs	r0, #8
 801497a:	f7ff fc8b 	bl	8014294 <DeriveSessionKey10x>
 801497e:	4603      	mov	r3, r0
 8014980:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014984:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014988:	2b00      	cmp	r3, #0
 801498a:	d002      	beq.n	8014992 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 801498c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014990:	e017      	b.n	80149c2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014992:	4b0e      	ldr	r3, [pc, #56]	@ (80149cc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	7cfa      	ldrb	r2, [r7, #19]
 8014998:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801499a:	4b0c      	ldr	r3, [pc, #48]	@ (80149cc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	2200      	movs	r2, #0
 80149a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80149a2:	4b0a      	ldr	r3, [pc, #40]	@ (80149cc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	f04f 32ff 	mov.w	r2, #4294967295
 80149aa:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80149ac:	4b07      	ldr	r3, [pc, #28]	@ (80149cc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f04f 32ff 	mov.w	r2, #4294967295
 80149b4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80149b6:	4b05      	ldr	r3, [pc, #20]	@ (80149cc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f04f 32ff 	mov.w	r2, #4294967295
 80149be:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80149c0:	2300      	movs	r3, #0
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	374c      	adds	r7, #76	@ 0x4c
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd90      	pop	{r4, r7, pc}
 80149ca:	bf00      	nop
 80149cc:	2000c920 	.word	0x2000c920

080149d0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80149d0:	b590      	push	{r4, r7, lr}
 80149d2:	b08b      	sub	sp, #44	@ 0x2c
 80149d4:	af04      	add	r7, sp, #16
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	607b      	str	r3, [r7, #4]
 80149da:	460b      	mov	r3, r1
 80149dc:	72fb      	strb	r3, [r7, #11]
 80149de:	4613      	mov	r3, r2
 80149e0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80149e2:	2313      	movs	r3, #19
 80149e4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80149e6:	2309      	movs	r3, #9
 80149e8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d101      	bne.n	80149f4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80149f0:	230a      	movs	r3, #10
 80149f2:	e05e      	b.n	8014ab2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80149f4:	4b31      	ldr	r3, [pc, #196]	@ (8014abc <LoRaMacCryptoSecureMessage+0xec>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	68db      	ldr	r3, [r3, #12]
 80149fa:	68fa      	ldr	r2, [r7, #12]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d201      	bcs.n	8014a04 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014a00:	2306      	movs	r3, #6
 8014a02:	e056      	b.n	8014ab2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d101      	bne.n	8014a12 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014a0e:	2308      	movs	r3, #8
 8014a10:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014a12:	4b2a      	ldr	r3, [pc, #168]	@ (8014abc <LoRaMacCryptoSecureMessage+0xec>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	68db      	ldr	r3, [r3, #12]
 8014a18:	68fa      	ldr	r2, [r7, #12]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d916      	bls.n	8014a4c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014a28:	b219      	sxth	r1, r3
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	689c      	ldr	r4, [r3, #8]
 8014a2e:	7dfa      	ldrb	r2, [r7, #23]
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	9301      	str	r3, [sp, #4]
 8014a34:	2300      	movs	r3, #0
 8014a36:	9300      	str	r3, [sp, #0]
 8014a38:	4623      	mov	r3, r4
 8014a3a:	f7ff fa35 	bl	8013ea8 <PayloadEncrypt>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a42:	7dbb      	ldrb	r3, [r7, #22]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d001      	beq.n	8014a4c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014a48:	7dbb      	ldrb	r3, [r7, #22]
 8014a4a:	e032      	b.n	8014ab2 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f000 fb49 	bl	80150e4 <LoRaMacSerializerData>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d001      	beq.n	8014a5c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014a58:	2311      	movs	r3, #17
 8014a5a:	e02a      	b.n	8014ab2 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014a5c:	2308      	movs	r3, #8
 8014a5e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6818      	ldr	r0, [r3, #0]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	791b      	ldrb	r3, [r3, #4]
 8014a68:	3b04      	subs	r3, #4
 8014a6a:	b299      	uxth	r1, r3
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	689b      	ldr	r3, [r3, #8]
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	322c      	adds	r2, #44	@ 0x2c
 8014a74:	7dfc      	ldrb	r4, [r7, #23]
 8014a76:	9203      	str	r2, [sp, #12]
 8014a78:	68fa      	ldr	r2, [r7, #12]
 8014a7a:	9202      	str	r2, [sp, #8]
 8014a7c:	9301      	str	r3, [sp, #4]
 8014a7e:	2300      	movs	r3, #0
 8014a80:	9300      	str	r3, [sp, #0]
 8014a82:	2300      	movs	r3, #0
 8014a84:	4622      	mov	r2, r4
 8014a86:	f7ff fb10 	bl	80140aa <ComputeCmacB0>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a8e:	7dbb      	ldrb	r3, [r7, #22]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d001      	beq.n	8014a98 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8014a94:	7dbb      	ldrb	r3, [r7, #22]
 8014a96:	e00c      	b.n	8014ab2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f000 fb23 	bl	80150e4 <LoRaMacSerializerData>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d001      	beq.n	8014aa8 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014aa4:	2311      	movs	r3, #17
 8014aa6:	e004      	b.n	8014ab2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014aa8:	4b04      	ldr	r3, [pc, #16]	@ (8014abc <LoRaMacCryptoSecureMessage+0xec>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014ab0:	2300      	movs	r3, #0
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	371c      	adds	r7, #28
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd90      	pop	{r4, r7, pc}
 8014aba:	bf00      	nop
 8014abc:	2000c920 	.word	0x2000c920

08014ac0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014ac0:	b590      	push	{r4, r7, lr}
 8014ac2:	b08b      	sub	sp, #44	@ 0x2c
 8014ac4:	af04      	add	r7, sp, #16
 8014ac6:	60b9      	str	r1, [r7, #8]
 8014ac8:	607b      	str	r3, [r7, #4]
 8014aca:	4603      	mov	r3, r0
 8014acc:	73fb      	strb	r3, [r7, #15]
 8014ace:	4613      	mov	r3, r2
 8014ad0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d101      	bne.n	8014adc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ad8:	230a      	movs	r3, #10
 8014ada:	e083      	b.n	8014be4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014adc:	7bbb      	ldrb	r3, [r7, #14]
 8014ade:	6879      	ldr	r1, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7ff fc65 	bl	80143b0 <CheckFCntDown>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	f083 0301 	eor.w	r3, r3, #1
 8014aec:	b2db      	uxtb	r3, r3
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d001      	beq.n	8014af6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014af2:	2306      	movs	r3, #6
 8014af4:	e076      	b.n	8014be4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014af6:	2313      	movs	r3, #19
 8014af8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014afa:	2309      	movs	r3, #9
 8014afc:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014afe:	2308      	movs	r3, #8
 8014b00:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014b04:	f000 f97a 	bl	8014dfc <LoRaMacParserData>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d001      	beq.n	8014b12 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014b0e:	2310      	movs	r3, #16
 8014b10:	e068      	b.n	8014be4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014b12:	f107 0210 	add.w	r2, r7, #16
 8014b16:	7bfb      	ldrb	r3, [r7, #15]
 8014b18:	4611      	mov	r1, r2
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7ff fb92 	bl	8014244 <GetKeyAddrItem>
 8014b20:	4603      	mov	r3, r0
 8014b22:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b24:	7d7b      	ldrb	r3, [r7, #21]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d001      	beq.n	8014b2e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014b2a:	7d7b      	ldrb	r3, [r7, #21]
 8014b2c:	e05a      	b.n	8014be4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014b2e:	693b      	ldr	r3, [r7, #16]
 8014b30:	785b      	ldrb	r3, [r3, #1]
 8014b32:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014b34:	693b      	ldr	r3, [r7, #16]
 8014b36:	789b      	ldrb	r3, [r3, #2]
 8014b38:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	68ba      	ldr	r2, [r7, #8]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d001      	beq.n	8014b48 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014b44:	2302      	movs	r3, #2
 8014b46:	e04d      	b.n	8014be4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b4a:	7b1b      	ldrb	r3, [r3, #12]
 8014b4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014b50:	b2db      	uxtb	r3, r3
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	bf14      	ite	ne
 8014b56:	2301      	movne	r3, #1
 8014b58:	2300      	moveq	r3, #0
 8014b5a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014b5c:	4b23      	ldr	r3, [pc, #140]	@ (8014bec <LoRaMacCryptoUnsecureMessage+0x12c>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	789b      	ldrb	r3, [r3, #2]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d101      	bne.n	8014b6a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014b66:	2300      	movs	r3, #0
 8014b68:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b6c:	6818      	ldr	r0, [r3, #0]
 8014b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b70:	791b      	ldrb	r3, [r3, #4]
 8014b72:	3b04      	subs	r3, #4
 8014b74:	b299      	uxth	r1, r3
 8014b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b7a:	7dbc      	ldrb	r4, [r7, #22]
 8014b7c:	7d3a      	ldrb	r2, [r7, #20]
 8014b7e:	9303      	str	r3, [sp, #12]
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	9302      	str	r3, [sp, #8]
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	9301      	str	r3, [sp, #4]
 8014b88:	2301      	movs	r3, #1
 8014b8a:	9300      	str	r3, [sp, #0]
 8014b8c:	4623      	mov	r3, r4
 8014b8e:	f7ff faca 	bl	8014126 <VerifyCmacB0>
 8014b92:	4603      	mov	r3, r0
 8014b94:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b96:	7d7b      	ldrb	r3, [r7, #21]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d001      	beq.n	8014ba0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8014b9c:	7d7b      	ldrb	r3, [r7, #21]
 8014b9e:	e021      	b.n	8014be4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d101      	bne.n	8014bae <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8014baa:	2308      	movs	r3, #8
 8014bac:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bb0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014bb8:	b219      	sxth	r1, r3
 8014bba:	7dfa      	ldrb	r2, [r7, #23]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	9301      	str	r3, [sp, #4]
 8014bc0:	2301      	movs	r3, #1
 8014bc2:	9300      	str	r3, [sp, #0]
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	f7ff f96f 	bl	8013ea8 <PayloadEncrypt>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bce:	7d7b      	ldrb	r3, [r7, #21]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d001      	beq.n	8014bd8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8014bd4:	7d7b      	ldrb	r3, [r7, #21]
 8014bd6:	e005      	b.n	8014be4 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8014bd8:	7bbb      	ldrb	r3, [r7, #14]
 8014bda:	6879      	ldr	r1, [r7, #4]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7ff fc0b 	bl	80143f8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014be2:	2300      	movs	r3, #0
}
 8014be4:	4618      	mov	r0, r3
 8014be6:	371c      	adds	r7, #28
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd90      	pop	{r4, r7, pc}
 8014bec:	2000c920 	.word	0x2000c920

08014bf0 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b088      	sub	sp, #32
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	460a      	mov	r2, r1
 8014bfa:	71fb      	strb	r3, [r7, #7]
 8014bfc:	4613      	mov	r3, r2
 8014bfe:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8014c00:	2300      	movs	r3, #0
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	f107 0310 	add.w	r3, r7, #16
 8014c08:	2200      	movs	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]
 8014c0c:	605a      	str	r2, [r3, #4]
 8014c0e:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8014c10:	2300      	movs	r3, #0
 8014c12:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8014c14:	79bb      	ldrb	r3, [r7, #6]
 8014c16:	2b0c      	cmp	r3, #12
 8014c18:	d00b      	beq.n	8014c32 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8014c1a:	2b0c      	cmp	r3, #12
 8014c1c:	dc0f      	bgt.n	8014c3e <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8014c1e:	2b0a      	cmp	r3, #10
 8014c20:	d00a      	beq.n	8014c38 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8014c22:	2b0b      	cmp	r3, #11
 8014c24:	d10b      	bne.n	8014c3e <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8014c26:	79fb      	ldrb	r3, [r7, #7]
 8014c28:	2b01      	cmp	r3, #1
 8014c2a:	d10a      	bne.n	8014c42 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8014c2c:	2320      	movs	r3, #32
 8014c2e:	733b      	strb	r3, [r7, #12]
            }
            break;
 8014c30:	e007      	b.n	8014c42 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8014c32:	230b      	movs	r3, #11
 8014c34:	77fb      	strb	r3, [r7, #31]
            break;
 8014c36:	e005      	b.n	8014c44 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8014c38:	2330      	movs	r3, #48	@ 0x30
 8014c3a:	733b      	strb	r3, [r7, #12]
            break;
 8014c3c:	e002      	b.n	8014c44 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014c3e:	230b      	movs	r3, #11
 8014c40:	e00d      	b.n	8014c5e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8014c42:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014c44:	79ba      	ldrb	r2, [r7, #6]
 8014c46:	7ff9      	ldrb	r1, [r7, #31]
 8014c48:	f107 030c 	add.w	r3, r7, #12
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f7f8 f885 	bl	800cd5c <SecureElementDeriveAndStoreKey>
 8014c52:	4603      	mov	r3, r0
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d001      	beq.n	8014c5c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014c58:	230f      	movs	r3, #15
 8014c5a:	e000      	b.n	8014c5e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014c5c:	2300      	movs	r3, #0
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3720      	adds	r7, #32
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}

08014c66 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014c66:	b580      	push	{r7, lr}
 8014c68:	b084      	sub	sp, #16
 8014c6a:	af00      	add	r7, sp, #0
 8014c6c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d003      	beq.n	8014c7c <LoRaMacParserJoinAccept+0x16>
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d101      	bne.n	8014c80 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014c7c:	2302      	movs	r3, #2
 8014c7e:	e0b9      	b.n	8014df4 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014c80:	2300      	movs	r3, #0
 8014c82:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	89fb      	ldrh	r3, [r7, #14]
 8014c8a:	1c59      	adds	r1, r3, #1
 8014c8c:	81f9      	strh	r1, [r7, #14]
 8014c8e:	4413      	add	r3, r2
 8014c90:	781a      	ldrb	r2, [r3, #0]
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	1d98      	adds	r0, r3, #6
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681a      	ldr	r2, [r3, #0]
 8014c9e:	89fb      	ldrh	r3, [r7, #14]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	2203      	movs	r2, #3
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	f005 f9b0 	bl	801a00a <memcpy1>
    bufItr = bufItr + 3;
 8014caa:	89fb      	ldrh	r3, [r7, #14]
 8014cac:	3303      	adds	r3, #3
 8014cae:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f103 0009 	add.w	r0, r3, #9
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681a      	ldr	r2, [r3, #0]
 8014cba:	89fb      	ldrh	r3, [r7, #14]
 8014cbc:	4413      	add	r3, r2
 8014cbe:	2203      	movs	r2, #3
 8014cc0:	4619      	mov	r1, r3
 8014cc2:	f005 f9a2 	bl	801a00a <memcpy1>
    bufItr = bufItr + 3;
 8014cc6:	89fb      	ldrh	r3, [r7, #14]
 8014cc8:	3303      	adds	r3, #3
 8014cca:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	89fb      	ldrh	r3, [r7, #14]
 8014cd2:	1c59      	adds	r1, r3, #1
 8014cd4:	81f9      	strh	r1, [r7, #14]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	781b      	ldrb	r3, [r3, #0]
 8014cda:	461a      	mov	r2, r3
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	681a      	ldr	r2, [r3, #0]
 8014ce4:	89fb      	ldrh	r3, [r7, #14]
 8014ce6:	1c59      	adds	r1, r3, #1
 8014ce8:	81f9      	strh	r1, [r7, #14]
 8014cea:	4413      	add	r3, r2
 8014cec:	781b      	ldrb	r3, [r3, #0]
 8014cee:	021a      	lsls	r2, r3, #8
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	431a      	orrs	r2, r3
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681a      	ldr	r2, [r3, #0]
 8014cfe:	89fb      	ldrh	r3, [r7, #14]
 8014d00:	1c59      	adds	r1, r3, #1
 8014d02:	81f9      	strh	r1, [r7, #14]
 8014d04:	4413      	add	r3, r2
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	041a      	lsls	r2, r3, #16
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	431a      	orrs	r2, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681a      	ldr	r2, [r3, #0]
 8014d18:	89fb      	ldrh	r3, [r7, #14]
 8014d1a:	1c59      	adds	r1, r3, #1
 8014d1c:	81f9      	strh	r1, [r7, #14]
 8014d1e:	4413      	add	r3, r2
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	061a      	lsls	r2, r3, #24
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	431a      	orrs	r2, r3
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681a      	ldr	r2, [r3, #0]
 8014d32:	89fb      	ldrh	r3, [r7, #14]
 8014d34:	1c59      	adds	r1, r3, #1
 8014d36:	81f9      	strh	r1, [r7, #14]
 8014d38:	4413      	add	r3, r2
 8014d3a:	781a      	ldrb	r2, [r3, #0]
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	89fb      	ldrh	r3, [r7, #14]
 8014d46:	1c59      	adds	r1, r3, #1
 8014d48:	81f9      	strh	r1, [r7, #14]
 8014d4a:	4413      	add	r3, r2
 8014d4c:	781a      	ldrb	r2, [r3, #0]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	791b      	ldrb	r3, [r3, #4]
 8014d56:	1f1a      	subs	r2, r3, #4
 8014d58:	89fb      	ldrh	r3, [r7, #14]
 8014d5a:	1ad3      	subs	r3, r2, r3
 8014d5c:	2b10      	cmp	r3, #16
 8014d5e:	d10e      	bne.n	8014d7e <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f103 0012 	add.w	r0, r3, #18
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	89fb      	ldrh	r3, [r7, #14]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	2210      	movs	r2, #16
 8014d70:	4619      	mov	r1, r3
 8014d72:	f005 f94a 	bl	801a00a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014d76:	89fb      	ldrh	r3, [r7, #14]
 8014d78:	3310      	adds	r3, #16
 8014d7a:	81fb      	strh	r3, [r7, #14]
 8014d7c:	e008      	b.n	8014d90 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	791b      	ldrb	r3, [r3, #4]
 8014d82:	1f1a      	subs	r2, r3, #4
 8014d84:	89fb      	ldrh	r3, [r7, #14]
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	dd01      	ble.n	8014d90 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	e031      	b.n	8014df4 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	89fb      	ldrh	r3, [r7, #14]
 8014d96:	1c59      	adds	r1, r3, #1
 8014d98:	81f9      	strh	r1, [r7, #14]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	461a      	mov	r2, r3
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	89fb      	ldrh	r3, [r7, #14]
 8014daa:	1c59      	adds	r1, r3, #1
 8014dac:	81f9      	strh	r1, [r7, #14]
 8014dae:	4413      	add	r3, r2
 8014db0:	781b      	ldrb	r3, [r3, #0]
 8014db2:	021a      	lsls	r2, r3, #8
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014db8:	431a      	orrs	r2, r3
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681a      	ldr	r2, [r3, #0]
 8014dc2:	89fb      	ldrh	r3, [r7, #14]
 8014dc4:	1c59      	adds	r1, r3, #1
 8014dc6:	81f9      	strh	r1, [r7, #14]
 8014dc8:	4413      	add	r3, r2
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	041a      	lsls	r2, r3, #16
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dd2:	431a      	orrs	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	89fb      	ldrh	r3, [r7, #14]
 8014dde:	1c59      	adds	r1, r3, #1
 8014de0:	81f9      	strh	r1, [r7, #14]
 8014de2:	4413      	add	r3, r2
 8014de4:	781b      	ldrb	r3, [r3, #0]
 8014de6:	061a      	lsls	r2, r3, #24
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dec:	431a      	orrs	r2, r3
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014df2:	2300      	movs	r3, #0
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	3710      	adds	r7, #16
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}

08014dfc <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b084      	sub	sp, #16
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d003      	beq.n	8014e12 <LoRaMacParserData+0x16>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d101      	bne.n	8014e16 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014e12:	2302      	movs	r3, #2
 8014e14:	e0e0      	b.n	8014fd8 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8014e16:	2300      	movs	r3, #0
 8014e18:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681a      	ldr	r2, [r3, #0]
 8014e1e:	89fb      	ldrh	r3, [r7, #14]
 8014e20:	1c59      	adds	r1, r3, #1
 8014e22:	81f9      	strh	r1, [r7, #14]
 8014e24:	4413      	add	r3, r2
 8014e26:	781a      	ldrb	r2, [r3, #0]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	89fb      	ldrh	r3, [r7, #14]
 8014e32:	1c59      	adds	r1, r3, #1
 8014e34:	81f9      	strh	r1, [r7, #14]
 8014e36:	4413      	add	r3, r2
 8014e38:	781b      	ldrb	r3, [r3, #0]
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	89fb      	ldrh	r3, [r7, #14]
 8014e46:	1c59      	adds	r1, r3, #1
 8014e48:	81f9      	strh	r1, [r7, #14]
 8014e4a:	4413      	add	r3, r2
 8014e4c:	781b      	ldrb	r3, [r3, #0]
 8014e4e:	021a      	lsls	r2, r3, #8
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	689b      	ldr	r3, [r3, #8]
 8014e54:	431a      	orrs	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	89fb      	ldrh	r3, [r7, #14]
 8014e60:	1c59      	adds	r1, r3, #1
 8014e62:	81f9      	strh	r1, [r7, #14]
 8014e64:	4413      	add	r3, r2
 8014e66:	781b      	ldrb	r3, [r3, #0]
 8014e68:	041a      	lsls	r2, r3, #16
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	689b      	ldr	r3, [r3, #8]
 8014e6e:	431a      	orrs	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	681a      	ldr	r2, [r3, #0]
 8014e78:	89fb      	ldrh	r3, [r7, #14]
 8014e7a:	1c59      	adds	r1, r3, #1
 8014e7c:	81f9      	strh	r1, [r7, #14]
 8014e7e:	4413      	add	r3, r2
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	061a      	lsls	r2, r3, #24
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	431a      	orrs	r2, r3
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	89fb      	ldrh	r3, [r7, #14]
 8014e94:	1c59      	adds	r1, r3, #1
 8014e96:	81f9      	strh	r1, [r7, #14]
 8014e98:	4413      	add	r3, r2
 8014e9a:	781a      	ldrb	r2, [r3, #0]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	89fb      	ldrh	r3, [r7, #14]
 8014ea6:	1c59      	adds	r1, r3, #1
 8014ea8:	81f9      	strh	r1, [r7, #14]
 8014eaa:	4413      	add	r3, r2
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	461a      	mov	r2, r3
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	89fb      	ldrh	r3, [r7, #14]
 8014eba:	1c59      	adds	r1, r3, #1
 8014ebc:	81f9      	strh	r1, [r7, #14]
 8014ebe:	4413      	add	r3, r2
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	0219      	lsls	r1, r3, #8
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	89db      	ldrh	r3, [r3, #14]
 8014ec8:	b21a      	sxth	r2, r3
 8014eca:	b20b      	sxth	r3, r1
 8014ecc:	4313      	orrs	r3, r2
 8014ece:	b21b      	sxth	r3, r3
 8014ed0:	b29a      	uxth	r2, r3
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	f103 0010 	add.w	r0, r3, #16
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	89fb      	ldrh	r3, [r7, #14]
 8014ee2:	18d1      	adds	r1, r2, r3
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	7b1b      	ldrb	r3, [r3, #12]
 8014ee8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	461a      	mov	r2, r3
 8014ef0:	f005 f88b 	bl	801a00a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	7b1b      	ldrb	r3, [r3, #12]
 8014ef8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	461a      	mov	r2, r3
 8014f00:	89fb      	ldrh	r3, [r7, #14]
 8014f02:	4413      	add	r3, r2
 8014f04:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2200      	movs	r2, #0
 8014f0a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2200      	movs	r2, #0
 8014f12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	791b      	ldrb	r3, [r3, #4]
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	89fb      	ldrh	r3, [r7, #14]
 8014f1e:	1ad3      	subs	r3, r2, r3
 8014f20:	2b04      	cmp	r3, #4
 8014f22:	dd27      	ble.n	8014f74 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	89fb      	ldrh	r3, [r7, #14]
 8014f2a:	1c59      	adds	r1, r3, #1
 8014f2c:	81f9      	strh	r1, [r7, #14]
 8014f2e:	4413      	add	r3, r2
 8014f30:	781a      	ldrb	r2, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	791a      	ldrb	r2, [r3, #4]
 8014f3c:	89fb      	ldrh	r3, [r7, #14]
 8014f3e:	b2db      	uxtb	r3, r3
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	3b04      	subs	r3, #4
 8014f46:	b2da      	uxtb	r2, r3
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	681a      	ldr	r2, [r3, #0]
 8014f56:	89fb      	ldrh	r3, [r7, #14]
 8014f58:	18d1      	adds	r1, r2, r3
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014f60:	461a      	mov	r2, r3
 8014f62:	f005 f852 	bl	801a00a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014f6c:	461a      	mov	r2, r3
 8014f6e:	89fb      	ldrh	r3, [r7, #14]
 8014f70:	4413      	add	r3, r2
 8014f72:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681a      	ldr	r2, [r3, #0]
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	791b      	ldrb	r3, [r3, #4]
 8014f7c:	3b04      	subs	r3, #4
 8014f7e:	4413      	add	r3, r2
 8014f80:	781b      	ldrb	r3, [r3, #0]
 8014f82:	461a      	mov	r2, r3
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6819      	ldr	r1, [r3, #0]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	791b      	ldrb	r3, [r3, #4]
 8014f94:	3b03      	subs	r3, #3
 8014f96:	440b      	add	r3, r1
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	021b      	lsls	r3, r3, #8
 8014f9c:	431a      	orrs	r2, r3
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6819      	ldr	r1, [r3, #0]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	791b      	ldrb	r3, [r3, #4]
 8014fae:	3b02      	subs	r3, #2
 8014fb0:	440b      	add	r3, r1
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	041b      	lsls	r3, r3, #16
 8014fb6:	431a      	orrs	r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6819      	ldr	r1, [r3, #0]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	791b      	ldrb	r3, [r3, #4]
 8014fc8:	3b01      	subs	r3, #1
 8014fca:	440b      	add	r3, r1
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	061b      	lsls	r3, r3, #24
 8014fd0:	431a      	orrs	r2, r3
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014fd6:	2300      	movs	r3, #0
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3710      	adds	r7, #16
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d003      	beq.n	8014ff6 <LoRaMacSerializerJoinRequest+0x16>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d101      	bne.n	8014ffa <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	e070      	b.n	80150dc <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	791b      	ldrb	r3, [r3, #4]
 8015002:	2b16      	cmp	r3, #22
 8015004:	d801      	bhi.n	801500a <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015006:	2302      	movs	r3, #2
 8015008:	e068      	b.n	80150dc <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681a      	ldr	r2, [r3, #0]
 801500e:	89fb      	ldrh	r3, [r7, #14]
 8015010:	1c59      	adds	r1, r3, #1
 8015012:	81f9      	strh	r1, [r7, #14]
 8015014:	4413      	add	r3, r2
 8015016:	687a      	ldr	r2, [r7, #4]
 8015018:	7952      	ldrb	r2, [r2, #5]
 801501a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681a      	ldr	r2, [r3, #0]
 8015020:	89fb      	ldrh	r3, [r7, #14]
 8015022:	18d0      	adds	r0, r2, r3
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	3306      	adds	r3, #6
 8015028:	2208      	movs	r2, #8
 801502a:	4619      	mov	r1, r3
 801502c:	f005 f809 	bl	801a042 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8015030:	89fb      	ldrh	r3, [r7, #14]
 8015032:	3308      	adds	r3, #8
 8015034:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	89fb      	ldrh	r3, [r7, #14]
 801503c:	18d0      	adds	r0, r2, r3
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	330e      	adds	r3, #14
 8015042:	2208      	movs	r2, #8
 8015044:	4619      	mov	r1, r3
 8015046:	f004 fffc 	bl	801a042 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801504a:	89fb      	ldrh	r3, [r7, #14]
 801504c:	3308      	adds	r3, #8
 801504e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	8ad9      	ldrh	r1, [r3, #22]
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	89fb      	ldrh	r3, [r7, #14]
 801505a:	1c58      	adds	r0, r3, #1
 801505c:	81f8      	strh	r0, [r7, #14]
 801505e:	4413      	add	r3, r2
 8015060:	b2ca      	uxtb	r2, r1
 8015062:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	8adb      	ldrh	r3, [r3, #22]
 8015068:	0a1b      	lsrs	r3, r3, #8
 801506a:	b299      	uxth	r1, r3
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	89fb      	ldrh	r3, [r7, #14]
 8015072:	1c58      	adds	r0, r3, #1
 8015074:	81f8      	strh	r0, [r7, #14]
 8015076:	4413      	add	r3, r2
 8015078:	b2ca      	uxtb	r2, r1
 801507a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6999      	ldr	r1, [r3, #24]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	89fb      	ldrh	r3, [r7, #14]
 8015086:	1c58      	adds	r0, r3, #1
 8015088:	81f8      	strh	r0, [r7, #14]
 801508a:	4413      	add	r3, r2
 801508c:	b2ca      	uxtb	r2, r1
 801508e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	699b      	ldr	r3, [r3, #24]
 8015094:	0a19      	lsrs	r1, r3, #8
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681a      	ldr	r2, [r3, #0]
 801509a:	89fb      	ldrh	r3, [r7, #14]
 801509c:	1c58      	adds	r0, r3, #1
 801509e:	81f8      	strh	r0, [r7, #14]
 80150a0:	4413      	add	r3, r2
 80150a2:	b2ca      	uxtb	r2, r1
 80150a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	699b      	ldr	r3, [r3, #24]
 80150aa:	0c19      	lsrs	r1, r3, #16
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	89fb      	ldrh	r3, [r7, #14]
 80150b2:	1c58      	adds	r0, r3, #1
 80150b4:	81f8      	strh	r0, [r7, #14]
 80150b6:	4413      	add	r3, r2
 80150b8:	b2ca      	uxtb	r2, r1
 80150ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	699b      	ldr	r3, [r3, #24]
 80150c0:	0e19      	lsrs	r1, r3, #24
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681a      	ldr	r2, [r3, #0]
 80150c6:	89fb      	ldrh	r3, [r7, #14]
 80150c8:	1c58      	adds	r0, r3, #1
 80150ca:	81f8      	strh	r0, [r7, #14]
 80150cc:	4413      	add	r3, r2
 80150ce:	b2ca      	uxtb	r2, r1
 80150d0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80150d2:	89fb      	ldrh	r3, [r7, #14]
 80150d4:	b2da      	uxtb	r2, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80150da:	2300      	movs	r3, #0
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3710      	adds	r7, #16
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d003      	beq.n	80150fa <LoRaMacSerializerData+0x16>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d101      	bne.n	80150fe <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80150fa:	2301      	movs	r3, #1
 80150fc:	e0e3      	b.n	80152c6 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80150fe:	2300      	movs	r3, #0
 8015100:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015102:	2308      	movs	r3, #8
 8015104:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	7b1b      	ldrb	r3, [r3, #12]
 801510a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801510e:	b2db      	uxtb	r3, r3
 8015110:	461a      	mov	r2, r3
 8015112:	89bb      	ldrh	r3, [r7, #12]
 8015114:	4413      	add	r3, r2
 8015116:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801511e:	2b00      	cmp	r3, #0
 8015120:	d002      	beq.n	8015128 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8015122:	89bb      	ldrh	r3, [r7, #12]
 8015124:	3301      	adds	r3, #1
 8015126:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801512e:	461a      	mov	r2, r3
 8015130:	89bb      	ldrh	r3, [r7, #12]
 8015132:	4413      	add	r3, r2
 8015134:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8015136:	89bb      	ldrh	r3, [r7, #12]
 8015138:	3304      	adds	r3, #4
 801513a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	791b      	ldrb	r3, [r3, #4]
 8015140:	461a      	mov	r2, r3
 8015142:	89bb      	ldrh	r3, [r7, #12]
 8015144:	4293      	cmp	r3, r2
 8015146:	d901      	bls.n	801514c <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015148:	2302      	movs	r3, #2
 801514a:	e0bc      	b.n	80152c6 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	89fb      	ldrh	r3, [r7, #14]
 8015152:	1c59      	adds	r1, r3, #1
 8015154:	81f9      	strh	r1, [r7, #14]
 8015156:	4413      	add	r3, r2
 8015158:	687a      	ldr	r2, [r7, #4]
 801515a:	7952      	ldrb	r2, [r2, #5]
 801515c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6899      	ldr	r1, [r3, #8]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681a      	ldr	r2, [r3, #0]
 8015166:	89fb      	ldrh	r3, [r7, #14]
 8015168:	1c58      	adds	r0, r3, #1
 801516a:	81f8      	strh	r0, [r7, #14]
 801516c:	4413      	add	r3, r2
 801516e:	b2ca      	uxtb	r2, r1
 8015170:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	689b      	ldr	r3, [r3, #8]
 8015176:	0a19      	lsrs	r1, r3, #8
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	89fb      	ldrh	r3, [r7, #14]
 801517e:	1c58      	adds	r0, r3, #1
 8015180:	81f8      	strh	r0, [r7, #14]
 8015182:	4413      	add	r3, r2
 8015184:	b2ca      	uxtb	r2, r1
 8015186:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	689b      	ldr	r3, [r3, #8]
 801518c:	0c19      	lsrs	r1, r3, #16
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	89fb      	ldrh	r3, [r7, #14]
 8015194:	1c58      	adds	r0, r3, #1
 8015196:	81f8      	strh	r0, [r7, #14]
 8015198:	4413      	add	r3, r2
 801519a:	b2ca      	uxtb	r2, r1
 801519c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	689b      	ldr	r3, [r3, #8]
 80151a2:	0e19      	lsrs	r1, r3, #24
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681a      	ldr	r2, [r3, #0]
 80151a8:	89fb      	ldrh	r3, [r7, #14]
 80151aa:	1c58      	adds	r0, r3, #1
 80151ac:	81f8      	strh	r0, [r7, #14]
 80151ae:	4413      	add	r3, r2
 80151b0:	b2ca      	uxtb	r2, r1
 80151b2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	89fb      	ldrh	r3, [r7, #14]
 80151ba:	1c59      	adds	r1, r3, #1
 80151bc:	81f9      	strh	r1, [r7, #14]
 80151be:	4413      	add	r3, r2
 80151c0:	687a      	ldr	r2, [r7, #4]
 80151c2:	7b12      	ldrb	r2, [r2, #12]
 80151c4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	89d9      	ldrh	r1, [r3, #14]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	89fb      	ldrh	r3, [r7, #14]
 80151d0:	1c58      	adds	r0, r3, #1
 80151d2:	81f8      	strh	r0, [r7, #14]
 80151d4:	4413      	add	r3, r2
 80151d6:	b2ca      	uxtb	r2, r1
 80151d8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	89db      	ldrh	r3, [r3, #14]
 80151de:	0a1b      	lsrs	r3, r3, #8
 80151e0:	b299      	uxth	r1, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681a      	ldr	r2, [r3, #0]
 80151e6:	89fb      	ldrh	r3, [r7, #14]
 80151e8:	1c58      	adds	r0, r3, #1
 80151ea:	81f8      	strh	r0, [r7, #14]
 80151ec:	4413      	add	r3, r2
 80151ee:	b2ca      	uxtb	r2, r1
 80151f0:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681a      	ldr	r2, [r3, #0]
 80151f6:	89fb      	ldrh	r3, [r7, #14]
 80151f8:	18d0      	adds	r0, r2, r3
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	f103 0110 	add.w	r1, r3, #16
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	7b1b      	ldrb	r3, [r3, #12]
 8015204:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015208:	b2db      	uxtb	r3, r3
 801520a:	461a      	mov	r2, r3
 801520c:	f004 fefd 	bl	801a00a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	7b1b      	ldrb	r3, [r3, #12]
 8015214:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015218:	b2db      	uxtb	r3, r3
 801521a:	461a      	mov	r2, r3
 801521c:	89fb      	ldrh	r3, [r7, #14]
 801521e:	4413      	add	r3, r2
 8015220:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015228:	2b00      	cmp	r3, #0
 801522a:	d009      	beq.n	8015240 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	89fb      	ldrh	r3, [r7, #14]
 8015232:	1c59      	adds	r1, r3, #1
 8015234:	81f9      	strh	r1, [r7, #14]
 8015236:	4413      	add	r3, r2
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801523e:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	681a      	ldr	r2, [r3, #0]
 8015244:	89fb      	ldrh	r3, [r7, #14]
 8015246:	18d0      	adds	r0, r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015252:	461a      	mov	r2, r3
 8015254:	f004 fed9 	bl	801a00a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801525e:	461a      	mov	r2, r3
 8015260:	89fb      	ldrh	r3, [r7, #14]
 8015262:	4413      	add	r3, r2
 8015264:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	89fb      	ldrh	r3, [r7, #14]
 8015270:	1c58      	adds	r0, r3, #1
 8015272:	81f8      	strh	r0, [r7, #14]
 8015274:	4413      	add	r3, r2
 8015276:	b2ca      	uxtb	r2, r1
 8015278:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801527e:	0a19      	lsrs	r1, r3, #8
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	89fb      	ldrh	r3, [r7, #14]
 8015286:	1c58      	adds	r0, r3, #1
 8015288:	81f8      	strh	r0, [r7, #14]
 801528a:	4413      	add	r3, r2
 801528c:	b2ca      	uxtb	r2, r1
 801528e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015294:	0c19      	lsrs	r1, r3, #16
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681a      	ldr	r2, [r3, #0]
 801529a:	89fb      	ldrh	r3, [r7, #14]
 801529c:	1c58      	adds	r0, r3, #1
 801529e:	81f8      	strh	r0, [r7, #14]
 80152a0:	4413      	add	r3, r2
 80152a2:	b2ca      	uxtb	r2, r1
 80152a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152aa:	0e19      	lsrs	r1, r3, #24
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	681a      	ldr	r2, [r3, #0]
 80152b0:	89fb      	ldrh	r3, [r7, #14]
 80152b2:	1c58      	adds	r0, r3, #1
 80152b4:	81f8      	strh	r0, [r7, #14]
 80152b6:	4413      	add	r3, r2
 80152b8:	b2ca      	uxtb	r2, r1
 80152ba:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80152bc:	89fb      	ldrh	r3, [r7, #14]
 80152be:	b2da      	uxtb	r2, r3
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80152c4:	2300      	movs	r3, #0
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3710      	adds	r7, #16
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}

080152ce <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80152ce:	b480      	push	{r7}
 80152d0:	b083      	sub	sp, #12
 80152d2:	af00      	add	r7, sp, #0
 80152d4:	4603      	mov	r3, r0
 80152d6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80152d8:	79fb      	ldrb	r3, [r7, #7]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d101      	bne.n	80152e2 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 80152de:	2301      	movs	r3, #1
 80152e0:	e000      	b.n	80152e4 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80152e2:	2300      	movs	r3, #0
        }
    }
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	370c      	adds	r7, #12
 80152e8:	46bd      	mov	sp, r7
 80152ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ee:	4770      	bx	lr

080152f0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b086      	sub	sp, #24
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	60f8      	str	r0, [r7, #12]
 80152f8:	460b      	mov	r3, r1
 80152fa:	607a      	str	r2, [r7, #4]
 80152fc:	72fb      	strb	r3, [r7, #11]
    PhyParam_t phyParam = { 0 };
 80152fe:	f107 0310 	add.w	r3, r7, #16
 8015302:	2200      	movs	r2, #0
 8015304:	601a      	str	r2, [r3, #0]
 8015306:	605a      	str	r2, [r3, #4]
    switch( region )
 8015308:	7afb      	ldrb	r3, [r7, #11]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d105      	bne.n	801531a <RegionGetPhyParam+0x2a>
    {
        AS923_GET_PHY_PARAM( );
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	6879      	ldr	r1, [r7, #4]
 8015312:	4618      	mov	r0, r3
 8015314:	f000 f9fa 	bl	801570c <RegionAS923GetPhyParam>
 8015318:	e007      	b.n	801532a <RegionGetPhyParam+0x3a>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	461a      	mov	r2, r3
 801531e:	f107 0310 	add.w	r3, r7, #16
 8015322:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015326:	e882 0003 	stmia.w	r2, {r0, r1}
        }
    }
}
 801532a:	68f8      	ldr	r0, [r7, #12]
 801532c:	3718      	adds	r7, #24
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}

08015332 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015332:	b580      	push	{r7, lr}
 8015334:	b082      	sub	sp, #8
 8015336:	af00      	add	r7, sp, #0
 8015338:	4603      	mov	r3, r0
 801533a:	6039      	str	r1, [r7, #0]
 801533c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801533e:	79fb      	ldrb	r3, [r7, #7]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d103      	bne.n	801534c <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8015344:	6838      	ldr	r0, [r7, #0]
 8015346:	f000 fb61 	bl	8015a0c <RegionAS923SetBandTxDone>
 801534a:	e000      	b.n	801534e <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801534c:	bf00      	nop
        }
    }
}
 801534e:	3708      	adds	r7, #8
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}

08015354 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b082      	sub	sp, #8
 8015358:	af00      	add	r7, sp, #0
 801535a:	4603      	mov	r3, r0
 801535c:	6039      	str	r1, [r7, #0]
 801535e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015360:	79fb      	ldrb	r3, [r7, #7]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d103      	bne.n	801536e <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8015366:	6838      	ldr	r0, [r7, #0]
 8015368:	f000 fb80 	bl	8015a6c <RegionAS923InitDefaults>
 801536c:	e000      	b.n	8015370 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801536e:	bf00      	nop
        }
    }
}
 8015370:	bf00      	nop
 8015372:	3708      	adds	r7, #8
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}

08015378 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b082      	sub	sp, #8
 801537c:	af00      	add	r7, sp, #0
 801537e:	4603      	mov	r3, r0
 8015380:	6039      	str	r1, [r7, #0]
 8015382:	71fb      	strb	r3, [r7, #7]
 8015384:	4613      	mov	r3, r2
 8015386:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8015388:	79fb      	ldrb	r3, [r7, #7]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d106      	bne.n	801539c <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 801538e:	79bb      	ldrb	r3, [r7, #6]
 8015390:	4619      	mov	r1, r3
 8015392:	6838      	ldr	r0, [r7, #0]
 8015394:	f000 fc0e 	bl	8015bb4 <RegionAS923Verify>
 8015398:	4603      	mov	r3, r0
 801539a:	e000      	b.n	801539e <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801539c:	2300      	movs	r3, #0
        }
    }
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3708      	adds	r7, #8
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80153a6:	b580      	push	{r7, lr}
 80153a8:	b082      	sub	sp, #8
 80153aa:	af00      	add	r7, sp, #0
 80153ac:	4603      	mov	r3, r0
 80153ae:	6039      	str	r1, [r7, #0]
 80153b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153b2:	79fb      	ldrb	r3, [r7, #7]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d103      	bne.n	80153c0 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 80153b8:	6838      	ldr	r0, [r7, #0]
 80153ba:	f000 fc99 	bl	8015cf0 <RegionAS923ApplyCFList>
 80153be:	e000      	b.n	80153c2 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80153c0:	bf00      	nop
        }
    }
}
 80153c2:	bf00      	nop
 80153c4:	3708      	adds	r7, #8
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b082      	sub	sp, #8
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	4603      	mov	r3, r0
 80153d2:	6039      	str	r1, [r7, #0]
 80153d4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153d6:	79fb      	ldrb	r3, [r7, #7]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d104      	bne.n	80153e6 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 80153dc:	6838      	ldr	r0, [r7, #0]
 80153de:	f000 fcfb 	bl	8015dd8 <RegionAS923ChanMaskSet>
 80153e2:	4603      	mov	r3, r0
 80153e4:	e000      	b.n	80153e8 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80153e6:	2300      	movs	r3, #0
        }
    }
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	603b      	str	r3, [r7, #0]
 80153f8:	4603      	mov	r3, r0
 80153fa:	71fb      	strb	r3, [r7, #7]
 80153fc:	460b      	mov	r3, r1
 80153fe:	71bb      	strb	r3, [r7, #6]
 8015400:	4613      	mov	r3, r2
 8015402:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015404:	79fb      	ldrb	r3, [r7, #7]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d107      	bne.n	801541a <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 801540a:	7979      	ldrb	r1, [r7, #5]
 801540c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8015410:	693b      	ldr	r3, [r7, #16]
 8015412:	683a      	ldr	r2, [r7, #0]
 8015414:	f000 fd0a 	bl	8015e2c <RegionAS923ComputeRxWindowParameters>
 8015418:	e000      	b.n	801541c <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801541a:	bf00      	nop
        }
    }
}
 801541c:	bf00      	nop
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	60b9      	str	r1, [r7, #8]
 801542e:	607a      	str	r2, [r7, #4]
 8015430:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015432:	7bfb      	ldrb	r3, [r7, #15]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d105      	bne.n	8015444 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8015438:	6879      	ldr	r1, [r7, #4]
 801543a:	68b8      	ldr	r0, [r7, #8]
 801543c:	f000 fd50 	bl	8015ee0 <RegionAS923RxConfig>
 8015440:	4603      	mov	r3, r0
 8015442:	e000      	b.n	8015446 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015444:	2300      	movs	r3, #0
        }
    }
}
 8015446:	4618      	mov	r0, r3
 8015448:	3710      	adds	r7, #16
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}

0801544e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801544e:	b580      	push	{r7, lr}
 8015450:	b084      	sub	sp, #16
 8015452:	af00      	add	r7, sp, #0
 8015454:	60b9      	str	r1, [r7, #8]
 8015456:	607a      	str	r2, [r7, #4]
 8015458:	603b      	str	r3, [r7, #0]
 801545a:	4603      	mov	r3, r0
 801545c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801545e:	7bfb      	ldrb	r3, [r7, #15]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d106      	bne.n	8015472 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	6879      	ldr	r1, [r7, #4]
 8015468:	68b8      	ldr	r0, [r7, #8]
 801546a:	f000 fe09 	bl	8016080 <RegionAS923TxConfig>
 801546e:	4603      	mov	r3, r0
 8015470:	e000      	b.n	8015474 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015472:	2300      	movs	r3, #0
        }
    }
}
 8015474:	4618      	mov	r0, r3
 8015476:	3710      	adds	r7, #16
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b086      	sub	sp, #24
 8015480:	af02      	add	r7, sp, #8
 8015482:	60b9      	str	r1, [r7, #8]
 8015484:	607a      	str	r2, [r7, #4]
 8015486:	603b      	str	r3, [r7, #0]
 8015488:	4603      	mov	r3, r0
 801548a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801548c:	7bfb      	ldrb	r3, [r7, #15]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d109      	bne.n	80154a6 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 8015492:	69fb      	ldr	r3, [r7, #28]
 8015494:	9300      	str	r3, [sp, #0]
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	683a      	ldr	r2, [r7, #0]
 801549a:	6879      	ldr	r1, [r7, #4]
 801549c:	68b8      	ldr	r0, [r7, #8]
 801549e:	f000 fec7 	bl	8016230 <RegionAS923LinkAdrReq>
 80154a2:	4603      	mov	r3, r0
 80154a4:	e000      	b.n	80154a8 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80154a6:	2300      	movs	r3, #0
        }
    }
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3710      	adds	r7, #16
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	4603      	mov	r3, r0
 80154b8:	6039      	str	r1, [r7, #0]
 80154ba:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154bc:	79fb      	ldrb	r3, [r7, #7]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d104      	bne.n	80154cc <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 80154c2:	6838      	ldr	r0, [r7, #0]
 80154c4:	f000 ffe0 	bl	8016488 <RegionAS923RxParamSetupReq>
 80154c8:	4603      	mov	r3, r0
 80154ca:	e000      	b.n	80154ce <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80154cc:	2300      	movs	r3, #0
        }
    }
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80154d6:	b580      	push	{r7, lr}
 80154d8:	b082      	sub	sp, #8
 80154da:	af00      	add	r7, sp, #0
 80154dc:	4603      	mov	r3, r0
 80154de:	6039      	str	r1, [r7, #0]
 80154e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80154e2:	79fb      	ldrb	r3, [r7, #7]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d104      	bne.n	80154f2 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 80154e8:	6838      	ldr	r0, [r7, #0]
 80154ea:	f001 f805 	bl	80164f8 <RegionAS923NewChannelReq>
 80154ee:	4603      	mov	r3, r0
 80154f0:	e000      	b.n	80154f4 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80154f2:	2300      	movs	r3, #0
        }
    }
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3708      	adds	r7, #8
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	4603      	mov	r3, r0
 8015504:	6039      	str	r1, [r7, #0]
 8015506:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015508:	79fb      	ldrb	r3, [r7, #7]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d104      	bne.n	8015518 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 801550e:	6838      	ldr	r0, [r7, #0]
 8015510:	f001 f850 	bl	80165b4 <RegionAS923TxParamSetupReq>
 8015514:	4603      	mov	r3, r0
 8015516:	e000      	b.n	801551a <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015518:	2300      	movs	r3, #0
        }
    }
}
 801551a:	4618      	mov	r0, r3
 801551c:	3708      	adds	r7, #8
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}

08015522 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015522:	b580      	push	{r7, lr}
 8015524:	b082      	sub	sp, #8
 8015526:	af00      	add	r7, sp, #0
 8015528:	4603      	mov	r3, r0
 801552a:	6039      	str	r1, [r7, #0]
 801552c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801552e:	79fb      	ldrb	r3, [r7, #7]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d104      	bne.n	801553e <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8015534:	6838      	ldr	r0, [r7, #0]
 8015536:	f001 f849 	bl	80165cc <RegionAS923DlChannelReq>
 801553a:	4603      	mov	r3, r0
 801553c:	e000      	b.n	8015540 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801553e:	2300      	movs	r3, #0
        }
    }
}
 8015540:	4618      	mov	r0, r3
 8015542:	3708      	adds	r7, #8
 8015544:	46bd      	mov	sp, r7
 8015546:	bd80      	pop	{r7, pc}

08015548 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b082      	sub	sp, #8
 801554c:	af00      	add	r7, sp, #0
 801554e:	4603      	mov	r3, r0
 8015550:	71fb      	strb	r3, [r7, #7]
 8015552:	460b      	mov	r3, r1
 8015554:	71bb      	strb	r3, [r7, #6]
 8015556:	4613      	mov	r3, r2
 8015558:	717b      	strb	r3, [r7, #5]
    switch( region )
 801555a:	79fb      	ldrb	r3, [r7, #7]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d108      	bne.n	8015572 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8015560:	797a      	ldrb	r2, [r7, #5]
 8015562:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015566:	4611      	mov	r1, r2
 8015568:	4618      	mov	r0, r3
 801556a:	f001 f875 	bl	8016658 <RegionAS923AlternateDr>
 801556e:	4603      	mov	r3, r0
 8015570:	e000      	b.n	8015574 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015572:	2300      	movs	r3, #0
        }
    }
}
 8015574:	4618      	mov	r0, r3
 8015576:	3708      	adds	r7, #8
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	60b9      	str	r1, [r7, #8]
 8015584:	607a      	str	r2, [r7, #4]
 8015586:	603b      	str	r3, [r7, #0]
 8015588:	4603      	mov	r3, r0
 801558a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801558c:	7bfb      	ldrb	r3, [r7, #15]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d107      	bne.n	80155a2 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 8015592:	69bb      	ldr	r3, [r7, #24]
 8015594:	683a      	ldr	r2, [r7, #0]
 8015596:	6879      	ldr	r1, [r7, #4]
 8015598:	68b8      	ldr	r0, [r7, #8]
 801559a:	f001 f86d 	bl	8016678 <RegionAS923NextChannel>
 801559e:	4603      	mov	r3, r0
 80155a0:	e000      	b.n	80155a4 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80155a2:	2309      	movs	r3, #9
        }
    }
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3710      	adds	r7, #16
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b082      	sub	sp, #8
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	6039      	str	r1, [r7, #0]
 80155b6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80155b8:	79fb      	ldrb	r3, [r7, #7]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d103      	bne.n	80155c6 <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 80155be:	6838      	ldr	r0, [r7, #0]
 80155c0:	f001 f9d4 	bl	801696c <RegionAS923SetContinuousWave>
 80155c4:	e000      	b.n	80155c8 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80155c6:	bf00      	nop
        }
    }
}
 80155c8:	bf00      	nop
 80155ca:	3708      	adds	r7, #8
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80155d0:	b590      	push	{r4, r7, lr}
 80155d2:	b083      	sub	sp, #12
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	4604      	mov	r4, r0
 80155d8:	4608      	mov	r0, r1
 80155da:	4611      	mov	r1, r2
 80155dc:	461a      	mov	r2, r3
 80155de:	4623      	mov	r3, r4
 80155e0:	71fb      	strb	r3, [r7, #7]
 80155e2:	4603      	mov	r3, r0
 80155e4:	71bb      	strb	r3, [r7, #6]
 80155e6:	460b      	mov	r3, r1
 80155e8:	717b      	strb	r3, [r7, #5]
 80155ea:	4613      	mov	r3, r2
 80155ec:	713b      	strb	r3, [r7, #4]
    switch( region )
 80155ee:	79fb      	ldrb	r3, [r7, #7]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d109      	bne.n	8015608 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 80155f4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80155f8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80155fc:	79bb      	ldrb	r3, [r7, #6]
 80155fe:	4618      	mov	r0, r3
 8015600:	f001 fa08 	bl	8016a14 <RegionAS923ApplyDrOffset>
 8015604:	4603      	mov	r3, r0
 8015606:	e000      	b.n	801560a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015608:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801560a:	4618      	mov	r0, r3
 801560c:	370c      	adds	r7, #12
 801560e:	46bd      	mov	sp, r7
 8015610:	bd90      	pop	{r4, r7, pc}
	...

08015614 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015614:	b480      	push	{r7}
 8015616:	b083      	sub	sp, #12
 8015618:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801561a:	4b04      	ldr	r3, [pc, #16]	@ (801562c <RegionGetVersion+0x18>)
 801561c:	607b      	str	r3, [r7, #4]

    return version;
 801561e:	687b      	ldr	r3, [r7, #4]
}
 8015620:	4618      	mov	r0, r3
 8015622:	370c      	adds	r7, #12
 8015624:	46bd      	mov	sp, r7
 8015626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562a:	4770      	bx	lr
 801562c:	01010003 	.word	0x01010003

08015630 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015638:	4b0d      	ldr	r3, [pc, #52]	@ (8015670 <VerifyRfFreq+0x40>)
 801563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	4798      	blx	r3
 8015640:	4603      	mov	r3, r0
 8015642:	f083 0301 	eor.w	r3, r3, #1
 8015646:	b2db      	uxtb	r3, r3
 8015648:	2b00      	cmp	r3, #0
 801564a:	d001      	beq.n	8015650 <VerifyRfFreq+0x20>
    {
        return false;
 801564c:	2300      	movs	r3, #0
 801564e:	e00a      	b.n	8015666 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	4a08      	ldr	r2, [pc, #32]	@ (8015674 <VerifyRfFreq+0x44>)
 8015654:	4293      	cmp	r3, r2
 8015656:	d903      	bls.n	8015660 <VerifyRfFreq+0x30>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	4a07      	ldr	r2, [pc, #28]	@ (8015678 <VerifyRfFreq+0x48>)
 801565c:	4293      	cmp	r3, r2
 801565e:	d901      	bls.n	8015664 <VerifyRfFreq+0x34>
    {
        return false;
 8015660:	2300      	movs	r3, #0
 8015662:	e000      	b.n	8015666 <VerifyRfFreq+0x36>
    }
    return true;
 8015664:	2301      	movs	r3, #1
}
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}
 801566e:	bf00      	nop
 8015670:	08022c78 	.word	0x08022c78
 8015674:	3689cabf 	.word	0x3689cabf
 8015678:	37502800 	.word	0x37502800

0801567c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801567c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015680:	b086      	sub	sp, #24
 8015682:	af00      	add	r7, sp, #0
 8015684:	4603      	mov	r3, r0
 8015686:	460a      	mov	r2, r1
 8015688:	71fb      	strb	r3, [r7, #7]
 801568a:	4613      	mov	r3, r2
 801568c:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 801568e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015692:	4a1b      	ldr	r2, [pc, #108]	@ (8015700 <GetTimeOnAir+0x84>)
 8015694:	5cd3      	ldrb	r3, [r2, r3]
 8015696:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8015698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801569c:	4919      	ldr	r1, [pc, #100]	@ (8015704 <GetTimeOnAir+0x88>)
 801569e:	4618      	mov	r0, r3
 80156a0:	f002 f988 	bl	80179b4 <RegionCommonGetBandwidth>
 80156a4:	60b8      	str	r0, [r7, #8]
    TimerTime_t timeOnAir = 0;
 80156a6:	f04f 0200 	mov.w	r2, #0
 80156aa:	f04f 0300 	mov.w	r3, #0
 80156ae:	e9c7 2304 	strd	r2, r3, [r7, #16]

    if( datarate == DR_7 )
 80156b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156b6:	2b07      	cmp	r3, #7
 80156b8:	d10d      	bne.n	80156d6 <GetTimeOnAir+0x5a>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, pktLen );
 80156ba:	4b13      	ldr	r3, [pc, #76]	@ (8015708 <GetTimeOnAir+0x8c>)
 80156bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156be:	88ba      	ldrh	r2, [r7, #4]
 80156c0:	b2d2      	uxtb	r2, r2
 80156c2:	4611      	mov	r1, r2
 80156c4:	2000      	movs	r0, #0
 80156c6:	4798      	blx	r3
 80156c8:	4603      	mov	r3, r0
 80156ca:	2200      	movs	r2, #0
 80156cc:	4698      	mov	r8, r3
 80156ce:	4691      	mov	r9, r2
 80156d0:	e9c7 8904 	strd	r8, r9, [r7, #16]
 80156d4:	e00c      	b.n	80156f0 <GetTimeOnAir+0x74>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, pktLen );
 80156d6:	4b0c      	ldr	r3, [pc, #48]	@ (8015708 <GetTimeOnAir+0x8c>)
 80156d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80156da:	88ba      	ldrh	r2, [r7, #4]
 80156dc:	b2d2      	uxtb	r2, r2
 80156de:	4611      	mov	r1, r2
 80156e0:	2001      	movs	r0, #1
 80156e2:	4798      	blx	r3
 80156e4:	4603      	mov	r3, r0
 80156e6:	2200      	movs	r2, #0
 80156e8:	461c      	mov	r4, r3
 80156ea:	4615      	mov	r5, r2
 80156ec:	e9c7 4504 	strd	r4, r5, [r7, #16]
    }
    return timeOnAir;
 80156f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80156f4:	4610      	mov	r0, r2
 80156f6:	4619      	mov	r1, r3
 80156f8:	3718      	adds	r7, #24
 80156fa:	46bd      	mov	sp, r7
 80156fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8015700:	08022c30 	.word	0x08022c30
 8015704:	08022c38 	.word	0x08022c38
 8015708:	08022c78 	.word	0x08022c78

0801570c <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b088      	sub	sp, #32
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
    PhyParam_t phyParam = { 0 };
 8015716:	f107 0318 	add.w	r3, r7, #24
 801571a:	2200      	movs	r2, #0
 801571c:	601a      	str	r2, [r3, #0]
 801571e:	605a      	str	r2, [r3, #4]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	3b01      	subs	r3, #1
 8015726:	2b38      	cmp	r3, #56	@ 0x38
 8015728:	f200 814e 	bhi.w	80159c8 <RegionAS923GetPhyParam+0x2bc>
 801572c:	a201      	add	r2, pc, #4	@ (adr r2, 8015734 <RegionAS923GetPhyParam+0x28>)
 801572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015732:	bf00      	nop
 8015734:	08015819 	.word	0x08015819
 8015738:	0801582d 	.word	0x0801582d
 801573c:	080159c9 	.word	0x080159c9
 8015740:	080159c9 	.word	0x080159c9
 8015744:	080159c9 	.word	0x080159c9
 8015748:	08015841 	.word	0x08015841
 801574c:	080159c9 	.word	0x080159c9
 8015750:	0801587b 	.word	0x0801587b
 8015754:	080159c9 	.word	0x080159c9
 8015758:	08015881 	.word	0x08015881
 801575c:	08015887 	.word	0x08015887
 8015760:	0801588d 	.word	0x0801588d
 8015764:	08015893 	.word	0x08015893
 8015768:	080158bb 	.word	0x080158bb
 801576c:	080158e3 	.word	0x080158e3
 8015770:	080158e9 	.word	0x080158e9
 8015774:	080158f1 	.word	0x080158f1
 8015778:	080158f9 	.word	0x080158f9
 801577c:	08015901 	.word	0x08015901
 8015780:	08015909 	.word	0x08015909
 8015784:	08015911 	.word	0x08015911
 8015788:	08015919 	.word	0x08015919
 801578c:	0801592d 	.word	0x0801592d
 8015790:	08015933 	.word	0x08015933
 8015794:	08015939 	.word	0x08015939
 8015798:	0801593f 	.word	0x0801593f
 801579c:	0801594b 	.word	0x0801594b
 80157a0:	08015957 	.word	0x08015957
 80157a4:	0801595d 	.word	0x0801595d
 80157a8:	08015965 	.word	0x08015965
 80157ac:	0801596b 	.word	0x0801596b
 80157b0:	08015971 	.word	0x08015971
 80157b4:	08015979 	.word	0x08015979
 80157b8:	08015847 	.word	0x08015847
 80157bc:	080159c9 	.word	0x080159c9
 80157c0:	080159c9 	.word	0x080159c9
 80157c4:	080159c9 	.word	0x080159c9
 80157c8:	080159c9 	.word	0x080159c9
 80157cc:	080159c9 	.word	0x080159c9
 80157d0:	080159c9 	.word	0x080159c9
 80157d4:	080159c9 	.word	0x080159c9
 80157d8:	080159c9 	.word	0x080159c9
 80157dc:	080159c9 	.word	0x080159c9
 80157e0:	080159c9 	.word	0x080159c9
 80157e4:	080159c9 	.word	0x080159c9
 80157e8:	080159c9 	.word	0x080159c9
 80157ec:	080159c9 	.word	0x080159c9
 80157f0:	0801597f 	.word	0x0801597f
 80157f4:	08015985 	.word	0x08015985
 80157f8:	08015993 	.word	0x08015993
 80157fc:	080159c9 	.word	0x080159c9
 8015800:	080159c9 	.word	0x080159c9
 8015804:	08015999 	.word	0x08015999
 8015808:	0801599f 	.word	0x0801599f
 801580c:	080159c9 	.word	0x080159c9
 8015810:	080159a5 	.word	0x080159a5
 8015814:	080159b5 	.word	0x080159b5
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	78db      	ldrb	r3, [r3, #3]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d102      	bne.n	8015826 <RegionAS923GetPhyParam+0x11a>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8015820:	2300      	movs	r3, #0
 8015822:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015824:	e0d1      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8015826:	2300      	movs	r3, #0
 8015828:	61bb      	str	r3, [r7, #24]
            break;
 801582a:	e0ce      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	789b      	ldrb	r3, [r3, #2]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d102      	bne.n	801583a <RegionAS923GetPhyParam+0x12e>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8015834:	2300      	movs	r3, #0
 8015836:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015838:	e0c7      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801583a:	2300      	movs	r3, #0
 801583c:	61bb      	str	r3, [r7, #24]
            break;
 801583e:	e0c4      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8015840:	2302      	movs	r3, #2
 8015842:	61bb      	str	r3, [r7, #24]
            break;
 8015844:	e0c1      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801584c:	733b      	strb	r3, [r7, #12]
 801584e:	2307      	movs	r3, #7
 8015850:	737b      	strb	r3, [r7, #13]
 8015852:	2300      	movs	r3, #0
 8015854:	73bb      	strb	r3, [r7, #14]
 8015856:	2310      	movs	r3, #16
 8015858:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801585a:	4b62      	ldr	r3, [pc, #392]	@ (80159e4 <RegionAS923GetPhyParam+0x2d8>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015862:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015864:	4b5f      	ldr	r3, [pc, #380]	@ (80159e4 <RegionAS923GetPhyParam+0x2d8>)
 8015866:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015868:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801586a:	f107 030c 	add.w	r3, r7, #12
 801586e:	4618      	mov	r0, r3
 8015870:	f002 f84c 	bl	801790c <RegionCommonGetNextLowerTxDr>
 8015874:	4603      	mov	r3, r0
 8015876:	61bb      	str	r3, [r7, #24]
            break;
 8015878:	e0a7      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 801587a:	2300      	movs	r3, #0
 801587c:	61bb      	str	r3, [r7, #24]
            break;
 801587e:	e0a4      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8015880:	2300      	movs	r3, #0
 8015882:	61bb      	str	r3, [r7, #24]
            break;
 8015884:	e0a1      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015886:	2340      	movs	r3, #64	@ 0x40
 8015888:	61bb      	str	r3, [r7, #24]
            break;
 801588a:	e09e      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801588c:	2320      	movs	r3, #32
 801588e:	61bb      	str	r3, [r7, #24]
            break;
 8015890:	e09b      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	789b      	ldrb	r3, [r3, #2]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d107      	bne.n	80158aa <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158a0:	461a      	mov	r2, r3
 80158a2:	4b51      	ldr	r3, [pc, #324]	@ (80159e8 <RegionAS923GetPhyParam+0x2dc>)
 80158a4:	5c9b      	ldrb	r3, [r3, r2]
 80158a6:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80158a8:	e08f      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158b0:	461a      	mov	r2, r3
 80158b2:	4b4e      	ldr	r3, [pc, #312]	@ (80159ec <RegionAS923GetPhyParam+0x2e0>)
 80158b4:	5c9b      	ldrb	r3, [r3, r2]
 80158b6:	61bb      	str	r3, [r7, #24]
            break;
 80158b8:	e087      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	789b      	ldrb	r3, [r3, #2]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d107      	bne.n	80158d2 <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80158c2:	683b      	ldr	r3, [r7, #0]
 80158c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158c8:	461a      	mov	r2, r3
 80158ca:	4b49      	ldr	r3, [pc, #292]	@ (80159f0 <RegionAS923GetPhyParam+0x2e4>)
 80158cc:	5c9b      	ldrb	r3, [r3, r2]
 80158ce:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80158d0:	e07b      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80158d8:	461a      	mov	r2, r3
 80158da:	4b44      	ldr	r3, [pc, #272]	@ (80159ec <RegionAS923GetPhyParam+0x2e0>)
 80158dc:	5c9b      	ldrb	r3, [r3, r2]
 80158de:	61bb      	str	r3, [r7, #24]
            break;
 80158e0:	e073      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 80158e2:	2300      	movs	r3, #0
 80158e4:	61bb      	str	r3, [r7, #24]
            break;
 80158e6:	e070      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 80158e8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80158ec:	61bb      	str	r3, [r7, #24]
            break;
 80158ee:	e06c      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80158f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80158f4:	61bb      	str	r3, [r7, #24]
            break;
 80158f6:	e068      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80158f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80158fc:	61bb      	str	r3, [r7, #24]
            break;
 80158fe:	e064      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015900:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015904:	61bb      	str	r3, [r7, #24]
            break;
 8015906:	e060      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015908:	f241 7370 	movw	r3, #6000	@ 0x1770
 801590c:	61bb      	str	r3, [r7, #24]
            break;
 801590e:	e05c      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8015910:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015914:	61bb      	str	r3, [r7, #24]
            break;
 8015916:	e058      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015918:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801591c:	4835      	ldr	r0, [pc, #212]	@ (80159f4 <RegionAS923GetPhyParam+0x2e8>)
 801591e:	f004 fb5d 	bl	8019fdc <randr>
 8015922:	4603      	mov	r3, r0
 8015924:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8015928:	61bb      	str	r3, [r7, #24]
            break;
 801592a:	e04e      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801592c:	2300      	movs	r3, #0
 801592e:	61bb      	str	r3, [r7, #24]
            break;
 8015930:	e04b      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8015932:	4b31      	ldr	r3, [pc, #196]	@ (80159f8 <RegionAS923GetPhyParam+0x2ec>)
 8015934:	61bb      	str	r3, [r7, #24]
            break;
 8015936:	e048      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8015938:	2302      	movs	r3, #2
 801593a:	61bb      	str	r3, [r7, #24]
            break;
 801593c:	e045      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801593e:	4b29      	ldr	r3, [pc, #164]	@ (80159e4 <RegionAS923GetPhyParam+0x2d8>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015946:	61bb      	str	r3, [r7, #24]
            break;
 8015948:	e03f      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801594a:	4b26      	ldr	r3, [pc, #152]	@ (80159e4 <RegionAS923GetPhyParam+0x2d8>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8015952:	61bb      	str	r3, [r7, #24]
            break;
 8015954:	e039      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8015956:	2310      	movs	r3, #16
 8015958:	61bb      	str	r3, [r7, #24]
            break;
 801595a:	e036      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801595c:	4b21      	ldr	r3, [pc, #132]	@ (80159e4 <RegionAS923GetPhyParam+0x2d8>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	61bb      	str	r3, [r7, #24]
            break;
 8015962:	e032      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015964:	2301      	movs	r3, #1
 8015966:	61bb      	str	r3, [r7, #24]
            break;
 8015968:	e02f      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 801596a:	2301      	movs	r3, #1
 801596c:	61bb      	str	r3, [r7, #24]
            break;
 801596e:	e02c      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8015970:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015974:	61bb      	str	r3, [r7, #24]
            break;
 8015976:	e028      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8015978:	4b20      	ldr	r3, [pc, #128]	@ (80159fc <RegionAS923GetPhyParam+0x2f0>)
 801597a:	61bb      	str	r3, [r7, #24]
            break;
 801597c:	e025      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 801597e:	4b20      	ldr	r3, [pc, #128]	@ (8015a00 <RegionAS923GetPhyParam+0x2f4>)
 8015980:	61bb      	str	r3, [r7, #24]
            break;
 8015982:	e022      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8015984:	2311      	movs	r3, #17
 8015986:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8015988:	2302      	movs	r3, #2
 801598a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 801598c:	2300      	movs	r3, #0
 801598e:	76bb      	strb	r3, [r7, #26]
            break;
 8015990:	e01b      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8015992:	2303      	movs	r3, #3
 8015994:	61bb      	str	r3, [r7, #24]
            break;
 8015996:	e018      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 8015998:	4b19      	ldr	r3, [pc, #100]	@ (8015a00 <RegionAS923GetPhyParam+0x2f4>)
 801599a:	61bb      	str	r3, [r7, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
#endif /* REGION_VERSION */
            break;
 801599c:	e015      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 801599e:	2303      	movs	r3, #3
 80159a0:	61bb      	str	r3, [r7, #24]
            break;
 80159a2:	e012      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159aa:	461a      	mov	r2, r3
 80159ac:	4b15      	ldr	r3, [pc, #84]	@ (8015a04 <RegionAS923GetPhyParam+0x2f8>)
 80159ae:	5c9b      	ldrb	r3, [r3, r2]
 80159b0:	61bb      	str	r3, [r7, #24]
            break;
 80159b2:	e00a      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159ba:	4913      	ldr	r1, [pc, #76]	@ (8015a08 <RegionAS923GetPhyParam+0x2fc>)
 80159bc:	4618      	mov	r0, r3
 80159be:	f001 fff9 	bl	80179b4 <RegionCommonGetBandwidth>
 80159c2:	4603      	mov	r3, r0
 80159c4:	61bb      	str	r3, [r7, #24]
            break;
 80159c6:	e000      	b.n	80159ca <RegionAS923GetPhyParam+0x2be>
        }
        default:
        {
            break;
 80159c8:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	461a      	mov	r2, r3
 80159ce:	f107 0318 	add.w	r3, r7, #24
 80159d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80159d6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80159da:	6878      	ldr	r0, [r7, #4]
 80159dc:	3720      	adds	r7, #32
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	2000c928 	.word	0x2000c928
 80159e8:	08022c58 	.word	0x08022c58
 80159ec:	08022c68 	.word	0x08022c68
 80159f0:	08022c60 	.word	0x08022c60
 80159f4:	fffffc18 	.word	0xfffffc18
 80159f8:	3706ea00 	.word	0x3706ea00
 80159fc:	4009999a 	.word	0x4009999a
 8015a00:	3709f740 	.word	0x3709f740
 8015a04:	08022c30 	.word	0x08022c30
 8015a08:	08022c38 	.word	0x08022c38

08015a0c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a0e:	b087      	sub	sp, #28
 8015a10:	af04      	add	r7, sp, #16
 8015a12:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015a14:	4b13      	ldr	r3, [pc, #76]	@ (8015a64 <RegionAS923SetBandTxDone+0x58>)
 8015a16:	681a      	ldr	r2, [r3, #0]
 8015a18:	4b13      	ldr	r3, [pc, #76]	@ (8015a68 <RegionAS923SetBandTxDone+0x5c>)
 8015a1a:	6819      	ldr	r1, [r3, #0]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	4618      	mov	r0, r3
 8015a22:	4603      	mov	r3, r0
 8015a24:	005b      	lsls	r3, r3, #1
 8015a26:	4403      	add	r3, r0
 8015a28:	009b      	lsls	r3, r3, #2
 8015a2a:	440b      	add	r3, r1
 8015a2c:	3309      	adds	r3, #9
 8015a2e:	781b      	ldrb	r3, [r3, #0]
 8015a30:	4619      	mov	r1, r3
 8015a32:	460b      	mov	r3, r1
 8015a34:	005b      	lsls	r3, r3, #1
 8015a36:	440b      	add	r3, r1
 8015a38:	011b      	lsls	r3, r3, #4
 8015a3a:	18d5      	adds	r5, r2, r3
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8015a42:	6879      	ldr	r1, [r7, #4]
 8015a44:	784c      	ldrb	r4, [r1, #1]
 8015a46:	6879      	ldr	r1, [r7, #4]
 8015a48:	ae01      	add	r6, sp, #4
 8015a4a:	3118      	adds	r1, #24
 8015a4c:	c903      	ldmia	r1, {r0, r1}
 8015a4e:	e886 0003 	stmia.w	r6, {r0, r1}
 8015a52:	9400      	str	r4, [sp, #0]
 8015a54:	4628      	mov	r0, r5
 8015a56:	f001 faac 	bl	8016fb2 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 8015a5a:	bf00      	nop
 8015a5c:	370c      	adds	r7, #12
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a62:	bf00      	nop
 8015a64:	2000c924 	.word	0x2000c924
 8015a68:	2000c928 	.word	0x2000c928

08015a6c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b094      	sub	sp, #80	@ 0x50
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8015a74:	2364      	movs	r3, #100	@ 0x64
 8015a76:	843b      	strh	r3, [r7, #32]
 8015a78:	2300      	movs	r3, #0
 8015a7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015a7e:	f04f 0200 	mov.w	r2, #0
 8015a82:	f04f 0300 	mov.w	r3, #0
 8015a86:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8015a8a:	f04f 0200 	mov.w	r2, #0
 8015a8e:	f04f 0300 	mov.w	r3, #0
 8015a92:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8015a96:	f04f 0200 	mov.w	r2, #0
 8015a9a:	f04f 0300 	mov.w	r3, #0
 8015a9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8015aa2:	f04f 0200 	mov.w	r2, #0
 8015aa6:	f04f 0300 	mov.w	r3, #0
 8015aaa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8015aae:	2300      	movs	r3, #0
 8015ab0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    {
        AS923_BAND0
    };

    switch( params->Type )
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	7a1b      	ldrb	r3, [r3, #8]
 8015ab8:	2b02      	cmp	r3, #2
 8015aba:	d05f      	beq.n	8015b7c <RegionAS923InitDefaults+0x110>
 8015abc:	2b02      	cmp	r3, #2
 8015abe:	dc6c      	bgt.n	8015b9a <RegionAS923InitDefaults+0x12e>
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d002      	beq.n	8015aca <RegionAS923InitDefaults+0x5e>
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d044      	beq.n	8015b52 <RegionAS923InitDefaults+0xe6>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015ac8:	e067      	b.n	8015b9a <RegionAS923InitDefaults+0x12e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d064      	beq.n	8015b9c <RegionAS923InitDefaults+0x130>
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d060      	beq.n	8015b9c <RegionAS923InitDefaults+0x130>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	4a31      	ldr	r2, [pc, #196]	@ (8015ba4 <RegionAS923InitDefaults+0x138>)
 8015ae0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	4a30      	ldr	r2, [pc, #192]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015ae8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8015aea:	4b2e      	ldr	r3, [pc, #184]	@ (8015ba4 <RegionAS923InitDefaults+0x138>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	4618      	mov	r0, r3
 8015af0:	f107 0320 	add.w	r3, r7, #32
 8015af4:	2230      	movs	r2, #48	@ 0x30
 8015af6:	4619      	mov	r1, r3
 8015af8:	f004 fa87 	bl	801a00a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8015afc:	4b2a      	ldr	r3, [pc, #168]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	4a2a      	ldr	r2, [pc, #168]	@ (8015bac <RegionAS923InitDefaults+0x140>)
 8015b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8015b08:	4b27      	ldr	r3, [pc, #156]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	4a28      	ldr	r2, [pc, #160]	@ (8015bb0 <RegionAS923InitDefaults+0x144>)
 8015b0e:	330c      	adds	r3, #12
 8015b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8015b16:	4b24      	ldr	r3, [pc, #144]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b18:	681a      	ldr	r2, [r3, #0]
 8015b1a:	4b23      	ldr	r3, [pc, #140]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	6812      	ldr	r2, [r2, #0]
 8015b20:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8015b22:	4b21      	ldr	r3, [pc, #132]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b24:	681a      	ldr	r2, [r3, #0]
 8015b26:	4b20      	ldr	r3, [pc, #128]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	68d2      	ldr	r2, [r2, #12]
 8015b2c:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8015b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	2203      	movs	r2, #3
 8015b34:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015b38:	4b1b      	ldr	r3, [pc, #108]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015b40:	4b19      	ldr	r3, [pc, #100]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8015b48:	2201      	movs	r2, #1
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	f001 fa0a 	bl	8016f64 <RegionCommonChanMaskCopy>
 8015b50:	e024      	b.n	8015b9c <RegionAS923InitDefaults+0x130>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015b52:	4b15      	ldr	r3, [pc, #84]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	2200      	movs	r2, #0
 8015b58:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015b5a:	4b13      	ldr	r3, [pc, #76]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015b62:	4b11      	ldr	r3, [pc, #68]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8015b72:	2201      	movs	r2, #1
 8015b74:	4619      	mov	r1, r3
 8015b76:	f001 f9f5 	bl	8016f64 <RegionCommonChanMaskCopy>
            break;
 8015b7a:	e00f      	b.n	8015b9c <RegionAS923InitDefaults+0x130>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 8015b84:	4b08      	ldr	r3, [pc, #32]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 8015b8c:	4b06      	ldr	r3, [pc, #24]	@ (8015ba8 <RegionAS923InitDefaults+0x13c>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	430a      	orrs	r2, r1
 8015b92:	b292      	uxth	r2, r2
 8015b94:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 8015b98:	e000      	b.n	8015b9c <RegionAS923InitDefaults+0x130>
            break;
 8015b9a:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015b9c:	3750      	adds	r7, #80	@ 0x50
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	2000c924 	.word	0x2000c924
 8015ba8:	2000c928 	.word	0x2000c928
 8015bac:	080224a8 	.word	0x080224a8
 8015bb0:	080224b4 	.word	0x080224b4

08015bb4 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b082      	sub	sp, #8
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	460b      	mov	r3, r1
 8015bbe:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8015bc0:	78fb      	ldrb	r3, [r7, #3]
 8015bc2:	2b0f      	cmp	r3, #15
 8015bc4:	f200 808f 	bhi.w	8015ce6 <RegionAS923Verify+0x132>
 8015bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8015bd0 <RegionAS923Verify+0x1c>)
 8015bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bce:	bf00      	nop
 8015bd0:	08015c11 	.word	0x08015c11
 8015bd4:	08015ce7 	.word	0x08015ce7
 8015bd8:	08015ce7 	.word	0x08015ce7
 8015bdc:	08015ce7 	.word	0x08015ce7
 8015be0:	08015ce7 	.word	0x08015ce7
 8015be4:	08015c1f 	.word	0x08015c1f
 8015be8:	08015c63 	.word	0x08015c63
 8015bec:	08015c81 	.word	0x08015c81
 8015bf0:	08015ce7 	.word	0x08015ce7
 8015bf4:	08015cc5 	.word	0x08015cc5
 8015bf8:	08015cc5 	.word	0x08015cc5
 8015bfc:	08015ce7 	.word	0x08015ce7
 8015c00:	08015ce7 	.word	0x08015ce7
 8015c04:	08015ce7 	.word	0x08015ce7
 8015c08:	08015ce7 	.word	0x08015ce7
 8015c0c:	08015ce3 	.word	0x08015ce3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	4618      	mov	r0, r3
 8015c16:	f7ff fd0b 	bl	8015630 <VerifyRfFreq>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	e064      	b.n	8015ce8 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	789b      	ldrb	r3, [r3, #2]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d10e      	bne.n	8015c44 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f993 3000 	ldrsb.w	r3, [r3]
 8015c2c:	2207      	movs	r2, #7
 8015c2e:	2100      	movs	r1, #0
 8015c30:	4618      	mov	r0, r3
 8015c32:	f001 f918 	bl	8016e66 <RegionCommonValueInRange>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	bf14      	ite	ne
 8015c3c:	2301      	movne	r3, #1
 8015c3e:	2300      	moveq	r3, #0
 8015c40:	b2db      	uxtb	r3, r3
 8015c42:	e051      	b.n	8015ce8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f993 3000 	ldrsb.w	r3, [r3]
 8015c4a:	2207      	movs	r2, #7
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f001 f909 	bl	8016e66 <RegionCommonValueInRange>
 8015c54:	4603      	mov	r3, r0
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	bf14      	ite	ne
 8015c5a:	2301      	movne	r3, #1
 8015c5c:	2300      	moveq	r3, #0
 8015c5e:	b2db      	uxtb	r3, r3
 8015c60:	e042      	b.n	8015ce8 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f993 3000 	ldrsb.w	r3, [r3]
 8015c68:	2205      	movs	r2, #5
 8015c6a:	2100      	movs	r1, #0
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f001 f8fa 	bl	8016e66 <RegionCommonValueInRange>
 8015c72:	4603      	mov	r3, r0
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	bf14      	ite	ne
 8015c78:	2301      	movne	r3, #1
 8015c7a:	2300      	moveq	r3, #0
 8015c7c:	b2db      	uxtb	r3, r3
 8015c7e:	e033      	b.n	8015ce8 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	785b      	ldrb	r3, [r3, #1]
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d10e      	bne.n	8015ca6 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8015c8e:	2207      	movs	r2, #7
 8015c90:	2100      	movs	r1, #0
 8015c92:	4618      	mov	r0, r3
 8015c94:	f001 f8e7 	bl	8016e66 <RegionCommonValueInRange>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	bf14      	ite	ne
 8015c9e:	2301      	movne	r3, #1
 8015ca0:	2300      	moveq	r3, #0
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	e020      	b.n	8015ce8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8015cac:	2207      	movs	r2, #7
 8015cae:	2100      	movs	r1, #0
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f001 f8d8 	bl	8016e66 <RegionCommonValueInRange>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	bf14      	ite	ne
 8015cbc:	2301      	movne	r3, #1
 8015cbe:	2300      	moveq	r3, #0
 8015cc0:	b2db      	uxtb	r3, r3
 8015cc2:	e011      	b.n	8015ce8 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8015cca:	2207      	movs	r2, #7
 8015ccc:	2100      	movs	r1, #0
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f001 f8c9 	bl	8016e66 <RegionCommonValueInRange>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	bf14      	ite	ne
 8015cda:	2301      	movne	r3, #1
 8015cdc:	2300      	moveq	r3, #0
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	e002      	b.n	8015ce8 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	e000      	b.n	8015ce8 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 8015ce6:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3708      	adds	r7, #8
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}

08015cf0 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b08a      	sub	sp, #40	@ 0x28
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015cf8:	2350      	movs	r3, #80	@ 0x50
 8015cfa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	791b      	ldrb	r3, [r3, #4]
 8015d02:	2b10      	cmp	r3, #16
 8015d04:	d162      	bne.n	8015dcc <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	330f      	adds	r3, #15
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d15e      	bne.n	8015dd0 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015d12:	2300      	movs	r3, #0
 8015d14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d18:	2302      	movs	r3, #2
 8015d1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015d1e:	e050      	b.n	8015dc2 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8015d20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d24:	2b06      	cmp	r3, #6
 8015d26:	d824      	bhi.n	8015d72 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d30:	4413      	add	r3, r2
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015d36:	69ba      	ldr	r2, [r7, #24]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	6819      	ldr	r1, [r3, #0]
 8015d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d40:	3301      	adds	r3, #1
 8015d42:	440b      	add	r3, r1
 8015d44:	781b      	ldrb	r3, [r3, #0]
 8015d46:	021b      	lsls	r3, r3, #8
 8015d48:	4313      	orrs	r3, r2
 8015d4a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015d4c:	69ba      	ldr	r2, [r7, #24]
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6819      	ldr	r1, [r3, #0]
 8015d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d56:	3302      	adds	r3, #2
 8015d58:	440b      	add	r3, r1
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	041b      	lsls	r3, r3, #16
 8015d5e:	4313      	orrs	r3, r2
 8015d60:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015d62:	69bb      	ldr	r3, [r7, #24]
 8015d64:	2264      	movs	r2, #100	@ 0x64
 8015d66:	fb02 f303 	mul.w	r3, r2, r3
 8015d6a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	61fb      	str	r3, [r7, #28]
 8015d70:	e006      	b.n	8015d80 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015d72:	2300      	movs	r3, #0
 8015d74:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015d80:	69bb      	ldr	r3, [r7, #24]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d00b      	beq.n	8015d9e <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015d86:	f107 0318 	add.w	r3, r7, #24
 8015d8a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015d8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d90:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8015d92:	f107 0310 	add.w	r3, r7, #16
 8015d96:	4618      	mov	r0, r3
 8015d98:	f000 fd22 	bl	80167e0 <RegionAS923ChannelAdd>
 8015d9c:	e007      	b.n	8015dae <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015da2:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8015da4:	f107 030c 	add.w	r3, r7, #12
 8015da8:	4618      	mov	r0, r3
 8015daa:	f000 fdb5 	bl	8016918 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015db2:	3303      	adds	r3, #3
 8015db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015db8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dc6:	2b0f      	cmp	r3, #15
 8015dc8:	d9aa      	bls.n	8015d20 <RegionAS923ApplyCFList+0x30>
 8015dca:	e002      	b.n	8015dd2 <RegionAS923ApplyCFList+0xe2>
        return;
 8015dcc:	bf00      	nop
 8015dce:	e000      	b.n	8015dd2 <RegionAS923ApplyCFList+0xe2>
        return;
 8015dd0:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015dd2:	3728      	adds	r7, #40	@ 0x28
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}

08015dd8 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b082      	sub	sp, #8
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	791b      	ldrb	r3, [r3, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d002      	beq.n	8015dee <RegionAS923ChanMaskSet+0x16>
 8015de8:	2b01      	cmp	r3, #1
 8015dea:	d00b      	beq.n	8015e04 <RegionAS923ChanMaskSet+0x2c>
 8015dec:	e015      	b.n	8015e1a <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015dee:	4b0e      	ldr	r3, [pc, #56]	@ (8015e28 <RegionAS923ChanMaskSet+0x50>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	2201      	movs	r2, #1
 8015dfc:	4619      	mov	r1, r3
 8015dfe:	f001 f8b1 	bl	8016f64 <RegionCommonChanMaskCopy>
            break;
 8015e02:	e00c      	b.n	8015e1e <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015e04:	4b08      	ldr	r3, [pc, #32]	@ (8015e28 <RegionAS923ChanMaskSet+0x50>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	2201      	movs	r2, #1
 8015e12:	4619      	mov	r1, r3
 8015e14:	f001 f8a6 	bl	8016f64 <RegionCommonChanMaskCopy>
            break;
 8015e18:	e001      	b.n	8015e1e <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	e000      	b.n	8015e20 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 8015e1e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3708      	adds	r7, #8
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bd80      	pop	{r7, pc}
 8015e28:	2000c928 	.word	0x2000c928

08015e2c <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b088      	sub	sp, #32
 8015e30:	af02      	add	r7, sp, #8
 8015e32:	60ba      	str	r2, [r7, #8]
 8015e34:	607b      	str	r3, [r7, #4]
 8015e36:	4603      	mov	r3, r0
 8015e38:	73fb      	strb	r3, [r7, #15]
 8015e3a:	460b      	mov	r3, r1
 8015e3c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8015e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e46:	2b07      	cmp	r3, #7
 8015e48:	bfa8      	it	ge
 8015e4a:	2307      	movge	r3, #7
 8015e4c:	b25a      	sxtb	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e58:	491e      	ldr	r1, [pc, #120]	@ (8015ed4 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f001 fdaa 	bl	80179b4 <RegionCommonGetBandwidth>
 8015e60:	4603      	mov	r3, r0
 8015e62:	b2da      	uxtb	r2, r3
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e6e:	2b07      	cmp	r3, #7
 8015e70:	d10a      	bne.n	8015e88 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e78:	461a      	mov	r2, r3
 8015e7a:	4b17      	ldr	r3, [pc, #92]	@ (8015ed8 <RegionAS923ComputeRxWindowParameters+0xac>)
 8015e7c:	5c9b      	ldrb	r3, [r3, r2]
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f001 fb0e 	bl	80174a0 <RegionCommonComputeSymbolTimeFsk>
 8015e84:	6178      	str	r0, [r7, #20]
 8015e86:	e011      	b.n	8015eac <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e8e:	461a      	mov	r2, r3
 8015e90:	4b11      	ldr	r3, [pc, #68]	@ (8015ed8 <RegionAS923ComputeRxWindowParameters+0xac>)
 8015e92:	5c9a      	ldrb	r2, [r3, r2]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8015ed4 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015e9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ea2:	4619      	mov	r1, r3
 8015ea4:	4610      	mov	r0, r2
 8015ea6:	f001 fae5 	bl	8017474 <RegionCommonComputeSymbolTimeLoRa>
 8015eaa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015eac:	4b0b      	ldr	r3, [pc, #44]	@ (8015edc <RegionAS923ComputeRxWindowParameters+0xb0>)
 8015eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015eb0:	4798      	blx	r3
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	3308      	adds	r3, #8
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	320c      	adds	r2, #12
 8015eba:	7bb9      	ldrb	r1, [r7, #14]
 8015ebc:	9201      	str	r2, [sp, #4]
 8015ebe:	9300      	str	r3, [sp, #0]
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	68ba      	ldr	r2, [r7, #8]
 8015ec4:	6978      	ldr	r0, [r7, #20]
 8015ec6:	f001 fafb 	bl	80174c0 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8015eca:	bf00      	nop
 8015ecc:	3718      	adds	r7, #24
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	bd80      	pop	{r7, pc}
 8015ed2:	bf00      	nop
 8015ed4:	08022c38 	.word	0x08022c38
 8015ed8:	08022c30 	.word	0x08022c30
 8015edc:	08022c78 	.word	0x08022c78

08015ee0 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015ee0:	b5b0      	push	{r4, r5, r7, lr}
 8015ee2:	b090      	sub	sp, #64	@ 0x40
 8015ee4:	af0a      	add	r7, sp, #40	@ 0x28
 8015ee6:	6078      	str	r0, [r7, #4]
 8015ee8:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	785b      	ldrb	r3, [r3, #1]
 8015eee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015efe:	4b5a      	ldr	r3, [pc, #360]	@ (8016068 <RegionAS923RxConfig+0x188>)
 8015f00:	689b      	ldr	r3, [r3, #8]
 8015f02:	4798      	blx	r3
 8015f04:	4603      	mov	r3, r0
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d001      	beq.n	8015f0e <RegionAS923RxConfig+0x2e>
    {
        return false;
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	e0a8      	b.n	8016060 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	7cdb      	ldrb	r3, [r3, #19]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d126      	bne.n	8015f64 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015f16:	4b55      	ldr	r3, [pc, #340]	@ (801606c <RegionAS923RxConfig+0x18c>)
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	781b      	ldrb	r3, [r3, #0]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	460b      	mov	r3, r1
 8015f22:	005b      	lsls	r3, r3, #1
 8015f24:	440b      	add	r3, r1
 8015f26:	009b      	lsls	r3, r3, #2
 8015f28:	4413      	add	r3, r2
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015f2e:	4b4f      	ldr	r3, [pc, #316]	@ (801606c <RegionAS923RxConfig+0x18c>)
 8015f30:	681a      	ldr	r2, [r3, #0]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	4619      	mov	r1, r3
 8015f38:	460b      	mov	r3, r1
 8015f3a:	005b      	lsls	r3, r3, #1
 8015f3c:	440b      	add	r3, r1
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	4413      	add	r3, r2
 8015f42:	3304      	adds	r3, #4
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d00c      	beq.n	8015f64 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015f4a:	4b48      	ldr	r3, [pc, #288]	@ (801606c <RegionAS923RxConfig+0x18c>)
 8015f4c:	681a      	ldr	r2, [r3, #0]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	781b      	ldrb	r3, [r3, #0]
 8015f52:	4619      	mov	r1, r3
 8015f54:	460b      	mov	r3, r1
 8015f56:	005b      	lsls	r3, r3, #1
 8015f58:	440b      	add	r3, r1
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	4413      	add	r3, r2
 8015f5e:	3304      	adds	r3, #4
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8015f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f68:	4a41      	ldr	r2, [pc, #260]	@ (8016070 <RegionAS923RxConfig+0x190>)
 8015f6a:	5cd3      	ldrb	r3, [r2, r3]
 8015f6c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8016068 <RegionAS923RxConfig+0x188>)
 8015f70:	691b      	ldr	r3, [r3, #16]
 8015f72:	6938      	ldr	r0, [r7, #16]
 8015f74:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f7a:	2b07      	cmp	r3, #7
 8015f7c:	d128      	bne.n	8015fd0 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015f82:	4b39      	ldr	r3, [pc, #228]	@ (8016068 <RegionAS923RxConfig+0x188>)
 8015f84:	69dc      	ldr	r4, [r3, #28]
 8015f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015f8e:	fb02 f303 	mul.w	r3, r2, r3
 8015f92:	4619      	mov	r1, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	689b      	ldr	r3, [r3, #8]
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	7c92      	ldrb	r2, [r2, #18]
 8015f9e:	7df8      	ldrb	r0, [r7, #23]
 8015fa0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	9208      	str	r2, [sp, #32]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	9207      	str	r2, [sp, #28]
 8015faa:	2200      	movs	r2, #0
 8015fac:	9206      	str	r2, [sp, #24]
 8015fae:	2201      	movs	r2, #1
 8015fb0:	9205      	str	r2, [sp, #20]
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	9204      	str	r2, [sp, #16]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	9203      	str	r2, [sp, #12]
 8015fba:	9302      	str	r3, [sp, #8]
 8015fbc:	2305      	movs	r3, #5
 8015fbe:	9301      	str	r3, [sp, #4]
 8015fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8016074 <RegionAS923RxConfig+0x194>)
 8015fc2:	9300      	str	r3, [sp, #0]
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	460a      	mov	r2, r1
 8015fc8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015fcc:	47a0      	blx	r4
 8015fce:	e024      	b.n	801601a <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015fd0:	2301      	movs	r3, #1
 8015fd2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015fd4:	4b24      	ldr	r3, [pc, #144]	@ (8016068 <RegionAS923RxConfig+0x188>)
 8015fd6:	69dc      	ldr	r4, [r3, #28]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	789b      	ldrb	r3, [r3, #2]
 8015fdc:	461d      	mov	r5, r3
 8015fde:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	689b      	ldr	r3, [r3, #8]
 8015fe6:	b29b      	uxth	r3, r3
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	7c92      	ldrb	r2, [r2, #18]
 8015fec:	7df8      	ldrb	r0, [r7, #23]
 8015fee:	9209      	str	r2, [sp, #36]	@ 0x24
 8015ff0:	2201      	movs	r2, #1
 8015ff2:	9208      	str	r2, [sp, #32]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	9207      	str	r2, [sp, #28]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	9206      	str	r2, [sp, #24]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	9205      	str	r2, [sp, #20]
 8016000:	2200      	movs	r2, #0
 8016002:	9204      	str	r2, [sp, #16]
 8016004:	2200      	movs	r2, #0
 8016006:	9203      	str	r2, [sp, #12]
 8016008:	9302      	str	r3, [sp, #8]
 801600a:	2308      	movs	r3, #8
 801600c:	9301      	str	r3, [sp, #4]
 801600e:	2300      	movs	r3, #0
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	2301      	movs	r3, #1
 8016014:	460a      	mov	r2, r1
 8016016:	4629      	mov	r1, r5
 8016018:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	7c5b      	ldrb	r3, [r3, #17]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d005      	beq.n	801602e <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8016022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016026:	4a14      	ldr	r2, [pc, #80]	@ (8016078 <RegionAS923RxConfig+0x198>)
 8016028:	5cd3      	ldrb	r3, [r2, r3]
 801602a:	75bb      	strb	r3, [r7, #22]
 801602c:	e004      	b.n	8016038 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 801602e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016032:	4a12      	ldr	r2, [pc, #72]	@ (801607c <RegionAS923RxConfig+0x19c>)
 8016034:	5cd3      	ldrb	r3, [r2, r3]
 8016036:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016038:	4b0b      	ldr	r3, [pc, #44]	@ (8016068 <RegionAS923RxConfig+0x188>)
 801603a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801603c:	7dba      	ldrb	r2, [r7, #22]
 801603e:	320d      	adds	r2, #13
 8016040:	b2d1      	uxtb	r1, r2
 8016042:	7dfa      	ldrb	r2, [r7, #23]
 8016044:	4610      	mov	r0, r2
 8016046:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	7cdb      	ldrb	r3, [r3, #19]
 801604c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016050:	6939      	ldr	r1, [r7, #16]
 8016052:	4618      	mov	r0, r3
 8016054:	f001 fcce 	bl	80179f4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	7bfa      	ldrb	r2, [r7, #15]
 801605c:	701a      	strb	r2, [r3, #0]
    return true;
 801605e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8016060:	4618      	mov	r0, r3
 8016062:	3718      	adds	r7, #24
 8016064:	46bd      	mov	sp, r7
 8016066:	bdb0      	pop	{r4, r5, r7, pc}
 8016068:	08022c78 	.word	0x08022c78
 801606c:	2000c928 	.word	0x2000c928
 8016070:	08022c30 	.word	0x08022c30
 8016074:	00014585 	.word	0x00014585
 8016078:	08022c60 	.word	0x08022c60
 801607c:	08022c58 	.word	0x08022c58

08016080 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016080:	b590      	push	{r4, r7, lr}
 8016082:	b093      	sub	sp, #76	@ 0x4c
 8016084:	af0a      	add	r7, sp, #40	@ 0x28
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016092:	461a      	mov	r2, r3
 8016094:	4b61      	ldr	r3, [pc, #388]	@ (801621c <RegionAS923TxConfig+0x19c>)
 8016096:	5c9b      	ldrb	r3, [r3, r2]
 8016098:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80160a0:	4b5f      	ldr	r3, [pc, #380]	@ (8016220 <RegionAS923TxConfig+0x1a0>)
 80160a2:	681a      	ldr	r2, [r3, #0]
 80160a4:	4b5f      	ldr	r3, [pc, #380]	@ (8016224 <RegionAS923TxConfig+0x1a4>)
 80160a6:	6819      	ldr	r1, [r3, #0]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	461c      	mov	r4, r3
 80160ae:	4623      	mov	r3, r4
 80160b0:	005b      	lsls	r3, r3, #1
 80160b2:	4423      	add	r3, r4
 80160b4:	009b      	lsls	r3, r3, #2
 80160b6:	440b      	add	r3, r1
 80160b8:	3309      	adds	r3, #9
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	4619      	mov	r1, r3
 80160be:	460b      	mov	r3, r1
 80160c0:	005b      	lsls	r3, r3, #1
 80160c2:	440b      	add	r3, r1
 80160c4:	011b      	lsls	r3, r3, #4
 80160c6:	4413      	add	r3, r2
 80160c8:	3302      	adds	r3, #2
 80160ca:	f993 3000 	ldrsb.w	r3, [r3]
 80160ce:	4619      	mov	r1, r3
 80160d0:	f001 fc5a 	bl	8017988 <RegionCommonLimitTxPower>
 80160d4:	4603      	mov	r3, r0
 80160d6:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160de:	4952      	ldr	r1, [pc, #328]	@ (8016228 <RegionAS923TxConfig+0x1a8>)
 80160e0:	4618      	mov	r0, r3
 80160e2:	f001 fc67 	bl	80179b4 <RegionCommonGetBandwidth>
 80160e6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80160e8:	2300      	movs	r3, #0
 80160ea:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80160f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80160fc:	eef0 0a47 	vmov.f32	s1, s14
 8016100:	eeb0 0a67 	vmov.f32	s0, s15
 8016104:	4618      	mov	r0, r3
 8016106:	f001 fa95 	bl	8017634 <RegionCommonComputeTxPower>
 801610a:	4603      	mov	r3, r0
 801610c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801610e:	4b47      	ldr	r3, [pc, #284]	@ (801622c <RegionAS923TxConfig+0x1ac>)
 8016110:	691a      	ldr	r2, [r3, #16]
 8016112:	4b44      	ldr	r3, [pc, #272]	@ (8016224 <RegionAS923TxConfig+0x1a4>)
 8016114:	6819      	ldr	r1, [r3, #0]
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	4618      	mov	r0, r3
 801611c:	4603      	mov	r3, r0
 801611e:	005b      	lsls	r3, r3, #1
 8016120:	4403      	add	r3, r0
 8016122:	009b      	lsls	r3, r3, #2
 8016124:	440b      	add	r3, r1
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	4618      	mov	r0, r3
 801612a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016132:	2b07      	cmp	r3, #7
 8016134:	d124      	bne.n	8016180 <RegionAS923TxConfig+0x100>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016136:	2300      	movs	r3, #0
 8016138:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801613a:	4b3c      	ldr	r3, [pc, #240]	@ (801622c <RegionAS923TxConfig+0x1ac>)
 801613c:	6a1c      	ldr	r4, [r3, #32]
 801613e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016142:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016146:	fb02 f303 	mul.w	r3, r2, r3
 801614a:	461a      	mov	r2, r3
 801614c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016150:	7ff8      	ldrb	r0, [r7, #31]
 8016152:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016156:	9308      	str	r3, [sp, #32]
 8016158:	2300      	movs	r3, #0
 801615a:	9307      	str	r3, [sp, #28]
 801615c:	2300      	movs	r3, #0
 801615e:	9306      	str	r3, [sp, #24]
 8016160:	2300      	movs	r3, #0
 8016162:	9305      	str	r3, [sp, #20]
 8016164:	2301      	movs	r3, #1
 8016166:	9304      	str	r3, [sp, #16]
 8016168:	2300      	movs	r3, #0
 801616a:	9303      	str	r3, [sp, #12]
 801616c:	2305      	movs	r3, #5
 801616e:	9302      	str	r3, [sp, #8]
 8016170:	2300      	movs	r3, #0
 8016172:	9301      	str	r3, [sp, #4]
 8016174:	9200      	str	r2, [sp, #0]
 8016176:	69bb      	ldr	r3, [r7, #24]
 8016178:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801617c:	47a0      	blx	r4
 801617e:	e01d      	b.n	80161bc <RegionAS923TxConfig+0x13c>
    }
    else
    {
        modem = MODEM_LORA;
 8016180:	2301      	movs	r3, #1
 8016182:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016184:	4b29      	ldr	r3, [pc, #164]	@ (801622c <RegionAS923TxConfig+0x1ac>)
 8016186:	6a1c      	ldr	r4, [r3, #32]
 8016188:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801618c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016190:	7ff8      	ldrb	r0, [r7, #31]
 8016192:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016196:	9208      	str	r2, [sp, #32]
 8016198:	2200      	movs	r2, #0
 801619a:	9207      	str	r2, [sp, #28]
 801619c:	2200      	movs	r2, #0
 801619e:	9206      	str	r2, [sp, #24]
 80161a0:	2200      	movs	r2, #0
 80161a2:	9205      	str	r2, [sp, #20]
 80161a4:	2201      	movs	r2, #1
 80161a6:	9204      	str	r2, [sp, #16]
 80161a8:	2200      	movs	r2, #0
 80161aa:	9203      	str	r2, [sp, #12]
 80161ac:	2208      	movs	r2, #8
 80161ae:	9202      	str	r2, [sp, #8]
 80161b0:	2201      	movs	r2, #1
 80161b2:	9201      	str	r2, [sp, #4]
 80161b4:	9300      	str	r3, [sp, #0]
 80161b6:	69bb      	ldr	r3, [r7, #24]
 80161b8:	2200      	movs	r2, #0
 80161ba:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80161bc:	4b19      	ldr	r3, [pc, #100]	@ (8016224 <RegionAS923TxConfig+0x1a4>)
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	781b      	ldrb	r3, [r3, #0]
 80161c4:	4619      	mov	r1, r3
 80161c6:	460b      	mov	r3, r1
 80161c8:	005b      	lsls	r3, r3, #1
 80161ca:	440b      	add	r3, r1
 80161cc:	009b      	lsls	r3, r3, #2
 80161ce:	4413      	add	r3, r2
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80161d8:	4619      	mov	r1, r3
 80161da:	4610      	mov	r0, r2
 80161dc:	f001 fc18 	bl	8017a10 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	899b      	ldrh	r3, [r3, #12]
 80161ea:	4619      	mov	r1, r3
 80161ec:	4610      	mov	r0, r2
 80161ee:	f7ff fa45 	bl	801567c <GetTimeOnAir>
 80161f2:	4602      	mov	r2, r0
 80161f4:	460b      	mov	r3, r1
 80161f6:	6879      	ldr	r1, [r7, #4]
 80161f8:	e9c1 2300 	strd	r2, r3, [r1]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80161fc:	4b0b      	ldr	r3, [pc, #44]	@ (801622c <RegionAS923TxConfig+0x1ac>)
 80161fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016200:	68fa      	ldr	r2, [r7, #12]
 8016202:	8992      	ldrh	r2, [r2, #12]
 8016204:	b2d1      	uxtb	r1, r2
 8016206:	7ffa      	ldrb	r2, [r7, #31]
 8016208:	4610      	mov	r0, r2
 801620a:	4798      	blx	r3

    *txPower = txPowerLimited;
 801620c:	68bb      	ldr	r3, [r7, #8]
 801620e:	7f7a      	ldrb	r2, [r7, #29]
 8016210:	701a      	strb	r2, [r3, #0]
    return true;
 8016212:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8016214:	4618      	mov	r0, r3
 8016216:	3724      	adds	r7, #36	@ 0x24
 8016218:	46bd      	mov	sp, r7
 801621a:	bd90      	pop	{r4, r7, pc}
 801621c:	08022c30 	.word	0x08022c30
 8016220:	2000c924 	.word	0x2000c924
 8016224:	2000c928 	.word	0x2000c928
 8016228:	08022c38 	.word	0x08022c38
 801622c:	08022c78 	.word	0x08022c78

08016230 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016230:	b590      	push	{r4, r7, lr}
 8016232:	b095      	sub	sp, #84	@ 0x54
 8016234:	af00      	add	r7, sp, #0
 8016236:	60f8      	str	r0, [r7, #12]
 8016238:	60b9      	str	r1, [r7, #8]
 801623a:	607a      	str	r2, [r7, #4]
 801623c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801623e:	2307      	movs	r3, #7
 8016240:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016244:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016248:	2200      	movs	r2, #0
 801624a:	601a      	str	r2, [r3, #0]
 801624c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801624e:	2300      	movs	r3, #0
 8016250:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    uint8_t bytesProcessed = 0;
 8016254:	2300      	movs	r3, #0
 8016256:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    uint16_t chMask = 0;
 801625a:	2300      	movs	r3, #0
 801625c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016260:	e08b      	b.n	801637a <RegionAS923LinkAdrReq+0x14a>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	685a      	ldr	r2, [r3, #4]
 8016266:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801626a:	4413      	add	r3, r2
 801626c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8016270:	4611      	mov	r1, r2
 8016272:	4618      	mov	r0, r3
 8016274:	f001 f824 	bl	80172c0 <RegionCommonParseLinkAdrReq>
 8016278:	4603      	mov	r3, r0
 801627a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

        if( nextIndex == 0 )
 801627e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8016282:	2b00      	cmp	r3, #0
 8016284:	f000 8081 	beq.w	801638a <RegionAS923LinkAdrReq+0x15a>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016288:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 801628c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8016290:	4413      	add	r3, r2
 8016292:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016296:	2307      	movs	r3, #7
 8016298:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801629c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80162a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80162a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d10a      	bne.n	80162c2 <RegionAS923LinkAdrReq+0x92>
 80162ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d106      	bne.n	80162c2 <RegionAS923LinkAdrReq+0x92>
        {
            status &= 0xFE; // Channel mask KO
 80162b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80162b8:	f023 0301 	bic.w	r3, r3, #1
 80162bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80162c0:	e05b      	b.n	801637a <RegionAS923LinkAdrReq+0x14a>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80162c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d003      	beq.n	80162d2 <RegionAS923LinkAdrReq+0xa2>
 80162ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80162ce:	2b05      	cmp	r3, #5
 80162d0:	d903      	bls.n	80162da <RegionAS923LinkAdrReq+0xaa>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80162d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80162d6:	2b06      	cmp	r3, #6
 80162d8:	d906      	bls.n	80162e8 <RegionAS923LinkAdrReq+0xb8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80162da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80162de:	f023 0301 	bic.w	r3, r3, #1
 80162e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80162e6:	e048      	b.n	801637a <RegionAS923LinkAdrReq+0x14a>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 80162e8:	2300      	movs	r3, #0
 80162ea:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80162ee:	e040      	b.n	8016372 <RegionAS923LinkAdrReq+0x142>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80162f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80162f4:	2b06      	cmp	r3, #6
 80162f6:	d11a      	bne.n	801632e <RegionAS923LinkAdrReq+0xfe>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80162f8:	4b62      	ldr	r3, [pc, #392]	@ (8016484 <RegionAS923LinkAdrReq+0x254>)
 80162fa:	6819      	ldr	r1, [r3, #0]
 80162fc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8016300:	4613      	mov	r3, r2
 8016302:	005b      	lsls	r3, r3, #1
 8016304:	4413      	add	r3, r2
 8016306:	009b      	lsls	r3, r3, #2
 8016308:	440b      	add	r3, r1
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d02b      	beq.n	8016368 <RegionAS923LinkAdrReq+0x138>
                    {
                        chMask |= 1 << i;
 8016310:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8016314:	2201      	movs	r2, #1
 8016316:	fa02 f303 	lsl.w	r3, r2, r3
 801631a:	b21a      	sxth	r2, r3
 801631c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016320:	b21b      	sxth	r3, r3
 8016322:	4313      	orrs	r3, r2
 8016324:	b21b      	sxth	r3, r3
 8016326:	b29b      	uxth	r3, r3
 8016328:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801632c:	e01c      	b.n	8016368 <RegionAS923LinkAdrReq+0x138>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801632e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016332:	461a      	mov	r2, r3
 8016334:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8016338:	fa42 f303 	asr.w	r3, r2, r3
 801633c:	f003 0301 	and.w	r3, r3, #1
 8016340:	2b00      	cmp	r3, #0
 8016342:	d011      	beq.n	8016368 <RegionAS923LinkAdrReq+0x138>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016344:	4b4f      	ldr	r3, [pc, #316]	@ (8016484 <RegionAS923LinkAdrReq+0x254>)
 8016346:	6819      	ldr	r1, [r3, #0]
 8016348:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 801634c:	4613      	mov	r3, r2
 801634e:	005b      	lsls	r3, r3, #1
 8016350:	4413      	add	r3, r2
 8016352:	009b      	lsls	r3, r3, #2
 8016354:	440b      	add	r3, r1
 8016356:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016358:	2b00      	cmp	r3, #0
 801635a:	d105      	bne.n	8016368 <RegionAS923LinkAdrReq+0x138>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801635c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016360:	f023 0301 	bic.w	r3, r3, #1
 8016364:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8016368:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 801636c:	3301      	adds	r3, #1
 801636e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8016372:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8016376:	2b0f      	cmp	r3, #15
 8016378:	d9ba      	bls.n	80162f0 <RegionAS923LinkAdrReq+0xc0>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	7a1b      	ldrb	r3, [r3, #8]
 801637e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8016382:	429a      	cmp	r2, r3
 8016384:	f4ff af6d 	bcc.w	8016262 <RegionAS923LinkAdrReq+0x32>
 8016388:	e000      	b.n	801638c <RegionAS923LinkAdrReq+0x15c>
            break; // break loop, since no more request has been found
 801638a:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801638c:	2302      	movs	r3, #2
 801638e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	7a5b      	ldrb	r3, [r3, #9]
 8016396:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    phyParam = RegionAS923GetPhyParam( &getPhy );
 801639a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801639e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80163a2:	4611      	mov	r1, r2
 80163a4:	4618      	mov	r0, r3
 80163a6:	f7ff f9b1 	bl	801570c <RegionAS923GetPhyParam>

    linkAdrVerifyParams.Status = status;
 80163aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80163ae:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	7a9b      	ldrb	r3, [r3, #10]
 80163b4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80163b6:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 80163ba:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80163bc:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 80163c0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80163c2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80163c6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80163ce:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80163d6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	7b5b      	ldrb	r3, [r3, #13]
 80163dc:	b25b      	sxtb	r3, r3
 80163de:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 80163e0:	2310      	movs	r3, #16
 80163e2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80163e4:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 80163e8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80163ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ec:	b25b      	sxtb	r3, r3
 80163ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 80163f2:	2307      	movs	r3, #7
 80163f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80163f8:	4b22      	ldr	r3, [pc, #136]	@ (8016484 <RegionAS923LinkAdrReq+0x254>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 80163fe:	2307      	movs	r3, #7
 8016400:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8016404:	2300      	movs	r3, #0
 8016406:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016410:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8016414:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016418:	1c9a      	adds	r2, r3, #2
 801641a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801641e:	1c59      	adds	r1, r3, #1
 8016420:	f107 0010 	add.w	r0, r7, #16
 8016424:	4623      	mov	r3, r4
 8016426:	f000 ff9d 	bl	8017364 <RegionCommonLinkAdrReqVerifyParams>
 801642a:	4603      	mov	r3, r0
 801642c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016430:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016434:	2b07      	cmp	r3, #7
 8016436:	d10e      	bne.n	8016456 <RegionAS923LinkAdrReq+0x226>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016438:	4b12      	ldr	r3, [pc, #72]	@ (8016484 <RegionAS923LinkAdrReq+0x254>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016440:	220c      	movs	r2, #12
 8016442:	2100      	movs	r1, #0
 8016444:	4618      	mov	r0, r3
 8016446:	f003 fe1d 	bl	801a084 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801644a:	4b0e      	ldr	r3, [pc, #56]	@ (8016484 <RegionAS923LinkAdrReq+0x254>)
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016452:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016456:	f997 2045 	ldrsb.w	r2, [r7, #69]	@ 0x45
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801645e:	f997 2046 	ldrsb.w	r2, [r7, #70]	@ 0x46
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016466:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801646e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016470:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8016474:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8016476:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801647a:	4618      	mov	r0, r3
 801647c:	3754      	adds	r7, #84	@ 0x54
 801647e:	46bd      	mov	sp, r7
 8016480:	bd90      	pop	{r4, r7, pc}
 8016482:	bf00      	nop
 8016484:	2000c928 	.word	0x2000c928

08016488 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b084      	sub	sp, #16
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016490:	2307      	movs	r3, #7
 8016492:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	4618      	mov	r0, r3
 801649a:	f7ff f8c9 	bl	8015630 <VerifyRfFreq>
 801649e:	4603      	mov	r3, r0
 80164a0:	f083 0301 	eor.w	r3, r3, #1
 80164a4:	b2db      	uxtb	r3, r3
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d003      	beq.n	80164b2 <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 80164aa:	7bfb      	ldrb	r3, [r7, #15]
 80164ac:	f023 0301 	bic.w	r3, r3, #1
 80164b0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	f993 3000 	ldrsb.w	r3, [r3]
 80164b8:	2207      	movs	r2, #7
 80164ba:	2100      	movs	r1, #0
 80164bc:	4618      	mov	r0, r3
 80164be:	f000 fcd2 	bl	8016e66 <RegionCommonValueInRange>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d103      	bne.n	80164d0 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80164c8:	7bfb      	ldrb	r3, [r7, #15]
 80164ca:	f023 0302 	bic.w	r3, r3, #2
 80164ce:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80164d6:	2207      	movs	r2, #7
 80164d8:	2100      	movs	r1, #0
 80164da:	4618      	mov	r0, r3
 80164dc:	f000 fcc3 	bl	8016e66 <RegionCommonValueInRange>
 80164e0:	4603      	mov	r3, r0
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d103      	bne.n	80164ee <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80164e6:	7bfb      	ldrb	r3, [r7, #15]
 80164e8:	f023 0304 	bic.w	r3, r3, #4
 80164ec:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 80164ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80164f0:	4618      	mov	r0, r3
 80164f2:	3710      	adds	r7, #16
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bd80      	pop	{r7, pc}

080164f8 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b086      	sub	sp, #24
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016500:	2303      	movs	r3, #3
 8016502:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d114      	bne.n	8016538 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016514:	b2db      	uxtb	r3, r3
 8016516:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8016518:	f107 0308 	add.w	r3, r7, #8
 801651c:	4618      	mov	r0, r3
 801651e:	f000 f9fb 	bl	8016918 <RegionAS923ChannelsRemove>
 8016522:	4603      	mov	r3, r0
 8016524:	f083 0301 	eor.w	r3, r3, #1
 8016528:	b2db      	uxtb	r3, r3
 801652a:	2b00      	cmp	r3, #0
 801652c:	d03b      	beq.n	80165a6 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 801652e:	7dfb      	ldrb	r3, [r7, #23]
 8016530:	f023 0303 	bic.w	r3, r3, #3
 8016534:	75fb      	strb	r3, [r7, #23]
 8016536:	e036      	b.n	80165a6 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016544:	b2db      	uxtb	r3, r3
 8016546:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8016548:	f107 030c 	add.w	r3, r7, #12
 801654c:	4618      	mov	r0, r3
 801654e:	f000 f947 	bl	80167e0 <RegionAS923ChannelAdd>
 8016552:	4603      	mov	r3, r0
 8016554:	2b06      	cmp	r3, #6
 8016556:	d820      	bhi.n	801659a <RegionAS923NewChannelReq+0xa2>
 8016558:	a201      	add	r2, pc, #4	@ (adr r2, 8016560 <RegionAS923NewChannelReq+0x68>)
 801655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801655e:	bf00      	nop
 8016560:	080165a5 	.word	0x080165a5
 8016564:	0801659b 	.word	0x0801659b
 8016568:	0801659b 	.word	0x0801659b
 801656c:	0801659b 	.word	0x0801659b
 8016570:	0801657d 	.word	0x0801657d
 8016574:	08016587 	.word	0x08016587
 8016578:	08016591 	.word	0x08016591
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801657c:	7dfb      	ldrb	r3, [r7, #23]
 801657e:	f023 0301 	bic.w	r3, r3, #1
 8016582:	75fb      	strb	r3, [r7, #23]
                break;
 8016584:	e00f      	b.n	80165a6 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016586:	7dfb      	ldrb	r3, [r7, #23]
 8016588:	f023 0302 	bic.w	r3, r3, #2
 801658c:	75fb      	strb	r3, [r7, #23]
                break;
 801658e:	e00a      	b.n	80165a6 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016590:	7dfb      	ldrb	r3, [r7, #23]
 8016592:	f023 0303 	bic.w	r3, r3, #3
 8016596:	75fb      	strb	r3, [r7, #23]
                break;
 8016598:	e005      	b.n	80165a6 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801659a:	7dfb      	ldrb	r3, [r7, #23]
 801659c:	f023 0303 	bic.w	r3, r3, #3
 80165a0:	75fb      	strb	r3, [r7, #23]
                break;
 80165a2:	e000      	b.n	80165a6 <RegionAS923NewChannelReq+0xae>
                break;
 80165a4:	bf00      	nop
            }
        }
    }

    return status;
 80165a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3718      	adds	r7, #24
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
 80165b2:	bf00      	nop

080165b4 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80165b4:	b480      	push	{r7}
 80165b6:	b083      	sub	sp, #12
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 80165bc:	2300      	movs	r3, #0
}
 80165be:	4618      	mov	r0, r3
 80165c0:	370c      	adds	r7, #12
 80165c2:	46bd      	mov	sp, r7
 80165c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c8:	4770      	bx	lr
	...

080165cc <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b084      	sub	sp, #16
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80165d4:	2303      	movs	r3, #3
 80165d6:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	2b0f      	cmp	r3, #15
 80165de:	d901      	bls.n	80165e4 <RegionAS923DlChannelReq+0x18>
    {
        return 0;
 80165e0:	2300      	movs	r3, #0
 80165e2:	e032      	b.n	801664a <RegionAS923DlChannelReq+0x7e>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	685b      	ldr	r3, [r3, #4]
 80165e8:	4618      	mov	r0, r3
 80165ea:	f7ff f821 	bl	8015630 <VerifyRfFreq>
 80165ee:	4603      	mov	r3, r0
 80165f0:	f083 0301 	eor.w	r3, r3, #1
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d003      	beq.n	8016602 <RegionAS923DlChannelReq+0x36>
    {
        status &= 0xFE;
 80165fa:	7bfb      	ldrb	r3, [r7, #15]
 80165fc:	f023 0301 	bic.w	r3, r3, #1
 8016600:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016602:	4b14      	ldr	r3, [pc, #80]	@ (8016654 <RegionAS923DlChannelReq+0x88>)
 8016604:	681a      	ldr	r2, [r3, #0]
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	781b      	ldrb	r3, [r3, #0]
 801660a:	4619      	mov	r1, r3
 801660c:	460b      	mov	r3, r1
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	440b      	add	r3, r1
 8016612:	009b      	lsls	r3, r3, #2
 8016614:	4413      	add	r3, r2
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d103      	bne.n	8016624 <RegionAS923DlChannelReq+0x58>
    {
        status &= 0xFD;
 801661c:	7bfb      	ldrb	r3, [r7, #15]
 801661e:	f023 0302 	bic.w	r3, r3, #2
 8016622:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016624:	7bfb      	ldrb	r3, [r7, #15]
 8016626:	2b03      	cmp	r3, #3
 8016628:	d10d      	bne.n	8016646 <RegionAS923DlChannelReq+0x7a>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801662a:	4b0a      	ldr	r3, [pc, #40]	@ (8016654 <RegionAS923DlChannelReq+0x88>)
 801662c:	6819      	ldr	r1, [r3, #0]
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	781b      	ldrb	r3, [r3, #0]
 8016632:	4618      	mov	r0, r3
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	685a      	ldr	r2, [r3, #4]
 8016638:	4603      	mov	r3, r0
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	4403      	add	r3, r0
 801663e:	009b      	lsls	r3, r3, #2
 8016640:	440b      	add	r3, r1
 8016642:	3304      	adds	r3, #4
 8016644:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 8016646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801664a:	4618      	mov	r0, r3
 801664c:	3710      	adds	r7, #16
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	2000c928 	.word	0x2000c928

08016658 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016658:	b480      	push	{r7}
 801665a:	b083      	sub	sp, #12
 801665c:	af00      	add	r7, sp, #0
 801665e:	4603      	mov	r3, r0
 8016660:	460a      	mov	r2, r1
 8016662:	71fb      	strb	r3, [r7, #7]
 8016664:	4613      	mov	r3, r2
 8016666:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8016668:	2300      	movs	r3, #0
#else
    return -1;
#endif /* REGION_AS923 */
}
 801666a:	4618      	mov	r0, r3
 801666c:	370c      	adds	r7, #12
 801666e:	46bd      	mov	sp, r7
 8016670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016674:	4770      	bx	lr
	...

08016678 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b0a0      	sub	sp, #128	@ 0x80
 801667c:	af02      	add	r7, sp, #8
 801667e:	60f8      	str	r0, [r7, #12]
 8016680:	60b9      	str	r1, [r7, #8]
 8016682:	607a      	str	r2, [r7, #4]
 8016684:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8016686:	2300      	movs	r3, #0
 8016688:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    uint8_t nbRestrictedChannels = 0;
 801668c:	2300      	movs	r3, #0
 801668e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8016692:	2300      	movs	r3, #0
 8016694:	667b      	str	r3, [r7, #100]	@ 0x64
 8016696:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801669a:	2200      	movs	r2, #0
 801669c:	601a      	str	r2, [r3, #0]
 801669e:	605a      	str	r2, [r3, #4]
 80166a0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80166a2:	230c      	movs	r3, #12
 80166a4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 80166a8:	2303      	movs	r3, #3
 80166aa:	82fb      	strh	r3, [r7, #22]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80166ac:	4b4a      	ldr	r3, [pc, #296]	@ (80167d8 <RegionAS923NextChannel+0x160>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80166b4:	2201      	movs	r2, #1
 80166b6:	2100      	movs	r1, #0
 80166b8:	4618      	mov	r0, r3
 80166ba:	f000 fc27 	bl	8016f0c <RegionCommonCountChannels>
 80166be:	4603      	mov	r3, r0
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d10a      	bne.n	80166da <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 80166c4:	4b44      	ldr	r3, [pc, #272]	@ (80167d8 <RegionAS923NextChannel+0x160>)
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 80166cc:	4b42      	ldr	r3, [pc, #264]	@ (80167d8 <RegionAS923NextChannel+0x160>)
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	f042 0203 	orr.w	r2, r2, #3
 80166d4:	b292      	uxth	r2, r2
 80166d6:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	7c5b      	ldrb	r3, [r3, #17]
 80166de:	763b      	strb	r3, [r7, #24]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80166e6:	b2db      	uxtb	r3, r3
 80166e8:	767b      	strb	r3, [r7, #25]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80166ea:	4b3b      	ldr	r3, [pc, #236]	@ (80167d8 <RegionAS923NextChannel+0x160>)
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80166f2:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80166f4:	4b38      	ldr	r3, [pc, #224]	@ (80167d8 <RegionAS923NextChannel+0x160>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	623b      	str	r3, [r7, #32]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80166fa:	4b38      	ldr	r3, [pc, #224]	@ (80167dc <RegionAS923NextChannel+0x164>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	627b      	str	r3, [r7, #36]	@ 0x24
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8016700:	2310      	movs	r3, #16
 8016702:	853b      	strh	r3, [r7, #40]	@ 0x28
    countChannelsParams.JoinChannels = &joinChannels;
 8016704:	f107 0316 	add.w	r3, r7, #22
 8016708:	62fb      	str	r3, [r7, #44]	@ 0x2c

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016710:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801671a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	7c9b      	ldrb	r3, [r3, #18]
 8016722:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8016726:	2301      	movs	r3, #1
 8016728:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801672c:	68fa      	ldr	r2, [r7, #12]
 801672e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016732:	3214      	adds	r2, #20
 8016734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016738:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	7f1b      	ldrb	r3, [r3, #28]
 8016740:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	f993 2010 	ldrsb.w	r2, [r3, #16]
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	8bdb      	ldrh	r3, [r3, #30]
 801674e:	4619      	mov	r1, r3
 8016750:	4610      	mov	r0, r2
 8016752:	f7fe ff93 	bl	801567c <GetTimeOnAir>
 8016756:	4602      	mov	r2, r0
 8016758:	460b      	mov	r3, r1
 801675a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801675e:	f107 0318 	add.w	r3, r7, #24
 8016762:	65bb      	str	r3, [r7, #88]	@ 0x58

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016764:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 8016768:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 801676c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	9301      	str	r3, [sp, #4]
 8016774:	f107 0375 	add.w	r3, r7, #117	@ 0x75
 8016778:	9300      	str	r3, [sp, #0]
 801677a:	460b      	mov	r3, r1
 801677c:	6839      	ldr	r1, [r7, #0]
 801677e:	f001 f84a 	bl	8017816 <RegionCommonIdentifyChannels>
 8016782:	4603      	mov	r3, r0
 8016784:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016788:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801678c:	2b00      	cmp	r3, #0
 801678e:	d10e      	bne.n	80167ae <RegionAS923NextChannel+0x136>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016790:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8016794:	3b01      	subs	r3, #1
 8016796:	4619      	mov	r1, r3
 8016798:	2000      	movs	r0, #0
 801679a:	f003 fc1f 	bl	8019fdc <randr>
 801679e:	4603      	mov	r3, r0
 80167a0:	3378      	adds	r3, #120	@ 0x78
 80167a2:	443b      	add	r3, r7
 80167a4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	701a      	strb	r2, [r3, #0]
 80167ac:	e00e      	b.n	80167cc <RegionAS923NextChannel+0x154>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80167ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80167b2:	2b0c      	cmp	r3, #12
 80167b4:	d10a      	bne.n	80167cc <RegionAS923NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 80167b6:	4b08      	ldr	r3, [pc, #32]	@ (80167d8 <RegionAS923NextChannel+0x160>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 80167be:	4b06      	ldr	r3, [pc, #24]	@ (80167d8 <RegionAS923NextChannel+0x160>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	f042 0203 	orr.w	r2, r2, #3
 80167c6:	b292      	uxth	r2, r2
 80167c8:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 80167cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3778      	adds	r7, #120	@ 0x78
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	2000c928 	.word	0x2000c928
 80167dc:	2000c924 	.word	0x2000c924

080167e0 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b084      	sub	sp, #16
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 80167e8:	2300      	movs	r3, #0
 80167ea:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80167ec:	2300      	movs	r3, #0
 80167ee:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	791b      	ldrb	r3, [r3, #4]
 80167f4:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80167f6:	7b7b      	ldrb	r3, [r7, #13]
 80167f8:	2b01      	cmp	r3, #1
 80167fa:	d801      	bhi.n	8016800 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80167fc:	2306      	movs	r3, #6
 80167fe:	e085      	b.n	801690c <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8016800:	7b7b      	ldrb	r3, [r7, #13]
 8016802:	2b0f      	cmp	r3, #15
 8016804:	d901      	bls.n	801680a <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016806:	2303      	movs	r3, #3
 8016808:	e080      	b.n	801690c <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	7a1b      	ldrb	r3, [r3, #8]
 8016810:	f343 0303 	sbfx	r3, r3, #0, #4
 8016814:	b25b      	sxtb	r3, r3
 8016816:	2207      	movs	r2, #7
 8016818:	2100      	movs	r1, #0
 801681a:	4618      	mov	r0, r3
 801681c:	f000 fb23 	bl	8016e66 <RegionCommonValueInRange>
 8016820:	4603      	mov	r3, r0
 8016822:	2b00      	cmp	r3, #0
 8016824:	d101      	bne.n	801682a <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 8016826:	2301      	movs	r3, #1
 8016828:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	7a1b      	ldrb	r3, [r3, #8]
 8016830:	f343 1303 	sbfx	r3, r3, #4, #4
 8016834:	b25b      	sxtb	r3, r3
 8016836:	2207      	movs	r2, #7
 8016838:	2100      	movs	r1, #0
 801683a:	4618      	mov	r0, r3
 801683c:	f000 fb13 	bl	8016e66 <RegionCommonValueInRange>
 8016840:	4603      	mov	r3, r0
 8016842:	2b00      	cmp	r3, #0
 8016844:	d101      	bne.n	801684a <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 8016846:	2301      	movs	r3, #1
 8016848:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	7a1b      	ldrb	r3, [r3, #8]
 8016850:	f343 0303 	sbfx	r3, r3, #0, #4
 8016854:	b25a      	sxtb	r2, r3
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	7a1b      	ldrb	r3, [r3, #8]
 801685c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016860:	b25b      	sxtb	r3, r3
 8016862:	429a      	cmp	r2, r3
 8016864:	dd01      	ble.n	801686a <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 8016866:	2301      	movs	r3, #1
 8016868:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801686a:	7bbb      	ldrb	r3, [r7, #14]
 801686c:	f083 0301 	eor.w	r3, r3, #1
 8016870:	b2db      	uxtb	r3, r3
 8016872:	2b00      	cmp	r3, #0
 8016874:	d00d      	beq.n	8016892 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	4618      	mov	r0, r3
 801687e:	f7fe fed7 	bl	8015630 <VerifyRfFreq>
 8016882:	4603      	mov	r3, r0
 8016884:	f083 0301 	eor.w	r3, r3, #1
 8016888:	b2db      	uxtb	r3, r3
 801688a:	2b00      	cmp	r3, #0
 801688c:	d001      	beq.n	8016892 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 801688e:	2301      	movs	r3, #1
 8016890:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016892:	7bfb      	ldrb	r3, [r7, #15]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d004      	beq.n	80168a2 <RegionAS923ChannelAdd+0xc2>
 8016898:	7bbb      	ldrb	r3, [r7, #14]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d001      	beq.n	80168a2 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801689e:	2306      	movs	r3, #6
 80168a0:	e034      	b.n	801690c <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 80168a2:	7bfb      	ldrb	r3, [r7, #15]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d001      	beq.n	80168ac <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80168a8:	2305      	movs	r3, #5
 80168aa:	e02f      	b.n	801690c <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 80168ac:	7bbb      	ldrb	r3, [r7, #14]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d001      	beq.n	80168b6 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80168b2:	2304      	movs	r3, #4
 80168b4:	e02a      	b.n	801690c <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80168b6:	4b17      	ldr	r3, [pc, #92]	@ (8016914 <RegionAS923ChannelAdd+0x134>)
 80168b8:	6819      	ldr	r1, [r3, #0]
 80168ba:	7b7a      	ldrb	r2, [r7, #13]
 80168bc:	4613      	mov	r3, r2
 80168be:	005b      	lsls	r3, r3, #1
 80168c0:	4413      	add	r3, r2
 80168c2:	009b      	lsls	r3, r3, #2
 80168c4:	18c8      	adds	r0, r1, r3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	220c      	movs	r2, #12
 80168cc:	4619      	mov	r1, r3
 80168ce:	f003 fb9c 	bl	801a00a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 80168d2:	4b10      	ldr	r3, [pc, #64]	@ (8016914 <RegionAS923ChannelAdd+0x134>)
 80168d4:	6819      	ldr	r1, [r3, #0]
 80168d6:	7b7a      	ldrb	r2, [r7, #13]
 80168d8:	4613      	mov	r3, r2
 80168da:	005b      	lsls	r3, r3, #1
 80168dc:	4413      	add	r3, r2
 80168de:	009b      	lsls	r3, r3, #2
 80168e0:	440b      	add	r3, r1
 80168e2:	3309      	adds	r3, #9
 80168e4:	2200      	movs	r2, #0
 80168e6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80168e8:	4b0a      	ldr	r3, [pc, #40]	@ (8016914 <RegionAS923ChannelAdd+0x134>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 80168f0:	b21a      	sxth	r2, r3
 80168f2:	7b7b      	ldrb	r3, [r7, #13]
 80168f4:	2101      	movs	r1, #1
 80168f6:	fa01 f303 	lsl.w	r3, r1, r3
 80168fa:	b21b      	sxth	r3, r3
 80168fc:	4313      	orrs	r3, r2
 80168fe:	b21a      	sxth	r2, r3
 8016900:	4b04      	ldr	r3, [pc, #16]	@ (8016914 <RegionAS923ChannelAdd+0x134>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	b292      	uxth	r2, r2
 8016906:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    return LORAMAC_STATUS_OK;
 801690a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 801690c:	4618      	mov	r0, r3
 801690e:	3710      	adds	r7, #16
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}
 8016914:	2000c928 	.word	0x2000c928

08016918 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b086      	sub	sp, #24
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8016926:	7dfb      	ldrb	r3, [r7, #23]
 8016928:	2b01      	cmp	r3, #1
 801692a:	d801      	bhi.n	8016930 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 801692c:	2300      	movs	r3, #0
 801692e:	e016      	b.n	801695e <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016930:	4b0d      	ldr	r3, [pc, #52]	@ (8016968 <RegionAS923ChannelsRemove+0x50>)
 8016932:	6819      	ldr	r1, [r3, #0]
 8016934:	7dfa      	ldrb	r2, [r7, #23]
 8016936:	4613      	mov	r3, r2
 8016938:	005b      	lsls	r3, r3, #1
 801693a:	4413      	add	r3, r2
 801693c:	009b      	lsls	r3, r3, #2
 801693e:	440b      	add	r3, r1
 8016940:	461a      	mov	r2, r3
 8016942:	2300      	movs	r3, #0
 8016944:	6013      	str	r3, [r2, #0]
 8016946:	6053      	str	r3, [r2, #4]
 8016948:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 801694a:	4b07      	ldr	r3, [pc, #28]	@ (8016968 <RegionAS923ChannelsRemove+0x50>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016952:	7df9      	ldrb	r1, [r7, #23]
 8016954:	2210      	movs	r2, #16
 8016956:	4618      	mov	r0, r3
 8016958:	f000 faa3 	bl	8016ea2 <RegionCommonChanDisable>
 801695c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 801695e:	4618      	mov	r0, r3
 8016960:	3718      	adds	r7, #24
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	2000c928 	.word	0x2000c928

0801696c <RegionAS923SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801696c:	b590      	push	{r4, r7, lr}
 801696e:	b085      	sub	sp, #20
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801697a:	4b23      	ldr	r3, [pc, #140]	@ (8016a08 <RegionAS923SetContinuousWave+0x9c>)
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	4b23      	ldr	r3, [pc, #140]	@ (8016a0c <RegionAS923SetContinuousWave+0xa0>)
 8016980:	6819      	ldr	r1, [r3, #0]
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	461c      	mov	r4, r3
 8016988:	4623      	mov	r3, r4
 801698a:	005b      	lsls	r3, r3, #1
 801698c:	4423      	add	r3, r4
 801698e:	009b      	lsls	r3, r3, #2
 8016990:	440b      	add	r3, r1
 8016992:	3309      	adds	r3, #9
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	4619      	mov	r1, r3
 8016998:	460b      	mov	r3, r1
 801699a:	005b      	lsls	r3, r3, #1
 801699c:	440b      	add	r3, r1
 801699e:	011b      	lsls	r3, r3, #4
 80169a0:	4413      	add	r3, r2
 80169a2:	3302      	adds	r3, #2
 80169a4:	f993 3000 	ldrsb.w	r3, [r3]
 80169a8:	4619      	mov	r1, r3
 80169aa:	f000 ffed 	bl	8017988 <RegionCommonLimitTxPower>
 80169ae:	4603      	mov	r3, r0
 80169b0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80169b2:	2300      	movs	r3, #0
 80169b4:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80169b6:	4b15      	ldr	r3, [pc, #84]	@ (8016a0c <RegionAS923SetContinuousWave+0xa0>)
 80169b8:	681a      	ldr	r2, [r3, #0]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	4619      	mov	r1, r3
 80169c0:	460b      	mov	r3, r1
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	440b      	add	r3, r1
 80169c6:	009b      	lsls	r3, r3, #2
 80169c8:	4413      	add	r3, r2
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80169da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169de:	eef0 0a47 	vmov.f32	s1, s14
 80169e2:	eeb0 0a67 	vmov.f32	s0, s15
 80169e6:	4618      	mov	r0, r3
 80169e8:	f000 fe24 	bl	8017634 <RegionCommonComputeTxPower>
 80169ec:	4603      	mov	r3, r0
 80169ee:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80169f0:	4b07      	ldr	r3, [pc, #28]	@ (8016a10 <RegionAS923SetContinuousWave+0xa4>)
 80169f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169f4:	687a      	ldr	r2, [r7, #4]
 80169f6:	8992      	ldrh	r2, [r2, #12]
 80169f8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80169fc:	68b8      	ldr	r0, [r7, #8]
 80169fe:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 8016a00:	bf00      	nop
 8016a02:	3714      	adds	r7, #20
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd90      	pop	{r4, r7, pc}
 8016a08:	2000c924 	.word	0x2000c924
 8016a0c:	2000c928 	.word	0x2000c928
 8016a10:	08022c78 	.word	0x08022c78

08016a14 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016a14:	b480      	push	{r7}
 8016a16:	b085      	sub	sp, #20
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	4603      	mov	r3, r0
 8016a1c:	71fb      	strb	r3, [r7, #7]
 8016a1e:	460b      	mov	r3, r1
 8016a20:	71bb      	strb	r3, [r7, #6]
 8016a22:	4613      	mov	r3, r2
 8016a24:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 8016a26:	2300      	movs	r3, #0
 8016a28:	73fb      	strb	r3, [r7, #15]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 8016a2a:	79fb      	ldrb	r3, [r7, #7]
 8016a2c:	2b01      	cmp	r3, #1
 8016a2e:	d101      	bne.n	8016a34 <RegionAS923ApplyDrOffset+0x20>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 8016a30:	2300      	movs	r3, #0
 8016a32:	73fb      	strb	r3, [r7, #15]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 8016a34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016a38:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8016a3c:	4908      	ldr	r1, [pc, #32]	@ (8016a60 <RegionAS923ApplyDrOffset+0x4c>)
 8016a3e:	568a      	ldrsb	r2, [r1, r2]
 8016a40:	1a9a      	subs	r2, r3, r2
 8016a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a46:	4293      	cmp	r3, r2
 8016a48:	bfb8      	it	lt
 8016a4a:	4613      	movlt	r3, r2
 8016a4c:	2b05      	cmp	r3, #5
 8016a4e:	bfa8      	it	ge
 8016a50:	2305      	movge	r3, #5
 8016a52:	b2db      	uxtb	r3, r3
#else
    return 0;
#endif /* REGION_AS923 */

}
 8016a54:	4618      	mov	r0, r3
 8016a56:	3714      	adds	r7, #20
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5e:	4770      	bx	lr
 8016a60:	08022c70 	.word	0x08022c70

08016a64 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016a64:	b480      	push	{r7}
 8016a66:	b087      	sub	sp, #28
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	4608      	mov	r0, r1
 8016a6e:	4639      	mov	r1, r7
 8016a70:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a74:	4603      	mov	r3, r0
 8016a76:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	881b      	ldrh	r3, [r3, #0]
 8016a7c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8016a7e:	7afb      	ldrb	r3, [r7, #11]
 8016a80:	f083 0301 	eor.w	r3, r3, #1
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d01b      	beq.n	8016ac2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016a8a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016a8e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016a96:	d202      	bcs.n	8016a9e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016a98:	2364      	movs	r3, #100	@ 0x64
 8016a9a:	82bb      	strh	r3, [r7, #20]
 8016a9c:	e00b      	b.n	8016ab6 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016aa4:	4293      	cmp	r3, r2
 8016aa6:	d803      	bhi.n	8016ab0 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016aac:	82bb      	strh	r3, [r7, #20]
 8016aae:	e002      	b.n	8016ab6 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016ab0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016ab4:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016ab6:	8aba      	ldrh	r2, [r7, #20]
 8016ab8:	8afb      	ldrh	r3, [r7, #22]
 8016aba:	4293      	cmp	r3, r2
 8016abc:	bf38      	it	cc
 8016abe:	4613      	movcc	r3, r2
 8016ac0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016ac2:	8afb      	ldrh	r3, [r7, #22]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d101      	bne.n	8016acc <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016ac8:	2301      	movs	r3, #1
 8016aca:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8016acc:	8afb      	ldrh	r3, [r7, #22]
}
 8016ace:	4618      	mov	r0, r3
 8016ad0:	371c      	adds	r7, #28
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad8:	4770      	bx	lr
 8016ada:	0000      	movs	r0, r0
 8016adc:	0000      	movs	r0, r0
	...

08016ae0 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016ae4:	b090      	sub	sp, #64	@ 0x40
 8016ae6:	af02      	add	r7, sp, #8
 8016ae8:	60f8      	str	r0, [r7, #12]
 8016aea:	4608      	mov	r0, r1
 8016aec:	4639      	mov	r1, r7
 8016aee:	e881 000c 	stmia.w	r1, {r2, r3}
 8016af2:	4603      	mov	r3, r0
 8016af4:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	881b      	ldrh	r3, [r3, #0]
 8016afa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016afc:	4a62      	ldr	r2, [pc, #392]	@ (8016c88 <SetMaxTimeCredits+0x1a8>)
 8016afe:	f04f 0300 	mov.w	r3, #0
 8016b02:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8016b06:	463b      	mov	r3, r7
 8016b08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b0c:	f003 fd86 	bl	801a61c <SysTimeToMs>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2200      	movs	r2, #0
 8016b14:	4698      	mov	r8, r3
 8016b16:	4691      	mov	r9, r2
 8016b18:	e9c7 8908 	strd	r8, r9, [r7, #32]
    SysTime_t timeDiff = { 0 };
 8016b1c:	f107 0310 	add.w	r3, r7, #16
 8016b20:	2200      	movs	r2, #0
 8016b22:	601a      	str	r2, [r3, #0]
 8016b24:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016b26:	7af9      	ldrb	r1, [r7, #11]
 8016b28:	463b      	mov	r3, r7
 8016b2a:	cb0c      	ldmia	r3, {r2, r3}
 8016b2c:	68f8      	ldr	r0, [r7, #12]
 8016b2e:	f7ff ff99 	bl	8016a64 <GetDutyCycle>
 8016b32:	4603      	mov	r3, r0
 8016b34:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    if( joined == false )
 8016b36:	7afb      	ldrb	r3, [r7, #11]
 8016b38:	f083 0301 	eor.w	r3, r3, #1
 8016b3c:	b2db      	uxtb	r3, r3
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d07a      	beq.n	8016c38 <SetMaxTimeCredits+0x158>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016b42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016b44:	2b64      	cmp	r3, #100	@ 0x64
 8016b46:	d10a      	bne.n	8016b5e <SetMaxTimeCredits+0x7e>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8016b48:	4a4f      	ldr	r2, [pc, #316]	@ (8016c88 <SetMaxTimeCredits+0x1a8>)
 8016b4a:	f04f 0300 	mov.w	r3, #0
 8016b4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b52:	68f9      	ldr	r1, [r7, #12]
 8016b54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016b58:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8016b5c:	e013      	b.n	8016b86 <SetMaxTimeCredits+0xa6>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016b5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016b64:	d10a      	bne.n	8016b7c <SetMaxTimeCredits+0x9c>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8016b66:	a346      	add	r3, pc, #280	@ (adr r3, 8016c80 <SetMaxTimeCredits+0x1a0>)
 8016b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
            band->LastMaxCreditAssignTime = elapsedTime;
 8016b70:	68f9      	ldr	r1, [r7, #12]
 8016b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8016b76:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8016b7a:	e004      	b.n	8016b86 <SetMaxTimeCredits+0xa6>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8016b7c:	4a43      	ldr	r2, [pc, #268]	@ (8016c8c <SetMaxTimeCredits+0x1ac>)
 8016b7e:	f04f 0300 	mov.w	r3, #0
 8016b82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016b8c:	f107 0318 	add.w	r3, r7, #24
 8016b90:	4611      	mov	r1, r2
 8016b92:	4618      	mov	r0, r3
 8016b94:	f003 fd6a 	bl	801a66c <SysTimeFromMs>
 8016b98:	f107 0010 	add.w	r0, r7, #16
 8016b9c:	69fb      	ldr	r3, [r7, #28]
 8016b9e:	9300      	str	r3, [sp, #0]
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	463a      	mov	r2, r7
 8016ba4:	ca06      	ldmia	r2, {r1, r2}
 8016ba6:	f003 fc73 	bl	801a490 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016baa:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016bae:	f083 0301 	eor.w	r3, r3, #1
 8016bb2:	b2db      	uxtb	r3, r3
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d006      	beq.n	8016bc6 <SetMaxTimeCredits+0xe6>
 8016bb8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016bbc:	f083 0301 	eor.w	r3, r3, #1
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d10c      	bne.n	8016be0 <SetMaxTimeCredits+0x100>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016bcc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8016bd0:	4299      	cmp	r1, r3
 8016bd2:	bf08      	it	eq
 8016bd4:	4290      	cmpeq	r0, r2
 8016bd6:	d103      	bne.n	8016be0 <SetMaxTimeCredits+0x100>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8016bd8:	693b      	ldr	r3, [r7, #16]
            ( band->MaxTimeCredits != maxCredits ) ||
 8016bda:	4a2d      	ldr	r2, [pc, #180]	@ (8016c90 <SetMaxTimeCredits+0x1b0>)
 8016bdc:	4293      	cmp	r3, r2
 8016bde:	d937      	bls.n	8016c50 <SetMaxTimeCredits+0x170>
        {
            band->TimeCredits = maxCredits;
 8016be0:	68f9      	ldr	r1, [r7, #12]
 8016be2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8016be6:	e9c1 2306 	strd	r2, r3, [r1, #24]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	4a29      	ldr	r2, [pc, #164]	@ (8016c94 <SetMaxTimeCredits+0x1b4>)
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	d92e      	bls.n	8016c50 <SetMaxTimeCredits+0x170>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8016bf8:	3b30      	subs	r3, #48	@ 0x30
 8016bfa:	4a27      	ldr	r2, [pc, #156]	@ (8016c98 <SetMaxTimeCredits+0x1b8>)
 8016bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8016c00:	0c1b      	lsrs	r3, r3, #16
 8016c02:	613b      	str	r3, [r7, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	4a25      	ldr	r2, [pc, #148]	@ (8016c9c <SetMaxTimeCredits+0x1bc>)
 8016c08:	fb02 f303 	mul.w	r3, r2, r3
 8016c0c:	613b      	str	r3, [r7, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8016c14:	3330      	adds	r3, #48	@ 0x30
 8016c16:	613b      	str	r3, [r7, #16]
                timeDiff.SubSeconds = 0;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	82bb      	strh	r3, [r7, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8016c1c:	f107 0310 	add.w	r3, r7, #16
 8016c20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c24:	f003 fcfa 	bl	801a61c <SysTimeToMs>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	461c      	mov	r4, r3
 8016c2e:	4615      	mov	r5, r2
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	e9c3 4504 	strd	r4, r5, [r3, #16]
 8016c36:	e00b      	b.n	8016c50 <SetMaxTimeCredits+0x170>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8016c38:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8016c3c:	f083 0301 	eor.w	r3, r3, #1
 8016c40:	b2db      	uxtb	r3, r3
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d004      	beq.n	8016c50 <SetMaxTimeCredits+0x170>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8016c46:	68f9      	ldr	r1, [r7, #12]
 8016c48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8016c4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016c56:	4313      	orrs	r3, r2
 8016c58:	d104      	bne.n	8016c64 <SetMaxTimeCredits+0x184>
    {
        band->TimeCredits = maxCredits;
 8016c5a:	68f9      	ldr	r1, [r7, #12]
 8016c5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8016c60:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8016c64:	68f9      	ldr	r1, [r7, #12]
 8016c66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8016c6a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    return dutyCycle;
 8016c6e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	3738      	adds	r7, #56	@ 0x38
 8016c74:	46bd      	mov	sp, r7
 8016c76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016c7a:	bf00      	nop
 8016c7c:	f3af 8000 	nop.w
 8016c80:	0112a880 	.word	0x0112a880
 8016c84:	00000000 	.word	0x00000000
 8016c88:	001b7740 	.word	0x001b7740
 8016c8c:	02932e00 	.word	0x02932e00
 8016c90:	0001517f 	.word	0x0001517f
 8016c94:	0001ec2f 	.word	0x0001ec2f
 8016c98:	c22e4507 	.word	0xc22e4507
 8016c9c:	00015180 	.word	0x00015180

08016ca0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8016ca0:	b5b0      	push	{r4, r5, r7, lr}
 8016ca2:	b086      	sub	sp, #24
 8016ca4:	af02      	add	r7, sp, #8
 8016ca6:	6078      	str	r0, [r7, #4]
 8016ca8:	4608      	mov	r0, r1
 8016caa:	4611      	mov	r1, r2
 8016cac:	461a      	mov	r2, r3
 8016cae:	4603      	mov	r3, r0
 8016cb0:	70fb      	strb	r3, [r7, #3]
 8016cb2:	460b      	mov	r3, r1
 8016cb4:	70bb      	strb	r3, [r7, #2]
 8016cb6:	4613      	mov	r3, r2
 8016cb8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016cba:	78f9      	ldrb	r1, [r7, #3]
 8016cbc:	787b      	ldrb	r3, [r7, #1]
 8016cbe:	9301      	str	r3, [sp, #4]
 8016cc0:	78bb      	ldrb	r3, [r7, #2]
 8016cc2:	9300      	str	r3, [sp, #0]
 8016cc4:	f107 0320 	add.w	r3, r7, #32
 8016cc8:	cb0c      	ldmia	r3, {r2, r3}
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f7ff ff08 	bl	8016ae0 <SetMaxTimeCredits>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016cd4:	78fb      	ldrb	r3, [r7, #3]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d00f      	beq.n	8016cfa <UpdateTimeCredits+0x5a>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8016ce0:	4610      	mov	r0, r2
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	f003 ff20 	bl	801ab28 <UTIL_TIMER_GetElapsedTime>
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016cee:	1884      	adds	r4, r0, r2
 8016cf0:	eb41 0503 	adc.w	r5, r1, r3
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	e9c3 4506 	strd	r4, r5, [r3, #24]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016d00:	6879      	ldr	r1, [r7, #4]
 8016d02:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8016d06:	4290      	cmp	r0, r2
 8016d08:	eb71 0303 	sbcs.w	r3, r1, r3
 8016d0c:	d205      	bcs.n	8016d1a <UpdateTimeCredits+0x7a>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016d14:	6879      	ldr	r1, [r7, #4]
 8016d16:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016d1a:	6879      	ldr	r1, [r7, #4]
 8016d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8016d20:	e9c1 2302 	strd	r2, r3, [r1, #8]

    return dutyCycle;
 8016d24:	89fb      	ldrh	r3, [r7, #14]
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3710      	adds	r7, #16
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bdb0      	pop	{r4, r5, r7, pc}

08016d2e <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016d2e:	b480      	push	{r7}
 8016d30:	b085      	sub	sp, #20
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	4603      	mov	r3, r0
 8016d36:	460a      	mov	r2, r1
 8016d38:	80fb      	strh	r3, [r7, #6]
 8016d3a:	4613      	mov	r3, r2
 8016d3c:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016d42:	2300      	movs	r3, #0
 8016d44:	73bb      	strb	r3, [r7, #14]
 8016d46:	e011      	b.n	8016d6c <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8016d48:	88fa      	ldrh	r2, [r7, #6]
 8016d4a:	7bbb      	ldrb	r3, [r7, #14]
 8016d4c:	2101      	movs	r1, #1
 8016d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8016d52:	401a      	ands	r2, r3
 8016d54:	7bbb      	ldrb	r3, [r7, #14]
 8016d56:	2101      	movs	r1, #1
 8016d58:	fa01 f303 	lsl.w	r3, r1, r3
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d102      	bne.n	8016d66 <CountChannels+0x38>
        {
            nbActiveBits++;
 8016d60:	7bfb      	ldrb	r3, [r7, #15]
 8016d62:	3301      	adds	r3, #1
 8016d64:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8016d66:	7bbb      	ldrb	r3, [r7, #14]
 8016d68:	3301      	adds	r3, #1
 8016d6a:	73bb      	strb	r3, [r7, #14]
 8016d6c:	7bba      	ldrb	r2, [r7, #14]
 8016d6e:	797b      	ldrb	r3, [r7, #5]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d3e9      	bcc.n	8016d48 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8016d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d76:	4618      	mov	r0, r3
 8016d78:	3714      	adds	r7, #20
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d80:	4770      	bx	lr

08016d82 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8016d82:	b580      	push	{r7, lr}
 8016d84:	b084      	sub	sp, #16
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	6039      	str	r1, [r7, #0]
 8016d8a:	4611      	mov	r1, r2
 8016d8c:	461a      	mov	r2, r3
 8016d8e:	4603      	mov	r3, r0
 8016d90:	71fb      	strb	r3, [r7, #7]
 8016d92:	460b      	mov	r3, r1
 8016d94:	71bb      	strb	r3, [r7, #6]
 8016d96:	4613      	mov	r3, r2
 8016d98:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8016d9a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8016d9e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8016da2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f000 f85d 	bl	8016e66 <RegionCommonValueInRange>
 8016dac:	4603      	mov	r3, r0
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d101      	bne.n	8016db6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8016db2:	2300      	movs	r3, #0
 8016db4:	e053      	b.n	8016e5e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016db6:	2300      	movs	r3, #0
 8016db8:	73fb      	strb	r3, [r7, #15]
 8016dba:	2300      	movs	r3, #0
 8016dbc:	73bb      	strb	r3, [r7, #14]
 8016dbe:	e049      	b.n	8016e54 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	737b      	strb	r3, [r7, #13]
 8016dc4:	e03d      	b.n	8016e42 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016dc6:	7bbb      	ldrb	r3, [r7, #14]
 8016dc8:	005b      	lsls	r3, r3, #1
 8016dca:	683a      	ldr	r2, [r7, #0]
 8016dcc:	4413      	add	r3, r2
 8016dce:	881b      	ldrh	r3, [r3, #0]
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	7b7b      	ldrb	r3, [r7, #13]
 8016dd4:	fa42 f303 	asr.w	r3, r2, r3
 8016dd8:	f003 0301 	and.w	r3, r3, #1
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d02d      	beq.n	8016e3c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016de0:	7bfa      	ldrb	r2, [r7, #15]
 8016de2:	7b7b      	ldrb	r3, [r7, #13]
 8016de4:	4413      	add	r3, r2
 8016de6:	461a      	mov	r2, r3
 8016de8:	4613      	mov	r3, r2
 8016dea:	005b      	lsls	r3, r3, #1
 8016dec:	4413      	add	r3, r2
 8016dee:	009b      	lsls	r3, r3, #2
 8016df0:	461a      	mov	r2, r3
 8016df2:	69fb      	ldr	r3, [r7, #28]
 8016df4:	4413      	add	r3, r2
 8016df6:	7a1b      	ldrb	r3, [r3, #8]
 8016df8:	f343 0303 	sbfx	r3, r3, #0, #4
 8016dfc:	b25b      	sxtb	r3, r3
 8016dfe:	f003 030f 	and.w	r3, r3, #15
 8016e02:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016e04:	7bfa      	ldrb	r2, [r7, #15]
 8016e06:	7b7b      	ldrb	r3, [r7, #13]
 8016e08:	4413      	add	r3, r2
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	4613      	mov	r3, r2
 8016e0e:	005b      	lsls	r3, r3, #1
 8016e10:	4413      	add	r3, r2
 8016e12:	009b      	lsls	r3, r3, #2
 8016e14:	461a      	mov	r2, r3
 8016e16:	69fb      	ldr	r3, [r7, #28]
 8016e18:	4413      	add	r3, r2
 8016e1a:	7a1b      	ldrb	r3, [r3, #8]
 8016e1c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016e20:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016e22:	f003 030f 	and.w	r3, r3, #15
 8016e26:	b25a      	sxtb	r2, r3
 8016e28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f000 f81a 	bl	8016e66 <RegionCommonValueInRange>
 8016e32:	4603      	mov	r3, r0
 8016e34:	2b01      	cmp	r3, #1
 8016e36:	d101      	bne.n	8016e3c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	e010      	b.n	8016e5e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8016e3c:	7b7b      	ldrb	r3, [r7, #13]
 8016e3e:	3301      	adds	r3, #1
 8016e40:	737b      	strb	r3, [r7, #13]
 8016e42:	7b7b      	ldrb	r3, [r7, #13]
 8016e44:	2b0f      	cmp	r3, #15
 8016e46:	d9be      	bls.n	8016dc6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016e48:	7bfb      	ldrb	r3, [r7, #15]
 8016e4a:	3310      	adds	r3, #16
 8016e4c:	73fb      	strb	r3, [r7, #15]
 8016e4e:	7bbb      	ldrb	r3, [r7, #14]
 8016e50:	3301      	adds	r3, #1
 8016e52:	73bb      	strb	r3, [r7, #14]
 8016e54:	7bfa      	ldrb	r2, [r7, #15]
 8016e56:	79fb      	ldrb	r3, [r7, #7]
 8016e58:	429a      	cmp	r2, r3
 8016e5a:	d3b1      	bcc.n	8016dc0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8016e5c:	2300      	movs	r3, #0
}
 8016e5e:	4618      	mov	r0, r3
 8016e60:	3710      	adds	r7, #16
 8016e62:	46bd      	mov	sp, r7
 8016e64:	bd80      	pop	{r7, pc}

08016e66 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8016e66:	b480      	push	{r7}
 8016e68:	b083      	sub	sp, #12
 8016e6a:	af00      	add	r7, sp, #0
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	71fb      	strb	r3, [r7, #7]
 8016e70:	460b      	mov	r3, r1
 8016e72:	71bb      	strb	r3, [r7, #6]
 8016e74:	4613      	mov	r3, r2
 8016e76:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8016e78:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016e7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016e80:	429a      	cmp	r2, r3
 8016e82:	db07      	blt.n	8016e94 <RegionCommonValueInRange+0x2e>
 8016e84:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016e88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016e8c:	429a      	cmp	r2, r3
 8016e8e:	dc01      	bgt.n	8016e94 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8016e90:	2301      	movs	r3, #1
 8016e92:	e000      	b.n	8016e96 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8016e94:	2300      	movs	r3, #0
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	370c      	adds	r7, #12
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea0:	4770      	bx	lr

08016ea2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8016ea2:	b480      	push	{r7}
 8016ea4:	b085      	sub	sp, #20
 8016ea6:	af00      	add	r7, sp, #0
 8016ea8:	6078      	str	r0, [r7, #4]
 8016eaa:	460b      	mov	r3, r1
 8016eac:	70fb      	strb	r3, [r7, #3]
 8016eae:	4613      	mov	r3, r2
 8016eb0:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8016eb2:	78fb      	ldrb	r3, [r7, #3]
 8016eb4:	091b      	lsrs	r3, r3, #4
 8016eb6:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8016eb8:	78bb      	ldrb	r3, [r7, #2]
 8016eba:	091b      	lsrs	r3, r3, #4
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	7bfa      	ldrb	r2, [r7, #15]
 8016ec0:	429a      	cmp	r2, r3
 8016ec2:	d803      	bhi.n	8016ecc <RegionCommonChanDisable+0x2a>
 8016ec4:	78fa      	ldrb	r2, [r7, #3]
 8016ec6:	78bb      	ldrb	r3, [r7, #2]
 8016ec8:	429a      	cmp	r2, r3
 8016eca:	d301      	bcc.n	8016ed0 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	e017      	b.n	8016f00 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8016ed0:	7bfb      	ldrb	r3, [r7, #15]
 8016ed2:	005b      	lsls	r3, r3, #1
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	4413      	add	r3, r2
 8016ed8:	881b      	ldrh	r3, [r3, #0]
 8016eda:	b21a      	sxth	r2, r3
 8016edc:	78fb      	ldrb	r3, [r7, #3]
 8016ede:	f003 030f 	and.w	r3, r3, #15
 8016ee2:	2101      	movs	r1, #1
 8016ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8016ee8:	b21b      	sxth	r3, r3
 8016eea:	43db      	mvns	r3, r3
 8016eec:	b21b      	sxth	r3, r3
 8016eee:	4013      	ands	r3, r2
 8016ef0:	b219      	sxth	r1, r3
 8016ef2:	7bfb      	ldrb	r3, [r7, #15]
 8016ef4:	005b      	lsls	r3, r3, #1
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	4413      	add	r3, r2
 8016efa:	b28a      	uxth	r2, r1
 8016efc:	801a      	strh	r2, [r3, #0]

    return true;
 8016efe:	2301      	movs	r3, #1
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3714      	adds	r7, #20
 8016f04:	46bd      	mov	sp, r7
 8016f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0a:	4770      	bx	lr

08016f0c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b084      	sub	sp, #16
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	460b      	mov	r3, r1
 8016f16:	70fb      	strb	r3, [r7, #3]
 8016f18:	4613      	mov	r3, r2
 8016f1a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d101      	bne.n	8016f2a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016f26:	2300      	movs	r3, #0
 8016f28:	e018      	b.n	8016f5c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016f2a:	78fb      	ldrb	r3, [r7, #3]
 8016f2c:	73bb      	strb	r3, [r7, #14]
 8016f2e:	e010      	b.n	8016f52 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8016f30:	7bbb      	ldrb	r3, [r7, #14]
 8016f32:	005b      	lsls	r3, r3, #1
 8016f34:	687a      	ldr	r2, [r7, #4]
 8016f36:	4413      	add	r3, r2
 8016f38:	881b      	ldrh	r3, [r3, #0]
 8016f3a:	2110      	movs	r1, #16
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7ff fef6 	bl	8016d2e <CountChannels>
 8016f42:	4603      	mov	r3, r0
 8016f44:	461a      	mov	r2, r3
 8016f46:	7bfb      	ldrb	r3, [r7, #15]
 8016f48:	4413      	add	r3, r2
 8016f4a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016f4c:	7bbb      	ldrb	r3, [r7, #14]
 8016f4e:	3301      	adds	r3, #1
 8016f50:	73bb      	strb	r3, [r7, #14]
 8016f52:	7bba      	ldrb	r2, [r7, #14]
 8016f54:	78bb      	ldrb	r3, [r7, #2]
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d3ea      	bcc.n	8016f30 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	3710      	adds	r7, #16
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd80      	pop	{r7, pc}

08016f64 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8016f64:	b480      	push	{r7}
 8016f66:	b087      	sub	sp, #28
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	60f8      	str	r0, [r7, #12]
 8016f6c:	60b9      	str	r1, [r7, #8]
 8016f6e:	4613      	mov	r3, r2
 8016f70:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d016      	beq.n	8016fa6 <RegionCommonChanMaskCopy+0x42>
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d013      	beq.n	8016fa6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8016f7e:	2300      	movs	r3, #0
 8016f80:	75fb      	strb	r3, [r7, #23]
 8016f82:	e00c      	b.n	8016f9e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8016f84:	7dfb      	ldrb	r3, [r7, #23]
 8016f86:	005b      	lsls	r3, r3, #1
 8016f88:	68ba      	ldr	r2, [r7, #8]
 8016f8a:	441a      	add	r2, r3
 8016f8c:	7dfb      	ldrb	r3, [r7, #23]
 8016f8e:	005b      	lsls	r3, r3, #1
 8016f90:	68f9      	ldr	r1, [r7, #12]
 8016f92:	440b      	add	r3, r1
 8016f94:	8812      	ldrh	r2, [r2, #0]
 8016f96:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8016f98:	7dfb      	ldrb	r3, [r7, #23]
 8016f9a:	3301      	adds	r3, #1
 8016f9c:	75fb      	strb	r3, [r7, #23]
 8016f9e:	7dfa      	ldrb	r2, [r7, #23]
 8016fa0:	79fb      	ldrb	r3, [r7, #7]
 8016fa2:	429a      	cmp	r2, r3
 8016fa4:	d3ee      	bcc.n	8016f84 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016fa6:	bf00      	nop
 8016fa8:	371c      	adds	r7, #28
 8016faa:	46bd      	mov	sp, r7
 8016fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb0:	4770      	bx	lr

08016fb2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016fb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fb6:	b08b      	sub	sp, #44	@ 0x2c
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	61f8      	str	r0, [r7, #28]
 8016fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8016fc0:	f897 1050 	ldrb.w	r1, [r7, #80]	@ 0x50
 8016fc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016fc8:	cb0c      	ldmia	r3, {r2, r3}
 8016fca:	69f8      	ldr	r0, [r7, #28]
 8016fcc:	f7ff fd4a 	bl	8016a64 <GetDutyCycle>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016fda:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8016fdc:	2000      	movs	r0, #0
 8016fde:	60b9      	str	r1, [r7, #8]
 8016fe0:	60f8      	str	r0, [r7, #12]
 8016fe2:	6939      	ldr	r1, [r7, #16]
 8016fe4:	68f8      	ldr	r0, [r7, #12]
 8016fe6:	fb00 f001 	mul.w	r0, r0, r1
 8016fea:	6979      	ldr	r1, [r7, #20]
 8016fec:	68be      	ldr	r6, [r7, #8]
 8016fee:	fb06 f101 	mul.w	r1, r6, r1
 8016ff2:	4401      	add	r1, r0
 8016ff4:	6938      	ldr	r0, [r7, #16]
 8016ff6:	68be      	ldr	r6, [r7, #8]
 8016ff8:	fba0 8906 	umull	r8, r9, r0, r6
 8016ffc:	4449      	add	r1, r9
 8016ffe:	4689      	mov	r9, r1
 8017000:	4590      	cmp	r8, r2
 8017002:	eb79 0303 	sbcs.w	r3, r9, r3
 8017006:	d21d      	bcs.n	8017044 <RegionCommonSetBandTxDone+0x92>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017008:	69fb      	ldr	r3, [r7, #28]
 801700a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801700e:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8017010:	2000      	movs	r0, #0
 8017012:	468a      	mov	sl, r1
 8017014:	4683      	mov	fp, r0
 8017016:	6939      	ldr	r1, [r7, #16]
 8017018:	fb0b f001 	mul.w	r0, fp, r1
 801701c:	6979      	ldr	r1, [r7, #20]
 801701e:	fb0a f101 	mul.w	r1, sl, r1
 8017022:	4401      	add	r1, r0
 8017024:	6938      	ldr	r0, [r7, #16]
 8017026:	fba0 450a 	umull	r4, r5, r0, sl
 801702a:	4429      	add	r1, r5
 801702c:	460d      	mov	r5, r1
 801702e:	1b11      	subs	r1, r2, r4
 8017030:	6039      	str	r1, [r7, #0]
 8017032:	eb63 0305 	sbc.w	r3, r3, r5
 8017036:	607b      	str	r3, [r7, #4]
 8017038:	69fb      	ldr	r3, [r7, #28]
 801703a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801703e:	e9c3 1206 	strd	r1, r2, [r3, #24]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017042:	e006      	b.n	8017052 <RegionCommonSetBandTxDone+0xa0>
        band->TimeCredits = 0;
 8017044:	69f9      	ldr	r1, [r7, #28]
 8017046:	f04f 0200 	mov.w	r2, #0
 801704a:	f04f 0300 	mov.w	r3, #0
 801704e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8017052:	bf00      	nop
 8017054:	372c      	adds	r7, #44	@ 0x2c
 8017056:	46bd      	mov	sp, r7
 8017058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801705c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017060:	b097      	sub	sp, #92	@ 0x5c
 8017062:	af04      	add	r7, sp, #16
 8017064:	6139      	str	r1, [r7, #16]
 8017066:	4611      	mov	r1, r2
 8017068:	461a      	mov	r2, r3
 801706a:	4603      	mov	r3, r0
 801706c:	75fb      	strb	r3, [r7, #23]
 801706e:	460b      	mov	r3, r1
 8017070:	75bb      	strb	r3, [r7, #22]
 8017072:	4613      	mov	r3, r2
 8017074:	757b      	strb	r3, [r7, #21]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017076:	f04f 32ff 	mov.w	r2, #4294967295
 801707a:	f04f 0300 	mov.w	r3, #0
 801707e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017082:	f003 fd3b 	bl	801aafc <UTIL_TIMER_GetCurrentTime>
 8017086:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    TimerTime_t creditCosts = 0;
 801708a:	f04f 0200 	mov.w	r2, #0
 801708e:	f04f 0300 	mov.w	r3, #0
 8017092:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    uint16_t dutyCycle = 1;
 8017096:	2301      	movs	r3, #1
 8017098:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t validBands = 0;
 801709a:	2300      	movs	r3, #0
 801709c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    for( uint8_t i = 0; i < nbBands; i++ )
 80170a0:	2300      	movs	r3, #0
 80170a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80170a6:	e0ed      	b.n	8017284 <RegionCommonUpdateBandTimeOff+0x228>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80170a8:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80170ac:	4613      	mov	r3, r2
 80170ae:	005b      	lsls	r3, r3, #1
 80170b0:	4413      	add	r3, r2
 80170b2:	011b      	lsls	r3, r3, #4
 80170b4:	461a      	mov	r2, r3
 80170b6:	693b      	ldr	r3, [r7, #16]
 80170b8:	189e      	adds	r6, r3, r2
 80170ba:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80170be:	607b      	str	r3, [r7, #4]
 80170c0:	f897 e015 	ldrb.w	lr, [r7, #21]
 80170c4:	f897 c017 	ldrb.w	ip, [r7, #23]
 80170c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80170cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80170d0:	466a      	mov	r2, sp
 80170d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80170d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80170da:	e882 0003 	stmia.w	r2, {r0, r1}
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	4672      	mov	r2, lr
 80170e2:	4661      	mov	r1, ip
 80170e4:	4630      	mov	r0, r6
 80170e6:	f7ff fddb 	bl	8016ca0 <UpdateTimeCredits>
 80170ea:	4603      	mov	r3, r0
 80170ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80170ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80170f0:	2200      	movs	r2, #0
 80170f2:	469a      	mov	sl, r3
 80170f4:	4693      	mov	fp, r2
 80170f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80170fa:	fb0a f203 	mul.w	r2, sl, r3
 80170fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017102:	fb0b f303 	mul.w	r3, fp, r3
 8017106:	4413      	add	r3, r2
 8017108:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801710c:	fba2 450a 	umull	r4, r5, r2, sl
 8017110:	442b      	add	r3, r5
 8017112:	461d      	mov	r5, r3
 8017114:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 8017118:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801711c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8017120:	4613      	mov	r3, r2
 8017122:	005b      	lsls	r3, r3, #1
 8017124:	4413      	add	r3, r2
 8017126:	011b      	lsls	r3, r3, #4
 8017128:	461a      	mov	r2, r3
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	4413      	add	r3, r2
 801712e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8017132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8017136:	4290      	cmp	r0, r2
 8017138:	eb71 0303 	sbcs.w	r3, r1, r3
 801713c:	d208      	bcs.n	8017150 <RegionCommonUpdateBandTimeOff+0xf4>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801713e:	7d7b      	ldrb	r3, [r7, #21]
 8017140:	f083 0301 	eor.w	r3, r3, #1
 8017144:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017146:	2b00      	cmp	r3, #0
 8017148:	d014      	beq.n	8017174 <RegionCommonUpdateBandTimeOff+0x118>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801714a:	7dfb      	ldrb	r3, [r7, #23]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d011      	beq.n	8017174 <RegionCommonUpdateBandTimeOff+0x118>
        {
            bands[i].ReadyForTransmission = true;
 8017150:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8017154:	4613      	mov	r3, r2
 8017156:	005b      	lsls	r3, r3, #1
 8017158:	4413      	add	r3, r2
 801715a:	011b      	lsls	r3, r3, #4
 801715c:	461a      	mov	r2, r3
 801715e:	693b      	ldr	r3, [r7, #16]
 8017160:	4413      	add	r3, r2
 8017162:	2201      	movs	r2, #1
 8017164:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017168:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801716c:	3301      	adds	r3, #1
 801716e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8017172:	e082      	b.n	801727a <RegionCommonUpdateBandTimeOff+0x21e>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017174:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8017178:	4613      	mov	r3, r2
 801717a:	005b      	lsls	r3, r3, #1
 801717c:	4413      	add	r3, r2
 801717e:	011b      	lsls	r3, r3, #4
 8017180:	461a      	mov	r2, r3
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	4413      	add	r3, r2
 8017186:	2200      	movs	r2, #0
 8017188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

            if( bands[i].MaxTimeCredits >= creditCosts )
 801718c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8017190:	4613      	mov	r3, r2
 8017192:	005b      	lsls	r3, r3, #1
 8017194:	4413      	add	r3, r2
 8017196:	011b      	lsls	r3, r3, #4
 8017198:	461a      	mov	r2, r3
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	4413      	add	r3, r2
 801719e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80171a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80171a6:	4290      	cmp	r0, r2
 80171a8:	eb71 0303 	sbcs.w	r3, r1, r3
 80171ac:	d31f      	bcc.n	80171ee <RegionCommonUpdateBandTimeOff+0x192>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80171ae:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80171b2:	4613      	mov	r3, r2
 80171b4:	005b      	lsls	r3, r3, #1
 80171b6:	4413      	add	r3, r2
 80171b8:	011b      	lsls	r3, r3, #4
 80171ba:	461a      	mov	r2, r3
 80171bc:	693b      	ldr	r3, [r7, #16]
 80171be:	4413      	add	r3, r2
 80171c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80171c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80171c8:	ebb0 0802 	subs.w	r8, r0, r2
 80171cc:	eb61 0903 	sbc.w	r9, r1, r3
 80171d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80171d4:	4590      	cmp	r8, r2
 80171d6:	eb79 0103 	sbcs.w	r1, r9, r3
 80171da:	d201      	bcs.n	80171e0 <RegionCommonUpdateBandTimeOff+0x184>
 80171dc:	4642      	mov	r2, r8
 80171de:	464b      	mov	r3, r9
 80171e0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80171e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80171e8:	3301      	adds	r3, #1
 80171ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80171ee:	7dfb      	ldrb	r3, [r7, #23]
 80171f0:	f083 0301 	eor.w	r3, r3, #1
 80171f4:	b2db      	uxtb	r3, r3
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d03f      	beq.n	801727a <RegionCommonUpdateBandTimeOff+0x21e>
            {
                SysTime_t backoffTimeRange = {
 80171fa:	2300      	movs	r3, #0
 80171fc:	61fb      	str	r3, [r7, #28]
 80171fe:	2300      	movs	r3, #0
 8017200:	843b      	strh	r3, [r7, #32]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017202:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017204:	2b64      	cmp	r3, #100	@ 0x64
 8017206:	d103      	bne.n	8017210 <RegionCommonUpdateBandTimeOff+0x1b4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017208:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801720c:	61fb      	str	r3, [r7, #28]
 801720e:	e009      	b.n	8017224 <RegionCommonUpdateBandTimeOff+0x1c8>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017210:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8017216:	d103      	bne.n	8017220 <RegionCommonUpdateBandTimeOff+0x1c4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017218:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 801721c:	61fb      	str	r3, [r7, #28]
 801721e:	e001      	b.n	8017224 <RegionCommonUpdateBandTimeOff+0x1c8>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017220:	4b24      	ldr	r3, [pc, #144]	@ (80172b4 <RegionCommonUpdateBandTimeOff+0x258>)
 8017222:	61fb      	str	r3, [r7, #28]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017224:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017226:	4a23      	ldr	r2, [pc, #140]	@ (80172b4 <RegionCommonUpdateBandTimeOff+0x258>)
 8017228:	4293      	cmp	r3, r2
 801722a:	d90e      	bls.n	801724a <RegionCommonUpdateBandTimeOff+0x1ee>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801722c:	69fa      	ldr	r2, [r7, #28]
 801722e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017230:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8017234:	3b30      	subs	r3, #48	@ 0x30
 8017236:	4920      	ldr	r1, [pc, #128]	@ (80172b8 <RegionCommonUpdateBandTimeOff+0x25c>)
 8017238:	fba1 1303 	umull	r1, r3, r1, r3
 801723c:	0c1b      	lsrs	r3, r3, #16
 801723e:	3301      	adds	r3, #1
 8017240:	491e      	ldr	r1, [pc, #120]	@ (80172bc <RegionCommonUpdateBandTimeOff+0x260>)
 8017242:	fb01 f303 	mul.w	r3, r1, r3
 8017246:	4413      	add	r3, r2
 8017248:	61fb      	str	r3, [r7, #28]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801724a:	f107 001c 	add.w	r0, r7, #28
 801724e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017250:	9300      	str	r3, [sp, #0]
 8017252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017254:	f107 021c 	add.w	r2, r7, #28
 8017258:	ca06      	ldmia	r2, {r1, r2}
 801725a:	f003 f919 	bl	801a490 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801725e:	f107 031c 	add.w	r3, r7, #28
 8017262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017266:	f003 f9d9 	bl	801a61c <SysTimeToMs>
 801726a:	4603      	mov	r3, r0
 801726c:	2200      	movs	r2, #0
 801726e:	60bb      	str	r3, [r7, #8]
 8017270:	60fa      	str	r2, [r7, #12]
 8017272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017276:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    for( uint8_t i = 0; i < nbBands; i++ )
 801727a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801727e:	3301      	adds	r3, #1
 8017280:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8017284:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8017288:	7dbb      	ldrb	r3, [r7, #22]
 801728a:	429a      	cmp	r2, r3
 801728c:	f4ff af0c 	bcc.w	80170a8 <RegionCommonUpdateBandTimeOff+0x4c>
            }
        }
    }

    if( validBands == 0 )
 8017290:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017294:	2b00      	cmp	r3, #0
 8017296:	d104      	bne.n	80172a2 <RegionCommonUpdateBandTimeOff+0x246>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017298:	f04f 32ff 	mov.w	r2, #4294967295
 801729c:	f04f 0300 	mov.w	r3, #0
 80172a0:	e001      	b.n	80172a6 <RegionCommonUpdateBandTimeOff+0x24a>
    }
    return minTimeToWait;
 80172a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
}
 80172a6:	4610      	mov	r0, r2
 80172a8:	4619      	mov	r1, r3
 80172aa:	374c      	adds	r7, #76	@ 0x4c
 80172ac:	46bd      	mov	sp, r7
 80172ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b2:	bf00      	nop
 80172b4:	0001ec30 	.word	0x0001ec30
 80172b8:	c22e4507 	.word	0xc22e4507
 80172bc:	00015180 	.word	0x00015180

080172c0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80172c0:	b480      	push	{r7}
 80172c2:	b085      	sub	sp, #20
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80172ca:	2300      	movs	r3, #0
 80172cc:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	2b03      	cmp	r3, #3
 80172d4:	d13f      	bne.n	8017356 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	3301      	adds	r3, #1
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	b25a      	sxtb	r2, r3
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80172e2:	683b      	ldr	r3, [r7, #0]
 80172e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172e8:	f003 030f 	and.w	r3, r3, #15
 80172ec:	b25a      	sxtb	r2, r3
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	091b      	lsrs	r3, r3, #4
 80172fc:	b2db      	uxtb	r3, r3
 80172fe:	b25a      	sxtb	r2, r3
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	3302      	adds	r3, #2
 8017308:	781b      	ldrb	r3, [r3, #0]
 801730a:	461a      	mov	r2, r3
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017310:	683b      	ldr	r3, [r7, #0]
 8017312:	889b      	ldrh	r3, [r3, #4]
 8017314:	b21a      	sxth	r2, r3
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	3303      	adds	r3, #3
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	021b      	lsls	r3, r3, #8
 801731e:	b21b      	sxth	r3, r3
 8017320:	4313      	orrs	r3, r2
 8017322:	b21b      	sxth	r3, r3
 8017324:	b29a      	uxth	r2, r3
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	791a      	ldrb	r2, [r3, #4]
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	091b      	lsrs	r3, r3, #4
 8017338:	b2db      	uxtb	r3, r3
 801733a:	f003 0307 	and.w	r3, r3, #7
 801733e:	b2da      	uxtb	r2, r3
 8017340:	683b      	ldr	r3, [r7, #0]
 8017342:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	f003 030f 	and.w	r3, r3, #15
 801734c:	b2da      	uxtb	r2, r3
 801734e:	683b      	ldr	r3, [r7, #0]
 8017350:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017352:	2305      	movs	r3, #5
 8017354:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017356:	7bfb      	ldrb	r3, [r7, #15]
}
 8017358:	4618      	mov	r0, r3
 801735a:	3714      	adds	r7, #20
 801735c:	46bd      	mov	sp, r7
 801735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017362:	4770      	bx	lr

08017364 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017364:	b5b0      	push	{r4, r5, r7, lr}
 8017366:	b088      	sub	sp, #32
 8017368:	af02      	add	r7, sp, #8
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	60b9      	str	r1, [r7, #8]
 801736e:	607a      	str	r2, [r7, #4]
 8017370:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	791b      	ldrb	r3, [r3, #4]
 8017376:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	799b      	ldrb	r3, [r3, #6]
 801737c:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	79db      	ldrb	r3, [r3, #7]
 8017382:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	7a1b      	ldrb	r3, [r3, #8]
 8017388:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	795b      	ldrb	r3, [r3, #5]
 801738e:	f083 0301 	eor.w	r3, r3, #1
 8017392:	b2db      	uxtb	r3, r3
 8017394:	2b00      	cmp	r3, #0
 8017396:	d008      	beq.n	80173aa <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	7adb      	ldrb	r3, [r3, #11]
 801739c:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	7a5b      	ldrb	r3, [r3, #9]
 80173a2:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	7a9b      	ldrb	r3, [r3, #10]
 80173a8:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80173aa:	7dfb      	ldrb	r3, [r7, #23]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d04a      	beq.n	8017446 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80173b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80173b4:	2b0f      	cmp	r3, #15
 80173b6:	d103      	bne.n	80173c0 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	7a5b      	ldrb	r3, [r3, #9]
 80173bc:	75bb      	strb	r3, [r7, #22]
 80173be:	e01d      	b.n	80173fc <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	7b18      	ldrb	r0, [r3, #12]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	6919      	ldr	r1, [r3, #16]
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80173d4:	68fa      	ldr	r2, [r7, #12]
 80173d6:	6992      	ldr	r2, [r2, #24]
 80173d8:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80173dc:	9201      	str	r2, [sp, #4]
 80173de:	9300      	str	r3, [sp, #0]
 80173e0:	462b      	mov	r3, r5
 80173e2:	4622      	mov	r2, r4
 80173e4:	f7ff fccd 	bl	8016d82 <RegionCommonChanVerifyDr>
 80173e8:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80173ea:	f083 0301 	eor.w	r3, r3, #1
 80173ee:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d003      	beq.n	80173fc <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80173f4:	7dfb      	ldrb	r3, [r7, #23]
 80173f6:	f023 0302 	bic.w	r3, r3, #2
 80173fa:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80173fc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017400:	2b0f      	cmp	r3, #15
 8017402:	d103      	bne.n	801740c <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	7a9b      	ldrb	r3, [r3, #10]
 8017408:	757b      	strb	r3, [r7, #21]
 801740a:	e01c      	b.n	8017446 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017418:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801741c:	4618      	mov	r0, r3
 801741e:	f7ff fd22 	bl	8016e66 <RegionCommonValueInRange>
 8017422:	4603      	mov	r3, r0
 8017424:	2b00      	cmp	r3, #0
 8017426:	d10e      	bne.n	8017446 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801742e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017432:	429a      	cmp	r2, r3
 8017434:	da03      	bge.n	801743e <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	7f5b      	ldrb	r3, [r3, #29]
 801743a:	757b      	strb	r3, [r7, #21]
 801743c:	e003      	b.n	8017446 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801743e:	7dfb      	ldrb	r3, [r7, #23]
 8017440:	f023 0304 	bic.w	r3, r3, #4
 8017444:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017446:	7dfb      	ldrb	r3, [r7, #23]
 8017448:	2b07      	cmp	r3, #7
 801744a:	d105      	bne.n	8017458 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801744c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d101      	bne.n	8017458 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017454:	2301      	movs	r3, #1
 8017456:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	7dba      	ldrb	r2, [r7, #22]
 801745c:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	7d7a      	ldrb	r2, [r7, #21]
 8017462:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017464:	7d3a      	ldrb	r2, [r7, #20]
 8017466:	683b      	ldr	r3, [r7, #0]
 8017468:	701a      	strb	r2, [r3, #0]

    return status;
 801746a:	7dfb      	ldrb	r3, [r7, #23]
}
 801746c:	4618      	mov	r0, r3
 801746e:	3718      	adds	r7, #24
 8017470:	46bd      	mov	sp, r7
 8017472:	bdb0      	pop	{r4, r5, r7, pc}

08017474 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017474:	b480      	push	{r7}
 8017476:	b083      	sub	sp, #12
 8017478:	af00      	add	r7, sp, #0
 801747a:	4603      	mov	r3, r0
 801747c:	6039      	str	r1, [r7, #0]
 801747e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017480:	79fb      	ldrb	r3, [r7, #7]
 8017482:	4a06      	ldr	r2, [pc, #24]	@ (801749c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017484:	fa02 f303 	lsl.w	r3, r2, r3
 8017488:	461a      	mov	r2, r3
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017490:	4618      	mov	r0, r3
 8017492:	370c      	adds	r7, #12
 8017494:	46bd      	mov	sp, r7
 8017496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749a:	4770      	bx	lr
 801749c:	000f4240 	.word	0x000f4240

080174a0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80174a0:	b480      	push	{r7}
 80174a2:	b083      	sub	sp, #12
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	4603      	mov	r3, r0
 80174a8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80174aa:	79fb      	ldrb	r3, [r7, #7]
 80174ac:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80174b0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	370c      	adds	r7, #12
 80174b8:	46bd      	mov	sp, r7
 80174ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174be:	4770      	bx	lr

080174c0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80174c0:	b480      	push	{r7}
 80174c2:	b085      	sub	sp, #20
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	60f8      	str	r0, [r7, #12]
 80174c8:	607a      	str	r2, [r7, #4]
 80174ca:	603b      	str	r3, [r7, #0]
 80174cc:	460b      	mov	r3, r1
 80174ce:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80174d0:	7afa      	ldrb	r2, [r7, #11]
 80174d2:	7afb      	ldrb	r3, [r7, #11]
 80174d4:	3b04      	subs	r3, #4
 80174d6:	4619      	mov	r1, r3
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	fb03 f101 	mul.w	r1, r3, r1
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80174e4:	fb00 f303 	mul.w	r3, r0, r3
 80174e8:	440b      	add	r3, r1
 80174ea:	005b      	lsls	r3, r3, #1
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d013      	beq.n	8017518 <RegionCommonComputeRxWindowParameters+0x58>
 80174f0:	7afb      	ldrb	r3, [r7, #11]
 80174f2:	3b04      	subs	r3, #4
 80174f4:	4619      	mov	r1, r3
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	fb03 f101 	mul.w	r1, r3, r1
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8017502:	fb00 f303 	mul.w	r3, r0, r3
 8017506:	440b      	add	r3, r1
 8017508:	0059      	lsls	r1, r3, #1
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	440b      	add	r3, r1
 801750e:	1e59      	subs	r1, r3, #1
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	fbb1 f3f3 	udiv	r3, r1, r3
 8017516:	e00f      	b.n	8017538 <RegionCommonComputeRxWindowParameters+0x78>
 8017518:	7afb      	ldrb	r3, [r7, #11]
 801751a:	3b04      	subs	r3, #4
 801751c:	4619      	mov	r1, r3
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	fb03 f101 	mul.w	r1, r3, r1
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801752a:	fb00 f303 	mul.w	r3, r0, r3
 801752e:	440b      	add	r3, r1
 8017530:	0059      	lsls	r1, r3, #1
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	fbb1 f3f3 	udiv	r3, r1, r3
 8017538:	429a      	cmp	r2, r3
 801753a:	bf38      	it	cc
 801753c:	461a      	movcc	r2, r3
 801753e:	69bb      	ldr	r3, [r7, #24]
 8017540:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	009b      	lsls	r3, r3, #2
 8017546:	4619      	mov	r1, r3
 8017548:	69bb      	ldr	r3, [r7, #24]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	68fa      	ldr	r2, [r7, #12]
 801754e:	fb02 f303 	mul.w	r3, r2, r3
 8017552:	2b00      	cmp	r3, #0
 8017554:	d007      	beq.n	8017566 <RegionCommonComputeRxWindowParameters+0xa6>
 8017556:	69bb      	ldr	r3, [r7, #24]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	68fa      	ldr	r2, [r7, #12]
 801755c:	fb02 f303 	mul.w	r3, r2, r3
 8017560:	3301      	adds	r3, #1
 8017562:	085b      	lsrs	r3, r3, #1
 8017564:	e005      	b.n	8017572 <RegionCommonComputeRxWindowParameters+0xb2>
 8017566:	69bb      	ldr	r3, [r7, #24]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	68fa      	ldr	r2, [r7, #12]
 801756c:	fb02 f303 	mul.w	r3, r2, r3
 8017570:	085b      	lsrs	r3, r3, #1
 8017572:	1acb      	subs	r3, r1, r3
 8017574:	683a      	ldr	r2, [r7, #0]
 8017576:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801757a:	fb01 f202 	mul.w	r2, r1, r2
 801757e:	1a9b      	subs	r3, r3, r2
 8017580:	2b00      	cmp	r3, #0
 8017582:	dd27      	ble.n	80175d4 <RegionCommonComputeRxWindowParameters+0x114>
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	009b      	lsls	r3, r3, #2
 8017588:	4619      	mov	r1, r3
 801758a:	69bb      	ldr	r3, [r7, #24]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	68fa      	ldr	r2, [r7, #12]
 8017590:	fb02 f303 	mul.w	r3, r2, r3
 8017594:	2b00      	cmp	r3, #0
 8017596:	d007      	beq.n	80175a8 <RegionCommonComputeRxWindowParameters+0xe8>
 8017598:	69bb      	ldr	r3, [r7, #24]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	68fa      	ldr	r2, [r7, #12]
 801759e:	fb02 f303 	mul.w	r3, r2, r3
 80175a2:	3301      	adds	r3, #1
 80175a4:	085b      	lsrs	r3, r3, #1
 80175a6:	e005      	b.n	80175b4 <RegionCommonComputeRxWindowParameters+0xf4>
 80175a8:	69bb      	ldr	r3, [r7, #24]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	68fa      	ldr	r2, [r7, #12]
 80175ae:	fb02 f303 	mul.w	r3, r2, r3
 80175b2:	085b      	lsrs	r3, r3, #1
 80175b4:	1acb      	subs	r3, r1, r3
 80175b6:	683a      	ldr	r2, [r7, #0]
 80175b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80175bc:	fb01 f202 	mul.w	r2, r1, r2
 80175c0:	1a9b      	subs	r3, r3, r2
 80175c2:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80175c6:	4a1a      	ldr	r2, [pc, #104]	@ (8017630 <RegionCommonComputeRxWindowParameters+0x170>)
 80175c8:	fb82 1203 	smull	r1, r2, r2, r3
 80175cc:	1192      	asrs	r2, r2, #6
 80175ce:	17db      	asrs	r3, r3, #31
 80175d0:	1ad3      	subs	r3, r2, r3
 80175d2:	e024      	b.n	801761e <RegionCommonComputeRxWindowParameters+0x15e>
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	009b      	lsls	r3, r3, #2
 80175d8:	4619      	mov	r1, r3
 80175da:	69bb      	ldr	r3, [r7, #24]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	68fa      	ldr	r2, [r7, #12]
 80175e0:	fb02 f303 	mul.w	r3, r2, r3
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d007      	beq.n	80175f8 <RegionCommonComputeRxWindowParameters+0x138>
 80175e8:	69bb      	ldr	r3, [r7, #24]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	68fa      	ldr	r2, [r7, #12]
 80175ee:	fb02 f303 	mul.w	r3, r2, r3
 80175f2:	3301      	adds	r3, #1
 80175f4:	085b      	lsrs	r3, r3, #1
 80175f6:	e005      	b.n	8017604 <RegionCommonComputeRxWindowParameters+0x144>
 80175f8:	69bb      	ldr	r3, [r7, #24]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	fb02 f303 	mul.w	r3, r2, r3
 8017602:	085b      	lsrs	r3, r3, #1
 8017604:	1acb      	subs	r3, r1, r3
 8017606:	683a      	ldr	r2, [r7, #0]
 8017608:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801760c:	fb01 f202 	mul.w	r2, r1, r2
 8017610:	1a9b      	subs	r3, r3, r2
 8017612:	4a07      	ldr	r2, [pc, #28]	@ (8017630 <RegionCommonComputeRxWindowParameters+0x170>)
 8017614:	fb82 1203 	smull	r1, r2, r2, r3
 8017618:	1192      	asrs	r2, r2, #6
 801761a:	17db      	asrs	r3, r3, #31
 801761c:	1ad3      	subs	r3, r2, r3
 801761e:	69fa      	ldr	r2, [r7, #28]
 8017620:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017622:	bf00      	nop
 8017624:	3714      	adds	r7, #20
 8017626:	46bd      	mov	sp, r7
 8017628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop
 8017630:	10624dd3 	.word	0x10624dd3

08017634 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b086      	sub	sp, #24
 8017638:	af00      	add	r7, sp, #0
 801763a:	4603      	mov	r3, r0
 801763c:	ed87 0a02 	vstr	s0, [r7, #8]
 8017640:	edc7 0a01 	vstr	s1, [r7, #4]
 8017644:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017646:	2300      	movs	r3, #0
 8017648:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801764a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801764e:	005b      	lsls	r3, r3, #1
 8017650:	ee07 3a90 	vmov	s15, r3
 8017654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017658:	ed97 7a02 	vldr	s14, [r7, #8]
 801765c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017660:	edd7 7a01 	vldr	s15, [r7, #4]
 8017664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017668:	ee17 0a90 	vmov	r0, s15
 801766c:	f7e8 ff7c 	bl	8000568 <__aeabi_f2d>
 8017670:	4602      	mov	r2, r0
 8017672:	460b      	mov	r3, r1
 8017674:	ec43 2b10 	vmov	d0, r2, r3
 8017678:	f00a fd16 	bl	80220a8 <floor>
 801767c:	ec53 2b10 	vmov	r2, r3, d0
 8017680:	4610      	mov	r0, r2
 8017682:	4619      	mov	r1, r3
 8017684:	f7e9 fa78 	bl	8000b78 <__aeabi_d2iz>
 8017688:	4603      	mov	r3, r0
 801768a:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801768c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017690:	4618      	mov	r0, r3
 8017692:	3718      	adds	r7, #24
 8017694:	46bd      	mov	sp, r7
 8017696:	bd80      	pop	{r7, pc}

08017698 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017698:	b590      	push	{r4, r7, lr}
 801769a:	b087      	sub	sp, #28
 801769c:	af00      	add	r7, sp, #0
 801769e:	60f8      	str	r0, [r7, #12]
 80176a0:	60b9      	str	r1, [r7, #8]
 80176a2:	607a      	str	r2, [r7, #4]
 80176a4:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80176a6:	2300      	movs	r3, #0
 80176a8:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80176aa:	2300      	movs	r3, #0
 80176ac:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80176ae:	2300      	movs	r3, #0
 80176b0:	757b      	strb	r3, [r7, #21]
 80176b2:	2300      	movs	r3, #0
 80176b4:	753b      	strb	r3, [r7, #20]
 80176b6:	e09d      	b.n	80177f4 <RegionCommonCountNbOfEnabledChannels+0x15c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80176b8:	2300      	movs	r3, #0
 80176ba:	74fb      	strb	r3, [r7, #19]
 80176bc:	e090      	b.n	80177e0 <RegionCommonCountNbOfEnabledChannels+0x148>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	685a      	ldr	r2, [r3, #4]
 80176c2:	7d3b      	ldrb	r3, [r7, #20]
 80176c4:	005b      	lsls	r3, r3, #1
 80176c6:	4413      	add	r3, r2
 80176c8:	881b      	ldrh	r3, [r3, #0]
 80176ca:	461a      	mov	r2, r3
 80176cc:	7cfb      	ldrb	r3, [r7, #19]
 80176ce:	fa42 f303 	asr.w	r3, r2, r3
 80176d2:	f003 0301 	and.w	r3, r3, #1
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d07f      	beq.n	80177da <RegionCommonCountNbOfEnabledChannels+0x142>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	689a      	ldr	r2, [r3, #8]
 80176de:	7d79      	ldrb	r1, [r7, #21]
 80176e0:	7cfb      	ldrb	r3, [r7, #19]
 80176e2:	440b      	add	r3, r1
 80176e4:	4619      	mov	r1, r3
 80176e6:	460b      	mov	r3, r1
 80176e8:	005b      	lsls	r3, r3, #1
 80176ea:	440b      	add	r3, r1
 80176ec:	009b      	lsls	r3, r3, #2
 80176ee:	4413      	add	r3, r2
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d06c      	beq.n	80177d0 <RegionCommonCountNbOfEnabledChannels+0x138>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	f083 0301 	eor.w	r3, r3, #1
 80176fe:	b2db      	uxtb	r3, r3
 8017700:	2b00      	cmp	r3, #0
 8017702:	d011      	beq.n	8017728 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017708:	2b00      	cmp	r3, #0
 801770a:	d00d      	beq.n	8017728 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	695a      	ldr	r2, [r3, #20]
 8017710:	7d3b      	ldrb	r3, [r7, #20]
 8017712:	005b      	lsls	r3, r3, #1
 8017714:	4413      	add	r3, r2
 8017716:	881b      	ldrh	r3, [r3, #0]
 8017718:	461a      	mov	r2, r3
 801771a:	7cfb      	ldrb	r3, [r7, #19]
 801771c:	fa42 f303 	asr.w	r3, r2, r3
 8017720:	f003 0301 	and.w	r3, r3, #1
 8017724:	2b00      	cmp	r3, #0
 8017726:	d055      	beq.n	80177d4 <RegionCommonCountNbOfEnabledChannels+0x13c>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	785b      	ldrb	r3, [r3, #1]
 801772c:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	689a      	ldr	r2, [r3, #8]
 8017732:	7d79      	ldrb	r1, [r7, #21]
 8017734:	7cfb      	ldrb	r3, [r7, #19]
 8017736:	440b      	add	r3, r1
 8017738:	4619      	mov	r1, r3
 801773a:	460b      	mov	r3, r1
 801773c:	005b      	lsls	r3, r3, #1
 801773e:	440b      	add	r3, r1
 8017740:	009b      	lsls	r3, r3, #2
 8017742:	4413      	add	r3, r2
 8017744:	7a1b      	ldrb	r3, [r3, #8]
 8017746:	f343 0303 	sbfx	r3, r3, #0, #4
 801774a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801774c:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	689a      	ldr	r2, [r3, #8]
 8017752:	7d79      	ldrb	r1, [r7, #21]
 8017754:	7cfb      	ldrb	r3, [r7, #19]
 8017756:	440b      	add	r3, r1
 8017758:	4619      	mov	r1, r3
 801775a:	460b      	mov	r3, r1
 801775c:	005b      	lsls	r3, r3, #1
 801775e:	440b      	add	r3, r1
 8017760:	009b      	lsls	r3, r3, #2
 8017762:	4413      	add	r3, r2
 8017764:	7a1b      	ldrb	r3, [r3, #8]
 8017766:	f343 1303 	sbfx	r3, r3, #4, #4
 801776a:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801776c:	461a      	mov	r2, r3
 801776e:	4621      	mov	r1, r4
 8017770:	f7ff fb79 	bl	8016e66 <RegionCommonValueInRange>
 8017774:	4603      	mov	r3, r0
 8017776:	2b00      	cmp	r3, #0
 8017778:	d02e      	beq.n	80177d8 <RegionCommonCountNbOfEnabledChannels+0x140>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	68da      	ldr	r2, [r3, #12]
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	6899      	ldr	r1, [r3, #8]
 8017782:	7d78      	ldrb	r0, [r7, #21]
 8017784:	7cfb      	ldrb	r3, [r7, #19]
 8017786:	4403      	add	r3, r0
 8017788:	4618      	mov	r0, r3
 801778a:	4603      	mov	r3, r0
 801778c:	005b      	lsls	r3, r3, #1
 801778e:	4403      	add	r3, r0
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	440b      	add	r3, r1
 8017794:	7a5b      	ldrb	r3, [r3, #9]
 8017796:	4619      	mov	r1, r3
 8017798:	460b      	mov	r3, r1
 801779a:	005b      	lsls	r3, r3, #1
 801779c:	440b      	add	r3, r1
 801779e:	011b      	lsls	r3, r3, #4
 80177a0:	4413      	add	r3, r2
 80177a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80177a6:	f083 0301 	eor.w	r3, r3, #1
 80177aa:	b2db      	uxtb	r3, r3
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d003      	beq.n	80177b8 <RegionCommonCountNbOfEnabledChannels+0x120>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80177b0:	7dbb      	ldrb	r3, [r7, #22]
 80177b2:	3301      	adds	r3, #1
 80177b4:	75bb      	strb	r3, [r7, #22]
                    continue;
 80177b6:	e010      	b.n	80177da <RegionCommonCountNbOfEnabledChannels+0x142>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80177b8:	7dfb      	ldrb	r3, [r7, #23]
 80177ba:	1c5a      	adds	r2, r3, #1
 80177bc:	75fa      	strb	r2, [r7, #23]
 80177be:	461a      	mov	r2, r3
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	4413      	add	r3, r2
 80177c4:	7d79      	ldrb	r1, [r7, #21]
 80177c6:	7cfa      	ldrb	r2, [r7, #19]
 80177c8:	440a      	add	r2, r1
 80177ca:	b2d2      	uxtb	r2, r2
 80177cc:	701a      	strb	r2, [r3, #0]
 80177ce:	e004      	b.n	80177da <RegionCommonCountNbOfEnabledChannels+0x142>
                    continue;
 80177d0:	bf00      	nop
 80177d2:	e002      	b.n	80177da <RegionCommonCountNbOfEnabledChannels+0x142>
                        continue;
 80177d4:	bf00      	nop
 80177d6:	e000      	b.n	80177da <RegionCommonCountNbOfEnabledChannels+0x142>
                    continue;
 80177d8:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80177da:	7cfb      	ldrb	r3, [r7, #19]
 80177dc:	3301      	adds	r3, #1
 80177de:	74fb      	strb	r3, [r7, #19]
 80177e0:	7cfb      	ldrb	r3, [r7, #19]
 80177e2:	2b0f      	cmp	r3, #15
 80177e4:	f67f af6b 	bls.w	80176be <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80177e8:	7d7b      	ldrb	r3, [r7, #21]
 80177ea:	3310      	adds	r3, #16
 80177ec:	757b      	strb	r3, [r7, #21]
 80177ee:	7d3b      	ldrb	r3, [r7, #20]
 80177f0:	3301      	adds	r3, #1
 80177f2:	753b      	strb	r3, [r7, #20]
 80177f4:	7d7b      	ldrb	r3, [r7, #21]
 80177f6:	b29a      	uxth	r2, r3
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	8a1b      	ldrh	r3, [r3, #16]
 80177fc:	429a      	cmp	r2, r3
 80177fe:	f4ff af5b 	bcc.w	80176b8 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	7dfa      	ldrb	r2, [r7, #23]
 8017806:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	7dba      	ldrb	r2, [r7, #22]
 801780c:	701a      	strb	r2, [r3, #0]
}
 801780e:	bf00      	nop
 8017810:	371c      	adds	r7, #28
 8017812:	46bd      	mov	sp, r7
 8017814:	bd90      	pop	{r4, r7, pc}

08017816 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017818:	b08d      	sub	sp, #52	@ 0x34
 801781a:	af06      	add	r7, sp, #24
 801781c:	60f8      	str	r0, [r7, #12]
 801781e:	60b9      	str	r1, [r7, #8]
 8017820:	607a      	str	r2, [r7, #4]
 8017822:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801782a:	4610      	mov	r0, r2
 801782c:	4619      	mov	r1, r3
 801782e:	f003 f97b 	bl	801ab28 <UTIL_TIMER_GetElapsedTime>
 8017832:	e9c7 0104 	strd	r0, r1, [r7, #16]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	e9d3 0100 	ldrd	r0, r1, [r3]
 801783c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8017840:	1a84      	subs	r4, r0, r2
 8017842:	eb61 0503 	sbc.w	r5, r1, r3
 8017846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017848:	e9c3 4500 	strd	r4, r5, [r3]
    *nbRestrictedChannels = 1;
 801784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801784e:	2201      	movs	r2, #1
 8017850:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	2200      	movs	r2, #0
 8017856:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801785e:	4313      	orrs	r3, r2
 8017860:	d008      	beq.n	8017874 <RegionCommonIdentifyChannels+0x5e>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	e9d3 2300 	ldrd	r2, r3, [r3]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017868:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801786c:	4290      	cmp	r0, r2
 801786e:	eb71 0303 	sbcs.w	r3, r1, r3
 8017872:	d333      	bcc.n	80178dc <RegionCommonIdentifyChannels+0xc6>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017874:	68b9      	ldr	r1, [r7, #8]
 8017876:	f04f 0200 	mov.w	r2, #0
 801787a:	f04f 0300 	mov.w	r3, #0
 801787e:	e9c1 2300 	strd	r2, r3, [r1]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017886:	781d      	ldrb	r5, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801788c:	68de      	ldr	r6, [r3, #12]
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	f893 c011 	ldrb.w	ip, [r3, #17]
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	f893 e010 	ldrb.w	lr, [r3, #16]
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	7f1c      	ldrb	r4, [r3, #28]
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80178a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	aa01      	add	r2, sp, #4
 80178ac:	3314      	adds	r3, #20
 80178ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80178b2:	e882 0003 	stmia.w	r2, {r0, r1}
 80178b6:	9400      	str	r4, [sp, #0]
 80178b8:	4673      	mov	r3, lr
 80178ba:	4662      	mov	r2, ip
 80178bc:	4631      	mov	r1, r6
 80178be:	4628      	mov	r0, r5
 80178c0:	f7ff fbcc 	bl	801705c <RegionCommonUpdateBandTimeOff>
 80178c4:	4602      	mov	r2, r0
 80178c6:	460b      	mov	r3, r1
 80178c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80178ca:	e9c1 2300 	strd	r2, r3, [r1]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80178d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178d4:	683a      	ldr	r2, [r7, #0]
 80178d6:	6879      	ldr	r1, [r7, #4]
 80178d8:	f7ff fede 	bl	8017698 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80178dc:	683b      	ldr	r3, [r7, #0]
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d008      	beq.n	80178f6 <RegionCommonIdentifyChannels+0xe0>
    {
        *nextTxDelay = 0;
 80178e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80178e6:	f04f 0200 	mov.w	r2, #0
 80178ea:	f04f 0300 	mov.w	r3, #0
 80178ee:	e9c1 2300 	strd	r2, r3, [r1]
        return LORAMAC_STATUS_OK;
 80178f2:	2300      	movs	r3, #0
 80178f4:	e006      	b.n	8017904 <RegionCommonIdentifyChannels+0xee>
    }
    else if( *nbRestrictedChannels > 0 )
 80178f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f8:	781b      	ldrb	r3, [r3, #0]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d001      	beq.n	8017902 <RegionCommonIdentifyChannels+0xec>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80178fe:	230b      	movs	r3, #11
 8017900:	e000      	b.n	8017904 <RegionCommonIdentifyChannels+0xee>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017902:	230c      	movs	r3, #12
    }
}
 8017904:	4618      	mov	r0, r3
 8017906:	371c      	adds	r7, #28
 8017908:	46bd      	mov	sp, r7
 801790a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801790c <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801790c:	b5b0      	push	{r4, r5, r7, lr}
 801790e:	b086      	sub	sp, #24
 8017910:	af02      	add	r7, sp, #8
 8017912:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	f993 2000 	ldrsb.w	r2, [r3]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017926:	429a      	cmp	r2, r3
 8017928:	d103      	bne.n	8017932 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017930:	e026      	b.n	8017980 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017932:	7bfb      	ldrb	r3, [r7, #15]
 8017934:	3b01      	subs	r3, #1
 8017936:	b2db      	uxtb	r3, r3
 8017938:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017940:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017944:	429a      	cmp	r2, r3
 8017946:	d019      	beq.n	801797c <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	78d8      	ldrb	r0, [r3, #3]
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	6859      	ldr	r1, [r3, #4]
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801795c:	687a      	ldr	r2, [r7, #4]
 801795e:	6892      	ldr	r2, [r2, #8]
 8017960:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017964:	9201      	str	r2, [sp, #4]
 8017966:	9300      	str	r3, [sp, #0]
 8017968:	462b      	mov	r3, r5
 801796a:	4622      	mov	r2, r4
 801796c:	f7ff fa09 	bl	8016d82 <RegionCommonChanVerifyDr>
 8017970:	4603      	mov	r3, r0
 8017972:	f083 0301 	eor.w	r3, r3, #1
 8017976:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017978:	2b00      	cmp	r3, #0
 801797a:	d1da      	bne.n	8017932 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801797c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8017980:	4618      	mov	r0, r3
 8017982:	3710      	adds	r7, #16
 8017984:	46bd      	mov	sp, r7
 8017986:	bdb0      	pop	{r4, r5, r7, pc}

08017988 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017988:	b480      	push	{r7}
 801798a:	b083      	sub	sp, #12
 801798c:	af00      	add	r7, sp, #0
 801798e:	4603      	mov	r3, r0
 8017990:	460a      	mov	r2, r1
 8017992:	71fb      	strb	r3, [r7, #7]
 8017994:	4613      	mov	r3, r2
 8017996:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017998:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801799c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179a0:	4293      	cmp	r3, r2
 80179a2:	bfb8      	it	lt
 80179a4:	4613      	movlt	r3, r2
 80179a6:	b25b      	sxtb	r3, r3
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	370c      	adds	r7, #12
 80179ac:	46bd      	mov	sp, r7
 80179ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b2:	4770      	bx	lr

080179b4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80179b4:	b480      	push	{r7}
 80179b6:	b083      	sub	sp, #12
 80179b8:	af00      	add	r7, sp, #0
 80179ba:	6078      	str	r0, [r7, #4]
 80179bc:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	683a      	ldr	r2, [r7, #0]
 80179c4:	4413      	add	r3, r2
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	4a08      	ldr	r2, [pc, #32]	@ (80179ec <RegionCommonGetBandwidth+0x38>)
 80179ca:	4293      	cmp	r3, r2
 80179cc:	d004      	beq.n	80179d8 <RegionCommonGetBandwidth+0x24>
 80179ce:	4a08      	ldr	r2, [pc, #32]	@ (80179f0 <RegionCommonGetBandwidth+0x3c>)
 80179d0:	4293      	cmp	r3, r2
 80179d2:	d003      	beq.n	80179dc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80179d4:	2300      	movs	r3, #0
 80179d6:	e002      	b.n	80179de <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80179d8:	2301      	movs	r3, #1
 80179da:	e000      	b.n	80179de <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80179dc:	2302      	movs	r3, #2
    }
}
 80179de:	4618      	mov	r0, r3
 80179e0:	370c      	adds	r7, #12
 80179e2:	46bd      	mov	sp, r7
 80179e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e8:	4770      	bx	lr
 80179ea:	bf00      	nop
 80179ec:	0003d090 	.word	0x0003d090
 80179f0:	0007a120 	.word	0x0007a120

080179f4 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80179f4:	b480      	push	{r7}
 80179f6:	b083      	sub	sp, #12
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	4603      	mov	r3, r0
 80179fc:	6039      	str	r1, [r7, #0]
 80179fe:	71fb      	strb	r3, [r7, #7]
 8017a00:	4613      	mov	r3, r2
 8017a02:	71bb      	strb	r3, [r7, #6]
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017a04:	bf00      	nop
 8017a06:	370c      	adds	r7, #12
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0e:	4770      	bx	lr

08017a10 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017a10:	b480      	push	{r7}
 8017a12:	b083      	sub	sp, #12
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
 8017a18:	460b      	mov	r3, r1
 8017a1a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
}
 8017a1c:	bf00      	nop
 8017a1e:	370c      	adds	r7, #12
 8017a20:	46bd      	mov	sp, r7
 8017a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a26:	4770      	bx	lr

08017a28 <RadioGetFskBandwidthRegValue>:
 * Returns the known FSK bandwidth registers value
 *
 * @param  bandwidth Bandwidth value in Hz
 * @retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue(uint32_t bandwidth) {
 8017a28:	b480      	push	{r7}
 8017a2a:	b085      	sub	sp, #20
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (bandwidth == 0) {
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d101      	bne.n	8017a3a <RadioGetFskBandwidthRegValue+0x12>
		return (0x1F);
 8017a36:	231f      	movs	r3, #31
 8017a38:	e01f      	b.n	8017a7a <RadioGetFskBandwidthRegValue+0x52>
	}

	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	73fb      	strb	r3, [r7, #15]
 8017a3e:	e018      	b.n	8017a72 <RadioGetFskBandwidthRegValue+0x4a>
		if ((bandwidth >= FskBandwidths[i].bandwidth)
 8017a40:	7bfb      	ldrb	r3, [r7, #15]
 8017a42:	4a11      	ldr	r2, [pc, #68]	@ (8017a88 <RadioGetFskBandwidthRegValue+0x60>)
 8017a44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017a48:	687a      	ldr	r2, [r7, #4]
 8017a4a:	429a      	cmp	r2, r3
 8017a4c:	d30e      	bcc.n	8017a6c <RadioGetFskBandwidthRegValue+0x44>
				&& (bandwidth < FskBandwidths[i + 1].bandwidth)) {
 8017a4e:	7bfb      	ldrb	r3, [r7, #15]
 8017a50:	3301      	adds	r3, #1
 8017a52:	4a0d      	ldr	r2, [pc, #52]	@ (8017a88 <RadioGetFskBandwidthRegValue+0x60>)
 8017a54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017a58:	687a      	ldr	r2, [r7, #4]
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d206      	bcs.n	8017a6c <RadioGetFskBandwidthRegValue+0x44>
			return FskBandwidths[i + 1].RegValue;
 8017a5e:	7bfb      	ldrb	r3, [r7, #15]
 8017a60:	3301      	adds	r3, #1
 8017a62:	4a09      	ldr	r2, [pc, #36]	@ (8017a88 <RadioGetFskBandwidthRegValue+0x60>)
 8017a64:	00db      	lsls	r3, r3, #3
 8017a66:	4413      	add	r3, r2
 8017a68:	791b      	ldrb	r3, [r3, #4]
 8017a6a:	e006      	b.n	8017a7a <RadioGetFskBandwidthRegValue+0x52>
	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 8017a6c:	7bfb      	ldrb	r3, [r7, #15]
 8017a6e:	3301      	adds	r3, #1
 8017a70:	73fb      	strb	r3, [r7, #15]
 8017a72:	7bfb      	ldrb	r3, [r7, #15]
 8017a74:	2b14      	cmp	r3, #20
 8017a76:	d9e3      	bls.n	8017a40 <RadioGetFskBandwidthRegValue+0x18>
		}
	}
	// In case value not found, return bandwidth 0
	return (0x1F);
 8017a78:	231f      	movs	r3, #31
	// ERROR: Value not found
	// while (1)
	// 	;
}
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	3714      	adds	r7, #20
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a84:	4770      	bx	lr
 8017a86:	bf00      	nop
 8017a88:	08022cf4 	.word	0x08022cf4

08017a8c <RadioInit>:

void RadioInit(RadioEvents_t *events) {
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b086      	sub	sp, #24
 8017a90:	af04      	add	r7, sp, #16
 8017a92:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8017a94:	4a1d      	ldr	r2, [pc, #116]	@ (8017b0c <RadioInit+0x80>)
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	6013      	str	r3, [r2, #0]
	SX126xInit();
 8017a9a:	f001 fa7b 	bl	8018f94 <SX126xInit>
	SX126xSetStandby(STDBY_RC);
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	f001 fbb4 	bl	801920c <SX126xSetStandby>
	SX126xSetRegulatorMode(USE_LDO);
 8017aa4:	2000      	movs	r0, #0
 8017aa6:	f001 fc89 	bl	80193bc <SX126xSetRegulatorMode>

	SX126xSetBufferBaseAddress(0x00, 0x00);
 8017aaa:	2100      	movs	r1, #0
 8017aac:	2000      	movs	r0, #0
 8017aae:	f001 ff83 	bl	80199b8 <SX126xSetBufferBaseAddress>
	SX126xSetTxParams(0, RADIO_RAMP_200_US);
 8017ab2:	2104      	movs	r1, #4
 8017ab4:	2000      	movs	r0, #0
 8017ab6:	f001 fdbd 	bl	8019634 <SX126xSetTxParams>
	SX126xSetDioIrqParams(IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE,
 8017aba:	2300      	movs	r3, #0
 8017abc:	2200      	movs	r2, #0
 8017abe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017ac2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017ac6:	f001 fcf1 	bl	80194ac <SX126xSetDioIrqParams>
			IRQ_RADIO_NONE);

	// Initialize driver timeout timers
	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
 8017aca:	2300      	movs	r3, #0
 8017acc:	9302      	str	r3, [sp, #8]
 8017ace:	4b10      	ldr	r3, [pc, #64]	@ (8017b10 <RadioInit+0x84>)
 8017ad0:	9301      	str	r3, [sp, #4]
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	9300      	str	r3, [sp, #0]
 8017ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8017ada:	f04f 0300 	mov.w	r3, #0
 8017ade:	480d      	ldr	r0, [pc, #52]	@ (8017b14 <RadioInit+0x88>)
 8017ae0:	f002 fe12 	bl	801a708 <UTIL_TIMER_Create>
	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	9302      	str	r3, [sp, #8]
 8017ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8017b18 <RadioInit+0x8c>)
 8017aea:	9301      	str	r3, [sp, #4]
 8017aec:	2300      	movs	r3, #0
 8017aee:	9300      	str	r3, [sp, #0]
 8017af0:	f04f 32ff 	mov.w	r2, #4294967295
 8017af4:	f04f 0300 	mov.w	r3, #0
 8017af8:	4808      	ldr	r0, [pc, #32]	@ (8017b1c <RadioInit+0x90>)
 8017afa:	f002 fe05 	bl	801a708 <UTIL_TIMER_Create>

	IrqFired = false;
 8017afe:	4b08      	ldr	r3, [pc, #32]	@ (8017b20 <RadioInit+0x94>)
 8017b00:	2200      	movs	r2, #0
 8017b02:	701a      	strb	r2, [r3, #0]
}
 8017b04:	bf00      	nop
 8017b06:	3708      	adds	r7, #8
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}
 8017b0c:	2000ca9c 	.word	0x2000ca9c
 8017b10:	08018a69 	.word	0x08018a69
 8017b14:	2000c930 	.word	0x2000c930
 8017b18:	08018aa1 	.word	0x08018aa1
 8017b1c:	2000c950 	.word	0x2000c950
 8017b20:	2000ca8f 	.word	0x2000ca8f

08017b24 <RadioReInit>:

void RadioReInit(RadioEvents_t *events) {
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b086      	sub	sp, #24
 8017b28:	af04      	add	r7, sp, #16
 8017b2a:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 8017b2c:	4a12      	ldr	r2, [pc, #72]	@ (8017b78 <RadioReInit+0x54>)
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6013      	str	r3, [r2, #0]
	SX126xReInit();
 8017b32:	f001 fa40 	bl	8018fb6 <SX126xReInit>

	// Initialize driver timeout timers
	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
 8017b36:	2300      	movs	r3, #0
 8017b38:	9302      	str	r3, [sp, #8]
 8017b3a:	4b10      	ldr	r3, [pc, #64]	@ (8017b7c <RadioReInit+0x58>)
 8017b3c:	9301      	str	r3, [sp, #4]
 8017b3e:	2300      	movs	r3, #0
 8017b40:	9300      	str	r3, [sp, #0]
 8017b42:	f04f 32ff 	mov.w	r2, #4294967295
 8017b46:	f04f 0300 	mov.w	r3, #0
 8017b4a:	480d      	ldr	r0, [pc, #52]	@ (8017b80 <RadioReInit+0x5c>)
 8017b4c:	f002 fddc 	bl	801a708 <UTIL_TIMER_Create>
	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);
 8017b50:	2300      	movs	r3, #0
 8017b52:	9302      	str	r3, [sp, #8]
 8017b54:	4b0b      	ldr	r3, [pc, #44]	@ (8017b84 <RadioReInit+0x60>)
 8017b56:	9301      	str	r3, [sp, #4]
 8017b58:	2300      	movs	r3, #0
 8017b5a:	9300      	str	r3, [sp, #0]
 8017b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8017b60:	f04f 0300 	mov.w	r3, #0
 8017b64:	4808      	ldr	r0, [pc, #32]	@ (8017b88 <RadioReInit+0x64>)
 8017b66:	f002 fdcf 	bl	801a708 <UTIL_TIMER_Create>

	IrqFired = false;
 8017b6a:	4b08      	ldr	r3, [pc, #32]	@ (8017b8c <RadioReInit+0x68>)
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	701a      	strb	r2, [r3, #0]
}
 8017b70:	bf00      	nop
 8017b72:	3708      	adds	r7, #8
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	2000ca9c 	.word	0x2000ca9c
 8017b7c:	08018a69 	.word	0x08018a69
 8017b80:	2000c930 	.word	0x2000c930
 8017b84:	08018aa1 	.word	0x08018aa1
 8017b88:	2000c950 	.word	0x2000c950
 8017b8c:	2000ca8f 	.word	0x2000ca8f

08017b90 <RadioGetStatus>:

RadioState_t RadioGetStatus(void) {
 8017b90:	b580      	push	{r7, lr}
 8017b92:	af00      	add	r7, sp, #0
	switch (SX126xGetOperatingMode()) {
 8017b94:	f001 fa16 	bl	8018fc4 <SX126xGetOperatingMode>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b07      	cmp	r3, #7
 8017b9c:	d00a      	beq.n	8017bb4 <RadioGetStatus+0x24>
 8017b9e:	2b07      	cmp	r3, #7
 8017ba0:	dc0a      	bgt.n	8017bb8 <RadioGetStatus+0x28>
 8017ba2:	2b04      	cmp	r3, #4
 8017ba4:	d002      	beq.n	8017bac <RadioGetStatus+0x1c>
 8017ba6:	2b05      	cmp	r3, #5
 8017ba8:	d002      	beq.n	8017bb0 <RadioGetStatus+0x20>
 8017baa:	e005      	b.n	8017bb8 <RadioGetStatus+0x28>
		case MODE_TX:
			return RF_TX_RUNNING;
 8017bac:	2302      	movs	r3, #2
 8017bae:	e004      	b.n	8017bba <RadioGetStatus+0x2a>
		case MODE_RX:
			return RF_RX_RUNNING;
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	e002      	b.n	8017bba <RadioGetStatus+0x2a>
		case MODE_CAD:
			return RF_CAD;
 8017bb4:	2303      	movs	r3, #3
 8017bb6:	e000      	b.n	8017bba <RadioGetStatus+0x2a>
		default:
			return RF_IDLE;
 8017bb8:	2300      	movs	r3, #0
	}
}
 8017bba:	4618      	mov	r0, r3
 8017bbc:	bd80      	pop	{r7, pc}
	...

08017bc0 <RadioSetModem>:

void RadioSetModem(RadioModems_t modem) {
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b082      	sub	sp, #8
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	4603      	mov	r3, r0
 8017bc8:	71fb      	strb	r3, [r7, #7]
	switch (modem) {
 8017bca:	79fb      	ldrb	r3, [r7, #7]
 8017bcc:	2b01      	cmp	r3, #1
 8017bce:	d009      	beq.n	8017be4 <RadioSetModem+0x24>
		default:
		case MODEM_FSK:
			SX126xSetPacketType(PACKET_TYPE_GFSK);
 8017bd0:	2000      	movs	r0, #0
 8017bd2:	f001 fd0f 	bl	80195f4 <SX126xSetPacketType>
			// When switching to GFSK mode the LoRa SyncWord register value is reset
			// Thus, we also reset the RadioPublicNetwork variable
			RadioPublicNetwork.Current = false;
 8017bd6:	4b10      	ldr	r3, [pc, #64]	@ (8017c18 <RadioSetModem+0x58>)
 8017bd8:	2200      	movs	r2, #0
 8017bda:	705a      	strb	r2, [r3, #1]
			_modem = modem;
 8017bdc:	4a0f      	ldr	r2, [pc, #60]	@ (8017c1c <RadioSetModem+0x5c>)
 8017bde:	79fb      	ldrb	r3, [r7, #7]
 8017be0:	7013      	strb	r3, [r2, #0]
		break;
 8017be2:	e015      	b.n	8017c10 <RadioSetModem+0x50>
		case MODEM_LORA:
			SX126xSetPacketType(PACKET_TYPE_LORA);
 8017be4:	2001      	movs	r0, #1
 8017be6:	f001 fd05 	bl	80195f4 <SX126xSetPacketType>
			// Public/Private network register is reset when switching modems
			if (RadioPublicNetwork.Current != RadioPublicNetwork.Previous) {
 8017bea:	4b0b      	ldr	r3, [pc, #44]	@ (8017c18 <RadioSetModem+0x58>)
 8017bec:	785a      	ldrb	r2, [r3, #1]
 8017bee:	4b0a      	ldr	r3, [pc, #40]	@ (8017c18 <RadioSetModem+0x58>)
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d008      	beq.n	8017c08 <RadioSetModem+0x48>
				RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8017bf6:	4b08      	ldr	r3, [pc, #32]	@ (8017c18 <RadioSetModem+0x58>)
 8017bf8:	781a      	ldrb	r2, [r3, #0]
 8017bfa:	4b07      	ldr	r3, [pc, #28]	@ (8017c18 <RadioSetModem+0x58>)
 8017bfc:	705a      	strb	r2, [r3, #1]
				RadioSetPublicNetwork(RadioPublicNetwork.Current);
 8017bfe:	4b06      	ldr	r3, [pc, #24]	@ (8017c18 <RadioSetModem+0x58>)
 8017c00:	785b      	ldrb	r3, [r3, #1]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f000 fefa 	bl	80189fc <RadioSetPublicNetwork>
			}
			_modem = modem;
 8017c08:	4a04      	ldr	r2, [pc, #16]	@ (8017c1c <RadioSetModem+0x5c>)
 8017c0a:	79fb      	ldrb	r3, [r7, #7]
 8017c0c:	7013      	strb	r3, [r2, #0]
		break;
 8017c0e:	bf00      	nop
	}
}
 8017c10:	bf00      	nop
 8017c12:	3708      	adds	r7, #8
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	2000ca98 	.word	0x2000ca98
 8017c1c:	2000ca92 	.word	0x2000ca92

08017c20 <RadioSetChannel>:

void RadioSetChannel(uint32_t freq) {
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b082      	sub	sp, #8
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
	LOGV("RADIO_SETFREQ", "%lu", freq);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	4a06      	ldr	r2, [pc, #24]	@ (8017c44 <RadioSetChannel+0x24>)
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	4806      	ldr	r0, [pc, #24]	@ (8017c48 <RadioSetChannel+0x28>)
 8017c30:	f002 fbd4 	bl	801a3dc <LOG_LEVEL_VERBOSE>
	SX126xSetRfFrequency(freq);
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f001 fc97 	bl	8019568 <SX126xSetRfFrequency>
}
 8017c3a:	bf00      	nop
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	080224c8 	.word	0x080224c8
 8017c48:	080224cc 	.word	0x080224cc

08017c4c <RadioIsChannelFree>:

bool RadioIsChannelFree(RadioModems_t modem, uint32_t freq, int16_t rssiThresh,
		uint32_t maxCarrierSenseTime) {
 8017c4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017c50:	b086      	sub	sp, #24
 8017c52:	af00      	add	r7, sp, #0
 8017c54:	60b9      	str	r1, [r7, #8]
 8017c56:	607b      	str	r3, [r7, #4]
 8017c58:	4603      	mov	r3, r0
 8017c5a:	73fb      	strb	r3, [r7, #15]
 8017c5c:	4613      	mov	r3, r2
 8017c5e:	81bb      	strh	r3, [r7, #12]
	bool status = true;
 8017c60:	2301      	movs	r3, #1
 8017c62:	75fb      	strb	r3, [r7, #23]
	int16_t rssi = 0;
 8017c64:	2300      	movs	r3, #0
 8017c66:	82bb      	strh	r3, [r7, #20]
	uint32_t carrierSenseTime = 0;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	613b      	str	r3, [r7, #16]

	if (RadioGetStatus() != RF_IDLE) {
 8017c6c:	f7ff ff90 	bl	8017b90 <RadioGetStatus>
 8017c70:	4603      	mov	r3, r0
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d001      	beq.n	8017c7a <RadioIsChannelFree+0x2e>
		return false;
 8017c76:	2300      	movs	r3, #0
 8017c78:	e036      	b.n	8017ce8 <RadioIsChannelFree+0x9c>
	}

	RadioSetModem(modem);
 8017c7a:	7bfb      	ldrb	r3, [r7, #15]
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f7ff ff9f 	bl	8017bc0 <RadioSetModem>

	RadioSetChannel(freq);
 8017c82:	68b8      	ldr	r0, [r7, #8]
 8017c84:	f7ff ffcc 	bl	8017c20 <RadioSetChannel>

	RadioRx(0);
 8017c88:	2000      	movs	r0, #0
 8017c8a:	f000 fd4b 	bl	8018724 <RadioRx>

	vTaskDelay(1);
 8017c8e:	2001      	movs	r0, #1
 8017c90:	f7f1 fd90 	bl	80097b4 <vTaskDelay>

	carrierSenseTime = TimerGetCurrentTime();
 8017c94:	f002 ff32 	bl	801aafc <UTIL_TIMER_GetCurrentTime>
 8017c98:	4602      	mov	r2, r0
 8017c9a:	460b      	mov	r3, r1
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	613b      	str	r3, [r7, #16]

	// Perform carrier sense for maxCarrierSenseTime
	while (TimerGetElapsedTime(carrierSenseTime) < maxCarrierSenseTime) {
 8017ca0:	e00e      	b.n	8017cc0 <RadioIsChannelFree+0x74>
		rssi = RadioRssi(modem);
 8017ca2:	7bfb      	ldrb	r3, [r7, #15]
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f000 fe27 	bl	80188f8 <RadioRssi>
 8017caa:	4603      	mov	r3, r0
 8017cac:	82bb      	strh	r3, [r7, #20]

		if (rssi > rssiThresh) {
 8017cae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017cb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	dd02      	ble.n	8017cc0 <RadioIsChannelFree+0x74>
			status = false;
 8017cba:	2300      	movs	r3, #0
 8017cbc:	75fb      	strb	r3, [r7, #23]
			break;
 8017cbe:	e010      	b.n	8017ce2 <RadioIsChannelFree+0x96>
	while (TimerGetElapsedTime(carrierSenseTime) < maxCarrierSenseTime) {
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	4698      	mov	r8, r3
 8017cc6:	4691      	mov	r9, r2
 8017cc8:	4640      	mov	r0, r8
 8017cca:	4649      	mov	r1, r9
 8017ccc:	f002 ff2c 	bl	801ab28 <UTIL_TIMER_GetElapsedTime>
 8017cd0:	4602      	mov	r2, r0
 8017cd2:	460b      	mov	r3, r1
 8017cd4:	6879      	ldr	r1, [r7, #4]
 8017cd6:	2000      	movs	r0, #0
 8017cd8:	460c      	mov	r4, r1
 8017cda:	4605      	mov	r5, r0
 8017cdc:	42a2      	cmp	r2, r4
 8017cde:	41ab      	sbcs	r3, r5
 8017ce0:	d3df      	bcc.n	8017ca2 <RadioIsChannelFree+0x56>
		}
	}
	RadioSleep();
 8017ce2:	f000 fd05 	bl	80186f0 <RadioSleep>
	return status;
 8017ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ce8:	4618      	mov	r0, r3
 8017cea:	3718      	adds	r7, #24
 8017cec:	46bd      	mov	sp, r7
 8017cee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08017cf2 <RadioRandom>:

uint32_t RadioRandom(void) {
 8017cf2:	b580      	push	{r7, lr}
 8017cf4:	b082      	sub	sp, #8
 8017cf6:	af00      	add	r7, sp, #0
	uint32_t rnd = 0;
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	607b      	str	r3, [r7, #4]

	/*
	 * Radio setup for random number generation
	 */
	// Set LoRa modem ON
	RadioSetModem(MODEM_LORA);
 8017cfc:	2001      	movs	r0, #1
 8017cfe:	f7ff ff5f 	bl	8017bc0 <RadioSetModem>

	// Set radio in continuous reception
	SX126xSetRx(0);
 8017d02:	2000      	movs	r0, #0
 8017d04:	f001 faba 	bl	801927c <SX126xSetRx>

	rnd = SX126xGetRandom();
 8017d08:	f001 fa53 	bl	80191b2 <SX126xGetRandom>
 8017d0c:	6078      	str	r0, [r7, #4]
	RadioSleep();
 8017d0e:	f000 fcef 	bl	80186f0 <RadioSleep>

	return rnd;
 8017d12:	687b      	ldr	r3, [r7, #4]
}
 8017d14:	4618      	mov	r0, r3
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <RadioSetRxConfig>:
void RadioSetRxConfig(RadioModems_t modem, uint32_t bandwidth,
		uint32_t datarate, uint8_t coderate, uint32_t bandwidthAfc,
		uint16_t preambleLen, uint16_t symbTimeout, bool fixLen,
		uint8_t payloadLen,
		bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, bool rxContinuous) {
 8017d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d1e:	b097      	sub	sp, #92	@ 0x5c
 8017d20:	af0e      	add	r7, sp, #56	@ 0x38
 8017d22:	6139      	str	r1, [r7, #16]
 8017d24:	60fa      	str	r2, [r7, #12]
 8017d26:	461a      	mov	r2, r3
 8017d28:	4603      	mov	r3, r0
 8017d2a:	75fb      	strb	r3, [r7, #23]
 8017d2c:	4613      	mov	r3, r2
 8017d2e:	75bb      	strb	r3, [r7, #22]

	LOGV("RADIO_RX",
 8017d30:	f897 c017 	ldrb.w	ip, [r7, #23]
 8017d34:	7dbb      	ldrb	r3, [r7, #22]
 8017d36:	60bb      	str	r3, [r7, #8]
 8017d38:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	607b      	str	r3, [r7, #4]
 8017d3e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8017d42:	f897 0044 	ldrb.w	r0, [r7, #68]	@ 0x44
 8017d46:	f897 4048 	ldrb.w	r4, [r7, #72]	@ 0x48
 8017d4a:	f897 504c 	ldrb.w	r5, [r7, #76]	@ 0x4c
 8017d4e:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 8017d52:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017d56:	603b      	str	r3, [r7, #0]
 8017d58:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8017d5c:	4613      	mov	r3, r2
 8017d5e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8017d62:	920c      	str	r2, [sp, #48]	@ 0x30
 8017d64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017d66:	683b      	ldr	r3, [r7, #0]
 8017d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d6a:	9609      	str	r6, [sp, #36]	@ 0x24
 8017d6c:	9508      	str	r5, [sp, #32]
 8017d6e:	9407      	str	r4, [sp, #28]
 8017d70:	9006      	str	r0, [sp, #24]
 8017d72:	9105      	str	r1, [sp, #20]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	9304      	str	r3, [sp, #16]
 8017d78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017d7a:	9203      	str	r2, [sp, #12]
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	9302      	str	r3, [sp, #8]
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	9301      	str	r3, [sp, #4]
 8017d84:	693b      	ldr	r3, [r7, #16]
 8017d86:	9300      	str	r3, [sp, #0]
 8017d88:	4663      	mov	r3, ip
 8017d8a:	4ab2      	ldr	r2, [pc, #712]	@ (8018054 <RadioSetRxConfig+0x338>)
 8017d8c:	2100      	movs	r1, #0
 8017d8e:	48b2      	ldr	r0, [pc, #712]	@ (8018058 <RadioSetRxConfig+0x33c>)
 8017d90:	f002 fb24 	bl	801a3dc <LOG_LEVEL_VERBOSE>
			"MODEM:%d, BW:%lu, DR:%lu, CR:%lu, BWAFC:%lu, PRLEN:%lu, SYBTO:%lu, FIXLEN:%lu, PLLEN:%lu, CRC:%lu, FREQHOP:%lu, PERHOP:%lu, IQ:%lu, RXCONN:%lu",
			modem, bandwidth, datarate, coderate, bandwidthAfc, preambleLen, symbTimeout, fixLen, payloadLen, crcOn, freqHopOn,  hopPeriod, iqInverted,  rxContinuous);

	RxContinuous = rxContinuous;
 8017d94:	4ab1      	ldr	r2, [pc, #708]	@ (801805c <RadioSetRxConfig+0x340>)
 8017d96:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8017d9a:	7013      	strb	r3, [r2, #0]
	if (rxContinuous == true) {
 8017d9c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d002      	beq.n	8017daa <RadioSetRxConfig+0x8e>
		symbTimeout = 0;
 8017da4:	2300      	movs	r3, #0
 8017da6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	}
	if (fixLen == true) {
 8017daa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d004      	beq.n	8017dbc <RadioSetRxConfig+0xa0>
		MaxPayloadLength = payloadLen;
 8017db2:	4aab      	ldr	r2, [pc, #684]	@ (8018060 <RadioSetRxConfig+0x344>)
 8017db4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8017db8:	7013      	strb	r3, [r2, #0]
 8017dba:	e002      	b.n	8017dc2 <RadioSetRxConfig+0xa6>
	}
	else {
		MaxPayloadLength = 0xFF;
 8017dbc:	4ba8      	ldr	r3, [pc, #672]	@ (8018060 <RadioSetRxConfig+0x344>)
 8017dbe:	22ff      	movs	r2, #255	@ 0xff
 8017dc0:	701a      	strb	r2, [r3, #0]
	}

	switch (modem) {
 8017dc2:	7dfb      	ldrb	r3, [r7, #23]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d003      	beq.n	8017dd0 <RadioSetRxConfig+0xb4>
 8017dc8:	2b01      	cmp	r3, #1
 8017dca:	f000 80a5 	beq.w	8017f18 <RadioSetRxConfig+0x1fc>
			// Timeout Max, Timeout handled directly in SetRx function
			RxTimeout = RXTIMEOUT_LORA_MAX;

		break;
	}
}
 8017dce:	e13d      	b.n	801804c <RadioSetRxConfig+0x330>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 8017dd0:	2000      	movs	r0, #0
 8017dd2:	f001 fad5 	bl	8019380 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017dd6:	4ba3      	ldr	r3, [pc, #652]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017dd8:	2200      	movs	r2, #0
 8017dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017dde:	4aa1      	ldr	r2, [pc, #644]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	6453      	str	r3, [r2, #68]	@ 0x44
			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 8017de4:	4b9f      	ldr	r3, [pc, #636]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017de6:	220b      	movs	r2, #11
 8017de8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					RadioGetFskBandwidthRegValue(bandwidth);
 8017dec:	6938      	ldr	r0, [r7, #16]
 8017dee:	f7ff fe1b 	bl	8017a28 <RadioGetFskBandwidthRegValue>
 8017df2:	4603      	mov	r3, r0
 8017df4:	461a      	mov	r2, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 8017df6:	4b9b      	ldr	r3, [pc, #620]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017df8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017dfc:	4b99      	ldr	r3, [pc, #612]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017dfe:	2200      	movs	r2, #0
 8017e00:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 8017e02:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e04:	00db      	lsls	r3, r3, #3
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	4b96      	ldr	r3, [pc, #600]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e0a:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 8017e0c:	4b95      	ldr	r3, [pc, #596]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e0e:	2204      	movs	r2, #4
 8017e10:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017e12:	4b94      	ldr	r3, [pc, #592]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e14:	2218      	movs	r2, #24
 8017e16:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 8017e18:	4b92      	ldr	r3, [pc, #584]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	779a      	strb	r2, [r3, #30]
							RADIO_PACKET_FIXED_LENGTH :
 8017e1e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017e22:	f083 0301 	eor.w	r3, r3, #1
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	461a      	mov	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 8017e2a:	4b8e      	ldr	r3, [pc, #568]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e2c:	77da      	strb	r2, [r3, #31]
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017e2e:	4b8c      	ldr	r3, [pc, #560]	@ (8018060 <RadioSetRxConfig+0x344>)
 8017e30:	781a      	ldrb	r2, [r3, #0]
 8017e32:	4b8c      	ldr	r3, [pc, #560]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e34:	f883 2020 	strb.w	r2, [r3, #32]
			if (crcOn == true) {
 8017e38:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d004      	beq.n	8017e4a <RadioSetRxConfig+0x12e>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 8017e40:	4b88      	ldr	r3, [pc, #544]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e42:	22f2      	movs	r2, #242	@ 0xf2
 8017e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8017e48:	e003      	b.n	8017e52 <RadioSetRxConfig+0x136>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017e4a:	4b86      	ldr	r3, [pc, #536]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e4c:	2201      	movs	r2, #1
 8017e4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017e52:	4b84      	ldr	r3, [pc, #528]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e54:	2201      	movs	r2, #1
 8017e56:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			RadioStandby();
 8017e5a:	f000 fc5c 	bl	8018716 <RadioStandby>
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8017e5e:	4b81      	ldr	r3, [pc, #516]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017e60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	bf14      	ite	ne
 8017e68:	2301      	movne	r3, #1
 8017e6a:	2300      	moveq	r3, #0
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7ff fea6 	bl	8017bc0 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8017e74:	487c      	ldr	r0, [pc, #496]	@ (8018068 <RadioSetRxConfig+0x34c>)
 8017e76:	f001 fc47 	bl	8019708 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8017e7a:	487c      	ldr	r0, [pc, #496]	@ (801806c <RadioSetRxConfig+0x350>)
 8017e7c:	f001 fce2 	bl	8019844 <SX126xSetPacketParams>
			syncWord[0] = 0xC1;
 8017e80:	23c1      	movs	r3, #193	@ 0xc1
 8017e82:	763b      	strb	r3, [r7, #24]
			syncWord[1] = 0x94;
 8017e84:	2394      	movs	r3, #148	@ 0x94
 8017e86:	767b      	strb	r3, [r7, #25]
			syncWord[2] = 0xC1;
 8017e88:	23c1      	movs	r3, #193	@ 0xc1
 8017e8a:	76bb      	strb	r3, [r7, #26]
			syncWord[3] = 0x00;
 8017e8c:	2300      	movs	r3, #0
 8017e8e:	76fb      	strb	r3, [r7, #27]
			syncWord[4] = 0x00;
 8017e90:	2300      	movs	r3, #0
 8017e92:	773b      	strb	r3, [r7, #28]
			syncWord[5] = 0x00;
 8017e94:	2300      	movs	r3, #0
 8017e96:	777b      	strb	r3, [r7, #29]
			syncWord[6] = 0x00;
 8017e98:	2300      	movs	r3, #0
 8017e9a:	77bb      	strb	r3, [r7, #30]
			syncWord[7] = 0x00;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	77fb      	strb	r3, [r7, #31]
			SX126xSetSyncWord(syncWord);
 8017ea0:	f107 0318 	add.w	r3, r7, #24
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f001 f902 	bl	80190ae <SX126xSetSyncWord>
			SX126xSetWhiteningSeed(0x01FF);
 8017eaa:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017eae:	f001 f94d 	bl	801914c <SX126xSetWhiteningSeed>
					* ((1.0 / (double) datarate) * 8.0) * 1000);
 8017eb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7e8 fb44 	bl	8000544 <__aeabi_i2d>
 8017ebc:	4604      	mov	r4, r0
 8017ebe:	460d      	mov	r5, r1
 8017ec0:	68f8      	ldr	r0, [r7, #12]
 8017ec2:	f7e8 fb2f 	bl	8000524 <__aeabi_ui2d>
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	460b      	mov	r3, r1
 8017eca:	f04f 0000 	mov.w	r0, #0
 8017ece:	4968      	ldr	r1, [pc, #416]	@ (8018070 <RadioSetRxConfig+0x354>)
 8017ed0:	f7e8 fccc 	bl	800086c <__aeabi_ddiv>
 8017ed4:	4602      	mov	r2, r0
 8017ed6:	460b      	mov	r3, r1
 8017ed8:	4610      	mov	r0, r2
 8017eda:	4619      	mov	r1, r3
 8017edc:	f04f 0200 	mov.w	r2, #0
 8017ee0:	4b64      	ldr	r3, [pc, #400]	@ (8018074 <RadioSetRxConfig+0x358>)
 8017ee2:	f7e8 fb99 	bl	8000618 <__aeabi_dmul>
 8017ee6:	4602      	mov	r2, r0
 8017ee8:	460b      	mov	r3, r1
 8017eea:	4620      	mov	r0, r4
 8017eec:	4629      	mov	r1, r5
 8017eee:	f7e8 fb93 	bl	8000618 <__aeabi_dmul>
 8017ef2:	4602      	mov	r2, r0
 8017ef4:	460b      	mov	r3, r1
 8017ef6:	4610      	mov	r0, r2
 8017ef8:	4619      	mov	r1, r3
 8017efa:	f04f 0200 	mov.w	r2, #0
 8017efe:	4b5e      	ldr	r3, [pc, #376]	@ (8018078 <RadioSetRxConfig+0x35c>)
 8017f00:	f7e8 fb8a 	bl	8000618 <__aeabi_dmul>
 8017f04:	4602      	mov	r2, r0
 8017f06:	460b      	mov	r3, r1
			RxTimeout = (uint32_t) (symbTimeout
 8017f08:	4610      	mov	r0, r2
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	f7e8 fe5c 	bl	8000bc8 <__aeabi_d2uiz>
 8017f10:	4603      	mov	r3, r0
 8017f12:	4a5a      	ldr	r2, [pc, #360]	@ (801807c <RadioSetRxConfig+0x360>)
 8017f14:	6013      	str	r3, [r2, #0]
		break;
 8017f16:	e099      	b.n	801804c <RadioSetRxConfig+0x330>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 8017f18:	2000      	movs	r0, #0
 8017f1a:	f001 fa31 	bl	8019380 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126xSetLoRaSymbNumTimeout(symbTimeout);
 8017f1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017f22:	b2db      	uxtb	r3, r3
 8017f24:	4618      	mov	r0, r3
 8017f26:	f001 fa3a 	bl	801939e <SX126xSetLoRaSymbNumTimeout>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
					(RadioLoRaSpreadingFactors_t) datarate;
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	b2da      	uxtb	r2, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 8017f36:	4b4b      	ldr	r3, [pc, #300]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
					Bandwidths[bandwidth];
 8017f3c:	4a50      	ldr	r2, [pc, #320]	@ (8018080 <RadioSetRxConfig+0x364>)
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	4413      	add	r3, r2
 8017f42:	781a      	ldrb	r2, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 8017f44:	4b47      	ldr	r3, [pc, #284]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 8017f4a:	4a46      	ldr	r2, [pc, #280]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f4c:	7dbb      	ldrb	r3, [r7, #22]
 8017f4e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 8017f52:	693b      	ldr	r3, [r7, #16]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d105      	bne.n	8017f64 <RadioSetRxConfig+0x248>
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	2b0b      	cmp	r3, #11
 8017f5c:	d008      	beq.n	8017f70 <RadioSetRxConfig+0x254>
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	2b0c      	cmp	r3, #12
 8017f62:	d005      	beq.n	8017f70 <RadioSetRxConfig+0x254>
					|| ((bandwidth == 1) && (datarate == 12))) {
 8017f64:	693b      	ldr	r3, [r7, #16]
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d107      	bne.n	8017f7a <RadioSetRxConfig+0x25e>
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	2b0c      	cmp	r3, #12
 8017f6e:	d104      	bne.n	8017f7a <RadioSetRxConfig+0x25e>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017f70:	4b3c      	ldr	r3, [pc, #240]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f72:	2201      	movs	r2, #1
 8017f74:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017f78:	e003      	b.n	8017f82 <RadioSetRxConfig+0x266>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017f82:	4b38      	ldr	r3, [pc, #224]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f84:	2201      	movs	r2, #1
 8017f86:	761a      	strb	r2, [r3, #24]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 8017f88:	4b36      	ldr	r3, [pc, #216]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017f8e:	2b05      	cmp	r3, #5
 8017f90:	d004      	beq.n	8017f9c <RadioSetRxConfig+0x280>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8017f92:	4b34      	ldr	r3, [pc, #208]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017f94:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017f98:	2b06      	cmp	r3, #6
 8017f9a:	d10a      	bne.n	8017fb2 <RadioSetRxConfig+0x296>
				if (preambleLen < 12) {
 8017f9c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017f9e:	2b0b      	cmp	r3, #11
 8017fa0:	d803      	bhi.n	8017faa <RadioSetRxConfig+0x28e>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8017fa2:	4b30      	ldr	r3, [pc, #192]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fa4:	220c      	movs	r2, #12
 8017fa6:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 8017fa8:	e006      	b.n	8017fb8 <RadioSetRxConfig+0x29c>
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 8017faa:	4a2e      	ldr	r2, [pc, #184]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017fae:	8493      	strh	r3, [r2, #36]	@ 0x24
				if (preambleLen < 12) {
 8017fb0:	e002      	b.n	8017fb8 <RadioSetRxConfig+0x29c>
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fb4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017fb6:	8493      	strh	r3, [r2, #36]	@ 0x24
					(RadioLoRaPacketLengthsMode_t) fixLen;
 8017fb8:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
			SX126x.PacketParams.Params.LoRa.HeaderType =
 8017fbc:	4b29      	ldr	r3, [pc, #164]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fbe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017fc2:	4b27      	ldr	r3, [pc, #156]	@ (8018060 <RadioSetRxConfig+0x344>)
 8017fc4:	781a      	ldrb	r2, [r3, #0]
 8017fc6:	4b27      	ldr	r3, [pc, #156]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fc8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
					(RadioLoRaCrcModes_t) crcOn;
 8017fcc:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
			SX126x.PacketParams.Params.LoRa.CrcMode =
 8017fd0:	4b24      	ldr	r3, [pc, #144]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					(RadioLoRaIQModes_t) iqInverted;
 8017fd6:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 8017fda:	4b22      	ldr	r3, [pc, #136]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fdc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8017fe0:	4b20      	ldr	r3, [pc, #128]	@ (8018064 <RadioSetRxConfig+0x348>)
 8017fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	bf14      	ite	ne
 8017fea:	2301      	movne	r3, #1
 8017fec:	2300      	moveq	r3, #0
 8017fee:	b2db      	uxtb	r3, r3
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7ff fde5 	bl	8017bc0 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8017ff6:	481c      	ldr	r0, [pc, #112]	@ (8018068 <RadioSetRxConfig+0x34c>)
 8017ff8:	f001 fb86 	bl	8019708 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 8017ffc:	481b      	ldr	r0, [pc, #108]	@ (801806c <RadioSetRxConfig+0x350>)
 8017ffe:	f001 fc21 	bl	8019844 <SX126xSetPacketParams>
			if (SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED) {
 8018002:	4b18      	ldr	r3, [pc, #96]	@ (8018064 <RadioSetRxConfig+0x348>)
 8018004:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8018008:	2b01      	cmp	r3, #1
 801800a:	d10d      	bne.n	8018028 <RadioSetRxConfig+0x30c>
						SX126xReadRegister(0x0736) & ~(1 << 2));
 801800c:	f240 7036 	movw	r0, #1846	@ 0x736
 8018010:	f001 fef8 	bl	8019e04 <SX126xReadRegister>
 8018014:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0736,
 8018016:	f023 0304 	bic.w	r3, r3, #4
 801801a:	b2db      	uxtb	r3, r3
 801801c:	4619      	mov	r1, r3
 801801e:	f240 7036 	movw	r0, #1846	@ 0x736
 8018022:	f001 fea3 	bl	8019d6c <SX126xWriteRegister>
 8018026:	e00c      	b.n	8018042 <RadioSetRxConfig+0x326>
						SX126xReadRegister(0x0736) | (1 << 2));
 8018028:	f240 7036 	movw	r0, #1846	@ 0x736
 801802c:	f001 feea 	bl	8019e04 <SX126xReadRegister>
 8018030:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0736,
 8018032:	f043 0304 	orr.w	r3, r3, #4
 8018036:	b2db      	uxtb	r3, r3
 8018038:	4619      	mov	r1, r3
 801803a:	f240 7036 	movw	r0, #1846	@ 0x736
 801803e:	f001 fe95 	bl	8019d6c <SX126xWriteRegister>
			RxTimeout = RXTIMEOUT_LORA_MAX;
 8018042:	4b0e      	ldr	r3, [pc, #56]	@ (801807c <RadioSetRxConfig+0x360>)
 8018044:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8018048:	601a      	str	r2, [r3, #0]
		break;
 801804a:	bf00      	nop
}
 801804c:	bf00      	nop
 801804e:	3724      	adds	r7, #36	@ 0x24
 8018050:	46bd      	mov	sp, r7
 8018052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018054:	080224dc 	.word	0x080224dc
 8018058:	0802256c 	.word	0x0802256c
 801805c:	2000c978 	.word	0x2000c978
 8018060:	200001b8 	.word	0x200001b8
 8018064:	2000caa0 	.word	0x2000caa0
 8018068:	2000cae0 	.word	0x2000cae0
 801806c:	2000cab8 	.word	0x2000cab8
 8018070:	3ff00000 	.word	0x3ff00000
 8018074:	40200000 	.word	0x40200000
 8018078:	408f4000 	.word	0x408f4000
 801807c:	2000c974 	.word	0x2000c974
 8018080:	08022da4 	.word	0x08022da4

08018084 <RadioSetTxConfig>:

void RadioSetTxConfig(RadioModems_t modem, int8_t power, uint32_t fdev,
		uint32_t bandwidth, uint32_t datarate, uint8_t coderate,
		uint16_t preambleLen,
		bool fixLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, uint32_t timeout) {
 8018084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018086:	b095      	sub	sp, #84	@ 0x54
 8018088:	af0c      	add	r7, sp, #48	@ 0x30
 801808a:	613a      	str	r2, [r7, #16]
 801808c:	60fb      	str	r3, [r7, #12]
 801808e:	4603      	mov	r3, r0
 8018090:	75fb      	strb	r3, [r7, #23]
 8018092:	460b      	mov	r3, r1
 8018094:	75bb      	strb	r3, [r7, #22]

	LOGV("RADIO_TX",
 8018096:	f897 c017 	ldrb.w	ip, [r7, #23]
 801809a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801809e:	60bb      	str	r3, [r7, #8]
 80180a0:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80180a4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80180a8:	f897 0044 	ldrb.w	r0, [r7, #68]	@ 0x44
 80180ac:	f897 4048 	ldrb.w	r4, [r7, #72]	@ 0x48
 80180b0:	f897 504c 	ldrb.w	r5, [r7, #76]	@ 0x4c
 80180b4:	f897 6050 	ldrb.w	r6, [r7, #80]	@ 0x50
 80180b8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80180bc:	607b      	str	r3, [r7, #4]
 80180be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80180c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80180c6:	9609      	str	r6, [sp, #36]	@ 0x24
 80180c8:	9508      	str	r5, [sp, #32]
 80180ca:	9407      	str	r4, [sp, #28]
 80180cc:	9006      	str	r0, [sp, #24]
 80180ce:	9105      	str	r1, [sp, #20]
 80180d0:	9204      	str	r2, [sp, #16]
 80180d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80180d4:	9203      	str	r2, [sp, #12]
 80180d6:	68fa      	ldr	r2, [r7, #12]
 80180d8:	9202      	str	r2, [sp, #8]
 80180da:	693a      	ldr	r2, [r7, #16]
 80180dc:	9201      	str	r2, [sp, #4]
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	9300      	str	r3, [sp, #0]
 80180e2:	4663      	mov	r3, ip
 80180e4:	4a8d      	ldr	r2, [pc, #564]	@ (801831c <RadioSetTxConfig+0x298>)
 80180e6:	2100      	movs	r1, #0
 80180e8:	488d      	ldr	r0, [pc, #564]	@ (8018320 <RadioSetTxConfig+0x29c>)
 80180ea:	f002 f977 	bl	801a3dc <LOG_LEVEL_VERBOSE>
			"MODEM:%d, PWR:%lu, FDEV:%lu, BW:%lu, DR:%lu, CR:%lu, PRLEN:%lu, FIXLEN:%lu, CRC:%lu, FREQHOP:%lu, PERHOP:%lu, IQ:%lu, TIMEOUT:%lu",
			modem, power, fdev, bandwidth, datarate, coderate, preambleLen,
			fixLen, crcOn, freqHopOn, hopPeriod, iqInverted, timeout);

	switch (modem) {
 80180ee:	7dfb      	ldrb	r3, [r7, #23]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d002      	beq.n	80180fa <RadioSetTxConfig+0x76>
 80180f4:	2b01      	cmp	r3, #1
 80180f6:	d06e      	beq.n	80181d6 <RadioSetTxConfig+0x152>
 80180f8:	e0e0      	b.n	80182bc <RadioSetTxConfig+0x238>
		case MODEM_FSK:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80180fa:	4b8a      	ldr	r3, [pc, #552]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 80180fc:	2200      	movs	r2, #0
 80180fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018102:	4a88      	ldr	r2, [pc, #544]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018106:	6453      	str	r3, [r2, #68]	@ 0x44

			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 8018108:	4b86      	ldr	r3, [pc, #536]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801810a:	220b      	movs	r2, #11
 801810c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					MOD_SHAPING_G_BT_1;
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
					RadioGetFskBandwidthRegValue(bandwidth);
 8018110:	68f8      	ldr	r0, [r7, #12]
 8018112:	f7ff fc89 	bl	8017a28 <RadioGetFskBandwidthRegValue>
 8018116:	4603      	mov	r3, r0
 8018118:	461a      	mov	r2, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 801811a:	4b82      	ldr	r3, [pc, #520]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801811c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018120:	4a80      	ldr	r2, [pc, #512]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	6493      	str	r3, [r2, #72]	@ 0x48

			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018126:	4b7f      	ldr	r3, [pc, #508]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018128:	2200      	movs	r2, #0
 801812a:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 801812c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018130:	00db      	lsls	r3, r3, #3
 8018132:	b29a      	uxth	r2, r3
 8018134:	4b7b      	ldr	r3, [pc, #492]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018136:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 8018138:	4b7a      	ldr	r3, [pc, #488]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801813a:	2204      	movs	r2, #4
 801813c:	771a      	strb	r2, [r3, #28]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801813e:	4b79      	ldr	r3, [pc, #484]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018140:	2218      	movs	r2, #24
 8018142:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 8018144:	4b77      	ldr	r3, [pc, #476]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018146:	2200      	movs	r2, #0
 8018148:	779a      	strb	r2, [r3, #30]
					RADIO_ADDRESSCOMP_FILT_OFF;
			SX126x.PacketParams.Params.Gfsk.HeaderType =
					(fixLen == true) ?
							RADIO_PACKET_FIXED_LENGTH :
 801814a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801814e:	f083 0301 	eor.w	r3, r3, #1
 8018152:	b2db      	uxtb	r3, r3
 8018154:	461a      	mov	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 8018156:	4b73      	ldr	r3, [pc, #460]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018158:	77da      	strb	r2, [r3, #31]
							RADIO_PACKET_VARIABLE_LENGTH;

			if (crcOn == true) {
 801815a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801815e:	2b00      	cmp	r3, #0
 8018160:	d004      	beq.n	801816c <RadioSetTxConfig+0xe8>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 8018162:	4b70      	ldr	r3, [pc, #448]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018164:	22f2      	movs	r2, #242	@ 0xf2
 8018166:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 801816a:	e003      	b.n	8018174 <RadioSetTxConfig+0xf0>
						RADIO_CRC_2_BYTES_CCIT;
			}
			else {
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801816c:	4b6d      	ldr	r3, [pc, #436]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801816e:	2201      	movs	r2, #1
 8018170:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			}
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018174:	4b6b      	ldr	r3, [pc, #428]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018176:	2201      	movs	r2, #1
 8018178:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			RadioStandby();
 801817c:	f000 facb 	bl	8018716 <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8018180:	4b68      	ldr	r3, [pc, #416]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 8018186:	2b00      	cmp	r3, #0
 8018188:	bf14      	ite	ne
 801818a:	2301      	movne	r3, #1
 801818c:	2300      	moveq	r3, #0
 801818e:	b2db      	uxtb	r3, r3
 8018190:	4618      	mov	r0, r3
 8018192:	f7ff fd15 	bl	8017bc0 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 8018196:	4864      	ldr	r0, [pc, #400]	@ (8018328 <RadioSetTxConfig+0x2a4>)
 8018198:	f001 fab6 	bl	8019708 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 801819c:	4863      	ldr	r0, [pc, #396]	@ (801832c <RadioSetTxConfig+0x2a8>)
 801819e:	f001 fb51 	bl	8019844 <SX126xSetPacketParams>
			uint8_t syncWord[8];
			syncWord[0] = 0xC1;
 80181a2:	23c1      	movs	r3, #193	@ 0xc1
 80181a4:	763b      	strb	r3, [r7, #24]
			syncWord[1] = 0x94;
 80181a6:	2394      	movs	r3, #148	@ 0x94
 80181a8:	767b      	strb	r3, [r7, #25]
			syncWord[2] = 0xC1;
 80181aa:	23c1      	movs	r3, #193	@ 0xc1
 80181ac:	76bb      	strb	r3, [r7, #26]
			syncWord[3] = 0x00;
 80181ae:	2300      	movs	r3, #0
 80181b0:	76fb      	strb	r3, [r7, #27]
			syncWord[4] = 0x00;
 80181b2:	2300      	movs	r3, #0
 80181b4:	773b      	strb	r3, [r7, #28]
			syncWord[5] = 0x00;
 80181b6:	2300      	movs	r3, #0
 80181b8:	777b      	strb	r3, [r7, #29]
			syncWord[6] = 0x00;
 80181ba:	2300      	movs	r3, #0
 80181bc:	77bb      	strb	r3, [r7, #30]
			syncWord[7] = 0x00;
 80181be:	2300      	movs	r3, #0
 80181c0:	77fb      	strb	r3, [r7, #31]
			SX126xSetSyncWord(syncWord);
 80181c2:	f107 0318 	add.w	r3, r7, #24
 80181c6:	4618      	mov	r0, r3
 80181c8:	f000 ff71 	bl	80190ae <SX126xSetSyncWord>
			// SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
			SX126xSetWhiteningSeed(0x01FF);
 80181cc:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80181d0:	f000 ffbc 	bl	801914c <SX126xSetWhiteningSeed>
		break;
 80181d4:	e072      	b.n	80182bc <RadioSetTxConfig+0x238>

		case MODEM_LORA:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80181d6:	4b53      	ldr	r3, [pc, #332]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 80181d8:	2201      	movs	r2, #1
 80181da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
					(RadioLoRaSpreadingFactors_t) datarate;
 80181de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181e0:	b2da      	uxtb	r2, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 80181e2:	4b50      	ldr	r3, [pc, #320]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 80181e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
					Bandwidths[bandwidth];
 80181e8:	4a51      	ldr	r2, [pc, #324]	@ (8018330 <RadioSetTxConfig+0x2ac>)
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	4413      	add	r3, r2
 80181ee:	781a      	ldrb	r2, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 80181f0:	4b4c      	ldr	r3, [pc, #304]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 80181f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 80181f6:	4a4b      	ldr	r2, [pc, #300]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 80181f8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80181fc:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
					(RadioLoRaCodingRates_t) coderate;

			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d105      	bne.n	8018212 <RadioSetTxConfig+0x18e>
 8018206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018208:	2b0b      	cmp	r3, #11
 801820a:	d008      	beq.n	801821e <RadioSetTxConfig+0x19a>
 801820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801820e:	2b0c      	cmp	r3, #12
 8018210:	d005      	beq.n	801821e <RadioSetTxConfig+0x19a>
					|| ((bandwidth == 1) && (datarate == 12))) {
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	2b01      	cmp	r3, #1
 8018216:	d107      	bne.n	8018228 <RadioSetTxConfig+0x1a4>
 8018218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801821a:	2b0c      	cmp	r3, #12
 801821c:	d104      	bne.n	8018228 <RadioSetTxConfig+0x1a4>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801821e:	4b41      	ldr	r3, [pc, #260]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018220:	2201      	movs	r2, #1
 8018222:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018226:	e003      	b.n	8018230 <RadioSetTxConfig+0x1ac>
			}
			else {
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018228:	4b3e      	ldr	r3, [pc, #248]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801822a:	2200      	movs	r2, #0
 801822c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			}

			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018230:	4b3c      	ldr	r3, [pc, #240]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018232:	2201      	movs	r2, #1
 8018234:	761a      	strb	r2, [r3, #24]

			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 8018236:	4b3b      	ldr	r3, [pc, #236]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018238:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801823c:	2b05      	cmp	r3, #5
 801823e:	d004      	beq.n	801824a <RadioSetTxConfig+0x1c6>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8018240:	4b38      	ldr	r3, [pc, #224]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018242:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018246:	2b06      	cmp	r3, #6
 8018248:	d10c      	bne.n	8018264 <RadioSetTxConfig+0x1e0>
							== LORA_SF6)) {
				if (preambleLen < 12) {
 801824a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801824e:	2b0b      	cmp	r3, #11
 8018250:	d803      	bhi.n	801825a <RadioSetTxConfig+0x1d6>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 8018252:	4b34      	ldr	r3, [pc, #208]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018254:	220c      	movs	r2, #12
 8018256:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 8018258:	e008      	b.n	801826c <RadioSetTxConfig+0x1e8>
				}
				else {
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 801825a:	4a32      	ldr	r2, [pc, #200]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801825c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018260:	8493      	strh	r3, [r2, #36]	@ 0x24
				if (preambleLen < 12) {
 8018262:	e003      	b.n	801826c <RadioSetTxConfig+0x1e8>
							preambleLen;
				}
			}
			else {
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018264:	4a2f      	ldr	r2, [pc, #188]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801826a:	8493      	strh	r3, [r2, #36]	@ 0x24
			}

			SX126x.PacketParams.Params.LoRa.HeaderType =
					(RadioLoRaPacketLengthsMode_t) fixLen;
 801826c:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
			SX126x.PacketParams.Params.LoRa.HeaderType =
 8018270:	4b2c      	ldr	r3, [pc, #176]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018272:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018276:	4b2f      	ldr	r3, [pc, #188]	@ (8018334 <RadioSetTxConfig+0x2b0>)
 8018278:	781a      	ldrb	r2, [r3, #0]
 801827a:	4b2a      	ldr	r3, [pc, #168]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801827c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			SX126x.PacketParams.Params.LoRa.CrcMode =
					(RadioLoRaCrcModes_t) crcOn;
 8018280:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
			SX126x.PacketParams.Params.LoRa.CrcMode =
 8018284:	4b27      	ldr	r3, [pc, #156]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018286:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			SX126x.PacketParams.Params.LoRa.InvertIQ =
					(RadioLoRaIQModes_t) iqInverted;
 801828a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 801828e:	4b25      	ldr	r3, [pc, #148]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 8018290:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

			RadioStandby();
 8018294:	f000 fa3f 	bl	8018716 <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 8018298:	4b22      	ldr	r3, [pc, #136]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 801829a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801829e:	2b00      	cmp	r3, #0
 80182a0:	bf14      	ite	ne
 80182a2:	2301      	movne	r3, #1
 80182a4:	2300      	moveq	r3, #0
 80182a6:	b2db      	uxtb	r3, r3
 80182a8:	4618      	mov	r0, r3
 80182aa:	f7ff fc89 	bl	8017bc0 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 80182ae:	481e      	ldr	r0, [pc, #120]	@ (8018328 <RadioSetTxConfig+0x2a4>)
 80182b0:	f001 fa2a 	bl	8019708 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 80182b4:	481d      	ldr	r0, [pc, #116]	@ (801832c <RadioSetTxConfig+0x2a8>)
 80182b6:	f001 fac5 	bl	8019844 <SX126xSetPacketParams>
		break;
 80182ba:	bf00      	nop
	}

	// WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1
	if ((modem == MODEM_LORA)
 80182bc:	7dfb      	ldrb	r3, [r7, #23]
 80182be:	2b01      	cmp	r3, #1
 80182c0:	d112      	bne.n	80182e8 <RadioSetTxConfig+0x264>
			&& (SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500)) {
 80182c2:	4b18      	ldr	r3, [pc, #96]	@ (8018324 <RadioSetTxConfig+0x2a0>)
 80182c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80182c8:	2b06      	cmp	r3, #6
 80182ca:	d10d      	bne.n	80182e8 <RadioSetTxConfig+0x264>
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) & ~(1 << 2));
 80182cc:	f640 0089 	movw	r0, #2185	@ 0x889
 80182d0:	f001 fd98 	bl	8019e04 <SX126xReadRegister>
 80182d4:	4603      	mov	r3, r0
 80182d6:	f023 0304 	bic.w	r3, r3, #4
 80182da:	b2db      	uxtb	r3, r3
 80182dc:	4619      	mov	r1, r3
 80182de:	f640 0089 	movw	r0, #2185	@ 0x889
 80182e2:	f001 fd43 	bl	8019d6c <SX126xWriteRegister>
 80182e6:	e00c      	b.n	8018302 <RadioSetTxConfig+0x27e>
	}
	else {
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) | (1 << 2));
 80182e8:	f640 0089 	movw	r0, #2185	@ 0x889
 80182ec:	f001 fd8a 	bl	8019e04 <SX126xReadRegister>
 80182f0:	4603      	mov	r3, r0
 80182f2:	f043 0304 	orr.w	r3, r3, #4
 80182f6:	b2db      	uxtb	r3, r3
 80182f8:	4619      	mov	r1, r3
 80182fa:	f640 0089 	movw	r0, #2185	@ 0x889
 80182fe:	f001 fd35 	bl	8019d6c <SX126xWriteRegister>
	}
	// WORKAROUND END

	SX126xSetRfTxPower(power);
 8018302:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018306:	4618      	mov	r0, r3
 8018308:	f001 fdfe 	bl	8019f08 <SX126xSetRfTxPower>
	TxTimeout = timeout;
 801830c:	4a0a      	ldr	r2, [pc, #40]	@ (8018338 <RadioSetTxConfig+0x2b4>)
 801830e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018310:	6013      	str	r3, [r2, #0]
}
 8018312:	bf00      	nop
 8018314:	3724      	adds	r7, #36	@ 0x24
 8018316:	46bd      	mov	sp, r7
 8018318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801831a:	bf00      	nop
 801831c:	08022578 	.word	0x08022578
 8018320:	080225fc 	.word	0x080225fc
 8018324:	2000caa0 	.word	0x2000caa0
 8018328:	2000cae0 	.word	0x2000cae0
 801832c:	2000cab8 	.word	0x2000cab8
 8018330:	08022da4 	.word	0x08022da4
 8018334:	200001b8 	.word	0x200001b8
 8018338:	2000c970 	.word	0x2000c970

0801833c <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency(uint32_t frequency) {
 801833c:	b480      	push	{r7}
 801833e:	b083      	sub	sp, #12
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
	return true;
 8018344:	2301      	movs	r3, #1
}
 8018346:	4618      	mov	r0, r3
 8018348:	370c      	adds	r7, #12
 801834a:	46bd      	mov	sp, r7
 801834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018350:	4770      	bx	lr
 8018352:	0000      	movs	r0, r0
 8018354:	0000      	movs	r0, r0
	...

08018358 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir(RadioModems_t modem, uint8_t pktLen) {
 8018358:	b5b0      	push	{r4, r5, r7, lr}
 801835a:	b090      	sub	sp, #64	@ 0x40
 801835c:	af00      	add	r7, sp, #0
 801835e:	4603      	mov	r3, r0
 8018360:	460a      	mov	r2, r1
 8018362:	71fb      	strb	r3, [r7, #7]
 8018364:	4613      	mov	r3, r2
 8018366:	71bb      	strb	r3, [r7, #6]
	uint32_t airTime = 0;
 8018368:	2300      	movs	r3, #0
 801836a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch (modem) {
 801836c:	79fb      	ldrb	r3, [r7, #7]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d003      	beq.n	801837a <RadioTimeOnAir+0x22>
 8018372:	2b01      	cmp	r3, #1
 8018374:	f000 8095 	beq.w	80184a2 <RadioTimeOnAir+0x14a>
 8018378:	e156      	b.n	8018628 <RadioTimeOnAir+0x2d0>
		case MODEM_FSK: {
			// CRC Length calculation, catering for each type of CRC Calc offered in libary
			uint8_t crcLength =
 801837a:	4bb1      	ldr	r3, [pc, #708]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 801837c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018380:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					(uint8_t) (SX126x.PacketParams.Params.Gfsk.CrcLength);
			if ((crcLength == RADIO_CRC_2_BYTES)
 8018384:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018388:	2b02      	cmp	r3, #2
 801838a:	d00b      	beq.n	80183a4 <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_INV)
 801838c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018390:	2b06      	cmp	r3, #6
 8018392:	d007      	beq.n	80183a4 <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_IBM)
 8018394:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018398:	2bf1      	cmp	r3, #241	@ 0xf1
 801839a:	d003      	beq.n	80183a4 <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_CCIT)) {
 801839c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80183a0:	2bf2      	cmp	r3, #242	@ 0xf2
 80183a2:	d103      	bne.n	80183ac <RadioTimeOnAir+0x54>
				crcLength = 2;
 80183a4:	2302      	movs	r3, #2
 80183a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80183aa:	e00e      	b.n	80183ca <RadioTimeOnAir+0x72>
			}
			else if ((crcLength == RADIO_CRC_1_BYTES)
 80183ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d003      	beq.n	80183bc <RadioTimeOnAir+0x64>
					|| (crcLength == RADIO_CRC_1_BYTES_INV)) {
 80183b4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80183b8:	2b04      	cmp	r3, #4
 80183ba:	d103      	bne.n	80183c4 <RadioTimeOnAir+0x6c>
				crcLength = 1;
 80183bc:	2301      	movs	r3, #1
 80183be:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80183c2:	e002      	b.n	80183ca <RadioTimeOnAir+0x72>
			}
			else {
				crcLength = 0;
 80183c4:	2300      	movs	r3, #0
 80183c6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			}
			airTime = rint((8* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 80183ca:	4b9d      	ldr	r3, [pc, #628]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 80183cc:	8b5b      	ldrh	r3, [r3, #26]
 80183ce:	461a      	mov	r2, r3
											+ (SX126x.PacketParams.Params.Gfsk.SyncWordLength >> 3)
 80183d0:	4b9b      	ldr	r3, [pc, #620]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 80183d2:	7f5b      	ldrb	r3, [r3, #29]
 80183d4:	08db      	lsrs	r3, r3, #3
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	4413      	add	r3, r2
											+ ((SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_FIXED_LENGTH) ? 0.0 : 1.0) + pktLen
 80183da:	4618      	mov	r0, r3
 80183dc:	f7e8 f8b2 	bl	8000544 <__aeabi_i2d>
 80183e0:	4602      	mov	r2, r0
 80183e2:	460b      	mov	r3, r1
 80183e4:	4996      	ldr	r1, [pc, #600]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 80183e6:	7fc9      	ldrb	r1, [r1, #31]
 80183e8:	2900      	cmp	r1, #0
 80183ea:	d104      	bne.n	80183f6 <RadioTimeOnAir+0x9e>
 80183ec:	f04f 0000 	mov.w	r0, #0
 80183f0:	f04f 0100 	mov.w	r1, #0
 80183f4:	e002      	b.n	80183fc <RadioTimeOnAir+0xa4>
 80183f6:	f04f 0000 	mov.w	r0, #0
 80183fa:	4992      	ldr	r1, [pc, #584]	@ (8018644 <RadioTimeOnAir+0x2ec>)
 80183fc:	f7e7 ff56 	bl	80002ac <__adddf3>
 8018400:	4602      	mov	r2, r0
 8018402:	460b      	mov	r3, r1
 8018404:	4614      	mov	r4, r2
 8018406:	461d      	mov	r5, r3
 8018408:	79bb      	ldrb	r3, [r7, #6]
 801840a:	4618      	mov	r0, r3
 801840c:	f7e8 f89a 	bl	8000544 <__aeabi_i2d>
 8018410:	4602      	mov	r2, r0
 8018412:	460b      	mov	r3, r1
 8018414:	4620      	mov	r0, r4
 8018416:	4629      	mov	r1, r5
 8018418:	f7e7 ff48 	bl	80002ac <__adddf3>
 801841c:	4602      	mov	r2, r0
 801841e:	460b      	mov	r3, r1
 8018420:	4614      	mov	r4, r2
 8018422:	461d      	mov	r5, r3
											+ (crcLength))
 8018424:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8018428:	4618      	mov	r0, r3
 801842a:	f7e8 f88b 	bl	8000544 <__aeabi_i2d>
 801842e:	4602      	mov	r2, r0
 8018430:	460b      	mov	r3, r1
 8018432:	4620      	mov	r0, r4
 8018434:	4629      	mov	r1, r5
 8018436:	f7e7 ff39 	bl	80002ac <__adddf3>
 801843a:	4602      	mov	r2, r0
 801843c:	460b      	mov	r3, r1
 801843e:	4610      	mov	r0, r2
 8018440:	4619      	mov	r1, r3
			airTime = rint((8* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 8018442:	f04f 0200 	mov.w	r2, #0
 8018446:	4b80      	ldr	r3, [pc, #512]	@ (8018648 <RadioTimeOnAir+0x2f0>)
 8018448:	f7e8 f8e6 	bl	8000618 <__aeabi_dmul>
 801844c:	4602      	mov	r2, r0
 801844e:	460b      	mov	r3, r1
 8018450:	4614      	mov	r4, r2
 8018452:	461d      	mov	r5, r3
									/ SX126x.ModulationParams.Params.Gfsk.BitRate) * 1e3);
 8018454:	4b7a      	ldr	r3, [pc, #488]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 8018456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018458:	4618      	mov	r0, r3
 801845a:	f7e8 f863 	bl	8000524 <__aeabi_ui2d>
 801845e:	4602      	mov	r2, r0
 8018460:	460b      	mov	r3, r1
 8018462:	4620      	mov	r0, r4
 8018464:	4629      	mov	r1, r5
 8018466:	f7e8 fa01 	bl	800086c <__aeabi_ddiv>
 801846a:	4602      	mov	r2, r0
 801846c:	460b      	mov	r3, r1
 801846e:	4610      	mov	r0, r2
 8018470:	4619      	mov	r1, r3
			airTime = rint((8* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 8018472:	f04f 0200 	mov.w	r2, #0
 8018476:	4b75      	ldr	r3, [pc, #468]	@ (801864c <RadioTimeOnAir+0x2f4>)
 8018478:	f7e8 f8ce 	bl	8000618 <__aeabi_dmul>
 801847c:	4602      	mov	r2, r0
 801847e:	460b      	mov	r3, r1
 8018480:	ec43 2b17 	vmov	d7, r2, r3
 8018484:	eeb0 0a47 	vmov.f32	s0, s14
 8018488:	eef0 0a67 	vmov.f32	s1, s15
 801848c:	f009 fe88 	bl	80221a0 <rint>
 8018490:	ec53 2b10 	vmov	r2, r3, d0
 8018494:	4610      	mov	r0, r2
 8018496:	4619      	mov	r1, r3
 8018498:	f7e8 fb96 	bl	8000bc8 <__aeabi_d2uiz>
 801849c:	4603      	mov	r3, r0
 801849e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 80184a0:	e0c2      	b.n	8018628 <RadioTimeOnAir+0x2d0>
		case MODEM_LORA: {
			double ts =
					RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth
 80184a2:	4b67      	ldr	r3, [pc, #412]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 80184a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
							- 4][12
 80184a8:	1f1a      	subs	r2, r3, #4
							- SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 80184aa:	4b65      	ldr	r3, [pc, #404]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 80184ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80184b0:	f1c3 010c 	rsb	r1, r3, #12
			double ts =
 80184b4:	4866      	ldr	r0, [pc, #408]	@ (8018650 <RadioTimeOnAir+0x2f8>)
 80184b6:	4613      	mov	r3, r2
 80184b8:	005b      	lsls	r3, r3, #1
 80184ba:	4413      	add	r3, r2
 80184bc:	005b      	lsls	r3, r3, #1
 80184be:	440b      	add	r3, r1
 80184c0:	00db      	lsls	r3, r3, #3
 80184c2:	4403      	add	r3, r0
 80184c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184c8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			// time of preamble
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 80184cc:	4b5c      	ldr	r3, [pc, #368]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 80184ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
					+ 4.25) * ts;
 80184d0:	4618      	mov	r0, r3
 80184d2:	f7e8 f837 	bl	8000544 <__aeabi_i2d>
 80184d6:	f04f 0200 	mov.w	r2, #0
 80184da:	4b5e      	ldr	r3, [pc, #376]	@ (8018654 <RadioTimeOnAir+0x2fc>)
 80184dc:	f7e7 fee6 	bl	80002ac <__adddf3>
 80184e0:	4602      	mov	r2, r0
 80184e2:	460b      	mov	r3, r1
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 80184e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80184e8:	f7e8 f896 	bl	8000618 <__aeabi_dmul>
 80184ec:	4602      	mov	r2, r0
 80184ee:	460b      	mov	r3, r1
 80184f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			// Symbol length of payload and time
			double tmp =
					ceil(
							(8 * pktLen
									- 4
 80184f4:	79bb      	ldrb	r3, [r7, #6]
 80184f6:	005b      	lsls	r3, r3, #1
											* SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 80184f8:	4a51      	ldr	r2, [pc, #324]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 80184fa:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
									- 4
 80184fe:	1a9b      	subs	r3, r3, r2
									+ 28
 8018500:	1dda      	adds	r2, r3, #7
									+ 16
											* SX126x.PacketParams.Params.LoRa.CrcMode
 8018502:	4b4f      	ldr	r3, [pc, #316]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 8018504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
									+ 16
 8018508:	009b      	lsls	r3, r3, #2
 801850a:	4413      	add	r3, r2
 801850c:	009a      	lsls	r2, r3, #2
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 801850e:	4b4c      	ldr	r3, [pc, #304]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 8018510:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
											== LORA_PACKET_FIXED_LENGTH) ?
											20 : 0))
 8018514:	2b01      	cmp	r3, #1
 8018516:	d101      	bne.n	801851c <RadioTimeOnAir+0x1c4>
 8018518:	2314      	movs	r3, #20
 801851a:	e000      	b.n	801851e <RadioTimeOnAir+0x1c6>
 801851c:	2300      	movs	r3, #0
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 801851e:	1ad3      	subs	r3, r2, r3
					ceil(
 8018520:	4618      	mov	r0, r3
 8018522:	f7e8 f80f 	bl	8000544 <__aeabi_i2d>
 8018526:	4604      	mov	r4, r0
 8018528:	460d      	mov	r5, r1
									/ (double) (4
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 801852a:	4b45      	ldr	r3, [pc, #276]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 801852c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8018530:	461a      	mov	r2, r3
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 8018532:	4b43      	ldr	r3, [pc, #268]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 8018534:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
															> 0) ? 2 : 0))))
 8018538:	2b00      	cmp	r3, #0
 801853a:	d001      	beq.n	8018540 <RadioTimeOnAir+0x1e8>
 801853c:	2302      	movs	r3, #2
 801853e:	e000      	b.n	8018542 <RadioTimeOnAir+0x1ea>
 8018540:	2300      	movs	r3, #0
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 8018542:	1ad3      	subs	r3, r2, r3
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 8018544:	009b      	lsls	r3, r3, #2
									/ (double) (4
 8018546:	4618      	mov	r0, r3
 8018548:	f7e7 fffc 	bl	8000544 <__aeabi_i2d>
 801854c:	4602      	mov	r2, r0
 801854e:	460b      	mov	r3, r1
					ceil(
 8018550:	4620      	mov	r0, r4
 8018552:	4629      	mov	r1, r5
 8018554:	f7e8 f98a 	bl	800086c <__aeabi_ddiv>
 8018558:	4602      	mov	r2, r0
 801855a:	460b      	mov	r3, r1
 801855c:	ec43 2b17 	vmov	d7, r2, r3
 8018560:	eeb0 0a47 	vmov.f32	s0, s14
 8018564:	eef0 0a67 	vmov.f32	s1, s15
 8018568:	f009 fd22 	bl	8021fb0 <ceil>
 801856c:	ec55 4b10 	vmov	r4, r5, d0
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 8018570:	4b33      	ldr	r3, [pc, #204]	@ (8018640 <RadioTimeOnAir+0x2e8>)
 8018572:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
									% 4) + 4);
 8018576:	f003 0303 	and.w	r3, r3, #3
 801857a:	3304      	adds	r3, #4
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 801857c:	4618      	mov	r0, r3
 801857e:	f7e7 ffe1 	bl	8000544 <__aeabi_i2d>
 8018582:	4602      	mov	r2, r0
 8018584:	460b      	mov	r3, r1
			double tmp =
 8018586:	4620      	mov	r0, r4
 8018588:	4629      	mov	r1, r5
 801858a:	f7e8 f845 	bl	8000618 <__aeabi_dmul>
 801858e:	4602      	mov	r2, r0
 8018590:	460b      	mov	r3, r1
 8018592:	e9c7 2308 	strd	r2, r3, [r7, #32]
			double nPayload = 8 + ((tmp > 0) ? tmp : 0);
 8018596:	f04f 0200 	mov.w	r2, #0
 801859a:	f04f 0300 	mov.w	r3, #0
 801859e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80185a2:	f7e8 fac9 	bl	8000b38 <__aeabi_dcmpgt>
 80185a6:	4603      	mov	r3, r0
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d002      	beq.n	80185b2 <RadioTimeOnAir+0x25a>
 80185ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80185b0:	e003      	b.n	80185ba <RadioTimeOnAir+0x262>
 80185b2:	f04f 0000 	mov.w	r0, #0
 80185b6:	f04f 0100 	mov.w	r1, #0
 80185ba:	f04f 0200 	mov.w	r2, #0
 80185be:	4b22      	ldr	r3, [pc, #136]	@ (8018648 <RadioTimeOnAir+0x2f0>)
 80185c0:	f7e7 fe74 	bl	80002ac <__adddf3>
 80185c4:	4602      	mov	r2, r0
 80185c6:	460b      	mov	r3, r1
 80185c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double tPayload = nPayload * ts;
 80185cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80185d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80185d4:	f7e8 f820 	bl	8000618 <__aeabi_dmul>
 80185d8:	4602      	mov	r2, r0
 80185da:	460b      	mov	r3, r1
 80185dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
			// Time on air
			double tOnAir = tPreamble + tPayload;
 80185e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80185e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80185e8:	f7e7 fe60 	bl	80002ac <__adddf3>
 80185ec:	4602      	mov	r2, r0
 80185ee:	460b      	mov	r3, r1
 80185f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
			// return milli seconds
			airTime = floor(tOnAir + 0.999);
 80185f4:	a310      	add	r3, pc, #64	@ (adr r3, 8018638 <RadioTimeOnAir+0x2e0>)
 80185f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80185fe:	f7e7 fe55 	bl	80002ac <__adddf3>
 8018602:	4602      	mov	r2, r0
 8018604:	460b      	mov	r3, r1
 8018606:	ec43 2b17 	vmov	d7, r2, r3
 801860a:	eeb0 0a47 	vmov.f32	s0, s14
 801860e:	eef0 0a67 	vmov.f32	s1, s15
 8018612:	f009 fd49 	bl	80220a8 <floor>
 8018616:	ec53 2b10 	vmov	r2, r3, d0
 801861a:	4610      	mov	r0, r2
 801861c:	4619      	mov	r1, r3
 801861e:	f7e8 fad3 	bl	8000bc8 <__aeabi_d2uiz>
 8018622:	4603      	mov	r3, r0
 8018624:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 8018626:	bf00      	nop
	}
	return airTime;
 8018628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801862a:	4618      	mov	r0, r3
 801862c:	3740      	adds	r7, #64	@ 0x40
 801862e:	46bd      	mov	sp, r7
 8018630:	bdb0      	pop	{r4, r5, r7, pc}
 8018632:	bf00      	nop
 8018634:	f3af 8000 	nop.w
 8018638:	d916872b 	.word	0xd916872b
 801863c:	3feff7ce 	.word	0x3feff7ce
 8018640:	2000caa0 	.word	0x2000caa0
 8018644:	3ff00000 	.word	0x3ff00000
 8018648:	40200000 	.word	0x40200000
 801864c:	408f4000 	.word	0x408f4000
 8018650:	20000128 	.word	0x20000128
 8018654:	40110000 	.word	0x40110000

08018658 <RadioSend>:
 *        the radio in transmission
 *
 * \param buffer     Buffer pointer
 * \param size       Buffer size
 */
void RadioSend(uint8_t *buffer, uint8_t size) {
 8018658:	b5b0      	push	{r4, r5, r7, lr}
 801865a:	b082      	sub	sp, #8
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	460b      	mov	r3, r1
 8018662:	70fb      	strb	r3, [r7, #3]
	LOGD(TAG, "SEND");
 8018664:	4b1c      	ldr	r3, [pc, #112]	@ (80186d8 <RadioSend+0x80>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	4a1c      	ldr	r2, [pc, #112]	@ (80186dc <RadioSend+0x84>)
 801866a:	2100      	movs	r1, #0
 801866c:	4618      	mov	r0, r3
 801866e:	f001 fe95 	bl	801a39c <LOG_LEVEL_DEBUG>
	SX126xTXena();
 8018672:	f001 fc78 	bl	8019f66 <SX126xTXena>
	SX126xSetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8018676:	2300      	movs	r3, #0
 8018678:	2200      	movs	r2, #0
 801867a:	f240 2101 	movw	r1, #513	@ 0x201
 801867e:	f240 2001 	movw	r0, #513	@ 0x201
 8018682:	f000 ff13 	bl	80194ac <SX126xSetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (SX126xGetPacketType() == PACKET_TYPE_LORA) {
 8018686:	f000 ffc9 	bl	801961c <SX126xGetPacketType>
 801868a:	4603      	mov	r3, r0
 801868c:	2b01      	cmp	r3, #1
 801868e:	d104      	bne.n	801869a <RadioSend+0x42>
		SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 8018690:	4a13      	ldr	r2, [pc, #76]	@ (80186e0 <RadioSend+0x88>)
 8018692:	78fb      	ldrb	r3, [r7, #3]
 8018694:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
 8018698:	e003      	b.n	80186a2 <RadioSend+0x4a>
	}
	else {
		SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 801869a:	4a11      	ldr	r2, [pc, #68]	@ (80186e0 <RadioSend+0x88>)
 801869c:	78fb      	ldrb	r3, [r7, #3]
 801869e:	f882 3020 	strb.w	r3, [r2, #32]
	}
	SX126xSetPacketParams(&SX126x.PacketParams);
 80186a2:	4810      	ldr	r0, [pc, #64]	@ (80186e4 <RadioSend+0x8c>)
 80186a4:	f001 f8ce 	bl	8019844 <SX126xSetPacketParams>

	SX126xSendPayload(buffer, size, 0);
 80186a8:	78fb      	ldrb	r3, [r7, #3]
 80186aa:	2200      	movs	r2, #0
 80186ac:	4619      	mov	r1, r3
 80186ae:	6878      	ldr	r0, [r7, #4]
 80186b0:	f000 fcea 	bl	8019088 <SX126xSendPayload>
	TimerSetValue(&TxTimeoutTimer, TxTimeout);
 80186b4:	4b0c      	ldr	r3, [pc, #48]	@ (80186e8 <RadioSend+0x90>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2200      	movs	r2, #0
 80186ba:	461c      	mov	r4, r3
 80186bc:	4615      	mov	r5, r2
 80186be:	4622      	mov	r2, r4
 80186c0:	462b      	mov	r3, r5
 80186c2:	480a      	ldr	r0, [pc, #40]	@ (80186ec <RadioSend+0x94>)
 80186c4:	f002 f950 	bl	801a968 <UTIL_TIMER_SetPeriod>
	TimerStart(&TxTimeoutTimer);
 80186c8:	4808      	ldr	r0, [pc, #32]	@ (80186ec <RadioSend+0x94>)
 80186ca:	f002 f859 	bl	801a780 <UTIL_TIMER_Start>
}
 80186ce:	bf00      	nop
 80186d0:	3708      	adds	r7, #8
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bdb0      	pop	{r4, r5, r7, pc}
 80186d6:	bf00      	nop
 80186d8:	20000120 	.word	0x20000120
 80186dc:	08022608 	.word	0x08022608
 80186e0:	2000caa0 	.word	0x2000caa0
 80186e4:	2000cab8 	.word	0x2000cab8
 80186e8:	2000c970 	.word	0x2000c970
 80186ec:	2000c930 	.word	0x2000c930

080186f0 <RadioSleep>:

void RadioSleep(void) {
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b082      	sub	sp, #8
 80186f4:	af00      	add	r7, sp, #0
	SleepParams_t params = { 0 };
 80186f6:	2300      	movs	r3, #0
 80186f8:	713b      	strb	r3, [r7, #4]

	params.Fields.WarmStart = 1;
 80186fa:	793b      	ldrb	r3, [r7, #4]
 80186fc:	f043 0304 	orr.w	r3, r3, #4
 8018700:	713b      	strb	r3, [r7, #4]
	SX126xSetSleep(params);
 8018702:	7938      	ldrb	r0, [r7, #4]
 8018704:	f000 fd6f 	bl	80191e6 <SX126xSetSleep>

	HAL_Delay(2);
 8018708:	2002      	movs	r0, #2
 801870a:	f7e9 fb5d 	bl	8001dc8 <HAL_Delay>
}
 801870e:	bf00      	nop
 8018710:	3708      	adds	r7, #8
 8018712:	46bd      	mov	sp, r7
 8018714:	bd80      	pop	{r7, pc}

08018716 <RadioStandby>:

void RadioStandby(void) {
 8018716:	b580      	push	{r7, lr}
 8018718:	af00      	add	r7, sp, #0
	SX126xSetStandby(STDBY_RC);
 801871a:	2000      	movs	r0, #0
 801871c:	f000 fd76 	bl	801920c <SX126xSetStandby>
}
 8018720:	bf00      	nop
 8018722:	bd80      	pop	{r7, pc}

08018724 <RadioRx>:

void RadioRx(uint32_t timeout) {
 8018724:	b5b0      	push	{r4, r5, r7, lr}
 8018726:	b082      	sub	sp, #8
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
	SX126xRXena();
 801872c:	f001 fc14 	bl	8019f58 <SX126xRXena>
	SX126xSetDioIrqParams(
 8018730:	2300      	movs	r3, #0
 8018732:	2200      	movs	r2, #0
 8018734:	f240 2162 	movw	r1, #610	@ 0x262
 8018738:	f240 2062 	movw	r0, #610	@ 0x262
 801873c:	f000 feb6 	bl	80194ac <SX126xSetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	// Even Continous mode is selected, put a timeout here
	if (timeout != 0) {
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d00b      	beq.n	801875e <RadioRx+0x3a>
		TimerSetValue(&RxTimeoutTimer, timeout);
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	2200      	movs	r2, #0
 801874a:	461c      	mov	r4, r3
 801874c:	4615      	mov	r5, r2
 801874e:	4622      	mov	r2, r4
 8018750:	462b      	mov	r3, r5
 8018752:	4810      	ldr	r0, [pc, #64]	@ (8018794 <RadioRx+0x70>)
 8018754:	f002 f908 	bl	801a968 <UTIL_TIMER_SetPeriod>
		TimerStart(&RxTimeoutTimer);
 8018758:	480e      	ldr	r0, [pc, #56]	@ (8018794 <RadioRx+0x70>)
 801875a:	f002 f811 	bl	801a780 <UTIL_TIMER_Start>
	}
	if (RxContinuous == true) {
 801875e:	4b0e      	ldr	r3, [pc, #56]	@ (8018798 <RadioRx+0x74>)
 8018760:	781b      	ldrb	r3, [r3, #0]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d004      	beq.n	8018770 <RadioRx+0x4c>
		SX126xSetRx(0xFFFFFF); // Rx Continuous
 8018766:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801876a:	f000 fd87 	bl	801927c <SX126xSetRx>
 801876e:	e005      	b.n	801877c <RadioRx+0x58>
	}
	else {
		SX126xSetRx(RxTimeout << 6);
 8018770:	4b0a      	ldr	r3, [pc, #40]	@ (801879c <RadioRx+0x78>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	019b      	lsls	r3, r3, #6
 8018776:	4618      	mov	r0, r3
 8018778:	f000 fd80 	bl	801927c <SX126xSetRx>
	}

	LOGI(TAG, "RX MODE, timeout = %lu", timeout);
 801877c:	4b08      	ldr	r3, [pc, #32]	@ (80187a0 <RadioRx+0x7c>)
 801877e:	6818      	ldr	r0, [r3, #0]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	4a08      	ldr	r2, [pc, #32]	@ (80187a4 <RadioRx+0x80>)
 8018784:	2100      	movs	r1, #0
 8018786:	f001 fde9 	bl	801a35c <LOG_LEVEL_INFO>
}
 801878a:	bf00      	nop
 801878c:	3708      	adds	r7, #8
 801878e:	46bd      	mov	sp, r7
 8018790:	bdb0      	pop	{r4, r5, r7, pc}
 8018792:	bf00      	nop
 8018794:	2000c950 	.word	0x2000c950
 8018798:	2000c978 	.word	0x2000c978
 801879c:	2000c974 	.word	0x2000c974
 80187a0:	20000120 	.word	0x20000120
 80187a4:	08022610 	.word	0x08022610

080187a8 <RadioRxBoosted>:

void RadioRxBoosted(uint32_t timeout) {
 80187a8:	b5b0      	push	{r4, r5, r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(
 80187b0:	2300      	movs	r3, #0
 80187b2:	2200      	movs	r2, #0
 80187b4:	f240 2162 	movw	r1, #610	@ 0x262
 80187b8:	f240 2062 	movw	r0, #610	@ 0x262
 80187bc:	f000 fe76 	bl	80194ac <SX126xSetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (RxContinuous == true) {
 80187c0:	4b10      	ldr	r3, [pc, #64]	@ (8018804 <RadioRxBoosted+0x5c>)
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d013      	beq.n	80187f0 <RadioRxBoosted+0x48>
		// Even Continous mode is selected, put a timeout here
		if (timeout != 0) {
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d00b      	beq.n	80187e6 <RadioRxBoosted+0x3e>
			TimerSetValue(&RxTimeoutTimer, timeout);
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	2200      	movs	r2, #0
 80187d2:	461c      	mov	r4, r3
 80187d4:	4615      	mov	r5, r2
 80187d6:	4622      	mov	r2, r4
 80187d8:	462b      	mov	r3, r5
 80187da:	480b      	ldr	r0, [pc, #44]	@ (8018808 <RadioRxBoosted+0x60>)
 80187dc:	f002 f8c4 	bl	801a968 <UTIL_TIMER_SetPeriod>
			TimerStart(&RxTimeoutTimer);
 80187e0:	4809      	ldr	r0, [pc, #36]	@ (8018808 <RadioRxBoosted+0x60>)
 80187e2:	f001 ffcd 	bl	801a780 <UTIL_TIMER_Start>
		}
		SX126xSetRxBoosted(0xFFFFFF); // Rx Continuous
 80187e6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80187ea:	f000 fd69 	bl	80192c0 <SX126xSetRxBoosted>
	}
	else {
		SX126xSetRxBoosted(RxTimeout << 6);
	}
}
 80187ee:	e005      	b.n	80187fc <RadioRxBoosted+0x54>
		SX126xSetRxBoosted(RxTimeout << 6);
 80187f0:	4b06      	ldr	r3, [pc, #24]	@ (801880c <RadioRxBoosted+0x64>)
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	019b      	lsls	r3, r3, #6
 80187f6:	4618      	mov	r0, r3
 80187f8:	f000 fd62 	bl	80192c0 <SX126xSetRxBoosted>
}
 80187fc:	bf00      	nop
 80187fe:	3708      	adds	r7, #8
 8018800:	46bd      	mov	sp, r7
 8018802:	bdb0      	pop	{r4, r5, r7, pc}
 8018804:	2000c978 	.word	0x2000c978
 8018808:	2000c950 	.word	0x2000c950
 801880c:	2000c974 	.word	0x2000c974

08018810 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime) {
 8018810:	b580      	push	{r7, lr}
 8018812:	b082      	sub	sp, #8
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	6039      	str	r1, [r7, #0]
	SX126xSetDioIrqParams(IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
 801881a:	2300      	movs	r3, #0
 801881c:	2200      	movs	r2, #0
 801881e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018822:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018826:	f000 fe41 	bl	80194ac <SX126xSetDioIrqParams>
			IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetRxDutyCycle(rxTime, sleepTime);
 801882a:	6839      	ldr	r1, [r7, #0]
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f000 fd69 	bl	8019304 <SX126xSetRxDutyCycle>
}
 8018832:	bf00      	nop
 8018834:	3708      	adds	r7, #8
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}

0801883a <RadioSetCadParams>:

void RadioSetCadParams(uint8_t cadSymbolNum, uint8_t cadDetPeak,
		uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout) {
 801883a:	b590      	push	{r4, r7, lr}
 801883c:	b085      	sub	sp, #20
 801883e:	af02      	add	r7, sp, #8
 8018840:	4604      	mov	r4, r0
 8018842:	4608      	mov	r0, r1
 8018844:	4611      	mov	r1, r2
 8018846:	461a      	mov	r2, r3
 8018848:	4623      	mov	r3, r4
 801884a:	71fb      	strb	r3, [r7, #7]
 801884c:	4603      	mov	r3, r0
 801884e:	71bb      	strb	r3, [r7, #6]
 8018850:	460b      	mov	r3, r1
 8018852:	717b      	strb	r3, [r7, #5]
 8018854:	4613      	mov	r3, r2
 8018856:	713b      	strb	r3, [r7, #4]
	SX126xSetCadParams((RadioLoRaCadSymbols_t) cadSymbolNum, cadDetPeak,
 8018858:	793c      	ldrb	r4, [r7, #4]
 801885a:	797a      	ldrb	r2, [r7, #5]
 801885c:	79b9      	ldrb	r1, [r7, #6]
 801885e:	79f8      	ldrb	r0, [r7, #7]
 8018860:	69bb      	ldr	r3, [r7, #24]
 8018862:	9300      	str	r3, [sp, #0]
 8018864:	4623      	mov	r3, r4
 8018866:	f001 f875 	bl	8019954 <SX126xSetCadParams>
			cadDetMin, (RadioCadExitModes_t) cadExitMode, cadTimeout);
}
 801886a:	bf00      	nop
 801886c:	370c      	adds	r7, #12
 801886e:	46bd      	mov	sp, r7
 8018870:	bd90      	pop	{r4, r7, pc}

08018872 <RadioStartCad>:

void RadioStartCad(void) {
 8018872:	b580      	push	{r7, lr}
 8018874:	af00      	add	r7, sp, #0
	SX126xRXena();
 8018876:	f001 fb6f 	bl	8019f58 <SX126xRXena>
	SX126xSetDioIrqParams(IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
 801887a:	2300      	movs	r3, #0
 801887c:	2200      	movs	r2, #0
 801887e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018882:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018886:	f000 fe11 	bl	80194ac <SX126xSetDioIrqParams>
			IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
	SX126xSetCad();
 801888a:	f000 fd64 	bl	8019356 <SX126xSetCad>
}
 801888e:	bf00      	nop
 8018890:	bd80      	pop	{r7, pc}
	...

08018894 <RadioSetTxContinuousWave>:
 *
 * \param freq       Channel RF frequency
 * \param power      Sets the output power [dBm]
 * \param time       Transmission mode timeout [s]
 */
void RadioSetTxContinuousWave(uint32_t freq, int8_t power, uint16_t time) {
 8018894:	b580      	push	{r7, lr}
 8018896:	b082      	sub	sp, #8
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
 801889c:	460b      	mov	r3, r1
 801889e:	70fb      	strb	r3, [r7, #3]
 80188a0:	4613      	mov	r3, r2
 80188a2:	803b      	strh	r3, [r7, #0]
	SX126xSetRfFrequency(freq);
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f000 fe5f 	bl	8019568 <SX126xSetRfFrequency>
	SX126xSetRfTxPower(power);
 80188aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80188ae:	4618      	mov	r0, r3
 80188b0:	f001 fb2a 	bl	8019f08 <SX126xSetRfTxPower>
	SX126xSetTxContinuousWave();
 80188b4:	f000 fd5b 	bl	801936e <SX126xSetTxContinuousWave>

	TimerSetValue(&TxTimeoutTimer, time * 1e3);
 80188b8:	883b      	ldrh	r3, [r7, #0]
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7e7 fe42 	bl	8000544 <__aeabi_i2d>
 80188c0:	f04f 0200 	mov.w	r2, #0
 80188c4:	4b0a      	ldr	r3, [pc, #40]	@ (80188f0 <RadioSetTxContinuousWave+0x5c>)
 80188c6:	f7e7 fea7 	bl	8000618 <__aeabi_dmul>
 80188ca:	4602      	mov	r2, r0
 80188cc:	460b      	mov	r3, r1
 80188ce:	4610      	mov	r0, r2
 80188d0:	4619      	mov	r1, r3
 80188d2:	f7e8 fa01 	bl	8000cd8 <__aeabi_d2ulz>
 80188d6:	4602      	mov	r2, r0
 80188d8:	460b      	mov	r3, r1
 80188da:	4806      	ldr	r0, [pc, #24]	@ (80188f4 <RadioSetTxContinuousWave+0x60>)
 80188dc:	f002 f844 	bl	801a968 <UTIL_TIMER_SetPeriod>
	TimerStart(&TxTimeoutTimer);
 80188e0:	4804      	ldr	r0, [pc, #16]	@ (80188f4 <RadioSetTxContinuousWave+0x60>)
 80188e2:	f001 ff4d 	bl	801a780 <UTIL_TIMER_Start>
}
 80188e6:	bf00      	nop
 80188e8:	3708      	adds	r7, #8
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
 80188ee:	bf00      	nop
 80188f0:	408f4000 	.word	0x408f4000
 80188f4:	2000c930 	.word	0x2000c930

080188f8 <RadioRssi>:

int16_t RadioRssi(RadioModems_t modem) {
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	4603      	mov	r3, r0
 8018900:	71fb      	strb	r3, [r7, #7]
	return SX126xGetRssiInst();
 8018902:	f001 f870 	bl	80199e6 <SX126xGetRssiInst>
 8018906:	4603      	mov	r3, r0
}
 8018908:	4618      	mov	r0, r3
 801890a:	3708      	adds	r7, #8
 801890c:	46bd      	mov	sp, r7
 801890e:	bd80      	pop	{r7, pc}

08018910 <RadioWrite>:
 * \brief Writes the radio register at the specified address
 *
 * \param  addr Register address
 * \param  data New register value
 */
void RadioWrite(uint16_t addr, uint8_t data) {
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	4603      	mov	r3, r0
 8018918:	460a      	mov	r2, r1
 801891a:	80fb      	strh	r3, [r7, #6]
 801891c:	4613      	mov	r3, r2
 801891e:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegister(addr, data);
 8018920:	797a      	ldrb	r2, [r7, #5]
 8018922:	88fb      	ldrh	r3, [r7, #6]
 8018924:	4611      	mov	r1, r2
 8018926:	4618      	mov	r0, r3
 8018928:	f001 fa20 	bl	8019d6c <SX126xWriteRegister>
}
 801892c:	bf00      	nop
 801892e:	3708      	adds	r7, #8
 8018930:	46bd      	mov	sp, r7
 8018932:	bd80      	pop	{r7, pc}

08018934 <RadioRead>:
/*!
 * \brief Reads the radio register at the specified address
 *
 * \param  addr Register address
 */
uint8_t RadioRead(uint16_t addr) {
 8018934:	b580      	push	{r7, lr}
 8018936:	b082      	sub	sp, #8
 8018938:	af00      	add	r7, sp, #0
 801893a:	4603      	mov	r3, r0
 801893c:	80fb      	strh	r3, [r7, #6]
	return SX126xReadRegister(addr);
 801893e:	88fb      	ldrh	r3, [r7, #6]
 8018940:	4618      	mov	r0, r3
 8018942:	f001 fa5f 	bl	8019e04 <SX126xReadRegister>
 8018946:	4603      	mov	r3, r0
}
 8018948:	4618      	mov	r0, r3
 801894a:	3708      	adds	r7, #8
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}

08018950 <RadioWriteBuffer>:

void RadioWriteBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 8018950:	b580      	push	{r7, lr}
 8018952:	b082      	sub	sp, #8
 8018954:	af00      	add	r7, sp, #0
 8018956:	4603      	mov	r3, r0
 8018958:	6039      	str	r1, [r7, #0]
 801895a:	80fb      	strh	r3, [r7, #6]
 801895c:	4613      	mov	r3, r2
 801895e:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegisters(addr, buffer, size);
 8018960:	797b      	ldrb	r3, [r7, #5]
 8018962:	b29a      	uxth	r2, r3
 8018964:	88fb      	ldrh	r3, [r7, #6]
 8018966:	6839      	ldr	r1, [r7, #0]
 8018968:	4618      	mov	r0, r3
 801896a:	f001 f9c7 	bl	8019cfc <SX126xWriteRegisters>
}
 801896e:	bf00      	nop
 8018970:	3708      	adds	r7, #8
 8018972:	46bd      	mov	sp, r7
 8018974:	bd80      	pop	{r7, pc}

08018976 <RadioReadBuffer>:

void RadioReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 8018976:	b580      	push	{r7, lr}
 8018978:	b082      	sub	sp, #8
 801897a:	af00      	add	r7, sp, #0
 801897c:	4603      	mov	r3, r0
 801897e:	6039      	str	r1, [r7, #0]
 8018980:	80fb      	strh	r3, [r7, #6]
 8018982:	4613      	mov	r3, r2
 8018984:	717b      	strb	r3, [r7, #5]
	SX126xReadRegisters(addr, buffer, size);
 8018986:	797b      	ldrb	r3, [r7, #5]
 8018988:	b29a      	uxth	r2, r3
 801898a:	88fb      	ldrh	r3, [r7, #6]
 801898c:	6839      	ldr	r1, [r7, #0]
 801898e:	4618      	mov	r0, r3
 8018990:	f001 f9fe 	bl	8019d90 <SX126xReadRegisters>
}
 8018994:	bf00      	nop
 8018996:	3708      	adds	r7, #8
 8018998:	46bd      	mov	sp, r7
 801899a:	bd80      	pop	{r7, pc}

0801899c <RadioSetMaxPayloadLength>:

void RadioReadFifo(uint8_t *buffer, uint8_t size) {
	SX126xReadBuffer(0, buffer, size);
}

void RadioSetMaxPayloadLength(RadioModems_t modem, uint8_t max) {
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	4603      	mov	r3, r0
 80189a4:	460a      	mov	r2, r1
 80189a6:	71fb      	strb	r3, [r7, #7]
 80189a8:	4613      	mov	r3, r2
 80189aa:	71bb      	strb	r3, [r7, #6]
	if (modem == MODEM_LORA) {
 80189ac:	79fb      	ldrb	r3, [r7, #7]
 80189ae:	2b01      	cmp	r3, #1
 80189b0:	d10b      	bne.n	80189ca <RadioSetMaxPayloadLength+0x2e>
		SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80189b2:	4a0f      	ldr	r2, [pc, #60]	@ (80189f0 <RadioSetMaxPayloadLength+0x54>)
 80189b4:	79bb      	ldrb	r3, [r7, #6]
 80189b6:	7013      	strb	r3, [r2, #0]
 80189b8:	4b0d      	ldr	r3, [pc, #52]	@ (80189f0 <RadioSetMaxPayloadLength+0x54>)
 80189ba:	781a      	ldrb	r2, [r3, #0]
 80189bc:	4b0d      	ldr	r3, [pc, #52]	@ (80189f4 <RadioSetMaxPayloadLength+0x58>)
 80189be:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		SX126xSetPacketParams(&SX126x.PacketParams);
 80189c2:	480d      	ldr	r0, [pc, #52]	@ (80189f8 <RadioSetMaxPayloadLength+0x5c>)
 80189c4:	f000 ff3e 	bl	8019844 <SX126xSetPacketParams>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
					max;
			SX126xSetPacketParams(&SX126x.PacketParams);
		}
	}
}
 80189c8:	e00e      	b.n	80189e8 <RadioSetMaxPayloadLength+0x4c>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType
 80189ca:	4b0a      	ldr	r3, [pc, #40]	@ (80189f4 <RadioSetMaxPayloadLength+0x58>)
 80189cc:	7fdb      	ldrb	r3, [r3, #31]
 80189ce:	2b01      	cmp	r3, #1
 80189d0:	d10a      	bne.n	80189e8 <RadioSetMaxPayloadLength+0x4c>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
 80189d2:	4a07      	ldr	r2, [pc, #28]	@ (80189f0 <RadioSetMaxPayloadLength+0x54>)
 80189d4:	79bb      	ldrb	r3, [r7, #6]
 80189d6:	7013      	strb	r3, [r2, #0]
 80189d8:	4b05      	ldr	r3, [pc, #20]	@ (80189f0 <RadioSetMaxPayloadLength+0x54>)
 80189da:	781a      	ldrb	r2, [r3, #0]
 80189dc:	4b05      	ldr	r3, [pc, #20]	@ (80189f4 <RadioSetMaxPayloadLength+0x58>)
 80189de:	f883 2020 	strb.w	r2, [r3, #32]
			SX126xSetPacketParams(&SX126x.PacketParams);
 80189e2:	4805      	ldr	r0, [pc, #20]	@ (80189f8 <RadioSetMaxPayloadLength+0x5c>)
 80189e4:	f000 ff2e 	bl	8019844 <SX126xSetPacketParams>
}
 80189e8:	bf00      	nop
 80189ea:	3708      	adds	r7, #8
 80189ec:	46bd      	mov	sp, r7
 80189ee:	bd80      	pop	{r7, pc}
 80189f0:	200001b8 	.word	0x200001b8
 80189f4:	2000caa0 	.word	0x2000caa0
 80189f8:	2000cab8 	.word	0x2000cab8

080189fc <RadioSetPublicNetwork>:

void RadioSetPublicNetwork(bool enable) {
 80189fc:	b580      	push	{r7, lr}
 80189fe:	b082      	sub	sp, #8
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	4603      	mov	r3, r0
 8018a04:	71fb      	strb	r3, [r7, #7]
	RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8018a06:	4a13      	ldr	r2, [pc, #76]	@ (8018a54 <RadioSetPublicNetwork+0x58>)
 8018a08:	79fb      	ldrb	r3, [r7, #7]
 8018a0a:	7013      	strb	r3, [r2, #0]
 8018a0c:	4b11      	ldr	r3, [pc, #68]	@ (8018a54 <RadioSetPublicNetwork+0x58>)
 8018a0e:	781a      	ldrb	r2, [r3, #0]
 8018a10:	4b10      	ldr	r3, [pc, #64]	@ (8018a54 <RadioSetPublicNetwork+0x58>)
 8018a12:	705a      	strb	r2, [r3, #1]

	RadioSetModem(MODEM_LORA);
 8018a14:	2001      	movs	r0, #1
 8018a16:	f7ff f8d3 	bl	8017bc0 <RadioSetModem>
	if (enable == true) {
 8018a1a:	79fb      	ldrb	r3, [r7, #7]
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d00a      	beq.n	8018a36 <RadioSetPublicNetwork+0x3a>
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD,
 8018a20:	2134      	movs	r1, #52	@ 0x34
 8018a22:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018a26:	f001 f9a1 	bl	8019d6c <SX126xWriteRegister>
				(LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 8018a2a:	2144      	movs	r1, #68	@ 0x44
 8018a2c:	f240 7041 	movw	r0, #1857	@ 0x741
 8018a30:	f001 f99c 	bl	8019d6c <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD,
				(LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
				LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
	}
}
 8018a34:	e009      	b.n	8018a4a <RadioSetPublicNetwork+0x4e>
		SX126xWriteRegister(REG_LR_SYNCWORD,
 8018a36:	2114      	movs	r1, #20
 8018a38:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018a3c:	f001 f996 	bl	8019d6c <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 8018a40:	2124      	movs	r1, #36	@ 0x24
 8018a42:	f240 7041 	movw	r0, #1857	@ 0x741
 8018a46:	f001 f991 	bl	8019d6c <SX126xWriteRegister>
}
 8018a4a:	bf00      	nop
 8018a4c:	3708      	adds	r7, #8
 8018a4e:	46bd      	mov	sp, r7
 8018a50:	bd80      	pop	{r7, pc}
 8018a52:	bf00      	nop
 8018a54:	2000ca98 	.word	0x2000ca98

08018a58 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime(void) {
 8018a58:	b480      	push	{r7}
 8018a5a:	af00      	add	r7, sp, #0
	return (RADIO_WAKEUP_TIME);
 8018a5c:	2303      	movs	r3, #3
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	46bd      	mov	sp, r7
 8018a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a66:	4770      	bx	lr

08018a68 <RadioOnTxTimeoutIrq>:

void RadioOnTxTimeoutIrq(void *arg) {
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b082      	sub	sp, #8
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
	// if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL))
	// {
	// 	RadioEvents->TxTimeout();
	// }
	BoardDisableIrq();
 8018a70:	f000 fa7e 	bl	8018f70 <BoardDisableIrq>
	TimerTxTimeout = true;
 8018a74:	4b08      	ldr	r3, [pc, #32]	@ (8018a98 <RadioOnTxTimeoutIrq+0x30>)
 8018a76:	2201      	movs	r2, #1
 8018a78:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 8018a7a:	f000 fa82 	bl	8018f82 <BoardEnableIrq>
	TimerStop(&TxTimeoutTimer);
 8018a7e:	4807      	ldr	r0, [pc, #28]	@ (8018a9c <RadioOnTxTimeoutIrq+0x34>)
 8018a80:	f001 ff02 	bl	801a888 <UTIL_TIMER_Stop>

	RadioBgIrqProcess();
 8018a84:	f000 f852 	bl	8018b2c <RadioBgIrqProcess>
	RadioStandby();
 8018a88:	f7ff fe45 	bl	8018716 <RadioStandby>
	RadioSleep();
 8018a8c:	f7ff fe30 	bl	80186f0 <RadioSleep>
}
 8018a90:	bf00      	nop
 8018a92:	3708      	adds	r7, #8
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}
 8018a98:	2000ca91 	.word	0x2000ca91
 8018a9c:	2000c930 	.word	0x2000c930

08018aa0 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq(void *arg) {
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
	// if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL))
	// {
	// 	RadioEvents->RxTimeout();
	// }
	BoardDisableIrq();
 8018aa8:	f000 fa62 	bl	8018f70 <BoardDisableIrq>
	TimerRxTimeout = true;
 8018aac:	4b08      	ldr	r3, [pc, #32]	@ (8018ad0 <RadioOnRxTimeoutIrq+0x30>)
 8018aae:	2201      	movs	r2, #1
 8018ab0:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 8018ab2:	f000 fa66 	bl	8018f82 <BoardEnableIrq>
	TimerStop(&RxTimeoutTimer);
 8018ab6:	4807      	ldr	r0, [pc, #28]	@ (8018ad4 <RadioOnRxTimeoutIrq+0x34>)
 8018ab8:	f001 fee6 	bl	801a888 <UTIL_TIMER_Stop>

	RadioBgIrqProcess();
 8018abc:	f000 f836 	bl	8018b2c <RadioBgIrqProcess>
	RadioStandby();
 8018ac0:	f7ff fe29 	bl	8018716 <RadioStandby>
	RadioSleep();
 8018ac4:	f7ff fe14 	bl	80186f0 <RadioSleep>
}
 8018ac8:	bf00      	nop
 8018aca:	3708      	adds	r7, #8
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}
 8018ad0:	2000ca90 	.word	0x2000ca90
 8018ad4:	2000c950 	.word	0x2000c950

08018ad8 <RadioOnDioIrq>:



static BaseType_t yeild = pdTRUE;

void RadioOnDioIrq(void){
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	af00      	add	r7, sp, #0
	BoardDisableIrq();
 8018adc:	f000 fa48 	bl	8018f70 <BoardDisableIrq>
	IrqFired = true;
 8018ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8018b1c <RadioOnDioIrq+0x44>)
 8018ae2:	2201      	movs	r2, #1
 8018ae4:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 8018ae6:	f000 fa4c 	bl	8018f82 <BoardEnableIrq>
	xSemaphoreGiveFromISR(_lora_sem, &yeild);
 8018aea:	4b0d      	ldr	r3, [pc, #52]	@ (8018b20 <RadioOnDioIrq+0x48>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	490d      	ldr	r1, [pc, #52]	@ (8018b24 <RadioOnDioIrq+0x4c>)
 8018af0:	4618      	mov	r0, r3
 8018af2:	f7f0 f839 	bl	8008b68 <xQueueGiveFromISR>
	if (yeild) portEND_SWITCHING_ISR(yeild);
 8018af6:	4b0b      	ldr	r3, [pc, #44]	@ (8018b24 <RadioOnDioIrq+0x4c>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d00b      	beq.n	8018b16 <RadioOnDioIrq+0x3e>
 8018afe:	4b09      	ldr	r3, [pc, #36]	@ (8018b24 <RadioOnDioIrq+0x4c>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d007      	beq.n	8018b16 <RadioOnDioIrq+0x3e>
 8018b06:	4b08      	ldr	r3, [pc, #32]	@ (8018b28 <RadioOnDioIrq+0x50>)
 8018b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018b0c:	601a      	str	r2, [r3, #0]
 8018b0e:	f3bf 8f4f 	dsb	sy
 8018b12:	f3bf 8f6f 	isb	sy
}
 8018b16:	bf00      	nop
 8018b18:	bd80      	pop	{r7, pc}
 8018b1a:	bf00      	nop
 8018b1c:	2000ca8f 	.word	0x2000ca8f
 8018b20:	2000ca94 	.word	0x2000ca94
 8018b24:	200001bc 	.word	0x200001bc
 8018b28:	e000ed04 	.word	0xe000ed04

08018b2c <RadioBgIrqProcess>:

void RadioBgIrqProcess(void) {
 8018b2c:	b590      	push	{r4, r7, lr}
 8018b2e:	b083      	sub	sp, #12
 8018b30:	af00      	add	r7, sp, #0
	bool rx_timeout_handled = false;
 8018b32:	2300      	movs	r3, #0
 8018b34:	71fb      	strb	r3, [r7, #7]
	bool tx_timeout_handled = false;
 8018b36:	2300      	movs	r3, #0
 8018b38:	71bb      	strb	r3, [r7, #6]
	if (IrqFired == true) {
 8018b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8018d30 <RadioBgIrqProcess+0x204>)
 8018b3c:	781b      	ldrb	r3, [r3, #0]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	f000 8169 	beq.w	8018e16 <RadioBgIrqProcess+0x2ea>
		BoardDisableIrq();
 8018b44:	f000 fa14 	bl	8018f70 <BoardDisableIrq>
		IrqFired = false;
 8018b48:	4b79      	ldr	r3, [pc, #484]	@ (8018d30 <RadioBgIrqProcess+0x204>)
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	701a      	strb	r2, [r3, #0]
		BoardEnableIrq();
 8018b4e:	f000 fa18 	bl	8018f82 <BoardEnableIrq>

		uint16_t irqRegs = SX126xGetIrqStatus();
 8018b52:	f000 fce5 	bl	8019520 <SX126xGetIrqStatus>
 8018b56:	4603      	mov	r3, r0
 8018b58:	80bb      	strh	r3, [r7, #4]
		SX126xClearIrqStatus(IRQ_RADIO_ALL);
 8018b5a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018b5e:	f000 ffd7 	bl	8019b10 <SX126xClearIrqStatus>

		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE) {
 8018b62:	88bb      	ldrh	r3, [r7, #4]
 8018b64:	f003 0301 	and.w	r3, r3, #1
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d01b      	beq.n	8018ba4 <RadioBgIrqProcess+0x78>
			LOGD(TAG, "IRQ TX DONE");
 8018b6c:	4b71      	ldr	r3, [pc, #452]	@ (8018d34 <RadioBgIrqProcess+0x208>)
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	4a71      	ldr	r2, [pc, #452]	@ (8018d38 <RadioBgIrqProcess+0x20c>)
 8018b72:	2100      	movs	r1, #0
 8018b74:	4618      	mov	r0, r3
 8018b76:	f001 fc11 	bl	801a39c <LOG_LEVEL_DEBUG>
			tx_timeout_handled = true;
 8018b7a:	2301      	movs	r3, #1
 8018b7c:	71bb      	strb	r3, [r7, #6]
			TimerStop(&TxTimeoutTimer);
 8018b7e:	486f      	ldr	r0, [pc, #444]	@ (8018d3c <RadioBgIrqProcess+0x210>)
 8018b80:	f001 fe82 	bl	801a888 <UTIL_TIMER_Stop>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 8018b84:	2001      	movs	r0, #1
 8018b86:	f000 fa29 	bl	8018fdc <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->TxDone != NULL)) {
 8018b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d008      	beq.n	8018ba4 <RadioBgIrqProcess+0x78>
 8018b92:	4b6b      	ldr	r3, [pc, #428]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d003      	beq.n	8018ba4 <RadioBgIrqProcess+0x78>
				RadioEvents->TxDone();
 8018b9c:	4b68      	ldr	r3, [pc, #416]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE) {
 8018ba4:	88bb      	ldrh	r3, [r7, #4]
 8018ba6:	f003 0302 	and.w	r3, r3, #2
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d074      	beq.n	8018c98 <RadioBgIrqProcess+0x16c>
			LOGD(TAG, "IRQ RX DONE");
 8018bae:	4b61      	ldr	r3, [pc, #388]	@ (8018d34 <RadioBgIrqProcess+0x208>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	4a64      	ldr	r2, [pc, #400]	@ (8018d44 <RadioBgIrqProcess+0x218>)
 8018bb4:	2100      	movs	r1, #0
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f001 fbf0 	bl	801a39c <LOG_LEVEL_DEBUG>
			uint8_t size;

			rx_timeout_handled = true;
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	71fb      	strb	r3, [r7, #7]
			TimerStop(&RxTimeoutTimer);
 8018bc0:	4861      	ldr	r0, [pc, #388]	@ (8018d48 <RadioBgIrqProcess+0x21c>)
 8018bc2:	f001 fe61 	bl	801a888 <UTIL_TIMER_Stop>
			if (RxContinuous == false) {
 8018bc6:	4b61      	ldr	r3, [pc, #388]	@ (8018d4c <RadioBgIrqProcess+0x220>)
 8018bc8:	781b      	ldrb	r3, [r3, #0]
 8018bca:	f083 0301 	eor.w	r3, r3, #1
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d014      	beq.n	8018bfe <RadioBgIrqProcess+0xd2>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8018bd4:	2001      	movs	r0, #1
 8018bd6:	f000 fa01 	bl	8018fdc <SX126xSetOperatingMode>

				// WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2 datasheet chapter 15.3
				// RegRtcControl = @address 0x0902
				SX126xWriteRegister(0x0902, 0x00);
 8018bda:	2100      	movs	r1, #0
 8018bdc:	f640 1002 	movw	r0, #2306	@ 0x902
 8018be0:	f001 f8c4 	bl	8019d6c <SX126xWriteRegister>
				// RegEventMask = @address 0x0944
				SX126xWriteRegister(0x0944,
						SX126xReadRegister(0x0944) | (1 << 1));
 8018be4:	f640 1044 	movw	r0, #2372	@ 0x944
 8018be8:	f001 f90c 	bl	8019e04 <SX126xReadRegister>
 8018bec:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0944,
 8018bee:	f043 0302 	orr.w	r3, r3, #2
 8018bf2:	b2db      	uxtb	r3, r3
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	f640 1044 	movw	r0, #2372	@ 0x944
 8018bfa:	f001 f8b7 	bl	8019d6c <SX126xWriteRegister>
				// WORKAROUND END
			}
			memset(RadioRxPayload, 0, 255);
 8018bfe:	22ff      	movs	r2, #255	@ 0xff
 8018c00:	2100      	movs	r1, #0
 8018c02:	4853      	ldr	r0, [pc, #332]	@ (8018d50 <RadioBgIrqProcess+0x224>)
 8018c04:	f002 ffa4 	bl	801bb50 <memset>

			if ((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR) {
 8018c08:	88bb      	ldrh	r3, [r7, #4]
 8018c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d022      	beq.n	8018c58 <RadioBgIrqProcess+0x12c>
				LOGE(TAG, "IRQ CRC ERROR");
 8018c12:	4b48      	ldr	r3, [pc, #288]	@ (8018d34 <RadioBgIrqProcess+0x208>)
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	4a4f      	ldr	r2, [pc, #316]	@ (8018d54 <RadioBgIrqProcess+0x228>)
 8018c18:	2100      	movs	r1, #0
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f001 fb5e 	bl	801a2dc <LOG_LEVEL_ERROR>

				uint8_t size;
				// Discard buffer
				memset(RadioRxPayload, 0, 255);
 8018c20:	22ff      	movs	r2, #255	@ 0xff
 8018c22:	2100      	movs	r1, #0
 8018c24:	484a      	ldr	r0, [pc, #296]	@ (8018d50 <RadioBgIrqProcess+0x224>)
 8018c26:	f002 ff93 	bl	801bb50 <memset>
				SX126xGetPayload(RadioRxPayload, &size, 255);
 8018c2a:	1cbb      	adds	r3, r7, #2
 8018c2c:	22ff      	movs	r2, #255	@ 0xff
 8018c2e:	4619      	mov	r1, r3
 8018c30:	4847      	ldr	r0, [pc, #284]	@ (8018d50 <RadioBgIrqProcess+0x224>)
 8018c32:	f000 fa07 	bl	8019044 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8018c36:	4848      	ldr	r0, [pc, #288]	@ (8018d58 <RadioBgIrqProcess+0x22c>)
 8018c38:	f000 ff18 	bl	8019a6c <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxError)) {
 8018c3c:	4b40      	ldr	r3, [pc, #256]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d029      	beq.n	8018c98 <RadioBgIrqProcess+0x16c>
 8018c44:	4b3e      	ldr	r3, [pc, #248]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	691b      	ldr	r3, [r3, #16]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d024      	beq.n	8018c98 <RadioBgIrqProcess+0x16c>
					RadioEvents->RxError();
 8018c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	691b      	ldr	r3, [r3, #16]
 8018c54:	4798      	blx	r3
 8018c56:	e01f      	b.n	8018c98 <RadioBgIrqProcess+0x16c>
				}
			}
			else {
				SX126xGetPayload(RadioRxPayload, &size, 255);
 8018c58:	1cfb      	adds	r3, r7, #3
 8018c5a:	22ff      	movs	r2, #255	@ 0xff
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	483c      	ldr	r0, [pc, #240]	@ (8018d50 <RadioBgIrqProcess+0x224>)
 8018c60:	f000 f9f0 	bl	8019044 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 8018c64:	483c      	ldr	r0, [pc, #240]	@ (8018d58 <RadioBgIrqProcess+0x22c>)
 8018c66:	f000 ff01 	bl	8019a6c <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxDone != NULL)) {
 8018c6a:	4b35      	ldr	r3, [pc, #212]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d012      	beq.n	8018c98 <RadioBgIrqProcess+0x16c>
 8018c72:	4b33      	ldr	r3, [pc, #204]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	689b      	ldr	r3, [r3, #8]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d00d      	beq.n	8018c98 <RadioBgIrqProcess+0x16c>
					RadioEvents->RxDone(RadioRxPayload, size,
 8018c7c:	4b30      	ldr	r3, [pc, #192]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	689c      	ldr	r4, [r3, #8]
 8018c82:	78fb      	ldrb	r3, [r7, #3]
 8018c84:	4619      	mov	r1, r3
							RadioPktStatus.Params.LoRa.RssiPkt,
 8018c86:	4b34      	ldr	r3, [pc, #208]	@ (8018d58 <RadioBgIrqProcess+0x22c>)
 8018c88:	f993 300c 	ldrsb.w	r3, [r3, #12]
					RadioEvents->RxDone(RadioRxPayload, size,
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	4b32      	ldr	r3, [pc, #200]	@ (8018d58 <RadioBgIrqProcess+0x22c>)
 8018c90:	f993 300d 	ldrsb.w	r3, [r3, #13]
 8018c94:	482e      	ldr	r0, [pc, #184]	@ (8018d50 <RadioBgIrqProcess+0x224>)
 8018c96:	47a0      	blx	r4
							RadioPktStatus.Params.LoRa.SnrPkt);
				}
			}
		}

		if ((irqRegs & IRQ_CAD_DONE) == IRQ_CAD_DONE) {
 8018c98:	88bb      	ldrh	r3, [r7, #4]
 8018c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d01f      	beq.n	8018ce2 <RadioBgIrqProcess+0x1b6>
			LOGD(TAG, "IRQ CAD DONE");
 8018ca2:	4b24      	ldr	r3, [pc, #144]	@ (8018d34 <RadioBgIrqProcess+0x208>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8018d5c <RadioBgIrqProcess+0x230>)
 8018ca8:	2100      	movs	r1, #0
 8018caa:	4618      	mov	r0, r3
 8018cac:	f001 fb76 	bl	801a39c <LOG_LEVEL_DEBUG>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 8018cb0:	2001      	movs	r0, #1
 8018cb2:	f000 f993 	bl	8018fdc <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->CadDone != NULL)) {
 8018cb6:	4b22      	ldr	r3, [pc, #136]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d011      	beq.n	8018ce2 <RadioBgIrqProcess+0x1b6>
 8018cbe:	4b20      	ldr	r3, [pc, #128]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	69db      	ldr	r3, [r3, #28]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d00c      	beq.n	8018ce2 <RadioBgIrqProcess+0x1b6>
				RadioEvents->CadDone(
 8018cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	69db      	ldr	r3, [r3, #28]
						((irqRegs & IRQ_CAD_ACTIVITY_DETECTED)
 8018cce:	88ba      	ldrh	r2, [r7, #4]
 8018cd0:	f402 7280 	and.w	r2, r2, #256	@ 0x100
				RadioEvents->CadDone(
 8018cd4:	2a00      	cmp	r2, #0
 8018cd6:	bf14      	ite	ne
 8018cd8:	2201      	movne	r2, #1
 8018cda:	2200      	moveq	r2, #0
 8018cdc:	b2d2      	uxtb	r2, r2
 8018cde:	4610      	mov	r0, r2
 8018ce0:	4798      	blx	r3
								== IRQ_CAD_ACTIVITY_DETECTED));
			}
		}

		if ((irqRegs & IRQ_RX_TX_TIMEOUT) == IRQ_RX_TX_TIMEOUT) {
 8018ce2:	88bb      	ldrh	r3, [r7, #4]
 8018ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	d05c      	beq.n	8018da6 <RadioBgIrqProcess+0x27a>
			if (SX126xGetOperatingMode() == MODE_TX) {
 8018cec:	f000 f96a 	bl	8018fc4 <SX126xGetOperatingMode>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	2b04      	cmp	r3, #4
 8018cf4:	d136      	bne.n	8018d64 <RadioBgIrqProcess+0x238>
				LOGE(TAG, "IRQ TX TIMEOUT");
 8018cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8018d34 <RadioBgIrqProcess+0x208>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4a19      	ldr	r2, [pc, #100]	@ (8018d60 <RadioBgIrqProcess+0x234>)
 8018cfc:	2100      	movs	r1, #0
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f001 faec 	bl	801a2dc <LOG_LEVEL_ERROR>
				tx_timeout_handled = true;
 8018d04:	2301      	movs	r3, #1
 8018d06:	71bb      	strb	r3, [r7, #6]
				TimerStop(&TxTimeoutTimer);
 8018d08:	480c      	ldr	r0, [pc, #48]	@ (8018d3c <RadioBgIrqProcess+0x210>)
 8018d0a:	f001 fdbd 	bl	801a888 <UTIL_TIMER_Stop>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8018d0e:	2001      	movs	r0, #1
 8018d10:	f000 f964 	bl	8018fdc <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 8018d14:	4b0a      	ldr	r3, [pc, #40]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d044      	beq.n	8018da6 <RadioBgIrqProcess+0x27a>
 8018d1c:	4b08      	ldr	r3, [pc, #32]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d03f      	beq.n	8018da6 <RadioBgIrqProcess+0x27a>
					RadioEvents->TxTimeout();
 8018d26:	4b06      	ldr	r3, [pc, #24]	@ (8018d40 <RadioBgIrqProcess+0x214>)
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	685b      	ldr	r3, [r3, #4]
 8018d2c:	4798      	blx	r3
 8018d2e:	e03a      	b.n	8018da6 <RadioBgIrqProcess+0x27a>
 8018d30:	2000ca8f 	.word	0x2000ca8f
 8018d34:	20000120 	.word	0x20000120
 8018d38:	08022630 	.word	0x08022630
 8018d3c:	2000c930 	.word	0x2000c930
 8018d40:	2000ca9c 	.word	0x2000ca9c
 8018d44:	0802263c 	.word	0x0802263c
 8018d48:	2000c950 	.word	0x2000c950
 8018d4c:	2000c978 	.word	0x2000c978
 8018d50:	2000c990 	.word	0x2000c990
 8018d54:	08022648 	.word	0x08022648
 8018d58:	2000c97c 	.word	0x2000c97c
 8018d5c:	08022658 	.word	0x08022658
 8018d60:	08022668 	.word	0x08022668
				}
			}
			else if (SX126xGetOperatingMode() == MODE_RX) {
 8018d64:	f000 f92e 	bl	8018fc4 <SX126xGetOperatingMode>
 8018d68:	4603      	mov	r3, r0
 8018d6a:	2b05      	cmp	r3, #5
 8018d6c:	d11b      	bne.n	8018da6 <RadioBgIrqProcess+0x27a>
				LOGE(TAG, "IRQ RX TIMEOUT");
 8018d6e:	4b50      	ldr	r3, [pc, #320]	@ (8018eb0 <RadioBgIrqProcess+0x384>)
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	4a50      	ldr	r2, [pc, #320]	@ (8018eb4 <RadioBgIrqProcess+0x388>)
 8018d74:	2100      	movs	r1, #0
 8018d76:	4618      	mov	r0, r3
 8018d78:	f001 fab0 	bl	801a2dc <LOG_LEVEL_ERROR>
				rx_timeout_handled = true;
 8018d7c:	2301      	movs	r3, #1
 8018d7e:	71fb      	strb	r3, [r7, #7]
				TimerStop(&RxTimeoutTimer);
 8018d80:	484d      	ldr	r0, [pc, #308]	@ (8018eb8 <RadioBgIrqProcess+0x38c>)
 8018d82:	f001 fd81 	bl	801a888 <UTIL_TIMER_Stop>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8018d86:	2001      	movs	r0, #1
 8018d88:	f000 f928 	bl	8018fdc <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 8018d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018d8e:	681b      	ldr	r3, [r3, #0]
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d008      	beq.n	8018da6 <RadioBgIrqProcess+0x27a>
 8018d94:	4b49      	ldr	r3, [pc, #292]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	68db      	ldr	r3, [r3, #12]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d003      	beq.n	8018da6 <RadioBgIrqProcess+0x27a>
					RadioEvents->RxTimeout();
 8018d9e:	4b47      	ldr	r3, [pc, #284]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	68db      	ldr	r3, [r3, #12]
 8018da4:	4798      	blx	r3
				}
			}
		}

		if ((irqRegs & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED) {
 8018da6:	88bb      	ldrh	r3, [r7, #4]
 8018da8:	f003 0304 	and.w	r3, r3, #4
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d00c      	beq.n	8018dca <RadioBgIrqProcess+0x29e>
			if ((RadioEvents != NULL) && (RadioEvents->PreAmpDetect != NULL)) {
 8018db0:	4b42      	ldr	r3, [pc, #264]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d008      	beq.n	8018dca <RadioBgIrqProcess+0x29e>
 8018db8:	4b40      	ldr	r3, [pc, #256]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	695b      	ldr	r3, [r3, #20]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d003      	beq.n	8018dca <RadioBgIrqProcess+0x29e>
				RadioEvents->PreAmpDetect();
 8018dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	695b      	ldr	r3, [r3, #20]
 8018dc8:	4798      	blx	r3

		if ((irqRegs & IRQ_HEADER_VALID) == IRQ_HEADER_VALID) {
			//__NOP( );
		}

		if ((irqRegs & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR) {
 8018dca:	88bb      	ldrh	r3, [r7, #4]
 8018dcc:	f003 0320 	and.w	r3, r3, #32
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d020      	beq.n	8018e16 <RadioBgIrqProcess+0x2ea>
			LOGE(TAG, "IRQ HEADER ERROR");
 8018dd4:	4b36      	ldr	r3, [pc, #216]	@ (8018eb0 <RadioBgIrqProcess+0x384>)
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	4a39      	ldr	r2, [pc, #228]	@ (8018ec0 <RadioBgIrqProcess+0x394>)
 8018dda:	2100      	movs	r1, #0
 8018ddc:	4618      	mov	r0, r3
 8018dde:	f001 fa7d 	bl	801a2dc <LOG_LEVEL_ERROR>

			TimerStop(&RxTimeoutTimer);
 8018de2:	4835      	ldr	r0, [pc, #212]	@ (8018eb8 <RadioBgIrqProcess+0x38c>)
 8018de4:	f001 fd50 	bl	801a888 <UTIL_TIMER_Stop>
			if (RxContinuous == false) {
 8018de8:	4b36      	ldr	r3, [pc, #216]	@ (8018ec4 <RadioBgIrqProcess+0x398>)
 8018dea:	781b      	ldrb	r3, [r3, #0]
 8018dec:	f083 0301 	eor.w	r3, r3, #1
 8018df0:	b2db      	uxtb	r3, r3
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d002      	beq.n	8018dfc <RadioBgIrqProcess+0x2d0>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 8018df6:	2001      	movs	r0, #1
 8018df8:	f000 f8f0 	bl	8018fdc <SX126xSetOperatingMode>
			}
			if ((RadioEvents != NULL) && (RadioEvents->RxError != NULL)) {
 8018dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d008      	beq.n	8018e16 <RadioBgIrqProcess+0x2ea>
 8018e04:	4b2d      	ldr	r3, [pc, #180]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	691b      	ldr	r3, [r3, #16]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d003      	beq.n	8018e16 <RadioBgIrqProcess+0x2ea>
				RadioEvents->RxError();
 8018e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	691b      	ldr	r3, [r3, #16]
 8018e14:	4798      	blx	r3
			}
		}
	}
	if (TimerRxTimeout) {
 8018e16:	4b2c      	ldr	r3, [pc, #176]	@ (8018ec8 <RadioBgIrqProcess+0x39c>)
 8018e18:	781b      	ldrb	r3, [r3, #0]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d01f      	beq.n	8018e5e <RadioBgIrqProcess+0x332>
		LOGE(TAG, "IRQ TIMER RX TIMEOUT");
 8018e1e:	4b24      	ldr	r3, [pc, #144]	@ (8018eb0 <RadioBgIrqProcess+0x384>)
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	4a2a      	ldr	r2, [pc, #168]	@ (8018ecc <RadioBgIrqProcess+0x3a0>)
 8018e24:	2100      	movs	r1, #0
 8018e26:	4618      	mov	r0, r3
 8018e28:	f001 fa58 	bl	801a2dc <LOG_LEVEL_ERROR>
		TimerRxTimeout = false;
 8018e2c:	4b26      	ldr	r3, [pc, #152]	@ (8018ec8 <RadioBgIrqProcess+0x39c>)
 8018e2e:	2200      	movs	r2, #0
 8018e30:	701a      	strb	r2, [r3, #0]
		if (!rx_timeout_handled) {
 8018e32:	79fb      	ldrb	r3, [r7, #7]
 8018e34:	f083 0301 	eor.w	r3, r3, #1
 8018e38:	b2db      	uxtb	r3, r3
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d00f      	beq.n	8018e5e <RadioBgIrqProcess+0x332>
			TimerStop(&RxTimeoutTimer);
 8018e3e:	481e      	ldr	r0, [pc, #120]	@ (8018eb8 <RadioBgIrqProcess+0x38c>)
 8018e40:	f001 fd22 	bl	801a888 <UTIL_TIMER_Stop>
			if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 8018e44:	4b1d      	ldr	r3, [pc, #116]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d008      	beq.n	8018e5e <RadioBgIrqProcess+0x332>
 8018e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	68db      	ldr	r3, [r3, #12]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d003      	beq.n	8018e5e <RadioBgIrqProcess+0x332>
				RadioEvents->RxTimeout();
 8018e56:	4b19      	ldr	r3, [pc, #100]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	4798      	blx	r3
			}
		}
	}
	if (TimerTxTimeout) {
 8018e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8018ed0 <RadioBgIrqProcess+0x3a4>)
 8018e60:	781b      	ldrb	r3, [r3, #0]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d01f      	beq.n	8018ea6 <RadioBgIrqProcess+0x37a>
		LOGE(TAG, "IRQ TIMER TX TIMEOUT");
 8018e66:	4b12      	ldr	r3, [pc, #72]	@ (8018eb0 <RadioBgIrqProcess+0x384>)
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8018ed4 <RadioBgIrqProcess+0x3a8>)
 8018e6c:	2100      	movs	r1, #0
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f001 fa34 	bl	801a2dc <LOG_LEVEL_ERROR>
		TimerTxTimeout = false;
 8018e74:	4b16      	ldr	r3, [pc, #88]	@ (8018ed0 <RadioBgIrqProcess+0x3a4>)
 8018e76:	2200      	movs	r2, #0
 8018e78:	701a      	strb	r2, [r3, #0]
		if (!tx_timeout_handled) {
 8018e7a:	79bb      	ldrb	r3, [r7, #6]
 8018e7c:	f083 0301 	eor.w	r3, r3, #1
 8018e80:	b2db      	uxtb	r3, r3
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d00f      	beq.n	8018ea6 <RadioBgIrqProcess+0x37a>
			TimerStop(&TxTimeoutTimer);
 8018e86:	4814      	ldr	r0, [pc, #80]	@ (8018ed8 <RadioBgIrqProcess+0x3ac>)
 8018e88:	f001 fcfe 	bl	801a888 <UTIL_TIMER_Stop>
			if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 8018e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d008      	beq.n	8018ea6 <RadioBgIrqProcess+0x37a>
 8018e94:	4b09      	ldr	r3, [pc, #36]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	685b      	ldr	r3, [r3, #4]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d003      	beq.n	8018ea6 <RadioBgIrqProcess+0x37a>
				RadioEvents->TxTimeout();
 8018e9e:	4b07      	ldr	r3, [pc, #28]	@ (8018ebc <RadioBgIrqProcess+0x390>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	4798      	blx	r3
			}
		}
	}
}
 8018ea6:	bf00      	nop
 8018ea8:	370c      	adds	r7, #12
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd90      	pop	{r4, r7, pc}
 8018eae:	bf00      	nop
 8018eb0:	20000120 	.word	0x20000120
 8018eb4:	08022678 	.word	0x08022678
 8018eb8:	2000c950 	.word	0x2000c950
 8018ebc:	2000ca9c 	.word	0x2000ca9c
 8018ec0:	08022688 	.word	0x08022688
 8018ec4:	2000c978 	.word	0x2000c978
 8018ec8:	2000ca90 	.word	0x2000ca90
 8018ecc:	0802269c 	.word	0x0802269c
 8018ed0:	2000ca91 	.word	0x2000ca91
 8018ed4:	080226b4 	.word	0x080226b4
 8018ed8:	2000c930 	.word	0x2000c930

08018edc <RadioIrqProcess>:

void RadioIrqProcess(void) {
 8018edc:	b580      	push	{r7, lr}
 8018ede:	af00      	add	r7, sp, #0
	RadioBgIrqProcess();
 8018ee0:	f7ff fe24 	bl	8018b2c <RadioBgIrqProcess>
}
 8018ee4:	bf00      	nop
 8018ee6:	bd80      	pop	{r7, pc}

08018ee8 <RadioIrqProcessAfterDeepSleep>:

void RadioIrqProcessAfterDeepSleep(void) {
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	af00      	add	r7, sp, #0
	BoardDisableIrq();
 8018eec:	f000 f840 	bl	8018f70 <BoardDisableIrq>
	IrqFired = true;
 8018ef0:	4b04      	ldr	r3, [pc, #16]	@ (8018f04 <RadioIrqProcessAfterDeepSleep+0x1c>)
 8018ef2:	2201      	movs	r2, #1
 8018ef4:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 8018ef6:	f000 f844 	bl	8018f82 <BoardEnableIrq>
	RadioBgIrqProcess();
 8018efa:	f7ff fe17 	bl	8018b2c <RadioBgIrqProcess>
}
 8018efe:	bf00      	nop
 8018f00:	bd80      	pop	{r7, pc}
 8018f02:	bf00      	nop
 8018f04:	2000ca8f 	.word	0x2000ca8f

08018f08 <Radio_task>:


void Radio_task(void *pvParameters){
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b082      	sub	sp, #8
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
	while (1){
		if (xSemaphoreTake(_lora_sem, 10) == pdTRUE){
 8018f10:	4b05      	ldr	r3, [pc, #20]	@ (8018f28 <Radio_task+0x20>)
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	210a      	movs	r1, #10
 8018f16:	4618      	mov	r0, r3
 8018f18:	f7ef ff98 	bl	8008e4c <xQueueSemaphoreTake>
 8018f1c:	4603      	mov	r3, r0
 8018f1e:	2b01      	cmp	r3, #1
 8018f20:	d1f6      	bne.n	8018f10 <Radio_task+0x8>
			RadioBgIrqProcess();
 8018f22:	f7ff fe03 	bl	8018b2c <RadioBgIrqProcess>
		if (xSemaphoreTake(_lora_sem, 10) == pdTRUE){
 8018f26:	e7f3      	b.n	8018f10 <Radio_task+0x8>
 8018f28:	2000ca94 	.word	0x2000ca94

08018f2c <Radio_HardWare_Init>:
		}
	}
}

void Radio_HardWare_Init(void){
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b082      	sub	sp, #8
 8018f30:	af02      	add	r7, sp, #8
	SX126xIoInit();
 8018f32:	f000 fe05 	bl	8019b40 <SX126xIoInit>

	_lora_sem = xSemaphoreCreateBinary();
 8018f36:	2203      	movs	r2, #3
 8018f38:	2100      	movs	r1, #0
 8018f3a:	2001      	movs	r0, #1
 8018f3c:	f7ef fc15 	bl	800876a <xQueueGenericCreate>
 8018f40:	4603      	mov	r3, r0
 8018f42:	4a08      	ldr	r2, [pc, #32]	@ (8018f64 <Radio_HardWare_Init+0x38>)
 8018f44:	6013      	str	r3, [r2, #0]
	xTaskCreate(Radio_task, "Radio_task", 4096, NULL, TASK_PRIO_NORMAL, NULL);
 8018f46:	2300      	movs	r3, #0
 8018f48:	9301      	str	r3, [sp, #4]
 8018f4a:	2314      	movs	r3, #20
 8018f4c:	9300      	str	r3, [sp, #0]
 8018f4e:	2300      	movs	r3, #0
 8018f50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8018f54:	4904      	ldr	r1, [pc, #16]	@ (8018f68 <Radio_HardWare_Init+0x3c>)
 8018f56:	4805      	ldr	r0, [pc, #20]	@ (8018f6c <Radio_HardWare_Init+0x40>)
 8018f58:	f7f0 fa6e 	bl	8009438 <xTaskCreate>
}
 8018f5c:	bf00      	nop
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bd80      	pop	{r7, pc}
 8018f62:	bf00      	nop
 8018f64:	2000ca94 	.word	0x2000ca94
 8018f68:	080226cc 	.word	0x080226cc
 8018f6c:	08018f09 	.word	0x08018f09

08018f70 <BoardDisableIrq>:
 * \brief Process the IRQ if handled by the driver
 */
void SX126xProcessIrqs(void);


void BoardDisableIrq(void) {
 8018f70:	b480      	push	{r7}
 8018f72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8018f74:	b672      	cpsid	i
}
 8018f76:	bf00      	nop
	__disable_irq();

}
 8018f78:	bf00      	nop
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f80:	4770      	bx	lr

08018f82 <BoardEnableIrq>:

void BoardEnableIrq(void) {
 8018f82:	b480      	push	{r7}
 8018f84:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8018f86:	b662      	cpsie	i
}
 8018f88:	bf00      	nop
	__enable_irq();
}
 8018f8a:	bf00      	nop
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr

08018f94 <SX126xInit>:


void SX126xInit(void) {
 8018f94:	b580      	push	{r7, lr}
 8018f96:	af00      	add	r7, sp, #0
	SX126xReset();
 8018f98:	f000 fdde 	bl	8019b58 <SX126xReset>

	SX126xWakeup();
 8018f9c:	f000 fe22 	bl	8019be4 <SX126xWakeup>
	SX126xSetStandby(STDBY_RC);
 8018fa0:	2000      	movs	r0, #0
 8018fa2:	f000 f933 	bl	801920c <SX126xSetStandby>

	SX126xSetDio2AsRfSwitchCtrl(true);
 8018fa6:	2001      	movs	r0, #1
 8018fa8:	f000 facf 	bl	801954a <SX126xSetDio2AsRfSwitchCtrl>

	SX126xSetOperatingMode(MODE_STDBY_RC);
 8018fac:	2001      	movs	r0, #1
 8018fae:	f000 f815 	bl	8018fdc <SX126xSetOperatingMode>
}
 8018fb2:	bf00      	nop
 8018fb4:	bd80      	pop	{r7, pc}

08018fb6 <SX126xReInit>:

void SX126xReInit(void) {
 8018fb6:	b480      	push	{r7}
 8018fb8:	af00      	add	r7, sp, #0

}
 8018fba:	bf00      	nop
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc2:	4770      	bx	lr

08018fc4 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode(void) {
 8018fc4:	b480      	push	{r7}
 8018fc6:	af00      	add	r7, sp, #0
	return OperatingMode;
 8018fc8:	4b03      	ldr	r3, [pc, #12]	@ (8018fd8 <SX126xGetOperatingMode+0x14>)
 8018fca:	781b      	ldrb	r3, [r3, #0]
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd4:	4770      	bx	lr
 8018fd6:	bf00      	nop
 8018fd8:	2000caf4 	.word	0x2000caf4

08018fdc <SX126xSetOperatingMode>:

void SX126xSetOperatingMode(RadioOperatingModes_t mode) {
 8018fdc:	b480      	push	{r7}
 8018fde:	b083      	sub	sp, #12
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	71fb      	strb	r3, [r7, #7]
	OperatingMode = mode;
 8018fe6:	4a04      	ldr	r2, [pc, #16]	@ (8018ff8 <SX126xSetOperatingMode+0x1c>)
 8018fe8:	79fb      	ldrb	r3, [r7, #7]
 8018fea:	7013      	strb	r3, [r2, #0]
}
 8018fec:	bf00      	nop
 8018fee:	370c      	adds	r7, #12
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ff6:	4770      	bx	lr
 8018ff8:	2000caf4 	.word	0x2000caf4

08018ffc <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady(void) {
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	af00      	add	r7, sp, #0
	if ((SX126xGetOperatingMode() == MODE_SLEEP)
 8019000:	f7ff ffe0 	bl	8018fc4 <SX126xGetOperatingMode>
 8019004:	4603      	mov	r3, r0
 8019006:	2b00      	cmp	r3, #0
 8019008:	d004      	beq.n	8019014 <SX126xCheckDeviceReady+0x18>
			|| (SX126xGetOperatingMode() == MODE_RX_DC)) {
 801900a:	f7ff ffdb 	bl	8018fc4 <SX126xGetOperatingMode>
 801900e:	4603      	mov	r3, r0
 8019010:	2b06      	cmp	r3, #6
 8019012:	d103      	bne.n	801901c <SX126xCheckDeviceReady+0x20>
		SX126xWakeup();
 8019014:	f000 fde6 	bl	8019be4 <SX126xWakeup>
		// Switch is turned off when device is in sleep mode and turned on is all other modes
		SX126xAntSwOn();
 8019018:	f000 ff90 	bl	8019f3c <SX126xAntSwOn>
	}
	SX126xWaitOnBusy();
 801901c:	f000 fdba 	bl	8019b94 <SX126xWaitOnBusy>
}
 8019020:	bf00      	nop
 8019022:	bd80      	pop	{r7, pc}

08019024 <SX126xSetPayload>:

void SX126xSetPayload(uint8_t *payload, uint8_t size) {
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	460b      	mov	r3, r1
 801902e:	70fb      	strb	r3, [r7, #3]
	SX126xWriteBuffer(0x00, payload, size);
 8019030:	78fb      	ldrb	r3, [r7, #3]
 8019032:	461a      	mov	r2, r3
 8019034:	6879      	ldr	r1, [r7, #4]
 8019036:	2000      	movs	r0, #0
 8019038:	f000 fef6 	bl	8019e28 <SX126xWriteBuffer>
}
 801903c:	bf00      	nop
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}

08019044 <SX126xGetPayload>:

uint8_t SX126xGetPayload(uint8_t *buffer, uint8_t *size, uint8_t maxSize) {
 8019044:	b580      	push	{r7, lr}
 8019046:	b086      	sub	sp, #24
 8019048:	af00      	add	r7, sp, #0
 801904a:	60f8      	str	r0, [r7, #12]
 801904c:	60b9      	str	r1, [r7, #8]
 801904e:	4613      	mov	r3, r2
 8019050:	71fb      	strb	r3, [r7, #7]
	uint8_t offset = 0;
 8019052:	2300      	movs	r3, #0
 8019054:	75fb      	strb	r3, [r7, #23]

	SX126xGetRxBufferStatus(size, &offset);
 8019056:	f107 0317 	add.w	r3, r7, #23
 801905a:	4619      	mov	r1, r3
 801905c:	68b8      	ldr	r0, [r7, #8]
 801905e:	f000 fcd7 	bl	8019a10 <SX126xGetRxBufferStatus>
	if (*size > maxSize) {
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	79fa      	ldrb	r2, [r7, #7]
 8019068:	429a      	cmp	r2, r3
 801906a:	d201      	bcs.n	8019070 <SX126xGetPayload+0x2c>
		return 1;
 801906c:	2301      	movs	r3, #1
 801906e:	e007      	b.n	8019080 <SX126xGetPayload+0x3c>
	}
	SX126xReadBuffer(offset, buffer, *size);
 8019070:	7df8      	ldrb	r0, [r7, #23]
 8019072:	68bb      	ldr	r3, [r7, #8]
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	461a      	mov	r2, r3
 8019078:	68f9      	ldr	r1, [r7, #12]
 801907a:	f000 ff07 	bl	8019e8c <SX126xReadBuffer>
	return 0;
 801907e:	2300      	movs	r3, #0
}
 8019080:	4618      	mov	r0, r3
 8019082:	3718      	adds	r7, #24
 8019084:	46bd      	mov	sp, r7
 8019086:	bd80      	pop	{r7, pc}

08019088 <SX126xSendPayload>:

void SX126xSendPayload(uint8_t *payload, uint8_t size, uint32_t timeout) {
 8019088:	b580      	push	{r7, lr}
 801908a:	b084      	sub	sp, #16
 801908c:	af00      	add	r7, sp, #0
 801908e:	60f8      	str	r0, [r7, #12]
 8019090:	460b      	mov	r3, r1
 8019092:	607a      	str	r2, [r7, #4]
 8019094:	72fb      	strb	r3, [r7, #11]
	SX126xSetPayload(payload, size);
 8019096:	7afb      	ldrb	r3, [r7, #11]
 8019098:	4619      	mov	r1, r3
 801909a:	68f8      	ldr	r0, [r7, #12]
 801909c:	f7ff ffc2 	bl	8019024 <SX126xSetPayload>
	SX126xSetTx(timeout);
 80190a0:	6878      	ldr	r0, [r7, #4]
 80190a2:	f000 f8ce 	bl	8019242 <SX126xSetTx>
}
 80190a6:	bf00      	nop
 80190a8:	3710      	adds	r7, #16
 80190aa:	46bd      	mov	sp, r7
 80190ac:	bd80      	pop	{r7, pc}

080190ae <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord(uint8_t *syncWord) {
 80190ae:	b580      	push	{r7, lr}
 80190b0:	b082      	sub	sp, #8
 80190b2:	af00      	add	r7, sp, #0
 80190b4:	6078      	str	r0, [r7, #4]
	SX126xWriteRegisters(REG_LR_SYNCWORDBASEADDRESS, syncWord, 8);
 80190b6:	2208      	movs	r2, #8
 80190b8:	6879      	ldr	r1, [r7, #4]
 80190ba:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80190be:	f000 fe1d 	bl	8019cfc <SX126xWriteRegisters>
	return 0;
 80190c2:	2300      	movs	r3, #0
}
 80190c4:	4618      	mov	r0, r3
 80190c6:	3708      	adds	r7, #8
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}

080190cc <SX126xSetCrcSeed>:

void SX126xSetCrcSeed(uint16_t seed) {
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b084      	sub	sp, #16
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	4603      	mov	r3, r0
 80190d4:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) ((seed >> 8) & 0xFF);
 80190d6:	88fb      	ldrh	r3, [r7, #6]
 80190d8:	0a1b      	lsrs	r3, r3, #8
 80190da:	b29b      	uxth	r3, r3
 80190dc:	b2db      	uxtb	r3, r3
 80190de:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (seed & 0xFF);
 80190e0:	88fb      	ldrh	r3, [r7, #6]
 80190e2:	b2db      	uxtb	r3, r3
 80190e4:	737b      	strb	r3, [r7, #13]

	switch (SX126xGetPacketType()) {
 80190e6:	f000 fa99 	bl	801961c <SX126xGetPacketType>
 80190ea:	4603      	mov	r3, r0
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d108      	bne.n	8019102 <SX126xSetCrcSeed+0x36>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCSEEDBASEADDR, buf, 2);
 80190f0:	f107 030c 	add.w	r3, r7, #12
 80190f4:	2202      	movs	r2, #2
 80190f6:	4619      	mov	r1, r3
 80190f8:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80190fc:	f000 fdfe 	bl	8019cfc <SX126xWriteRegisters>
		break;
 8019100:	e000      	b.n	8019104 <SX126xSetCrcSeed+0x38>

		default:
		break;
 8019102:	bf00      	nop
	}
}
 8019104:	bf00      	nop
 8019106:	3710      	adds	r7, #16
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial(uint16_t polynomial) {
 801910c:	b580      	push	{r7, lr}
 801910e:	b084      	sub	sp, #16
 8019110:	af00      	add	r7, sp, #0
 8019112:	4603      	mov	r3, r0
 8019114:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) ((polynomial >> 8) & 0xFF);
 8019116:	88fb      	ldrh	r3, [r7, #6]
 8019118:	0a1b      	lsrs	r3, r3, #8
 801911a:	b29b      	uxth	r3, r3
 801911c:	b2db      	uxtb	r3, r3
 801911e:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (polynomial & 0xFF);
 8019120:	88fb      	ldrh	r3, [r7, #6]
 8019122:	b2db      	uxtb	r3, r3
 8019124:	737b      	strb	r3, [r7, #13]

	switch (SX126xGetPacketType()) {
 8019126:	f000 fa79 	bl	801961c <SX126xGetPacketType>
 801912a:	4603      	mov	r3, r0
 801912c:	2b00      	cmp	r3, #0
 801912e:	d108      	bne.n	8019142 <SX126xSetCrcPolynomial+0x36>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCPOLYBASEADDR, buf, 2);
 8019130:	f107 030c 	add.w	r3, r7, #12
 8019134:	2202      	movs	r2, #2
 8019136:	4619      	mov	r1, r3
 8019138:	f240 60be 	movw	r0, #1726	@ 0x6be
 801913c:	f000 fdde 	bl	8019cfc <SX126xWriteRegisters>
		break;
 8019140:	e000      	b.n	8019144 <SX126xSetCrcPolynomial+0x38>

		default:
		break;
 8019142:	bf00      	nop
	}
}
 8019144:	bf00      	nop
 8019146:	3710      	adds	r7, #16
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed(uint16_t seed) {
 801914c:	b580      	push	{r7, lr}
 801914e:	b084      	sub	sp, #16
 8019150:	af00      	add	r7, sp, #0
 8019152:	4603      	mov	r3, r0
 8019154:	80fb      	strh	r3, [r7, #6]
	uint8_t regValue = 0;
 8019156:	2300      	movs	r3, #0
 8019158:	73fb      	strb	r3, [r7, #15]

	switch (SX126xGetPacketType()) {
 801915a:	f000 fa5f 	bl	801961c <SX126xGetPacketType>
 801915e:	4603      	mov	r3, r0
 8019160:	2b00      	cmp	r3, #0
 8019162:	d121      	bne.n	80191a8 <SX126xSetWhiteningSeed+0x5c>
		case PACKET_TYPE_GFSK:
			regValue = SX126xReadRegister(REG_LR_WHITSEEDBASEADDR_MSB) & 0xFE;
 8019164:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019168:	f000 fe4c 	bl	8019e04 <SX126xReadRegister>
 801916c:	4603      	mov	r3, r0
 801916e:	f023 0301 	bic.w	r3, r3, #1
 8019172:	73fb      	strb	r3, [r7, #15]
			regValue = ((seed >> 8) & 0x01) | regValue;
 8019174:	88fb      	ldrh	r3, [r7, #6]
 8019176:	0a1b      	lsrs	r3, r3, #8
 8019178:	b29b      	uxth	r3, r3
 801917a:	b25b      	sxtb	r3, r3
 801917c:	f003 0301 	and.w	r3, r3, #1
 8019180:	b25a      	sxtb	r2, r3
 8019182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019186:	4313      	orrs	r3, r2
 8019188:	b25b      	sxtb	r3, r3
 801918a:	73fb      	strb	r3, [r7, #15]
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_MSB, regValue); // only 1 bit.
 801918c:	7bfb      	ldrb	r3, [r7, #15]
 801918e:	4619      	mov	r1, r3
 8019190:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019194:	f000 fdea 	bl	8019d6c <SX126xWriteRegister>
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t) seed);
 8019198:	88fb      	ldrh	r3, [r7, #6]
 801919a:	b2db      	uxtb	r3, r3
 801919c:	4619      	mov	r1, r3
 801919e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80191a2:	f000 fde3 	bl	8019d6c <SX126xWriteRegister>
		break;
 80191a6:	e000      	b.n	80191aa <SX126xSetWhiteningSeed+0x5e>

		default:
		break;
 80191a8:	bf00      	nop
	}
}
 80191aa:	bf00      	nop
 80191ac:	3710      	adds	r7, #16
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd80      	pop	{r7, pc}

080191b2 <SX126xGetRandom>:

uint32_t SX126xGetRandom(void) {
 80191b2:	b580      	push	{r7, lr}
 80191b4:	b082      	sub	sp, #8
 80191b6:	af00      	add	r7, sp, #0
	uint8_t buf[] = { 0, 0, 0, 0 };
 80191b8:	2300      	movs	r3, #0
 80191ba:	607b      	str	r3, [r7, #4]

	SX126xReadRegisters(RANDOM_NUMBER_GENERATORBASEADDR, buf, 4);
 80191bc:	1d3b      	adds	r3, r7, #4
 80191be:	2204      	movs	r2, #4
 80191c0:	4619      	mov	r1, r3
 80191c2:	f640 0019 	movw	r0, #2073	@ 0x819
 80191c6:	f000 fde3 	bl	8019d90 <SX126xReadRegisters>

	return (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 80191ca:	793b      	ldrb	r3, [r7, #4]
 80191cc:	061a      	lsls	r2, r3, #24
 80191ce:	797b      	ldrb	r3, [r7, #5]
 80191d0:	041b      	lsls	r3, r3, #16
 80191d2:	431a      	orrs	r2, r3
 80191d4:	79bb      	ldrb	r3, [r7, #6]
 80191d6:	021b      	lsls	r3, r3, #8
 80191d8:	4313      	orrs	r3, r2
 80191da:	79fa      	ldrb	r2, [r7, #7]
 80191dc:	4313      	orrs	r3, r2
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3708      	adds	r7, #8
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}

080191e6 <SX126xSetSleep>:

void SX126xSetSleep(SleepParams_t sleepConfig) {
 80191e6:	b580      	push	{r7, lr}
 80191e8:	b082      	sub	sp, #8
 80191ea:	af00      	add	r7, sp, #0
 80191ec:	7138      	strb	r0, [r7, #4]
	SX126xAntSwOff();
 80191ee:	f000 feac 	bl	8019f4a <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
 80191f2:	1d3b      	adds	r3, r7, #4
 80191f4:	2201      	movs	r2, #1
 80191f6:	4619      	mov	r1, r3
 80191f8:	2084      	movs	r0, #132	@ 0x84
 80191fa:	f000 fd1d 	bl	8019c38 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_SLEEP);
 80191fe:	2000      	movs	r0, #0
 8019200:	f7ff feec 	bl	8018fdc <SX126xSetOperatingMode>
}
 8019204:	bf00      	nop
 8019206:	3708      	adds	r7, #8
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}

0801920c <SX126xSetStandby>:

void SX126xSetStandby(RadioStandbyModes_t standbyConfig) {
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	4603      	mov	r3, r0
 8019214:	71fb      	strb	r3, [r7, #7]
	SX126xAntSwOff();
 8019216:	f000 fe98 	bl	8019f4a <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_STANDBY, (uint8_t*) &standbyConfig, 1);
 801921a:	1dfb      	adds	r3, r7, #7
 801921c:	2201      	movs	r2, #1
 801921e:	4619      	mov	r1, r3
 8019220:	2080      	movs	r0, #128	@ 0x80
 8019222:	f000 fd09 	bl	8019c38 <SX126xWriteCommand>
	if (standbyConfig == STDBY_RC) {
 8019226:	79fb      	ldrb	r3, [r7, #7]
 8019228:	2b00      	cmp	r3, #0
 801922a:	d103      	bne.n	8019234 <SX126xSetStandby+0x28>
		SX126xSetOperatingMode(MODE_STDBY_RC);
 801922c:	2001      	movs	r0, #1
 801922e:	f7ff fed5 	bl	8018fdc <SX126xSetOperatingMode>
	}
	else {
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
	}
}
 8019232:	e002      	b.n	801923a <SX126xSetStandby+0x2e>
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
 8019234:	2002      	movs	r0, #2
 8019236:	f7ff fed1 	bl	8018fdc <SX126xSetOperatingMode>
}
 801923a:	bf00      	nop
 801923c:	3708      	adds	r7, #8
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}

08019242 <SX126xSetTx>:
void SX126xSetFs(void) {
	SX126xWriteCommand(RADIO_SET_FS, 0, 0);
	SX126xSetOperatingMode(MODE_FS);
}

void SX126xSetTx(uint32_t timeout) {
 8019242:	b580      	push	{r7, lr}
 8019244:	b084      	sub	sp, #16
 8019246:	af00      	add	r7, sp, #0
 8019248:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_TX);
 801924a:	2004      	movs	r0, #4
 801924c:	f7ff fec6 	bl	8018fdc <SX126xSetOperatingMode>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	0c1b      	lsrs	r3, r3, #16
 8019254:	b2db      	uxtb	r3, r3
 8019256:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	0a1b      	lsrs	r3, r3, #8
 801925c:	b2db      	uxtb	r3, r3
 801925e:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	b2db      	uxtb	r3, r3
 8019264:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_TX, buf, 3);
 8019266:	f107 030c 	add.w	r3, r7, #12
 801926a:	2203      	movs	r2, #3
 801926c:	4619      	mov	r1, r3
 801926e:	2083      	movs	r0, #131	@ 0x83
 8019270:	f000 fce2 	bl	8019c38 <SX126xWriteCommand>
}
 8019274:	bf00      	nop
 8019276:	3710      	adds	r7, #16
 8019278:	46bd      	mov	sp, r7
 801927a:	bd80      	pop	{r7, pc}

0801927c <SX126xSetRx>:

void SX126xSetRx(uint32_t timeout) {
 801927c:	b580      	push	{r7, lr}
 801927e:	b084      	sub	sp, #16
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 8019284:	2005      	movs	r0, #5
 8019286:	f7ff fea9 	bl	8018fdc <SX126xSetOperatingMode>

	SX126xWriteRegister( REG_RX_GAIN, 0x94); // default gain
 801928a:	2194      	movs	r1, #148	@ 0x94
 801928c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019290:	f000 fd6c 	bl	8019d6c <SX126xWriteRegister>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	0c1b      	lsrs	r3, r3, #16
 8019298:	b2db      	uxtb	r3, r3
 801929a:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	0a1b      	lsrs	r3, r3, #8
 80192a0:	b2db      	uxtb	r3, r3
 80192a2:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	b2db      	uxtb	r3, r3
 80192a8:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 80192aa:	f107 030c 	add.w	r3, r7, #12
 80192ae:	2203      	movs	r2, #3
 80192b0:	4619      	mov	r1, r3
 80192b2:	2082      	movs	r0, #130	@ 0x82
 80192b4:	f000 fcc0 	bl	8019c38 <SX126xWriteCommand>
}
 80192b8:	bf00      	nop
 80192ba:	3710      	adds	r7, #16
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}

080192c0 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted(uint32_t timeout) {
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b084      	sub	sp, #16
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 80192c8:	2005      	movs	r0, #5
 80192ca:	f7ff fe87 	bl	8018fdc <SX126xSetOperatingMode>

	SX126xWriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 80192ce:	2196      	movs	r1, #150	@ 0x96
 80192d0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80192d4:	f000 fd4a 	bl	8019d6c <SX126xWriteRegister>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	0c1b      	lsrs	r3, r3, #16
 80192dc:	b2db      	uxtb	r3, r3
 80192de:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	0a1b      	lsrs	r3, r3, #8
 80192e4:	b2db      	uxtb	r3, r3
 80192e6:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	b2db      	uxtb	r3, r3
 80192ec:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 80192ee:	f107 030c 	add.w	r3, r7, #12
 80192f2:	2203      	movs	r2, #3
 80192f4:	4619      	mov	r1, r3
 80192f6:	2082      	movs	r0, #130	@ 0x82
 80192f8:	f000 fc9e 	bl	8019c38 <SX126xWriteCommand>
}
 80192fc:	bf00      	nop
 80192fe:	3710      	adds	r7, #16
 8019300:	46bd      	mov	sp, r7
 8019302:	bd80      	pop	{r7, pc}

08019304 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime) {
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
 801930c:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	buf[0] = (uint8_t) ((rxTime >> 16) & 0xFF);
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	0c1b      	lsrs	r3, r3, #16
 8019312:	b2db      	uxtb	r3, r3
 8019314:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) ((rxTime >> 8) & 0xFF);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	0a1b      	lsrs	r3, r3, #8
 801931a:	b2db      	uxtb	r3, r3
 801931c:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) (rxTime & 0xFF);
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	b2db      	uxtb	r3, r3
 8019322:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) ((sleepTime >> 16) & 0xFF);
 8019324:	683b      	ldr	r3, [r7, #0]
 8019326:	0c1b      	lsrs	r3, r3, #16
 8019328:	b2db      	uxtb	r3, r3
 801932a:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((sleepTime >> 8) & 0xFF);
 801932c:	683b      	ldr	r3, [r7, #0]
 801932e:	0a1b      	lsrs	r3, r3, #8
 8019330:	b2db      	uxtb	r3, r3
 8019332:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) (sleepTime & 0xFF);
 8019334:	683b      	ldr	r3, [r7, #0]
 8019336:	b2db      	uxtb	r3, r3
 8019338:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_RXDUTYCYCLE, buf, 6);
 801933a:	f107 0308 	add.w	r3, r7, #8
 801933e:	2206      	movs	r2, #6
 8019340:	4619      	mov	r1, r3
 8019342:	2094      	movs	r0, #148	@ 0x94
 8019344:	f000 fc78 	bl	8019c38 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_RX_DC);
 8019348:	2006      	movs	r0, #6
 801934a:	f7ff fe47 	bl	8018fdc <SX126xSetOperatingMode>
}
 801934e:	bf00      	nop
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}

08019356 <SX126xSetCad>:

void SX126xSetCad(void) {
 8019356:	b580      	push	{r7, lr}
 8019358:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_CAD, 0, 0);
 801935a:	2200      	movs	r2, #0
 801935c:	2100      	movs	r1, #0
 801935e:	20c5      	movs	r0, #197	@ 0xc5
 8019360:	f000 fc6a 	bl	8019c38 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_CAD);
 8019364:	2007      	movs	r0, #7
 8019366:	f7ff fe39 	bl	8018fdc <SX126xSetOperatingMode>
}
 801936a:	bf00      	nop
 801936c:	bd80      	pop	{r7, pc}

0801936e <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave(void) {
 801936e:	b580      	push	{r7, lr}
 8019370:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSWAVE, 0, 0);
 8019372:	2200      	movs	r2, #0
 8019374:	2100      	movs	r1, #0
 8019376:	20d1      	movs	r0, #209	@ 0xd1
 8019378:	f000 fc5e 	bl	8019c38 <SX126xWriteCommand>
}
 801937c:	bf00      	nop
 801937e:	bd80      	pop	{r7, pc}

08019380 <SX126xSetStopRxTimerOnPreambleDetect>:

void SX126xSetTxInfinitePreamble(void) {
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0);
}

void SX126xSetStopRxTimerOnPreambleDetect(bool enable) {
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
 8019386:	4603      	mov	r3, r0
 8019388:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_STOPRXTIMERONPREAMBLE, (uint8_t*) &enable, 1);
 801938a:	1dfb      	adds	r3, r7, #7
 801938c:	2201      	movs	r2, #1
 801938e:	4619      	mov	r1, r3
 8019390:	209f      	movs	r0, #159	@ 0x9f
 8019392:	f000 fc51 	bl	8019c38 <SX126xWriteCommand>
}
 8019396:	bf00      	nop
 8019398:	3708      	adds	r7, #8
 801939a:	46bd      	mov	sp, r7
 801939c:	bd80      	pop	{r7, pc}

0801939e <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout(uint8_t SymbNum) {
 801939e:	b580      	push	{r7, lr}
 80193a0:	b082      	sub	sp, #8
 80193a2:	af00      	add	r7, sp, #0
 80193a4:	4603      	mov	r3, r0
 80193a6:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1);
 80193a8:	1dfb      	adds	r3, r7, #7
 80193aa:	2201      	movs	r2, #1
 80193ac:	4619      	mov	r1, r3
 80193ae:	20a0      	movs	r0, #160	@ 0xa0
 80193b0:	f000 fc42 	bl	8019c38 <SX126xWriteCommand>
}
 80193b4:	bf00      	nop
 80193b6:	3708      	adds	r7, #8
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}

080193bc <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode(RadioRegulatorMode_t mode) {
 80193bc:	b580      	push	{r7, lr}
 80193be:	b082      	sub	sp, #8
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	4603      	mov	r3, r0
 80193c4:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_REGULATORMODE, (uint8_t*) &mode, 1);
 80193c6:	1dfb      	adds	r3, r7, #7
 80193c8:	2201      	movs	r2, #1
 80193ca:	4619      	mov	r1, r3
 80193cc:	2096      	movs	r0, #150	@ 0x96
 80193ce:	f000 fc33 	bl	8019c38 <SX126xWriteCommand>
}
 80193d2:	bf00      	nop
 80193d4:	3708      	adds	r7, #8
 80193d6:	46bd      	mov	sp, r7
 80193d8:	bd80      	pop	{r7, pc}
	...

080193dc <SX126xCalibrateImage>:

void SX126xCalibrate(CalibrationParams_t calibParam) {
	SX126xWriteCommand(RADIO_CALIBRATE, (uint8_t*) &calibParam, 1);
}

void SX126xCalibrateImage(uint32_t freq) {
 80193dc:	b580      	push	{r7, lr}
 80193de:	b084      	sub	sp, #16
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
	uint8_t calFreq[2];

	if (freq > 900000000) {
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	4a1b      	ldr	r2, [pc, #108]	@ (8019454 <SX126xCalibrateImage+0x78>)
 80193e8:	4293      	cmp	r3, r2
 80193ea:	d904      	bls.n	80193f6 <SX126xCalibrateImage+0x1a>
		calFreq[0] = 0xE1;
 80193ec:	23e1      	movs	r3, #225	@ 0xe1
 80193ee:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xE9;
 80193f0:	23e9      	movs	r3, #233	@ 0xe9
 80193f2:	737b      	strb	r3, [r7, #13]
 80193f4:	e022      	b.n	801943c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 850000000) {
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	4a17      	ldr	r2, [pc, #92]	@ (8019458 <SX126xCalibrateImage+0x7c>)
 80193fa:	4293      	cmp	r3, r2
 80193fc:	d904      	bls.n	8019408 <SX126xCalibrateImage+0x2c>
		calFreq[0] = 0xD7;
 80193fe:	23d7      	movs	r3, #215	@ 0xd7
 8019400:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xDB;
 8019402:	23db      	movs	r3, #219	@ 0xdb
 8019404:	737b      	strb	r3, [r7, #13]
 8019406:	e019      	b.n	801943c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 770000000) {
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	4a14      	ldr	r2, [pc, #80]	@ (801945c <SX126xCalibrateImage+0x80>)
 801940c:	4293      	cmp	r3, r2
 801940e:	d904      	bls.n	801941a <SX126xCalibrateImage+0x3e>
		calFreq[0] = 0xC1;
 8019410:	23c1      	movs	r3, #193	@ 0xc1
 8019412:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xC5;
 8019414:	23c5      	movs	r3, #197	@ 0xc5
 8019416:	737b      	strb	r3, [r7, #13]
 8019418:	e010      	b.n	801943c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 460000000) {
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	4a10      	ldr	r2, [pc, #64]	@ (8019460 <SX126xCalibrateImage+0x84>)
 801941e:	4293      	cmp	r3, r2
 8019420:	d904      	bls.n	801942c <SX126xCalibrateImage+0x50>
		calFreq[0] = 0x75;
 8019422:	2375      	movs	r3, #117	@ 0x75
 8019424:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0x81;
 8019426:	2381      	movs	r3, #129	@ 0x81
 8019428:	737b      	strb	r3, [r7, #13]
 801942a:	e007      	b.n	801943c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 425000000) {
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	4a0d      	ldr	r2, [pc, #52]	@ (8019464 <SX126xCalibrateImage+0x88>)
 8019430:	4293      	cmp	r3, r2
 8019432:	d903      	bls.n	801943c <SX126xCalibrateImage+0x60>
		calFreq[0] = 0x6B;
 8019434:	236b      	movs	r3, #107	@ 0x6b
 8019436:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0x6F;
 8019438:	236f      	movs	r3, #111	@ 0x6f
 801943a:	737b      	strb	r3, [r7, #13]
	}
	SX126xWriteCommand(RADIO_CALIBRATEIMAGE, calFreq, 2);
 801943c:	f107 030c 	add.w	r3, r7, #12
 8019440:	2202      	movs	r2, #2
 8019442:	4619      	mov	r1, r3
 8019444:	2098      	movs	r0, #152	@ 0x98
 8019446:	f000 fbf7 	bl	8019c38 <SX126xWriteCommand>
}
 801944a:	bf00      	nop
 801944c:	3710      	adds	r7, #16
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}
 8019452:	bf00      	nop
 8019454:	35a4e900 	.word	0x35a4e900
 8019458:	32a9f880 	.word	0x32a9f880
 801945c:	2de54480 	.word	0x2de54480
 8019460:	1b6b0b00 	.word	0x1b6b0b00
 8019464:	1954fc40 	.word	0x1954fc40

08019468 <SX126xSetPaConfig>:

void SX126xSetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel,
		uint8_t paLut) {
 8019468:	b590      	push	{r4, r7, lr}
 801946a:	b085      	sub	sp, #20
 801946c:	af00      	add	r7, sp, #0
 801946e:	4604      	mov	r4, r0
 8019470:	4608      	mov	r0, r1
 8019472:	4611      	mov	r1, r2
 8019474:	461a      	mov	r2, r3
 8019476:	4623      	mov	r3, r4
 8019478:	71fb      	strb	r3, [r7, #7]
 801947a:	4603      	mov	r3, r0
 801947c:	71bb      	strb	r3, [r7, #6]
 801947e:	460b      	mov	r3, r1
 8019480:	717b      	strb	r3, [r7, #5]
 8019482:	4613      	mov	r3, r2
 8019484:	713b      	strb	r3, [r7, #4]
	uint8_t buf[4];

	buf[0] = paDutyCycle;
 8019486:	79fb      	ldrb	r3, [r7, #7]
 8019488:	733b      	strb	r3, [r7, #12]
	buf[1] = hpMax;
 801948a:	79bb      	ldrb	r3, [r7, #6]
 801948c:	737b      	strb	r3, [r7, #13]
	buf[2] = deviceSel;
 801948e:	797b      	ldrb	r3, [r7, #5]
 8019490:	73bb      	strb	r3, [r7, #14]
	buf[3] = paLut;
 8019492:	793b      	ldrb	r3, [r7, #4]
 8019494:	73fb      	strb	r3, [r7, #15]
	SX126xWriteCommand(RADIO_SET_PACONFIG, buf, 4);
 8019496:	f107 030c 	add.w	r3, r7, #12
 801949a:	2204      	movs	r2, #4
 801949c:	4619      	mov	r1, r3
 801949e:	2095      	movs	r0, #149	@ 0x95
 80194a0:	f000 fbca 	bl	8019c38 <SX126xWriteCommand>
}
 80194a4:	bf00      	nop
 80194a6:	3714      	adds	r7, #20
 80194a8:	46bd      	mov	sp, r7
 80194aa:	bd90      	pop	{r4, r7, pc}

080194ac <SX126xSetDioIrqParams>:
void SX126xSetRxTxFallbackMode(uint8_t fallbackMode) {
	SX126xWriteCommand(RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1);
}

void SX126xSetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask,
		uint16_t dio2Mask, uint16_t dio3Mask) {
 80194ac:	b590      	push	{r4, r7, lr}
 80194ae:	b085      	sub	sp, #20
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	4604      	mov	r4, r0
 80194b4:	4608      	mov	r0, r1
 80194b6:	4611      	mov	r1, r2
 80194b8:	461a      	mov	r2, r3
 80194ba:	4623      	mov	r3, r4
 80194bc:	80fb      	strh	r3, [r7, #6]
 80194be:	4603      	mov	r3, r0
 80194c0:	80bb      	strh	r3, [r7, #4]
 80194c2:	460b      	mov	r3, r1
 80194c4:	807b      	strh	r3, [r7, #2]
 80194c6:	4613      	mov	r3, r2
 80194c8:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 80194ca:	88fb      	ldrh	r3, [r7, #6]
 80194cc:	0a1b      	lsrs	r3, r3, #8
 80194ce:	b29b      	uxth	r3, r3
 80194d0:	b2db      	uxtb	r3, r3
 80194d2:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) (irqMask & 0x00FF);
 80194d4:	88fb      	ldrh	r3, [r7, #6]
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 80194da:	88bb      	ldrh	r3, [r7, #4]
 80194dc:	0a1b      	lsrs	r3, r3, #8
 80194de:	b29b      	uxth	r3, r3
 80194e0:	b2db      	uxtb	r3, r3
 80194e2:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) (dio1Mask & 0x00FF);
 80194e4:	88bb      	ldrh	r3, [r7, #4]
 80194e6:	b2db      	uxtb	r3, r3
 80194e8:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 80194ea:	887b      	ldrh	r3, [r7, #2]
 80194ec:	0a1b      	lsrs	r3, r3, #8
 80194ee:	b29b      	uxth	r3, r3
 80194f0:	b2db      	uxtb	r3, r3
 80194f2:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) (dio2Mask & 0x00FF);
 80194f4:	887b      	ldrh	r3, [r7, #2]
 80194f6:	b2db      	uxtb	r3, r3
 80194f8:	737b      	strb	r3, [r7, #13]
	buf[6] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 80194fa:	883b      	ldrh	r3, [r7, #0]
 80194fc:	0a1b      	lsrs	r3, r3, #8
 80194fe:	b29b      	uxth	r3, r3
 8019500:	b2db      	uxtb	r3, r3
 8019502:	73bb      	strb	r3, [r7, #14]
	buf[7] = (uint8_t) (dio3Mask & 0x00FF);
 8019504:	883b      	ldrh	r3, [r7, #0]
 8019506:	b2db      	uxtb	r3, r3
 8019508:	73fb      	strb	r3, [r7, #15]
	SX126xWriteCommand(RADIO_CFG_DIOIRQ, buf, 8);
 801950a:	f107 0308 	add.w	r3, r7, #8
 801950e:	2208      	movs	r2, #8
 8019510:	4619      	mov	r1, r3
 8019512:	2008      	movs	r0, #8
 8019514:	f000 fb90 	bl	8019c38 <SX126xWriteCommand>
}
 8019518:	bf00      	nop
 801951a:	3714      	adds	r7, #20
 801951c:	46bd      	mov	sp, r7
 801951e:	bd90      	pop	{r4, r7, pc}

08019520 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus(void) {
 8019520:	b580      	push	{r7, lr}
 8019522:	b082      	sub	sp, #8
 8019524:	af00      	add	r7, sp, #0
	uint8_t irqStatus[2];

	SX126xReadCommand(RADIO_GET_IRQSTATUS, irqStatus, 2);
 8019526:	1d3b      	adds	r3, r7, #4
 8019528:	2202      	movs	r2, #2
 801952a:	4619      	mov	r1, r3
 801952c:	2012      	movs	r0, #18
 801952e:	f000 fbb3 	bl	8019c98 <SX126xReadCommand>
	return (irqStatus[0] << 8) | irqStatus[1];
 8019532:	793b      	ldrb	r3, [r7, #4]
 8019534:	021b      	lsls	r3, r3, #8
 8019536:	b21a      	sxth	r2, r3
 8019538:	797b      	ldrb	r3, [r7, #5]
 801953a:	b21b      	sxth	r3, r3
 801953c:	4313      	orrs	r3, r2
 801953e:	b21b      	sxth	r3, r3
 8019540:	b29b      	uxth	r3, r3
}
 8019542:	4618      	mov	r0, r3
 8019544:	3708      	adds	r7, #8
 8019546:	46bd      	mov	sp, r7
 8019548:	bd80      	pop	{r7, pc}

0801954a <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl(uint8_t enable) {
 801954a:	b580      	push	{r7, lr}
 801954c:	b082      	sub	sp, #8
 801954e:	af00      	add	r7, sp, #0
 8019550:	4603      	mov	r3, r0
 8019552:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_RFSWITCHMODE, &enable, 1);
 8019554:	1dfb      	adds	r3, r7, #7
 8019556:	2201      	movs	r2, #1
 8019558:	4619      	mov	r1, r3
 801955a:	209d      	movs	r0, #157	@ 0x9d
 801955c:	f000 fb6c 	bl	8019c38 <SX126xWriteCommand>
}
 8019560:	bf00      	nop
 8019562:	3708      	adds	r7, #8
 8019564:	46bd      	mov	sp, r7
 8019566:	bd80      	pop	{r7, pc}

08019568 <SX126xSetRfFrequency>:
	buf[3] = (uint8_t) (timeout & 0xFF);

	SX126xWriteCommand(RADIO_SET_TCXOMODE, buf, 4);
}

void SX126xSetRfFrequency(uint32_t frequency) {
 8019568:	b580      	push	{r7, lr}
 801956a:	b084      	sub	sp, #16
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	uint32_t freq = 0;
 8019570:	2300      	movs	r3, #0
 8019572:	60fb      	str	r3, [r7, #12]

	if (ImageCalibrated == false) {
 8019574:	4b1e      	ldr	r3, [pc, #120]	@ (80195f0 <SX126xSetRfFrequency+0x88>)
 8019576:	781b      	ldrb	r3, [r3, #0]
 8019578:	f083 0301 	eor.w	r3, r3, #1
 801957c:	b2db      	uxtb	r3, r3
 801957e:	2b00      	cmp	r3, #0
 8019580:	d005      	beq.n	801958e <SX126xSetRfFrequency+0x26>
		SX126xCalibrateImage(frequency);
 8019582:	6878      	ldr	r0, [r7, #4]
 8019584:	f7ff ff2a 	bl	80193dc <SX126xCalibrateImage>
		ImageCalibrated = true;
 8019588:	4b19      	ldr	r3, [pc, #100]	@ (80195f0 <SX126xSetRfFrequency+0x88>)
 801958a:	2201      	movs	r2, #1
 801958c:	701a      	strb	r2, [r3, #0]
	}

	freq = (uint32_t) ((double) frequency / (double) FREQ_STEP );
 801958e:	6878      	ldr	r0, [r7, #4]
 8019590:	f7e6 ffc8 	bl	8000524 <__aeabi_ui2d>
 8019594:	a314      	add	r3, pc, #80	@ (adr r3, 80195e8 <SX126xSetRfFrequency+0x80>)
 8019596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959a:	f7e7 f967 	bl	800086c <__aeabi_ddiv>
 801959e:	4602      	mov	r2, r0
 80195a0:	460b      	mov	r3, r1
 80195a2:	4610      	mov	r0, r2
 80195a4:	4619      	mov	r1, r3
 80195a6:	f7e7 fb0f 	bl	8000bc8 <__aeabi_d2uiz>
 80195aa:	4603      	mov	r3, r0
 80195ac:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t) ((freq >> 24) & 0xFF);
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	0e1b      	lsrs	r3, r3, #24
 80195b2:	b2db      	uxtb	r3, r3
 80195b4:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) ((freq >> 16) & 0xFF);
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	0c1b      	lsrs	r3, r3, #16
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) ((freq >> 8) & 0xFF);
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	0a1b      	lsrs	r3, r3, #8
 80195c2:	b2db      	uxtb	r3, r3
 80195c4:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) (freq & 0xFF);
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	b2db      	uxtb	r3, r3
 80195ca:	72fb      	strb	r3, [r7, #11]
	SX126xWriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 80195cc:	f107 0308 	add.w	r3, r7, #8
 80195d0:	2204      	movs	r2, #4
 80195d2:	4619      	mov	r1, r3
 80195d4:	2086      	movs	r0, #134	@ 0x86
 80195d6:	f000 fb2f 	bl	8019c38 <SX126xWriteCommand>
}
 80195da:	bf00      	nop
 80195dc:	3710      	adds	r7, #16
 80195de:	46bd      	mov	sp, r7
 80195e0:	bd80      	pop	{r7, pc}
 80195e2:	bf00      	nop
 80195e4:	f3af 8000 	nop.w
 80195e8:	00000000 	.word	0x00000000
 80195ec:	3fee8480 	.word	0x3fee8480
 80195f0:	2000cafc 	.word	0x2000cafc

080195f4 <SX126xSetPacketType>:

void SX126xSetPacketType(RadioPacketTypes_t packetType) {
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b082      	sub	sp, #8
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	4603      	mov	r3, r0
 80195fc:	71fb      	strb	r3, [r7, #7]
	// Save packet type internally to avoid questioning the radio
	PacketType = packetType;
 80195fe:	79fa      	ldrb	r2, [r7, #7]
 8019600:	4b05      	ldr	r3, [pc, #20]	@ (8019618 <SX126xSetPacketType+0x24>)
 8019602:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_PACKETTYPE, (uint8_t*) &packetType, 1);
 8019604:	1dfb      	adds	r3, r7, #7
 8019606:	2201      	movs	r2, #1
 8019608:	4619      	mov	r1, r3
 801960a:	208a      	movs	r0, #138	@ 0x8a
 801960c:	f000 fb14 	bl	8019c38 <SX126xWriteCommand>
}
 8019610:	bf00      	nop
 8019612:	3708      	adds	r7, #8
 8019614:	46bd      	mov	sp, r7
 8019616:	bd80      	pop	{r7, pc}
 8019618:	2000caf5 	.word	0x2000caf5

0801961c <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType(void) {
 801961c:	b480      	push	{r7}
 801961e:	af00      	add	r7, sp, #0
	return PacketType;
 8019620:	4b03      	ldr	r3, [pc, #12]	@ (8019630 <SX126xGetPacketType+0x14>)
 8019622:	781b      	ldrb	r3, [r3, #0]
}
 8019624:	4618      	mov	r0, r3
 8019626:	46bd      	mov	sp, r7
 8019628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962c:	4770      	bx	lr
 801962e:	bf00      	nop
 8019630:	2000caf5 	.word	0x2000caf5

08019634 <SX126xSetTxParams>:

void SX126xSetTxParams(int8_t power, RadioRampTimes_t rampTime) {
 8019634:	b580      	push	{r7, lr}
 8019636:	b084      	sub	sp, #16
 8019638:	af00      	add	r7, sp, #0
 801963a:	4603      	mov	r3, r0
 801963c:	460a      	mov	r2, r1
 801963e:	71fb      	strb	r3, [r7, #7]
 8019640:	4613      	mov	r3, r2
 8019642:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	if (SX126xGetPaSelect(0) == SX1261) {
 8019644:	2000      	movs	r0, #0
 8019646:	f000 fc6e 	bl	8019f26 <SX126xGetPaSelect>
 801964a:	4603      	mov	r3, r0
 801964c:	2b01      	cmp	r3, #1
 801964e:	d124      	bne.n	801969a <SX126xSetTxParams+0x66>
		if (power == 15) {
 8019650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019654:	2b0f      	cmp	r3, #15
 8019656:	d106      	bne.n	8019666 <SX126xSetTxParams+0x32>
			SX126xSetPaConfig(0x06, 0x00, 0x01, 0x01);
 8019658:	2301      	movs	r3, #1
 801965a:	2201      	movs	r2, #1
 801965c:	2100      	movs	r1, #0
 801965e:	2006      	movs	r0, #6
 8019660:	f7ff ff02 	bl	8019468 <SX126xSetPaConfig>
 8019664:	e005      	b.n	8019672 <SX126xSetTxParams+0x3e>
		}
		else {
			SX126xSetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019666:	2301      	movs	r3, #1
 8019668:	2201      	movs	r2, #1
 801966a:	2100      	movs	r1, #0
 801966c:	2004      	movs	r0, #4
 801966e:	f7ff fefb 	bl	8019468 <SX126xSetPaConfig>
		}
		if (power >= 14) {
 8019672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019676:	2b0d      	cmp	r3, #13
 8019678:	dd02      	ble.n	8019680 <SX126xSetTxParams+0x4c>
			power = 14;
 801967a:	230e      	movs	r3, #14
 801967c:	71fb      	strb	r3, [r7, #7]
 801967e:	e006      	b.n	801968e <SX126xSetTxParams+0x5a>
		}
		else if (power < -17) {
 8019680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019684:	f113 0f11 	cmn.w	r3, #17
 8019688:	da01      	bge.n	801968e <SX126xSetTxParams+0x5a>
			power = -17;
 801968a:	23ef      	movs	r3, #239	@ 0xef
 801968c:	71fb      	strb	r3, [r7, #7]
		}
		SX126xWriteRegister(REG_OCP, 0x18); // current max is 80 mA for the whole device
 801968e:	2118      	movs	r1, #24
 8019690:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019694:	f000 fb6a 	bl	8019d6c <SX126xWriteRegister>
 8019698:	e025      	b.n	80196e6 <SX126xSetTxParams+0xb2>
	}
	else // sx1262
	{
		// WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
		// RegTxClampConfig = @address 0x08D8
		SX126xWriteRegister(0x08D8, SX126xReadRegister(0x08D8) | (0x0F << 1));
 801969a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801969e:	f000 fbb1 	bl	8019e04 <SX126xReadRegister>
 80196a2:	4603      	mov	r3, r0
 80196a4:	f043 031e 	orr.w	r3, r3, #30
 80196a8:	b2db      	uxtb	r3, r3
 80196aa:	4619      	mov	r1, r3
 80196ac:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80196b0:	f000 fb5c 	bl	8019d6c <SX126xWriteRegister>
		// WORKAROUND END

		SX126xSetPaConfig(0x04, 0x07, 0x00, 0x01);
 80196b4:	2301      	movs	r3, #1
 80196b6:	2200      	movs	r2, #0
 80196b8:	2107      	movs	r1, #7
 80196ba:	2004      	movs	r0, #4
 80196bc:	f7ff fed4 	bl	8019468 <SX126xSetPaConfig>
		if (power > 22) {
 80196c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196c4:	2b16      	cmp	r3, #22
 80196c6:	dd02      	ble.n	80196ce <SX126xSetTxParams+0x9a>
			power = 22;
 80196c8:	2316      	movs	r3, #22
 80196ca:	71fb      	strb	r3, [r7, #7]
 80196cc:	e006      	b.n	80196dc <SX126xSetTxParams+0xa8>
		}
		else if (power < -9) {
 80196ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196d2:	f113 0f09 	cmn.w	r3, #9
 80196d6:	da01      	bge.n	80196dc <SX126xSetTxParams+0xa8>
			power = -9;
 80196d8:	23f7      	movs	r3, #247	@ 0xf7
 80196da:	71fb      	strb	r3, [r7, #7]
		}
		SX126xWriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 80196dc:	2138      	movs	r1, #56	@ 0x38
 80196de:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80196e2:	f000 fb43 	bl	8019d6c <SX126xWriteRegister>
	}
	buf[0] = power;
 80196e6:	79fb      	ldrb	r3, [r7, #7]
 80196e8:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) rampTime;
 80196ea:	79bb      	ldrb	r3, [r7, #6]
 80196ec:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80196ee:	f107 030c 	add.w	r3, r7, #12
 80196f2:	2202      	movs	r2, #2
 80196f4:	4619      	mov	r1, r3
 80196f6:	208e      	movs	r0, #142	@ 0x8e
 80196f8:	f000 fa9e 	bl	8019c38 <SX126xWriteCommand>
}
 80196fc:	bf00      	nop
 80196fe:	3710      	adds	r7, #16
 8019700:	46bd      	mov	sp, r7
 8019702:	bd80      	pop	{r7, pc}
 8019704:	0000      	movs	r0, r0
	...

08019708 <SX126xSetModulationParams>:

void SX126xSetModulationParams(ModulationParams_t *modulationParams) {
 8019708:	b580      	push	{r7, lr}
 801970a:	b086      	sub	sp, #24
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint32_t tempVal = 0;
 8019710:	2300      	movs	r3, #0
 8019712:	617b      	str	r3, [r7, #20]
	uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019714:	4a48      	ldr	r2, [pc, #288]	@ (8019838 <SX126xSetModulationParams+0x130>)
 8019716:	f107 0308 	add.w	r3, r7, #8
 801971a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801971e:	e883 0003 	stmia.w	r3, {r0, r1}

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != modulationParams->PacketType) {
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	781a      	ldrb	r2, [r3, #0]
 8019726:	4b45      	ldr	r3, [pc, #276]	@ (801983c <SX126xSetModulationParams+0x134>)
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	429a      	cmp	r2, r3
 801972c:	d004      	beq.n	8019738 <SX126xSetModulationParams+0x30>
		SX126xSetPacketType(modulationParams->PacketType);
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	781b      	ldrb	r3, [r3, #0]
 8019732:	4618      	mov	r0, r3
 8019734:	f7ff ff5e 	bl	80195f4 <SX126xSetPacketType>
	}

	switch (modulationParams->PacketType) {
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	781b      	ldrb	r3, [r3, #0]
 801973c:	2b00      	cmp	r3, #0
 801973e:	d002      	beq.n	8019746 <SX126xSetModulationParams+0x3e>
 8019740:	2b01      	cmp	r3, #1
 8019742:	d056      	beq.n	80197f2 <SX126xSetModulationParams+0xea>
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);

		break;
		default:
		case PACKET_TYPE_NONE:
			return;
 8019744:	e06c      	b.n	8019820 <SX126xSetModulationParams+0x118>
			n = 8;
 8019746:	2308      	movs	r3, #8
 8019748:	74fb      	strb	r3, [r7, #19]
							/ (double) modulationParams->Params.Gfsk.BitRate));
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	685b      	ldr	r3, [r3, #4]
 801974e:	4618      	mov	r0, r3
 8019750:	f7e6 fee8 	bl	8000524 <__aeabi_ui2d>
 8019754:	4602      	mov	r2, r0
 8019756:	460b      	mov	r3, r1
 8019758:	a133      	add	r1, pc, #204	@ (adr r1, 8019828 <SX126xSetModulationParams+0x120>)
 801975a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801975e:	f7e7 f885 	bl	800086c <__aeabi_ddiv>
 8019762:	4602      	mov	r2, r0
 8019764:	460b      	mov	r3, r1
 8019766:	4610      	mov	r0, r2
 8019768:	4619      	mov	r1, r3
					* ((double) XTAL_FREQ
 801976a:	f04f 0200 	mov.w	r2, #0
 801976e:	4b34      	ldr	r3, [pc, #208]	@ (8019840 <SX126xSetModulationParams+0x138>)
 8019770:	f7e6 ff52 	bl	8000618 <__aeabi_dmul>
 8019774:	4602      	mov	r2, r0
 8019776:	460b      	mov	r3, r1
			tempVal = (uint32_t) (32
 8019778:	4610      	mov	r0, r2
 801977a:	4619      	mov	r1, r3
 801977c:	f7e7 fa24 	bl	8000bc8 <__aeabi_d2uiz>
 8019780:	4603      	mov	r3, r0
 8019782:	617b      	str	r3, [r7, #20]
			buf[0] = (tempVal >> 16) & 0xFF;
 8019784:	697b      	ldr	r3, [r7, #20]
 8019786:	0c1b      	lsrs	r3, r3, #16
 8019788:	b2db      	uxtb	r3, r3
 801978a:	723b      	strb	r3, [r7, #8]
			buf[1] = (tempVal >> 8) & 0xFF;
 801978c:	697b      	ldr	r3, [r7, #20]
 801978e:	0a1b      	lsrs	r3, r3, #8
 8019790:	b2db      	uxtb	r3, r3
 8019792:	727b      	strb	r3, [r7, #9]
			buf[2] = tempVal & 0xFF;
 8019794:	697b      	ldr	r3, [r7, #20]
 8019796:	b2db      	uxtb	r3, r3
 8019798:	72bb      	strb	r3, [r7, #10]
			buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	7b1b      	ldrb	r3, [r3, #12]
 801979e:	72fb      	strb	r3, [r7, #11]
			buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	7b5b      	ldrb	r3, [r3, #13]
 80197a4:	733b      	strb	r3, [r7, #12]
			tempVal = (uint32_t) ((double) modulationParams->Params.Gfsk.Fdev
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	689b      	ldr	r3, [r3, #8]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7e6 feba 	bl	8000524 <__aeabi_ui2d>
					/ (double) FREQ_STEP );
 80197b0:	a31f      	add	r3, pc, #124	@ (adr r3, 8019830 <SX126xSetModulationParams+0x128>)
 80197b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197b6:	f7e7 f859 	bl	800086c <__aeabi_ddiv>
 80197ba:	4602      	mov	r2, r0
 80197bc:	460b      	mov	r3, r1
			tempVal = (uint32_t) ((double) modulationParams->Params.Gfsk.Fdev
 80197be:	4610      	mov	r0, r2
 80197c0:	4619      	mov	r1, r3
 80197c2:	f7e7 fa01 	bl	8000bc8 <__aeabi_d2uiz>
 80197c6:	4603      	mov	r3, r0
 80197c8:	617b      	str	r3, [r7, #20]
			buf[5] = (tempVal >> 16) & 0xFF;
 80197ca:	697b      	ldr	r3, [r7, #20]
 80197cc:	0c1b      	lsrs	r3, r3, #16
 80197ce:	b2db      	uxtb	r3, r3
 80197d0:	737b      	strb	r3, [r7, #13]
			buf[6] = (tempVal >> 8) & 0xFF;
 80197d2:	697b      	ldr	r3, [r7, #20]
 80197d4:	0a1b      	lsrs	r3, r3, #8
 80197d6:	b2db      	uxtb	r3, r3
 80197d8:	73bb      	strb	r3, [r7, #14]
			buf[7] = (tempVal & 0xFF);
 80197da:	697b      	ldr	r3, [r7, #20]
 80197dc:	b2db      	uxtb	r3, r3
 80197de:	73fb      	strb	r3, [r7, #15]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 80197e0:	7cfb      	ldrb	r3, [r7, #19]
 80197e2:	b29a      	uxth	r2, r3
 80197e4:	f107 0308 	add.w	r3, r7, #8
 80197e8:	4619      	mov	r1, r3
 80197ea:	208b      	movs	r0, #139	@ 0x8b
 80197ec:	f000 fa24 	bl	8019c38 <SX126xWriteCommand>
		break;
 80197f0:	e016      	b.n	8019820 <SX126xSetModulationParams+0x118>
			n = 4;
 80197f2:	2304      	movs	r3, #4
 80197f4:	74fb      	strb	r3, [r7, #19]
			buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	7c1b      	ldrb	r3, [r3, #16]
 80197fa:	723b      	strb	r3, [r7, #8]
			buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	7c5b      	ldrb	r3, [r3, #17]
 8019800:	727b      	strb	r3, [r7, #9]
			buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	7c9b      	ldrb	r3, [r3, #18]
 8019806:	72bb      	strb	r3, [r7, #10]
			buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	7cdb      	ldrb	r3, [r3, #19]
 801980c:	72fb      	strb	r3, [r7, #11]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 801980e:	7cfb      	ldrb	r3, [r7, #19]
 8019810:	b29a      	uxth	r2, r3
 8019812:	f107 0308 	add.w	r3, r7, #8
 8019816:	4619      	mov	r1, r3
 8019818:	208b      	movs	r0, #139	@ 0x8b
 801981a:	f000 fa0d 	bl	8019c38 <SX126xWriteCommand>
		break;
 801981e:	bf00      	nop
	}
}
 8019820:	3718      	adds	r7, #24
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}
 8019826:	bf00      	nop
 8019828:	00000000 	.word	0x00000000
 801982c:	417e8480 	.word	0x417e8480
 8019830:	00000000 	.word	0x00000000
 8019834:	3fee8480 	.word	0x3fee8480
 8019838:	080226d8 	.word	0x080226d8
 801983c:	2000caf5 	.word	0x2000caf5
 8019840:	40400000 	.word	0x40400000

08019844 <SX126xSetPacketParams>:

void SX126xSetPacketParams(PacketParams_t *packetParams) {
 8019844:	b580      	push	{r7, lr}
 8019846:	b086      	sub	sp, #24
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint8_t crcVal = 0;
 801984c:	2300      	movs	r3, #0
 801984e:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019850:	4a3e      	ldr	r2, [pc, #248]	@ (801994c <SX126xSetPacketParams+0x108>)
 8019852:	f107 030c 	add.w	r3, r7, #12
 8019856:	ca07      	ldmia	r2, {r0, r1, r2}
 8019858:	c303      	stmia	r3!, {r0, r1}
 801985a:	701a      	strb	r2, [r3, #0]

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != packetParams->PacketType) {
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	781a      	ldrb	r2, [r3, #0]
 8019860:	4b3b      	ldr	r3, [pc, #236]	@ (8019950 <SX126xSetPacketParams+0x10c>)
 8019862:	781b      	ldrb	r3, [r3, #0]
 8019864:	429a      	cmp	r2, r3
 8019866:	d004      	beq.n	8019872 <SX126xSetPacketParams+0x2e>
		SX126xSetPacketType(packetParams->PacketType);
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	781b      	ldrb	r3, [r3, #0]
 801986c:	4618      	mov	r0, r3
 801986e:	f7ff fec1 	bl	80195f4 <SX126xSetPacketType>
	}

	switch (packetParams->PacketType) {
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	781b      	ldrb	r3, [r3, #0]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d002      	beq.n	8019880 <SX126xSetPacketParams+0x3c>
 801987a:	2b01      	cmp	r3, #1
 801987c:	d042      	beq.n	8019904 <SX126xSetPacketParams+0xc0>
			buf[4] = packetParams->Params.LoRa.CrcMode;
			buf[5] = packetParams->Params.LoRa.InvertIQ;
		break;
		default:
		case PACKET_TYPE_NONE:
			return;
 801987e:	e062      	b.n	8019946 <SX126xSetPacketParams+0x102>
			if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM) {
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	7a5b      	ldrb	r3, [r3, #9]
 8019884:	2bf1      	cmp	r3, #241	@ 0xf1
 8019886:	d10a      	bne.n	801989e <SX126xSetPacketParams+0x5a>
				SX126xSetCrcSeed(CRC_IBM_SEED);
 8019888:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801988c:	f7ff fc1e 	bl	80190cc <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_IBM);
 8019890:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019894:	f7ff fc3a 	bl	801910c <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES;
 8019898:	2302      	movs	r3, #2
 801989a:	75bb      	strb	r3, [r7, #22]
 801989c:	e011      	b.n	80198c2 <SX126xSetPacketParams+0x7e>
			else if (packetParams->Params.Gfsk.CrcLength
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	7a5b      	ldrb	r3, [r3, #9]
 80198a2:	2bf2      	cmp	r3, #242	@ 0xf2
 80198a4:	d10a      	bne.n	80198bc <SX126xSetPacketParams+0x78>
				SX126xSetCrcSeed(CRC_CCITT_SEED);
 80198a6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80198aa:	f7ff fc0f 	bl	80190cc <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_CCITT);
 80198ae:	f241 0021 	movw	r0, #4129	@ 0x1021
 80198b2:	f7ff fc2b 	bl	801910c <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES_INV;
 80198b6:	2306      	movs	r3, #6
 80198b8:	75bb      	strb	r3, [r7, #22]
 80198ba:	e002      	b.n	80198c2 <SX126xSetPacketParams+0x7e>
				crcVal = packetParams->Params.Gfsk.CrcLength;
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	7a5b      	ldrb	r3, [r3, #9]
 80198c0:	75bb      	strb	r3, [r7, #22]
			n = 9;
 80198c2:	2309      	movs	r3, #9
 80198c4:	75fb      	strb	r3, [r7, #23]
			buf[0] = (packetParams->Params.Gfsk.PreambleLength >> 8) & 0xFF;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	885b      	ldrh	r3, [r3, #2]
 80198ca:	0a1b      	lsrs	r3, r3, #8
 80198cc:	b29b      	uxth	r3, r3
 80198ce:	b2db      	uxtb	r3, r3
 80198d0:	733b      	strb	r3, [r7, #12]
			buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	885b      	ldrh	r3, [r3, #2]
 80198d6:	b2db      	uxtb	r3, r3
 80198d8:	737b      	strb	r3, [r7, #13]
			buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	791b      	ldrb	r3, [r3, #4]
 80198de:	73bb      	strb	r3, [r7, #14]
			buf[3] = (packetParams->Params.Gfsk.SyncWordLength /*<< 3*/); // convert from byte to bit
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	795b      	ldrb	r3, [r3, #5]
 80198e4:	73fb      	strb	r3, [r7, #15]
			buf[4] = packetParams->Params.Gfsk.AddrComp;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	799b      	ldrb	r3, [r3, #6]
 80198ea:	743b      	strb	r3, [r7, #16]
			buf[5] = packetParams->Params.Gfsk.HeaderType;
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	79db      	ldrb	r3, [r3, #7]
 80198f0:	747b      	strb	r3, [r7, #17]
			buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	7a1b      	ldrb	r3, [r3, #8]
 80198f6:	74bb      	strb	r3, [r7, #18]
			buf[7] = crcVal;
 80198f8:	7dbb      	ldrb	r3, [r7, #22]
 80198fa:	74fb      	strb	r3, [r7, #19]
			buf[8] = packetParams->Params.Gfsk.DcFree;
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	7a9b      	ldrb	r3, [r3, #10]
 8019900:	753b      	strb	r3, [r7, #20]
		break;
 8019902:	e018      	b.n	8019936 <SX126xSetPacketParams+0xf2>
			n = 6;
 8019904:	2306      	movs	r3, #6
 8019906:	75fb      	strb	r3, [r7, #23]
			buf[0] = (packetParams->Params.LoRa.PreambleLength >> 8) & 0xFF;
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	899b      	ldrh	r3, [r3, #12]
 801990c:	0a1b      	lsrs	r3, r3, #8
 801990e:	b29b      	uxth	r3, r3
 8019910:	b2db      	uxtb	r3, r3
 8019912:	733b      	strb	r3, [r7, #12]
			buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	899b      	ldrh	r3, [r3, #12]
 8019918:	b2db      	uxtb	r3, r3
 801991a:	737b      	strb	r3, [r7, #13]
			buf[2] = packetParams->Params.LoRa.HeaderType;
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	7b9b      	ldrb	r3, [r3, #14]
 8019920:	73bb      	strb	r3, [r7, #14]
			buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	7bdb      	ldrb	r3, [r3, #15]
 8019926:	73fb      	strb	r3, [r7, #15]
			buf[4] = packetParams->Params.LoRa.CrcMode;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	7c1b      	ldrb	r3, [r3, #16]
 801992c:	743b      	strb	r3, [r7, #16]
			buf[5] = packetParams->Params.LoRa.InvertIQ;
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	7c5b      	ldrb	r3, [r3, #17]
 8019932:	747b      	strb	r3, [r7, #17]
		break;
 8019934:	bf00      	nop
	}
	SX126xWriteCommand(RADIO_SET_PACKETPARAMS, buf, n);
 8019936:	7dfb      	ldrb	r3, [r7, #23]
 8019938:	b29a      	uxth	r2, r3
 801993a:	f107 030c 	add.w	r3, r7, #12
 801993e:	4619      	mov	r1, r3
 8019940:	208c      	movs	r0, #140	@ 0x8c
 8019942:	f000 f979 	bl	8019c38 <SX126xWriteCommand>
}
 8019946:	3718      	adds	r7, #24
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	080226e0 	.word	0x080226e0
 8019950:	2000caf5 	.word	0x2000caf5

08019954 <SX126xSetCadParams>:

void SX126xSetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak,
		uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout) {
 8019954:	b590      	push	{r4, r7, lr}
 8019956:	b085      	sub	sp, #20
 8019958:	af00      	add	r7, sp, #0
 801995a:	4604      	mov	r4, r0
 801995c:	4608      	mov	r0, r1
 801995e:	4611      	mov	r1, r2
 8019960:	461a      	mov	r2, r3
 8019962:	4623      	mov	r3, r4
 8019964:	71fb      	strb	r3, [r7, #7]
 8019966:	4603      	mov	r3, r0
 8019968:	71bb      	strb	r3, [r7, #6]
 801996a:	460b      	mov	r3, r1
 801996c:	717b      	strb	r3, [r7, #5]
 801996e:	4613      	mov	r3, r2
 8019970:	713b      	strb	r3, [r7, #4]
	uint8_t buf[7];

	buf[0] = (uint8_t) cadSymbolNum;
 8019972:	79fb      	ldrb	r3, [r7, #7]
 8019974:	723b      	strb	r3, [r7, #8]
	buf[1] = cadDetPeak;
 8019976:	79bb      	ldrb	r3, [r7, #6]
 8019978:	727b      	strb	r3, [r7, #9]
	buf[2] = cadDetMin;
 801997a:	797b      	ldrb	r3, [r7, #5]
 801997c:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) cadExitMode;
 801997e:	793b      	ldrb	r3, [r7, #4]
 8019980:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((cadTimeout >> 16) & 0xFF);
 8019982:	6a3b      	ldr	r3, [r7, #32]
 8019984:	0c1b      	lsrs	r3, r3, #16
 8019986:	b2db      	uxtb	r3, r3
 8019988:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) ((cadTimeout >> 8) & 0xFF);
 801998a:	6a3b      	ldr	r3, [r7, #32]
 801998c:	0a1b      	lsrs	r3, r3, #8
 801998e:	b2db      	uxtb	r3, r3
 8019990:	737b      	strb	r3, [r7, #13]
	buf[6] = (uint8_t) (cadTimeout & 0xFF);
 8019992:	6a3b      	ldr	r3, [r7, #32]
 8019994:	b2db      	uxtb	r3, r3
 8019996:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_CADPARAMS, buf, 7);
 8019998:	f107 0308 	add.w	r3, r7, #8
 801999c:	2207      	movs	r2, #7
 801999e:	4619      	mov	r1, r3
 80199a0:	2088      	movs	r0, #136	@ 0x88
 80199a2:	f000 f949 	bl	8019c38 <SX126xWriteCommand>
	OperatingMode = MODE_CAD;
 80199a6:	4b03      	ldr	r3, [pc, #12]	@ (80199b4 <SX126xSetCadParams+0x60>)
 80199a8:	2207      	movs	r2, #7
 80199aa:	701a      	strb	r2, [r3, #0]
}
 80199ac:	bf00      	nop
 80199ae:	3714      	adds	r7, #20
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd90      	pop	{r4, r7, pc}
 80199b4:	2000caf4 	.word	0x2000caf4

080199b8 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 80199b8:	b580      	push	{r7, lr}
 80199ba:	b084      	sub	sp, #16
 80199bc:	af00      	add	r7, sp, #0
 80199be:	4603      	mov	r3, r0
 80199c0:	460a      	mov	r2, r1
 80199c2:	71fb      	strb	r3, [r7, #7]
 80199c4:	4613      	mov	r3, r2
 80199c6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 80199c8:	79fb      	ldrb	r3, [r7, #7]
 80199ca:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 80199cc:	79bb      	ldrb	r3, [r7, #6]
 80199ce:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_BUFFERBASEADDRESS, buf, 2);
 80199d0:	f107 030c 	add.w	r3, r7, #12
 80199d4:	2202      	movs	r2, #2
 80199d6:	4619      	mov	r1, r3
 80199d8:	208f      	movs	r0, #143	@ 0x8f
 80199da:	f000 f92d 	bl	8019c38 <SX126xWriteCommand>
}
 80199de:	bf00      	nop
 80199e0:	3710      	adds	r7, #16
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}

080199e6 <SX126xGetRssiInst>:
	SX126xReadCommand(RADIO_GET_STATUS, (uint8_t*) &stat, 1);
	status.Value = stat;
	return status;
}

int8_t SX126xGetRssiInst(void) {
 80199e6:	b580      	push	{r7, lr}
 80199e8:	b082      	sub	sp, #8
 80199ea:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	int8_t rssi = 0;
 80199ec:	2300      	movs	r3, #0
 80199ee:	71fb      	strb	r3, [r7, #7]

	SX126xReadCommand(RADIO_GET_RSSIINST, buf, 1);
 80199f0:	1d3b      	adds	r3, r7, #4
 80199f2:	2201      	movs	r2, #1
 80199f4:	4619      	mov	r1, r3
 80199f6:	2015      	movs	r0, #21
 80199f8:	f000 f94e 	bl	8019c98 <SX126xReadCommand>
	rssi = -buf[0] >> 1;
 80199fc:	793b      	ldrb	r3, [r7, #4]
 80199fe:	425b      	negs	r3, r3
 8019a00:	105b      	asrs	r3, r3, #1
 8019a02:	71fb      	strb	r3, [r7, #7]
	return rssi;
 8019a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	3708      	adds	r7, #8
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bd80      	pop	{r7, pc}

08019a10 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus(uint8_t *payloadLength,
		uint8_t *rxStartBufferPointer) {
 8019a10:	b580      	push	{r7, lr}
 8019a12:	b084      	sub	sp, #16
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
 8019a18:	6039      	str	r1, [r7, #0]
	uint8_t status[2];

	SX126xReadCommand(RADIO_GET_RXBUFFERSTATUS, status, 2);
 8019a1a:	f107 030c 	add.w	r3, r7, #12
 8019a1e:	2202      	movs	r2, #2
 8019a20:	4619      	mov	r1, r3
 8019a22:	2013      	movs	r0, #19
 8019a24:	f000 f938 	bl	8019c98 <SX126xReadCommand>

	// In case of LORA fixed header, the payloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if ((SX126xGetPacketType() == PACKET_TYPE_LORA)
 8019a28:	f7ff fdf8 	bl	801961c <SX126xGetPacketType>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	2b01      	cmp	r3, #1
 8019a30:	d111      	bne.n	8019a56 <SX126xGetRxBufferStatus+0x46>
			&& (SX126xReadRegister(REG_LR_PACKETPARAMS) >> 7 == 1)) {
 8019a32:	f240 7004 	movw	r0, #1796	@ 0x704
 8019a36:	f000 f9e5 	bl	8019e04 <SX126xReadRegister>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	09db      	lsrs	r3, r3, #7
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	2b01      	cmp	r3, #1
 8019a42:	d108      	bne.n	8019a56 <SX126xGetRxBufferStatus+0x46>
		*payloadLength = SX126xReadRegister(REG_LR_PAYLOADLENGTH);
 8019a44:	f240 7002 	movw	r0, #1794	@ 0x702
 8019a48:	f000 f9dc 	bl	8019e04 <SX126xReadRegister>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	461a      	mov	r2, r3
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	701a      	strb	r2, [r3, #0]
 8019a54:	e002      	b.n	8019a5c <SX126xGetRxBufferStatus+0x4c>
	}
	else {
		*payloadLength = status[0];
 8019a56:	7b3a      	ldrb	r2, [r7, #12]
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	701a      	strb	r2, [r3, #0]
	}
	*rxStartBufferPointer = status[1];
 8019a5c:	7b7a      	ldrb	r2, [r7, #13]
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	701a      	strb	r2, [r3, #0]
}
 8019a62:	bf00      	nop
 8019a64:	3710      	adds	r7, #16
 8019a66:	46bd      	mov	sp, r7
 8019a68:	bd80      	pop	{r7, pc}
	...

08019a6c <SX126xGetPacketStatus>:

void SX126xGetPacketStatus(PacketStatus_t *pktStatus) {
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b084      	sub	sp, #16
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
	uint8_t status[3];

	SX126xReadCommand(RADIO_GET_PACKETSTATUS, status, 3);
 8019a74:	f107 030c 	add.w	r3, r7, #12
 8019a78:	2203      	movs	r2, #3
 8019a7a:	4619      	mov	r1, r3
 8019a7c:	2014      	movs	r0, #20
 8019a7e:	f000 f90b 	bl	8019c98 <SX126xReadCommand>

	pktStatus->packetType = SX126xGetPacketType();
 8019a82:	f7ff fdcb 	bl	801961c <SX126xGetPacketType>
 8019a86:	4603      	mov	r3, r0
 8019a88:	461a      	mov	r2, r3
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	701a      	strb	r2, [r3, #0]
	switch (pktStatus->packetType) {
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	781b      	ldrb	r3, [r3, #0]
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d002      	beq.n	8019a9c <SX126xGetPacketStatus+0x30>
 8019a96:	2b01      	cmp	r3, #1
 8019a98:	d013      	beq.n	8019ac2 <SX126xGetPacketStatus+0x56>
 8019a9a:	e02a      	b.n	8019af2 <SX126xGetPacketStatus+0x86>
		case PACKET_TYPE_GFSK:
			pktStatus->Params.Gfsk.RxStatus = status[0];
 8019a9c:	7b3a      	ldrb	r2, [r7, #12]
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	711a      	strb	r2, [r3, #4]
			pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019aa2:	7b7b      	ldrb	r3, [r7, #13]
 8019aa4:	425b      	negs	r3, r3
 8019aa6:	105b      	asrs	r3, r3, #1
 8019aa8:	b25a      	sxtb	r2, r3
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	719a      	strb	r2, [r3, #6]
			pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019aae:	7bbb      	ldrb	r3, [r7, #14]
 8019ab0:	425b      	negs	r3, r3
 8019ab2:	105b      	asrs	r3, r3, #1
 8019ab4:	b25a      	sxtb	r2, r3
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	715a      	strb	r2, [r3, #5]
			pktStatus->Params.Gfsk.FreqError = 0;
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	2200      	movs	r2, #0
 8019abe:	609a      	str	r2, [r3, #8]
		break;
 8019ac0:	e020      	b.n	8019b04 <SX126xGetPacketStatus+0x98>

		case PACKET_TYPE_LORA:
			pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019ac2:	7b3b      	ldrb	r3, [r7, #12]
 8019ac4:	425b      	negs	r3, r3
 8019ac6:	105b      	asrs	r3, r3, #1
 8019ac8:	b25a      	sxtb	r2, r3
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	731a      	strb	r2, [r3, #12]
			// Returns SNR value [dB] rounded to the nearest integer value
			pktStatus->Params.LoRa.SnrPkt = (((int8_t) status[1]) + 2) >> 2;
 8019ace:	7b7b      	ldrb	r3, [r7, #13]
 8019ad0:	b25b      	sxtb	r3, r3
 8019ad2:	3302      	adds	r3, #2
 8019ad4:	109b      	asrs	r3, r3, #2
 8019ad6:	b25a      	sxtb	r2, r3
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	735a      	strb	r2, [r3, #13]
			pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019adc:	7bbb      	ldrb	r3, [r7, #14]
 8019ade:	425b      	negs	r3, r3
 8019ae0:	105b      	asrs	r3, r3, #1
 8019ae2:	b25a      	sxtb	r2, r3
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	739a      	strb	r2, [r3, #14]
			pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019ae8:	4b08      	ldr	r3, [pc, #32]	@ (8019b0c <SX126xGetPacketStatus+0xa0>)
 8019aea:	681a      	ldr	r2, [r3, #0]
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	611a      	str	r2, [r3, #16]
		break;
 8019af0:	e008      	b.n	8019b04 <SX126xGetPacketStatus+0x98>

		default:
		case PACKET_TYPE_NONE:
			// In that specific case, we set everything in the pktStatus to zeros
			// and reset the packet type accordingly
			memset(pktStatus, 0, sizeof(PacketStatus_t));
 8019af2:	2214      	movs	r2, #20
 8019af4:	2100      	movs	r1, #0
 8019af6:	6878      	ldr	r0, [r7, #4]
 8019af8:	f002 f82a 	bl	801bb50 <memset>
			pktStatus->packetType = PACKET_TYPE_NONE;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	220f      	movs	r2, #15
 8019b00:	701a      	strb	r2, [r3, #0]
		break;
 8019b02:	bf00      	nop
	}
}
 8019b04:	bf00      	nop
 8019b06:	3710      	adds	r7, #16
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}
 8019b0c:	2000caf8 	.word	0x2000caf8

08019b10 <SX126xClearIrqStatus>:
void SX126xClearDeviceErrors(void) {
	uint8_t buf[2] = { 0x00, 0x00 };
	SX126xWriteCommand(RADIO_CLR_ERROR, buf, 2);
}

void SX126xClearIrqStatus(uint16_t irq) {
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b084      	sub	sp, #16
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	4603      	mov	r3, r0
 8019b18:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) (((uint16_t) irq >> 8) & 0x00FF);
 8019b1a:	88fb      	ldrh	r3, [r7, #6]
 8019b1c:	0a1b      	lsrs	r3, r3, #8
 8019b1e:	b29b      	uxth	r3, r3
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((uint16_t) irq & 0x00FF);
 8019b24:	88fb      	ldrh	r3, [r7, #6]
 8019b26:	b2db      	uxtb	r3, r3
 8019b28:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_CLR_IRQSTATUS, buf, 2);
 8019b2a:	f107 030c 	add.w	r3, r7, #12
 8019b2e:	2202      	movs	r2, #2
 8019b30:	4619      	mov	r1, r3
 8019b32:	2002      	movs	r0, #2
 8019b34:	f000 f880 	bl	8019c38 <SX126xWriteCommand>
}
 8019b38:	bf00      	nop
 8019b3a:	3710      	adds	r7, #16
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	bd80      	pop	{r7, pc}

08019b40 <SX126xIoInit>:
#include "main.h"


bool dio3IsOutput = false;

void SX126xIoInit(void){
 8019b40:	b580      	push	{r7, lr}
 8019b42:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 8019b44:	4b03      	ldr	r3, [pc, #12]	@ (8019b54 <SX126xIoInit+0x14>)
 8019b46:	2200      	movs	r2, #0
 8019b48:	701a      	strb	r2, [r3, #0]

	SX126xReset();
 8019b4a:	f000 f805 	bl	8019b58 <SX126xReset>
}
 8019b4e:	bf00      	nop
 8019b50:	bd80      	pop	{r7, pc}
 8019b52:	bf00      	nop
 8019b54:	2000cafd 	.word	0x2000cafd

08019b58 <SX126xReset>:

void SX126xIoDeInit(void){
	dio3IsOutput = false;
}

void SX126xReset(void){
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019b66:	f7ea fa29 	bl	8003fbc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8019b6a:	200a      	movs	r0, #10
 8019b6c:	f7e8 f92c 	bl	8001dc8 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8019b70:	2201      	movs	r2, #1
 8019b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019b7a:	f7ea fa1f 	bl	8003fbc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8019b7e:	2014      	movs	r0, #20
 8019b80:	f7e8 f922 	bl	8001dc8 <HAL_Delay>
	dio3IsOutput = false;
 8019b84:	4b02      	ldr	r3, [pc, #8]	@ (8019b90 <SX126xReset+0x38>)
 8019b86:	2200      	movs	r2, #0
 8019b88:	701a      	strb	r2, [r3, #0]
}
 8019b8a:	bf00      	nop
 8019b8c:	bd80      	pop	{r7, pc}
 8019b8e:	bf00      	nop
 8019b90:	2000cafd 	.word	0x2000cafd

08019b94 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy(void){
 8019b94:	b580      	push	{r7, lr}
 8019b96:	b082      	sub	sp, #8
 8019b98:	af00      	add	r7, sp, #0
	int timeout = 1000;
 8019b9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019b9e:	607b      	str	r3, [r7, #4]
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 8019ba0:	e011      	b.n	8019bc6 <SX126xWaitOnBusy+0x32>
		for(int i=0; i<12000; i++)__NOP();
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	603b      	str	r3, [r7, #0]
 8019ba6:	e003      	b.n	8019bb0 <SX126xWaitOnBusy+0x1c>
 8019ba8:	bf00      	nop
 8019baa:	683b      	ldr	r3, [r7, #0]
 8019bac:	3301      	adds	r3, #1
 8019bae:	603b      	str	r3, [r7, #0]
 8019bb0:	683b      	ldr	r3, [r7, #0]
 8019bb2:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8019bb6:	4293      	cmp	r3, r2
 8019bb8:	ddf6      	ble.n	8019ba8 <SX126xWaitOnBusy+0x14>
		timeout -= 1;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	3b01      	subs	r3, #1
 8019bbe:	607b      	str	r3, [r7, #4]
		if (timeout < 0){
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	db09      	blt.n	8019bda <SX126xWaitOnBusy+0x46>
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 8019bc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8019bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019bce:	f7ea f9dd 	bl	8003f8c <HAL_GPIO_ReadPin>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	2b01      	cmp	r3, #1
 8019bd6:	d0e4      	beq.n	8019ba2 <SX126xWaitOnBusy+0xe>
 8019bd8:	e000      	b.n	8019bdc <SX126xWaitOnBusy+0x48>
			return;
 8019bda:	bf00      	nop
		}
	}
}
 8019bdc:	3708      	adds	r7, #8
 8019bde:	46bd      	mov	sp, r7
 8019be0:	bd80      	pop	{r7, pc}
	...

08019be4 <SX126xWakeup>:

void SX126xWakeup(void){
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b082      	sub	sp, #8
 8019be8:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 8019bea:	4b11      	ldr	r3, [pc, #68]	@ (8019c30 <SX126xWakeup+0x4c>)
 8019bec:	2200      	movs	r2, #0
 8019bee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8019bf0:	b672      	cpsid	i
}
 8019bf2:	bf00      	nop
	__disable_irq();

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8019bf4:	2200      	movs	r2, #0
 8019bf6:	2110      	movs	r1, #16
 8019bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019bfc:	f7ea f9de 	bl	8003fbc <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_GET_STATUS, 0x00};
 8019c00:	23c0      	movs	r3, #192	@ 0xc0
 8019c02:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8019c04:	1d39      	adds	r1, r7, #4
 8019c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019c0a:	2202      	movs	r2, #2
 8019c0c:	4809      	ldr	r0, [pc, #36]	@ (8019c34 <SX126xWakeup+0x50>)
 8019c0e:	f7ec fa4b 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8019c12:	2201      	movs	r2, #1
 8019c14:	2110      	movs	r1, #16
 8019c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019c1a:	f7ea f9cf 	bl	8003fbc <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8019c1e:	f7ff ffb9 	bl	8019b94 <SX126xWaitOnBusy>
  __ASM volatile ("cpsie i" : : : "memory");
 8019c22:	b662      	cpsie	i
}
 8019c24:	bf00      	nop
	__enable_irq();
}
 8019c26:	bf00      	nop
 8019c28:	3708      	adds	r7, #8
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	bd80      	pop	{r7, pc}
 8019c2e:	bf00      	nop
 8019c30:	2000cafd 	.word	0x2000cafd
 8019c34:	20000a10 	.word	0x20000a10

08019c38 <SX126xWriteCommand>:

void SX126xWriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	4603      	mov	r3, r0
 8019c40:	6039      	str	r1, [r7, #0]
 8019c42:	71fb      	strb	r3, [r7, #7]
 8019c44:	4613      	mov	r3, r2
 8019c46:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8019c48:	f7ff f9d8 	bl	8018ffc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	2110      	movs	r1, #16
 8019c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019c54:	f7ea f9b2 	bl	8003fbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, (uint8_t *)&command, 1, 1000);
 8019c58:	1df9      	adds	r1, r7, #7
 8019c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019c5e:	2201      	movs	r2, #1
 8019c60:	480c      	ldr	r0, [pc, #48]	@ (8019c94 <SX126xWriteCommand+0x5c>)
 8019c62:	f7ec fa21 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 8019c66:	88ba      	ldrh	r2, [r7, #4]
 8019c68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019c6c:	6839      	ldr	r1, [r7, #0]
 8019c6e:	4809      	ldr	r0, [pc, #36]	@ (8019c94 <SX126xWriteCommand+0x5c>)
 8019c70:	f7ec fa1a 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8019c74:	2201      	movs	r2, #1
 8019c76:	2110      	movs	r1, #16
 8019c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019c7c:	f7ea f99e 	bl	8003fbc <HAL_GPIO_WritePin>

	if (command != RADIO_SET_SLEEP)
 8019c80:	79fb      	ldrb	r3, [r7, #7]
 8019c82:	2b84      	cmp	r3, #132	@ 0x84
 8019c84:	d001      	beq.n	8019c8a <SX126xWriteCommand+0x52>
		SX126xWaitOnBusy();
 8019c86:	f7ff ff85 	bl	8019b94 <SX126xWaitOnBusy>
}
 8019c8a:	bf00      	nop
 8019c8c:	3708      	adds	r7, #8
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	bd80      	pop	{r7, pc}
 8019c92:	bf00      	nop
 8019c94:	20000a10 	.word	0x20000a10

08019c98 <SX126xReadCommand>:

void SX126xReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b084      	sub	sp, #16
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	6039      	str	r1, [r7, #0]
 8019ca2:	71fb      	strb	r3, [r7, #7]
 8019ca4:	4613      	mov	r3, r2
 8019ca6:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8019ca8:	f7ff f9a8 	bl	8018ffc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8019cac:	2200      	movs	r2, #0
 8019cae:	2110      	movs	r1, #16
 8019cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019cb4:	f7ea f982 	bl	8003fbc <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)command, 0x00};
 8019cb8:	79fb      	ldrb	r3, [r7, #7]
 8019cba:	733b      	strb	r3, [r7, #12]
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8019cc0:	f107 010c 	add.w	r1, r7, #12
 8019cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019cc8:	2202      	movs	r2, #2
 8019cca:	480b      	ldr	r0, [pc, #44]	@ (8019cf8 <SX126xReadCommand+0x60>)
 8019ccc:	f7ec f9ec 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 8019cd0:	88ba      	ldrh	r2, [r7, #4]
 8019cd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019cd6:	6839      	ldr	r1, [r7, #0]
 8019cd8:	4807      	ldr	r0, [pc, #28]	@ (8019cf8 <SX126xReadCommand+0x60>)
 8019cda:	f7ec fb5b 	bl	8006394 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8019cde:	2201      	movs	r2, #1
 8019ce0:	2110      	movs	r1, #16
 8019ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019ce6:	f7ea f969 	bl	8003fbc <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8019cea:	f7ff ff53 	bl	8019b94 <SX126xWaitOnBusy>
}
 8019cee:	bf00      	nop
 8019cf0:	3710      	adds	r7, #16
 8019cf2:	46bd      	mov	sp, r7
 8019cf4:	bd80      	pop	{r7, pc}
 8019cf6:	bf00      	nop
 8019cf8:	20000a10 	.word	0x20000a10

08019cfc <SX126xWriteRegisters>:

void SX126xWriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b084      	sub	sp, #16
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	4603      	mov	r3, r0
 8019d04:	6039      	str	r1, [r7, #0]
 8019d06:	80fb      	strh	r3, [r7, #6]
 8019d08:	4613      	mov	r3, r2
 8019d0a:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8019d0c:	f7ff f976 	bl	8018ffc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8019d10:	2200      	movs	r2, #0
 8019d12:	2110      	movs	r1, #16
 8019d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019d18:	f7ea f950 	bl	8003fbc <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_WRITE_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF)};
 8019d1c:	230d      	movs	r3, #13
 8019d1e:	733b      	strb	r3, [r7, #12]
 8019d20:	88fb      	ldrh	r3, [r7, #6]
 8019d22:	0a1b      	lsrs	r3, r3, #8
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	b2db      	uxtb	r3, r3
 8019d28:	737b      	strb	r3, [r7, #13]
 8019d2a:	88fb      	ldrh	r3, [r7, #6]
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 3, 1000);
 8019d30:	f107 010c 	add.w	r1, r7, #12
 8019d34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019d38:	2203      	movs	r2, #3
 8019d3a:	480b      	ldr	r0, [pc, #44]	@ (8019d68 <SX126xWriteRegisters+0x6c>)
 8019d3c:	f7ec f9b4 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 8019d40:	88ba      	ldrh	r2, [r7, #4]
 8019d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019d46:	6839      	ldr	r1, [r7, #0]
 8019d48:	4807      	ldr	r0, [pc, #28]	@ (8019d68 <SX126xWriteRegisters+0x6c>)
 8019d4a:	f7ec f9ad 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8019d4e:	2201      	movs	r2, #1
 8019d50:	2110      	movs	r1, #16
 8019d52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019d56:	f7ea f931 	bl	8003fbc <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8019d5a:	f7ff ff1b 	bl	8019b94 <SX126xWaitOnBusy>
}
 8019d5e:	bf00      	nop
 8019d60:	3710      	adds	r7, #16
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}
 8019d66:	bf00      	nop
 8019d68:	20000a10 	.word	0x20000a10

08019d6c <SX126xWriteRegister>:

void SX126xWriteRegister(uint16_t address, uint8_t value){
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b082      	sub	sp, #8
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	4603      	mov	r3, r0
 8019d74:	460a      	mov	r2, r1
 8019d76:	80fb      	strh	r3, [r7, #6]
 8019d78:	4613      	mov	r3, r2
 8019d7a:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegisters(address, &value, 1);
 8019d7c:	1d79      	adds	r1, r7, #5
 8019d7e:	88fb      	ldrh	r3, [r7, #6]
 8019d80:	2201      	movs	r2, #1
 8019d82:	4618      	mov	r0, r3
 8019d84:	f7ff ffba 	bl	8019cfc <SX126xWriteRegisters>
}
 8019d88:	bf00      	nop
 8019d8a:	3708      	adds	r7, #8
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}

08019d90 <SX126xReadRegisters>:

void SX126xReadRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	4603      	mov	r3, r0
 8019d98:	6039      	str	r1, [r7, #0]
 8019d9a:	80fb      	strh	r3, [r7, #6]
 8019d9c:	4613      	mov	r3, r2
 8019d9e:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8019da0:	f7ff f92c 	bl	8018ffc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8019da4:	2200      	movs	r2, #0
 8019da6:	2110      	movs	r1, #16
 8019da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019dac:	f7ea f906 	bl	8003fbc <HAL_GPIO_WritePin>
	uint8_t buf[4] = {(uint8_t)RADIO_READ_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF), 0x00};
 8019db0:	231d      	movs	r3, #29
 8019db2:	733b      	strb	r3, [r7, #12]
 8019db4:	88fb      	ldrh	r3, [r7, #6]
 8019db6:	0a1b      	lsrs	r3, r3, #8
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	b2db      	uxtb	r3, r3
 8019dbc:	737b      	strb	r3, [r7, #13]
 8019dbe:	88fb      	ldrh	r3, [r7, #6]
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	73bb      	strb	r3, [r7, #14]
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 4, 1000);
 8019dc8:	f107 010c 	add.w	r1, r7, #12
 8019dcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019dd0:	2204      	movs	r2, #4
 8019dd2:	480b      	ldr	r0, [pc, #44]	@ (8019e00 <SX126xReadRegisters+0x70>)
 8019dd4:	f7ec f968 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 8019dd8:	88ba      	ldrh	r2, [r7, #4]
 8019dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019dde:	6839      	ldr	r1, [r7, #0]
 8019de0:	4807      	ldr	r0, [pc, #28]	@ (8019e00 <SX126xReadRegisters+0x70>)
 8019de2:	f7ec fad7 	bl	8006394 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8019de6:	2201      	movs	r2, #1
 8019de8:	2110      	movs	r1, #16
 8019dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019dee:	f7ea f8e5 	bl	8003fbc <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8019df2:	f7ff fecf 	bl	8019b94 <SX126xWaitOnBusy>
}
 8019df6:	bf00      	nop
 8019df8:	3710      	adds	r7, #16
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	20000a10 	.word	0x20000a10

08019e04 <SX126xReadRegister>:

uint8_t SX126xReadRegister(uint16_t address){
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b084      	sub	sp, #16
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	SX126xReadRegisters(address, &data, 1);
 8019e0e:	f107 010f 	add.w	r1, r7, #15
 8019e12:	88fb      	ldrh	r3, [r7, #6]
 8019e14:	2201      	movs	r2, #1
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7ff ffba 	bl	8019d90 <SX126xReadRegisters>
	return data;
 8019e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e1e:	4618      	mov	r0, r3
 8019e20:	3710      	adds	r7, #16
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bd80      	pop	{r7, pc}
	...

08019e28 <SX126xWriteBuffer>:

void SX126xWriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b084      	sub	sp, #16
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	4603      	mov	r3, r0
 8019e30:	6039      	str	r1, [r7, #0]
 8019e32:	71fb      	strb	r3, [r7, #7]
 8019e34:	4613      	mov	r3, r2
 8019e36:	71bb      	strb	r3, [r7, #6]
	SX126xCheckDeviceReady();
 8019e38:	f7ff f8e0 	bl	8018ffc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8019e3c:	2200      	movs	r2, #0
 8019e3e:	2110      	movs	r1, #16
 8019e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019e44:	f7ea f8ba 	bl	8003fbc <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_WRITE_BUFFER, offset};
 8019e48:	230e      	movs	r3, #14
 8019e4a:	733b      	strb	r3, [r7, #12]
 8019e4c:	79fb      	ldrb	r3, [r7, #7]
 8019e4e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8019e50:	f107 010c 	add.w	r1, r7, #12
 8019e54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019e58:	2202      	movs	r2, #2
 8019e5a:	480b      	ldr	r0, [pc, #44]	@ (8019e88 <SX126xWriteBuffer+0x60>)
 8019e5c:	f7ec f924 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 8019e60:	79bb      	ldrb	r3, [r7, #6]
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019e68:	6839      	ldr	r1, [r7, #0]
 8019e6a:	4807      	ldr	r0, [pc, #28]	@ (8019e88 <SX126xWriteBuffer+0x60>)
 8019e6c:	f7ec f91c 	bl	80060a8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8019e70:	2201      	movs	r2, #1
 8019e72:	2110      	movs	r1, #16
 8019e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019e78:	f7ea f8a0 	bl	8003fbc <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8019e7c:	f7ff fe8a 	bl	8019b94 <SX126xWaitOnBusy>
}
 8019e80:	bf00      	nop
 8019e82:	3710      	adds	r7, #16
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}
 8019e88:	20000a10 	.word	0x20000a10

08019e8c <SX126xReadBuffer>:

void SX126xReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b084      	sub	sp, #16
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	4603      	mov	r3, r0
 8019e94:	6039      	str	r1, [r7, #0]
 8019e96:	71fb      	strb	r3, [r7, #7]
 8019e98:	4613      	mov	r3, r2
 8019e9a:	71bb      	strb	r3, [r7, #6]
	SX126xCheckDeviceReady();
 8019e9c:	f7ff f8ae 	bl	8018ffc <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	2110      	movs	r1, #16
 8019ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019ea8:	f7ea f888 	bl	8003fbc <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_READ_BUFFER, offset, 0x00};
 8019eac:	231e      	movs	r3, #30
 8019eae:	733b      	strb	r3, [r7, #12]
 8019eb0:	79fb      	ldrb	r3, [r7, #7]
 8019eb2:	737b      	strb	r3, [r7, #13]
 8019eb4:	2300      	movs	r3, #0
 8019eb6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8019eb8:	f107 010c 	add.w	r1, r7, #12
 8019ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019ec0:	2202      	movs	r2, #2
 8019ec2:	4810      	ldr	r0, [pc, #64]	@ (8019f04 <SX126xReadBuffer+0x78>)
 8019ec4:	f7ec f8f0 	bl	80060a8 <HAL_SPI_Transmit>
	uint8_t dummy = 0;
 8019ec8:	2300      	movs	r3, #0
 8019eca:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Receive(&RADIO_PHY_HSPI, &dummy, 1, 1000);
 8019ecc:	f107 010b 	add.w	r1, r7, #11
 8019ed0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	480b      	ldr	r0, [pc, #44]	@ (8019f04 <SX126xReadBuffer+0x78>)
 8019ed8:	f7ec fa5c 	bl	8006394 <HAL_SPI_Receive>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 8019edc:	79bb      	ldrb	r3, [r7, #6]
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019ee4:	6839      	ldr	r1, [r7, #0]
 8019ee6:	4807      	ldr	r0, [pc, #28]	@ (8019f04 <SX126xReadBuffer+0x78>)
 8019ee8:	f7ec fa54 	bl	8006394 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8019eec:	2201      	movs	r2, #1
 8019eee:	2110      	movs	r1, #16
 8019ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8019ef4:	f7ea f862 	bl	8003fbc <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8019ef8:	f7ff fe4c 	bl	8019b94 <SX126xWaitOnBusy>
}
 8019efc:	bf00      	nop
 8019efe:	3710      	adds	r7, #16
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bd80      	pop	{r7, pc}
 8019f04:	20000a10 	.word	0x20000a10

08019f08 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower(int8_t power){
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b082      	sub	sp, #8
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	4603      	mov	r3, r0
 8019f10:	71fb      	strb	r3, [r7, #7]
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 8019f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019f16:	2102      	movs	r1, #2
 8019f18:	4618      	mov	r0, r3
 8019f1a:	f7ff fb8b 	bl	8019634 <SX126xSetTxParams>
}
 8019f1e:	bf00      	nop
 8019f20:	3708      	adds	r7, #8
 8019f22:	46bd      	mov	sp, r7
 8019f24:	bd80      	pop	{r7, pc}

08019f26 <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect(uint32_t channel){
 8019f26:	b480      	push	{r7}
 8019f28:	b083      	sub	sp, #12
 8019f2a:	af00      	add	r7, sp, #0
 8019f2c:	6078      	str	r0, [r7, #4]
	return SX1262;
 8019f2e:	2302      	movs	r3, #2
}
 8019f30:	4618      	mov	r0, r3
 8019f32:	370c      	adds	r7, #12
 8019f34:	46bd      	mov	sp, r7
 8019f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3a:	4770      	bx	lr

08019f3c <SX126xAntSwOn>:
		SPI_LORA.endTransaction();
		digitalWrite(_hwConfig.PIN_LORA_NSS, HIGH);
	}
}
*/
void SX126xAntSwOn(void){
 8019f3c:	b480      	push	{r7}
 8019f3e:	af00      	add	r7, sp, #0
}
 8019f40:	bf00      	nop
 8019f42:	46bd      	mov	sp, r7
 8019f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f48:	4770      	bx	lr

08019f4a <SX126xAntSwOff>:

void SX126xAntSwOff(void){
 8019f4a:	b480      	push	{r7}
 8019f4c:	af00      	add	r7, sp, #0
}
 8019f4e:	bf00      	nop
 8019f50:	46bd      	mov	sp, r7
 8019f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f56:	4770      	bx	lr

08019f58 <SX126xRXena>:

void SX126xRXena(void){
 8019f58:	b480      	push	{r7}
 8019f5a:	af00      	add	r7, sp, #0
}
 8019f5c:	bf00      	nop
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f64:	4770      	bx	lr

08019f66 <SX126xTXena>:

void SX126xTXena(void){
 8019f66:	b480      	push	{r7}
 8019f68:	af00      	add	r7, sp, #0
}
 8019f6a:	bf00      	nop
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f72:	4770      	bx	lr

08019f74 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019f74:	b480      	push	{r7}
 8019f76:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019f78:	4b0e      	ldr	r3, [pc, #56]	@ (8019fb4 <rand1+0x40>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8019fb8 <rand1+0x44>)
 8019f7e:	fb02 f303 	mul.w	r3, r2, r3
 8019f82:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8019f86:	3339      	adds	r3, #57	@ 0x39
 8019f88:	4a0a      	ldr	r2, [pc, #40]	@ (8019fb4 <rand1+0x40>)
 8019f8a:	6013      	str	r3, [r2, #0]
 8019f8c:	4b09      	ldr	r3, [pc, #36]	@ (8019fb4 <rand1+0x40>)
 8019f8e:	681a      	ldr	r2, [r3, #0]
 8019f90:	2303      	movs	r3, #3
 8019f92:	fba3 1302 	umull	r1, r3, r3, r2
 8019f96:	1ad1      	subs	r1, r2, r3
 8019f98:	0849      	lsrs	r1, r1, #1
 8019f9a:	440b      	add	r3, r1
 8019f9c:	0f99      	lsrs	r1, r3, #30
 8019f9e:	460b      	mov	r3, r1
 8019fa0:	07db      	lsls	r3, r3, #31
 8019fa2:	1a5b      	subs	r3, r3, r1
 8019fa4:	1ad1      	subs	r1, r2, r3
 8019fa6:	460b      	mov	r3, r1
}
 8019fa8:	4618      	mov	r0, r3
 8019faa:	46bd      	mov	sp, r7
 8019fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb0:	4770      	bx	lr
 8019fb2:	bf00      	nop
 8019fb4:	200001c0 	.word	0x200001c0
 8019fb8:	41c64e6d 	.word	0x41c64e6d

08019fbc <srand1>:

void srand1( uint32_t seed )
{
 8019fbc:	b480      	push	{r7}
 8019fbe:	b083      	sub	sp, #12
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
    next = seed;
 8019fc4:	4a04      	ldr	r2, [pc, #16]	@ (8019fd8 <srand1+0x1c>)
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	6013      	str	r3, [r2, #0]
}
 8019fca:	bf00      	nop
 8019fcc:	370c      	adds	r7, #12
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd4:	4770      	bx	lr
 8019fd6:	bf00      	nop
 8019fd8:	200001c0 	.word	0x200001c0

08019fdc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019fdc:	b580      	push	{r7, lr}
 8019fde:	b082      	sub	sp, #8
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	6078      	str	r0, [r7, #4]
 8019fe4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019fe6:	f7ff ffc5 	bl	8019f74 <rand1>
 8019fea:	4602      	mov	r2, r0
 8019fec:	6839      	ldr	r1, [r7, #0]
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	1acb      	subs	r3, r1, r3
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	fb92 f1f3 	sdiv	r1, r2, r3
 8019ff8:	fb01 f303 	mul.w	r3, r1, r3
 8019ffc:	1ad2      	subs	r2, r2, r3
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	4413      	add	r3, r2
}
 801a002:	4618      	mov	r0, r3
 801a004:	3708      	adds	r7, #8
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}

0801a00a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a00a:	b480      	push	{r7}
 801a00c:	b085      	sub	sp, #20
 801a00e:	af00      	add	r7, sp, #0
 801a010:	60f8      	str	r0, [r7, #12]
 801a012:	60b9      	str	r1, [r7, #8]
 801a014:	4613      	mov	r3, r2
 801a016:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801a018:	e007      	b.n	801a02a <memcpy1+0x20>
    {
        *dst++ = *src++;
 801a01a:	68ba      	ldr	r2, [r7, #8]
 801a01c:	1c53      	adds	r3, r2, #1
 801a01e:	60bb      	str	r3, [r7, #8]
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	1c59      	adds	r1, r3, #1
 801a024:	60f9      	str	r1, [r7, #12]
 801a026:	7812      	ldrb	r2, [r2, #0]
 801a028:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a02a:	88fb      	ldrh	r3, [r7, #6]
 801a02c:	1e5a      	subs	r2, r3, #1
 801a02e:	80fa      	strh	r2, [r7, #6]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d1f2      	bne.n	801a01a <memcpy1+0x10>
    }
}
 801a034:	bf00      	nop
 801a036:	bf00      	nop
 801a038:	3714      	adds	r7, #20
 801a03a:	46bd      	mov	sp, r7
 801a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a040:	4770      	bx	lr

0801a042 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801a042:	b480      	push	{r7}
 801a044:	b085      	sub	sp, #20
 801a046:	af00      	add	r7, sp, #0
 801a048:	60f8      	str	r0, [r7, #12]
 801a04a:	60b9      	str	r1, [r7, #8]
 801a04c:	4613      	mov	r3, r2
 801a04e:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801a050:	88fb      	ldrh	r3, [r7, #6]
 801a052:	3b01      	subs	r3, #1
 801a054:	68fa      	ldr	r2, [r7, #12]
 801a056:	4413      	add	r3, r2
 801a058:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801a05a:	e007      	b.n	801a06c <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801a05c:	68ba      	ldr	r2, [r7, #8]
 801a05e:	1c53      	adds	r3, r2, #1
 801a060:	60bb      	str	r3, [r7, #8]
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	1e59      	subs	r1, r3, #1
 801a066:	60f9      	str	r1, [r7, #12]
 801a068:	7812      	ldrb	r2, [r2, #0]
 801a06a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a06c:	88fb      	ldrh	r3, [r7, #6]
 801a06e:	1e5a      	subs	r2, r3, #1
 801a070:	80fa      	strh	r2, [r7, #6]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d1f2      	bne.n	801a05c <memcpyr+0x1a>
    }
}
 801a076:	bf00      	nop
 801a078:	bf00      	nop
 801a07a:	3714      	adds	r7, #20
 801a07c:	46bd      	mov	sp, r7
 801a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a082:	4770      	bx	lr

0801a084 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801a084:	b480      	push	{r7}
 801a086:	b083      	sub	sp, #12
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
 801a08c:	460b      	mov	r3, r1
 801a08e:	70fb      	strb	r3, [r7, #3]
 801a090:	4613      	mov	r3, r2
 801a092:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801a094:	e004      	b.n	801a0a0 <memset1+0x1c>
    {
        *dst++ = value;
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	1c5a      	adds	r2, r3, #1
 801a09a:	607a      	str	r2, [r7, #4]
 801a09c:	78fa      	ldrb	r2, [r7, #3]
 801a09e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801a0a0:	883b      	ldrh	r3, [r7, #0]
 801a0a2:	1e5a      	subs	r2, r3, #1
 801a0a4:	803a      	strh	r2, [r7, #0]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d1f5      	bne.n	801a096 <memset1+0x12>
    }
}
 801a0aa:	bf00      	nop
 801a0ac:	bf00      	nop
 801a0ae:	370c      	adds	r7, #12
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b6:	4770      	bx	lr

0801a0b8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801a0b8:	b480      	push	{r7}
 801a0ba:	b085      	sub	sp, #20
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	460b      	mov	r3, r1
 801a0c2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801a0c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a0c8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d101      	bne.n	801a0d4 <Crc32+0x1c>
    {
        return 0;
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	e026      	b.n	801a122 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	817b      	strh	r3, [r7, #10]
 801a0d8:	e01d      	b.n	801a116 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801a0da:	897b      	ldrh	r3, [r7, #10]
 801a0dc:	687a      	ldr	r2, [r7, #4]
 801a0de:	4413      	add	r3, r2
 801a0e0:	781b      	ldrb	r3, [r3, #0]
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	4053      	eors	r3, r2
 801a0e8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	813b      	strh	r3, [r7, #8]
 801a0ee:	e00c      	b.n	801a10a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	085a      	lsrs	r2, r3, #1
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	f003 0301 	and.w	r3, r3, #1
 801a0fa:	425b      	negs	r3, r3
 801a0fc:	490c      	ldr	r1, [pc, #48]	@ (801a130 <Crc32+0x78>)
 801a0fe:	400b      	ands	r3, r1
 801a100:	4053      	eors	r3, r2
 801a102:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801a104:	893b      	ldrh	r3, [r7, #8]
 801a106:	3301      	adds	r3, #1
 801a108:	813b      	strh	r3, [r7, #8]
 801a10a:	893b      	ldrh	r3, [r7, #8]
 801a10c:	2b07      	cmp	r3, #7
 801a10e:	d9ef      	bls.n	801a0f0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801a110:	897b      	ldrh	r3, [r7, #10]
 801a112:	3301      	adds	r3, #1
 801a114:	817b      	strh	r3, [r7, #10]
 801a116:	897a      	ldrh	r2, [r7, #10]
 801a118:	887b      	ldrh	r3, [r7, #2]
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d3dd      	bcc.n	801a0da <Crc32+0x22>
        }
    }

    return ~crc;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	43db      	mvns	r3, r3
}
 801a122:	4618      	mov	r0, r3
 801a124:	3714      	adds	r7, #20
 801a126:	46bd      	mov	sp, r7
 801a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12c:	4770      	bx	lr
 801a12e:	bf00      	nop
 801a130:	edb88320 	.word	0xedb88320

0801a134 <log_get_tagprop>:

__attribute__((weak)) uint32_t log_port_get_systime(void){
	return 0;
}

static log_tagprop_t *log_get_tagprop(const char *tag){
 801a134:	b580      	push	{r7, lr}
 801a136:	b084      	sub	sp, #16
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<_num_tagprop; i++){
 801a13c:	2300      	movs	r3, #0
 801a13e:	73fb      	strb	r3, [r7, #15]
 801a140:	e016      	b.n	801a170 <log_get_tagprop+0x3c>
		if(strcmp(_tagprop[i].tag, tag) == 0)
 801a142:	7bfb      	ldrb	r3, [r7, #15]
 801a144:	2216      	movs	r2, #22
 801a146:	fb02 f303 	mul.w	r3, r2, r3
 801a14a:	4a0e      	ldr	r2, [pc, #56]	@ (801a184 <log_get_tagprop+0x50>)
 801a14c:	4413      	add	r3, r2
 801a14e:	6879      	ldr	r1, [r7, #4]
 801a150:	4618      	mov	r0, r3
 801a152:	f7e6 f83d 	bl	80001d0 <strcmp>
 801a156:	4603      	mov	r3, r0
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d106      	bne.n	801a16a <log_get_tagprop+0x36>
			return &_tagprop[i];
 801a15c:	7bfb      	ldrb	r3, [r7, #15]
 801a15e:	2216      	movs	r2, #22
 801a160:	fb02 f303 	mul.w	r3, r2, r3
 801a164:	4a07      	ldr	r2, [pc, #28]	@ (801a184 <log_get_tagprop+0x50>)
 801a166:	4413      	add	r3, r2
 801a168:	e008      	b.n	801a17c <log_get_tagprop+0x48>
	for(uint8_t i=0; i<_num_tagprop; i++){
 801a16a:	7bfb      	ldrb	r3, [r7, #15]
 801a16c:	3301      	adds	r3, #1
 801a16e:	73fb      	strb	r3, [r7, #15]
 801a170:	4b05      	ldr	r3, [pc, #20]	@ (801a188 <log_get_tagprop+0x54>)
 801a172:	781b      	ldrb	r3, [r3, #0]
 801a174:	7bfa      	ldrb	r2, [r7, #15]
 801a176:	429a      	cmp	r2, r3
 801a178:	d3e3      	bcc.n	801a142 <log_get_tagprop+0xe>
	}

	return NULL;
 801a17a:	2300      	movs	r3, #0
}
 801a17c:	4618      	mov	r0, r3
 801a17e:	3710      	adds	r7, #16
 801a180:	46bd      	mov	sp, r7
 801a182:	bd80      	pop	{r7, pc}
 801a184:	2000cb00 	.word	0x2000cb00
 801a188:	2000ccb8 	.word	0x2000ccb8

0801a18c <_log>:

	if(idx > LOG_NUM_PROP_SET) _num_tagprop++;
}


static inline void _log(log_level_t level, log_stylecolor_t style, bool prevline, const char header, const char *tag, const char *format, va_list args){
 801a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a18e:	b08f      	sub	sp, #60	@ 0x3c
 801a190:	af06      	add	r7, sp, #24
 801a192:	4604      	mov	r4, r0
 801a194:	4608      	mov	r0, r1
 801a196:	4611      	mov	r1, r2
 801a198:	461a      	mov	r2, r3
 801a19a:	4623      	mov	r3, r4
 801a19c:	71fb      	strb	r3, [r7, #7]
 801a19e:	4603      	mov	r3, r0
 801a1a0:	71bb      	strb	r3, [r7, #6]
 801a1a2:	460b      	mov	r3, r1
 801a1a4:	717b      	strb	r3, [r7, #5]
 801a1a6:	4613      	mov	r3, r2
 801a1a8:	713b      	strb	r3, [r7, #4]
	uint32_t time = log_port_get_systime();
 801a1aa:	f7e7 f913 	bl	80013d4 <log_port_get_systime>
 801a1ae:	61b8      	str	r0, [r7, #24]
	char *arg_buffer = NULL;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	613b      	str	r3, [r7, #16]
	char *out_buffer = NULL;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	60fb      	str	r3, [r7, #12]
	log_stylecolor_t log_style = style;
 801a1b8:	79bb      	ldrb	r3, [r7, #6]
 801a1ba:	77fb      	strb	r3, [r7, #31]

	log_tagprop_t *tagprop = log_get_tagprop(tag);
 801a1bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801a1be:	f7ff ffb9 	bl	801a134 <log_get_tagprop>
 801a1c2:	6178      	str	r0, [r7, #20]
	if(tagprop != NULL){
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d016      	beq.n	801a1f8 <_log+0x6c>
		if(!((uint8_t)level & tagprop->level) && _enable)
 801a1ca:	697b      	ldr	r3, [r7, #20]
 801a1cc:	7d1a      	ldrb	r2, [r3, #20]
 801a1ce:	79fb      	ldrb	r3, [r7, #7]
 801a1d0:	4013      	ands	r3, r2
 801a1d2:	b2db      	uxtb	r3, r3
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d103      	bne.n	801a1e0 <_log+0x54>
 801a1d8:	4b38      	ldr	r3, [pc, #224]	@ (801a2bc <_log+0x130>)
 801a1da:	781b      	ldrb	r3, [r3, #0]
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d165      	bne.n	801a2ac <_log+0x120>
			return;
		log_style = (log_stylecolor_t)(32 - __builtin_clz(level) + tagprop->style*8);
 801a1e0:	697b      	ldr	r3, [r7, #20]
 801a1e2:	7d5b      	ldrb	r3, [r3, #21]
 801a1e4:	00db      	lsls	r3, r3, #3
 801a1e6:	b2da      	uxtb	r2, r3
 801a1e8:	79fb      	ldrb	r3, [r7, #7]
 801a1ea:	fab3 f383 	clz	r3, r3
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	1ad3      	subs	r3, r2, r3
 801a1f2:	b2db      	uxtb	r3, r3
 801a1f4:	3320      	adds	r3, #32
 801a1f6:	77fb      	strb	r3, [r7, #31]
	}

	if(vasprintf(&arg_buffer, format, args) == -1)
 801a1f8:	f107 0310 	add.w	r3, r7, #16
 801a1fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a1fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a200:	4618      	mov	r0, r3
 801a202:	f001 fc9b 	bl	801bb3c <vasprintf>
 801a206:	4603      	mov	r3, r0
 801a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a20c:	d050      	beq.n	801a2b0 <_log+0x124>
		return;
	if(asprintf(&out_buffer, "%s%s%c [%"PRIu32"] %s: %s%s%s", (!prevline)? "\r\n":"\033[2K\r", COLOR_START[log_style], header, time, tag, arg_buffer, COLOR_END,
 801a20e:	797b      	ldrb	r3, [r7, #5]
 801a210:	f083 0301 	eor.w	r3, r3, #1
 801a214:	b2db      	uxtb	r3, r3
 801a216:	2b00      	cmp	r3, #0
 801a218:	d001      	beq.n	801a21e <_log+0x92>
 801a21a:	4d29      	ldr	r5, [pc, #164]	@ (801a2c0 <_log+0x134>)
 801a21c:	e000      	b.n	801a220 <_log+0x94>
 801a21e:	4d29      	ldr	r5, [pc, #164]	@ (801a2c4 <_log+0x138>)
 801a220:	7ffb      	ldrb	r3, [r7, #31]
 801a222:	4a29      	ldr	r2, [pc, #164]	@ (801a2c8 <_log+0x13c>)
 801a224:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801a228:	793b      	ldrb	r3, [r7, #4]
 801a22a:	693a      	ldr	r2, [r7, #16]
 801a22c:	4927      	ldr	r1, [pc, #156]	@ (801a2cc <_log+0x140>)
 801a22e:	6809      	ldr	r1, [r1, #0]
			(_prev_is_prevline == true && prevline == false)? "\r\n":"") == -1)
 801a230:	4827      	ldr	r0, [pc, #156]	@ (801a2d0 <_log+0x144>)
 801a232:	7800      	ldrb	r0, [r0, #0]
	if(asprintf(&out_buffer, "%s%s%c [%"PRIu32"] %s: %s%s%s", (!prevline)? "\r\n":"\033[2K\r", COLOR_START[log_style], header, time, tag, arg_buffer, COLOR_END,
 801a234:	2800      	cmp	r0, #0
 801a236:	d007      	beq.n	801a248 <_log+0xbc>
			(_prev_is_prevline == true && prevline == false)? "\r\n":"") == -1)
 801a238:	7978      	ldrb	r0, [r7, #5]
 801a23a:	f080 0001 	eor.w	r0, r0, #1
 801a23e:	b2c0      	uxtb	r0, r0
 801a240:	2800      	cmp	r0, #0
 801a242:	d001      	beq.n	801a248 <_log+0xbc>
	if(asprintf(&out_buffer, "%s%s%c [%"PRIu32"] %s: %s%s%s", (!prevline)? "\r\n":"\033[2K\r", COLOR_START[log_style], header, time, tag, arg_buffer, COLOR_END,
 801a244:	481e      	ldr	r0, [pc, #120]	@ (801a2c0 <_log+0x134>)
 801a246:	e000      	b.n	801a24a <_log+0xbe>
 801a248:	4822      	ldr	r0, [pc, #136]	@ (801a2d4 <_log+0x148>)
 801a24a:	f107 040c 	add.w	r4, r7, #12
 801a24e:	9005      	str	r0, [sp, #20]
 801a250:	9104      	str	r1, [sp, #16]
 801a252:	9203      	str	r2, [sp, #12]
 801a254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a256:	9202      	str	r2, [sp, #8]
 801a258:	69ba      	ldr	r2, [r7, #24]
 801a25a:	9201      	str	r2, [sp, #4]
 801a25c:	9300      	str	r3, [sp, #0]
 801a25e:	4633      	mov	r3, r6
 801a260:	462a      	mov	r2, r5
 801a262:	491d      	ldr	r1, [pc, #116]	@ (801a2d8 <_log+0x14c>)
 801a264:	4620      	mov	r0, r4
 801a266:	f001 fc2d 	bl	801bac4 <asprintf>
 801a26a:	4603      	mov	r3, r0
 801a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a270:	d020      	beq.n	801a2b4 <_log+0x128>
		return;
	log_port_flush_string(out_buffer, strlen(out_buffer));
 801a272:	68fc      	ldr	r4, [r7, #12]
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	4618      	mov	r0, r3
 801a278:	f7e5 ffb4 	bl	80001e4 <strlen>
 801a27c:	4603      	mov	r3, r0
 801a27e:	b29b      	uxth	r3, r3
 801a280:	4619      	mov	r1, r3
 801a282:	4620      	mov	r0, r4
 801a284:	f7e7 f892 	bl	80013ac <log_port_flush_string>
	_prev_is_prevline = prevline;
 801a288:	4a11      	ldr	r2, [pc, #68]	@ (801a2d0 <_log+0x144>)
 801a28a:	797b      	ldrb	r3, [r7, #5]
 801a28c:	7013      	strb	r3, [r2, #0]

	if(arg_buffer) free(arg_buffer);
 801a28e:	693b      	ldr	r3, [r7, #16]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d003      	beq.n	801a29c <_log+0x110>
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	4618      	mov	r0, r3
 801a298:	f000 fffc 	bl	801b294 <free>
	if(out_buffer) free(out_buffer);
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	d009      	beq.n	801a2b6 <_log+0x12a>
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	f000 fff5 	bl	801b294 <free>
 801a2aa:	e004      	b.n	801a2b6 <_log+0x12a>
			return;
 801a2ac:	bf00      	nop
 801a2ae:	e002      	b.n	801a2b6 <_log+0x12a>
		return;
 801a2b0:	bf00      	nop
 801a2b2:	e000      	b.n	801a2b6 <_log+0x12a>
		return;
 801a2b4:	bf00      	nop
}
 801a2b6:	3724      	adds	r7, #36	@ 0x24
 801a2b8:	46bd      	mov	sp, r7
 801a2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2bc:	200001c4 	.word	0x200001c4
 801a2c0:	080227f4 	.word	0x080227f4
 801a2c4:	080227f8 	.word	0x080227f8
 801a2c8:	200001d0 	.word	0x200001d0
 801a2cc:	200001cc 	.word	0x200001cc
 801a2d0:	2000ccb9 	.word	0x2000ccb9
 801a2d4:	08022800 	.word	0x08022800
 801a2d8:	08022804 	.word	0x08022804

0801a2dc <LOG_LEVEL_ERROR>:

void LOG_LEVEL_ERROR(const char *tag, bool prevline, const char *format, ...){
 801a2dc:	b40c      	push	{r2, r3}
 801a2de:	b580      	push	{r7, lr}
 801a2e0:	b088      	sub	sp, #32
 801a2e2:	af04      	add	r7, sp, #16
 801a2e4:	6078      	str	r0, [r7, #4]
 801a2e6:	460b      	mov	r3, r1
 801a2e8:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 801a2ea:	f107 031c 	add.w	r3, r7, #28
 801a2ee:	60fb      	str	r3, [r7, #12]
	_log(LOG_ERROR, _default_loge, prevline, 'E', tag, format, args);
 801a2f0:	4b09      	ldr	r3, [pc, #36]	@ (801a318 <LOG_LEVEL_ERROR+0x3c>)
 801a2f2:	7819      	ldrb	r1, [r3, #0]
 801a2f4:	78fa      	ldrb	r2, [r7, #3]
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	9302      	str	r3, [sp, #8]
 801a2fa:	69bb      	ldr	r3, [r7, #24]
 801a2fc:	9301      	str	r3, [sp, #4]
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	9300      	str	r3, [sp, #0]
 801a302:	2345      	movs	r3, #69	@ 0x45
 801a304:	2001      	movs	r0, #1
 801a306:	f7ff ff41 	bl	801a18c <_log>
	va_end(args);
}
 801a30a:	bf00      	nop
 801a30c:	3710      	adds	r7, #16
 801a30e:	46bd      	mov	sp, r7
 801a310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a314:	b002      	add	sp, #8
 801a316:	4770      	bx	lr
 801a318:	200001c5 	.word	0x200001c5

0801a31c <LOG_LEVEL_WARNING>:
	va_start(args, format);
	_log(LOG_ASSERT, _default_loga, prevline, 'A', tag, format, args);
	va_end(args);
}

void LOG_LEVEL_WARNING(const char *tag, bool prevline, const char *format, ...){
 801a31c:	b40c      	push	{r2, r3}
 801a31e:	b580      	push	{r7, lr}
 801a320:	b088      	sub	sp, #32
 801a322:	af04      	add	r7, sp, #16
 801a324:	6078      	str	r0, [r7, #4]
 801a326:	460b      	mov	r3, r1
 801a328:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 801a32a:	f107 031c 	add.w	r3, r7, #28
 801a32e:	60fb      	str	r3, [r7, #12]
	_log(LOG_WARNING, _default_logw, prevline, 'W', tag, format, args);
 801a330:	4b09      	ldr	r3, [pc, #36]	@ (801a358 <LOG_LEVEL_WARNING+0x3c>)
 801a332:	7819      	ldrb	r1, [r3, #0]
 801a334:	78fa      	ldrb	r2, [r7, #3]
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	9302      	str	r3, [sp, #8]
 801a33a:	69bb      	ldr	r3, [r7, #24]
 801a33c:	9301      	str	r3, [sp, #4]
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	9300      	str	r3, [sp, #0]
 801a342:	2357      	movs	r3, #87	@ 0x57
 801a344:	2004      	movs	r0, #4
 801a346:	f7ff ff21 	bl	801a18c <_log>
	va_end(args);
}
 801a34a:	bf00      	nop
 801a34c:	3710      	adds	r7, #16
 801a34e:	46bd      	mov	sp, r7
 801a350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a354:	b002      	add	sp, #8
 801a356:	4770      	bx	lr
 801a358:	200001c6 	.word	0x200001c6

0801a35c <LOG_LEVEL_INFO>:

void LOG_LEVEL_INFO(const char *tag, bool prevline, const char *format, ...){
 801a35c:	b40c      	push	{r2, r3}
 801a35e:	b580      	push	{r7, lr}
 801a360:	b088      	sub	sp, #32
 801a362:	af04      	add	r7, sp, #16
 801a364:	6078      	str	r0, [r7, #4]
 801a366:	460b      	mov	r3, r1
 801a368:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 801a36a:	f107 031c 	add.w	r3, r7, #28
 801a36e:	60fb      	str	r3, [r7, #12]
	_log(LOG_INFO, _default_logi, prevline, 'I', tag, format, args);
 801a370:	4b09      	ldr	r3, [pc, #36]	@ (801a398 <LOG_LEVEL_INFO+0x3c>)
 801a372:	7819      	ldrb	r1, [r3, #0]
 801a374:	78fa      	ldrb	r2, [r7, #3]
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	9302      	str	r3, [sp, #8]
 801a37a:	69bb      	ldr	r3, [r7, #24]
 801a37c:	9301      	str	r3, [sp, #4]
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	9300      	str	r3, [sp, #0]
 801a382:	2349      	movs	r3, #73	@ 0x49
 801a384:	2008      	movs	r0, #8
 801a386:	f7ff ff01 	bl	801a18c <_log>
	va_end(args);
}
 801a38a:	bf00      	nop
 801a38c:	3710      	adds	r7, #16
 801a38e:	46bd      	mov	sp, r7
 801a390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a394:	b002      	add	sp, #8
 801a396:	4770      	bx	lr
 801a398:	200001c7 	.word	0x200001c7

0801a39c <LOG_LEVEL_DEBUG>:

void LOG_LEVEL_DEBUG(const char *tag, bool prevline, const char *format, ...){
 801a39c:	b40c      	push	{r2, r3}
 801a39e:	b580      	push	{r7, lr}
 801a3a0:	b088      	sub	sp, #32
 801a3a2:	af04      	add	r7, sp, #16
 801a3a4:	6078      	str	r0, [r7, #4]
 801a3a6:	460b      	mov	r3, r1
 801a3a8:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 801a3aa:	f107 031c 	add.w	r3, r7, #28
 801a3ae:	60fb      	str	r3, [r7, #12]
	_log(LOG_DEBUG, _default_logd, prevline, 'D', tag, format, args);
 801a3b0:	4b09      	ldr	r3, [pc, #36]	@ (801a3d8 <LOG_LEVEL_DEBUG+0x3c>)
 801a3b2:	7819      	ldrb	r1, [r3, #0]
 801a3b4:	78fa      	ldrb	r2, [r7, #3]
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	9302      	str	r3, [sp, #8]
 801a3ba:	69bb      	ldr	r3, [r7, #24]
 801a3bc:	9301      	str	r3, [sp, #4]
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	9300      	str	r3, [sp, #0]
 801a3c2:	2344      	movs	r3, #68	@ 0x44
 801a3c4:	2010      	movs	r0, #16
 801a3c6:	f7ff fee1 	bl	801a18c <_log>
	va_end(args);
}
 801a3ca:	bf00      	nop
 801a3cc:	3710      	adds	r7, #16
 801a3ce:	46bd      	mov	sp, r7
 801a3d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a3d4:	b002      	add	sp, #8
 801a3d6:	4770      	bx	lr
 801a3d8:	200001c8 	.word	0x200001c8

0801a3dc <LOG_LEVEL_VERBOSE>:

void LOG_LEVEL_VERBOSE(const char *tag, bool prevline, const char *format, ...){
 801a3dc:	b40c      	push	{r2, r3}
 801a3de:	b580      	push	{r7, lr}
 801a3e0:	b088      	sub	sp, #32
 801a3e2:	af04      	add	r7, sp, #16
 801a3e4:	6078      	str	r0, [r7, #4]
 801a3e6:	460b      	mov	r3, r1
 801a3e8:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 801a3ea:	f107 031c 	add.w	r3, r7, #28
 801a3ee:	60fb      	str	r3, [r7, #12]
	_log(LOG_VERBOSE, _default_logv, prevline, 'V', tag, format, args);
 801a3f0:	4b09      	ldr	r3, [pc, #36]	@ (801a418 <LOG_LEVEL_VERBOSE+0x3c>)
 801a3f2:	7819      	ldrb	r1, [r3, #0]
 801a3f4:	78fa      	ldrb	r2, [r7, #3]
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	9302      	str	r3, [sp, #8]
 801a3fa:	69bb      	ldr	r3, [r7, #24]
 801a3fc:	9301      	str	r3, [sp, #4]
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	9300      	str	r3, [sp, #0]
 801a402:	2356      	movs	r3, #86	@ 0x56
 801a404:	2020      	movs	r0, #32
 801a406:	f7ff fec1 	bl	801a18c <_log>
	va_end(args);
}
 801a40a:	bf00      	nop
 801a40c:	3710      	adds	r7, #16
 801a40e:	46bd      	mov	sp, r7
 801a410:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a414:	b002      	add	sp, #8
 801a416:	4770      	bx	lr
 801a418:	200001c9 	.word	0x200001c9

0801a41c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a41c:	b082      	sub	sp, #8
 801a41e:	b480      	push	{r7}
 801a420:	b087      	sub	sp, #28
 801a422:	af00      	add	r7, sp, #0
 801a424:	60f8      	str	r0, [r7, #12]
 801a426:	1d38      	adds	r0, r7, #4
 801a428:	e880 0006 	stmia.w	r0, {r1, r2}
 801a42c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a42e:	2300      	movs	r3, #0
 801a430:	613b      	str	r3, [r7, #16]
 801a432:	2300      	movs	r3, #0
 801a434:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a436:	687a      	ldr	r2, [r7, #4]
 801a438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a43a:	4413      	add	r3, r2
 801a43c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a43e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a442:	b29a      	uxth	r2, r3
 801a444:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a448:	b29b      	uxth	r3, r3
 801a44a:	4413      	add	r3, r2
 801a44c:	b29b      	uxth	r3, r3
 801a44e:	b21b      	sxth	r3, r3
 801a450:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a452:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a456:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a45a:	db0a      	blt.n	801a472 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a45c:	693b      	ldr	r3, [r7, #16]
 801a45e:	3301      	adds	r3, #1
 801a460:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a462:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a466:	b29b      	uxth	r3, r3
 801a468:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a46c:	b29b      	uxth	r3, r3
 801a46e:	b21b      	sxth	r3, r3
 801a470:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	461a      	mov	r2, r3
 801a476:	f107 0310 	add.w	r3, r7, #16
 801a47a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a47e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a482:	68f8      	ldr	r0, [r7, #12]
 801a484:	371c      	adds	r7, #28
 801a486:	46bd      	mov	sp, r7
 801a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a48c:	b002      	add	sp, #8
 801a48e:	4770      	bx	lr

0801a490 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a490:	b082      	sub	sp, #8
 801a492:	b480      	push	{r7}
 801a494:	b087      	sub	sp, #28
 801a496:	af00      	add	r7, sp, #0
 801a498:	60f8      	str	r0, [r7, #12]
 801a49a:	1d38      	adds	r0, r7, #4
 801a49c:	e880 0006 	stmia.w	r0, {r1, r2}
 801a4a0:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	613b      	str	r3, [r7, #16]
 801a4a6:	2300      	movs	r3, #0
 801a4a8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a4aa:	687a      	ldr	r2, [r7, #4]
 801a4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ae:	1ad3      	subs	r3, r2, r3
 801a4b0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a4b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a4b6:	b29a      	uxth	r2, r3
 801a4b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a4bc:	b29b      	uxth	r3, r3
 801a4be:	1ad3      	subs	r3, r2, r3
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	b21b      	sxth	r3, r3
 801a4c4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a4c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	da0a      	bge.n	801a4e4 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a4ce:	693b      	ldr	r3, [r7, #16]
 801a4d0:	3b01      	subs	r3, #1
 801a4d2:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a4d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a4d8:	b29b      	uxth	r3, r3
 801a4da:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a4de:	b29b      	uxth	r3, r3
 801a4e0:	b21b      	sxth	r3, r3
 801a4e2:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	461a      	mov	r2, r3
 801a4e8:	f107 0310 	add.w	r3, r7, #16
 801a4ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a4f0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a4f4:	68f8      	ldr	r0, [r7, #12]
 801a4f6:	371c      	adds	r7, #28
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4fe:	b002      	add	sp, #8
 801a500:	4770      	bx	lr
	...

0801a504 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b088      	sub	sp, #32
 801a508:	af02      	add	r7, sp, #8
 801a50a:	463b      	mov	r3, r7
 801a50c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a510:	2300      	movs	r3, #0
 801a512:	60bb      	str	r3, [r7, #8]
 801a514:	2300      	movs	r3, #0
 801a516:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a518:	4b11      	ldr	r3, [pc, #68]	@ (801a560 <SysTimeSet+0x5c>)
 801a51a:	691b      	ldr	r3, [r3, #16]
 801a51c:	f107 0208 	add.w	r2, r7, #8
 801a520:	3204      	adds	r2, #4
 801a522:	4610      	mov	r0, r2
 801a524:	4798      	blx	r3
 801a526:	4602      	mov	r2, r0
 801a528:	460b      	mov	r3, r1
 801a52a:	4613      	mov	r3, r2
 801a52c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a52e:	f107 0010 	add.w	r0, r7, #16
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	9300      	str	r3, [sp, #0]
 801a536:	68bb      	ldr	r3, [r7, #8]
 801a538:	463a      	mov	r2, r7
 801a53a:	ca06      	ldmia	r2, {r1, r2}
 801a53c:	f7ff ffa8 	bl	801a490 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a540:	4b07      	ldr	r3, [pc, #28]	@ (801a560 <SysTimeSet+0x5c>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	693a      	ldr	r2, [r7, #16]
 801a546:	4610      	mov	r0, r2
 801a548:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a54a:	4b05      	ldr	r3, [pc, #20]	@ (801a560 <SysTimeSet+0x5c>)
 801a54c:	689b      	ldr	r3, [r3, #8]
 801a54e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a552:	4610      	mov	r0, r2
 801a554:	4798      	blx	r3
}
 801a556:	bf00      	nop
 801a558:	3718      	adds	r7, #24
 801a55a:	46bd      	mov	sp, r7
 801a55c:	bd80      	pop	{r7, pc}
 801a55e:	bf00      	nop
 801a560:	08022ddc 	.word	0x08022ddc

0801a564 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b08a      	sub	sp, #40	@ 0x28
 801a568:	af02      	add	r7, sp, #8
 801a56a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a56c:	2300      	movs	r3, #0
 801a56e:	61bb      	str	r3, [r7, #24]
 801a570:	2300      	movs	r3, #0
 801a572:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a574:	2300      	movs	r3, #0
 801a576:	613b      	str	r3, [r7, #16]
 801a578:	2300      	movs	r3, #0
 801a57a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a57c:	4b15      	ldr	r3, [pc, #84]	@ (801a5d4 <SysTimeGet+0x70>)
 801a57e:	691b      	ldr	r3, [r3, #16]
 801a580:	f107 0218 	add.w	r2, r7, #24
 801a584:	3204      	adds	r2, #4
 801a586:	4610      	mov	r0, r2
 801a588:	4798      	blx	r3
 801a58a:	4602      	mov	r2, r0
 801a58c:	460b      	mov	r3, r1
 801a58e:	4613      	mov	r3, r2
 801a590:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a592:	4b10      	ldr	r3, [pc, #64]	@ (801a5d4 <SysTimeGet+0x70>)
 801a594:	68db      	ldr	r3, [r3, #12]
 801a596:	4798      	blx	r3
 801a598:	4603      	mov	r3, r0
 801a59a:	b21b      	sxth	r3, r3
 801a59c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a59e:	4b0d      	ldr	r3, [pc, #52]	@ (801a5d4 <SysTimeGet+0x70>)
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	4798      	blx	r3
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a5a8:	f107 0010 	add.w	r0, r7, #16
 801a5ac:	69fb      	ldr	r3, [r7, #28]
 801a5ae:	9300      	str	r3, [sp, #0]
 801a5b0:	69bb      	ldr	r3, [r7, #24]
 801a5b2:	f107 0208 	add.w	r2, r7, #8
 801a5b6:	ca06      	ldmia	r2, {r1, r2}
 801a5b8:	f7ff ff30 	bl	801a41c <SysTimeAdd>

  return sysTime;
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	461a      	mov	r2, r3
 801a5c0:	f107 0310 	add.w	r3, r7, #16
 801a5c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a5c8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a5cc:	6878      	ldr	r0, [r7, #4]
 801a5ce:	3720      	adds	r7, #32
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	bd80      	pop	{r7, pc}
 801a5d4:	08022ddc 	.word	0x08022ddc

0801a5d8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	60bb      	str	r3, [r7, #8]
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a5e8:	4b0b      	ldr	r3, [pc, #44]	@ (801a618 <SysTimeGetMcuTime+0x40>)
 801a5ea:	691b      	ldr	r3, [r3, #16]
 801a5ec:	f107 0208 	add.w	r2, r7, #8
 801a5f0:	3204      	adds	r2, #4
 801a5f2:	4610      	mov	r0, r2
 801a5f4:	4798      	blx	r3
 801a5f6:	4602      	mov	r2, r0
 801a5f8:	460b      	mov	r3, r1
 801a5fa:	4613      	mov	r3, r2
 801a5fc:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	461a      	mov	r2, r3
 801a602:	f107 0308 	add.w	r3, r7, #8
 801a606:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a60a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a60e:	6878      	ldr	r0, [r7, #4]
 801a610:	3710      	adds	r7, #16
 801a612:	46bd      	mov	sp, r7
 801a614:	bd80      	pop	{r7, pc}
 801a616:	bf00      	nop
 801a618:	08022ddc 	.word	0x08022ddc

0801a61c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a61c:	b580      	push	{r7, lr}
 801a61e:	b088      	sub	sp, #32
 801a620:	af02      	add	r7, sp, #8
 801a622:	463b      	mov	r3, r7
 801a624:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a628:	4b0f      	ldr	r3, [pc, #60]	@ (801a668 <SysTimeToMs+0x4c>)
 801a62a:	68db      	ldr	r3, [r3, #12]
 801a62c:	4798      	blx	r3
 801a62e:	4603      	mov	r3, r0
 801a630:	b21b      	sxth	r3, r3
 801a632:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a634:	4b0c      	ldr	r3, [pc, #48]	@ (801a668 <SysTimeToMs+0x4c>)
 801a636:	685b      	ldr	r3, [r3, #4]
 801a638:	4798      	blx	r3
 801a63a:	4603      	mov	r3, r0
 801a63c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a63e:	f107 0008 	add.w	r0, r7, #8
 801a642:	697b      	ldr	r3, [r7, #20]
 801a644:	9300      	str	r3, [sp, #0]
 801a646:	693b      	ldr	r3, [r7, #16]
 801a648:	463a      	mov	r2, r7
 801a64a:	ca06      	ldmia	r2, {r1, r2}
 801a64c:	f7ff ff20 	bl	801a490 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a650:	68bb      	ldr	r3, [r7, #8]
 801a652:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a656:	fb02 f303 	mul.w	r3, r2, r3
 801a65a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a65e:	4413      	add	r3, r2
}
 801a660:	4618      	mov	r0, r3
 801a662:	3718      	adds	r7, #24
 801a664:	46bd      	mov	sp, r7
 801a666:	bd80      	pop	{r7, pc}
 801a668:	08022ddc 	.word	0x08022ddc

0801a66c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b08a      	sub	sp, #40	@ 0x28
 801a670:	af02      	add	r7, sp, #8
 801a672:	6078      	str	r0, [r7, #4]
 801a674:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a676:	683b      	ldr	r3, [r7, #0]
 801a678:	4a19      	ldr	r2, [pc, #100]	@ (801a6e0 <SysTimeFromMs+0x74>)
 801a67a:	fba2 2303 	umull	r2, r3, r2, r3
 801a67e:	099b      	lsrs	r3, r3, #6
 801a680:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a682:	69fb      	ldr	r3, [r7, #28]
 801a684:	617b      	str	r3, [r7, #20]
 801a686:	683b      	ldr	r3, [r7, #0]
 801a688:	b29a      	uxth	r2, r3
 801a68a:	69fb      	ldr	r3, [r7, #28]
 801a68c:	b29b      	uxth	r3, r3
 801a68e:	4619      	mov	r1, r3
 801a690:	0149      	lsls	r1, r1, #5
 801a692:	1ac9      	subs	r1, r1, r3
 801a694:	0089      	lsls	r1, r1, #2
 801a696:	440b      	add	r3, r1
 801a698:	00db      	lsls	r3, r3, #3
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	1ad3      	subs	r3, r2, r3
 801a69e:	b29b      	uxth	r3, r3
 801a6a0:	b21b      	sxth	r3, r3
 801a6a2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a6a4:	f107 030c 	add.w	r3, r7, #12
 801a6a8:	2200      	movs	r2, #0
 801a6aa:	601a      	str	r2, [r3, #0]
 801a6ac:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (801a6e4 <SysTimeFromMs+0x78>)
 801a6b0:	68db      	ldr	r3, [r3, #12]
 801a6b2:	4798      	blx	r3
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	b21b      	sxth	r3, r3
 801a6b8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a6ba:	4b0a      	ldr	r3, [pc, #40]	@ (801a6e4 <SysTimeFromMs+0x78>)
 801a6bc:	685b      	ldr	r3, [r3, #4]
 801a6be:	4798      	blx	r3
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a6c4:	6878      	ldr	r0, [r7, #4]
 801a6c6:	693b      	ldr	r3, [r7, #16]
 801a6c8:	9300      	str	r3, [sp, #0]
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	f107 0214 	add.w	r2, r7, #20
 801a6d0:	ca06      	ldmia	r2, {r1, r2}
 801a6d2:	f7ff fea3 	bl	801a41c <SysTimeAdd>
}
 801a6d6:	6878      	ldr	r0, [r7, #4]
 801a6d8:	3720      	adds	r7, #32
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	10624dd3 	.word	0x10624dd3
 801a6e4:	08022ddc 	.word	0x08022ddc

0801a6e8 <UTIL_TIMER_Init>:
/**
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void) {
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	af00      	add	r7, sp, #0
	UTIL_TIMER_INIT_CRITICAL_SECTION();
	TimerListHead = NULL;
 801a6ec:	4b04      	ldr	r3, [pc, #16]	@ (801a700 <UTIL_TIMER_Init+0x18>)
 801a6ee:	2200      	movs	r2, #0
 801a6f0:	601a      	str	r2, [r3, #0]
	return UTIL_TimerDriver.InitTimer();
 801a6f2:	4b04      	ldr	r3, [pc, #16]	@ (801a704 <UTIL_TIMER_Init+0x1c>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	4798      	blx	r3
 801a6f8:	4603      	mov	r3, r0
}
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	bd80      	pop	{r7, pc}
 801a6fe:	bf00      	nop
 801a700:	2000ccbc 	.word	0x2000ccbc
 801a704:	08022db0 	.word	0x08022db0

0801a708 <UTIL_TIMER_Create>:
	return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create(UTIL_TIMER_Object_t *TimerObject,
		uint64_t PeriodValue, UTIL_TIMER_Mode_t Mode, void (*Callback)(void*),
		void *Argument) {
 801a708:	b580      	push	{r7, lr}
 801a70a:	b084      	sub	sp, #16
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	60f8      	str	r0, [r7, #12]
 801a710:	e9c7 2300 	strd	r2, r3, [r7]
	if ((TimerObject != NULL) && (Callback != NULL)) {
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d02a      	beq.n	801a770 <UTIL_TIMER_Create+0x68>
 801a71a:	69fb      	ldr	r3, [r7, #28]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d027      	beq.n	801a770 <UTIL_TIMER_Create+0x68>
		TimerObject->Timestamp = 0U;
 801a720:	68f9      	ldr	r1, [r7, #12]
 801a722:	f04f 0200 	mov.w	r2, #0
 801a726:	f04f 0300 	mov.w	r3, #0
 801a72a:	e9c1 2300 	strd	r2, r3, [r1]
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a72e:	4b13      	ldr	r3, [pc, #76]	@ (801a77c <UTIL_TIMER_Create+0x74>)
 801a730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a732:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a736:	4798      	blx	r3
 801a738:	4602      	mov	r2, r0
 801a73a:	460b      	mov	r3, r1
 801a73c:	68f9      	ldr	r1, [r7, #12]
 801a73e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		TimerObject->IsPending = 0U;
 801a742:	68fb      	ldr	r3, [r7, #12]
 801a744:	2200      	movs	r2, #0
 801a746:	741a      	strb	r2, [r3, #16]
		TimerObject->IsRunning = 0U;
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	2200      	movs	r2, #0
 801a74c:	745a      	strb	r2, [r3, #17]
		TimerObject->IsReloadStopped = 0U;
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	2200      	movs	r2, #0
 801a752:	749a      	strb	r2, [r3, #18]
		TimerObject->Callback = Callback;
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	69fa      	ldr	r2, [r7, #28]
 801a758:	615a      	str	r2, [r3, #20]
		TimerObject->argument = Argument;
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	6a3a      	ldr	r2, [r7, #32]
 801a75e:	619a      	str	r2, [r3, #24]
		TimerObject->Mode = Mode;
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	7e3a      	ldrb	r2, [r7, #24]
 801a764:	74da      	strb	r2, [r3, #19]
		TimerObject->Next = NULL;
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	2200      	movs	r2, #0
 801a76a:	61da      	str	r2, [r3, #28]
		return UTIL_TIMER_OK;
 801a76c:	2300      	movs	r3, #0
 801a76e:	e000      	b.n	801a772 <UTIL_TIMER_Create+0x6a>
	}
	else {
		return UTIL_TIMER_INVALID_PARAM;
 801a770:	2301      	movs	r3, #1
	}
}
 801a772:	4618      	mov	r0, r3
 801a774:	3710      	adds	r7, #16
 801a776:	46bd      	mov	sp, r7
 801a778:	bd80      	pop	{r7, pc}
 801a77a:	bf00      	nop
 801a77c:	08022db0 	.word	0x08022db0

0801a780 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start(UTIL_TIMER_Object_t *TimerObject) {
 801a780:	b5b0      	push	{r4, r5, r7, lr}
 801a782:	b08e      	sub	sp, #56	@ 0x38
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 801a788:	2300      	movs	r3, #0
 801a78a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint64_t elapsedTime;
	uint64_t minValue;
	uint64_t ticks;

	if ((TimerObject != NULL) && (TimerExists(TimerObject) == false)
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d06b      	beq.n	801a86c <UTIL_TIMER_Start+0xec>
 801a794:	6878      	ldr	r0, [r7, #4]
 801a796:	f000 f9ed 	bl	801ab74 <TimerExists>
 801a79a:	4603      	mov	r3, r0
 801a79c:	f083 0301 	eor.w	r3, r3, #1
 801a7a0:	b2db      	uxtb	r3, r3
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d062      	beq.n	801a86c <UTIL_TIMER_Start+0xec>
			&& (TimerObject->IsRunning == 0U)) {
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	7c5b      	ldrb	r3, [r3, #17]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d15e      	bne.n	801a86c <UTIL_TIMER_Start+0xec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7ae:	f3ef 8310 	mrs	r3, PRIMASK
 801a7b2:	60fb      	str	r3, [r7, #12]
  return(result);
 801a7b4:	68fb      	ldr	r3, [r7, #12]
		UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a7b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 801a7b8:	b672      	cpsid	i
}
 801a7ba:	bf00      	nop
		ticks = TimerObject->ReloadValue;
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a7c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		minValue = UTIL_TimerDriver.GetMinimumTimeout();
 801a7c6:	4b2e      	ldr	r3, [pc, #184]	@ (801a880 <UTIL_TIMER_Start+0x100>)
 801a7c8:	6a1b      	ldr	r3, [r3, #32]
 801a7ca:	4798      	blx	r3
 801a7cc:	e9c7 0106 	strd	r0, r1, [r7, #24]

		if (ticks < minValue) {
 801a7d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801a7d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a7d8:	4290      	cmp	r0, r2
 801a7da:	eb71 0303 	sbcs.w	r3, r1, r3
 801a7de:	d203      	bcs.n	801a7e8 <UTIL_TIMER_Start+0x68>
			ticks = minValue;
 801a7e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a7e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		TimerObject->Timestamp = ticks;
 801a7e8:	6879      	ldr	r1, [r7, #4]
 801a7ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801a7ee:	e9c1 2300 	strd	r2, r3, [r1]
		TimerObject->IsPending = 0U;
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	2200      	movs	r2, #0
 801a7f6:	741a      	strb	r2, [r3, #16]
		TimerObject->IsRunning = 1U;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	2201      	movs	r2, #1
 801a7fc:	745a      	strb	r2, [r3, #17]
		TimerObject->IsReloadStopped = 0U;
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	2200      	movs	r2, #0
 801a802:	749a      	strb	r2, [r3, #18]
		if (TimerListHead == NULL) {
 801a804:	4b1f      	ldr	r3, [pc, #124]	@ (801a884 <UTIL_TIMER_Start+0x104>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d106      	bne.n	801a81a <UTIL_TIMER_Start+0x9a>
			UTIL_TimerDriver.SetTimerContext();
 801a80c:	4b1c      	ldr	r3, [pc, #112]	@ (801a880 <UTIL_TIMER_Start+0x100>)
 801a80e:	691b      	ldr	r3, [r3, #16]
 801a810:	4798      	blx	r3
			TimerInsertNewHeadTimer(TimerObject); /* insert a timeout at now+obj->Timestamp */
 801a812:	6878      	ldr	r0, [r7, #4]
 801a814:	f000 fa38 	bl	801ac88 <TimerInsertNewHeadTimer>
 801a818:	e021      	b.n	801a85e <UTIL_TIMER_Start+0xde>
		}
		else {
			elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime();
 801a81a:	4b19      	ldr	r3, [pc, #100]	@ (801a880 <UTIL_TIMER_Start+0x100>)
 801a81c:	699b      	ldr	r3, [r3, #24]
 801a81e:	4798      	blx	r3
 801a820:	e9c7 0104 	strd	r0, r1, [r7, #16]
			TimerObject->Timestamp += elapsedTime;
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a82a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a82e:	1884      	adds	r4, r0, r2
 801a830:	eb41 0503 	adc.w	r5, r1, r3
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	e9c3 4500 	strd	r4, r5, [r3]

			if (TimerObject->Timestamp < TimerListHead->Timestamp) {
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a840:	4b10      	ldr	r3, [pc, #64]	@ (801a884 <UTIL_TIMER_Start+0x104>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a848:	4290      	cmp	r0, r2
 801a84a:	eb71 0303 	sbcs.w	r3, r1, r3
 801a84e:	d203      	bcs.n	801a858 <UTIL_TIMER_Start+0xd8>
				TimerInsertNewHeadTimer(TimerObject);
 801a850:	6878      	ldr	r0, [r7, #4]
 801a852:	f000 fa19 	bl	801ac88 <TimerInsertNewHeadTimer>
 801a856:	e002      	b.n	801a85e <UTIL_TIMER_Start+0xde>
			}
			else {
				TimerInsertTimer(TimerObject);
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	f000 f9e1 	bl	801ac20 <TimerInsertTimer>
 801a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a860:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a862:	68bb      	ldr	r3, [r7, #8]
 801a864:	f383 8810 	msr	PRIMASK, r3
}
 801a868:	bf00      	nop
			&& (TimerObject->IsRunning == 0U)) {
 801a86a:	e002      	b.n	801a872 <UTIL_TIMER_Start+0xf2>
			}
		}
		UTIL_TIMER_EXIT_CRITICAL_SECTION();
	}
	else {
		ret = UTIL_TIMER_INVALID_PARAM;
 801a86c:	2301      	movs	r3, #1
 801a86e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}
	return ret;
 801a872:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 801a876:	4618      	mov	r0, r3
 801a878:	3738      	adds	r7, #56	@ 0x38
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bdb0      	pop	{r4, r5, r7, pc}
 801a87e:	bf00      	nop
 801a880:	08022db0 	.word	0x08022db0
 801a884:	2000ccbc 	.word	0x2000ccbc

0801a888 <UTIL_TIMER_Stop>:
		ret = UTIL_TIMER_Start(TimerObject);
	}
	return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop(UTIL_TIMER_Object_t *TimerObject) {
 801a888:	b580      	push	{r7, lr}
 801a88a:	b088      	sub	sp, #32
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 801a890:	2300      	movs	r3, #0
 801a892:	77fb      	strb	r3, [r7, #31]

	if (NULL != TimerObject) {
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	2b00      	cmp	r3, #0
 801a898:	d05b      	beq.n	801a952 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a89a:	f3ef 8310 	mrs	r3, PRIMASK
 801a89e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8a0:	68fb      	ldr	r3, [r7, #12]
		UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a8a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8a4:	b672      	cpsid	i
}
 801a8a6:	bf00      	nop
		UTIL_TIMER_Object_t *prev = TimerListHead;
 801a8a8:	4b2d      	ldr	r3, [pc, #180]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	61bb      	str	r3, [r7, #24]
		UTIL_TIMER_Object_t *cur = TimerListHead;
 801a8ae:	4b2c      	ldr	r3, [pc, #176]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	617b      	str	r3, [r7, #20]
		TimerObject->IsReloadStopped = 1U;
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	2201      	movs	r2, #1
 801a8b8:	749a      	strb	r2, [r3, #18]

		/* List is empty or the Obj to stop does not exist  */
		if (NULL != TimerListHead) {
 801a8ba:	4b29      	ldr	r3, [pc, #164]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d041      	beq.n	801a946 <UTIL_TIMER_Stop+0xbe>
			TimerObject->IsRunning = 0U;
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	745a      	strb	r2, [r3, #17]

			if (TimerListHead == TimerObject) /* Stop the Head */
 801a8c8:	4b25      	ldr	r3, [pc, #148]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	687a      	ldr	r2, [r7, #4]
 801a8ce:	429a      	cmp	r2, r3
 801a8d0:	d134      	bne.n	801a93c <UTIL_TIMER_Stop+0xb4>
			{
				TimerListHead->IsPending = 0;
 801a8d2:	4b23      	ldr	r3, [pc, #140]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	741a      	strb	r2, [r3, #16]
				if (TimerListHead->Next != NULL) {
 801a8da:	4b21      	ldr	r3, [pc, #132]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	69db      	ldr	r3, [r3, #28]
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d00a      	beq.n	801a8fa <UTIL_TIMER_Stop+0x72>
					TimerListHead = TimerListHead->Next;
 801a8e4:	4b1e      	ldr	r3, [pc, #120]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	69db      	ldr	r3, [r3, #28]
 801a8ea:	4a1d      	ldr	r2, [pc, #116]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8ec:	6013      	str	r3, [r2, #0]
					TimerSetTimeout(TimerListHead);
 801a8ee:	4b1c      	ldr	r3, [pc, #112]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	f000 f95c 	bl	801abb0 <TimerSetTimeout>
 801a8f8:	e023      	b.n	801a942 <UTIL_TIMER_Stop+0xba>
				}
				else {
					UTIL_TimerDriver.StopTimerEvt();
 801a8fa:	4b1a      	ldr	r3, [pc, #104]	@ (801a964 <UTIL_TIMER_Stop+0xdc>)
 801a8fc:	68db      	ldr	r3, [r3, #12]
 801a8fe:	4798      	blx	r3
					TimerListHead = NULL;
 801a900:	4b17      	ldr	r3, [pc, #92]	@ (801a960 <UTIL_TIMER_Stop+0xd8>)
 801a902:	2200      	movs	r2, #0
 801a904:	601a      	str	r2, [r3, #0]
 801a906:	e01c      	b.n	801a942 <UTIL_TIMER_Stop+0xba>
				}
			}
			else /* Stop an object within the list */
			{
				while (cur != NULL) {
					if (cur == TimerObject) {
 801a908:	697a      	ldr	r2, [r7, #20]
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	429a      	cmp	r2, r3
 801a90e:	d110      	bne.n	801a932 <UTIL_TIMER_Stop+0xaa>
						if (cur->Next != NULL) {
 801a910:	697b      	ldr	r3, [r7, #20]
 801a912:	69db      	ldr	r3, [r3, #28]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d006      	beq.n	801a926 <UTIL_TIMER_Stop+0x9e>
							cur = cur->Next;
 801a918:	697b      	ldr	r3, [r7, #20]
 801a91a:	69db      	ldr	r3, [r3, #28]
 801a91c:	617b      	str	r3, [r7, #20]
							prev->Next = cur;
 801a91e:	69bb      	ldr	r3, [r7, #24]
 801a920:	697a      	ldr	r2, [r7, #20]
 801a922:	61da      	str	r2, [r3, #28]
						}
						else {
							cur = NULL;
							prev->Next = cur;
						}
						break;
 801a924:	e00d      	b.n	801a942 <UTIL_TIMER_Stop+0xba>
							cur = NULL;
 801a926:	2300      	movs	r3, #0
 801a928:	617b      	str	r3, [r7, #20]
							prev->Next = cur;
 801a92a:	69bb      	ldr	r3, [r7, #24]
 801a92c:	697a      	ldr	r2, [r7, #20]
 801a92e:	61da      	str	r2, [r3, #28]
						break;
 801a930:	e007      	b.n	801a942 <UTIL_TIMER_Stop+0xba>
					}
					else {
						prev = cur;
 801a932:	697b      	ldr	r3, [r7, #20]
 801a934:	61bb      	str	r3, [r7, #24]
						cur = cur->Next;
 801a936:	697b      	ldr	r3, [r7, #20]
 801a938:	69db      	ldr	r3, [r3, #28]
 801a93a:	617b      	str	r3, [r7, #20]
				while (cur != NULL) {
 801a93c:	697b      	ldr	r3, [r7, #20]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d1e2      	bne.n	801a908 <UTIL_TIMER_Stop+0x80>
					}
				}
			}
			ret = UTIL_TIMER_OK;
 801a942:	2300      	movs	r3, #0
 801a944:	77fb      	strb	r3, [r7, #31]
 801a946:	693b      	ldr	r3, [r7, #16]
 801a948:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a94a:	68bb      	ldr	r3, [r7, #8]
 801a94c:	f383 8810 	msr	PRIMASK, r3
}
 801a950:	e001      	b.n	801a956 <UTIL_TIMER_Stop+0xce>
		}
		UTIL_TIMER_EXIT_CRITICAL_SECTION();
	}
	else {
		ret = UTIL_TIMER_INVALID_PARAM;
 801a952:	2301      	movs	r3, #1
 801a954:	77fb      	strb	r3, [r7, #31]
	}
	return ret;
 801a956:	7ffb      	ldrb	r3, [r7, #31]
}
 801a958:	4618      	mov	r0, r3
 801a95a:	3720      	adds	r7, #32
 801a95c:	46bd      	mov	sp, r7
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	2000ccbc 	.word	0x2000ccbc
 801a964:	08022db0 	.word	0x08022db0

0801a968 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject,
		uint64_t NewPeriodValue) {
 801a968:	b580      	push	{r7, lr}
 801a96a:	b086      	sub	sp, #24
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	60f8      	str	r0, [r7, #12]
 801a970:	e9c7 2300 	strd	r2, r3, [r7]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 801a974:	2300      	movs	r3, #0
 801a976:	75fb      	strb	r3, [r7, #23]

	if (NULL == TimerObject) {
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d102      	bne.n	801a984 <UTIL_TIMER_SetPeriod+0x1c>
		ret = UTIL_TIMER_INVALID_PARAM;
 801a97e:	2301      	movs	r3, #1
 801a980:	75fb      	strb	r3, [r7, #23]
 801a982:	e017      	b.n	801a9b4 <UTIL_TIMER_SetPeriod+0x4c>
	}
	else {
		TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a984:	4b0e      	ldr	r3, [pc, #56]	@ (801a9c0 <UTIL_TIMER_SetPeriod+0x58>)
 801a986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a988:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a98c:	4798      	blx	r3
 801a98e:	4602      	mov	r2, r0
 801a990:	460b      	mov	r3, r1
 801a992:	68f9      	ldr	r1, [r7, #12]
 801a994:	e9c1 2302 	strd	r2, r3, [r1, #8]
		if (TimerExists(TimerObject)) {
 801a998:	68f8      	ldr	r0, [r7, #12]
 801a99a:	f000 f8eb 	bl	801ab74 <TimerExists>
 801a99e:	4603      	mov	r3, r0
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d007      	beq.n	801a9b4 <UTIL_TIMER_SetPeriod+0x4c>
			(void) UTIL_TIMER_Stop(TimerObject);
 801a9a4:	68f8      	ldr	r0, [r7, #12]
 801a9a6:	f7ff ff6f 	bl	801a888 <UTIL_TIMER_Stop>
			ret = UTIL_TIMER_Start(TimerObject);
 801a9aa:	68f8      	ldr	r0, [r7, #12]
 801a9ac:	f7ff fee8 	bl	801a780 <UTIL_TIMER_Start>
 801a9b0:	4603      	mov	r3, r0
 801a9b2:	75fb      	strb	r3, [r7, #23]
		}
	}
	return ret;
 801a9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	3718      	adds	r7, #24
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	08022db0 	.word	0x08022db0

0801a9c4 <UTIL_TIMER_IRQ_Handler>:
		(void) UTIL_TIMER_GetRemainingTime(TimerListHead, &NextTimer);
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler(void) {
 801a9c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a9c8:	b08a      	sub	sp, #40	@ 0x28
 801a9ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9cc:	f3ef 8310 	mrs	r3, PRIMASK
 801a9d0:	607b      	str	r3, [r7, #4]
  return(result);
 801a9d2:	687b      	ldr	r3, [r7, #4]
	UTIL_TIMER_Object_t *cur;
	uint64_t old, now, DeltaContext;

	UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a9d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9d6:	b672      	cpsid	i
}
 801a9d8:	bf00      	nop

	old = UTIL_TimerDriver.GetTimerContext();
 801a9da:	4b46      	ldr	r3, [pc, #280]	@ (801aaf4 <UTIL_TIMER_IRQ_Handler+0x130>)
 801a9dc:	695b      	ldr	r3, [r3, #20]
 801a9de:	4798      	blx	r3
 801a9e0:	e9c7 0106 	strd	r0, r1, [r7, #24]
	now = UTIL_TimerDriver.SetTimerContext();
 801a9e4:	4b43      	ldr	r3, [pc, #268]	@ (801aaf4 <UTIL_TIMER_IRQ_Handler+0x130>)
 801a9e6:	691b      	ldr	r3, [r3, #16]
 801a9e8:	4798      	blx	r3
 801a9ea:	e9c7 0104 	strd	r0, r1, [r7, #16]

	DeltaContext = now - old; /*intentional wrap around */
 801a9ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a9f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a9f6:	ebb0 0802 	subs.w	r8, r0, r2
 801a9fa:	eb61 0903 	sbc.w	r9, r1, r3
 801a9fe:	e9c7 8902 	strd	r8, r9, [r7, #8]

	/* update timeStamp based upon new Time Reference*/
	/* because delta context should never exceed 2^32*/
	if (TimerListHead != NULL) {
 801aa02:	4b3d      	ldr	r3, [pc, #244]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d044      	beq.n	801aa94 <UTIL_TIMER_IRQ_Handler+0xd0>
		cur = TimerListHead;
 801aa0a:	4b3b      	ldr	r3, [pc, #236]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	627b      	str	r3, [r7, #36]	@ 0x24
		do {
			if (cur->Timestamp > DeltaContext) {
 801aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801aa1a:	4290      	cmp	r0, r2
 801aa1c:	eb71 0303 	sbcs.w	r3, r1, r3
 801aa20:	d20b      	bcs.n	801aa3a <UTIL_TIMER_IRQ_Handler+0x76>
				cur->Timestamp -= DeltaContext;
 801aa22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa24:	e9d3 0100 	ldrd	r0, r1, [r3]
 801aa28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801aa2c:	1a84      	subs	r4, r0, r2
 801aa2e:	eb61 0503 	sbc.w	r5, r1, r3
 801aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa34:	e9c3 4500 	strd	r4, r5, [r3]
 801aa38:	e006      	b.n	801aa48 <UTIL_TIMER_IRQ_Handler+0x84>
			}
			else {
				cur->Timestamp = 0;
 801aa3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801aa3c:	f04f 0200 	mov.w	r2, #0
 801aa40:	f04f 0300 	mov.w	r3, #0
 801aa44:	e9c1 2300 	strd	r2, r3, [r1]
			}
			cur = cur->Next;
 801aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa4a:	69db      	ldr	r3, [r3, #28]
 801aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		while (cur != NULL);
 801aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d1dd      	bne.n	801aa10 <UTIL_TIMER_IRQ_Handler+0x4c>
	}

	/* Execute expired timer and update the list */
	while ((TimerListHead != NULL)
 801aa54:	e01e      	b.n	801aa94 <UTIL_TIMER_IRQ_Handler+0xd0>
			&& ((TimerListHead->Timestamp == 0U)
					|| (TimerListHead->Timestamp
							< UTIL_TimerDriver.GetTimerElapsedTime()))) {
		cur = TimerListHead;
 801aa56:	4b28      	ldr	r3, [pc, #160]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	627b      	str	r3, [r7, #36]	@ 0x24
		TimerListHead = TimerListHead->Next;
 801aa5c:	4b26      	ldr	r3, [pc, #152]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	69db      	ldr	r3, [r3, #28]
 801aa62:	4a25      	ldr	r2, [pc, #148]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aa64:	6013      	str	r3, [r2, #0]
		cur->IsPending = 0;
 801aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa68:	2200      	movs	r2, #0
 801aa6a:	741a      	strb	r2, [r3, #16]
		cur->IsRunning = 0;
 801aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa6e:	2200      	movs	r2, #0
 801aa70:	745a      	strb	r2, [r3, #17]
		cur->Callback(cur->argument);
 801aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa74:	695b      	ldr	r3, [r3, #20]
 801aa76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aa78:	6992      	ldr	r2, [r2, #24]
 801aa7a:	4610      	mov	r0, r2
 801aa7c:	4798      	blx	r3
		if ((cur->Mode == UTIL_TIMER_PERIODIC)
 801aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa80:	7cdb      	ldrb	r3, [r3, #19]
 801aa82:	2b01      	cmp	r3, #1
 801aa84:	d106      	bne.n	801aa94 <UTIL_TIMER_IRQ_Handler+0xd0>
				&& (cur->IsReloadStopped == 0U)) {
 801aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aa88:	7c9b      	ldrb	r3, [r3, #18]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d102      	bne.n	801aa94 <UTIL_TIMER_IRQ_Handler+0xd0>
			(void) UTIL_TIMER_Start(cur);
 801aa8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801aa90:	f7ff fe76 	bl	801a780 <UTIL_TIMER_Start>
	while ((TimerListHead != NULL)
 801aa94:	4b18      	ldr	r3, [pc, #96]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aa96:	681b      	ldr	r3, [r3, #0]
			&& ((TimerListHead->Timestamp == 0U)
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d012      	beq.n	801aac2 <UTIL_TIMER_IRQ_Handler+0xfe>
 801aa9c:	4b16      	ldr	r3, [pc, #88]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa4:	4313      	orrs	r3, r2
 801aaa6:	d0d6      	beq.n	801aa56 <UTIL_TIMER_IRQ_Handler+0x92>
					|| (TimerListHead->Timestamp
 801aaa8:	4b13      	ldr	r3, [pc, #76]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	e9d3 4500 	ldrd	r4, r5, [r3]
							< UTIL_TimerDriver.GetTimerElapsedTime()))) {
 801aab0:	4b10      	ldr	r3, [pc, #64]	@ (801aaf4 <UTIL_TIMER_IRQ_Handler+0x130>)
 801aab2:	699b      	ldr	r3, [r3, #24]
 801aab4:	4798      	blx	r3
 801aab6:	4602      	mov	r2, r0
 801aab8:	460b      	mov	r3, r1
					|| (TimerListHead->Timestamp
 801aaba:	4294      	cmp	r4, r2
 801aabc:	eb75 0303 	sbcs.w	r3, r5, r3
 801aac0:	d3c9      	bcc.n	801aa56 <UTIL_TIMER_IRQ_Handler+0x92>
		}
	}

	/* start the next TimerListHead if it exists and it is not pending*/
	if ((TimerListHead != NULL) && (TimerListHead->IsPending == 0U)) {
 801aac2:	4b0d      	ldr	r3, [pc, #52]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d009      	beq.n	801aade <UTIL_TIMER_IRQ_Handler+0x11a>
 801aaca:	4b0b      	ldr	r3, [pc, #44]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	7c1b      	ldrb	r3, [r3, #16]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d104      	bne.n	801aade <UTIL_TIMER_IRQ_Handler+0x11a>
		TimerSetTimeout(TimerListHead);
 801aad4:	4b08      	ldr	r3, [pc, #32]	@ (801aaf8 <UTIL_TIMER_IRQ_Handler+0x134>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	4618      	mov	r0, r3
 801aada:	f000 f869 	bl	801abb0 <TimerSetTimeout>
 801aade:	6a3b      	ldr	r3, [r7, #32]
 801aae0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aae2:	683b      	ldr	r3, [r7, #0]
 801aae4:	f383 8810 	msr	PRIMASK, r3
}
 801aae8:	bf00      	nop
	}
	UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801aaea:	bf00      	nop
 801aaec:	3728      	adds	r7, #40	@ 0x28
 801aaee:	46bd      	mov	sp, r7
 801aaf0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801aaf4:	08022db0 	.word	0x08022db0
 801aaf8:	2000ccbc 	.word	0x2000ccbc

0801aafc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void) {
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b082      	sub	sp, #8
 801ab00:	af00      	add	r7, sp, #0
	uint64_t now = UTIL_TimerDriver.GetTimerValue();
 801ab02:	4b08      	ldr	r3, [pc, #32]	@ (801ab24 <UTIL_TIMER_GetCurrentTime+0x28>)
 801ab04:	69db      	ldr	r3, [r3, #28]
 801ab06:	4798      	blx	r3
 801ab08:	e9c7 0100 	strd	r0, r1, [r7]
	return UTIL_TimerDriver.Tick2ms(now);
 801ab0c:	4b05      	ldr	r3, [pc, #20]	@ (801ab24 <UTIL_TIMER_GetCurrentTime+0x28>)
 801ab0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ab10:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab14:	4798      	blx	r3
 801ab16:	4602      	mov	r2, r0
 801ab18:	460b      	mov	r3, r1
}
 801ab1a:	4610      	mov	r0, r2
 801ab1c:	4619      	mov	r1, r3
 801ab1e:	3708      	adds	r7, #8
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bd80      	pop	{r7, pc}
 801ab24:	08022db0 	.word	0x08022db0

0801ab28 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past) {
 801ab28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab2a:	b087      	sub	sp, #28
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 801ab32:	4b0f      	ldr	r3, [pc, #60]	@ (801ab70 <UTIL_TIMER_GetElapsedTime+0x48>)
 801ab34:	69db      	ldr	r3, [r3, #28]
 801ab36:	4798      	blx	r3
 801ab38:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint64_t pastInTicks = UTIL_TimerDriver.ms2Tick(past);
 801ab3c:	4b0c      	ldr	r3, [pc, #48]	@ (801ab70 <UTIL_TIMER_GetElapsedTime+0x48>)
 801ab3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab40:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab44:	4798      	blx	r3
 801ab46:	e9c7 0102 	strd	r0, r1, [r7, #8]
	/* intentional wrap around. Works Ok if tick duation below 1ms */
	return UTIL_TimerDriver.Tick2ms(nowInTicks - pastInTicks);
 801ab4a:	4b09      	ldr	r3, [pc, #36]	@ (801ab70 <UTIL_TIMER_GetElapsedTime+0x48>)
 801ab4c:	6a9e      	ldr	r6, [r3, #40]	@ 0x28
 801ab4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801ab52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801ab56:	1a84      	subs	r4, r0, r2
 801ab58:	eb61 0503 	sbc.w	r5, r1, r3
 801ab5c:	4620      	mov	r0, r4
 801ab5e:	4629      	mov	r1, r5
 801ab60:	47b0      	blx	r6
 801ab62:	4602      	mov	r2, r0
 801ab64:	460b      	mov	r3, r1
}
 801ab66:	4610      	mov	r0, r2
 801ab68:	4619      	mov	r1, r3
 801ab6a:	371c      	adds	r7, #28
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab70:	08022db0 	.word	0x08022db0

0801ab74 <TimerExists>:
 * @brief Check if the Object to be added is not already in the list
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists(UTIL_TIMER_Object_t *TimerObject) {
 801ab74:	b480      	push	{r7}
 801ab76:	b085      	sub	sp, #20
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Object_t *cur = TimerListHead;
 801ab7c:	4b0b      	ldr	r3, [pc, #44]	@ (801abac <TimerExists+0x38>)
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	60fb      	str	r3, [r7, #12]

	while (cur != NULL) {
 801ab82:	e008      	b.n	801ab96 <TimerExists+0x22>
		if (cur == TimerObject) {
 801ab84:	68fa      	ldr	r2, [r7, #12]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d101      	bne.n	801ab90 <TimerExists+0x1c>
			return true;
 801ab8c:	2301      	movs	r3, #1
 801ab8e:	e006      	b.n	801ab9e <TimerExists+0x2a>
		}
		cur = cur->Next;
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	69db      	ldr	r3, [r3, #28]
 801ab94:	60fb      	str	r3, [r7, #12]
	while (cur != NULL) {
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d1f3      	bne.n	801ab84 <TimerExists+0x10>
	}
	return false;
 801ab9c:	2300      	movs	r3, #0
}
 801ab9e:	4618      	mov	r0, r3
 801aba0:	3714      	adds	r7, #20
 801aba2:	46bd      	mov	sp, r7
 801aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba8:	4770      	bx	lr
 801abaa:	bf00      	nop
 801abac:	2000ccbc 	.word	0x2000ccbc

0801abb0 <TimerSetTimeout>:
/**
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout(UTIL_TIMER_Object_t *TimerObject) {
 801abb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801abb4:	b084      	sub	sp, #16
 801abb6:	af00      	add	r7, sp, #0
 801abb8:	6078      	str	r0, [r7, #4]
	uint64_t minTicks = UTIL_TimerDriver.GetMinimumTimeout();
 801abba:	4b18      	ldr	r3, [pc, #96]	@ (801ac1c <TimerSetTimeout+0x6c>)
 801abbc:	6a1b      	ldr	r3, [r3, #32]
 801abbe:	4798      	blx	r3
 801abc0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	TimerObject->IsPending = 1;
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	2201      	movs	r2, #1
 801abc8:	741a      	strb	r2, [r3, #16]

	/* In case deadline too soon */
	if (TimerObject->Timestamp
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	e9d3 ab00 	ldrd	sl, fp, [r3]
			< (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks)) {
 801abd0:	4b12      	ldr	r3, [pc, #72]	@ (801ac1c <TimerSetTimeout+0x6c>)
 801abd2:	699b      	ldr	r3, [r3, #24]
 801abd4:	4798      	blx	r3
 801abd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801abda:	1884      	adds	r4, r0, r2
 801abdc:	eb41 0503 	adc.w	r5, r1, r3
	if (TimerObject->Timestamp
 801abe0:	45a2      	cmp	sl, r4
 801abe2:	eb7b 0305 	sbcs.w	r3, fp, r5
 801abe6:	d20b      	bcs.n	801ac00 <TimerSetTimeout+0x50>
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime()
 801abe8:	4b0c      	ldr	r3, [pc, #48]	@ (801ac1c <TimerSetTimeout+0x6c>)
 801abea:	699b      	ldr	r3, [r3, #24]
 801abec:	4798      	blx	r3
				+ minTicks;
 801abee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801abf2:	eb10 0802 	adds.w	r8, r0, r2
 801abf6:	eb41 0903 	adc.w	r9, r1, r3
		TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime()
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	e9c3 8900 	strd	r8, r9, [r3]
	}
	UTIL_TimerDriver.StartTimerEvt(TimerObject->Timestamp);
 801ac00:	4b06      	ldr	r3, [pc, #24]	@ (801ac1c <TimerSetTimeout+0x6c>)
 801ac02:	689c      	ldr	r4, [r3, #8]
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac0a:	4610      	mov	r0, r2
 801ac0c:	4619      	mov	r1, r3
 801ac0e:	47a0      	blx	r4
}
 801ac10:	bf00      	nop
 801ac12:	3710      	adds	r7, #16
 801ac14:	46bd      	mov	sp, r7
 801ac16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ac1a:	bf00      	nop
 801ac1c:	08022db0 	.word	0x08022db0

0801ac20 <TimerInsertTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer(UTIL_TIMER_Object_t *TimerObject) {
 801ac20:	b480      	push	{r7}
 801ac22:	b085      	sub	sp, #20
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Object_t *cur = TimerListHead;
 801ac28:	4b16      	ldr	r3, [pc, #88]	@ (801ac84 <TimerInsertTimer+0x64>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	60fb      	str	r3, [r7, #12]
	UTIL_TIMER_Object_t *next = TimerListHead->Next;
 801ac2e:	4b15      	ldr	r3, [pc, #84]	@ (801ac84 <TimerInsertTimer+0x64>)
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	69db      	ldr	r3, [r3, #28]
 801ac34:	60bb      	str	r3, [r7, #8]

	while (cur->Next != NULL) {
 801ac36:	e016      	b.n	801ac66 <TimerInsertTimer+0x46>
		if (TimerObject->Timestamp > next->Timestamp) {
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac3e:	68b9      	ldr	r1, [r7, #8]
 801ac40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ac44:	4290      	cmp	r0, r2
 801ac46:	eb71 0303 	sbcs.w	r3, r1, r3
 801ac4a:	d205      	bcs.n	801ac58 <TimerInsertTimer+0x38>
			cur = next;
 801ac4c:	68bb      	ldr	r3, [r7, #8]
 801ac4e:	60fb      	str	r3, [r7, #12]
			next = next->Next;
 801ac50:	68bb      	ldr	r3, [r7, #8]
 801ac52:	69db      	ldr	r3, [r3, #28]
 801ac54:	60bb      	str	r3, [r7, #8]
 801ac56:	e006      	b.n	801ac66 <TimerInsertTimer+0x46>
		}
		else {
			cur->Next = TimerObject;
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	687a      	ldr	r2, [r7, #4]
 801ac5c:	61da      	str	r2, [r3, #28]
			TimerObject->Next = next;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	68ba      	ldr	r2, [r7, #8]
 801ac62:	61da      	str	r2, [r3, #28]
			return;
 801ac64:	e009      	b.n	801ac7a <TimerInsertTimer+0x5a>
	while (cur->Next != NULL) {
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	69db      	ldr	r3, [r3, #28]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d1e4      	bne.n	801ac38 <TimerInsertTimer+0x18>

		}
	}
	cur->Next = TimerObject;
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	687a      	ldr	r2, [r7, #4]
 801ac72:	61da      	str	r2, [r3, #28]
	TimerObject->Next = NULL;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	2200      	movs	r2, #0
 801ac78:	61da      	str	r2, [r3, #28]
}
 801ac7a:	3714      	adds	r7, #20
 801ac7c:	46bd      	mov	sp, r7
 801ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac82:	4770      	bx	lr
 801ac84:	2000ccbc 	.word	0x2000ccbc

0801ac88 <TimerInsertNewHeadTimer>:
 * @param TimerObject Structure containing the timer object parameters
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer(UTIL_TIMER_Object_t *TimerObject) {
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b084      	sub	sp, #16
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_Object_t *cur = TimerListHead;
 801ac90:	4b0b      	ldr	r3, [pc, #44]	@ (801acc0 <TimerInsertNewHeadTimer+0x38>)
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	60fb      	str	r3, [r7, #12]

	if (cur != NULL) {
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d002      	beq.n	801aca2 <TimerInsertNewHeadTimer+0x1a>
		cur->IsPending = 0;
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	2200      	movs	r2, #0
 801aca0:	741a      	strb	r2, [r3, #16]
	}

	TimerObject->Next = cur;
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	68fa      	ldr	r2, [r7, #12]
 801aca6:	61da      	str	r2, [r3, #28]
	TimerListHead = TimerObject;
 801aca8:	4a05      	ldr	r2, [pc, #20]	@ (801acc0 <TimerInsertNewHeadTimer+0x38>)
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	6013      	str	r3, [r2, #0]
	TimerSetTimeout(TimerListHead);
 801acae:	4b04      	ldr	r3, [pc, #16]	@ (801acc0 <TimerInsertNewHeadTimer+0x38>)
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	4618      	mov	r0, r3
 801acb4:	f7ff ff7c 	bl	801abb0 <TimerSetTimeout>
}
 801acb8:	bf00      	nop
 801acba:	3710      	adds	r7, #16
 801acbc:	46bd      	mov	sp, r7
 801acbe:	bd80      	pop	{r7, pc}
 801acc0:	2000ccbc 	.word	0x2000ccbc

0801acc4 <datetime_to_milisec>:





static uint64_t datetime_to_milisec(int year, int month, int day, int hours, int minutes, int seconds, uint32_t subseconds) {
 801acc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801acc8:	b0a0      	sub	sp, #128	@ 0x80
 801acca:	af00      	add	r7, sp, #0
 801accc:	6278      	str	r0, [r7, #36]	@ 0x24
 801acce:	6239      	str	r1, [r7, #32]
 801acd0:	61fa      	str	r2, [r7, #28]
 801acd2:	61bb      	str	r3, [r7, #24]
    struct tm time_info = {0};
 801acd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801acd8:	2224      	movs	r2, #36	@ 0x24
 801acda:	2100      	movs	r1, #0
 801acdc:	4618      	mov	r0, r3
 801acde:	f000 ff37 	bl	801bb50 <memset>
    time_info.tm_year = year;
 801ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ace4:	663b      	str	r3, [r7, #96]	@ 0x60
    time_info.tm_mon = month - 1;
 801ace6:	6a3b      	ldr	r3, [r7, #32]
 801ace8:	3b01      	subs	r3, #1
 801acea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    time_info.tm_mday = day;
 801acec:	69fb      	ldr	r3, [r7, #28]
 801acee:	65bb      	str	r3, [r7, #88]	@ 0x58
    time_info.tm_hour = hours;
 801acf0:	69bb      	ldr	r3, [r7, #24]
 801acf2:	657b      	str	r3, [r7, #84]	@ 0x54
    time_info.tm_min = minutes;
 801acf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801acf8:	653b      	str	r3, [r7, #80]	@ 0x50
    time_info.tm_sec = seconds;
 801acfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801acfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    struct tm time_info_ref = {
 801ad00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ad04:	2224      	movs	r2, #36	@ 0x24
 801ad06:	2100      	movs	r1, #0
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f000 ff21 	bl	801bb50 <memset>
 801ad0e:	2301      	movs	r3, #1
 801ad10:	637b      	str	r3, [r7, #52]	@ 0x34
		.tm_hour = 0,
		.tm_min = 0,
		.tm_sec = 0,
    };

    time_t time_in_seconds = mktime(&time_info) - mktime(&time_info_ref);
 801ad12:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801ad16:	4618      	mov	r0, r3
 801ad18:	f001 f8a4 	bl	801be64 <mktime>
 801ad1c:	4604      	mov	r4, r0
 801ad1e:	460d      	mov	r5, r1
 801ad20:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801ad24:	4618      	mov	r0, r3
 801ad26:	f001 f89d 	bl	801be64 <mktime>
 801ad2a:	4602      	mov	r2, r0
 801ad2c:	460b      	mov	r3, r1
 801ad2e:	1aa1      	subs	r1, r4, r2
 801ad30:	60b9      	str	r1, [r7, #8]
 801ad32:	eb65 0303 	sbc.w	r3, r5, r3
 801ad36:	60fb      	str	r3, [r7, #12]
 801ad38:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801ad3c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    uint64_t time_in_milisec = ((uint64_t)time_in_seconds * 1000) + (1000 - subseconds);
 801ad40:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801ad44:	4602      	mov	r2, r0
 801ad46:	460b      	mov	r3, r1
 801ad48:	f04f 0400 	mov.w	r4, #0
 801ad4c:	f04f 0500 	mov.w	r5, #0
 801ad50:	015d      	lsls	r5, r3, #5
 801ad52:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 801ad56:	0154      	lsls	r4, r2, #5
 801ad58:	4622      	mov	r2, r4
 801ad5a:	462b      	mov	r3, r5
 801ad5c:	ebb2 0800 	subs.w	r8, r2, r0
 801ad60:	eb63 0901 	sbc.w	r9, r3, r1
 801ad64:	f04f 0200 	mov.w	r2, #0
 801ad68:	f04f 0300 	mov.w	r3, #0
 801ad6c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801ad70:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 801ad74:	ea4f 0288 	mov.w	r2, r8, lsl #2
 801ad78:	4690      	mov	r8, r2
 801ad7a:	4699      	mov	r9, r3
 801ad7c:	eb18 0a00 	adds.w	sl, r8, r0
 801ad80:	eb49 0b01 	adc.w	fp, r9, r1
 801ad84:	f04f 0200 	mov.w	r2, #0
 801ad88:	f04f 0300 	mov.w	r3, #0
 801ad8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801ad90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801ad94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801ad98:	4692      	mov	sl, r2
 801ad9a:	469b      	mov	fp, r3
 801ad9c:	4652      	mov	r2, sl
 801ad9e:	465b      	mov	r3, fp
 801ada0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801ada4:	f5c1 717a 	rsb	r1, r1, #1000	@ 0x3e8
 801ada8:	2000      	movs	r0, #0
 801adaa:	6139      	str	r1, [r7, #16]
 801adac:	6178      	str	r0, [r7, #20]
 801adae:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801adb2:	4621      	mov	r1, r4
 801adb4:	1851      	adds	r1, r2, r1
 801adb6:	6039      	str	r1, [r7, #0]
 801adb8:	4629      	mov	r1, r5
 801adba:	eb43 0101 	adc.w	r1, r3, r1
 801adbe:	6079      	str	r1, [r7, #4]
 801adc0:	e9d7 3400 	ldrd	r3, r4, [r7]
 801adc4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70

    return time_in_milisec;
 801adc8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
}
 801adcc:	4610      	mov	r0, r2
 801adce:	4619      	mov	r1, r3
 801add0:	3780      	adds	r7, #128	@ 0x80
 801add2:	46bd      	mov	sp, r7
 801add4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801add8 <subseconds_to_datetime>:
    pTime->Minutes = time_info->tm_min;
    pTime->Seconds = time_info->tm_sec;
    pTime->SubSeconds = 1000 - Subseconds;
}

static void subseconds_to_datetime(uint64_t Subseconds, RTC_DateTypeDef *pDate, RTC_TimeTypeDef *pTime) {
 801add8:	b580      	push	{r7, lr}
 801adda:	b088      	sub	sp, #32
 801addc:	af00      	add	r7, sp, #0
 801adde:	e9c7 0102 	strd	r0, r1, [r7, #8]
 801ade2:	607a      	str	r2, [r7, #4]
 801ade4:	603b      	str	r3, [r7, #0]
	uint32_t _sub = Subseconds%1000;
 801ade6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801adea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801adee:	f04f 0300 	mov.w	r3, #0
 801adf2:	f7e5 ff59 	bl	8000ca8 <__aeabi_uldivmod>
 801adf6:	4613      	mov	r3, r2
 801adf8:	61fb      	str	r3, [r7, #28]
	time_t _sec = (time_t)(Subseconds/1000);
 801adfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801adfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ae02:	f04f 0300 	mov.w	r3, #0
 801ae06:	f7e5 ff4f 	bl	8000ca8 <__aeabi_uldivmod>
 801ae0a:	4602      	mov	r2, r0
 801ae0c:	460b      	mov	r3, r1
 801ae0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	struct tm *time_info = gmtime(&_sec);
 801ae12:	f107 0310 	add.w	r3, r7, #16
 801ae16:	4618      	mov	r0, r3
 801ae18:	f000 fea2 	bl	801bb60 <gmtime>
 801ae1c:	61b8      	str	r0, [r7, #24]

    pDate->Date = time_info->tm_mday;
 801ae1e:	69bb      	ldr	r3, [r7, #24]
 801ae20:	68db      	ldr	r3, [r3, #12]
 801ae22:	b2da      	uxtb	r2, r3
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	709a      	strb	r2, [r3, #2]
    pDate->Month = time_info->tm_mon + 1;
 801ae28:	69bb      	ldr	r3, [r7, #24]
 801ae2a:	691b      	ldr	r3, [r3, #16]
 801ae2c:	b2db      	uxtb	r3, r3
 801ae2e:	3301      	adds	r3, #1
 801ae30:	b2da      	uxtb	r2, r3
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	705a      	strb	r2, [r3, #1]
    pDate->Year = time_info->tm_year - 70;
 801ae36:	69bb      	ldr	r3, [r7, #24]
 801ae38:	695b      	ldr	r3, [r3, #20]
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	3b46      	subs	r3, #70	@ 0x46
 801ae3e:	b2da      	uxtb	r2, r3
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	70da      	strb	r2, [r3, #3]
    pTime->Hours = time_info->tm_hour;
 801ae44:	69bb      	ldr	r3, [r7, #24]
 801ae46:	689b      	ldr	r3, [r3, #8]
 801ae48:	b2da      	uxtb	r2, r3
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	701a      	strb	r2, [r3, #0]
    pTime->Minutes = time_info->tm_min;
 801ae4e:	69bb      	ldr	r3, [r7, #24]
 801ae50:	685b      	ldr	r3, [r3, #4]
 801ae52:	b2da      	uxtb	r2, r3
 801ae54:	683b      	ldr	r3, [r7, #0]
 801ae56:	705a      	strb	r2, [r3, #1]
    pTime->Seconds = time_info->tm_sec;
 801ae58:	69bb      	ldr	r3, [r7, #24]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	b2da      	uxtb	r2, r3
 801ae5e:	683b      	ldr	r3, [r7, #0]
 801ae60:	709a      	strb	r2, [r3, #2]
    pTime->SubSeconds = 1000 - _sub;
 801ae62:	69fb      	ldr	r3, [r7, #28]
 801ae64:	f5c3 727a 	rsb	r2, r3, #1000	@ 0x3e8
 801ae68:	683b      	ldr	r3, [r7, #0]
 801ae6a:	605a      	str	r2, [r3, #4]
}
 801ae6c:	bf00      	nop
 801ae6e:	3720      	adds	r7, #32
 801ae70:	46bd      	mov	sp, r7
 801ae72:	bd80      	pop	{r7, pc}

0801ae74 <TIMER_IF_Init>:




/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void) {
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b082      	sub	sp, #8
 801ae78:	af00      	add	r7, sp, #0
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 801ae7a:	2300      	movs	r3, #0
 801ae7c:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN TIMER_IF_Init */

	/* USER CODE END TIMER_IF_Init */
	if (RTC_Initialized == false) {
 801ae7e:	4b10      	ldr	r3, [pc, #64]	@ (801aec0 <TIMER_IF_Init+0x4c>)
 801ae80:	781b      	ldrb	r3, [r3, #0]
 801ae82:	f083 0301 	eor.w	r3, r3, #1
 801ae86:	b2db      	uxtb	r3, r3
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d013      	beq.n	801aeb4 <TIMER_IF_Init+0x40>
		/*Init RTC*/
		extern void MX_RTC_Init();
		MX_RTC_Init();
 801ae8c:	f7e6 fcb8 	bl	8001800 <MX_RTC_Init>
		/*Stop Timer */
		TIMER_IF_StopTimer();
 801ae90:	f000 f87a 	bl	801af88 <TIMER_IF_StopTimer>
		/*DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 801ae94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ae98:	480a      	ldr	r0, [pc, #40]	@ (801aec4 <TIMER_IF_Init+0x50>)
 801ae9a:	f7ea fe49 	bl	8005b30 <HAL_RTC_DeactivateAlarm>
		/*Enable Direct Read of the calendar registers (not through Shadow) */
		HAL_RTCEx_EnableBypassShadow(&hrtc);
 801ae9e:	4809      	ldr	r0, [pc, #36]	@ (801aec4 <TIMER_IF_Init+0x50>)
 801aea0:	f7ea fff0 	bl	8005e84 <HAL_RTCEx_EnableBypassShadow>
		/*Initialize MSB ticks*/
		TIMER_IF_BkUp_Write_MSBticks(0);
 801aea4:	2000      	movs	r0, #0
 801aea6:	f000 f9af 	bl	801b208 <TIMER_IF_BkUp_Write_MSBticks>
		TIMER_IF_SetTimerContext();
 801aeaa:	f000 f887 	bl	801afbc <TIMER_IF_SetTimerContext>
		/* Register a task to associate to UTIL_TIMER_Irq() interrupt */
		UTIL_TIMER_IRQ_MAP_INIT();

		RTC_Initialized = true;
 801aeae:	4b04      	ldr	r3, [pc, #16]	@ (801aec0 <TIMER_IF_Init+0x4c>)
 801aeb0:	2201      	movs	r2, #1
 801aeb2:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 801aeb4:	79fb      	ldrb	r3, [r7, #7]
}
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	3708      	adds	r7, #8
 801aeba:	46bd      	mov	sp, r7
 801aebc:	bd80      	pop	{r7, pc}
 801aebe:	bf00      	nop
 801aec0:	2000ccc0 	.word	0x2000ccc0
 801aec4:	200009ec 	.word	0x200009ec

0801aec8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint64_t timeout) {
 801aec8:	b5b0      	push	{r4, r5, r7, lr}
 801aeca:	b094      	sub	sp, #80	@ 0x50
 801aecc:	af00      	add	r7, sp, #0
 801aece:	e9c7 0100 	strd	r0, r1, [r7]
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 801aed2:	2300      	movs	r3, #0
 801aed4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	RTC_AlarmTypeDef sAlarm = {0};
 801aed8:	f107 0320 	add.w	r3, r7, #32
 801aedc:	222c      	movs	r2, #44	@ 0x2c
 801aede:	2100      	movs	r1, #0
 801aee0:	4618      	mov	r0, r3
 801aee2:	f000 fe35 	bl	801bb50 <memset>
	RTC_TimeTypeDef sTime = {0};
 801aee6:	f107 030c 	add.w	r3, r7, #12
 801aeea:	2200      	movs	r2, #0
 801aeec:	601a      	str	r2, [r3, #0]
 801aeee:	605a      	str	r2, [r3, #4]
 801aef0:	609a      	str	r2, [r3, #8]
 801aef2:	60da      	str	r2, [r3, #12]
 801aef4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 801aef6:	2300      	movs	r3, #0
 801aef8:	60bb      	str	r3, [r7, #8]

	/*Stop timer if one is already started*/
	TIMER_IF_StopTimer();
 801aefa:	f000 f845 	bl	801af88 <TIMER_IF_StopTimer>
	timeout += RtcTimerContext;
 801aefe:	4b20      	ldr	r3, [pc, #128]	@ (801af80 <TIMER_IF_StartTimer+0xb8>)
 801af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af04:	e9d7 0100 	ldrd	r0, r1, [r7]
 801af08:	1884      	adds	r4, r0, r2
 801af0a:	eb41 0503 	adc.w	r5, r1, r3
 801af0e:	e9c7 4500 	strd	r4, r5, [r7]
	subseconds_to_datetime(timeout, &sDate, &sTime);
 801af12:	f107 030c 	add.w	r3, r7, #12
 801af16:	f107 0208 	add.w	r2, r7, #8
 801af1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801af1e:	f7ff ff5b 	bl	801add8 <subseconds_to_datetime>

	/* starts timer*/
	sAlarm.AlarmTime.Hours = sTime.Hours;
 801af22:	7b3b      	ldrb	r3, [r7, #12]
 801af24:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.AlarmTime.Minutes = sTime.Minutes;
 801af28:	7b7b      	ldrb	r3, [r7, #13]
 801af2a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	sAlarm.AlarmTime.Seconds = sTime.Seconds;
 801af2e:	7bbb      	ldrb	r3, [r7, #14]
 801af30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	sAlarm.AlarmTime.SubSeconds = sTime.SubSeconds;
 801af34:	693b      	ldr	r3, [r7, #16]
 801af36:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = sDate.Date;
 801af38:	7abb      	ldrb	r3, [r7, #10]
 801af3a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801af3e:	2300      	movs	r3, #0
 801af40:	637b      	str	r3, [r7, #52]	@ 0x34
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 801af42:	f04f 6370 	mov.w	r3, #251658240	@ 0xf000000
 801af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801af48:	2300      	movs	r3, #0
 801af4a:	643b      	str	r3, [r7, #64]	@ 0x40
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801af4c:	2300      	movs	r3, #0
 801af4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801af50:	2300      	movs	r3, #0
 801af52:	633b      	str	r3, [r7, #48]	@ 0x30
	sAlarm.Alarm = RTC_ALARM_A;
 801af54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801af58:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 801af5a:	f107 0320 	add.w	r3, r7, #32
 801af5e:	2200      	movs	r2, #0
 801af60:	4619      	mov	r1, r3
 801af62:	4808      	ldr	r0, [pc, #32]	@ (801af84 <TIMER_IF_StartTimer+0xbc>)
 801af64:	f7ea fca8 	bl	80058b8 <HAL_RTC_SetAlarm_IT>
 801af68:	4603      	mov	r3, r0
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d001      	beq.n	801af72 <TIMER_IF_StartTimer+0xaa>
		Error_Handler();
 801af6e:	f7e6 fc41 	bl	80017f4 <Error_Handler>
	}

	return ret;
 801af72:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801af76:	4618      	mov	r0, r3
 801af78:	3750      	adds	r7, #80	@ 0x50
 801af7a:	46bd      	mov	sp, r7
 801af7c:	bdb0      	pop	{r4, r5, r7, pc}
 801af7e:	bf00      	nop
 801af80:	2000ccc8 	.word	0x2000ccc8
 801af84:	200009ec 	.word	0x200009ec

0801af88 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void) {
 801af88:	b580      	push	{r7, lr}
 801af8a:	b082      	sub	sp, #8
 801af8c:	af00      	add	r7, sp, #0
	UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 801af8e:	2300      	movs	r3, #0
 801af90:	71fb      	strb	r3, [r7, #7]

	/* Clear RTC Alarm Flag */
	__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 801af92:	4b09      	ldr	r3, [pc, #36]	@ (801afb8 <TIMER_IF_StopTimer+0x30>)
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	68db      	ldr	r3, [r3, #12]
 801af98:	b2da      	uxtb	r2, r3
 801af9a:	4b07      	ldr	r3, [pc, #28]	@ (801afb8 <TIMER_IF_StopTimer+0x30>)
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 801afa2:	60da      	str	r2, [r3, #12]
	/* Disable the Alarm A interrupt */
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 801afa4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801afa8:	4803      	ldr	r0, [pc, #12]	@ (801afb8 <TIMER_IF_StopTimer+0x30>)
 801afaa:	f7ea fdc1 	bl	8005b30 <HAL_RTC_DeactivateAlarm>

	return ret;
 801afae:	79fb      	ldrb	r3, [r7, #7]
}
 801afb0:	4618      	mov	r0, r3
 801afb2:	3708      	adds	r7, #8
 801afb4:	46bd      	mov	sp, r7
 801afb6:	bd80      	pop	{r7, pc}
 801afb8:	200009ec 	.word	0x200009ec

0801afbc <TIMER_IF_SetTimerContext>:

uint64_t TIMER_IF_SetTimerContext(void) {
 801afbc:	b580      	push	{r7, lr}
 801afbe:	af00      	add	r7, sp, #0
	/*store time context*/
	RtcTimerContext = GetTimerTicks();
 801afc0:	f000 f932 	bl	801b228 <GetTimerTicks>
 801afc4:	4602      	mov	r2, r0
 801afc6:	460b      	mov	r3, r1
 801afc8:	4904      	ldr	r1, [pc, #16]	@ (801afdc <TIMER_IF_SetTimerContext+0x20>)
 801afca:	e9c1 2300 	strd	r2, r3, [r1]
	/*return time context*/
	return RtcTimerContext;
 801afce:	4b03      	ldr	r3, [pc, #12]	@ (801afdc <TIMER_IF_SetTimerContext+0x20>)
 801afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 801afd4:	4610      	mov	r0, r2
 801afd6:	4619      	mov	r1, r3
 801afd8:	bd80      	pop	{r7, pc}
 801afda:	bf00      	nop
 801afdc:	2000ccc8 	.word	0x2000ccc8

0801afe0 <TIMER_IF_GetTimerContext>:

uint64_t TIMER_IF_GetTimerContext(void) {
 801afe0:	b480      	push	{r7}
 801afe2:	af00      	add	r7, sp, #0
	return RtcTimerContext;
 801afe4:	4b04      	ldr	r3, [pc, #16]	@ (801aff8 <TIMER_IF_GetTimerContext+0x18>)
 801afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 801afea:	4610      	mov	r0, r2
 801afec:	4619      	mov	r1, r3
 801afee:	46bd      	mov	sp, r7
 801aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff4:	4770      	bx	lr
 801aff6:	bf00      	nop
 801aff8:	2000ccc8 	.word	0x2000ccc8

0801affc <TIMER_IF_GetTimerElapsedTime>:

uint64_t TIMER_IF_GetTimerElapsedTime(void) {
 801affc:	b5b0      	push	{r4, r5, r7, lr}
 801affe:	b082      	sub	sp, #8
 801b000:	af00      	add	r7, sp, #0
	uint64_t ret = 0;
 801b002:	f04f 0200 	mov.w	r2, #0
 801b006:	f04f 0300 	mov.w	r3, #0
 801b00a:	e9c7 2300 	strd	r2, r3, [r7]
	ret = ((uint64_t) (GetTimerTicks() - RtcTimerContext));
 801b00e:	f000 f90b 	bl	801b228 <GetTimerTicks>
 801b012:	4b07      	ldr	r3, [pc, #28]	@ (801b030 <TIMER_IF_GetTimerElapsedTime+0x34>)
 801b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b018:	1a84      	subs	r4, r0, r2
 801b01a:	eb61 0503 	sbc.w	r5, r1, r3
 801b01e:	e9c7 4500 	strd	r4, r5, [r7]

	return ret;
 801b022:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801b026:	4610      	mov	r0, r2
 801b028:	4619      	mov	r1, r3
 801b02a:	3708      	adds	r7, #8
 801b02c:	46bd      	mov	sp, r7
 801b02e:	bdb0      	pop	{r4, r5, r7, pc}
 801b030:	2000ccc8 	.word	0x2000ccc8

0801b034 <TIMER_IF_GetTimerValue>:

uint64_t TIMER_IF_GetTimerValue(void) {
 801b034:	b580      	push	{r7, lr}
 801b036:	b082      	sub	sp, #8
 801b038:	af00      	add	r7, sp, #0
	uint64_t ret = 0;
 801b03a:	f04f 0200 	mov.w	r2, #0
 801b03e:	f04f 0300 	mov.w	r3, #0
 801b042:	e9c7 2300 	strd	r2, r3, [r7]

	if (RTC_Initialized == true)
 801b046:	4b07      	ldr	r3, [pc, #28]	@ (801b064 <TIMER_IF_GetTimerValue+0x30>)
 801b048:	781b      	ldrb	r3, [r3, #0]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d003      	beq.n	801b056 <TIMER_IF_GetTimerValue+0x22>
		ret = GetTimerTicks();
 801b04e:	f000 f8eb 	bl	801b228 <GetTimerTicks>
 801b052:	e9c7 0100 	strd	r0, r1, [r7]

	return ret;
 801b056:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801b05a:	4610      	mov	r0, r2
 801b05c:	4619      	mov	r1, r3
 801b05e:	3708      	adds	r7, #8
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	2000ccc0 	.word	0x2000ccc0

0801b068 <TIMER_IF_GetMinimumTimeout>:

uint64_t TIMER_IF_GetMinimumTimeout(void) {
 801b068:	b480      	push	{r7}
 801b06a:	b083      	sub	sp, #12
 801b06c:	af00      	add	r7, sp, #0
	uint64_t ret = 0;
 801b06e:	f04f 0200 	mov.w	r2, #0
 801b072:	f04f 0300 	mov.w	r3, #0
 801b076:	e9c7 2300 	strd	r2, r3, [r7]
	ret = (MIN_ALARM_DELAY);
 801b07a:	f04f 0201 	mov.w	r2, #1
 801b07e:	f04f 0300 	mov.w	r3, #0
 801b082:	e9c7 2300 	strd	r2, r3, [r7]

	return ret;
 801b086:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801b08a:	4610      	mov	r0, r2
 801b08c:	4619      	mov	r1, r3
 801b08e:	370c      	adds	r7, #12
 801b090:	46bd      	mov	sp, r7
 801b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b096:	4770      	bx	lr

0801b098 <TIMER_IF_Convert_ms2Tick>:

uint64_t TIMER_IF_Convert_ms2Tick(uint64_t timeMilliSec) {
 801b098:	b480      	push	{r7}
 801b09a:	b083      	sub	sp, #12
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	e9c7 0100 	strd	r0, r1, [r7]
	return timeMilliSec;
 801b0a2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801b0a6:	4610      	mov	r0, r2
 801b0a8:	4619      	mov	r1, r3
 801b0aa:	370c      	adds	r7, #12
 801b0ac:	46bd      	mov	sp, r7
 801b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0b2:	4770      	bx	lr

0801b0b4 <TIMER_IF_Convert_Tick2ms>:

uint64_t TIMER_IF_Convert_Tick2ms(uint64_t tick) {
 801b0b4:	b480      	push	{r7}
 801b0b6:	b083      	sub	sp, #12
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	e9c7 0100 	strd	r0, r1, [r7]
	return tick;
 801b0be:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 801b0c2:	4610      	mov	r0, r2
 801b0c4:	4619      	mov	r1, r3
 801b0c6:	370c      	adds	r7, #12
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ce:	4770      	bx	lr

0801b0d0 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint64_t delay) {
 801b0d0:	b5b0      	push	{r4, r5, r7, lr}
 801b0d2:	b086      	sub	sp, #24
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 801b0da:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b0de:	f7ff ffdb 	bl	801b098 <TIMER_IF_Convert_ms2Tick>
 801b0e2:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint64_t timeout = GetTimerTicks();
 801b0e6:	f000 f89f 	bl	801b228 <GetTimerTicks>
 801b0ea:	e9c7 0102 	strd	r0, r1, [r7, #8]

	/* Wait delay ms */
	while (((GetTimerTicks() - timeout)) < delayTicks)
 801b0ee:	e000      	b.n	801b0f2 <TIMER_IF_DelayMs+0x22>
		__NOP();
 801b0f0:	bf00      	nop
	while (((GetTimerTicks() - timeout)) < delayTicks)
 801b0f2:	f000 f899 	bl	801b228 <GetTimerTicks>
 801b0f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b0fa:	1a84      	subs	r4, r0, r2
 801b0fc:	eb61 0503 	sbc.w	r5, r1, r3
 801b100:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b104:	4294      	cmp	r4, r2
 801b106:	eb75 0303 	sbcs.w	r3, r5, r3
 801b10a:	d3f1      	bcc.n	801b0f0 <TIMER_IF_DelayMs+0x20>
}
 801b10c:	bf00      	nop
 801b10e:	bf00      	nop
 801b110:	3718      	adds	r7, #24
 801b112:	46bd      	mov	sp, r7
 801b114:	bdb0      	pop	{r4, r5, r7, pc}

0801b116 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 801b116:	b580      	push	{r7, lr}
 801b118:	b082      	sub	sp, #8
 801b11a:	af00      	add	r7, sp, #0
 801b11c:	6078      	str	r0, [r7, #4]
	UTIL_TIMER_IRQ_MAP_PROCESS();
 801b11e:	f7ff fc51 	bl	801a9c4 <UTIL_TIMER_IRQ_Handler>
}
 801b122:	bf00      	nop
 801b124:	3708      	adds	r7, #8
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}

0801b12a <TIMER_IF_GetTime>:
	uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
	TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
}
*/

uint64_t TIMER_IF_GetTime(uint16_t *mSeconds) {
 801b12a:	b5b0      	push	{r4, r5, r7, lr}
 801b12c:	b086      	sub	sp, #24
 801b12e:	af00      	add	r7, sp, #0
 801b130:	6078      	str	r0, [r7, #4]
	uint32_t seconds = 0;
 801b132:	2300      	movs	r3, #0
 801b134:	617b      	str	r3, [r7, #20]

	uint64_t ticks = GetTimerTicks();
 801b136:	f000 f877 	bl	801b228 <GetTimerTicks>
 801b13a:	e9c7 0102 	strd	r0, r1, [r7, #8]
	seconds = ticks/1000;
 801b13e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801b142:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b146:	f04f 0300 	mov.w	r3, #0
 801b14a:	f7e5 fdad 	bl	8000ca8 <__aeabi_uldivmod>
 801b14e:	4602      	mov	r2, r0
 801b150:	460b      	mov	r3, r1
 801b152:	4613      	mov	r3, r2
 801b154:	617b      	str	r3, [r7, #20]
	*mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 801b156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801b15a:	f7ff ffab 	bl	801b0b4 <TIMER_IF_Convert_Tick2ms>
 801b15e:	4602      	mov	r2, r0
 801b160:	460b      	mov	r3, r1
 801b162:	b292      	uxth	r2, r2
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	801a      	strh	r2, [r3, #0]

	return seconds;
 801b168:	697b      	ldr	r3, [r7, #20]
 801b16a:	2200      	movs	r2, #0
 801b16c:	461c      	mov	r4, r3
 801b16e:	4615      	mov	r5, r2
 801b170:	4622      	mov	r2, r4
 801b172:	462b      	mov	r3, r5
}
 801b174:	4610      	mov	r0, r2
 801b176:	4619      	mov	r1, r3
 801b178:	3718      	adds	r7, #24
 801b17a:	46bd      	mov	sp, r7
 801b17c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b180 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds) {
 801b180:	b580      	push	{r7, lr}
 801b182:	b082      	sub	sp, #8
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 801b188:	687a      	ldr	r2, [r7, #4]
 801b18a:	2100      	movs	r1, #0
 801b18c:	4803      	ldr	r0, [pc, #12]	@ (801b19c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 801b18e:	f7ea feb9 	bl	8005f04 <HAL_RTCEx_BKUPWrite>
}
 801b192:	bf00      	nop
 801b194:	3708      	adds	r7, #8
 801b196:	46bd      	mov	sp, r7
 801b198:	bd80      	pop	{r7, pc}
 801b19a:	bf00      	nop
 801b19c:	200009ec 	.word	0x200009ec

0801b1a0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds) {
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	b082      	sub	sp, #8
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 801b1a8:	687a      	ldr	r2, [r7, #4]
 801b1aa:	2101      	movs	r1, #1
 801b1ac:	4803      	ldr	r0, [pc, #12]	@ (801b1bc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 801b1ae:	f7ea fea9 	bl	8005f04 <HAL_RTCEx_BKUPWrite>
}
 801b1b2:	bf00      	nop
 801b1b4:	3708      	adds	r7, #8
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	bd80      	pop	{r7, pc}
 801b1ba:	bf00      	nop
 801b1bc:	200009ec 	.word	0x200009ec

0801b1c0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void) {
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b082      	sub	sp, #8
 801b1c4:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	607b      	str	r3, [r7, #4]
	ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 801b1ca:	2100      	movs	r1, #0
 801b1cc:	4804      	ldr	r0, [pc, #16]	@ (801b1e0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 801b1ce:	f7ea feb2 	bl	8005f36 <HAL_RTCEx_BKUPRead>
 801b1d2:	6078      	str	r0, [r7, #4]

	return ret;
 801b1d4:	687b      	ldr	r3, [r7, #4]
}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	3708      	adds	r7, #8
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd80      	pop	{r7, pc}
 801b1de:	bf00      	nop
 801b1e0:	200009ec 	.word	0x200009ec

0801b1e4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void) {
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b082      	sub	sp, #8
 801b1e8:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 801b1ea:	2300      	movs	r3, #0
 801b1ec:	607b      	str	r3, [r7, #4]

	ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 801b1ee:	2101      	movs	r1, #1
 801b1f0:	4804      	ldr	r0, [pc, #16]	@ (801b204 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 801b1f2:	f7ea fea0 	bl	8005f36 <HAL_RTCEx_BKUPRead>
 801b1f6:	6078      	str	r0, [r7, #4]

	return ret;
 801b1f8:	687b      	ldr	r3, [r7, #4]
}
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	3708      	adds	r7, #8
 801b1fe:	46bd      	mov	sp, r7
 801b200:	bd80      	pop	{r7, pc}
 801b202:	bf00      	nop
 801b204:	200009ec 	.word	0x200009ec

0801b208 <TIMER_IF_BkUp_Write_MSBticks>:



/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks) {
 801b208:	b580      	push	{r7, lr}
 801b20a:	b082      	sub	sp, #8
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 801b210:	687a      	ldr	r2, [r7, #4]
 801b212:	2102      	movs	r1, #2
 801b214:	4803      	ldr	r0, [pc, #12]	@ (801b224 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 801b216:	f7ea fe75 	bl	8005f04 <HAL_RTCEx_BKUPWrite>
}
 801b21a:	bf00      	nop
 801b21c:	3708      	adds	r7, #8
 801b21e:	46bd      	mov	sp, r7
 801b220:	bd80      	pop	{r7, pc}
 801b222:	bf00      	nop
 801b224:	200009ec 	.word	0x200009ec

0801b228 <GetTimerTicks>:
	MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);

	return MSBticks;
}

static inline uint64_t GetTimerTicks(void) {
 801b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b22a:	b08b      	sub	sp, #44	@ 0x2c
 801b22c:	af04      	add	r7, sp, #16
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 801b22e:	463b      	mov	r3, r7
 801b230:	2200      	movs	r2, #0
 801b232:	4619      	mov	r1, r3
 801b234:	4812      	ldr	r0, [pc, #72]	@ (801b280 <GetTimerTicks+0x58>)
 801b236:	f7ea fa0e 	bl	8005656 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 801b23a:	f107 0314 	add.w	r3, r7, #20
 801b23e:	2200      	movs	r2, #0
 801b240:	4619      	mov	r1, r3
 801b242:	480f      	ldr	r0, [pc, #60]	@ (801b280 <GetTimerTicks+0x58>)
 801b244:	f7ea faea 	bl	800581c <HAL_RTC_GetDate>

	return datetime_to_milisec(gDate.Year, gDate.Month, gDate.Date, gTime.Hours, gTime.Minutes, gTime.Seconds, gTime.SubSeconds);
 801b248:	7dfb      	ldrb	r3, [r7, #23]
 801b24a:	4618      	mov	r0, r3
 801b24c:	7d7b      	ldrb	r3, [r7, #21]
 801b24e:	461c      	mov	r4, r3
 801b250:	7dbb      	ldrb	r3, [r7, #22]
 801b252:	461d      	mov	r5, r3
 801b254:	783b      	ldrb	r3, [r7, #0]
 801b256:	461e      	mov	r6, r3
 801b258:	787b      	ldrb	r3, [r7, #1]
 801b25a:	461a      	mov	r2, r3
 801b25c:	78bb      	ldrb	r3, [r7, #2]
 801b25e:	4619      	mov	r1, r3
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	9302      	str	r3, [sp, #8]
 801b264:	9101      	str	r1, [sp, #4]
 801b266:	9200      	str	r2, [sp, #0]
 801b268:	4633      	mov	r3, r6
 801b26a:	462a      	mov	r2, r5
 801b26c:	4621      	mov	r1, r4
 801b26e:	f7ff fd29 	bl	801acc4 <datetime_to_milisec>
 801b272:	4602      	mov	r2, r0
 801b274:	460b      	mov	r3, r1
}
 801b276:	4610      	mov	r0, r2
 801b278:	4619      	mov	r1, r3
 801b27a:	371c      	adds	r7, #28
 801b27c:	46bd      	mov	sp, r7
 801b27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b280:	200009ec 	.word	0x200009ec

0801b284 <malloc>:
 801b284:	4b02      	ldr	r3, [pc, #8]	@ (801b290 <malloc+0xc>)
 801b286:	4601      	mov	r1, r0
 801b288:	6818      	ldr	r0, [r3, #0]
 801b28a:	f000 b80b 	b.w	801b2a4 <_malloc_r>
 801b28e:	bf00      	nop
 801b290:	20000674 	.word	0x20000674

0801b294 <free>:
 801b294:	4b02      	ldr	r3, [pc, #8]	@ (801b2a0 <free+0xc>)
 801b296:	4601      	mov	r1, r0
 801b298:	6818      	ldr	r0, [r3, #0]
 801b29a:	f001 bb87 	b.w	801c9ac <_free_r>
 801b29e:	bf00      	nop
 801b2a0:	20000674 	.word	0x20000674

0801b2a4 <_malloc_r>:
 801b2a4:	f101 030b 	add.w	r3, r1, #11
 801b2a8:	2b16      	cmp	r3, #22
 801b2aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ae:	4605      	mov	r5, r0
 801b2b0:	d906      	bls.n	801b2c0 <_malloc_r+0x1c>
 801b2b2:	f033 0707 	bics.w	r7, r3, #7
 801b2b6:	d504      	bpl.n	801b2c2 <_malloc_r+0x1e>
 801b2b8:	230c      	movs	r3, #12
 801b2ba:	602b      	str	r3, [r5, #0]
 801b2bc:	2400      	movs	r4, #0
 801b2be:	e1a3      	b.n	801b608 <_malloc_r+0x364>
 801b2c0:	2710      	movs	r7, #16
 801b2c2:	42b9      	cmp	r1, r7
 801b2c4:	d8f8      	bhi.n	801b2b8 <_malloc_r+0x14>
 801b2c6:	4628      	mov	r0, r5
 801b2c8:	f000 fa26 	bl	801b718 <__malloc_lock>
 801b2cc:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 801b2d0:	4eaf      	ldr	r6, [pc, #700]	@ (801b590 <_malloc_r+0x2ec>)
 801b2d2:	d237      	bcs.n	801b344 <_malloc_r+0xa0>
 801b2d4:	f107 0208 	add.w	r2, r7, #8
 801b2d8:	4432      	add	r2, r6
 801b2da:	f1a2 0108 	sub.w	r1, r2, #8
 801b2de:	6854      	ldr	r4, [r2, #4]
 801b2e0:	428c      	cmp	r4, r1
 801b2e2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801b2e6:	d102      	bne.n	801b2ee <_malloc_r+0x4a>
 801b2e8:	68d4      	ldr	r4, [r2, #12]
 801b2ea:	42a2      	cmp	r2, r4
 801b2ec:	d010      	beq.n	801b310 <_malloc_r+0x6c>
 801b2ee:	6863      	ldr	r3, [r4, #4]
 801b2f0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801b2f4:	f023 0303 	bic.w	r3, r3, #3
 801b2f8:	60ca      	str	r2, [r1, #12]
 801b2fa:	4423      	add	r3, r4
 801b2fc:	6091      	str	r1, [r2, #8]
 801b2fe:	685a      	ldr	r2, [r3, #4]
 801b300:	f042 0201 	orr.w	r2, r2, #1
 801b304:	605a      	str	r2, [r3, #4]
 801b306:	4628      	mov	r0, r5
 801b308:	f000 fa0c 	bl	801b724 <__malloc_unlock>
 801b30c:	3408      	adds	r4, #8
 801b30e:	e17b      	b.n	801b608 <_malloc_r+0x364>
 801b310:	3302      	adds	r3, #2
 801b312:	6934      	ldr	r4, [r6, #16]
 801b314:	499f      	ldr	r1, [pc, #636]	@ (801b594 <_malloc_r+0x2f0>)
 801b316:	428c      	cmp	r4, r1
 801b318:	d077      	beq.n	801b40a <_malloc_r+0x166>
 801b31a:	6862      	ldr	r2, [r4, #4]
 801b31c:	f022 0c03 	bic.w	ip, r2, #3
 801b320:	ebac 0007 	sub.w	r0, ip, r7
 801b324:	280f      	cmp	r0, #15
 801b326:	dd48      	ble.n	801b3ba <_malloc_r+0x116>
 801b328:	19e2      	adds	r2, r4, r7
 801b32a:	f040 0301 	orr.w	r3, r0, #1
 801b32e:	f047 0701 	orr.w	r7, r7, #1
 801b332:	6067      	str	r7, [r4, #4]
 801b334:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801b338:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801b33c:	6053      	str	r3, [r2, #4]
 801b33e:	f844 000c 	str.w	r0, [r4, ip]
 801b342:	e7e0      	b.n	801b306 <_malloc_r+0x62>
 801b344:	0a7b      	lsrs	r3, r7, #9
 801b346:	d02a      	beq.n	801b39e <_malloc_r+0xfa>
 801b348:	2b04      	cmp	r3, #4
 801b34a:	d812      	bhi.n	801b372 <_malloc_r+0xce>
 801b34c:	09bb      	lsrs	r3, r7, #6
 801b34e:	3338      	adds	r3, #56	@ 0x38
 801b350:	1c5a      	adds	r2, r3, #1
 801b352:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801b356:	f1a2 0c08 	sub.w	ip, r2, #8
 801b35a:	6854      	ldr	r4, [r2, #4]
 801b35c:	4564      	cmp	r4, ip
 801b35e:	d006      	beq.n	801b36e <_malloc_r+0xca>
 801b360:	6862      	ldr	r2, [r4, #4]
 801b362:	f022 0203 	bic.w	r2, r2, #3
 801b366:	1bd0      	subs	r0, r2, r7
 801b368:	280f      	cmp	r0, #15
 801b36a:	dd1c      	ble.n	801b3a6 <_malloc_r+0x102>
 801b36c:	3b01      	subs	r3, #1
 801b36e:	3301      	adds	r3, #1
 801b370:	e7cf      	b.n	801b312 <_malloc_r+0x6e>
 801b372:	2b14      	cmp	r3, #20
 801b374:	d801      	bhi.n	801b37a <_malloc_r+0xd6>
 801b376:	335b      	adds	r3, #91	@ 0x5b
 801b378:	e7ea      	b.n	801b350 <_malloc_r+0xac>
 801b37a:	2b54      	cmp	r3, #84	@ 0x54
 801b37c:	d802      	bhi.n	801b384 <_malloc_r+0xe0>
 801b37e:	0b3b      	lsrs	r3, r7, #12
 801b380:	336e      	adds	r3, #110	@ 0x6e
 801b382:	e7e5      	b.n	801b350 <_malloc_r+0xac>
 801b384:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 801b388:	d802      	bhi.n	801b390 <_malloc_r+0xec>
 801b38a:	0bfb      	lsrs	r3, r7, #15
 801b38c:	3377      	adds	r3, #119	@ 0x77
 801b38e:	e7df      	b.n	801b350 <_malloc_r+0xac>
 801b390:	f240 5254 	movw	r2, #1364	@ 0x554
 801b394:	4293      	cmp	r3, r2
 801b396:	d804      	bhi.n	801b3a2 <_malloc_r+0xfe>
 801b398:	0cbb      	lsrs	r3, r7, #18
 801b39a:	337c      	adds	r3, #124	@ 0x7c
 801b39c:	e7d8      	b.n	801b350 <_malloc_r+0xac>
 801b39e:	233f      	movs	r3, #63	@ 0x3f
 801b3a0:	e7d6      	b.n	801b350 <_malloc_r+0xac>
 801b3a2:	237e      	movs	r3, #126	@ 0x7e
 801b3a4:	e7d4      	b.n	801b350 <_malloc_r+0xac>
 801b3a6:	2800      	cmp	r0, #0
 801b3a8:	68e1      	ldr	r1, [r4, #12]
 801b3aa:	db04      	blt.n	801b3b6 <_malloc_r+0x112>
 801b3ac:	68a3      	ldr	r3, [r4, #8]
 801b3ae:	60d9      	str	r1, [r3, #12]
 801b3b0:	608b      	str	r3, [r1, #8]
 801b3b2:	18a3      	adds	r3, r4, r2
 801b3b4:	e7a3      	b.n	801b2fe <_malloc_r+0x5a>
 801b3b6:	460c      	mov	r4, r1
 801b3b8:	e7d0      	b.n	801b35c <_malloc_r+0xb8>
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 801b3c0:	db07      	blt.n	801b3d2 <_malloc_r+0x12e>
 801b3c2:	44a4      	add	ip, r4
 801b3c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801b3c8:	f043 0301 	orr.w	r3, r3, #1
 801b3cc:	f8cc 3004 	str.w	r3, [ip, #4]
 801b3d0:	e799      	b.n	801b306 <_malloc_r+0x62>
 801b3d2:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 801b3d6:	6870      	ldr	r0, [r6, #4]
 801b3d8:	f080 8095 	bcs.w	801b506 <_malloc_r+0x262>
 801b3dc:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 801b3e0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801b3e4:	f04f 0c01 	mov.w	ip, #1
 801b3e8:	3201      	adds	r2, #1
 801b3ea:	fa0c fc0e 	lsl.w	ip, ip, lr
 801b3ee:	ea4c 0000 	orr.w	r0, ip, r0
 801b3f2:	6070      	str	r0, [r6, #4]
 801b3f4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 801b3f8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 801b3fc:	3808      	subs	r0, #8
 801b3fe:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801b402:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801b406:	f8cc 400c 	str.w	r4, [ip, #12]
 801b40a:	1098      	asrs	r0, r3, #2
 801b40c:	2201      	movs	r2, #1
 801b40e:	4082      	lsls	r2, r0
 801b410:	6870      	ldr	r0, [r6, #4]
 801b412:	4290      	cmp	r0, r2
 801b414:	d326      	bcc.n	801b464 <_malloc_r+0x1c0>
 801b416:	4210      	tst	r0, r2
 801b418:	d106      	bne.n	801b428 <_malloc_r+0x184>
 801b41a:	f023 0303 	bic.w	r3, r3, #3
 801b41e:	0052      	lsls	r2, r2, #1
 801b420:	4210      	tst	r0, r2
 801b422:	f103 0304 	add.w	r3, r3, #4
 801b426:	d0fa      	beq.n	801b41e <_malloc_r+0x17a>
 801b428:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801b42c:	46c1      	mov	r9, r8
 801b42e:	469e      	mov	lr, r3
 801b430:	f8d9 400c 	ldr.w	r4, [r9, #12]
 801b434:	454c      	cmp	r4, r9
 801b436:	f040 80b9 	bne.w	801b5ac <_malloc_r+0x308>
 801b43a:	f10e 0e01 	add.w	lr, lr, #1
 801b43e:	f01e 0f03 	tst.w	lr, #3
 801b442:	f109 0908 	add.w	r9, r9, #8
 801b446:	d1f3      	bne.n	801b430 <_malloc_r+0x18c>
 801b448:	0798      	lsls	r0, r3, #30
 801b44a:	f040 80e3 	bne.w	801b614 <_malloc_r+0x370>
 801b44e:	6873      	ldr	r3, [r6, #4]
 801b450:	ea23 0302 	bic.w	r3, r3, r2
 801b454:	6073      	str	r3, [r6, #4]
 801b456:	6870      	ldr	r0, [r6, #4]
 801b458:	0052      	lsls	r2, r2, #1
 801b45a:	4290      	cmp	r0, r2
 801b45c:	d302      	bcc.n	801b464 <_malloc_r+0x1c0>
 801b45e:	2a00      	cmp	r2, #0
 801b460:	f040 80e5 	bne.w	801b62e <_malloc_r+0x38a>
 801b464:	f8d6 a008 	ldr.w	sl, [r6, #8]
 801b468:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b46c:	f023 0903 	bic.w	r9, r3, #3
 801b470:	45b9      	cmp	r9, r7
 801b472:	d304      	bcc.n	801b47e <_malloc_r+0x1da>
 801b474:	eba9 0207 	sub.w	r2, r9, r7
 801b478:	2a0f      	cmp	r2, #15
 801b47a:	f300 8141 	bgt.w	801b700 <_malloc_r+0x45c>
 801b47e:	4b46      	ldr	r3, [pc, #280]	@ (801b598 <_malloc_r+0x2f4>)
 801b480:	6819      	ldr	r1, [r3, #0]
 801b482:	3110      	adds	r1, #16
 801b484:	4439      	add	r1, r7
 801b486:	2008      	movs	r0, #8
 801b488:	9101      	str	r1, [sp, #4]
 801b48a:	f001 f9ff 	bl	801c88c <sysconf>
 801b48e:	4a43      	ldr	r2, [pc, #268]	@ (801b59c <_malloc_r+0x2f8>)
 801b490:	9901      	ldr	r1, [sp, #4]
 801b492:	6813      	ldr	r3, [r2, #0]
 801b494:	3301      	adds	r3, #1
 801b496:	bf1f      	itttt	ne
 801b498:	f101 31ff 	addne.w	r1, r1, #4294967295
 801b49c:	1809      	addne	r1, r1, r0
 801b49e:	4243      	negne	r3, r0
 801b4a0:	4019      	andne	r1, r3
 801b4a2:	4680      	mov	r8, r0
 801b4a4:	4628      	mov	r0, r5
 801b4a6:	9101      	str	r1, [sp, #4]
 801b4a8:	f001 f99e 	bl	801c7e8 <_sbrk_r>
 801b4ac:	1c42      	adds	r2, r0, #1
 801b4ae:	eb0a 0b09 	add.w	fp, sl, r9
 801b4b2:	4604      	mov	r4, r0
 801b4b4:	f000 80f7 	beq.w	801b6a6 <_malloc_r+0x402>
 801b4b8:	4583      	cmp	fp, r0
 801b4ba:	9901      	ldr	r1, [sp, #4]
 801b4bc:	4a37      	ldr	r2, [pc, #220]	@ (801b59c <_malloc_r+0x2f8>)
 801b4be:	d902      	bls.n	801b4c6 <_malloc_r+0x222>
 801b4c0:	45b2      	cmp	sl, r6
 801b4c2:	f040 80f0 	bne.w	801b6a6 <_malloc_r+0x402>
 801b4c6:	4b36      	ldr	r3, [pc, #216]	@ (801b5a0 <_malloc_r+0x2fc>)
 801b4c8:	6818      	ldr	r0, [r3, #0]
 801b4ca:	45a3      	cmp	fp, r4
 801b4cc:	eb00 0e01 	add.w	lr, r0, r1
 801b4d0:	f8c3 e000 	str.w	lr, [r3]
 801b4d4:	f108 3cff 	add.w	ip, r8, #4294967295
 801b4d8:	f040 80ab 	bne.w	801b632 <_malloc_r+0x38e>
 801b4dc:	ea1b 0f0c 	tst.w	fp, ip
 801b4e0:	f040 80a7 	bne.w	801b632 <_malloc_r+0x38e>
 801b4e4:	68b2      	ldr	r2, [r6, #8]
 801b4e6:	4449      	add	r1, r9
 801b4e8:	f041 0101 	orr.w	r1, r1, #1
 801b4ec:	6051      	str	r1, [r2, #4]
 801b4ee:	4a2d      	ldr	r2, [pc, #180]	@ (801b5a4 <_malloc_r+0x300>)
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	6811      	ldr	r1, [r2, #0]
 801b4f4:	428b      	cmp	r3, r1
 801b4f6:	bf88      	it	hi
 801b4f8:	6013      	strhi	r3, [r2, #0]
 801b4fa:	4a2b      	ldr	r2, [pc, #172]	@ (801b5a8 <_malloc_r+0x304>)
 801b4fc:	6811      	ldr	r1, [r2, #0]
 801b4fe:	428b      	cmp	r3, r1
 801b500:	bf88      	it	hi
 801b502:	6013      	strhi	r3, [r2, #0]
 801b504:	e0cf      	b.n	801b6a6 <_malloc_r+0x402>
 801b506:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 801b50a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801b50e:	d218      	bcs.n	801b542 <_malloc_r+0x29e>
 801b510:	ea4f 129c 	mov.w	r2, ip, lsr #6
 801b514:	3238      	adds	r2, #56	@ 0x38
 801b516:	f102 0e01 	add.w	lr, r2, #1
 801b51a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801b51e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 801b522:	45f0      	cmp	r8, lr
 801b524:	d12b      	bne.n	801b57e <_malloc_r+0x2da>
 801b526:	1092      	asrs	r2, r2, #2
 801b528:	f04f 0c01 	mov.w	ip, #1
 801b52c:	fa0c f202 	lsl.w	r2, ip, r2
 801b530:	4302      	orrs	r2, r0
 801b532:	6072      	str	r2, [r6, #4]
 801b534:	e9c4 e802 	strd	lr, r8, [r4, #8]
 801b538:	f8c8 4008 	str.w	r4, [r8, #8]
 801b53c:	f8ce 400c 	str.w	r4, [lr, #12]
 801b540:	e763      	b.n	801b40a <_malloc_r+0x166>
 801b542:	2a14      	cmp	r2, #20
 801b544:	d801      	bhi.n	801b54a <_malloc_r+0x2a6>
 801b546:	325b      	adds	r2, #91	@ 0x5b
 801b548:	e7e5      	b.n	801b516 <_malloc_r+0x272>
 801b54a:	2a54      	cmp	r2, #84	@ 0x54
 801b54c:	d803      	bhi.n	801b556 <_malloc_r+0x2b2>
 801b54e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 801b552:	326e      	adds	r2, #110	@ 0x6e
 801b554:	e7df      	b.n	801b516 <_malloc_r+0x272>
 801b556:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801b55a:	d803      	bhi.n	801b564 <_malloc_r+0x2c0>
 801b55c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 801b560:	3277      	adds	r2, #119	@ 0x77
 801b562:	e7d8      	b.n	801b516 <_malloc_r+0x272>
 801b564:	f240 5e54 	movw	lr, #1364	@ 0x554
 801b568:	4572      	cmp	r2, lr
 801b56a:	bf9a      	itte	ls
 801b56c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 801b570:	327c      	addls	r2, #124	@ 0x7c
 801b572:	227e      	movhi	r2, #126	@ 0x7e
 801b574:	e7cf      	b.n	801b516 <_malloc_r+0x272>
 801b576:	f8de e008 	ldr.w	lr, [lr, #8]
 801b57a:	45f0      	cmp	r8, lr
 801b57c:	d005      	beq.n	801b58a <_malloc_r+0x2e6>
 801b57e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801b582:	f022 0203 	bic.w	r2, r2, #3
 801b586:	4562      	cmp	r2, ip
 801b588:	d8f5      	bhi.n	801b576 <_malloc_r+0x2d2>
 801b58a:	f8de 800c 	ldr.w	r8, [lr, #12]
 801b58e:	e7d1      	b.n	801b534 <_malloc_r+0x290>
 801b590:	20000258 	.word	0x20000258
 801b594:	20000260 	.word	0x20000260
 801b598:	2000cd00 	.word	0x2000cd00
 801b59c:	20000250 	.word	0x20000250
 801b5a0:	2000ccd0 	.word	0x2000ccd0
 801b5a4:	2000ccfc 	.word	0x2000ccfc
 801b5a8:	2000ccf8 	.word	0x2000ccf8
 801b5ac:	6860      	ldr	r0, [r4, #4]
 801b5ae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b5b2:	f020 0003 	bic.w	r0, r0, #3
 801b5b6:	eba0 0a07 	sub.w	sl, r0, r7
 801b5ba:	f1ba 0f0f 	cmp.w	sl, #15
 801b5be:	dd12      	ble.n	801b5e6 <_malloc_r+0x342>
 801b5c0:	68a3      	ldr	r3, [r4, #8]
 801b5c2:	19e2      	adds	r2, r4, r7
 801b5c4:	f047 0701 	orr.w	r7, r7, #1
 801b5c8:	6067      	str	r7, [r4, #4]
 801b5ca:	f8c3 c00c 	str.w	ip, [r3, #12]
 801b5ce:	f8cc 3008 	str.w	r3, [ip, #8]
 801b5d2:	f04a 0301 	orr.w	r3, sl, #1
 801b5d6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 801b5da:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801b5de:	6053      	str	r3, [r2, #4]
 801b5e0:	f844 a000 	str.w	sl, [r4, r0]
 801b5e4:	e68f      	b.n	801b306 <_malloc_r+0x62>
 801b5e6:	f1ba 0f00 	cmp.w	sl, #0
 801b5ea:	db11      	blt.n	801b610 <_malloc_r+0x36c>
 801b5ec:	4420      	add	r0, r4
 801b5ee:	6843      	ldr	r3, [r0, #4]
 801b5f0:	f043 0301 	orr.w	r3, r3, #1
 801b5f4:	6043      	str	r3, [r0, #4]
 801b5f6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 801b5fa:	4628      	mov	r0, r5
 801b5fc:	f8c3 c00c 	str.w	ip, [r3, #12]
 801b600:	f8cc 3008 	str.w	r3, [ip, #8]
 801b604:	f000 f88e 	bl	801b724 <__malloc_unlock>
 801b608:	4620      	mov	r0, r4
 801b60a:	b003      	add	sp, #12
 801b60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b610:	4664      	mov	r4, ip
 801b612:	e70f      	b.n	801b434 <_malloc_r+0x190>
 801b614:	f858 0908 	ldr.w	r0, [r8], #-8
 801b618:	4540      	cmp	r0, r8
 801b61a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b61e:	f43f af13 	beq.w	801b448 <_malloc_r+0x1a4>
 801b622:	e718      	b.n	801b456 <_malloc_r+0x1b2>
 801b624:	3304      	adds	r3, #4
 801b626:	0052      	lsls	r2, r2, #1
 801b628:	4210      	tst	r0, r2
 801b62a:	d0fb      	beq.n	801b624 <_malloc_r+0x380>
 801b62c:	e6fc      	b.n	801b428 <_malloc_r+0x184>
 801b62e:	4673      	mov	r3, lr
 801b630:	e7fa      	b.n	801b628 <_malloc_r+0x384>
 801b632:	6810      	ldr	r0, [r2, #0]
 801b634:	3001      	adds	r0, #1
 801b636:	bf1b      	ittet	ne
 801b638:	eba4 0b0b 	subne.w	fp, r4, fp
 801b63c:	eb0b 020e 	addne.w	r2, fp, lr
 801b640:	6014      	streq	r4, [r2, #0]
 801b642:	601a      	strne	r2, [r3, #0]
 801b644:	f014 0b07 	ands.w	fp, r4, #7
 801b648:	bf1a      	itte	ne
 801b64a:	f1cb 0008 	rsbne	r0, fp, #8
 801b64e:	1824      	addne	r4, r4, r0
 801b650:	4658      	moveq	r0, fp
 801b652:	1862      	adds	r2, r4, r1
 801b654:	ea02 010c 	and.w	r1, r2, ip
 801b658:	4480      	add	r8, r0
 801b65a:	eba8 0801 	sub.w	r8, r8, r1
 801b65e:	ea08 080c 	and.w	r8, r8, ip
 801b662:	4641      	mov	r1, r8
 801b664:	4628      	mov	r0, r5
 801b666:	9201      	str	r2, [sp, #4]
 801b668:	f001 f8be 	bl	801c7e8 <_sbrk_r>
 801b66c:	1c43      	adds	r3, r0, #1
 801b66e:	9a01      	ldr	r2, [sp, #4]
 801b670:	4b28      	ldr	r3, [pc, #160]	@ (801b714 <_malloc_r+0x470>)
 801b672:	d107      	bne.n	801b684 <_malloc_r+0x3e0>
 801b674:	f1bb 0f00 	cmp.w	fp, #0
 801b678:	d023      	beq.n	801b6c2 <_malloc_r+0x41e>
 801b67a:	f1ab 0008 	sub.w	r0, fp, #8
 801b67e:	4410      	add	r0, r2
 801b680:	f04f 0800 	mov.w	r8, #0
 801b684:	681a      	ldr	r2, [r3, #0]
 801b686:	60b4      	str	r4, [r6, #8]
 801b688:	1b00      	subs	r0, r0, r4
 801b68a:	4440      	add	r0, r8
 801b68c:	4442      	add	r2, r8
 801b68e:	f040 0001 	orr.w	r0, r0, #1
 801b692:	45b2      	cmp	sl, r6
 801b694:	601a      	str	r2, [r3, #0]
 801b696:	6060      	str	r0, [r4, #4]
 801b698:	f43f af29 	beq.w	801b4ee <_malloc_r+0x24a>
 801b69c:	f1b9 0f0f 	cmp.w	r9, #15
 801b6a0:	d812      	bhi.n	801b6c8 <_malloc_r+0x424>
 801b6a2:	2301      	movs	r3, #1
 801b6a4:	6063      	str	r3, [r4, #4]
 801b6a6:	68b3      	ldr	r3, [r6, #8]
 801b6a8:	685b      	ldr	r3, [r3, #4]
 801b6aa:	f023 0303 	bic.w	r3, r3, #3
 801b6ae:	42bb      	cmp	r3, r7
 801b6b0:	eba3 0207 	sub.w	r2, r3, r7
 801b6b4:	d301      	bcc.n	801b6ba <_malloc_r+0x416>
 801b6b6:	2a0f      	cmp	r2, #15
 801b6b8:	dc22      	bgt.n	801b700 <_malloc_r+0x45c>
 801b6ba:	4628      	mov	r0, r5
 801b6bc:	f000 f832 	bl	801b724 <__malloc_unlock>
 801b6c0:	e5fc      	b.n	801b2bc <_malloc_r+0x18>
 801b6c2:	4610      	mov	r0, r2
 801b6c4:	46d8      	mov	r8, fp
 801b6c6:	e7dd      	b.n	801b684 <_malloc_r+0x3e0>
 801b6c8:	f8da 2004 	ldr.w	r2, [sl, #4]
 801b6cc:	f1a9 090c 	sub.w	r9, r9, #12
 801b6d0:	f029 0907 	bic.w	r9, r9, #7
 801b6d4:	f002 0201 	and.w	r2, r2, #1
 801b6d8:	ea42 0209 	orr.w	r2, r2, r9
 801b6dc:	f8ca 2004 	str.w	r2, [sl, #4]
 801b6e0:	2105      	movs	r1, #5
 801b6e2:	eb0a 0209 	add.w	r2, sl, r9
 801b6e6:	f1b9 0f0f 	cmp.w	r9, #15
 801b6ea:	e9c2 1101 	strd	r1, r1, [r2, #4]
 801b6ee:	f67f aefe 	bls.w	801b4ee <_malloc_r+0x24a>
 801b6f2:	f10a 0108 	add.w	r1, sl, #8
 801b6f6:	4628      	mov	r0, r5
 801b6f8:	f001 f958 	bl	801c9ac <_free_r>
 801b6fc:	4b05      	ldr	r3, [pc, #20]	@ (801b714 <_malloc_r+0x470>)
 801b6fe:	e6f6      	b.n	801b4ee <_malloc_r+0x24a>
 801b700:	68b4      	ldr	r4, [r6, #8]
 801b702:	f047 0301 	orr.w	r3, r7, #1
 801b706:	4427      	add	r7, r4
 801b708:	f042 0201 	orr.w	r2, r2, #1
 801b70c:	6063      	str	r3, [r4, #4]
 801b70e:	60b7      	str	r7, [r6, #8]
 801b710:	607a      	str	r2, [r7, #4]
 801b712:	e5f8      	b.n	801b306 <_malloc_r+0x62>
 801b714:	2000ccd0 	.word	0x2000ccd0

0801b718 <__malloc_lock>:
 801b718:	4801      	ldr	r0, [pc, #4]	@ (801b720 <__malloc_lock+0x8>)
 801b71a:	f001 b8b4 	b.w	801c886 <__retarget_lock_acquire_recursive>
 801b71e:	bf00      	nop
 801b720:	2000ce6a 	.word	0x2000ce6a

0801b724 <__malloc_unlock>:
 801b724:	4801      	ldr	r0, [pc, #4]	@ (801b72c <__malloc_unlock+0x8>)
 801b726:	f001 b8b0 	b.w	801c88a <__retarget_lock_release_recursive>
 801b72a:	bf00      	nop
 801b72c:	2000ce6a 	.word	0x2000ce6a

0801b730 <__sflush_r>:
 801b730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b734:	4605      	mov	r5, r0
 801b736:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 801b73a:	0706      	lsls	r6, r0, #28
 801b73c:	460c      	mov	r4, r1
 801b73e:	d457      	bmi.n	801b7f0 <__sflush_r+0xc0>
 801b740:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 801b744:	818b      	strh	r3, [r1, #12]
 801b746:	684b      	ldr	r3, [r1, #4]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	dc02      	bgt.n	801b752 <__sflush_r+0x22>
 801b74c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801b74e:	2b00      	cmp	r3, #0
 801b750:	dd4c      	ble.n	801b7ec <__sflush_r+0xbc>
 801b752:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b754:	2e00      	cmp	r6, #0
 801b756:	d049      	beq.n	801b7ec <__sflush_r+0xbc>
 801b758:	2300      	movs	r3, #0
 801b75a:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 801b75e:	682f      	ldr	r7, [r5, #0]
 801b760:	69e1      	ldr	r1, [r4, #28]
 801b762:	602b      	str	r3, [r5, #0]
 801b764:	d034      	beq.n	801b7d0 <__sflush_r+0xa0>
 801b766:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 801b768:	89a3      	ldrh	r3, [r4, #12]
 801b76a:	0759      	lsls	r1, r3, #29
 801b76c:	d505      	bpl.n	801b77a <__sflush_r+0x4a>
 801b76e:	6863      	ldr	r3, [r4, #4]
 801b770:	1ad2      	subs	r2, r2, r3
 801b772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b774:	b10b      	cbz	r3, 801b77a <__sflush_r+0x4a>
 801b776:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801b778:	1ad2      	subs	r2, r2, r3
 801b77a:	2300      	movs	r3, #0
 801b77c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b77e:	69e1      	ldr	r1, [r4, #28]
 801b780:	4628      	mov	r0, r5
 801b782:	47b0      	blx	r6
 801b784:	1c43      	adds	r3, r0, #1
 801b786:	d106      	bne.n	801b796 <__sflush_r+0x66>
 801b788:	682a      	ldr	r2, [r5, #0]
 801b78a:	2a1d      	cmp	r2, #29
 801b78c:	d848      	bhi.n	801b820 <__sflush_r+0xf0>
 801b78e:	4b2b      	ldr	r3, [pc, #172]	@ (801b83c <__sflush_r+0x10c>)
 801b790:	4113      	asrs	r3, r2
 801b792:	07de      	lsls	r6, r3, #31
 801b794:	d444      	bmi.n	801b820 <__sflush_r+0xf0>
 801b796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b79a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801b79e:	81a2      	strh	r2, [r4, #12]
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	6062      	str	r2, [r4, #4]
 801b7a4:	04d9      	lsls	r1, r3, #19
 801b7a6:	6922      	ldr	r2, [r4, #16]
 801b7a8:	6022      	str	r2, [r4, #0]
 801b7aa:	d504      	bpl.n	801b7b6 <__sflush_r+0x86>
 801b7ac:	1c42      	adds	r2, r0, #1
 801b7ae:	d101      	bne.n	801b7b4 <__sflush_r+0x84>
 801b7b0:	682b      	ldr	r3, [r5, #0]
 801b7b2:	b903      	cbnz	r3, 801b7b6 <__sflush_r+0x86>
 801b7b4:	6520      	str	r0, [r4, #80]	@ 0x50
 801b7b6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b7b8:	602f      	str	r7, [r5, #0]
 801b7ba:	b1b9      	cbz	r1, 801b7ec <__sflush_r+0xbc>
 801b7bc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801b7c0:	4299      	cmp	r1, r3
 801b7c2:	d002      	beq.n	801b7ca <__sflush_r+0x9a>
 801b7c4:	4628      	mov	r0, r5
 801b7c6:	f001 f8f1 	bl	801c9ac <_free_r>
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	6323      	str	r3, [r4, #48]	@ 0x30
 801b7ce:	e00d      	b.n	801b7ec <__sflush_r+0xbc>
 801b7d0:	2301      	movs	r3, #1
 801b7d2:	4628      	mov	r0, r5
 801b7d4:	47b0      	blx	r6
 801b7d6:	4602      	mov	r2, r0
 801b7d8:	1c50      	adds	r0, r2, #1
 801b7da:	d1c5      	bne.n	801b768 <__sflush_r+0x38>
 801b7dc:	682b      	ldr	r3, [r5, #0]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d0c2      	beq.n	801b768 <__sflush_r+0x38>
 801b7e2:	2b1d      	cmp	r3, #29
 801b7e4:	d001      	beq.n	801b7ea <__sflush_r+0xba>
 801b7e6:	2b16      	cmp	r3, #22
 801b7e8:	d11a      	bne.n	801b820 <__sflush_r+0xf0>
 801b7ea:	602f      	str	r7, [r5, #0]
 801b7ec:	2000      	movs	r0, #0
 801b7ee:	e01e      	b.n	801b82e <__sflush_r+0xfe>
 801b7f0:	690f      	ldr	r7, [r1, #16]
 801b7f2:	2f00      	cmp	r7, #0
 801b7f4:	d0fa      	beq.n	801b7ec <__sflush_r+0xbc>
 801b7f6:	0783      	lsls	r3, r0, #30
 801b7f8:	680e      	ldr	r6, [r1, #0]
 801b7fa:	bf08      	it	eq
 801b7fc:	694b      	ldreq	r3, [r1, #20]
 801b7fe:	600f      	str	r7, [r1, #0]
 801b800:	bf18      	it	ne
 801b802:	2300      	movne	r3, #0
 801b804:	eba6 0807 	sub.w	r8, r6, r7
 801b808:	608b      	str	r3, [r1, #8]
 801b80a:	f1b8 0f00 	cmp.w	r8, #0
 801b80e:	dded      	ble.n	801b7ec <__sflush_r+0xbc>
 801b810:	69e1      	ldr	r1, [r4, #28]
 801b812:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801b814:	4643      	mov	r3, r8
 801b816:	463a      	mov	r2, r7
 801b818:	4628      	mov	r0, r5
 801b81a:	47b0      	blx	r6
 801b81c:	2800      	cmp	r0, #0
 801b81e:	dc08      	bgt.n	801b832 <__sflush_r+0x102>
 801b820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b828:	81a3      	strh	r3, [r4, #12]
 801b82a:	f04f 30ff 	mov.w	r0, #4294967295
 801b82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b832:	4407      	add	r7, r0
 801b834:	eba8 0800 	sub.w	r8, r8, r0
 801b838:	e7e7      	b.n	801b80a <__sflush_r+0xda>
 801b83a:	bf00      	nop
 801b83c:	dfbffffe 	.word	0xdfbffffe

0801b840 <_fflush_r>:
 801b840:	b538      	push	{r3, r4, r5, lr}
 801b842:	460c      	mov	r4, r1
 801b844:	4605      	mov	r5, r0
 801b846:	b118      	cbz	r0, 801b850 <_fflush_r+0x10>
 801b848:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801b84a:	b90b      	cbnz	r3, 801b850 <_fflush_r+0x10>
 801b84c:	f000 f8be 	bl	801b9cc <__sinit>
 801b850:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 801b854:	b1b8      	cbz	r0, 801b886 <_fflush_r+0x46>
 801b856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b858:	07db      	lsls	r3, r3, #31
 801b85a:	d404      	bmi.n	801b866 <_fflush_r+0x26>
 801b85c:	0581      	lsls	r1, r0, #22
 801b85e:	d402      	bmi.n	801b866 <_fflush_r+0x26>
 801b860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b862:	f001 f810 	bl	801c886 <__retarget_lock_acquire_recursive>
 801b866:	4628      	mov	r0, r5
 801b868:	4621      	mov	r1, r4
 801b86a:	f7ff ff61 	bl	801b730 <__sflush_r>
 801b86e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b870:	07da      	lsls	r2, r3, #31
 801b872:	4605      	mov	r5, r0
 801b874:	d405      	bmi.n	801b882 <_fflush_r+0x42>
 801b876:	89a3      	ldrh	r3, [r4, #12]
 801b878:	059b      	lsls	r3, r3, #22
 801b87a:	d402      	bmi.n	801b882 <_fflush_r+0x42>
 801b87c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b87e:	f001 f804 	bl	801c88a <__retarget_lock_release_recursive>
 801b882:	4628      	mov	r0, r5
 801b884:	bd38      	pop	{r3, r4, r5, pc}
 801b886:	4605      	mov	r5, r0
 801b888:	e7fb      	b.n	801b882 <_fflush_r+0x42>
	...

0801b88c <fflush>:
 801b88c:	4601      	mov	r1, r0
 801b88e:	b920      	cbnz	r0, 801b89a <fflush+0xe>
 801b890:	4a04      	ldr	r2, [pc, #16]	@ (801b8a4 <fflush+0x18>)
 801b892:	4905      	ldr	r1, [pc, #20]	@ (801b8a8 <fflush+0x1c>)
 801b894:	4805      	ldr	r0, [pc, #20]	@ (801b8ac <fflush+0x20>)
 801b896:	f000 b8b1 	b.w	801b9fc <_fwalk_sglue>
 801b89a:	4b05      	ldr	r3, [pc, #20]	@ (801b8b0 <fflush+0x24>)
 801b89c:	6818      	ldr	r0, [r3, #0]
 801b89e:	f7ff bfcf 	b.w	801b840 <_fflush_r>
 801b8a2:	bf00      	nop
 801b8a4:	20000660 	.word	0x20000660
 801b8a8:	0801b841 	.word	0x0801b841
 801b8ac:	20000678 	.word	0x20000678
 801b8b0:	20000674 	.word	0x20000674

0801b8b4 <std>:
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	b510      	push	{r4, lr}
 801b8b8:	4604      	mov	r4, r0
 801b8ba:	e9c0 3300 	strd	r3, r3, [r0]
 801b8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b8c2:	6083      	str	r3, [r0, #8]
 801b8c4:	8181      	strh	r1, [r0, #12]
 801b8c6:	6643      	str	r3, [r0, #100]	@ 0x64
 801b8c8:	81c2      	strh	r2, [r0, #14]
 801b8ca:	6183      	str	r3, [r0, #24]
 801b8cc:	4619      	mov	r1, r3
 801b8ce:	2208      	movs	r2, #8
 801b8d0:	305c      	adds	r0, #92	@ 0x5c
 801b8d2:	f000 f93d 	bl	801bb50 <memset>
 801b8d6:	4b0d      	ldr	r3, [pc, #52]	@ (801b90c <std+0x58>)
 801b8d8:	6223      	str	r3, [r4, #32]
 801b8da:	4b0d      	ldr	r3, [pc, #52]	@ (801b910 <std+0x5c>)
 801b8dc:	6263      	str	r3, [r4, #36]	@ 0x24
 801b8de:	4b0d      	ldr	r3, [pc, #52]	@ (801b914 <std+0x60>)
 801b8e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b8e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b918 <std+0x64>)
 801b8e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b8e6:	4b0d      	ldr	r3, [pc, #52]	@ (801b91c <std+0x68>)
 801b8e8:	61e4      	str	r4, [r4, #28]
 801b8ea:	429c      	cmp	r4, r3
 801b8ec:	d006      	beq.n	801b8fc <std+0x48>
 801b8ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b8f2:	4294      	cmp	r4, r2
 801b8f4:	d002      	beq.n	801b8fc <std+0x48>
 801b8f6:	33d0      	adds	r3, #208	@ 0xd0
 801b8f8:	429c      	cmp	r4, r3
 801b8fa:	d105      	bne.n	801b908 <std+0x54>
 801b8fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b904:	f000 bfbc 	b.w	801c880 <__retarget_lock_init_recursive>
 801b908:	bd10      	pop	{r4, pc}
 801b90a:	bf00      	nop
 801b90c:	0801ba39 	.word	0x0801ba39
 801b910:	0801ba5f 	.word	0x0801ba5f
 801b914:	0801ba97 	.word	0x0801ba97
 801b918:	0801babb 	.word	0x0801babb
 801b91c:	2000cd04 	.word	0x2000cd04

0801b920 <stdio_exit_handler>:
 801b920:	4a02      	ldr	r2, [pc, #8]	@ (801b92c <stdio_exit_handler+0xc>)
 801b922:	4903      	ldr	r1, [pc, #12]	@ (801b930 <stdio_exit_handler+0x10>)
 801b924:	4803      	ldr	r0, [pc, #12]	@ (801b934 <stdio_exit_handler+0x14>)
 801b926:	f000 b869 	b.w	801b9fc <_fwalk_sglue>
 801b92a:	bf00      	nop
 801b92c:	20000660 	.word	0x20000660
 801b930:	0801f015 	.word	0x0801f015
 801b934:	20000678 	.word	0x20000678

0801b938 <cleanup_stdio>:
 801b938:	6841      	ldr	r1, [r0, #4]
 801b93a:	4b0c      	ldr	r3, [pc, #48]	@ (801b96c <cleanup_stdio+0x34>)
 801b93c:	4299      	cmp	r1, r3
 801b93e:	b510      	push	{r4, lr}
 801b940:	4604      	mov	r4, r0
 801b942:	d001      	beq.n	801b948 <cleanup_stdio+0x10>
 801b944:	f003 fb66 	bl	801f014 <_fclose_r>
 801b948:	68a1      	ldr	r1, [r4, #8]
 801b94a:	4b09      	ldr	r3, [pc, #36]	@ (801b970 <cleanup_stdio+0x38>)
 801b94c:	4299      	cmp	r1, r3
 801b94e:	d002      	beq.n	801b956 <cleanup_stdio+0x1e>
 801b950:	4620      	mov	r0, r4
 801b952:	f003 fb5f 	bl	801f014 <_fclose_r>
 801b956:	68e1      	ldr	r1, [r4, #12]
 801b958:	4b06      	ldr	r3, [pc, #24]	@ (801b974 <cleanup_stdio+0x3c>)
 801b95a:	4299      	cmp	r1, r3
 801b95c:	d004      	beq.n	801b968 <cleanup_stdio+0x30>
 801b95e:	4620      	mov	r0, r4
 801b960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b964:	f003 bb56 	b.w	801f014 <_fclose_r>
 801b968:	bd10      	pop	{r4, pc}
 801b96a:	bf00      	nop
 801b96c:	2000cd04 	.word	0x2000cd04
 801b970:	2000cd6c 	.word	0x2000cd6c
 801b974:	2000cdd4 	.word	0x2000cdd4

0801b978 <global_stdio_init.part.0>:
 801b978:	b510      	push	{r4, lr}
 801b97a:	4b0b      	ldr	r3, [pc, #44]	@ (801b9a8 <global_stdio_init.part.0+0x30>)
 801b97c:	4c0b      	ldr	r4, [pc, #44]	@ (801b9ac <global_stdio_init.part.0+0x34>)
 801b97e:	4a0c      	ldr	r2, [pc, #48]	@ (801b9b0 <global_stdio_init.part.0+0x38>)
 801b980:	601a      	str	r2, [r3, #0]
 801b982:	4620      	mov	r0, r4
 801b984:	2200      	movs	r2, #0
 801b986:	2104      	movs	r1, #4
 801b988:	f7ff ff94 	bl	801b8b4 <std>
 801b98c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b990:	2201      	movs	r2, #1
 801b992:	2109      	movs	r1, #9
 801b994:	f7ff ff8e 	bl	801b8b4 <std>
 801b998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b99c:	2202      	movs	r2, #2
 801b99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9a2:	2112      	movs	r1, #18
 801b9a4:	f7ff bf86 	b.w	801b8b4 <std>
 801b9a8:	2000ce3c 	.word	0x2000ce3c
 801b9ac:	2000cd04 	.word	0x2000cd04
 801b9b0:	0801b921 	.word	0x0801b921

0801b9b4 <__sfp_lock_acquire>:
 801b9b4:	4801      	ldr	r0, [pc, #4]	@ (801b9bc <__sfp_lock_acquire+0x8>)
 801b9b6:	f000 bf66 	b.w	801c886 <__retarget_lock_acquire_recursive>
 801b9ba:	bf00      	nop
 801b9bc:	2000ce6c 	.word	0x2000ce6c

0801b9c0 <__sfp_lock_release>:
 801b9c0:	4801      	ldr	r0, [pc, #4]	@ (801b9c8 <__sfp_lock_release+0x8>)
 801b9c2:	f000 bf62 	b.w	801c88a <__retarget_lock_release_recursive>
 801b9c6:	bf00      	nop
 801b9c8:	2000ce6c 	.word	0x2000ce6c

0801b9cc <__sinit>:
 801b9cc:	b510      	push	{r4, lr}
 801b9ce:	4604      	mov	r4, r0
 801b9d0:	f7ff fff0 	bl	801b9b4 <__sfp_lock_acquire>
 801b9d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b9d6:	b11b      	cbz	r3, 801b9e0 <__sinit+0x14>
 801b9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9dc:	f7ff bff0 	b.w	801b9c0 <__sfp_lock_release>
 801b9e0:	4b04      	ldr	r3, [pc, #16]	@ (801b9f4 <__sinit+0x28>)
 801b9e2:	6363      	str	r3, [r4, #52]	@ 0x34
 801b9e4:	4b04      	ldr	r3, [pc, #16]	@ (801b9f8 <__sinit+0x2c>)
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d1f5      	bne.n	801b9d8 <__sinit+0xc>
 801b9ec:	f7ff ffc4 	bl	801b978 <global_stdio_init.part.0>
 801b9f0:	e7f2      	b.n	801b9d8 <__sinit+0xc>
 801b9f2:	bf00      	nop
 801b9f4:	0801b939 	.word	0x0801b939
 801b9f8:	2000ce3c 	.word	0x2000ce3c

0801b9fc <_fwalk_sglue>:
 801b9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba00:	4607      	mov	r7, r0
 801ba02:	4688      	mov	r8, r1
 801ba04:	4614      	mov	r4, r2
 801ba06:	2600      	movs	r6, #0
 801ba08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ba0c:	f1b9 0901 	subs.w	r9, r9, #1
 801ba10:	d505      	bpl.n	801ba1e <_fwalk_sglue+0x22>
 801ba12:	6824      	ldr	r4, [r4, #0]
 801ba14:	2c00      	cmp	r4, #0
 801ba16:	d1f7      	bne.n	801ba08 <_fwalk_sglue+0xc>
 801ba18:	4630      	mov	r0, r6
 801ba1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba1e:	89ab      	ldrh	r3, [r5, #12]
 801ba20:	2b01      	cmp	r3, #1
 801ba22:	d907      	bls.n	801ba34 <_fwalk_sglue+0x38>
 801ba24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ba28:	3301      	adds	r3, #1
 801ba2a:	d003      	beq.n	801ba34 <_fwalk_sglue+0x38>
 801ba2c:	4629      	mov	r1, r5
 801ba2e:	4638      	mov	r0, r7
 801ba30:	47c0      	blx	r8
 801ba32:	4306      	orrs	r6, r0
 801ba34:	3568      	adds	r5, #104	@ 0x68
 801ba36:	e7e9      	b.n	801ba0c <_fwalk_sglue+0x10>

0801ba38 <__sread>:
 801ba38:	b510      	push	{r4, lr}
 801ba3a:	460c      	mov	r4, r1
 801ba3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba40:	f000 fec0 	bl	801c7c4 <_read_r>
 801ba44:	2800      	cmp	r0, #0
 801ba46:	bfab      	itete	ge
 801ba48:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 801ba4a:	89a3      	ldrhlt	r3, [r4, #12]
 801ba4c:	181b      	addge	r3, r3, r0
 801ba4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ba52:	bfac      	ite	ge
 801ba54:	6523      	strge	r3, [r4, #80]	@ 0x50
 801ba56:	81a3      	strhlt	r3, [r4, #12]
 801ba58:	bd10      	pop	{r4, pc}

0801ba5a <__seofread>:
 801ba5a:	2000      	movs	r0, #0
 801ba5c:	4770      	bx	lr

0801ba5e <__swrite>:
 801ba5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba62:	461f      	mov	r7, r3
 801ba64:	898b      	ldrh	r3, [r1, #12]
 801ba66:	05db      	lsls	r3, r3, #23
 801ba68:	4605      	mov	r5, r0
 801ba6a:	460c      	mov	r4, r1
 801ba6c:	4616      	mov	r6, r2
 801ba6e:	d505      	bpl.n	801ba7c <__swrite+0x1e>
 801ba70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba74:	2302      	movs	r3, #2
 801ba76:	2200      	movs	r2, #0
 801ba78:	f000 fe92 	bl	801c7a0 <_lseek_r>
 801ba7c:	89a3      	ldrh	r3, [r4, #12]
 801ba7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ba86:	81a3      	strh	r3, [r4, #12]
 801ba88:	4632      	mov	r2, r6
 801ba8a:	463b      	mov	r3, r7
 801ba8c:	4628      	mov	r0, r5
 801ba8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba92:	f000 beb9 	b.w	801c808 <_write_r>

0801ba96 <__sseek>:
 801ba96:	b510      	push	{r4, lr}
 801ba98:	460c      	mov	r4, r1
 801ba9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba9e:	f000 fe7f 	bl	801c7a0 <_lseek_r>
 801baa2:	1c43      	adds	r3, r0, #1
 801baa4:	89a3      	ldrh	r3, [r4, #12]
 801baa6:	bf15      	itete	ne
 801baa8:	6520      	strne	r0, [r4, #80]	@ 0x50
 801baaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801baae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bab2:	81a3      	strheq	r3, [r4, #12]
 801bab4:	bf18      	it	ne
 801bab6:	81a3      	strhne	r3, [r4, #12]
 801bab8:	bd10      	pop	{r4, pc}

0801baba <__sclose>:
 801baba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801babe:	f000 be5f 	b.w	801c780 <_close_r>
	...

0801bac4 <asprintf>:
 801bac4:	b40e      	push	{r1, r2, r3}
 801bac6:	b530      	push	{r4, r5, lr}
 801bac8:	b09c      	sub	sp, #112	@ 0x70
 801baca:	ab1f      	add	r3, sp, #124	@ 0x7c
 801bacc:	4605      	mov	r5, r0
 801bace:	490d      	ldr	r1, [pc, #52]	@ (801bb04 <asprintf+0x40>)
 801bad0:	480d      	ldr	r0, [pc, #52]	@ (801bb08 <asprintf+0x44>)
 801bad2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bad6:	6800      	ldr	r0, [r0, #0]
 801bad8:	9301      	str	r3, [sp, #4]
 801bada:	2400      	movs	r4, #0
 801badc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801bae0:	a902      	add	r1, sp, #8
 801bae2:	9402      	str	r4, [sp, #8]
 801bae4:	9404      	str	r4, [sp, #16]
 801bae6:	9407      	str	r4, [sp, #28]
 801bae8:	f002 f8b6 	bl	801dc58 <_svfprintf_r>
 801baec:	2800      	cmp	r0, #0
 801baee:	bfa1      	itttt	ge
 801baf0:	9b02      	ldrge	r3, [sp, #8]
 801baf2:	701c      	strbge	r4, [r3, #0]
 801baf4:	9b06      	ldrge	r3, [sp, #24]
 801baf6:	602b      	strge	r3, [r5, #0]
 801baf8:	b01c      	add	sp, #112	@ 0x70
 801bafa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bafe:	b003      	add	sp, #12
 801bb00:	4770      	bx	lr
 801bb02:	bf00      	nop
 801bb04:	ffff0288 	.word	0xffff0288
 801bb08:	20000674 	.word	0x20000674

0801bb0c <_vasprintf_r>:
 801bb0c:	b530      	push	{r4, r5, lr}
 801bb0e:	460d      	mov	r5, r1
 801bb10:	4909      	ldr	r1, [pc, #36]	@ (801bb38 <_vasprintf_r+0x2c>)
 801bb12:	b09b      	sub	sp, #108	@ 0x6c
 801bb14:	2400      	movs	r4, #0
 801bb16:	e9cd 1403 	strd	r1, r4, [sp, #12]
 801bb1a:	4669      	mov	r1, sp
 801bb1c:	9400      	str	r4, [sp, #0]
 801bb1e:	9402      	str	r4, [sp, #8]
 801bb20:	9405      	str	r4, [sp, #20]
 801bb22:	f002 f899 	bl	801dc58 <_svfprintf_r>
 801bb26:	2800      	cmp	r0, #0
 801bb28:	bfa1      	itttt	ge
 801bb2a:	9b00      	ldrge	r3, [sp, #0]
 801bb2c:	701c      	strbge	r4, [r3, #0]
 801bb2e:	9b04      	ldrge	r3, [sp, #16]
 801bb30:	602b      	strge	r3, [r5, #0]
 801bb32:	b01b      	add	sp, #108	@ 0x6c
 801bb34:	bd30      	pop	{r4, r5, pc}
 801bb36:	bf00      	nop
 801bb38:	ffff0288 	.word	0xffff0288

0801bb3c <vasprintf>:
 801bb3c:	4613      	mov	r3, r2
 801bb3e:	460a      	mov	r2, r1
 801bb40:	4601      	mov	r1, r0
 801bb42:	4802      	ldr	r0, [pc, #8]	@ (801bb4c <vasprintf+0x10>)
 801bb44:	6800      	ldr	r0, [r0, #0]
 801bb46:	f7ff bfe1 	b.w	801bb0c <_vasprintf_r>
 801bb4a:	bf00      	nop
 801bb4c:	20000674 	.word	0x20000674

0801bb50 <memset>:
 801bb50:	4402      	add	r2, r0
 801bb52:	4603      	mov	r3, r0
 801bb54:	4293      	cmp	r3, r2
 801bb56:	d100      	bne.n	801bb5a <memset+0xa>
 801bb58:	4770      	bx	lr
 801bb5a:	f803 1b01 	strb.w	r1, [r3], #1
 801bb5e:	e7f9      	b.n	801bb54 <memset+0x4>

0801bb60 <gmtime>:
 801bb60:	4b02      	ldr	r3, [pc, #8]	@ (801bb6c <gmtime+0xc>)
 801bb62:	6819      	ldr	r1, [r3, #0]
 801bb64:	3170      	adds	r1, #112	@ 0x70
 801bb66:	f000 b803 	b.w	801bb70 <gmtime_r>
 801bb6a:	bf00      	nop
 801bb6c:	20000674 	.word	0x20000674

0801bb70 <gmtime_r>:
 801bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb74:	4a4d      	ldr	r2, [pc, #308]	@ (801bcac <gmtime_r+0x13c>)
 801bb76:	460c      	mov	r4, r1
 801bb78:	2300      	movs	r3, #0
 801bb7a:	e9d0 0100 	ldrd	r0, r1, [r0]
 801bb7e:	f7e5 f843 	bl	8000c08 <__aeabi_ldivmod>
 801bb82:	2a00      	cmp	r2, #0
 801bb84:	bfbc      	itt	lt
 801bb86:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 801bb8a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 801bb8e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801bb92:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 801bb96:	fbb2 f3f1 	udiv	r3, r2, r1
 801bb9a:	fb01 2213 	mls	r2, r1, r3, r2
 801bb9e:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 801bba2:	bfac      	ite	ge
 801bba4:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 801bba8:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 801bbac:	60a3      	str	r3, [r4, #8]
 801bbae:	fbb2 f3f1 	udiv	r3, r2, r1
 801bbb2:	fb01 2213 	mls	r2, r1, r3, r2
 801bbb6:	6063      	str	r3, [r4, #4]
 801bbb8:	6022      	str	r2, [r4, #0]
 801bbba:	1cc3      	adds	r3, r0, #3
 801bbbc:	2207      	movs	r2, #7
 801bbbe:	fb93 f2f2 	sdiv	r2, r3, r2
 801bbc2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801bbc6:	1a9b      	subs	r3, r3, r2
 801bbc8:	bf48      	it	mi
 801bbca:	3307      	addmi	r3, #7
 801bbcc:	2800      	cmp	r0, #0
 801bbce:	61a3      	str	r3, [r4, #24]
 801bbd0:	bfb8      	it	lt
 801bbd2:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 801bbd6:	4936      	ldr	r1, [pc, #216]	@ (801bcb0 <gmtime_r+0x140>)
 801bbd8:	bfae      	itee	ge
 801bbda:	fb90 f1f1 	sdivge	r1, r0, r1
 801bbde:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 801bbe2:	fb93 f1f1 	sdivlt	r1, r3, r1
 801bbe6:	4b33      	ldr	r3, [pc, #204]	@ (801bcb4 <gmtime_r+0x144>)
 801bbe8:	fb03 0001 	mla	r0, r3, r1, r0
 801bbec:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 801bbf0:	fbb0 f3f3 	udiv	r3, r0, r3
 801bbf4:	4403      	add	r3, r0
 801bbf6:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 801bbfa:	fbb0 f2fc 	udiv	r2, r0, ip
 801bbfe:	1a9b      	subs	r3, r3, r2
 801bc00:	f240 176d 	movw	r7, #365	@ 0x16d
 801bc04:	4a2c      	ldr	r2, [pc, #176]	@ (801bcb8 <gmtime_r+0x148>)
 801bc06:	fbb0 f2f2 	udiv	r2, r0, r2
 801bc0a:	2664      	movs	r6, #100	@ 0x64
 801bc0c:	1a9b      	subs	r3, r3, r2
 801bc0e:	fbb3 f2f7 	udiv	r2, r3, r7
 801bc12:	fbb3 f3fc 	udiv	r3, r3, ip
 801bc16:	fbb2 f5f6 	udiv	r5, r2, r6
 801bc1a:	1aeb      	subs	r3, r5, r3
 801bc1c:	4403      	add	r3, r0
 801bc1e:	fb07 3312 	mls	r3, r7, r2, r3
 801bc22:	2099      	movs	r0, #153	@ 0x99
 801bc24:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 801bc28:	3702      	adds	r7, #2
 801bc2a:	f103 0e01 	add.w	lr, r3, #1
 801bc2e:	fbb7 fcf0 	udiv	ip, r7, r0
 801bc32:	fb00 f00c 	mul.w	r0, r0, ip
 801bc36:	3002      	adds	r0, #2
 801bc38:	f04f 0805 	mov.w	r8, #5
 801bc3c:	fbb0 f0f8 	udiv	r0, r0, r8
 801bc40:	ebae 0000 	sub.w	r0, lr, r0
 801bc44:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 801bc48:	4577      	cmp	r7, lr
 801bc4a:	bf8c      	ite	hi
 801bc4c:	f06f 0709 	mvnhi.w	r7, #9
 801bc50:	2702      	movls	r7, #2
 801bc52:	4467      	add	r7, ip
 801bc54:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 801bc58:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc5c:	2f01      	cmp	r7, #1
 801bc5e:	bf98      	it	ls
 801bc60:	3101      	addls	r1, #1
 801bc62:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 801bc66:	d30c      	bcc.n	801bc82 <gmtime_r+0x112>
 801bc68:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801bc6c:	61e3      	str	r3, [r4, #28]
 801bc6e:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 801bc72:	2300      	movs	r3, #0
 801bc74:	60e0      	str	r0, [r4, #12]
 801bc76:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801bc7a:	6223      	str	r3, [r4, #32]
 801bc7c:	4620      	mov	r0, r4
 801bc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc82:	f012 0f03 	tst.w	r2, #3
 801bc86:	d102      	bne.n	801bc8e <gmtime_r+0x11e>
 801bc88:	fb06 2515 	mls	r5, r6, r5, r2
 801bc8c:	b95d      	cbnz	r5, 801bca6 <gmtime_r+0x136>
 801bc8e:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 801bc92:	fbb2 f6f5 	udiv	r6, r2, r5
 801bc96:	fb05 2216 	mls	r2, r5, r6, r2
 801bc9a:	fab2 f282 	clz	r2, r2
 801bc9e:	0952      	lsrs	r2, r2, #5
 801bca0:	333b      	adds	r3, #59	@ 0x3b
 801bca2:	4413      	add	r3, r2
 801bca4:	e7e2      	b.n	801bc6c <gmtime_r+0xfc>
 801bca6:	2201      	movs	r2, #1
 801bca8:	e7fa      	b.n	801bca0 <gmtime_r+0x130>
 801bcaa:	bf00      	nop
 801bcac:	00015180 	.word	0x00015180
 801bcb0:	00023ab1 	.word	0x00023ab1
 801bcb4:	fffdc54f 	.word	0xfffdc54f
 801bcb8:	00023ab0 	.word	0x00023ab0

0801bcbc <validate_structure>:
 801bcbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bcbe:	6801      	ldr	r1, [r0, #0]
 801bcc0:	293b      	cmp	r1, #59	@ 0x3b
 801bcc2:	4604      	mov	r4, r0
 801bcc4:	d911      	bls.n	801bcea <validate_structure+0x2e>
 801bcc6:	223c      	movs	r2, #60	@ 0x3c
 801bcc8:	4668      	mov	r0, sp
 801bcca:	f000 fe11 	bl	801c8f0 <div>
 801bcce:	9a01      	ldr	r2, [sp, #4]
 801bcd0:	6863      	ldr	r3, [r4, #4]
 801bcd2:	9900      	ldr	r1, [sp, #0]
 801bcd4:	2a00      	cmp	r2, #0
 801bcd6:	440b      	add	r3, r1
 801bcd8:	6063      	str	r3, [r4, #4]
 801bcda:	bfbb      	ittet	lt
 801bcdc:	323c      	addlt	r2, #60	@ 0x3c
 801bcde:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bce2:	6022      	strge	r2, [r4, #0]
 801bce4:	6022      	strlt	r2, [r4, #0]
 801bce6:	bfb8      	it	lt
 801bce8:	6063      	strlt	r3, [r4, #4]
 801bcea:	6861      	ldr	r1, [r4, #4]
 801bcec:	293b      	cmp	r1, #59	@ 0x3b
 801bcee:	d911      	bls.n	801bd14 <validate_structure+0x58>
 801bcf0:	223c      	movs	r2, #60	@ 0x3c
 801bcf2:	4668      	mov	r0, sp
 801bcf4:	f000 fdfc 	bl	801c8f0 <div>
 801bcf8:	9a01      	ldr	r2, [sp, #4]
 801bcfa:	68a3      	ldr	r3, [r4, #8]
 801bcfc:	9900      	ldr	r1, [sp, #0]
 801bcfe:	2a00      	cmp	r2, #0
 801bd00:	440b      	add	r3, r1
 801bd02:	60a3      	str	r3, [r4, #8]
 801bd04:	bfbb      	ittet	lt
 801bd06:	323c      	addlt	r2, #60	@ 0x3c
 801bd08:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bd0c:	6062      	strge	r2, [r4, #4]
 801bd0e:	6062      	strlt	r2, [r4, #4]
 801bd10:	bfb8      	it	lt
 801bd12:	60a3      	strlt	r3, [r4, #8]
 801bd14:	68a1      	ldr	r1, [r4, #8]
 801bd16:	2917      	cmp	r1, #23
 801bd18:	d911      	bls.n	801bd3e <validate_structure+0x82>
 801bd1a:	2218      	movs	r2, #24
 801bd1c:	4668      	mov	r0, sp
 801bd1e:	f000 fde7 	bl	801c8f0 <div>
 801bd22:	9a01      	ldr	r2, [sp, #4]
 801bd24:	68e3      	ldr	r3, [r4, #12]
 801bd26:	9900      	ldr	r1, [sp, #0]
 801bd28:	2a00      	cmp	r2, #0
 801bd2a:	440b      	add	r3, r1
 801bd2c:	60e3      	str	r3, [r4, #12]
 801bd2e:	bfbb      	ittet	lt
 801bd30:	3218      	addlt	r2, #24
 801bd32:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bd36:	60a2      	strge	r2, [r4, #8]
 801bd38:	60a2      	strlt	r2, [r4, #8]
 801bd3a:	bfb8      	it	lt
 801bd3c:	60e3      	strlt	r3, [r4, #12]
 801bd3e:	6921      	ldr	r1, [r4, #16]
 801bd40:	290b      	cmp	r1, #11
 801bd42:	d911      	bls.n	801bd68 <validate_structure+0xac>
 801bd44:	220c      	movs	r2, #12
 801bd46:	4668      	mov	r0, sp
 801bd48:	f000 fdd2 	bl	801c8f0 <div>
 801bd4c:	9a01      	ldr	r2, [sp, #4]
 801bd4e:	6963      	ldr	r3, [r4, #20]
 801bd50:	9900      	ldr	r1, [sp, #0]
 801bd52:	2a00      	cmp	r2, #0
 801bd54:	440b      	add	r3, r1
 801bd56:	6163      	str	r3, [r4, #20]
 801bd58:	bfbb      	ittet	lt
 801bd5a:	320c      	addlt	r2, #12
 801bd5c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801bd60:	6122      	strge	r2, [r4, #16]
 801bd62:	6122      	strlt	r2, [r4, #16]
 801bd64:	bfb8      	it	lt
 801bd66:	6163      	strlt	r3, [r4, #20]
 801bd68:	6963      	ldr	r3, [r4, #20]
 801bd6a:	079a      	lsls	r2, r3, #30
 801bd6c:	d11c      	bne.n	801bda8 <validate_structure+0xec>
 801bd6e:	2164      	movs	r1, #100	@ 0x64
 801bd70:	fb93 f2f1 	sdiv	r2, r3, r1
 801bd74:	fb01 3212 	mls	r2, r1, r2, r3
 801bd78:	b9c2      	cbnz	r2, 801bdac <validate_structure+0xf0>
 801bd7a:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 801bd7e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bd82:	fb93 f1f2 	sdiv	r1, r3, r2
 801bd86:	fb02 3311 	mls	r3, r2, r1, r3
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	bf14      	ite	ne
 801bd8e:	231c      	movne	r3, #28
 801bd90:	231d      	moveq	r3, #29
 801bd92:	68e2      	ldr	r2, [r4, #12]
 801bd94:	2a00      	cmp	r2, #0
 801bd96:	dc0b      	bgt.n	801bdb0 <validate_structure+0xf4>
 801bd98:	4d31      	ldr	r5, [pc, #196]	@ (801be60 <validate_structure+0x1a4>)
 801bd9a:	200b      	movs	r0, #11
 801bd9c:	2164      	movs	r1, #100	@ 0x64
 801bd9e:	68e6      	ldr	r6, [r4, #12]
 801bda0:	2e00      	cmp	r6, #0
 801bda2:	dd30      	ble.n	801be06 <validate_structure+0x14a>
 801bda4:	b003      	add	sp, #12
 801bda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bda8:	231c      	movs	r3, #28
 801bdaa:	e7f2      	b.n	801bd92 <validate_structure+0xd6>
 801bdac:	231d      	movs	r3, #29
 801bdae:	e7f0      	b.n	801bd92 <validate_structure+0xd6>
 801bdb0:	4d2b      	ldr	r5, [pc, #172]	@ (801be60 <validate_structure+0x1a4>)
 801bdb2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801bdb6:	2a01      	cmp	r2, #1
 801bdb8:	bf14      	ite	ne
 801bdba:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 801bdbe:	4618      	moveq	r0, r3
 801bdc0:	4281      	cmp	r1, r0
 801bdc2:	ddef      	ble.n	801bda4 <validate_structure+0xe8>
 801bdc4:	3201      	adds	r2, #1
 801bdc6:	1a09      	subs	r1, r1, r0
 801bdc8:	2a0c      	cmp	r2, #12
 801bdca:	60e1      	str	r1, [r4, #12]
 801bdcc:	6122      	str	r2, [r4, #16]
 801bdce:	d1f0      	bne.n	801bdb2 <validate_structure+0xf6>
 801bdd0:	6963      	ldr	r3, [r4, #20]
 801bdd2:	2100      	movs	r1, #0
 801bdd4:	1c5a      	adds	r2, r3, #1
 801bdd6:	6121      	str	r1, [r4, #16]
 801bdd8:	0791      	lsls	r1, r2, #30
 801bdda:	6162      	str	r2, [r4, #20]
 801bddc:	d13c      	bne.n	801be58 <validate_structure+0x19c>
 801bdde:	2164      	movs	r1, #100	@ 0x64
 801bde0:	fb92 f0f1 	sdiv	r0, r2, r1
 801bde4:	fb01 2210 	mls	r2, r1, r0, r2
 801bde8:	2a00      	cmp	r2, #0
 801bdea:	d137      	bne.n	801be5c <validate_structure+0x1a0>
 801bdec:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 801bdf0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801bdf4:	fb93 f1f2 	sdiv	r1, r3, r2
 801bdf8:	fb02 3311 	mls	r3, r2, r1, r3
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	bf14      	ite	ne
 801be00:	231c      	movne	r3, #28
 801be02:	231d      	moveq	r3, #29
 801be04:	e7d5      	b.n	801bdb2 <validate_structure+0xf6>
 801be06:	6922      	ldr	r2, [r4, #16]
 801be08:	3a01      	subs	r2, #1
 801be0a:	6122      	str	r2, [r4, #16]
 801be0c:	3201      	adds	r2, #1
 801be0e:	d116      	bne.n	801be3e <validate_structure+0x182>
 801be10:	6963      	ldr	r3, [r4, #20]
 801be12:	1e5a      	subs	r2, r3, #1
 801be14:	0797      	lsls	r7, r2, #30
 801be16:	e9c4 0204 	strd	r0, r2, [r4, #16]
 801be1a:	d119      	bne.n	801be50 <validate_structure+0x194>
 801be1c:	fb92 f7f1 	sdiv	r7, r2, r1
 801be20:	fb01 2217 	mls	r2, r1, r7, r2
 801be24:	b9b2      	cbnz	r2, 801be54 <validate_structure+0x198>
 801be26:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 801be2a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801be2e:	fb93 f7f2 	sdiv	r7, r3, r2
 801be32:	fb02 3317 	mls	r3, r2, r7, r3
 801be36:	2b00      	cmp	r3, #0
 801be38:	bf14      	ite	ne
 801be3a:	231c      	movne	r3, #28
 801be3c:	231d      	moveq	r3, #29
 801be3e:	6922      	ldr	r2, [r4, #16]
 801be40:	2a01      	cmp	r2, #1
 801be42:	bf14      	ite	ne
 801be44:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 801be48:	461a      	moveq	r2, r3
 801be4a:	4432      	add	r2, r6
 801be4c:	60e2      	str	r2, [r4, #12]
 801be4e:	e7a6      	b.n	801bd9e <validate_structure+0xe2>
 801be50:	231c      	movs	r3, #28
 801be52:	e7f4      	b.n	801be3e <validate_structure+0x182>
 801be54:	231d      	movs	r3, #29
 801be56:	e7f2      	b.n	801be3e <validate_structure+0x182>
 801be58:	231c      	movs	r3, #28
 801be5a:	e7aa      	b.n	801bdb2 <validate_structure+0xf6>
 801be5c:	231d      	movs	r3, #29
 801be5e:	e7a8      	b.n	801bdb2 <validate_structure+0xf6>
 801be60:	08022e20 	.word	0x08022e20

0801be64 <mktime>:
 801be64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be68:	b085      	sub	sp, #20
 801be6a:	4607      	mov	r7, r0
 801be6c:	f003 f9c0 	bl	801f1f0 <__gettzinfo>
 801be70:	4681      	mov	r9, r0
 801be72:	4638      	mov	r0, r7
 801be74:	f7ff ff22 	bl	801bcbc <validate_structure>
 801be78:	e9d7 4300 	ldrd	r4, r3, [r7]
 801be7c:	223c      	movs	r2, #60	@ 0x3c
 801be7e:	fb02 4403 	mla	r4, r2, r3, r4
 801be82:	68bb      	ldr	r3, [r7, #8]
 801be84:	697d      	ldr	r5, [r7, #20]
 801be86:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801be8a:	fb02 4403 	mla	r4, r2, r3, r4
 801be8e:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 801be92:	4ac1      	ldr	r2, [pc, #772]	@ (801c198 <mktime+0x334>)
 801be94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801be98:	3e01      	subs	r6, #1
 801be9a:	2b01      	cmp	r3, #1
 801be9c:	4416      	add	r6, r2
 801be9e:	dd11      	ble.n	801bec4 <mktime+0x60>
 801bea0:	07a9      	lsls	r1, r5, #30
 801bea2:	d10f      	bne.n	801bec4 <mktime+0x60>
 801bea4:	2264      	movs	r2, #100	@ 0x64
 801bea6:	fb95 f3f2 	sdiv	r3, r5, r2
 801beaa:	fb02 5313 	mls	r3, r2, r3, r5
 801beae:	b943      	cbnz	r3, 801bec2 <mktime+0x5e>
 801beb0:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801beb4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801beb8:	fb93 f1f2 	sdiv	r1, r3, r2
 801bebc:	fb02 3311 	mls	r3, r2, r1, r3
 801bec0:	b903      	cbnz	r3, 801bec4 <mktime+0x60>
 801bec2:	3601      	adds	r6, #1
 801bec4:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 801bec8:	3310      	adds	r3, #16
 801beca:	f644 6220 	movw	r2, #20000	@ 0x4e20
 801bece:	4293      	cmp	r3, r2
 801bed0:	61fe      	str	r6, [r7, #28]
 801bed2:	f200 8167 	bhi.w	801c1a4 <mktime+0x340>
 801bed6:	2d46      	cmp	r5, #70	@ 0x46
 801bed8:	f340 808e 	ble.w	801bff8 <mktime+0x194>
 801bedc:	2346      	movs	r3, #70	@ 0x46
 801bede:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801bee2:	2164      	movs	r1, #100	@ 0x64
 801bee4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801bee8:	079a      	lsls	r2, r3, #30
 801beea:	d17f      	bne.n	801bfec <mktime+0x188>
 801beec:	fb93 f2f1 	sdiv	r2, r3, r1
 801bef0:	fb01 3212 	mls	r2, r1, r2, r3
 801bef4:	2a00      	cmp	r2, #0
 801bef6:	d17c      	bne.n	801bff2 <mktime+0x18e>
 801bef8:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801befc:	fb92 fef0 	sdiv	lr, r2, r0
 801bf00:	fb00 221e 	mls	r2, r0, lr, r2
 801bf04:	2a00      	cmp	r2, #0
 801bf06:	bf14      	ite	ne
 801bf08:	4662      	movne	r2, ip
 801bf0a:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801bf0e:	3301      	adds	r3, #1
 801bf10:	429d      	cmp	r5, r3
 801bf12:	4416      	add	r6, r2
 801bf14:	d1e8      	bne.n	801bee8 <mktime+0x84>
 801bf16:	4ba1      	ldr	r3, [pc, #644]	@ (801c19c <mktime+0x338>)
 801bf18:	ea4f 78e4 	mov.w	r8, r4, asr #31
 801bf1c:	fbc6 4803 	smlal	r4, r8, r6, r3
 801bf20:	f000 f9fa 	bl	801c318 <__tz_lock>
 801bf24:	f000 fa04 	bl	801c330 <_tzset_unlocked>
 801bf28:	4b9d      	ldr	r3, [pc, #628]	@ (801c1a0 <mktime+0x33c>)
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	f000 8140 	beq.w	801c1b2 <mktime+0x34e>
 801bf32:	f8d7 a020 	ldr.w	sl, [r7, #32]
 801bf36:	6978      	ldr	r0, [r7, #20]
 801bf38:	4653      	mov	r3, sl
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	bfa8      	it	ge
 801bf3e:	2301      	movge	r3, #1
 801bf40:	9301      	str	r3, [sp, #4]
 801bf42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801bf46:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 801bf4a:	4283      	cmp	r3, r0
 801bf4c:	f040 8096 	bne.w	801c07c <mktime+0x218>
 801bf50:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 801bf54:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 801bf58:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 801bf5c:	1a13      	subs	r3, r2, r0
 801bf5e:	9303      	str	r3, [sp, #12]
 801bf60:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 801bf64:	9302      	str	r3, [sp, #8]
 801bf66:	9a02      	ldr	r2, [sp, #8]
 801bf68:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801bf6c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 801bf70:	ebb2 0e03 	subs.w	lr, r2, r3
 801bf74:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 801bf78:	4574      	cmp	r4, lr
 801bf7a:	eb78 0201 	sbcs.w	r2, r8, r1
 801bf7e:	f280 8085 	bge.w	801c08c <mktime+0x228>
 801bf82:	f8d9 2000 	ldr.w	r2, [r9]
 801bf86:	2a00      	cmp	r2, #0
 801bf88:	f000 808d 	beq.w	801c0a6 <mktime+0x242>
 801bf8c:	9a03      	ldr	r2, [sp, #12]
 801bf8e:	4294      	cmp	r4, r2
 801bf90:	eb78 020b 	sbcs.w	r2, r8, fp
 801bf94:	f2c0 810a 	blt.w	801c1ac <mktime+0x348>
 801bf98:	4574      	cmp	r4, lr
 801bf9a:	eb78 0101 	sbcs.w	r1, r8, r1
 801bf9e:	bfb4      	ite	lt
 801bfa0:	f04f 0b01 	movlt.w	fp, #1
 801bfa4:	f04f 0b00 	movge.w	fp, #0
 801bfa8:	f1ba 0f00 	cmp.w	sl, #0
 801bfac:	f280 8087 	bge.w	801c0be <mktime+0x25a>
 801bfb0:	f1bb 0f01 	cmp.w	fp, #1
 801bfb4:	f040 80ff 	bne.w	801c1b6 <mktime+0x352>
 801bfb8:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 801bfbc:	191c      	adds	r4, r3, r4
 801bfbe:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801bfc2:	f04f 0b01 	mov.w	fp, #1
 801bfc6:	f000 f9ad 	bl	801c324 <__tz_unlock>
 801bfca:	3604      	adds	r6, #4
 801bfcc:	2307      	movs	r3, #7
 801bfce:	fb96 f3f3 	sdiv	r3, r6, r3
 801bfd2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801bfd6:	1af6      	subs	r6, r6, r3
 801bfd8:	f100 80db 	bmi.w	801c192 <mktime+0x32e>
 801bfdc:	f8c7 b020 	str.w	fp, [r7, #32]
 801bfe0:	61be      	str	r6, [r7, #24]
 801bfe2:	4620      	mov	r0, r4
 801bfe4:	4641      	mov	r1, r8
 801bfe6:	b005      	add	sp, #20
 801bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfec:	f240 126d 	movw	r2, #365	@ 0x16d
 801bff0:	e78d      	b.n	801bf0e <mktime+0xaa>
 801bff2:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801bff6:	e78a      	b.n	801bf0e <mktime+0xaa>
 801bff8:	d08d      	beq.n	801bf16 <mktime+0xb2>
 801bffa:	2345      	movs	r3, #69	@ 0x45
 801bffc:	f240 1c6d 	movw	ip, #365	@ 0x16d
 801c000:	2164      	movs	r1, #100	@ 0x64
 801c002:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801c006:	e012      	b.n	801c02e <mktime+0x1ca>
 801c008:	bb62      	cbnz	r2, 801c064 <mktime+0x200>
 801c00a:	fb93 f2f1 	sdiv	r2, r3, r1
 801c00e:	fb01 3212 	mls	r2, r1, r2, r3
 801c012:	bb52      	cbnz	r2, 801c06a <mktime+0x206>
 801c014:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 801c018:	fb92 fef0 	sdiv	lr, r2, r0
 801c01c:	fb00 221e 	mls	r2, r0, lr, r2
 801c020:	2a00      	cmp	r2, #0
 801c022:	bf14      	ite	ne
 801c024:	4662      	movne	r2, ip
 801c026:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 801c02a:	1ab6      	subs	r6, r6, r2
 801c02c:	3b01      	subs	r3, #1
 801c02e:	429d      	cmp	r5, r3
 801c030:	f003 0203 	and.w	r2, r3, #3
 801c034:	dbe8      	blt.n	801c008 <mktime+0x1a4>
 801c036:	b9da      	cbnz	r2, 801c070 <mktime+0x20c>
 801c038:	2264      	movs	r2, #100	@ 0x64
 801c03a:	fb95 f3f2 	sdiv	r3, r5, r2
 801c03e:	fb02 5313 	mls	r3, r2, r3, r5
 801c042:	b9c3      	cbnz	r3, 801c076 <mktime+0x212>
 801c044:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 801c048:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801c04c:	fb93 f1f2 	sdiv	r1, r3, r2
 801c050:	fb02 3311 	mls	r3, r2, r1, r3
 801c054:	2b00      	cmp	r3, #0
 801c056:	f240 136d 	movw	r3, #365	@ 0x16d
 801c05a:	bf08      	it	eq
 801c05c:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 801c060:	1af6      	subs	r6, r6, r3
 801c062:	e758      	b.n	801bf16 <mktime+0xb2>
 801c064:	f240 126d 	movw	r2, #365	@ 0x16d
 801c068:	e7df      	b.n	801c02a <mktime+0x1c6>
 801c06a:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 801c06e:	e7dc      	b.n	801c02a <mktime+0x1c6>
 801c070:	f240 136d 	movw	r3, #365	@ 0x16d
 801c074:	e7f4      	b.n	801c060 <mktime+0x1fc>
 801c076:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 801c07a:	e7f1      	b.n	801c060 <mktime+0x1fc>
 801c07c:	f000 f8a2 	bl	801c1c4 <__tzcalc_limits>
 801c080:	2800      	cmp	r0, #0
 801c082:	f47f af65 	bne.w	801bf50 <mktime+0xec>
 801c086:	f8dd b004 	ldr.w	fp, [sp, #4]
 801c08a:	e791      	b.n	801bfb0 <mktime+0x14c>
 801c08c:	9a02      	ldr	r2, [sp, #8]
 801c08e:	1a12      	subs	r2, r2, r0
 801c090:	9202      	str	r2, [sp, #8]
 801c092:	ea4f 72e0 	mov.w	r2, r0, asr #31
 801c096:	eb6c 0c02 	sbc.w	ip, ip, r2
 801c09a:	9a02      	ldr	r2, [sp, #8]
 801c09c:	4294      	cmp	r4, r2
 801c09e:	eb78 0c0c 	sbcs.w	ip, r8, ip
 801c0a2:	dbf0      	blt.n	801c086 <mktime+0x222>
 801c0a4:	e76d      	b.n	801bf82 <mktime+0x11e>
 801c0a6:	9a03      	ldr	r2, [sp, #12]
 801c0a8:	4294      	cmp	r4, r2
 801c0aa:	eb78 020b 	sbcs.w	r2, r8, fp
 801c0ae:	f6ff af73 	blt.w	801bf98 <mktime+0x134>
 801c0b2:	f1ba 0f00 	cmp.w	sl, #0
 801c0b6:	f6ff af7f 	blt.w	801bfb8 <mktime+0x154>
 801c0ba:	f04f 0b01 	mov.w	fp, #1
 801c0be:	9a01      	ldr	r2, [sp, #4]
 801c0c0:	ea82 020b 	eor.w	r2, r2, fp
 801c0c4:	2a01      	cmp	r2, #1
 801c0c6:	f47f af73 	bne.w	801bfb0 <mktime+0x14c>
 801c0ca:	f1bb 0f00 	cmp.w	fp, #0
 801c0ce:	d035      	beq.n	801c13c <mktime+0x2d8>
 801c0d0:	1a1b      	subs	r3, r3, r0
 801c0d2:	683a      	ldr	r2, [r7, #0]
 801c0d4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 801c0d8:	441a      	add	r2, r3
 801c0da:	191c      	adds	r4, r3, r4
 801c0dc:	603a      	str	r2, [r7, #0]
 801c0de:	4638      	mov	r0, r7
 801c0e0:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801c0e4:	f7ff fdea 	bl	801bcbc <validate_structure>
 801c0e8:	68fa      	ldr	r2, [r7, #12]
 801c0ea:	ebb2 020a 	subs.w	r2, r2, sl
 801c0ee:	f43f af5f 	beq.w	801bfb0 <mktime+0x14c>
 801c0f2:	2a01      	cmp	r2, #1
 801c0f4:	dc24      	bgt.n	801c140 <mktime+0x2dc>
 801c0f6:	1c93      	adds	r3, r2, #2
 801c0f8:	bfd8      	it	le
 801c0fa:	2201      	movle	r2, #1
 801c0fc:	69fb      	ldr	r3, [r7, #28]
 801c0fe:	18d3      	adds	r3, r2, r3
 801c100:	d527      	bpl.n	801c152 <mktime+0x2ee>
 801c102:	1e6b      	subs	r3, r5, #1
 801c104:	0798      	lsls	r0, r3, #30
 801c106:	d11e      	bne.n	801c146 <mktime+0x2e2>
 801c108:	2164      	movs	r1, #100	@ 0x64
 801c10a:	fb93 f0f1 	sdiv	r0, r3, r1
 801c10e:	fb01 3310 	mls	r3, r1, r0, r3
 801c112:	b9db      	cbnz	r3, 801c14c <mktime+0x2e8>
 801c114:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801c118:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 801c11c:	fb95 f1f3 	sdiv	r1, r5, r3
 801c120:	fb03 5511 	mls	r5, r3, r1, r5
 801c124:	2d00      	cmp	r5, #0
 801c126:	f240 136d 	movw	r3, #365	@ 0x16d
 801c12a:	bf18      	it	ne
 801c12c:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 801c130:	61fb      	str	r3, [r7, #28]
 801c132:	4416      	add	r6, r2
 801c134:	e73c      	b.n	801bfb0 <mktime+0x14c>
 801c136:	f04f 0b00 	mov.w	fp, #0
 801c13a:	e7c0      	b.n	801c0be <mktime+0x25a>
 801c13c:	1ac3      	subs	r3, r0, r3
 801c13e:	e7c8      	b.n	801c0d2 <mktime+0x26e>
 801c140:	f04f 32ff 	mov.w	r2, #4294967295
 801c144:	e7da      	b.n	801c0fc <mktime+0x298>
 801c146:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 801c14a:	e7f1      	b.n	801c130 <mktime+0x2cc>
 801c14c:	f240 136d 	movw	r3, #365	@ 0x16d
 801c150:	e7ee      	b.n	801c130 <mktime+0x2cc>
 801c152:	07a9      	lsls	r1, r5, #30
 801c154:	d117      	bne.n	801c186 <mktime+0x322>
 801c156:	2064      	movs	r0, #100	@ 0x64
 801c158:	fb95 f1f0 	sdiv	r1, r5, r0
 801c15c:	fb00 5111 	mls	r1, r0, r1, r5
 801c160:	b9a1      	cbnz	r1, 801c18c <mktime+0x328>
 801c162:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 801c166:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 801c16a:	fb95 f0f1 	sdiv	r0, r5, r1
 801c16e:	fb01 5510 	mls	r5, r1, r0, r5
 801c172:	2d00      	cmp	r5, #0
 801c174:	f240 116d 	movw	r1, #365	@ 0x16d
 801c178:	bf08      	it	eq
 801c17a:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 801c17e:	428b      	cmp	r3, r1
 801c180:	bfa8      	it	ge
 801c182:	1a5b      	subge	r3, r3, r1
 801c184:	e7d4      	b.n	801c130 <mktime+0x2cc>
 801c186:	f240 116d 	movw	r1, #365	@ 0x16d
 801c18a:	e7f8      	b.n	801c17e <mktime+0x31a>
 801c18c:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 801c190:	e7f5      	b.n	801c17e <mktime+0x31a>
 801c192:	3607      	adds	r6, #7
 801c194:	e722      	b.n	801bfdc <mktime+0x178>
 801c196:	bf00      	nop
 801c198:	08022df0 	.word	0x08022df0
 801c19c:	00015180 	.word	0x00015180
 801c1a0:	2000ce60 	.word	0x2000ce60
 801c1a4:	f04f 34ff 	mov.w	r4, #4294967295
 801c1a8:	46a0      	mov	r8, r4
 801c1aa:	e71a      	b.n	801bfe2 <mktime+0x17e>
 801c1ac:	f1ba 0f00 	cmp.w	sl, #0
 801c1b0:	dac1      	bge.n	801c136 <mktime+0x2d2>
 801c1b2:	f04f 0b00 	mov.w	fp, #0
 801c1b6:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 801c1ba:	191c      	adds	r4, r3, r4
 801c1bc:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 801c1c0:	e701      	b.n	801bfc6 <mktime+0x162>
 801c1c2:	bf00      	nop

0801c1c4 <__tzcalc_limits>:
 801c1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1c8:	4604      	mov	r4, r0
 801c1ca:	f003 f811 	bl	801f1f0 <__gettzinfo>
 801c1ce:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 801c1d2:	429c      	cmp	r4, r3
 801c1d4:	f340 8099 	ble.w	801c30a <__tzcalc_limits+0x146>
 801c1d8:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 801c1dc:	19e5      	adds	r5, r4, r7
 801c1de:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 801c1e2:	f240 126d 	movw	r2, #365	@ 0x16d
 801c1e6:	10ad      	asrs	r5, r5, #2
 801c1e8:	fb02 5503 	mla	r5, r2, r3, r5
 801c1ec:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 801c1f0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 801c1f4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 801c1f8:	4f45      	ldr	r7, [pc, #276]	@ (801c310 <__tzcalc_limits+0x14c>)
 801c1fa:	fb93 f3f2 	sdiv	r3, r3, r2
 801c1fe:	441d      	add	r5, r3
 801c200:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 801c204:	eb04 030c 	add.w	r3, r4, ip
 801c208:	6044      	str	r4, [r0, #4]
 801c20a:	fbb3 f3f2 	udiv	r3, r3, r2
 801c20e:	4601      	mov	r1, r0
 801c210:	441d      	add	r5, r3
 801c212:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 801c216:	7a0b      	ldrb	r3, [r1, #8]
 801c218:	694a      	ldr	r2, [r1, #20]
 801c21a:	2b4a      	cmp	r3, #74	@ 0x4a
 801c21c:	d133      	bne.n	801c286 <__tzcalc_limits+0xc2>
 801c21e:	07a6      	lsls	r6, r4, #30
 801c220:	eb05 0302 	add.w	r3, r5, r2
 801c224:	d106      	bne.n	801c234 <__tzcalc_limits+0x70>
 801c226:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 801c22a:	fb94 f6fe 	sdiv	r6, r4, lr
 801c22e:	fb0e 4616 	mls	r6, lr, r6, r4
 801c232:	b936      	cbnz	r6, 801c242 <__tzcalc_limits+0x7e>
 801c234:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 801c238:	fb94 f6fe 	sdiv	r6, r4, lr
 801c23c:	fb0e 4616 	mls	r6, lr, r6, r4
 801c240:	b9fe      	cbnz	r6, 801c282 <__tzcalc_limits+0xbe>
 801c242:	2a3b      	cmp	r2, #59	@ 0x3b
 801c244:	bfd4      	ite	le
 801c246:	2200      	movle	r2, #0
 801c248:	2201      	movgt	r2, #1
 801c24a:	4413      	add	r3, r2
 801c24c:	3b01      	subs	r3, #1
 801c24e:	698a      	ldr	r2, [r1, #24]
 801c250:	17d6      	asrs	r6, r2, #31
 801c252:	fbc3 2607 	smlal	r2, r6, r3, r7
 801c256:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801c258:	18d2      	adds	r2, r2, r3
 801c25a:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 801c25e:	e9c1 2308 	strd	r2, r3, [r1, #32]
 801c262:	3128      	adds	r1, #40	@ 0x28
 801c264:	458c      	cmp	ip, r1
 801c266:	d1d6      	bne.n	801c216 <__tzcalc_limits+0x52>
 801c268:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 801c26c:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 801c270:	428c      	cmp	r4, r1
 801c272:	4193      	sbcs	r3, r2
 801c274:	bfb4      	ite	lt
 801c276:	2301      	movlt	r3, #1
 801c278:	2300      	movge	r3, #0
 801c27a:	6003      	str	r3, [r0, #0]
 801c27c:	2001      	movs	r0, #1
 801c27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c282:	2200      	movs	r2, #0
 801c284:	e7e1      	b.n	801c24a <__tzcalc_limits+0x86>
 801c286:	2b44      	cmp	r3, #68	@ 0x44
 801c288:	d101      	bne.n	801c28e <__tzcalc_limits+0xca>
 801c28a:	18ab      	adds	r3, r5, r2
 801c28c:	e7df      	b.n	801c24e <__tzcalc_limits+0x8a>
 801c28e:	07a3      	lsls	r3, r4, #30
 801c290:	d105      	bne.n	801c29e <__tzcalc_limits+0xda>
 801c292:	2664      	movs	r6, #100	@ 0x64
 801c294:	fb94 f3f6 	sdiv	r3, r4, r6
 801c298:	fb06 4313 	mls	r3, r6, r3, r4
 801c29c:	bb7b      	cbnz	r3, 801c2fe <__tzcalc_limits+0x13a>
 801c29e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801c2a2:	fb94 f6f3 	sdiv	r6, r4, r3
 801c2a6:	fb03 4616 	mls	r6, r3, r6, r4
 801c2aa:	fab6 f686 	clz	r6, r6
 801c2ae:	0976      	lsrs	r6, r6, #5
 801c2b0:	f8df e060 	ldr.w	lr, [pc, #96]	@ 801c314 <__tzcalc_limits+0x150>
 801c2b4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 801c2b8:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 801c2bc:	462b      	mov	r3, r5
 801c2be:	f04f 0800 	mov.w	r8, #0
 801c2c2:	fb0a e606 	mla	r6, sl, r6, lr
 801c2c6:	f108 0801 	add.w	r8, r8, #1
 801c2ca:	45c1      	cmp	r9, r8
 801c2cc:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 801c2d0:	dc17      	bgt.n	801c302 <__tzcalc_limits+0x13e>
 801c2d2:	f103 0804 	add.w	r8, r3, #4
 801c2d6:	2607      	movs	r6, #7
 801c2d8:	fb98 f6f6 	sdiv	r6, r8, r6
 801c2dc:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 801c2e0:	eba8 0606 	sub.w	r6, r8, r6
 801c2e4:	1b92      	subs	r2, r2, r6
 801c2e6:	690e      	ldr	r6, [r1, #16]
 801c2e8:	f106 36ff 	add.w	r6, r6, #4294967295
 801c2ec:	bf48      	it	mi
 801c2ee:	3207      	addmi	r2, #7
 801c2f0:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 801c2f4:	4432      	add	r2, r6
 801c2f6:	4572      	cmp	r2, lr
 801c2f8:	da05      	bge.n	801c306 <__tzcalc_limits+0x142>
 801c2fa:	4413      	add	r3, r2
 801c2fc:	e7a7      	b.n	801c24e <__tzcalc_limits+0x8a>
 801c2fe:	2601      	movs	r6, #1
 801c300:	e7d6      	b.n	801c2b0 <__tzcalc_limits+0xec>
 801c302:	4473      	add	r3, lr
 801c304:	e7df      	b.n	801c2c6 <__tzcalc_limits+0x102>
 801c306:	3a07      	subs	r2, #7
 801c308:	e7f5      	b.n	801c2f6 <__tzcalc_limits+0x132>
 801c30a:	2000      	movs	r0, #0
 801c30c:	e7b7      	b.n	801c27e <__tzcalc_limits+0xba>
 801c30e:	bf00      	nop
 801c310:	00015180 	.word	0x00015180
 801c314:	08023014 	.word	0x08023014

0801c318 <__tz_lock>:
 801c318:	4801      	ldr	r0, [pc, #4]	@ (801c320 <__tz_lock+0x8>)
 801c31a:	f000 bab3 	b.w	801c884 <__retarget_lock_acquire>
 801c31e:	bf00      	nop
 801c320:	2000ce68 	.word	0x2000ce68

0801c324 <__tz_unlock>:
 801c324:	4801      	ldr	r0, [pc, #4]	@ (801c32c <__tz_unlock+0x8>)
 801c326:	f000 baaf 	b.w	801c888 <__retarget_lock_release>
 801c32a:	bf00      	nop
 801c32c:	2000ce68 	.word	0x2000ce68

0801c330 <_tzset_unlocked>:
 801c330:	4b01      	ldr	r3, [pc, #4]	@ (801c338 <_tzset_unlocked+0x8>)
 801c332:	6818      	ldr	r0, [r3, #0]
 801c334:	f000 b802 	b.w	801c33c <_tzset_unlocked_r>
 801c338:	20000674 	.word	0x20000674

0801c33c <_tzset_unlocked_r>:
 801c33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c340:	b08d      	sub	sp, #52	@ 0x34
 801c342:	4607      	mov	r7, r0
 801c344:	f002 ff54 	bl	801f1f0 <__gettzinfo>
 801c348:	49bc      	ldr	r1, [pc, #752]	@ (801c63c <_tzset_unlocked_r+0x300>)
 801c34a:	4dbd      	ldr	r5, [pc, #756]	@ (801c640 <_tzset_unlocked_r+0x304>)
 801c34c:	4604      	mov	r4, r0
 801c34e:	4638      	mov	r0, r7
 801c350:	f000 fc28 	bl	801cba4 <_getenv_r>
 801c354:	4606      	mov	r6, r0
 801c356:	bb10      	cbnz	r0, 801c39e <_tzset_unlocked_r+0x62>
 801c358:	4bba      	ldr	r3, [pc, #744]	@ (801c644 <_tzset_unlocked_r+0x308>)
 801c35a:	4abb      	ldr	r2, [pc, #748]	@ (801c648 <_tzset_unlocked_r+0x30c>)
 801c35c:	6018      	str	r0, [r3, #0]
 801c35e:	4bbb      	ldr	r3, [pc, #748]	@ (801c64c <_tzset_unlocked_r+0x310>)
 801c360:	62a0      	str	r0, [r4, #40]	@ 0x28
 801c362:	6018      	str	r0, [r3, #0]
 801c364:	4bba      	ldr	r3, [pc, #744]	@ (801c650 <_tzset_unlocked_r+0x314>)
 801c366:	6520      	str	r0, [r4, #80]	@ 0x50
 801c368:	e9c3 2200 	strd	r2, r2, [r3]
 801c36c:	214a      	movs	r1, #74	@ 0x4a
 801c36e:	2200      	movs	r2, #0
 801c370:	2300      	movs	r3, #0
 801c372:	e9c4 0003 	strd	r0, r0, [r4, #12]
 801c376:	e9c4 0005 	strd	r0, r0, [r4, #20]
 801c37a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 801c37e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 801c382:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c386:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801c38a:	6828      	ldr	r0, [r5, #0]
 801c38c:	7221      	strb	r1, [r4, #8]
 801c38e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801c392:	f7fe ff7f 	bl	801b294 <free>
 801c396:	602e      	str	r6, [r5, #0]
 801c398:	b00d      	add	sp, #52	@ 0x34
 801c39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c39e:	6829      	ldr	r1, [r5, #0]
 801c3a0:	2900      	cmp	r1, #0
 801c3a2:	f040 808e 	bne.w	801c4c2 <_tzset_unlocked_r+0x186>
 801c3a6:	6828      	ldr	r0, [r5, #0]
 801c3a8:	f7fe ff74 	bl	801b294 <free>
 801c3ac:	4630      	mov	r0, r6
 801c3ae:	f7e3 ff19 	bl	80001e4 <strlen>
 801c3b2:	1c41      	adds	r1, r0, #1
 801c3b4:	4638      	mov	r0, r7
 801c3b6:	f7fe ff75 	bl	801b2a4 <_malloc_r>
 801c3ba:	6028      	str	r0, [r5, #0]
 801c3bc:	2800      	cmp	r0, #0
 801c3be:	f040 8086 	bne.w	801c4ce <_tzset_unlocked_r+0x192>
 801c3c2:	4aa2      	ldr	r2, [pc, #648]	@ (801c64c <_tzset_unlocked_r+0x310>)
 801c3c4:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 801c650 <_tzset_unlocked_r+0x314>
 801c3c8:	f8df a278 	ldr.w	sl, [pc, #632]	@ 801c644 <_tzset_unlocked_r+0x308>
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	6013      	str	r3, [r2, #0]
 801c3d0:	4aa0      	ldr	r2, [pc, #640]	@ (801c654 <_tzset_unlocked_r+0x318>)
 801c3d2:	f8ca 3000 	str.w	r3, [sl]
 801c3d6:	2000      	movs	r0, #0
 801c3d8:	2100      	movs	r1, #0
 801c3da:	e9c8 2200 	strd	r2, r2, [r8]
 801c3de:	e9c4 3303 	strd	r3, r3, [r4, #12]
 801c3e2:	e9c4 3305 	strd	r3, r3, [r4, #20]
 801c3e6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801c3ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 801c3ee:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 801c3f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 801c3f6:	224a      	movs	r2, #74	@ 0x4a
 801c3f8:	7222      	strb	r2, [r4, #8]
 801c3fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c3fc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 801c400:	6523      	str	r3, [r4, #80]	@ 0x50
 801c402:	7833      	ldrb	r3, [r6, #0]
 801c404:	2b3a      	cmp	r3, #58	@ 0x3a
 801c406:	bf08      	it	eq
 801c408:	3601      	addeq	r6, #1
 801c40a:	7833      	ldrb	r3, [r6, #0]
 801c40c:	2b3c      	cmp	r3, #60	@ 0x3c
 801c40e:	d162      	bne.n	801c4d6 <_tzset_unlocked_r+0x19a>
 801c410:	1c75      	adds	r5, r6, #1
 801c412:	4a91      	ldr	r2, [pc, #580]	@ (801c658 <_tzset_unlocked_r+0x31c>)
 801c414:	4991      	ldr	r1, [pc, #580]	@ (801c65c <_tzset_unlocked_r+0x320>)
 801c416:	ab0a      	add	r3, sp, #40	@ 0x28
 801c418:	4628      	mov	r0, r5
 801c41a:	f000 fc45 	bl	801cca8 <siscanf>
 801c41e:	2800      	cmp	r0, #0
 801c420:	ddba      	ble.n	801c398 <_tzset_unlocked_r+0x5c>
 801c422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c424:	1eda      	subs	r2, r3, #3
 801c426:	2a07      	cmp	r2, #7
 801c428:	d8b6      	bhi.n	801c398 <_tzset_unlocked_r+0x5c>
 801c42a:	5ceb      	ldrb	r3, [r5, r3]
 801c42c:	2b3e      	cmp	r3, #62	@ 0x3e
 801c42e:	d1b3      	bne.n	801c398 <_tzset_unlocked_r+0x5c>
 801c430:	3602      	adds	r6, #2
 801c432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c434:	18f5      	adds	r5, r6, r3
 801c436:	5cf3      	ldrb	r3, [r6, r3]
 801c438:	2b2d      	cmp	r3, #45	@ 0x2d
 801c43a:	d15a      	bne.n	801c4f2 <_tzset_unlocked_r+0x1b6>
 801c43c:	3501      	adds	r5, #1
 801c43e:	f04f 39ff 	mov.w	r9, #4294967295
 801c442:	2300      	movs	r3, #0
 801c444:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c448:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c44c:	af08      	add	r7, sp, #32
 801c44e:	ab0a      	add	r3, sp, #40	@ 0x28
 801c450:	e9cd 3701 	strd	r3, r7, [sp, #4]
 801c454:	9303      	str	r3, [sp, #12]
 801c456:	f10d 031e 	add.w	r3, sp, #30
 801c45a:	9300      	str	r3, [sp, #0]
 801c45c:	4980      	ldr	r1, [pc, #512]	@ (801c660 <_tzset_unlocked_r+0x324>)
 801c45e:	ab0a      	add	r3, sp, #40	@ 0x28
 801c460:	aa07      	add	r2, sp, #28
 801c462:	4628      	mov	r0, r5
 801c464:	f000 fc20 	bl	801cca8 <siscanf>
 801c468:	2800      	cmp	r0, #0
 801c46a:	dd95      	ble.n	801c398 <_tzset_unlocked_r+0x5c>
 801c46c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801c470:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801c474:	223c      	movs	r2, #60	@ 0x3c
 801c476:	fb02 6603 	mla	r6, r2, r3, r6
 801c47a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801c47e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 801c482:	fb02 6603 	mla	r6, r2, r3, r6
 801c486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c488:	fb09 f606 	mul.w	r6, r9, r6
 801c48c:	eb05 0903 	add.w	r9, r5, r3
 801c490:	5ceb      	ldrb	r3, [r5, r3]
 801c492:	2b3c      	cmp	r3, #60	@ 0x3c
 801c494:	f040 80ee 	bne.w	801c674 <_tzset_unlocked_r+0x338>
 801c498:	f109 0501 	add.w	r5, r9, #1
 801c49c:	4a71      	ldr	r2, [pc, #452]	@ (801c664 <_tzset_unlocked_r+0x328>)
 801c49e:	496f      	ldr	r1, [pc, #444]	@ (801c65c <_tzset_unlocked_r+0x320>)
 801c4a0:	ab0a      	add	r3, sp, #40	@ 0x28
 801c4a2:	4628      	mov	r0, r5
 801c4a4:	f000 fc00 	bl	801cca8 <siscanf>
 801c4a8:	2800      	cmp	r0, #0
 801c4aa:	dc28      	bgt.n	801c4fe <_tzset_unlocked_r+0x1c2>
 801c4ac:	f899 3001 	ldrb.w	r3, [r9, #1]
 801c4b0:	2b3e      	cmp	r3, #62	@ 0x3e
 801c4b2:	d124      	bne.n	801c4fe <_tzset_unlocked_r+0x1c2>
 801c4b4:	4b68      	ldr	r3, [pc, #416]	@ (801c658 <_tzset_unlocked_r+0x31c>)
 801c4b6:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c4b8:	e9c8 3300 	strd	r3, r3, [r8]
 801c4bc:	f8ca 6000 	str.w	r6, [sl]
 801c4c0:	e76a      	b.n	801c398 <_tzset_unlocked_r+0x5c>
 801c4c2:	f7e3 fe85 	bl	80001d0 <strcmp>
 801c4c6:	2800      	cmp	r0, #0
 801c4c8:	f47f af6d 	bne.w	801c3a6 <_tzset_unlocked_r+0x6a>
 801c4cc:	e764      	b.n	801c398 <_tzset_unlocked_r+0x5c>
 801c4ce:	4631      	mov	r1, r6
 801c4d0:	f000 f9e8 	bl	801c8a4 <strcpy>
 801c4d4:	e775      	b.n	801c3c2 <_tzset_unlocked_r+0x86>
 801c4d6:	4a60      	ldr	r2, [pc, #384]	@ (801c658 <_tzset_unlocked_r+0x31c>)
 801c4d8:	4963      	ldr	r1, [pc, #396]	@ (801c668 <_tzset_unlocked_r+0x32c>)
 801c4da:	ab0a      	add	r3, sp, #40	@ 0x28
 801c4dc:	4630      	mov	r0, r6
 801c4de:	f000 fbe3 	bl	801cca8 <siscanf>
 801c4e2:	2800      	cmp	r0, #0
 801c4e4:	f77f af58 	ble.w	801c398 <_tzset_unlocked_r+0x5c>
 801c4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4ea:	3b03      	subs	r3, #3
 801c4ec:	2b07      	cmp	r3, #7
 801c4ee:	d9a0      	bls.n	801c432 <_tzset_unlocked_r+0xf6>
 801c4f0:	e752      	b.n	801c398 <_tzset_unlocked_r+0x5c>
 801c4f2:	2b2b      	cmp	r3, #43	@ 0x2b
 801c4f4:	bf08      	it	eq
 801c4f6:	3501      	addeq	r5, #1
 801c4f8:	f04f 0901 	mov.w	r9, #1
 801c4fc:	e7a1      	b.n	801c442 <_tzset_unlocked_r+0x106>
 801c4fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c500:	1eda      	subs	r2, r3, #3
 801c502:	2a07      	cmp	r2, #7
 801c504:	f63f af48 	bhi.w	801c398 <_tzset_unlocked_r+0x5c>
 801c508:	5ceb      	ldrb	r3, [r5, r3]
 801c50a:	2b3e      	cmp	r3, #62	@ 0x3e
 801c50c:	f47f af44 	bne.w	801c398 <_tzset_unlocked_r+0x5c>
 801c510:	f109 0902 	add.w	r9, r9, #2
 801c514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c516:	eb09 0503 	add.w	r5, r9, r3
 801c51a:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c51e:	2b2d      	cmp	r3, #45	@ 0x2d
 801c520:	f040 80b7 	bne.w	801c692 <_tzset_unlocked_r+0x356>
 801c524:	3501      	adds	r5, #1
 801c526:	f04f 39ff 	mov.w	r9, #4294967295
 801c52a:	2300      	movs	r3, #0
 801c52c:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c530:	f8ad 301e 	strh.w	r3, [sp, #30]
 801c534:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c538:	930a      	str	r3, [sp, #40]	@ 0x28
 801c53a:	ab0a      	add	r3, sp, #40	@ 0x28
 801c53c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801c540:	9301      	str	r3, [sp, #4]
 801c542:	f10d 031e 	add.w	r3, sp, #30
 801c546:	9300      	str	r3, [sp, #0]
 801c548:	4945      	ldr	r1, [pc, #276]	@ (801c660 <_tzset_unlocked_r+0x324>)
 801c54a:	ab0a      	add	r3, sp, #40	@ 0x28
 801c54c:	aa07      	add	r2, sp, #28
 801c54e:	4628      	mov	r0, r5
 801c550:	f000 fbaa 	bl	801cca8 <siscanf>
 801c554:	2800      	cmp	r0, #0
 801c556:	f300 80a2 	bgt.w	801c69e <_tzset_unlocked_r+0x362>
 801c55a:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 801c55e:	9304      	str	r3, [sp, #16]
 801c560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c562:	4627      	mov	r7, r4
 801c564:	441d      	add	r5, r3
 801c566:	f04f 0b00 	mov.w	fp, #0
 801c56a:	782b      	ldrb	r3, [r5, #0]
 801c56c:	2b2c      	cmp	r3, #44	@ 0x2c
 801c56e:	bf08      	it	eq
 801c570:	3501      	addeq	r5, #1
 801c572:	f895 9000 	ldrb.w	r9, [r5]
 801c576:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 801c57a:	f040 80a3 	bne.w	801c6c4 <_tzset_unlocked_r+0x388>
 801c57e:	ab0a      	add	r3, sp, #40	@ 0x28
 801c580:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 801c584:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c588:	aa09      	add	r2, sp, #36	@ 0x24
 801c58a:	9200      	str	r2, [sp, #0]
 801c58c:	4937      	ldr	r1, [pc, #220]	@ (801c66c <_tzset_unlocked_r+0x330>)
 801c58e:	9303      	str	r3, [sp, #12]
 801c590:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 801c594:	4628      	mov	r0, r5
 801c596:	f000 fb87 	bl	801cca8 <siscanf>
 801c59a:	2803      	cmp	r0, #3
 801c59c:	f47f aefc 	bne.w	801c398 <_tzset_unlocked_r+0x5c>
 801c5a0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801c5a4:	1e4b      	subs	r3, r1, #1
 801c5a6:	2b0b      	cmp	r3, #11
 801c5a8:	f63f aef6 	bhi.w	801c398 <_tzset_unlocked_r+0x5c>
 801c5ac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801c5b0:	1e53      	subs	r3, r2, #1
 801c5b2:	2b04      	cmp	r3, #4
 801c5b4:	f63f aef0 	bhi.w	801c398 <_tzset_unlocked_r+0x5c>
 801c5b8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801c5bc:	2b06      	cmp	r3, #6
 801c5be:	f63f aeeb 	bhi.w	801c398 <_tzset_unlocked_r+0x5c>
 801c5c2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801c5c6:	f887 9008 	strb.w	r9, [r7, #8]
 801c5ca:	617b      	str	r3, [r7, #20]
 801c5cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c5ce:	eb05 0903 	add.w	r9, r5, r3
 801c5d2:	2500      	movs	r5, #0
 801c5d4:	f04f 0302 	mov.w	r3, #2
 801c5d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c5dc:	f8ad 501e 	strh.w	r5, [sp, #30]
 801c5e0:	f8ad 5020 	strh.w	r5, [sp, #32]
 801c5e4:	950a      	str	r5, [sp, #40]	@ 0x28
 801c5e6:	f899 3000 	ldrb.w	r3, [r9]
 801c5ea:	2b2f      	cmp	r3, #47	@ 0x2f
 801c5ec:	f040 8096 	bne.w	801c71c <_tzset_unlocked_r+0x3e0>
 801c5f0:	ab0a      	add	r3, sp, #40	@ 0x28
 801c5f2:	aa08      	add	r2, sp, #32
 801c5f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c5f8:	f10d 021e 	add.w	r2, sp, #30
 801c5fc:	9200      	str	r2, [sp, #0]
 801c5fe:	491c      	ldr	r1, [pc, #112]	@ (801c670 <_tzset_unlocked_r+0x334>)
 801c600:	9303      	str	r3, [sp, #12]
 801c602:	aa07      	add	r2, sp, #28
 801c604:	4648      	mov	r0, r9
 801c606:	f000 fb4f 	bl	801cca8 <siscanf>
 801c60a:	42a8      	cmp	r0, r5
 801c60c:	f300 8086 	bgt.w	801c71c <_tzset_unlocked_r+0x3e0>
 801c610:	214a      	movs	r1, #74	@ 0x4a
 801c612:	2200      	movs	r2, #0
 801c614:	2300      	movs	r3, #0
 801c616:	e9c4 5503 	strd	r5, r5, [r4, #12]
 801c61a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c61e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801c622:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 801c626:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 801c62a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 801c62e:	7221      	strb	r1, [r4, #8]
 801c630:	62a5      	str	r5, [r4, #40]	@ 0x28
 801c632:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 801c636:	6525      	str	r5, [r4, #80]	@ 0x50
 801c638:	e6ae      	b.n	801c398 <_tzset_unlocked_r+0x5c>
 801c63a:	bf00      	nop
 801c63c:	08022e50 	.word	0x08022e50
 801c640:	2000ce40 	.word	0x2000ce40
 801c644:	2000ce5c 	.word	0x2000ce5c
 801c648:	08022e53 	.word	0x08022e53
 801c64c:	2000ce60 	.word	0x2000ce60
 801c650:	2000066c 	.word	0x2000066c
 801c654:	0802328b 	.word	0x0802328b
 801c658:	2000ce50 	.word	0x2000ce50
 801c65c:	08022e57 	.word	0x08022e57
 801c660:	08022e8c 	.word	0x08022e8c
 801c664:	2000ce44 	.word	0x2000ce44
 801c668:	08022e6a 	.word	0x08022e6a
 801c66c:	08022e78 	.word	0x08022e78
 801c670:	08022e8b 	.word	0x08022e8b
 801c674:	4a3e      	ldr	r2, [pc, #248]	@ (801c770 <_tzset_unlocked_r+0x434>)
 801c676:	493f      	ldr	r1, [pc, #252]	@ (801c774 <_tzset_unlocked_r+0x438>)
 801c678:	ab0a      	add	r3, sp, #40	@ 0x28
 801c67a:	4648      	mov	r0, r9
 801c67c:	f000 fb14 	bl	801cca8 <siscanf>
 801c680:	2800      	cmp	r0, #0
 801c682:	f77f af17 	ble.w	801c4b4 <_tzset_unlocked_r+0x178>
 801c686:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c688:	3b03      	subs	r3, #3
 801c68a:	2b07      	cmp	r3, #7
 801c68c:	f67f af42 	bls.w	801c514 <_tzset_unlocked_r+0x1d8>
 801c690:	e682      	b.n	801c398 <_tzset_unlocked_r+0x5c>
 801c692:	2b2b      	cmp	r3, #43	@ 0x2b
 801c694:	bf08      	it	eq
 801c696:	3501      	addeq	r5, #1
 801c698:	f04f 0901 	mov.w	r9, #1
 801c69c:	e745      	b.n	801c52a <_tzset_unlocked_r+0x1ee>
 801c69e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c6a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c6a6:	213c      	movs	r1, #60	@ 0x3c
 801c6a8:	fb01 3302 	mla	r3, r1, r2, r3
 801c6ac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801c6b0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801c6b4:	fb01 3302 	mla	r3, r1, r2, r3
 801c6b8:	fb09 f303 	mul.w	r3, r9, r3
 801c6bc:	e74f      	b.n	801c55e <_tzset_unlocked_r+0x222>
 801c6be:	f04f 0b01 	mov.w	fp, #1
 801c6c2:	e752      	b.n	801c56a <_tzset_unlocked_r+0x22e>
 801c6c4:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 801c6c8:	bf06      	itte	eq
 801c6ca:	3501      	addeq	r5, #1
 801c6cc:	464b      	moveq	r3, r9
 801c6ce:	2344      	movne	r3, #68	@ 0x44
 801c6d0:	220a      	movs	r2, #10
 801c6d2:	a90b      	add	r1, sp, #44	@ 0x2c
 801c6d4:	4628      	mov	r0, r5
 801c6d6:	9305      	str	r3, [sp, #20]
 801c6d8:	f000 fadc 	bl	801cc94 <strtoul>
 801c6dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 801c6e0:	9b05      	ldr	r3, [sp, #20]
 801c6e2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 801c6e6:	45a9      	cmp	r9, r5
 801c6e8:	d114      	bne.n	801c714 <_tzset_unlocked_r+0x3d8>
 801c6ea:	234d      	movs	r3, #77	@ 0x4d
 801c6ec:	f1bb 0f00 	cmp.w	fp, #0
 801c6f0:	d107      	bne.n	801c702 <_tzset_unlocked_r+0x3c6>
 801c6f2:	7223      	strb	r3, [r4, #8]
 801c6f4:	2103      	movs	r1, #3
 801c6f6:	2302      	movs	r3, #2
 801c6f8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 801c6fc:	f8c4 b014 	str.w	fp, [r4, #20]
 801c700:	e767      	b.n	801c5d2 <_tzset_unlocked_r+0x296>
 801c702:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 801c706:	220b      	movs	r2, #11
 801c708:	2301      	movs	r3, #1
 801c70a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 801c70e:	2300      	movs	r3, #0
 801c710:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801c712:	e75e      	b.n	801c5d2 <_tzset_unlocked_r+0x296>
 801c714:	b280      	uxth	r0, r0
 801c716:	723b      	strb	r3, [r7, #8]
 801c718:	6178      	str	r0, [r7, #20]
 801c71a:	e75a      	b.n	801c5d2 <_tzset_unlocked_r+0x296>
 801c71c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c720:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c724:	213c      	movs	r1, #60	@ 0x3c
 801c726:	fb01 3302 	mla	r3, r1, r2, r3
 801c72a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801c72e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 801c732:	fb01 3302 	mla	r3, r1, r2, r3
 801c736:	61bb      	str	r3, [r7, #24]
 801c738:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c73a:	3728      	adds	r7, #40	@ 0x28
 801c73c:	444d      	add	r5, r9
 801c73e:	f1bb 0f00 	cmp.w	fp, #0
 801c742:	d0bc      	beq.n	801c6be <_tzset_unlocked_r+0x382>
 801c744:	9b04      	ldr	r3, [sp, #16]
 801c746:	6523      	str	r3, [r4, #80]	@ 0x50
 801c748:	4b0b      	ldr	r3, [pc, #44]	@ (801c778 <_tzset_unlocked_r+0x43c>)
 801c74a:	f8c8 3000 	str.w	r3, [r8]
 801c74e:	6860      	ldr	r0, [r4, #4]
 801c750:	4b07      	ldr	r3, [pc, #28]	@ (801c770 <_tzset_unlocked_r+0x434>)
 801c752:	62a6      	str	r6, [r4, #40]	@ 0x28
 801c754:	f8c8 3004 	str.w	r3, [r8, #4]
 801c758:	f7ff fd34 	bl	801c1c4 <__tzcalc_limits>
 801c75c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801c75e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801c760:	f8ca 2000 	str.w	r2, [sl]
 801c764:	1a9b      	subs	r3, r3, r2
 801c766:	4a05      	ldr	r2, [pc, #20]	@ (801c77c <_tzset_unlocked_r+0x440>)
 801c768:	bf18      	it	ne
 801c76a:	2301      	movne	r3, #1
 801c76c:	6013      	str	r3, [r2, #0]
 801c76e:	e613      	b.n	801c398 <_tzset_unlocked_r+0x5c>
 801c770:	2000ce44 	.word	0x2000ce44
 801c774:	08022e6a 	.word	0x08022e6a
 801c778:	2000ce50 	.word	0x2000ce50
 801c77c:	2000ce60 	.word	0x2000ce60

0801c780 <_close_r>:
 801c780:	b538      	push	{r3, r4, r5, lr}
 801c782:	4d06      	ldr	r5, [pc, #24]	@ (801c79c <_close_r+0x1c>)
 801c784:	2300      	movs	r3, #0
 801c786:	4604      	mov	r4, r0
 801c788:	4608      	mov	r0, r1
 801c78a:	602b      	str	r3, [r5, #0]
 801c78c:	f7e5 fbac 	bl	8001ee8 <_close>
 801c790:	1c43      	adds	r3, r0, #1
 801c792:	d102      	bne.n	801c79a <_close_r+0x1a>
 801c794:	682b      	ldr	r3, [r5, #0]
 801c796:	b103      	cbz	r3, 801c79a <_close_r+0x1a>
 801c798:	6023      	str	r3, [r4, #0]
 801c79a:	bd38      	pop	{r3, r4, r5, pc}
 801c79c:	2000ce64 	.word	0x2000ce64

0801c7a0 <_lseek_r>:
 801c7a0:	b538      	push	{r3, r4, r5, lr}
 801c7a2:	4d07      	ldr	r5, [pc, #28]	@ (801c7c0 <_lseek_r+0x20>)
 801c7a4:	4604      	mov	r4, r0
 801c7a6:	4608      	mov	r0, r1
 801c7a8:	4611      	mov	r1, r2
 801c7aa:	2200      	movs	r2, #0
 801c7ac:	602a      	str	r2, [r5, #0]
 801c7ae:	461a      	mov	r2, r3
 801c7b0:	f7e5 fbc1 	bl	8001f36 <_lseek>
 801c7b4:	1c43      	adds	r3, r0, #1
 801c7b6:	d102      	bne.n	801c7be <_lseek_r+0x1e>
 801c7b8:	682b      	ldr	r3, [r5, #0]
 801c7ba:	b103      	cbz	r3, 801c7be <_lseek_r+0x1e>
 801c7bc:	6023      	str	r3, [r4, #0]
 801c7be:	bd38      	pop	{r3, r4, r5, pc}
 801c7c0:	2000ce64 	.word	0x2000ce64

0801c7c4 <_read_r>:
 801c7c4:	b538      	push	{r3, r4, r5, lr}
 801c7c6:	4d07      	ldr	r5, [pc, #28]	@ (801c7e4 <_read_r+0x20>)
 801c7c8:	4604      	mov	r4, r0
 801c7ca:	4608      	mov	r0, r1
 801c7cc:	4611      	mov	r1, r2
 801c7ce:	2200      	movs	r2, #0
 801c7d0:	602a      	str	r2, [r5, #0]
 801c7d2:	461a      	mov	r2, r3
 801c7d4:	f7e5 fb6b 	bl	8001eae <_read>
 801c7d8:	1c43      	adds	r3, r0, #1
 801c7da:	d102      	bne.n	801c7e2 <_read_r+0x1e>
 801c7dc:	682b      	ldr	r3, [r5, #0]
 801c7de:	b103      	cbz	r3, 801c7e2 <_read_r+0x1e>
 801c7e0:	6023      	str	r3, [r4, #0]
 801c7e2:	bd38      	pop	{r3, r4, r5, pc}
 801c7e4:	2000ce64 	.word	0x2000ce64

0801c7e8 <_sbrk_r>:
 801c7e8:	b538      	push	{r3, r4, r5, lr}
 801c7ea:	4d06      	ldr	r5, [pc, #24]	@ (801c804 <_sbrk_r+0x1c>)
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	4604      	mov	r4, r0
 801c7f0:	4608      	mov	r0, r1
 801c7f2:	602b      	str	r3, [r5, #0]
 801c7f4:	f7e5 fbac 	bl	8001f50 <_sbrk>
 801c7f8:	1c43      	adds	r3, r0, #1
 801c7fa:	d102      	bne.n	801c802 <_sbrk_r+0x1a>
 801c7fc:	682b      	ldr	r3, [r5, #0]
 801c7fe:	b103      	cbz	r3, 801c802 <_sbrk_r+0x1a>
 801c800:	6023      	str	r3, [r4, #0]
 801c802:	bd38      	pop	{r3, r4, r5, pc}
 801c804:	2000ce64 	.word	0x2000ce64

0801c808 <_write_r>:
 801c808:	b538      	push	{r3, r4, r5, lr}
 801c80a:	4d07      	ldr	r5, [pc, #28]	@ (801c828 <_write_r+0x20>)
 801c80c:	4604      	mov	r4, r0
 801c80e:	4608      	mov	r0, r1
 801c810:	4611      	mov	r1, r2
 801c812:	2200      	movs	r2, #0
 801c814:	602a      	str	r2, [r5, #0]
 801c816:	461a      	mov	r2, r3
 801c818:	f7e4 fde4 	bl	80013e4 <_write>
 801c81c:	1c43      	adds	r3, r0, #1
 801c81e:	d102      	bne.n	801c826 <_write_r+0x1e>
 801c820:	682b      	ldr	r3, [r5, #0]
 801c822:	b103      	cbz	r3, 801c826 <_write_r+0x1e>
 801c824:	6023      	str	r3, [r4, #0]
 801c826:	bd38      	pop	{r3, r4, r5, pc}
 801c828:	2000ce64 	.word	0x2000ce64

0801c82c <__errno>:
 801c82c:	4b01      	ldr	r3, [pc, #4]	@ (801c834 <__errno+0x8>)
 801c82e:	6818      	ldr	r0, [r3, #0]
 801c830:	4770      	bx	lr
 801c832:	bf00      	nop
 801c834:	20000674 	.word	0x20000674

0801c838 <__libc_init_array>:
 801c838:	b570      	push	{r4, r5, r6, lr}
 801c83a:	4d0d      	ldr	r5, [pc, #52]	@ (801c870 <__libc_init_array+0x38>)
 801c83c:	4c0d      	ldr	r4, [pc, #52]	@ (801c874 <__libc_init_array+0x3c>)
 801c83e:	1b64      	subs	r4, r4, r5
 801c840:	10a4      	asrs	r4, r4, #2
 801c842:	2600      	movs	r6, #0
 801c844:	42a6      	cmp	r6, r4
 801c846:	d109      	bne.n	801c85c <__libc_init_array+0x24>
 801c848:	4d0b      	ldr	r5, [pc, #44]	@ (801c878 <__libc_init_array+0x40>)
 801c84a:	4c0c      	ldr	r4, [pc, #48]	@ (801c87c <__libc_init_array+0x44>)
 801c84c:	f005 fd34 	bl	80222b8 <_init>
 801c850:	1b64      	subs	r4, r4, r5
 801c852:	10a4      	asrs	r4, r4, #2
 801c854:	2600      	movs	r6, #0
 801c856:	42a6      	cmp	r6, r4
 801c858:	d105      	bne.n	801c866 <__libc_init_array+0x2e>
 801c85a:	bd70      	pop	{r4, r5, r6, pc}
 801c85c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c860:	4798      	blx	r3
 801c862:	3601      	adds	r6, #1
 801c864:	e7ee      	b.n	801c844 <__libc_init_array+0xc>
 801c866:	f855 3b04 	ldr.w	r3, [r5], #4
 801c86a:	4798      	blx	r3
 801c86c:	3601      	adds	r6, #1
 801c86e:	e7f2      	b.n	801c856 <__libc_init_array+0x1e>
 801c870:	080233a0 	.word	0x080233a0
 801c874:	080233a0 	.word	0x080233a0
 801c878:	080233a0 	.word	0x080233a0
 801c87c:	080233a8 	.word	0x080233a8

0801c880 <__retarget_lock_init_recursive>:
 801c880:	4770      	bx	lr

0801c882 <__retarget_lock_close_recursive>:
 801c882:	4770      	bx	lr

0801c884 <__retarget_lock_acquire>:
 801c884:	4770      	bx	lr

0801c886 <__retarget_lock_acquire_recursive>:
 801c886:	4770      	bx	lr

0801c888 <__retarget_lock_release>:
 801c888:	4770      	bx	lr

0801c88a <__retarget_lock_release_recursive>:
 801c88a:	4770      	bx	lr

0801c88c <sysconf>:
 801c88c:	2808      	cmp	r0, #8
 801c88e:	b508      	push	{r3, lr}
 801c890:	d006      	beq.n	801c8a0 <sysconf+0x14>
 801c892:	f7ff ffcb 	bl	801c82c <__errno>
 801c896:	2316      	movs	r3, #22
 801c898:	6003      	str	r3, [r0, #0]
 801c89a:	f04f 30ff 	mov.w	r0, #4294967295
 801c89e:	bd08      	pop	{r3, pc}
 801c8a0:	2080      	movs	r0, #128	@ 0x80
 801c8a2:	e7fc      	b.n	801c89e <sysconf+0x12>

0801c8a4 <strcpy>:
 801c8a4:	4603      	mov	r3, r0
 801c8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c8aa:	f803 2b01 	strb.w	r2, [r3], #1
 801c8ae:	2a00      	cmp	r2, #0
 801c8b0:	d1f9      	bne.n	801c8a6 <strcpy+0x2>
 801c8b2:	4770      	bx	lr

0801c8b4 <memcpy>:
 801c8b4:	440a      	add	r2, r1
 801c8b6:	4291      	cmp	r1, r2
 801c8b8:	f100 33ff 	add.w	r3, r0, #4294967295
 801c8bc:	d100      	bne.n	801c8c0 <memcpy+0xc>
 801c8be:	4770      	bx	lr
 801c8c0:	b510      	push	{r4, lr}
 801c8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c8c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c8ca:	4291      	cmp	r1, r2
 801c8cc:	d1f9      	bne.n	801c8c2 <memcpy+0xe>
 801c8ce:	bd10      	pop	{r4, pc}

0801c8d0 <register_fini>:
 801c8d0:	4b02      	ldr	r3, [pc, #8]	@ (801c8dc <register_fini+0xc>)
 801c8d2:	b113      	cbz	r3, 801c8da <register_fini+0xa>
 801c8d4:	4802      	ldr	r0, [pc, #8]	@ (801c8e0 <register_fini+0x10>)
 801c8d6:	f000 b805 	b.w	801c8e4 <atexit>
 801c8da:	4770      	bx	lr
 801c8dc:	00000000 	.word	0x00000000
 801c8e0:	0801f20d 	.word	0x0801f20d

0801c8e4 <atexit>:
 801c8e4:	2300      	movs	r3, #0
 801c8e6:	4601      	mov	r1, r0
 801c8e8:	461a      	mov	r2, r3
 801c8ea:	4618      	mov	r0, r3
 801c8ec:	f002 bcd8 	b.w	801f2a0 <__register_exitproc>

0801c8f0 <div>:
 801c8f0:	b510      	push	{r4, lr}
 801c8f2:	fb91 f4f2 	sdiv	r4, r1, r2
 801c8f6:	fb02 1114 	mls	r1, r2, r4, r1
 801c8fa:	6004      	str	r4, [r0, #0]
 801c8fc:	6041      	str	r1, [r0, #4]
 801c8fe:	bd10      	pop	{r4, pc}

0801c900 <_malloc_trim_r>:
 801c900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c904:	4606      	mov	r6, r0
 801c906:	2008      	movs	r0, #8
 801c908:	4689      	mov	r9, r1
 801c90a:	f7ff ffbf 	bl	801c88c <sysconf>
 801c90e:	4f24      	ldr	r7, [pc, #144]	@ (801c9a0 <_malloc_trim_r+0xa0>)
 801c910:	4680      	mov	r8, r0
 801c912:	4630      	mov	r0, r6
 801c914:	f7fe ff00 	bl	801b718 <__malloc_lock>
 801c918:	68bb      	ldr	r3, [r7, #8]
 801c91a:	685d      	ldr	r5, [r3, #4]
 801c91c:	f025 0503 	bic.w	r5, r5, #3
 801c920:	f1a5 0411 	sub.w	r4, r5, #17
 801c924:	eba4 0409 	sub.w	r4, r4, r9
 801c928:	4444      	add	r4, r8
 801c92a:	fbb4 f4f8 	udiv	r4, r4, r8
 801c92e:	3c01      	subs	r4, #1
 801c930:	fb08 f404 	mul.w	r4, r8, r4
 801c934:	45a0      	cmp	r8, r4
 801c936:	dd05      	ble.n	801c944 <_malloc_trim_r+0x44>
 801c938:	4630      	mov	r0, r6
 801c93a:	f7fe fef3 	bl	801b724 <__malloc_unlock>
 801c93e:	2000      	movs	r0, #0
 801c940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c944:	2100      	movs	r1, #0
 801c946:	4630      	mov	r0, r6
 801c948:	f7ff ff4e 	bl	801c7e8 <_sbrk_r>
 801c94c:	68bb      	ldr	r3, [r7, #8]
 801c94e:	442b      	add	r3, r5
 801c950:	4298      	cmp	r0, r3
 801c952:	d1f1      	bne.n	801c938 <_malloc_trim_r+0x38>
 801c954:	4261      	negs	r1, r4
 801c956:	4630      	mov	r0, r6
 801c958:	f7ff ff46 	bl	801c7e8 <_sbrk_r>
 801c95c:	3001      	adds	r0, #1
 801c95e:	d110      	bne.n	801c982 <_malloc_trim_r+0x82>
 801c960:	2100      	movs	r1, #0
 801c962:	4630      	mov	r0, r6
 801c964:	f7ff ff40 	bl	801c7e8 <_sbrk_r>
 801c968:	68ba      	ldr	r2, [r7, #8]
 801c96a:	1a83      	subs	r3, r0, r2
 801c96c:	2b0f      	cmp	r3, #15
 801c96e:	dde3      	ble.n	801c938 <_malloc_trim_r+0x38>
 801c970:	490c      	ldr	r1, [pc, #48]	@ (801c9a4 <_malloc_trim_r+0xa4>)
 801c972:	6809      	ldr	r1, [r1, #0]
 801c974:	1a40      	subs	r0, r0, r1
 801c976:	490c      	ldr	r1, [pc, #48]	@ (801c9a8 <_malloc_trim_r+0xa8>)
 801c978:	f043 0301 	orr.w	r3, r3, #1
 801c97c:	6008      	str	r0, [r1, #0]
 801c97e:	6053      	str	r3, [r2, #4]
 801c980:	e7da      	b.n	801c938 <_malloc_trim_r+0x38>
 801c982:	68bb      	ldr	r3, [r7, #8]
 801c984:	4a08      	ldr	r2, [pc, #32]	@ (801c9a8 <_malloc_trim_r+0xa8>)
 801c986:	1b2d      	subs	r5, r5, r4
 801c988:	f045 0501 	orr.w	r5, r5, #1
 801c98c:	605d      	str	r5, [r3, #4]
 801c98e:	6813      	ldr	r3, [r2, #0]
 801c990:	4630      	mov	r0, r6
 801c992:	1b1b      	subs	r3, r3, r4
 801c994:	6013      	str	r3, [r2, #0]
 801c996:	f7fe fec5 	bl	801b724 <__malloc_unlock>
 801c99a:	2001      	movs	r0, #1
 801c99c:	e7d0      	b.n	801c940 <_malloc_trim_r+0x40>
 801c99e:	bf00      	nop
 801c9a0:	20000258 	.word	0x20000258
 801c9a4:	20000250 	.word	0x20000250
 801c9a8:	2000ccd0 	.word	0x2000ccd0

0801c9ac <_free_r>:
 801c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ae:	4604      	mov	r4, r0
 801c9b0:	460f      	mov	r7, r1
 801c9b2:	2900      	cmp	r1, #0
 801c9b4:	f000 80b1 	beq.w	801cb1a <_free_r+0x16e>
 801c9b8:	f7fe feae 	bl	801b718 <__malloc_lock>
 801c9bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801c9c0:	4d56      	ldr	r5, [pc, #344]	@ (801cb1c <_free_r+0x170>)
 801c9c2:	f022 0001 	bic.w	r0, r2, #1
 801c9c6:	f1a7 0308 	sub.w	r3, r7, #8
 801c9ca:	eb03 0c00 	add.w	ip, r3, r0
 801c9ce:	68a9      	ldr	r1, [r5, #8]
 801c9d0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801c9d4:	4561      	cmp	r1, ip
 801c9d6:	f026 0603 	bic.w	r6, r6, #3
 801c9da:	f002 0201 	and.w	r2, r2, #1
 801c9de:	d11b      	bne.n	801ca18 <_free_r+0x6c>
 801c9e0:	4406      	add	r6, r0
 801c9e2:	b93a      	cbnz	r2, 801c9f4 <_free_r+0x48>
 801c9e4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 801c9e8:	1a9b      	subs	r3, r3, r2
 801c9ea:	4416      	add	r6, r2
 801c9ec:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 801c9f0:	60ca      	str	r2, [r1, #12]
 801c9f2:	6091      	str	r1, [r2, #8]
 801c9f4:	f046 0201 	orr.w	r2, r6, #1
 801c9f8:	605a      	str	r2, [r3, #4]
 801c9fa:	60ab      	str	r3, [r5, #8]
 801c9fc:	4b48      	ldr	r3, [pc, #288]	@ (801cb20 <_free_r+0x174>)
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	42b3      	cmp	r3, r6
 801ca02:	d804      	bhi.n	801ca0e <_free_r+0x62>
 801ca04:	4b47      	ldr	r3, [pc, #284]	@ (801cb24 <_free_r+0x178>)
 801ca06:	4620      	mov	r0, r4
 801ca08:	6819      	ldr	r1, [r3, #0]
 801ca0a:	f7ff ff79 	bl	801c900 <_malloc_trim_r>
 801ca0e:	4620      	mov	r0, r4
 801ca10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ca14:	f7fe be86 	b.w	801b724 <__malloc_unlock>
 801ca18:	f8cc 6004 	str.w	r6, [ip, #4]
 801ca1c:	2a00      	cmp	r2, #0
 801ca1e:	d138      	bne.n	801ca92 <_free_r+0xe6>
 801ca20:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801ca24:	1a5b      	subs	r3, r3, r1
 801ca26:	4408      	add	r0, r1
 801ca28:	6899      	ldr	r1, [r3, #8]
 801ca2a:	f105 0708 	add.w	r7, r5, #8
 801ca2e:	42b9      	cmp	r1, r7
 801ca30:	d031      	beq.n	801ca96 <_free_r+0xea>
 801ca32:	68df      	ldr	r7, [r3, #12]
 801ca34:	60cf      	str	r7, [r1, #12]
 801ca36:	60b9      	str	r1, [r7, #8]
 801ca38:	eb0c 0106 	add.w	r1, ip, r6
 801ca3c:	6849      	ldr	r1, [r1, #4]
 801ca3e:	07c9      	lsls	r1, r1, #31
 801ca40:	d40b      	bmi.n	801ca5a <_free_r+0xae>
 801ca42:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801ca46:	4430      	add	r0, r6
 801ca48:	bb3a      	cbnz	r2, 801ca9a <_free_r+0xee>
 801ca4a:	4e37      	ldr	r6, [pc, #220]	@ (801cb28 <_free_r+0x17c>)
 801ca4c:	42b1      	cmp	r1, r6
 801ca4e:	d124      	bne.n	801ca9a <_free_r+0xee>
 801ca50:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801ca54:	e9c3 1102 	strd	r1, r1, [r3, #8]
 801ca58:	2201      	movs	r2, #1
 801ca5a:	f040 0101 	orr.w	r1, r0, #1
 801ca5e:	6059      	str	r1, [r3, #4]
 801ca60:	5018      	str	r0, [r3, r0]
 801ca62:	2a00      	cmp	r2, #0
 801ca64:	d1d3      	bne.n	801ca0e <_free_r+0x62>
 801ca66:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801ca6a:	d21b      	bcs.n	801caa4 <_free_r+0xf8>
 801ca6c:	08c2      	lsrs	r2, r0, #3
 801ca6e:	2101      	movs	r1, #1
 801ca70:	0940      	lsrs	r0, r0, #5
 801ca72:	4081      	lsls	r1, r0
 801ca74:	6868      	ldr	r0, [r5, #4]
 801ca76:	3201      	adds	r2, #1
 801ca78:	4301      	orrs	r1, r0
 801ca7a:	6069      	str	r1, [r5, #4]
 801ca7c:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 801ca80:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 801ca84:	3908      	subs	r1, #8
 801ca86:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801ca8a:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 801ca8e:	60c3      	str	r3, [r0, #12]
 801ca90:	e7bd      	b.n	801ca0e <_free_r+0x62>
 801ca92:	2200      	movs	r2, #0
 801ca94:	e7d0      	b.n	801ca38 <_free_r+0x8c>
 801ca96:	2201      	movs	r2, #1
 801ca98:	e7ce      	b.n	801ca38 <_free_r+0x8c>
 801ca9a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801ca9e:	60ce      	str	r6, [r1, #12]
 801caa0:	60b1      	str	r1, [r6, #8]
 801caa2:	e7da      	b.n	801ca5a <_free_r+0xae>
 801caa4:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 801caa8:	ea4f 2250 	mov.w	r2, r0, lsr #9
 801caac:	d214      	bcs.n	801cad8 <_free_r+0x12c>
 801caae:	0982      	lsrs	r2, r0, #6
 801cab0:	3238      	adds	r2, #56	@ 0x38
 801cab2:	1c51      	adds	r1, r2, #1
 801cab4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801cab8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 801cabc:	428e      	cmp	r6, r1
 801cabe:	d125      	bne.n	801cb0c <_free_r+0x160>
 801cac0:	2001      	movs	r0, #1
 801cac2:	1092      	asrs	r2, r2, #2
 801cac4:	fa00 f202 	lsl.w	r2, r0, r2
 801cac8:	6868      	ldr	r0, [r5, #4]
 801caca:	4302      	orrs	r2, r0
 801cacc:	606a      	str	r2, [r5, #4]
 801cace:	e9c3 1602 	strd	r1, r6, [r3, #8]
 801cad2:	60b3      	str	r3, [r6, #8]
 801cad4:	60cb      	str	r3, [r1, #12]
 801cad6:	e79a      	b.n	801ca0e <_free_r+0x62>
 801cad8:	2a14      	cmp	r2, #20
 801cada:	d801      	bhi.n	801cae0 <_free_r+0x134>
 801cadc:	325b      	adds	r2, #91	@ 0x5b
 801cade:	e7e8      	b.n	801cab2 <_free_r+0x106>
 801cae0:	2a54      	cmp	r2, #84	@ 0x54
 801cae2:	d802      	bhi.n	801caea <_free_r+0x13e>
 801cae4:	0b02      	lsrs	r2, r0, #12
 801cae6:	326e      	adds	r2, #110	@ 0x6e
 801cae8:	e7e3      	b.n	801cab2 <_free_r+0x106>
 801caea:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801caee:	d802      	bhi.n	801caf6 <_free_r+0x14a>
 801caf0:	0bc2      	lsrs	r2, r0, #15
 801caf2:	3277      	adds	r2, #119	@ 0x77
 801caf4:	e7dd      	b.n	801cab2 <_free_r+0x106>
 801caf6:	f240 5154 	movw	r1, #1364	@ 0x554
 801cafa:	428a      	cmp	r2, r1
 801cafc:	bf9a      	itte	ls
 801cafe:	0c82      	lsrls	r2, r0, #18
 801cb00:	327c      	addls	r2, #124	@ 0x7c
 801cb02:	227e      	movhi	r2, #126	@ 0x7e
 801cb04:	e7d5      	b.n	801cab2 <_free_r+0x106>
 801cb06:	6889      	ldr	r1, [r1, #8]
 801cb08:	428e      	cmp	r6, r1
 801cb0a:	d004      	beq.n	801cb16 <_free_r+0x16a>
 801cb0c:	684a      	ldr	r2, [r1, #4]
 801cb0e:	f022 0203 	bic.w	r2, r2, #3
 801cb12:	4282      	cmp	r2, r0
 801cb14:	d8f7      	bhi.n	801cb06 <_free_r+0x15a>
 801cb16:	68ce      	ldr	r6, [r1, #12]
 801cb18:	e7d9      	b.n	801cace <_free_r+0x122>
 801cb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb1c:	20000258 	.word	0x20000258
 801cb20:	20000254 	.word	0x20000254
 801cb24:	2000cd00 	.word	0x2000cd00
 801cb28:	20000260 	.word	0x20000260

0801cb2c <_findenv_r>:
 801cb2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb30:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801cba0 <_findenv_r+0x74>
 801cb34:	4606      	mov	r6, r0
 801cb36:	4689      	mov	r9, r1
 801cb38:	4617      	mov	r7, r2
 801cb3a:	f003 fa25 	bl	801ff88 <__env_lock>
 801cb3e:	f8da 4000 	ldr.w	r4, [sl]
 801cb42:	b134      	cbz	r4, 801cb52 <_findenv_r+0x26>
 801cb44:	464b      	mov	r3, r9
 801cb46:	4698      	mov	r8, r3
 801cb48:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb4c:	b13a      	cbz	r2, 801cb5e <_findenv_r+0x32>
 801cb4e:	2a3d      	cmp	r2, #61	@ 0x3d
 801cb50:	d1f9      	bne.n	801cb46 <_findenv_r+0x1a>
 801cb52:	4630      	mov	r0, r6
 801cb54:	f003 fa1e 	bl	801ff94 <__env_unlock>
 801cb58:	2000      	movs	r0, #0
 801cb5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb5e:	eba8 0809 	sub.w	r8, r8, r9
 801cb62:	46a3      	mov	fp, r4
 801cb64:	f854 0b04 	ldr.w	r0, [r4], #4
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	d0f2      	beq.n	801cb52 <_findenv_r+0x26>
 801cb6c:	4642      	mov	r2, r8
 801cb6e:	4649      	mov	r1, r9
 801cb70:	f002 fb18 	bl	801f1a4 <strncmp>
 801cb74:	2800      	cmp	r0, #0
 801cb76:	d1f4      	bne.n	801cb62 <_findenv_r+0x36>
 801cb78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801cb7c:	eb03 0508 	add.w	r5, r3, r8
 801cb80:	f813 3008 	ldrb.w	r3, [r3, r8]
 801cb84:	2b3d      	cmp	r3, #61	@ 0x3d
 801cb86:	d1ec      	bne.n	801cb62 <_findenv_r+0x36>
 801cb88:	f8da 3000 	ldr.w	r3, [sl]
 801cb8c:	ebab 0303 	sub.w	r3, fp, r3
 801cb90:	109b      	asrs	r3, r3, #2
 801cb92:	4630      	mov	r0, r6
 801cb94:	603b      	str	r3, [r7, #0]
 801cb96:	f003 f9fd 	bl	801ff94 <__env_unlock>
 801cb9a:	1c68      	adds	r0, r5, #1
 801cb9c:	e7dd      	b.n	801cb5a <_findenv_r+0x2e>
 801cb9e:	bf00      	nop
 801cba0:	20000000 	.word	0x20000000

0801cba4 <_getenv_r>:
 801cba4:	b507      	push	{r0, r1, r2, lr}
 801cba6:	aa01      	add	r2, sp, #4
 801cba8:	f7ff ffc0 	bl	801cb2c <_findenv_r>
 801cbac:	b003      	add	sp, #12
 801cbae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801cbb4 <_strtoul_l.constprop.0>:
 801cbb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cbb8:	4e34      	ldr	r6, [pc, #208]	@ (801cc8c <_strtoul_l.constprop.0+0xd8>)
 801cbba:	4686      	mov	lr, r0
 801cbbc:	460d      	mov	r5, r1
 801cbbe:	4628      	mov	r0, r5
 801cbc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cbc4:	5d37      	ldrb	r7, [r6, r4]
 801cbc6:	f017 0708 	ands.w	r7, r7, #8
 801cbca:	d1f8      	bne.n	801cbbe <_strtoul_l.constprop.0+0xa>
 801cbcc:	2c2d      	cmp	r4, #45	@ 0x2d
 801cbce:	d12f      	bne.n	801cc30 <_strtoul_l.constprop.0+0x7c>
 801cbd0:	782c      	ldrb	r4, [r5, #0]
 801cbd2:	2701      	movs	r7, #1
 801cbd4:	1c85      	adds	r5, r0, #2
 801cbd6:	f033 0010 	bics.w	r0, r3, #16
 801cbda:	d109      	bne.n	801cbf0 <_strtoul_l.constprop.0+0x3c>
 801cbdc:	2c30      	cmp	r4, #48	@ 0x30
 801cbde:	d12c      	bne.n	801cc3a <_strtoul_l.constprop.0+0x86>
 801cbe0:	7828      	ldrb	r0, [r5, #0]
 801cbe2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801cbe6:	2858      	cmp	r0, #88	@ 0x58
 801cbe8:	d127      	bne.n	801cc3a <_strtoul_l.constprop.0+0x86>
 801cbea:	786c      	ldrb	r4, [r5, #1]
 801cbec:	2310      	movs	r3, #16
 801cbee:	3502      	adds	r5, #2
 801cbf0:	f04f 38ff 	mov.w	r8, #4294967295
 801cbf4:	2600      	movs	r6, #0
 801cbf6:	fbb8 f8f3 	udiv	r8, r8, r3
 801cbfa:	fb03 f908 	mul.w	r9, r3, r8
 801cbfe:	ea6f 0909 	mvn.w	r9, r9
 801cc02:	4630      	mov	r0, r6
 801cc04:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801cc08:	f1bc 0f09 	cmp.w	ip, #9
 801cc0c:	d81c      	bhi.n	801cc48 <_strtoul_l.constprop.0+0x94>
 801cc0e:	4664      	mov	r4, ip
 801cc10:	42a3      	cmp	r3, r4
 801cc12:	dd2a      	ble.n	801cc6a <_strtoul_l.constprop.0+0xb6>
 801cc14:	f1b6 3fff 	cmp.w	r6, #4294967295
 801cc18:	d007      	beq.n	801cc2a <_strtoul_l.constprop.0+0x76>
 801cc1a:	4580      	cmp	r8, r0
 801cc1c:	d322      	bcc.n	801cc64 <_strtoul_l.constprop.0+0xb0>
 801cc1e:	d101      	bne.n	801cc24 <_strtoul_l.constprop.0+0x70>
 801cc20:	45a1      	cmp	r9, r4
 801cc22:	db1f      	blt.n	801cc64 <_strtoul_l.constprop.0+0xb0>
 801cc24:	fb00 4003 	mla	r0, r0, r3, r4
 801cc28:	2601      	movs	r6, #1
 801cc2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cc2e:	e7e9      	b.n	801cc04 <_strtoul_l.constprop.0+0x50>
 801cc30:	2c2b      	cmp	r4, #43	@ 0x2b
 801cc32:	bf04      	itt	eq
 801cc34:	782c      	ldrbeq	r4, [r5, #0]
 801cc36:	1c85      	addeq	r5, r0, #2
 801cc38:	e7cd      	b.n	801cbd6 <_strtoul_l.constprop.0+0x22>
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d1d8      	bne.n	801cbf0 <_strtoul_l.constprop.0+0x3c>
 801cc3e:	2c30      	cmp	r4, #48	@ 0x30
 801cc40:	bf0c      	ite	eq
 801cc42:	2308      	moveq	r3, #8
 801cc44:	230a      	movne	r3, #10
 801cc46:	e7d3      	b.n	801cbf0 <_strtoul_l.constprop.0+0x3c>
 801cc48:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801cc4c:	f1bc 0f19 	cmp.w	ip, #25
 801cc50:	d801      	bhi.n	801cc56 <_strtoul_l.constprop.0+0xa2>
 801cc52:	3c37      	subs	r4, #55	@ 0x37
 801cc54:	e7dc      	b.n	801cc10 <_strtoul_l.constprop.0+0x5c>
 801cc56:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801cc5a:	f1bc 0f19 	cmp.w	ip, #25
 801cc5e:	d804      	bhi.n	801cc6a <_strtoul_l.constprop.0+0xb6>
 801cc60:	3c57      	subs	r4, #87	@ 0x57
 801cc62:	e7d5      	b.n	801cc10 <_strtoul_l.constprop.0+0x5c>
 801cc64:	f04f 36ff 	mov.w	r6, #4294967295
 801cc68:	e7df      	b.n	801cc2a <_strtoul_l.constprop.0+0x76>
 801cc6a:	1c73      	adds	r3, r6, #1
 801cc6c:	d106      	bne.n	801cc7c <_strtoul_l.constprop.0+0xc8>
 801cc6e:	2322      	movs	r3, #34	@ 0x22
 801cc70:	f8ce 3000 	str.w	r3, [lr]
 801cc74:	4630      	mov	r0, r6
 801cc76:	b932      	cbnz	r2, 801cc86 <_strtoul_l.constprop.0+0xd2>
 801cc78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc7c:	b107      	cbz	r7, 801cc80 <_strtoul_l.constprop.0+0xcc>
 801cc7e:	4240      	negs	r0, r0
 801cc80:	2a00      	cmp	r2, #0
 801cc82:	d0f9      	beq.n	801cc78 <_strtoul_l.constprop.0+0xc4>
 801cc84:	b106      	cbz	r6, 801cc88 <_strtoul_l.constprop.0+0xd4>
 801cc86:	1e69      	subs	r1, r5, #1
 801cc88:	6011      	str	r1, [r2, #0]
 801cc8a:	e7f5      	b.n	801cc78 <_strtoul_l.constprop.0+0xc4>
 801cc8c:	08022e9f 	.word	0x08022e9f

0801cc90 <_strtoul_r>:
 801cc90:	f7ff bf90 	b.w	801cbb4 <_strtoul_l.constprop.0>

0801cc94 <strtoul>:
 801cc94:	4613      	mov	r3, r2
 801cc96:	460a      	mov	r2, r1
 801cc98:	4601      	mov	r1, r0
 801cc9a:	4802      	ldr	r0, [pc, #8]	@ (801cca4 <strtoul+0x10>)
 801cc9c:	6800      	ldr	r0, [r0, #0]
 801cc9e:	f7ff bf89 	b.w	801cbb4 <_strtoul_l.constprop.0>
 801cca2:	bf00      	nop
 801cca4:	20000674 	.word	0x20000674

0801cca8 <siscanf>:
 801cca8:	b40e      	push	{r1, r2, r3}
 801ccaa:	b530      	push	{r4, r5, lr}
 801ccac:	b09c      	sub	sp, #112	@ 0x70
 801ccae:	ac1f      	add	r4, sp, #124	@ 0x7c
 801ccb0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801ccb4:	f854 5b04 	ldr.w	r5, [r4], #4
 801ccb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ccbc:	9002      	str	r0, [sp, #8]
 801ccbe:	9006      	str	r0, [sp, #24]
 801ccc0:	f7e3 fa90 	bl	80001e4 <strlen>
 801ccc4:	4b0b      	ldr	r3, [pc, #44]	@ (801ccf4 <siscanf+0x4c>)
 801ccc6:	9003      	str	r0, [sp, #12]
 801ccc8:	9007      	str	r0, [sp, #28]
 801ccca:	930a      	str	r3, [sp, #40]	@ 0x28
 801cccc:	480a      	ldr	r0, [pc, #40]	@ (801ccf8 <siscanf+0x50>)
 801ccce:	9401      	str	r4, [sp, #4]
 801ccd0:	2300      	movs	r3, #0
 801ccd2:	930e      	str	r3, [sp, #56]	@ 0x38
 801ccd4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ccd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ccda:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ccde:	462a      	mov	r2, r5
 801cce0:	4623      	mov	r3, r4
 801cce2:	a902      	add	r1, sp, #8
 801cce4:	6800      	ldr	r0, [r0, #0]
 801cce6:	f000 f89b 	bl	801ce20 <__ssvfiscanf_r>
 801ccea:	b01c      	add	sp, #112	@ 0x70
 801ccec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ccf0:	b003      	add	sp, #12
 801ccf2:	4770      	bx	lr
 801ccf4:	0801ba5b 	.word	0x0801ba5b
 801ccf8:	20000674 	.word	0x20000674

0801ccfc <_sungetc_r>:
 801ccfc:	b538      	push	{r3, r4, r5, lr}
 801ccfe:	1c4b      	adds	r3, r1, #1
 801cd00:	4614      	mov	r4, r2
 801cd02:	d103      	bne.n	801cd0c <_sungetc_r+0x10>
 801cd04:	f04f 35ff 	mov.w	r5, #4294967295
 801cd08:	4628      	mov	r0, r5
 801cd0a:	bd38      	pop	{r3, r4, r5, pc}
 801cd0c:	8993      	ldrh	r3, [r2, #12]
 801cd0e:	f023 0320 	bic.w	r3, r3, #32
 801cd12:	8193      	strh	r3, [r2, #12]
 801cd14:	6853      	ldr	r3, [r2, #4]
 801cd16:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801cd18:	b2cd      	uxtb	r5, r1
 801cd1a:	b18a      	cbz	r2, 801cd40 <_sungetc_r+0x44>
 801cd1c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801cd1e:	429a      	cmp	r2, r3
 801cd20:	dd08      	ble.n	801cd34 <_sungetc_r+0x38>
 801cd22:	6823      	ldr	r3, [r4, #0]
 801cd24:	1e5a      	subs	r2, r3, #1
 801cd26:	6022      	str	r2, [r4, #0]
 801cd28:	f803 5c01 	strb.w	r5, [r3, #-1]
 801cd2c:	6863      	ldr	r3, [r4, #4]
 801cd2e:	3301      	adds	r3, #1
 801cd30:	6063      	str	r3, [r4, #4]
 801cd32:	e7e9      	b.n	801cd08 <_sungetc_r+0xc>
 801cd34:	4621      	mov	r1, r4
 801cd36:	f002 f9fb 	bl	801f130 <__submore>
 801cd3a:	2800      	cmp	r0, #0
 801cd3c:	d0f1      	beq.n	801cd22 <_sungetc_r+0x26>
 801cd3e:	e7e1      	b.n	801cd04 <_sungetc_r+0x8>
 801cd40:	6921      	ldr	r1, [r4, #16]
 801cd42:	6822      	ldr	r2, [r4, #0]
 801cd44:	b141      	cbz	r1, 801cd58 <_sungetc_r+0x5c>
 801cd46:	4291      	cmp	r1, r2
 801cd48:	d206      	bcs.n	801cd58 <_sungetc_r+0x5c>
 801cd4a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801cd4e:	42a9      	cmp	r1, r5
 801cd50:	d102      	bne.n	801cd58 <_sungetc_r+0x5c>
 801cd52:	3a01      	subs	r2, #1
 801cd54:	6022      	str	r2, [r4, #0]
 801cd56:	e7ea      	b.n	801cd2e <_sungetc_r+0x32>
 801cd58:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 801cd5c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801cd60:	6323      	str	r3, [r4, #48]	@ 0x30
 801cd62:	2303      	movs	r3, #3
 801cd64:	6363      	str	r3, [r4, #52]	@ 0x34
 801cd66:	4623      	mov	r3, r4
 801cd68:	f803 5f42 	strb.w	r5, [r3, #66]!
 801cd6c:	6023      	str	r3, [r4, #0]
 801cd6e:	2301      	movs	r3, #1
 801cd70:	e7de      	b.n	801cd30 <_sungetc_r+0x34>

0801cd72 <__ssrefill_r>:
 801cd72:	b510      	push	{r4, lr}
 801cd74:	460c      	mov	r4, r1
 801cd76:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801cd78:	b169      	cbz	r1, 801cd96 <__ssrefill_r+0x24>
 801cd7a:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801cd7e:	4299      	cmp	r1, r3
 801cd80:	d001      	beq.n	801cd86 <__ssrefill_r+0x14>
 801cd82:	f7ff fe13 	bl	801c9ac <_free_r>
 801cd86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cd88:	6063      	str	r3, [r4, #4]
 801cd8a:	2000      	movs	r0, #0
 801cd8c:	6320      	str	r0, [r4, #48]	@ 0x30
 801cd8e:	b113      	cbz	r3, 801cd96 <__ssrefill_r+0x24>
 801cd90:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cd92:	6023      	str	r3, [r4, #0]
 801cd94:	bd10      	pop	{r4, pc}
 801cd96:	6923      	ldr	r3, [r4, #16]
 801cd98:	6023      	str	r3, [r4, #0]
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	6063      	str	r3, [r4, #4]
 801cd9e:	89a3      	ldrh	r3, [r4, #12]
 801cda0:	f043 0320 	orr.w	r3, r3, #32
 801cda4:	81a3      	strh	r3, [r4, #12]
 801cda6:	f04f 30ff 	mov.w	r0, #4294967295
 801cdaa:	e7f3      	b.n	801cd94 <__ssrefill_r+0x22>

0801cdac <_sfread_r>:
 801cdac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdb0:	461f      	mov	r7, r3
 801cdb2:	4613      	mov	r3, r2
 801cdb4:	437b      	muls	r3, r7
 801cdb6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cdb8:	9000      	str	r0, [sp, #0]
 801cdba:	4688      	mov	r8, r1
 801cdbc:	4691      	mov	r9, r2
 801cdbe:	d028      	beq.n	801ce12 <_sfread_r+0x66>
 801cdc0:	461e      	mov	r6, r3
 801cdc2:	f04f 0b00 	mov.w	fp, #0
 801cdc6:	e9d4 1500 	ldrd	r1, r5, [r4]
 801cdca:	42b5      	cmp	r5, r6
 801cdcc:	d30b      	bcc.n	801cde6 <_sfread_r+0x3a>
 801cdce:	4632      	mov	r2, r6
 801cdd0:	4640      	mov	r0, r8
 801cdd2:	f7ff fd6f 	bl	801c8b4 <memcpy>
 801cdd6:	6862      	ldr	r2, [r4, #4]
 801cdd8:	6821      	ldr	r1, [r4, #0]
 801cdda:	1b92      	subs	r2, r2, r6
 801cddc:	4431      	add	r1, r6
 801cdde:	6062      	str	r2, [r4, #4]
 801cde0:	6021      	str	r1, [r4, #0]
 801cde2:	463b      	mov	r3, r7
 801cde4:	e015      	b.n	801ce12 <_sfread_r+0x66>
 801cde6:	462a      	mov	r2, r5
 801cde8:	4640      	mov	r0, r8
 801cdea:	9301      	str	r3, [sp, #4]
 801cdec:	f7ff fd62 	bl	801c8b4 <memcpy>
 801cdf0:	6822      	ldr	r2, [r4, #0]
 801cdf2:	9800      	ldr	r0, [sp, #0]
 801cdf4:	442a      	add	r2, r5
 801cdf6:	e9c4 2b00 	strd	r2, fp, [r4]
 801cdfa:	4621      	mov	r1, r4
 801cdfc:	f7ff ffb9 	bl	801cd72 <__ssrefill_r>
 801ce00:	44a8      	add	r8, r5
 801ce02:	9b01      	ldr	r3, [sp, #4]
 801ce04:	eba6 0a05 	sub.w	sl, r6, r5
 801ce08:	b138      	cbz	r0, 801ce1a <_sfread_r+0x6e>
 801ce0a:	441d      	add	r5, r3
 801ce0c:	1bad      	subs	r5, r5, r6
 801ce0e:	fbb5 f3f9 	udiv	r3, r5, r9
 801ce12:	4618      	mov	r0, r3
 801ce14:	b003      	add	sp, #12
 801ce16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce1a:	4656      	mov	r6, sl
 801ce1c:	e7d3      	b.n	801cdc6 <_sfread_r+0x1a>
	...

0801ce20 <__ssvfiscanf_r>:
 801ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce24:	b0df      	sub	sp, #380	@ 0x17c
 801ce26:	af02      	add	r7, sp, #8
 801ce28:	460c      	mov	r4, r1
 801ce2a:	623b      	str	r3, [r7, #32]
 801ce2c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 801ce30:	6278      	str	r0, [r7, #36]	@ 0x24
 801ce32:	049d      	lsls	r5, r3, #18
 801ce34:	60ba      	str	r2, [r7, #8]
 801ce36:	d406      	bmi.n	801ce46 <__ssvfiscanf_r+0x26>
 801ce38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ce3c:	818b      	strh	r3, [r1, #12]
 801ce3e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 801ce40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801ce44:	664b      	str	r3, [r1, #100]	@ 0x64
 801ce46:	2300      	movs	r3, #0
 801ce48:	e9c7 3305 	strd	r3, r3, [r7, #20]
 801ce4c:	60fb      	str	r3, [r7, #12]
 801ce4e:	469b      	mov	fp, r3
 801ce50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ce52:	61fb      	str	r3, [r7, #28]
 801ce54:	e005      	b.n	801ce62 <__ssvfiscanf_r+0x42>
 801ce56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ce58:	4621      	mov	r1, r4
 801ce5a:	f7ff ff8a 	bl	801cd72 <__ssrefill_r>
 801ce5e:	b168      	cbz	r0, 801ce7c <__ssvfiscanf_r+0x5c>
 801ce60:	60bd      	str	r5, [r7, #8]
 801ce62:	68bd      	ldr	r5, [r7, #8]
 801ce64:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ce68:	637b      	str	r3, [r7, #52]	@ 0x34
 801ce6a:	b333      	cbz	r3, 801ceba <__ssvfiscanf_r+0x9a>
 801ce6c:	4a75      	ldr	r2, [pc, #468]	@ (801d044 <__ssvfiscanf_r+0x224>)
 801ce6e:	5cd6      	ldrb	r6, [r2, r3]
 801ce70:	f016 0608 	ands.w	r6, r6, #8
 801ce74:	d011      	beq.n	801ce9a <__ssvfiscanf_r+0x7a>
 801ce76:	6863      	ldr	r3, [r4, #4]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	ddec      	ble.n	801ce56 <__ssvfiscanf_r+0x36>
 801ce7c:	6823      	ldr	r3, [r4, #0]
 801ce7e:	4971      	ldr	r1, [pc, #452]	@ (801d044 <__ssvfiscanf_r+0x224>)
 801ce80:	781a      	ldrb	r2, [r3, #0]
 801ce82:	5c8a      	ldrb	r2, [r1, r2]
 801ce84:	0710      	lsls	r0, r2, #28
 801ce86:	d5eb      	bpl.n	801ce60 <__ssvfiscanf_r+0x40>
 801ce88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ce8a:	3201      	adds	r2, #1
 801ce8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ce8e:	6862      	ldr	r2, [r4, #4]
 801ce90:	3301      	adds	r3, #1
 801ce92:	3a01      	subs	r2, #1
 801ce94:	6062      	str	r2, [r4, #4]
 801ce96:	6023      	str	r3, [r4, #0]
 801ce98:	e7ed      	b.n	801ce76 <__ssvfiscanf_r+0x56>
 801ce9a:	2b25      	cmp	r3, #37	@ 0x25
 801ce9c:	d15f      	bne.n	801cf5e <__ssvfiscanf_r+0x13e>
 801ce9e:	62be      	str	r6, [r7, #40]	@ 0x28
 801cea0:	462a      	mov	r2, r5
 801cea2:	f812 3b01 	ldrb.w	r3, [r2], #1
 801cea6:	60ba      	str	r2, [r7, #8]
 801cea8:	2b7a      	cmp	r3, #122	@ 0x7a
 801ceaa:	d806      	bhi.n	801ceba <__ssvfiscanf_r+0x9a>
 801ceac:	2b42      	cmp	r3, #66	@ 0x42
 801ceae:	d809      	bhi.n	801cec4 <__ssvfiscanf_r+0xa4>
 801ceb0:	2b2a      	cmp	r3, #42	@ 0x2a
 801ceb2:	d079      	beq.n	801cfa8 <__ssvfiscanf_r+0x188>
 801ceb4:	d844      	bhi.n	801cf40 <__ssvfiscanf_r+0x120>
 801ceb6:	2b25      	cmp	r3, #37	@ 0x25
 801ceb8:	d050      	beq.n	801cf5c <__ssvfiscanf_r+0x13c>
 801ceba:	f1bb 0f00 	cmp.w	fp, #0
 801cebe:	f000 810e 	beq.w	801d0de <__ssvfiscanf_r+0x2be>
 801cec2:	e107      	b.n	801d0d4 <__ssvfiscanf_r+0x2b4>
 801cec4:	3b43      	subs	r3, #67	@ 0x43
 801cec6:	2b37      	cmp	r3, #55	@ 0x37
 801cec8:	f200 80fd 	bhi.w	801d0c6 <__ssvfiscanf_r+0x2a6>
 801cecc:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ced0:	00a40117 	.word	0x00a40117
 801ced4:	00fb00fb 	.word	0x00fb00fb
 801ced8:	00fb00fb 	.word	0x00fb00fb
 801cedc:	00fb00fb 	.word	0x00fb00fb
 801cee0:	008e00fb 	.word	0x008e00fb
 801cee4:	00fb00fb 	.word	0x00fb00fb
 801cee8:	00fb00a8 	.word	0x00fb00a8
 801ceec:	00fb00fb 	.word	0x00fb00fb
 801cef0:	00fb00c0 	.word	0x00fb00c0
 801cef4:	00fb00fb 	.word	0x00fb00fb
 801cef8:	00b400fb 	.word	0x00b400fb
 801cefc:	00fb00fb 	.word	0x00fb00fb
 801cf00:	00fb010d 	.word	0x00fb010d
 801cf04:	00fb00fb 	.word	0x00fb00fb
 801cf08:	00fb00fb 	.word	0x00fb00fb
 801cf0c:	00fb00fb 	.word	0x00fb00fb
 801cf10:	00a60119 	.word	0x00a60119
 801cf14:	00fb00fb 	.word	0x00fb00fb
 801cf18:	008100fb 	.word	0x008100fb
 801cf1c:	008e013e 	.word	0x008e013e
 801cf20:	007300fb 	.word	0x007300fb
 801cf24:	01200095 	.word	0x01200095
 801cf28:	011d00aa 	.word	0x011d00aa
 801cf2c:	00fb00fb 	.word	0x00fb00fb
 801cf30:	009200c2 	.word	0x009200c2
 801cf34:	00fb00b0 	.word	0x00fb00b0
 801cf38:	00b400fb 	.word	0x00b400fb
 801cf3c:	009200fb 	.word	0x009200fb
 801cf40:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 801cf44:	2a09      	cmp	r2, #9
 801cf46:	d8b8      	bhi.n	801ceba <__ssvfiscanf_r+0x9a>
 801cf48:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 801cf4c:	d1b5      	bne.n	801ceba <__ssvfiscanf_r+0x9a>
 801cf4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cf50:	220a      	movs	r2, #10
 801cf52:	fb02 3301 	mla	r3, r2, r1, r3
 801cf56:	3b30      	subs	r3, #48	@ 0x30
 801cf58:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cf5a:	e02a      	b.n	801cfb2 <__ssvfiscanf_r+0x192>
 801cf5c:	68bd      	ldr	r5, [r7, #8]
 801cf5e:	6863      	ldr	r3, [r4, #4]
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	dd0e      	ble.n	801cf82 <__ssvfiscanf_r+0x162>
 801cf64:	6823      	ldr	r3, [r4, #0]
 801cf66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cf6a:	7819      	ldrb	r1, [r3, #0]
 801cf6c:	4291      	cmp	r1, r2
 801cf6e:	d1a4      	bne.n	801ceba <__ssvfiscanf_r+0x9a>
 801cf70:	3301      	adds	r3, #1
 801cf72:	6862      	ldr	r2, [r4, #4]
 801cf74:	6023      	str	r3, [r4, #0]
 801cf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf78:	3a01      	subs	r2, #1
 801cf7a:	3301      	adds	r3, #1
 801cf7c:	6062      	str	r2, [r4, #4]
 801cf7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cf80:	e76e      	b.n	801ce60 <__ssvfiscanf_r+0x40>
 801cf82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cf84:	4621      	mov	r1, r4
 801cf86:	f7ff fef4 	bl	801cd72 <__ssrefill_r>
 801cf8a:	2800      	cmp	r0, #0
 801cf8c:	d0ea      	beq.n	801cf64 <__ssvfiscanf_r+0x144>
 801cf8e:	69fb      	ldr	r3, [r7, #28]
 801cf90:	b113      	cbz	r3, 801cf98 <__ssvfiscanf_r+0x178>
 801cf92:	89a3      	ldrh	r3, [r4, #12]
 801cf94:	065b      	lsls	r3, r3, #25
 801cf96:	d590      	bpl.n	801ceba <__ssvfiscanf_r+0x9a>
 801cf98:	f1bb 0f00 	cmp.w	fp, #0
 801cf9c:	f040 8654 	bne.w	801dc48 <__ssvfiscanf_r+0xe28>
 801cfa0:	f04f 33ff 	mov.w	r3, #4294967295
 801cfa4:	61fb      	str	r3, [r7, #28]
 801cfa6:	e09a      	b.n	801d0de <__ssvfiscanf_r+0x2be>
 801cfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfaa:	4333      	orrs	r3, r6
 801cfac:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cfae:	d184      	bne.n	801ceba <__ssvfiscanf_r+0x9a>
 801cfb0:	2610      	movs	r6, #16
 801cfb2:	68bd      	ldr	r5, [r7, #8]
 801cfb4:	e774      	b.n	801cea0 <__ssvfiscanf_r+0x80>
 801cfb6:	0731      	lsls	r1, r6, #28
 801cfb8:	f47f af7f 	bne.w	801ceba <__ssvfiscanf_r+0x9a>
 801cfbc:	786b      	ldrb	r3, [r5, #1]
 801cfbe:	2b6c      	cmp	r3, #108	@ 0x6c
 801cfc0:	d104      	bne.n	801cfcc <__ssvfiscanf_r+0x1ac>
 801cfc2:	1cab      	adds	r3, r5, #2
 801cfc4:	60bb      	str	r3, [r7, #8]
 801cfc6:	f046 0602 	orr.w	r6, r6, #2
 801cfca:	e7f2      	b.n	801cfb2 <__ssvfiscanf_r+0x192>
 801cfcc:	f046 0601 	orr.w	r6, r6, #1
 801cfd0:	e7ef      	b.n	801cfb2 <__ssvfiscanf_r+0x192>
 801cfd2:	0732      	lsls	r2, r6, #28
 801cfd4:	f47f af71 	bne.w	801ceba <__ssvfiscanf_r+0x9a>
 801cfd8:	786b      	ldrb	r3, [r5, #1]
 801cfda:	2b68      	cmp	r3, #104	@ 0x68
 801cfdc:	bf03      	ittte	eq
 801cfde:	1cab      	addeq	r3, r5, #2
 801cfe0:	60bb      	streq	r3, [r7, #8]
 801cfe2:	f046 0608 	orreq.w	r6, r6, #8
 801cfe6:	f046 0604 	orrne.w	r6, r6, #4
 801cfea:	e7e2      	b.n	801cfb2 <__ssvfiscanf_r+0x192>
 801cfec:	0733      	lsls	r3, r6, #28
 801cfee:	f47f af64 	bne.w	801ceba <__ssvfiscanf_r+0x9a>
 801cff2:	e7e8      	b.n	801cfc6 <__ssvfiscanf_r+0x1a6>
 801cff4:	0735      	lsls	r5, r6, #28
 801cff6:	d0dc      	beq.n	801cfb2 <__ssvfiscanf_r+0x192>
 801cff8:	e75f      	b.n	801ceba <__ssvfiscanf_r+0x9a>
 801cffa:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 801cffe:	f47f af5c 	bne.w	801ceba <__ssvfiscanf_r+0x9a>
 801d002:	f1bb 0f00 	cmp.w	fp, #0
 801d006:	d104      	bne.n	801d012 <__ssvfiscanf_r+0x1f2>
 801d008:	b082      	sub	sp, #8
 801d00a:	f10d 0b08 	add.w	fp, sp, #8
 801d00e:	e9cb 3300 	strd	r3, r3, [fp]
 801d012:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 801d016:	e7cc      	b.n	801cfb2 <__ssvfiscanf_r+0x192>
 801d018:	f046 0601 	orr.w	r6, r6, #1
 801d01c:	4b0a      	ldr	r3, [pc, #40]	@ (801d048 <__ssvfiscanf_r+0x228>)
 801d01e:	e008      	b.n	801d032 <__ssvfiscanf_r+0x212>
 801d020:	f046 0601 	orr.w	r6, r6, #1
 801d024:	4b09      	ldr	r3, [pc, #36]	@ (801d04c <__ssvfiscanf_r+0x22c>)
 801d026:	60fb      	str	r3, [r7, #12]
 801d028:	2308      	movs	r3, #8
 801d02a:	617b      	str	r3, [r7, #20]
 801d02c:	2503      	movs	r5, #3
 801d02e:	e012      	b.n	801d056 <__ssvfiscanf_r+0x236>
 801d030:	4b06      	ldr	r3, [pc, #24]	@ (801d04c <__ssvfiscanf_r+0x22c>)
 801d032:	60fb      	str	r3, [r7, #12]
 801d034:	230a      	movs	r3, #10
 801d036:	e7f8      	b.n	801d02a <__ssvfiscanf_r+0x20a>
 801d038:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 801d03c:	4b03      	ldr	r3, [pc, #12]	@ (801d04c <__ssvfiscanf_r+0x22c>)
 801d03e:	60fb      	str	r3, [r7, #12]
 801d040:	2310      	movs	r3, #16
 801d042:	e7f2      	b.n	801d02a <__ssvfiscanf_r+0x20a>
 801d044:	08022e9f 	.word	0x08022e9f
 801d048:	08020a81 	.word	0x08020a81
 801d04c:	0801cc91 	.word	0x0801cc91
 801d050:	f046 0601 	orr.w	r6, r6, #1
 801d054:	2502      	movs	r5, #2
 801d056:	6863      	ldr	r3, [r4, #4]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	dd7b      	ble.n	801d154 <__ssvfiscanf_r+0x334>
 801d05c:	0671      	lsls	r1, r6, #25
 801d05e:	d407      	bmi.n	801d070 <__ssvfiscanf_r+0x250>
 801d060:	f8df 8388 	ldr.w	r8, [pc, #904]	@ 801d3ec <__ssvfiscanf_r+0x5cc>
 801d064:	6823      	ldr	r3, [r4, #0]
 801d066:	781a      	ldrb	r2, [r3, #0]
 801d068:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d06c:	0712      	lsls	r2, r2, #28
 801d06e:	d479      	bmi.n	801d164 <__ssvfiscanf_r+0x344>
 801d070:	2d02      	cmp	r5, #2
 801d072:	f000 836f 	beq.w	801d754 <__ssvfiscanf_r+0x934>
 801d076:	2d03      	cmp	r5, #3
 801d078:	f000 84f6 	beq.w	801da68 <__ssvfiscanf_r+0xc48>
 801d07c:	f006 0310 	and.w	r3, r6, #16
 801d080:	2d01      	cmp	r5, #1
 801d082:	613b      	str	r3, [r7, #16]
 801d084:	f006 0501 	and.w	r5, r6, #1
 801d088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d08a:	f000 81b1 	beq.w	801d3f0 <__ssvfiscanf_r+0x5d0>
 801d08e:	2b01      	cmp	r3, #1
 801d090:	bf38      	it	cc
 801d092:	2301      	movcc	r3, #1
 801d094:	4698      	mov	r8, r3
 801d096:	693b      	ldr	r3, [r7, #16]
 801d098:	2d00      	cmp	r5, #0
 801d09a:	f000 813b 	beq.w	801d314 <__ssvfiscanf_r+0x4f4>
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	f040 80d8 	bne.w	801d254 <__ssvfiscanf_r+0x434>
 801d0a4:	6a3b      	ldr	r3, [r7, #32]
 801d0a6:	0636      	lsls	r6, r6, #24
 801d0a8:	f853 5b04 	ldr.w	r5, [r3], #4
 801d0ac:	623b      	str	r3, [r7, #32]
 801d0ae:	f140 80d7 	bpl.w	801d260 <__ssvfiscanf_r+0x440>
 801d0b2:	b145      	cbz	r5, 801d0c6 <__ssvfiscanf_r+0x2a6>
 801d0b4:	2080      	movs	r0, #128	@ 0x80
 801d0b6:	f7fe f8e5 	bl	801b284 <malloc>
 801d0ba:	4606      	mov	r6, r0
 801d0bc:	2800      	cmp	r0, #0
 801d0be:	d164      	bne.n	801d18a <__ssvfiscanf_r+0x36a>
 801d0c0:	f04f 33ff 	mov.w	r3, #4294967295
 801d0c4:	61fb      	str	r3, [r7, #28]
 801d0c6:	f1bb 0f00 	cmp.w	fp, #0
 801d0ca:	d008      	beq.n	801d0de <__ssvfiscanf_r+0x2be>
 801d0cc:	69fb      	ldr	r3, [r7, #28]
 801d0ce:	3301      	adds	r3, #1
 801d0d0:	f000 85ba 	beq.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d0d4:	f8db 0000 	ldr.w	r0, [fp]
 801d0d8:	b108      	cbz	r0, 801d0de <__ssvfiscanf_r+0x2be>
 801d0da:	f7fe f8db 	bl	801b294 <free>
 801d0de:	69f8      	ldr	r0, [r7, #28]
 801d0e0:	f507 77ba 	add.w	r7, r7, #372	@ 0x174
 801d0e4:	46bd      	mov	sp, r7
 801d0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0ea:	68b9      	ldr	r1, [r7, #8]
 801d0ec:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 801d0f0:	f001 ffe5 	bl	801f0be <__sccl>
 801d0f4:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 801d0f8:	60b8      	str	r0, [r7, #8]
 801d0fa:	2501      	movs	r5, #1
 801d0fc:	e7ab      	b.n	801d056 <__ssvfiscanf_r+0x236>
 801d0fe:	f046 0601 	orr.w	r6, r6, #1
 801d102:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 801d106:	2500      	movs	r5, #0
 801d108:	e7a5      	b.n	801d056 <__ssvfiscanf_r+0x236>
 801d10a:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 801d10e:	e795      	b.n	801d03c <__ssvfiscanf_r+0x21c>
 801d110:	06f0      	lsls	r0, r6, #27
 801d112:	f53f aea6 	bmi.w	801ce62 <__ssvfiscanf_r+0x42>
 801d116:	6a3a      	ldr	r2, [r7, #32]
 801d118:	0731      	lsls	r1, r6, #28
 801d11a:	f852 3b04 	ldr.w	r3, [r2], #4
 801d11e:	623a      	str	r2, [r7, #32]
 801d120:	d502      	bpl.n	801d128 <__ssvfiscanf_r+0x308>
 801d122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d124:	701a      	strb	r2, [r3, #0]
 801d126:	e69c      	b.n	801ce62 <__ssvfiscanf_r+0x42>
 801d128:	0772      	lsls	r2, r6, #29
 801d12a:	d502      	bpl.n	801d132 <__ssvfiscanf_r+0x312>
 801d12c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d12e:	801a      	strh	r2, [r3, #0]
 801d130:	e697      	b.n	801ce62 <__ssvfiscanf_r+0x42>
 801d132:	07f5      	lsls	r5, r6, #31
 801d134:	d502      	bpl.n	801d13c <__ssvfiscanf_r+0x31c>
 801d136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d138:	601a      	str	r2, [r3, #0]
 801d13a:	e692      	b.n	801ce62 <__ssvfiscanf_r+0x42>
 801d13c:	07b0      	lsls	r0, r6, #30
 801d13e:	d5fa      	bpl.n	801d136 <__ssvfiscanf_r+0x316>
 801d140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d144:	17d2      	asrs	r2, r2, #31
 801d146:	e9c3 1200 	strd	r1, r2, [r3]
 801d14a:	e68a      	b.n	801ce62 <__ssvfiscanf_r+0x42>
 801d14c:	4ba6      	ldr	r3, [pc, #664]	@ (801d3e8 <__ssvfiscanf_r+0x5c8>)
 801d14e:	60fb      	str	r3, [r7, #12]
 801d150:	2300      	movs	r3, #0
 801d152:	e76a      	b.n	801d02a <__ssvfiscanf_r+0x20a>
 801d154:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d156:	4621      	mov	r1, r4
 801d158:	f7ff fe0b 	bl	801cd72 <__ssrefill_r>
 801d15c:	2800      	cmp	r0, #0
 801d15e:	f43f af7d 	beq.w	801d05c <__ssvfiscanf_r+0x23c>
 801d162:	e714      	b.n	801cf8e <__ssvfiscanf_r+0x16e>
 801d164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d166:	3201      	adds	r2, #1
 801d168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d16a:	6862      	ldr	r2, [r4, #4]
 801d16c:	3a01      	subs	r2, #1
 801d16e:	2a00      	cmp	r2, #0
 801d170:	6062      	str	r2, [r4, #4]
 801d172:	dd02      	ble.n	801d17a <__ssvfiscanf_r+0x35a>
 801d174:	3301      	adds	r3, #1
 801d176:	6023      	str	r3, [r4, #0]
 801d178:	e774      	b.n	801d064 <__ssvfiscanf_r+0x244>
 801d17a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d17c:	4621      	mov	r1, r4
 801d17e:	f7ff fdf8 	bl	801cd72 <__ssrefill_r>
 801d182:	2800      	cmp	r0, #0
 801d184:	f43f af6e 	beq.w	801d064 <__ssvfiscanf_r+0x244>
 801d188:	e701      	b.n	801cf8e <__ssvfiscanf_r+0x16e>
 801d18a:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801d18e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801d192:	6028      	str	r0, [r5, #0]
 801d194:	4599      	cmp	r9, r3
 801d196:	d314      	bcc.n	801d1c2 <__ssvfiscanf_r+0x3a2>
 801d198:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 801d19c:	4293      	cmp	r3, r2
 801d19e:	f200 8553 	bhi.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d1a2:	3308      	adds	r3, #8
 801d1a4:	fa1f fa83 	uxth.w	sl, r3
 801d1a8:	f8db 0000 	ldr.w	r0, [fp]
 801d1ac:	ea4f 018a 	mov.w	r1, sl, lsl #2
 801d1b0:	f003 fa3c 	bl	802062c <realloc>
 801d1b4:	2800      	cmp	r0, #0
 801d1b6:	f000 8547 	beq.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d1ba:	f8cb 0000 	str.w	r0, [fp]
 801d1be:	f8ab a004 	strh.w	sl, [fp, #4]
 801d1c2:	f8db 3000 	ldr.w	r3, [fp]
 801d1c6:	f109 0201 	add.w	r2, r9, #1
 801d1ca:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801d1ce:	46aa      	mov	sl, r5
 801d1d0:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d1d4:	4635      	mov	r5, r6
 801d1d6:	f04f 0920 	mov.w	r9, #32
 801d1da:	2200      	movs	r2, #0
 801d1dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 801d1de:	f002 f80b 	bl	801f1f8 <__locale_mb_cur_max>
 801d1e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d1e4:	4290      	cmp	r0, r2
 801d1e6:	f43f aed2 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d1ea:	6821      	ldr	r1, [r4, #0]
 801d1ec:	f107 0c48 	add.w	ip, r7, #72	@ 0x48
 801d1f0:	f811 0b01 	ldrb.w	r0, [r1], #1
 801d1f4:	f80c 0002 	strb.w	r0, [ip, r2]
 801d1f8:	1c53      	adds	r3, r2, #1
 801d1fa:	6862      	ldr	r2, [r4, #4]
 801d1fc:	3a01      	subs	r2, #1
 801d1fe:	e9c4 1200 	strd	r1, r2, [r4]
 801d202:	69ba      	ldr	r2, [r7, #24]
 801d204:	2a03      	cmp	r2, #3
 801d206:	d102      	bne.n	801d20e <__ssvfiscanf_r+0x3ee>
 801d208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801d20a:	2a04      	cmp	r2, #4
 801d20c:	d007      	beq.n	801d21e <__ssvfiscanf_r+0x3fe>
 801d20e:	2208      	movs	r2, #8
 801d210:	2100      	movs	r1, #0
 801d212:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801d216:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d218:	f7fe fc9a 	bl	801bb50 <memset>
 801d21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d21e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801d222:	9200      	str	r2, [sp, #0]
 801d224:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d226:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d228:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801d22c:	4629      	mov	r1, r5
 801d22e:	f003 fd5f 	bl	8020cf0 <_mbrtowc_r>
 801d232:	4603      	mov	r3, r0
 801d234:	61b8      	str	r0, [r7, #24]
 801d236:	1c58      	adds	r0, r3, #1
 801d238:	f43f aea9 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d23c:	461a      	mov	r2, r3
 801d23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d240:	b9b2      	cbnz	r2, 801d270 <__ssvfiscanf_r+0x450>
 801d242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d244:	441a      	add	r2, r3
 801d246:	4613      	mov	r3, r2
 801d248:	693a      	ldr	r2, [r7, #16]
 801d24a:	b172      	cbz	r2, 801d26a <__ssvfiscanf_r+0x44a>
 801d24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d24e:	f108 38ff 	add.w	r8, r8, #4294967295
 801d252:	e019      	b.n	801d288 <__ssvfiscanf_r+0x468>
 801d254:	f04f 0900 	mov.w	r9, #0
 801d258:	464e      	mov	r6, r9
 801d25a:	46ca      	mov	sl, r9
 801d25c:	464d      	mov	r5, r9
 801d25e:	e7bc      	b.n	801d1da <__ssvfiscanf_r+0x3ba>
 801d260:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801d264:	464e      	mov	r6, r9
 801d266:	46ca      	mov	sl, r9
 801d268:	e7b7      	b.n	801d1da <__ssvfiscanf_r+0x3ba>
 801d26a:	693a      	ldr	r2, [r7, #16]
 801d26c:	602a      	str	r2, [r5, #0]
 801d26e:	e7ed      	b.n	801d24c <__ssvfiscanf_r+0x42c>
 801d270:	69ba      	ldr	r2, [r7, #24]
 801d272:	3202      	adds	r2, #2
 801d274:	d024      	beq.n	801d2c0 <__ssvfiscanf_r+0x4a0>
 801d276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d278:	441a      	add	r2, r3
 801d27a:	69bb      	ldr	r3, [r7, #24]
 801d27c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d27e:	2b03      	cmp	r3, #3
 801d280:	d1e5      	bne.n	801d24e <__ssvfiscanf_r+0x42e>
 801d282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d284:	2b04      	cmp	r3, #4
 801d286:	d1e2      	bne.n	801d24e <__ssvfiscanf_r+0x42e>
 801d288:	693b      	ldr	r3, [r7, #16]
 801d28a:	b9bb      	cbnz	r3, 801d2bc <__ssvfiscanf_r+0x49c>
 801d28c:	f1ba 0f00 	cmp.w	sl, #0
 801d290:	d013      	beq.n	801d2ba <__ssvfiscanf_r+0x49a>
 801d292:	1bab      	subs	r3, r5, r6
 801d294:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 801d298:	d80f      	bhi.n	801d2ba <__ssvfiscanf_r+0x49a>
 801d29a:	4630      	mov	r0, r6
 801d29c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801d2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d2a2:	f003 f9c3 	bl	802062c <realloc>
 801d2a6:	4606      	mov	r6, r0
 801d2a8:	2800      	cmp	r0, #0
 801d2aa:	f43f af09 	beq.w	801d0c0 <__ssvfiscanf_r+0x2a0>
 801d2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2b0:	f8ca 0000 	str.w	r0, [sl]
 801d2b4:	18c5      	adds	r5, r0, r3
 801d2b6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d2ba:	3504      	adds	r5, #4
 801d2bc:	2200      	movs	r2, #0
 801d2be:	e000      	b.n	801d2c2 <__ssvfiscanf_r+0x4a2>
 801d2c0:	461a      	mov	r2, r3
 801d2c2:	6863      	ldr	r3, [r4, #4]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	dc13      	bgt.n	801d2f0 <__ssvfiscanf_r+0x4d0>
 801d2c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d2ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 801d2cc:	4621      	mov	r1, r4
 801d2ce:	f7ff fd50 	bl	801cd72 <__ssrefill_r>
 801d2d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d2d4:	b160      	cbz	r0, 801d2f0 <__ssvfiscanf_r+0x4d0>
 801d2d6:	2a00      	cmp	r2, #0
 801d2d8:	f47f ae59 	bne.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d2dc:	f1ba 0f00 	cmp.w	sl, #0
 801d2e0:	d10b      	bne.n	801d2fa <__ssvfiscanf_r+0x4da>
 801d2e2:	693b      	ldr	r3, [r7, #16]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	f47f adbc 	bne.w	801ce62 <__ssvfiscanf_r+0x42>
 801d2ea:	69fb      	ldr	r3, [r7, #28]
 801d2ec:	3301      	adds	r3, #1
 801d2ee:	e5b0      	b.n	801ce52 <__ssvfiscanf_r+0x32>
 801d2f0:	f1b8 0f00 	cmp.w	r8, #0
 801d2f4:	f47f af72 	bne.w	801d1dc <__ssvfiscanf_r+0x3bc>
 801d2f8:	e7f0      	b.n	801d2dc <__ssvfiscanf_r+0x4bc>
 801d2fa:	1ba9      	subs	r1, r5, r6
 801d2fc:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 801d300:	d9ef      	bls.n	801d2e2 <__ssvfiscanf_r+0x4c2>
 801d302:	f8da 0000 	ldr.w	r0, [sl]
 801d306:	f003 f991 	bl	802062c <realloc>
 801d30a:	2800      	cmp	r0, #0
 801d30c:	d0e9      	beq.n	801d2e2 <__ssvfiscanf_r+0x4c2>
 801d30e:	f8ca 0000 	str.w	r0, [sl]
 801d312:	e7e6      	b.n	801d2e2 <__ssvfiscanf_r+0x4c2>
 801d314:	b1db      	cbz	r3, 801d34e <__ssvfiscanf_r+0x52e>
 801d316:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d31a:	4598      	cmp	r8, r3
 801d31c:	dd10      	ble.n	801d340 <__ssvfiscanf_r+0x520>
 801d31e:	441a      	add	r2, r3
 801d320:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d322:	6022      	str	r2, [r4, #0]
 801d324:	4621      	mov	r1, r4
 801d326:	441d      	add	r5, r3
 801d328:	eba8 0803 	sub.w	r8, r8, r3
 801d32c:	f7ff fd21 	bl	801cd72 <__ssrefill_r>
 801d330:	2800      	cmp	r0, #0
 801d332:	d0f0      	beq.n	801d316 <__ssvfiscanf_r+0x4f6>
 801d334:	2d00      	cmp	r5, #0
 801d336:	f43f ae2a 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d33c:	442b      	add	r3, r5
 801d33e:	e201      	b.n	801d744 <__ssvfiscanf_r+0x924>
 801d340:	eba3 0308 	sub.w	r3, r3, r8
 801d344:	4442      	add	r2, r8
 801d346:	4445      	add	r5, r8
 801d348:	6063      	str	r3, [r4, #4]
 801d34a:	6022      	str	r2, [r4, #0]
 801d34c:	e7f5      	b.n	801d33a <__ssvfiscanf_r+0x51a>
 801d34e:	6a3b      	ldr	r3, [r7, #32]
 801d350:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 801d354:	f853 5b04 	ldr.w	r5, [r3], #4
 801d358:	623b      	str	r3, [r7, #32]
 801d35a:	d02d      	beq.n	801d3b8 <__ssvfiscanf_r+0x598>
 801d35c:	2d00      	cmp	r5, #0
 801d35e:	f43f adac 	beq.w	801ceba <__ssvfiscanf_r+0x9a>
 801d362:	4640      	mov	r0, r8
 801d364:	f7fd ff8e 	bl	801b284 <malloc>
 801d368:	4681      	mov	r9, r0
 801d36a:	2800      	cmp	r0, #0
 801d36c:	f43f ae14 	beq.w	801cf98 <__ssvfiscanf_r+0x178>
 801d370:	f8bb a006 	ldrh.w	sl, [fp, #6]
 801d374:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 801d378:	6028      	str	r0, [r5, #0]
 801d37a:	45b2      	cmp	sl, r6
 801d37c:	d312      	bcc.n	801d3a4 <__ssvfiscanf_r+0x584>
 801d37e:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 801d382:	429e      	cmp	r6, r3
 801d384:	f200 8460 	bhi.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d388:	3608      	adds	r6, #8
 801d38a:	b2b6      	uxth	r6, r6
 801d38c:	f8db 0000 	ldr.w	r0, [fp]
 801d390:	00b1      	lsls	r1, r6, #2
 801d392:	f003 f94b 	bl	802062c <realloc>
 801d396:	2800      	cmp	r0, #0
 801d398:	f000 8456 	beq.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d39c:	f8cb 0000 	str.w	r0, [fp]
 801d3a0:	f8ab 6004 	strh.w	r6, [fp, #4]
 801d3a4:	f8db 3000 	ldr.w	r3, [fp]
 801d3a8:	f10a 0201 	add.w	r2, sl, #1
 801d3ac:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 801d3b0:	462e      	mov	r6, r5
 801d3b2:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d3b6:	464d      	mov	r5, r9
 801d3b8:	9400      	str	r4, [sp, #0]
 801d3ba:	4629      	mov	r1, r5
 801d3bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d3be:	4643      	mov	r3, r8
 801d3c0:	2201      	movs	r2, #1
 801d3c2:	f7ff fcf3 	bl	801cdac <_sfread_r>
 801d3c6:	4605      	mov	r5, r0
 801d3c8:	2800      	cmp	r0, #0
 801d3ca:	f43f ade0 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d3ce:	b13e      	cbz	r6, 801d3e0 <__ssvfiscanf_r+0x5c0>
 801d3d0:	4580      	cmp	r8, r0
 801d3d2:	d905      	bls.n	801d3e0 <__ssvfiscanf_r+0x5c0>
 801d3d4:	4601      	mov	r1, r0
 801d3d6:	6830      	ldr	r0, [r6, #0]
 801d3d8:	f003 f928 	bl	802062c <realloc>
 801d3dc:	b100      	cbz	r0, 801d3e0 <__ssvfiscanf_r+0x5c0>
 801d3de:	6030      	str	r0, [r6, #0]
 801d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d3e2:	442b      	add	r3, r5
 801d3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d3e6:	e780      	b.n	801d2ea <__ssvfiscanf_r+0x4ca>
 801d3e8:	08020a81 	.word	0x08020a81
 801d3ec:	08022e9f 	.word	0x08022e9f
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	bf08      	it	eq
 801d3f4:	f04f 33ff 	moveq.w	r3, #4294967295
 801d3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d3fa:	693b      	ldr	r3, [r7, #16]
 801d3fc:	2d00      	cmp	r5, #0
 801d3fe:	f000 8100 	beq.w	801d602 <__ssvfiscanf_r+0x7e2>
 801d402:	2b00      	cmp	r3, #0
 801d404:	f040 80a5 	bne.w	801d552 <__ssvfiscanf_r+0x732>
 801d408:	6a3b      	ldr	r3, [r7, #32]
 801d40a:	0631      	lsls	r1, r6, #24
 801d40c:	f853 5b04 	ldr.w	r5, [r3], #4
 801d410:	623b      	str	r3, [r7, #32]
 801d412:	f140 80a5 	bpl.w	801d560 <__ssvfiscanf_r+0x740>
 801d416:	2d00      	cmp	r5, #0
 801d418:	f43f ae55 	beq.w	801d0c6 <__ssvfiscanf_r+0x2a6>
 801d41c:	2080      	movs	r0, #128	@ 0x80
 801d41e:	f7fd ff31 	bl	801b284 <malloc>
 801d422:	4680      	mov	r8, r0
 801d424:	2800      	cmp	r0, #0
 801d426:	f43f ae4b 	beq.w	801d0c0 <__ssvfiscanf_r+0x2a0>
 801d42a:	f8bb 6006 	ldrh.w	r6, [fp, #6]
 801d42e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801d432:	6028      	str	r0, [r5, #0]
 801d434:	429e      	cmp	r6, r3
 801d436:	d314      	bcc.n	801d462 <__ssvfiscanf_r+0x642>
 801d438:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 801d43c:	4293      	cmp	r3, r2
 801d43e:	f200 8403 	bhi.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d442:	3308      	adds	r3, #8
 801d444:	fa1f f983 	uxth.w	r9, r3
 801d448:	f8db 0000 	ldr.w	r0, [fp]
 801d44c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 801d450:	f003 f8ec 	bl	802062c <realloc>
 801d454:	2800      	cmp	r0, #0
 801d456:	f000 83f7 	beq.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d45a:	f8cb 0000 	str.w	r0, [fp]
 801d45e:	f8ab 9004 	strh.w	r9, [fp, #4]
 801d462:	f8db 3000 	ldr.w	r3, [fp]
 801d466:	1c72      	adds	r2, r6, #1
 801d468:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 801d46c:	46aa      	mov	sl, r5
 801d46e:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d472:	4645      	mov	r5, r8
 801d474:	f04f 0920 	mov.w	r9, #32
 801d478:	2600      	movs	r6, #0
 801d47a:	f001 febd 	bl	801f1f8 <__locale_mb_cur_max>
 801d47e:	4286      	cmp	r6, r0
 801d480:	f43f ad85 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d484:	1c73      	adds	r3, r6, #1
 801d486:	607b      	str	r3, [r7, #4]
 801d488:	6823      	ldr	r3, [r4, #0]
 801d48a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801d48e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d492:	558a      	strb	r2, [r1, r6]
 801d494:	6862      	ldr	r2, [r4, #4]
 801d496:	3a01      	subs	r2, #1
 801d498:	e9c4 3200 	strd	r3, r2, [r4]
 801d49c:	69bb      	ldr	r3, [r7, #24]
 801d49e:	2b03      	cmp	r3, #3
 801d4a0:	d102      	bne.n	801d4a8 <__ssvfiscanf_r+0x688>
 801d4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d4a4:	2b04      	cmp	r3, #4
 801d4a6:	d005      	beq.n	801d4b4 <__ssvfiscanf_r+0x694>
 801d4a8:	2208      	movs	r2, #8
 801d4aa:	2100      	movs	r1, #0
 801d4ac:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 801d4b0:	f7fe fb4e 	bl	801bb50 <memset>
 801d4b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801d4b8:	9300      	str	r3, [sp, #0]
 801d4ba:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d4c2:	4629      	mov	r1, r5
 801d4c4:	f003 fc14 	bl	8020cf0 <_mbrtowc_r>
 801d4c8:	1c42      	adds	r2, r0, #1
 801d4ca:	61b8      	str	r0, [r7, #24]
 801d4cc:	f43f ad5f 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d4d0:	2800      	cmp	r0, #0
 801d4d2:	d14a      	bne.n	801d56a <__ssvfiscanf_r+0x74a>
 801d4d4:	6028      	str	r0, [r5, #0]
 801d4d6:	682e      	ldr	r6, [r5, #0]
 801d4d8:	1c73      	adds	r3, r6, #1
 801d4da:	d056      	beq.n	801d58a <__ssvfiscanf_r+0x76a>
 801d4dc:	2208      	movs	r2, #8
 801d4de:	2100      	movs	r1, #0
 801d4e0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801d4e4:	f7fe fb34 	bl	801bb50 <memset>
 801d4e8:	4b99      	ldr	r3, [pc, #612]	@ (801d750 <__ssvfiscanf_r+0x930>)
 801d4ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d4ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801d4f0:	603b      	str	r3, [r7, #0]
 801d4f2:	4632      	mov	r2, r6
 801d4f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801d4f8:	683e      	ldr	r6, [r7, #0]
 801d4fa:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d4fe:	47b0      	blx	r6
 801d500:	2801      	cmp	r0, #1
 801d502:	d144      	bne.n	801d58e <__ssvfiscanf_r+0x76e>
 801d504:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801d508:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d50c:	5c9b      	ldrb	r3, [r3, r2]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d148      	bne.n	801d5a4 <__ssvfiscanf_r+0x784>
 801d512:	f107 0648 	add.w	r6, r7, #72	@ 0x48
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d13a      	bne.n	801d592 <__ssvfiscanf_r+0x772>
 801d51c:	693b      	ldr	r3, [r7, #16]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	f47f ac9f 	bne.w	801ce62 <__ssvfiscanf_r+0x42>
 801d524:	602b      	str	r3, [r5, #0]
 801d526:	f1ba 0f00 	cmp.w	sl, #0
 801d52a:	f43f aede 	beq.w	801d2ea <__ssvfiscanf_r+0x4ca>
 801d52e:	eba5 0108 	sub.w	r1, r5, r8
 801d532:	108b      	asrs	r3, r1, #2
 801d534:	3301      	adds	r3, #1
 801d536:	4599      	cmp	r9, r3
 801d538:	f67f aed7 	bls.w	801d2ea <__ssvfiscanf_r+0x4ca>
 801d53c:	f8da 0000 	ldr.w	r0, [sl]
 801d540:	3104      	adds	r1, #4
 801d542:	f003 f873 	bl	802062c <realloc>
 801d546:	2800      	cmp	r0, #0
 801d548:	f43f aecf 	beq.w	801d2ea <__ssvfiscanf_r+0x4ca>
 801d54c:	f8ca 0000 	str.w	r0, [sl]
 801d550:	e6cb      	b.n	801d2ea <__ssvfiscanf_r+0x4ca>
 801d552:	f04f 0900 	mov.w	r9, #0
 801d556:	46c8      	mov	r8, r9
 801d558:	46ca      	mov	sl, r9
 801d55a:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801d55e:	e78b      	b.n	801d478 <__ssvfiscanf_r+0x658>
 801d560:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801d564:	46c8      	mov	r8, r9
 801d566:	46ca      	mov	sl, r9
 801d568:	e786      	b.n	801d478 <__ssvfiscanf_r+0x658>
 801d56a:	69bb      	ldr	r3, [r7, #24]
 801d56c:	3302      	adds	r3, #2
 801d56e:	d1b2      	bne.n	801d4d6 <__ssvfiscanf_r+0x6b6>
 801d570:	687e      	ldr	r6, [r7, #4]
 801d572:	6863      	ldr	r3, [r4, #4]
 801d574:	2b00      	cmp	r3, #0
 801d576:	dc3f      	bgt.n	801d5f8 <__ssvfiscanf_r+0x7d8>
 801d578:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d57a:	4621      	mov	r1, r4
 801d57c:	f7ff fbf9 	bl	801cd72 <__ssrefill_r>
 801d580:	2800      	cmp	r0, #0
 801d582:	d039      	beq.n	801d5f8 <__ssvfiscanf_r+0x7d8>
 801d584:	2e00      	cmp	r6, #0
 801d586:	d0c9      	beq.n	801d51c <__ssvfiscanf_r+0x6fc>
 801d588:	e501      	b.n	801cf8e <__ssvfiscanf_r+0x16e>
 801d58a:	4632      	mov	r2, r6
 801d58c:	e7bc      	b.n	801d508 <__ssvfiscanf_r+0x6e8>
 801d58e:	2200      	movs	r2, #0
 801d590:	e7ba      	b.n	801d508 <__ssvfiscanf_r+0x6e8>
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d596:	3b01      	subs	r3, #1
 801d598:	4622      	mov	r2, r4
 801d59a:	5cf1      	ldrb	r1, [r6, r3]
 801d59c:	607b      	str	r3, [r7, #4]
 801d59e:	f7ff fbad 	bl	801ccfc <_sungetc_r>
 801d5a2:	e7b8      	b.n	801d516 <__ssvfiscanf_r+0x6f6>
 801d5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d5a6:	687a      	ldr	r2, [r7, #4]
 801d5a8:	4413      	add	r3, r2
 801d5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d5ac:	69bb      	ldr	r3, [r7, #24]
 801d5ae:	2b03      	cmp	r3, #3
 801d5b0:	d102      	bne.n	801d5b8 <__ssvfiscanf_r+0x798>
 801d5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5b4:	2b04      	cmp	r3, #4
 801d5b6:	d002      	beq.n	801d5be <__ssvfiscanf_r+0x79e>
 801d5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5ba:	3b01      	subs	r3, #1
 801d5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d5be:	693b      	ldr	r3, [r7, #16]
 801d5c0:	b9c3      	cbnz	r3, 801d5f4 <__ssvfiscanf_r+0x7d4>
 801d5c2:	3504      	adds	r5, #4
 801d5c4:	f1ba 0f00 	cmp.w	sl, #0
 801d5c8:	d014      	beq.n	801d5f4 <__ssvfiscanf_r+0x7d4>
 801d5ca:	eba5 0608 	sub.w	r6, r5, r8
 801d5ce:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 801d5d2:	d80d      	bhi.n	801d5f0 <__ssvfiscanf_r+0x7d0>
 801d5d4:	4640      	mov	r0, r8
 801d5d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801d5da:	f003 f827 	bl	802062c <realloc>
 801d5de:	4680      	mov	r8, r0
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	f43f ad6d 	beq.w	801d0c0 <__ssvfiscanf_r+0x2a0>
 801d5e6:	1985      	adds	r5, r0, r6
 801d5e8:	f8ca 0000 	str.w	r0, [sl]
 801d5ec:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d5f0:	693e      	ldr	r6, [r7, #16]
 801d5f2:	e7be      	b.n	801d572 <__ssvfiscanf_r+0x752>
 801d5f4:	2600      	movs	r6, #0
 801d5f6:	e7bc      	b.n	801d572 <__ssvfiscanf_r+0x752>
 801d5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	f47f af3d 	bne.w	801d47a <__ssvfiscanf_r+0x65a>
 801d600:	e78c      	b.n	801d51c <__ssvfiscanf_r+0x6fc>
 801d602:	b1e3      	cbz	r3, 801d63e <__ssvfiscanf_r+0x81e>
 801d604:	f107 0670 	add.w	r6, r7, #112	@ 0x70
 801d608:	6823      	ldr	r3, [r4, #0]
 801d60a:	781a      	ldrb	r2, [r3, #0]
 801d60c:	5cb2      	ldrb	r2, [r6, r2]
 801d60e:	b91a      	cbnz	r2, 801d618 <__ssvfiscanf_r+0x7f8>
 801d610:	2d00      	cmp	r5, #0
 801d612:	f47f ae92 	bne.w	801d33a <__ssvfiscanf_r+0x51a>
 801d616:	e450      	b.n	801ceba <__ssvfiscanf_r+0x9a>
 801d618:	3301      	adds	r3, #1
 801d61a:	6862      	ldr	r2, [r4, #4]
 801d61c:	6023      	str	r3, [r4, #0]
 801d61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d620:	3501      	adds	r5, #1
 801d622:	3a01      	subs	r2, #1
 801d624:	42ab      	cmp	r3, r5
 801d626:	6062      	str	r2, [r4, #4]
 801d628:	f43f ae87 	beq.w	801d33a <__ssvfiscanf_r+0x51a>
 801d62c:	2a00      	cmp	r2, #0
 801d62e:	dceb      	bgt.n	801d608 <__ssvfiscanf_r+0x7e8>
 801d630:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d632:	4621      	mov	r1, r4
 801d634:	f7ff fb9d 	bl	801cd72 <__ssrefill_r>
 801d638:	2800      	cmp	r0, #0
 801d63a:	d0e5      	beq.n	801d608 <__ssvfiscanf_r+0x7e8>
 801d63c:	e67d      	b.n	801d33a <__ssvfiscanf_r+0x51a>
 801d63e:	6a3b      	ldr	r3, [r7, #32]
 801d640:	f016 0980 	ands.w	r9, r6, #128	@ 0x80
 801d644:	f853 5b04 	ldr.w	r5, [r3], #4
 801d648:	623b      	str	r3, [r7, #32]
 801d64a:	d07e      	beq.n	801d74a <__ssvfiscanf_r+0x92a>
 801d64c:	2d00      	cmp	r5, #0
 801d64e:	f43f ac34 	beq.w	801ceba <__ssvfiscanf_r+0x9a>
 801d652:	2020      	movs	r0, #32
 801d654:	f7fd fe16 	bl	801b284 <malloc>
 801d658:	4680      	mov	r8, r0
 801d65a:	2800      	cmp	r0, #0
 801d65c:	f43f ac9c 	beq.w	801cf98 <__ssvfiscanf_r+0x178>
 801d660:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801d664:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 801d668:	6028      	str	r0, [r5, #0]
 801d66a:	45b1      	cmp	r9, r6
 801d66c:	d312      	bcc.n	801d694 <__ssvfiscanf_r+0x874>
 801d66e:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 801d672:	429e      	cmp	r6, r3
 801d674:	f200 82e8 	bhi.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d678:	3608      	adds	r6, #8
 801d67a:	b2b6      	uxth	r6, r6
 801d67c:	f8db 0000 	ldr.w	r0, [fp]
 801d680:	00b1      	lsls	r1, r6, #2
 801d682:	f002 ffd3 	bl	802062c <realloc>
 801d686:	2800      	cmp	r0, #0
 801d688:	f000 82de 	beq.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d68c:	f8cb 0000 	str.w	r0, [fp]
 801d690:	f8ab 6004 	strh.w	r6, [fp, #4]
 801d694:	f8db 3000 	ldr.w	r3, [fp]
 801d698:	f109 0201 	add.w	r2, r9, #1
 801d69c:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801d6a0:	46aa      	mov	sl, r5
 801d6a2:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d6a6:	4645      	mov	r5, r8
 801d6a8:	f04f 0920 	mov.w	r9, #32
 801d6ac:	462e      	mov	r6, r5
 801d6ae:	f107 0870 	add.w	r8, r7, #112	@ 0x70
 801d6b2:	6823      	ldr	r3, [r4, #0]
 801d6b4:	781a      	ldrb	r2, [r3, #0]
 801d6b6:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d6ba:	b362      	cbz	r2, 801d716 <__ssvfiscanf_r+0x8f6>
 801d6bc:	6862      	ldr	r2, [r4, #4]
 801d6be:	3a01      	subs	r2, #1
 801d6c0:	6062      	str	r2, [r4, #4]
 801d6c2:	1c5a      	adds	r2, r3, #1
 801d6c4:	6022      	str	r2, [r4, #0]
 801d6c6:	781b      	ldrb	r3, [r3, #0]
 801d6c8:	f805 3b01 	strb.w	r3, [r5], #1
 801d6cc:	f1ba 0f00 	cmp.w	sl, #0
 801d6d0:	d011      	beq.n	801d6f6 <__ssvfiscanf_r+0x8d6>
 801d6d2:	1bab      	subs	r3, r5, r6
 801d6d4:	454b      	cmp	r3, r9
 801d6d6:	d30e      	bcc.n	801d6f6 <__ssvfiscanf_r+0x8d6>
 801d6d8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d6dc:	4630      	mov	r0, r6
 801d6de:	4649      	mov	r1, r9
 801d6e0:	613b      	str	r3, [r7, #16]
 801d6e2:	f002 ffa3 	bl	802062c <realloc>
 801d6e6:	4606      	mov	r6, r0
 801d6e8:	2800      	cmp	r0, #0
 801d6ea:	f43f ac55 	beq.w	801cf98 <__ssvfiscanf_r+0x178>
 801d6ee:	693b      	ldr	r3, [r7, #16]
 801d6f0:	f8ca 0000 	str.w	r0, [sl]
 801d6f4:	18c5      	adds	r5, r0, r3
 801d6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6f8:	3b01      	subs	r3, #1
 801d6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d6fc:	d00b      	beq.n	801d716 <__ssvfiscanf_r+0x8f6>
 801d6fe:	6863      	ldr	r3, [r4, #4]
 801d700:	2b00      	cmp	r3, #0
 801d702:	dcd6      	bgt.n	801d6b2 <__ssvfiscanf_r+0x892>
 801d704:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d706:	4621      	mov	r1, r4
 801d708:	f7ff fb33 	bl	801cd72 <__ssrefill_r>
 801d70c:	2800      	cmp	r0, #0
 801d70e:	d0d0      	beq.n	801d6b2 <__ssvfiscanf_r+0x892>
 801d710:	42b5      	cmp	r5, r6
 801d712:	f43f ac3c 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d716:	1bae      	subs	r6, r5, r6
 801d718:	f43f abcf 	beq.w	801ceba <__ssvfiscanf_r+0x9a>
 801d71c:	2300      	movs	r3, #0
 801d71e:	702b      	strb	r3, [r5, #0]
 801d720:	f1ba 0f00 	cmp.w	sl, #0
 801d724:	d009      	beq.n	801d73a <__ssvfiscanf_r+0x91a>
 801d726:	1c71      	adds	r1, r6, #1
 801d728:	4589      	cmp	r9, r1
 801d72a:	d906      	bls.n	801d73a <__ssvfiscanf_r+0x91a>
 801d72c:	f8da 0000 	ldr.w	r0, [sl]
 801d730:	f002 ff7c 	bl	802062c <realloc>
 801d734:	b108      	cbz	r0, 801d73a <__ssvfiscanf_r+0x91a>
 801d736:	f8ca 0000 	str.w	r0, [sl]
 801d73a:	69fb      	ldr	r3, [r7, #28]
 801d73c:	3301      	adds	r3, #1
 801d73e:	61fb      	str	r3, [r7, #28]
 801d740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d742:	4433      	add	r3, r6
 801d744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d746:	f7ff bb8c 	b.w	801ce62 <__ssvfiscanf_r+0x42>
 801d74a:	46ca      	mov	sl, r9
 801d74c:	e7ae      	b.n	801d6ac <__ssvfiscanf_r+0x88c>
 801d74e:	bf00      	nop
 801d750:	200007f8 	.word	0x200007f8
 801d754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d756:	2b00      	cmp	r3, #0
 801d758:	bf08      	it	eq
 801d75a:	f04f 33ff 	moveq.w	r3, #4294967295
 801d75e:	f016 0501 	ands.w	r5, r6, #1
 801d762:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d764:	f006 0810 	and.w	r8, r6, #16
 801d768:	f000 80e1 	beq.w	801d92e <__ssvfiscanf_r+0xb0e>
 801d76c:	f1b8 0f00 	cmp.w	r8, #0
 801d770:	f040 8089 	bne.w	801d886 <__ssvfiscanf_r+0xa66>
 801d774:	6a3b      	ldr	r3, [r7, #32]
 801d776:	0636      	lsls	r6, r6, #24
 801d778:	f853 5b04 	ldr.w	r5, [r3], #4
 801d77c:	623b      	str	r3, [r7, #32]
 801d77e:	f140 8089 	bpl.w	801d894 <__ssvfiscanf_r+0xa74>
 801d782:	2d00      	cmp	r5, #0
 801d784:	f43f ac9f 	beq.w	801d0c6 <__ssvfiscanf_r+0x2a6>
 801d788:	2080      	movs	r0, #128	@ 0x80
 801d78a:	f7fd fd7b 	bl	801b284 <malloc>
 801d78e:	4606      	mov	r6, r0
 801d790:	2800      	cmp	r0, #0
 801d792:	f43f ac95 	beq.w	801d0c0 <__ssvfiscanf_r+0x2a0>
 801d796:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801d79a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801d79e:	6028      	str	r0, [r5, #0]
 801d7a0:	4599      	cmp	r9, r3
 801d7a2:	d314      	bcc.n	801d7ce <__ssvfiscanf_r+0x9ae>
 801d7a4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 801d7a8:	4293      	cmp	r3, r2
 801d7aa:	f200 824d 	bhi.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d7ae:	3308      	adds	r3, #8
 801d7b0:	fa1f fa83 	uxth.w	sl, r3
 801d7b4:	f8db 0000 	ldr.w	r0, [fp]
 801d7b8:	ea4f 018a 	mov.w	r1, sl, lsl #2
 801d7bc:	f002 ff36 	bl	802062c <realloc>
 801d7c0:	2800      	cmp	r0, #0
 801d7c2:	f000 8241 	beq.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d7c6:	f8cb 0000 	str.w	r0, [fp]
 801d7ca:	f8ab a004 	strh.w	sl, [fp, #4]
 801d7ce:	f8db 3000 	ldr.w	r3, [fp]
 801d7d2:	f109 0201 	add.w	r2, r9, #1
 801d7d6:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801d7da:	46aa      	mov	sl, r5
 801d7dc:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d7e0:	4635      	mov	r5, r6
 801d7e2:	f04f 0920 	mov.w	r9, #32
 801d7e6:	2300      	movs	r3, #0
 801d7e8:	6822      	ldr	r2, [r4, #0]
 801d7ea:	499e      	ldr	r1, [pc, #632]	@ (801da64 <__ssvfiscanf_r+0xc44>)
 801d7ec:	7812      	ldrb	r2, [r2, #0]
 801d7ee:	5c8a      	ldrb	r2, [r1, r2]
 801d7f0:	0711      	lsls	r1, r2, #28
 801d7f2:	d43c      	bmi.n	801d86e <__ssvfiscanf_r+0xa4e>
 801d7f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d7f6:	2a00      	cmp	r2, #0
 801d7f8:	d039      	beq.n	801d86e <__ssvfiscanf_r+0xa4e>
 801d7fa:	613b      	str	r3, [r7, #16]
 801d7fc:	f001 fcfc 	bl	801f1f8 <__locale_mb_cur_max>
 801d800:	693b      	ldr	r3, [r7, #16]
 801d802:	4298      	cmp	r0, r3
 801d804:	f43f abc3 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d808:	1c5a      	adds	r2, r3, #1
 801d80a:	613a      	str	r2, [r7, #16]
 801d80c:	6822      	ldr	r2, [r4, #0]
 801d80e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801d812:	f812 0b01 	ldrb.w	r0, [r2], #1
 801d816:	54c8      	strb	r0, [r1, r3]
 801d818:	6863      	ldr	r3, [r4, #4]
 801d81a:	3b01      	subs	r3, #1
 801d81c:	e9c4 2300 	strd	r2, r3, [r4]
 801d820:	69bb      	ldr	r3, [r7, #24]
 801d822:	2b03      	cmp	r3, #3
 801d824:	d102      	bne.n	801d82c <__ssvfiscanf_r+0xa0c>
 801d826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d828:	2b04      	cmp	r3, #4
 801d82a:	d005      	beq.n	801d838 <__ssvfiscanf_r+0xa18>
 801d82c:	2208      	movs	r2, #8
 801d82e:	2100      	movs	r1, #0
 801d830:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 801d834:	f7fe f98c 	bl	801bb50 <memset>
 801d838:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801d83c:	9300      	str	r3, [sp, #0]
 801d83e:	693b      	ldr	r3, [r7, #16]
 801d840:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d842:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801d846:	4629      	mov	r1, r5
 801d848:	f003 fa52 	bl	8020cf0 <_mbrtowc_r>
 801d84c:	4603      	mov	r3, r0
 801d84e:	61b8      	str	r0, [r7, #24]
 801d850:	1c58      	adds	r0, r3, #1
 801d852:	f43f ab9c 	beq.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d856:	bb0b      	cbnz	r3, 801d89c <__ssvfiscanf_r+0xa7c>
 801d858:	602b      	str	r3, [r5, #0]
 801d85a:	6828      	ldr	r0, [r5, #0]
 801d85c:	f003 fa62 	bl	8020d24 <iswspace>
 801d860:	4603      	mov	r3, r0
 801d862:	2800      	cmp	r0, #0
 801d864:	d037      	beq.n	801d8d6 <__ssvfiscanf_r+0xab6>
 801d866:	693a      	ldr	r2, [r7, #16]
 801d868:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801d86c:	bb4a      	cbnz	r2, 801d8c2 <__ssvfiscanf_r+0xaa2>
 801d86e:	f1b8 0f00 	cmp.w	r8, #0
 801d872:	f47f aaf6 	bne.w	801ce62 <__ssvfiscanf_r+0x42>
 801d876:	f8c5 8000 	str.w	r8, [r5]
 801d87a:	f1ba 0f00 	cmp.w	sl, #0
 801d87e:	f43f ad34 	beq.w	801d2ea <__ssvfiscanf_r+0x4ca>
 801d882:	1ba9      	subs	r1, r5, r6
 801d884:	e655      	b.n	801d532 <__ssvfiscanf_r+0x712>
 801d886:	f04f 0900 	mov.w	r9, #0
 801d88a:	464e      	mov	r6, r9
 801d88c:	46ca      	mov	sl, r9
 801d88e:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 801d892:	e7a8      	b.n	801d7e6 <__ssvfiscanf_r+0x9c6>
 801d894:	46c1      	mov	r9, r8
 801d896:	4646      	mov	r6, r8
 801d898:	46c2      	mov	sl, r8
 801d89a:	e7a4      	b.n	801d7e6 <__ssvfiscanf_r+0x9c6>
 801d89c:	69bb      	ldr	r3, [r7, #24]
 801d89e:	3302      	adds	r3, #2
 801d8a0:	d1db      	bne.n	801d85a <__ssvfiscanf_r+0xa3a>
 801d8a2:	693b      	ldr	r3, [r7, #16]
 801d8a4:	6862      	ldr	r2, [r4, #4]
 801d8a6:	2a00      	cmp	r2, #0
 801d8a8:	dc9e      	bgt.n	801d7e8 <__ssvfiscanf_r+0x9c8>
 801d8aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d8ac:	613b      	str	r3, [r7, #16]
 801d8ae:	4621      	mov	r1, r4
 801d8b0:	f7ff fa5f 	bl	801cd72 <__ssrefill_r>
 801d8b4:	693b      	ldr	r3, [r7, #16]
 801d8b6:	2800      	cmp	r0, #0
 801d8b8:	d096      	beq.n	801d7e8 <__ssvfiscanf_r+0x9c8>
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	f47f ab67 	bne.w	801cf8e <__ssvfiscanf_r+0x16e>
 801d8c0:	e7d5      	b.n	801d86e <__ssvfiscanf_r+0xa4e>
 801d8c2:	693a      	ldr	r2, [r7, #16]
 801d8c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d8c6:	3a01      	subs	r2, #1
 801d8c8:	613a      	str	r2, [r7, #16]
 801d8ca:	6939      	ldr	r1, [r7, #16]
 801d8cc:	4622      	mov	r2, r4
 801d8ce:	5c59      	ldrb	r1, [r3, r1]
 801d8d0:	f7ff fa14 	bl	801ccfc <_sungetc_r>
 801d8d4:	e7c7      	b.n	801d866 <__ssvfiscanf_r+0xa46>
 801d8d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d8d8:	6939      	ldr	r1, [r7, #16]
 801d8da:	440a      	add	r2, r1
 801d8dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801d8de:	69ba      	ldr	r2, [r7, #24]
 801d8e0:	2a03      	cmp	r2, #3
 801d8e2:	d102      	bne.n	801d8ea <__ssvfiscanf_r+0xaca>
 801d8e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801d8e6:	2a04      	cmp	r2, #4
 801d8e8:	d002      	beq.n	801d8f0 <__ssvfiscanf_r+0xad0>
 801d8ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d8ec:	3a01      	subs	r2, #1
 801d8ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 801d8f0:	f1b8 0f00 	cmp.w	r8, #0
 801d8f4:	d1d6      	bne.n	801d8a4 <__ssvfiscanf_r+0xa84>
 801d8f6:	3504      	adds	r5, #4
 801d8f8:	f1ba 0f00 	cmp.w	sl, #0
 801d8fc:	d015      	beq.n	801d92a <__ssvfiscanf_r+0xb0a>
 801d8fe:	1bab      	subs	r3, r5, r6
 801d900:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 801d904:	d80f      	bhi.n	801d926 <__ssvfiscanf_r+0xb06>
 801d906:	4630      	mov	r0, r6
 801d908:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801d90c:	613b      	str	r3, [r7, #16]
 801d90e:	f002 fe8d 	bl	802062c <realloc>
 801d912:	4606      	mov	r6, r0
 801d914:	2800      	cmp	r0, #0
 801d916:	f43f abd3 	beq.w	801d0c0 <__ssvfiscanf_r+0x2a0>
 801d91a:	693b      	ldr	r3, [r7, #16]
 801d91c:	f8ca 0000 	str.w	r0, [sl]
 801d920:	18c5      	adds	r5, r0, r3
 801d922:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d926:	4643      	mov	r3, r8
 801d928:	e7bc      	b.n	801d8a4 <__ssvfiscanf_r+0xa84>
 801d92a:	4653      	mov	r3, sl
 801d92c:	e7ba      	b.n	801d8a4 <__ssvfiscanf_r+0xa84>
 801d92e:	f1b8 0f00 	cmp.w	r8, #0
 801d932:	d019      	beq.n	801d968 <__ssvfiscanf_r+0xb48>
 801d934:	4e4b      	ldr	r6, [pc, #300]	@ (801da64 <__ssvfiscanf_r+0xc44>)
 801d936:	6823      	ldr	r3, [r4, #0]
 801d938:	781a      	ldrb	r2, [r3, #0]
 801d93a:	5cb2      	ldrb	r2, [r6, r2]
 801d93c:	0712      	lsls	r2, r2, #28
 801d93e:	f53f acfc 	bmi.w	801d33a <__ssvfiscanf_r+0x51a>
 801d942:	3301      	adds	r3, #1
 801d944:	6862      	ldr	r2, [r4, #4]
 801d946:	6023      	str	r3, [r4, #0]
 801d948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d94a:	3501      	adds	r5, #1
 801d94c:	3a01      	subs	r2, #1
 801d94e:	429d      	cmp	r5, r3
 801d950:	6062      	str	r2, [r4, #4]
 801d952:	f43f acf2 	beq.w	801d33a <__ssvfiscanf_r+0x51a>
 801d956:	2a00      	cmp	r2, #0
 801d958:	dced      	bgt.n	801d936 <__ssvfiscanf_r+0xb16>
 801d95a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d95c:	4621      	mov	r1, r4
 801d95e:	f7ff fa08 	bl	801cd72 <__ssrefill_r>
 801d962:	2800      	cmp	r0, #0
 801d964:	d0e7      	beq.n	801d936 <__ssvfiscanf_r+0xb16>
 801d966:	e4e8      	b.n	801d33a <__ssvfiscanf_r+0x51a>
 801d968:	6a3b      	ldr	r3, [r7, #32]
 801d96a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 801d96e:	f853 5b04 	ldr.w	r5, [r3], #4
 801d972:	623b      	str	r3, [r7, #32]
 801d974:	d074      	beq.n	801da60 <__ssvfiscanf_r+0xc40>
 801d976:	2d00      	cmp	r5, #0
 801d978:	f43f aa9f 	beq.w	801ceba <__ssvfiscanf_r+0x9a>
 801d97c:	2020      	movs	r0, #32
 801d97e:	f7fd fc81 	bl	801b284 <malloc>
 801d982:	4680      	mov	r8, r0
 801d984:	2800      	cmp	r0, #0
 801d986:	f43f ab07 	beq.w	801cf98 <__ssvfiscanf_r+0x178>
 801d98a:	f8bb 9006 	ldrh.w	r9, [fp, #6]
 801d98e:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 801d992:	6028      	str	r0, [r5, #0]
 801d994:	45b1      	cmp	r9, r6
 801d996:	d312      	bcc.n	801d9be <__ssvfiscanf_r+0xb9e>
 801d998:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 801d99c:	429e      	cmp	r6, r3
 801d99e:	f200 8153 	bhi.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d9a2:	3608      	adds	r6, #8
 801d9a4:	b2b6      	uxth	r6, r6
 801d9a6:	f8db 0000 	ldr.w	r0, [fp]
 801d9aa:	00b1      	lsls	r1, r6, #2
 801d9ac:	f002 fe3e 	bl	802062c <realloc>
 801d9b0:	2800      	cmp	r0, #0
 801d9b2:	f000 8149 	beq.w	801dc48 <__ssvfiscanf_r+0xe28>
 801d9b6:	f8cb 0000 	str.w	r0, [fp]
 801d9ba:	f8ab 6004 	strh.w	r6, [fp, #4]
 801d9be:	f8db 3000 	ldr.w	r3, [fp]
 801d9c2:	f109 0201 	add.w	r2, r9, #1
 801d9c6:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 801d9ca:	46aa      	mov	sl, r5
 801d9cc:	f8ab 2006 	strh.w	r2, [fp, #6]
 801d9d0:	4645      	mov	r5, r8
 801d9d2:	2620      	movs	r6, #32
 801d9d4:	46a9      	mov	r9, r5
 801d9d6:	6823      	ldr	r3, [r4, #0]
 801d9d8:	4922      	ldr	r1, [pc, #136]	@ (801da64 <__ssvfiscanf_r+0xc44>)
 801d9da:	781a      	ldrb	r2, [r3, #0]
 801d9dc:	5c8a      	ldrb	r2, [r1, r2]
 801d9de:	0710      	lsls	r0, r2, #28
 801d9e0:	d428      	bmi.n	801da34 <__ssvfiscanf_r+0xc14>
 801d9e2:	6862      	ldr	r2, [r4, #4]
 801d9e4:	3a01      	subs	r2, #1
 801d9e6:	6062      	str	r2, [r4, #4]
 801d9e8:	1c5a      	adds	r2, r3, #1
 801d9ea:	6022      	str	r2, [r4, #0]
 801d9ec:	781b      	ldrb	r3, [r3, #0]
 801d9ee:	f805 3b01 	strb.w	r3, [r5], #1
 801d9f2:	f1ba 0f00 	cmp.w	sl, #0
 801d9f6:	d010      	beq.n	801da1a <__ssvfiscanf_r+0xbfa>
 801d9f8:	eba5 0809 	sub.w	r8, r5, r9
 801d9fc:	45b0      	cmp	r8, r6
 801d9fe:	d30c      	bcc.n	801da1a <__ssvfiscanf_r+0xbfa>
 801da00:	0076      	lsls	r6, r6, #1
 801da02:	4648      	mov	r0, r9
 801da04:	4631      	mov	r1, r6
 801da06:	f002 fe11 	bl	802062c <realloc>
 801da0a:	4681      	mov	r9, r0
 801da0c:	2800      	cmp	r0, #0
 801da0e:	f43f aac3 	beq.w	801cf98 <__ssvfiscanf_r+0x178>
 801da12:	eb00 0508 	add.w	r5, r0, r8
 801da16:	f8ca 0000 	str.w	r0, [sl]
 801da1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da1c:	3b01      	subs	r3, #1
 801da1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801da20:	d008      	beq.n	801da34 <__ssvfiscanf_r+0xc14>
 801da22:	6863      	ldr	r3, [r4, #4]
 801da24:	2b00      	cmp	r3, #0
 801da26:	dcd6      	bgt.n	801d9d6 <__ssvfiscanf_r+0xbb6>
 801da28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801da2a:	4621      	mov	r1, r4
 801da2c:	f7ff f9a1 	bl	801cd72 <__ssrefill_r>
 801da30:	2800      	cmp	r0, #0
 801da32:	d0d0      	beq.n	801d9d6 <__ssvfiscanf_r+0xbb6>
 801da34:	2300      	movs	r3, #0
 801da36:	702b      	strb	r3, [r5, #0]
 801da38:	eba5 0509 	sub.w	r5, r5, r9
 801da3c:	f1ba 0f00 	cmp.w	sl, #0
 801da40:	f43f acce 	beq.w	801d3e0 <__ssvfiscanf_r+0x5c0>
 801da44:	1c69      	adds	r1, r5, #1
 801da46:	428e      	cmp	r6, r1
 801da48:	f67f acca 	bls.w	801d3e0 <__ssvfiscanf_r+0x5c0>
 801da4c:	f8da 0000 	ldr.w	r0, [sl]
 801da50:	f002 fdec 	bl	802062c <realloc>
 801da54:	2800      	cmp	r0, #0
 801da56:	f43f acc3 	beq.w	801d3e0 <__ssvfiscanf_r+0x5c0>
 801da5a:	f8ca 0000 	str.w	r0, [sl]
 801da5e:	e4bf      	b.n	801d3e0 <__ssvfiscanf_r+0x5c0>
 801da60:	46b2      	mov	sl, r6
 801da62:	e7b7      	b.n	801d9d4 <__ssvfiscanf_r+0xbb4>
 801da64:	08022e9f 	.word	0x08022e9f
 801da68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801da6a:	3b01      	subs	r3, #1
 801da6c:	2b26      	cmp	r3, #38	@ 0x26
 801da6e:	bf81      	itttt	hi
 801da70:	6abb      	ldrhi	r3, [r7, #40]	@ 0x28
 801da72:	f1a3 0827 	subhi.w	r8, r3, #39	@ 0x27
 801da76:	2327      	movhi	r3, #39	@ 0x27
 801da78:	62bb      	strhi	r3, [r7, #40]	@ 0x28
 801da7a:	bf98      	it	ls
 801da7c:	f04f 0800 	movls.w	r8, #0
 801da80:	f446 6658 	orr.w	r6, r6, #3456	@ 0xd80
 801da84:	f04f 0900 	mov.w	r9, #0
 801da88:	f107 0a48 	add.w	sl, r7, #72	@ 0x48
 801da8c:	6822      	ldr	r2, [r4, #0]
 801da8e:	7813      	ldrb	r3, [r2, #0]
 801da90:	2b39      	cmp	r3, #57	@ 0x39
 801da92:	d80f      	bhi.n	801dab4 <__ssvfiscanf_r+0xc94>
 801da94:	2b2a      	cmp	r3, #42	@ 0x2a
 801da96:	d91a      	bls.n	801dace <__ssvfiscanf_r+0xcae>
 801da98:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801da9c:	290e      	cmp	r1, #14
 801da9e:	d816      	bhi.n	801dace <__ssvfiscanf_r+0xcae>
 801daa0:	e8df f001 	tbb	[pc, r1]
 801daa4:	15771577 	.word	0x15771577
 801daa8:	67673e15 	.word	0x67673e15
 801daac:	67676767 	.word	0x67676767
 801dab0:	6f67      	.short	0x6f67
 801dab2:	6f          	.byte	0x6f
 801dab3:	00          	.byte	0x00
 801dab4:	2b66      	cmp	r3, #102	@ 0x66
 801dab6:	d831      	bhi.n	801db1c <__ssvfiscanf_r+0xcfc>
 801dab8:	2b60      	cmp	r3, #96	@ 0x60
 801daba:	d803      	bhi.n	801dac4 <__ssvfiscanf_r+0xca4>
 801dabc:	2b46      	cmp	r3, #70	@ 0x46
 801dabe:	d804      	bhi.n	801daca <__ssvfiscanf_r+0xcaa>
 801dac0:	2b40      	cmp	r3, #64	@ 0x40
 801dac2:	d904      	bls.n	801dace <__ssvfiscanf_r+0xcae>
 801dac4:	6979      	ldr	r1, [r7, #20]
 801dac6:	290a      	cmp	r1, #10
 801dac8:	e061      	b.n	801db8e <__ssvfiscanf_r+0xd6e>
 801daca:	2b58      	cmp	r3, #88	@ 0x58
 801dacc:	d066      	beq.n	801db9c <__ssvfiscanf_r+0xd7c>
 801dace:	05f1      	lsls	r1, r6, #23
 801dad0:	d511      	bpl.n	801daf6 <__ssvfiscanf_r+0xcd6>
 801dad2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801dad6:	459a      	cmp	sl, r3
 801dad8:	d908      	bls.n	801daec <__ssvfiscanf_r+0xccc>
 801dada:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 801dade:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dae0:	4622      	mov	r2, r4
 801dae2:	f7ff f90b 	bl	801ccfc <_sungetc_r>
 801dae6:	f10a 38ff 	add.w	r8, sl, #4294967295
 801daea:	46c2      	mov	sl, r8
 801daec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801daf0:	459a      	cmp	sl, r3
 801daf2:	f43f a9e2 	beq.w	801ceba <__ssvfiscanf_r+0x9a>
 801daf6:	f016 0210 	ands.w	r2, r6, #16
 801dafa:	d16b      	bne.n	801dbd4 <__ssvfiscanf_r+0xdb4>
 801dafc:	697b      	ldr	r3, [r7, #20]
 801dafe:	f88a 2000 	strb.w	r2, [sl]
 801db02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801db04:	68fd      	ldr	r5, [r7, #12]
 801db06:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801db0a:	47a8      	blx	r5
 801db0c:	6a3b      	ldr	r3, [r7, #32]
 801db0e:	06b2      	lsls	r2, r6, #26
 801db10:	f103 0804 	add.w	r8, r3, #4
 801db14:	d555      	bpl.n	801dbc2 <__ssvfiscanf_r+0xda2>
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	6018      	str	r0, [r3, #0]
 801db1a:	e057      	b.n	801dbcc <__ssvfiscanf_r+0xdac>
 801db1c:	2b78      	cmp	r3, #120	@ 0x78
 801db1e:	e7d5      	b.n	801dacc <__ssvfiscanf_r+0xcac>
 801db20:	0531      	lsls	r1, r6, #20
 801db22:	d509      	bpl.n	801db38 <__ssvfiscanf_r+0xd18>
 801db24:	6979      	ldr	r1, [r7, #20]
 801db26:	b919      	cbnz	r1, 801db30 <__ssvfiscanf_r+0xd10>
 801db28:	2108      	movs	r1, #8
 801db2a:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 801db2e:	6179      	str	r1, [r7, #20]
 801db30:	0575      	lsls	r5, r6, #21
 801db32:	d506      	bpl.n	801db42 <__ssvfiscanf_r+0xd22>
 801db34:	f426 66b0 	bic.w	r6, r6, #1408	@ 0x580
 801db38:	4655      	mov	r5, sl
 801db3a:	f805 3b01 	strb.w	r3, [r5], #1
 801db3e:	46aa      	mov	sl, r5
 801db40:	e00b      	b.n	801db5a <__ssvfiscanf_r+0xd3a>
 801db42:	f426 7660 	bic.w	r6, r6, #896	@ 0x380
 801db46:	f1b8 0f00 	cmp.w	r8, #0
 801db4a:	d004      	beq.n	801db56 <__ssvfiscanf_r+0xd36>
 801db4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db4e:	3301      	adds	r3, #1
 801db50:	f108 38ff 	add.w	r8, r8, #4294967295
 801db54:	62bb      	str	r3, [r7, #40]	@ 0x28
 801db56:	f109 0901 	add.w	r9, r9, #1
 801db5a:	6863      	ldr	r3, [r4, #4]
 801db5c:	3b01      	subs	r3, #1
 801db5e:	2b00      	cmp	r3, #0
 801db60:	6063      	str	r3, [r4, #4]
 801db62:	dd27      	ble.n	801dbb4 <__ssvfiscanf_r+0xd94>
 801db64:	3201      	adds	r2, #1
 801db66:	6022      	str	r2, [r4, #0]
 801db68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db6a:	3b01      	subs	r3, #1
 801db6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801db6e:	d18d      	bne.n	801da8c <__ssvfiscanf_r+0xc6c>
 801db70:	e7ad      	b.n	801dace <__ssvfiscanf_r+0xcae>
 801db72:	6978      	ldr	r0, [r7, #20]
 801db74:	4936      	ldr	r1, [pc, #216]	@ (801dc50 <__ssvfiscanf_r+0xe30>)
 801db76:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801db7a:	6179      	str	r1, [r7, #20]
 801db7c:	f426 6638 	bic.w	r6, r6, #2944	@ 0xb80
 801db80:	e7da      	b.n	801db38 <__ssvfiscanf_r+0xd18>
 801db82:	6978      	ldr	r0, [r7, #20]
 801db84:	4932      	ldr	r1, [pc, #200]	@ (801dc50 <__ssvfiscanf_r+0xe30>)
 801db86:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 801db8a:	6179      	str	r1, [r7, #20]
 801db8c:	2908      	cmp	r1, #8
 801db8e:	dcf5      	bgt.n	801db7c <__ssvfiscanf_r+0xd5c>
 801db90:	e79d      	b.n	801dace <__ssvfiscanf_r+0xcae>
 801db92:	0630      	lsls	r0, r6, #24
 801db94:	d59b      	bpl.n	801dace <__ssvfiscanf_r+0xcae>
 801db96:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 801db9a:	e7cd      	b.n	801db38 <__ssvfiscanf_r+0xd18>
 801db9c:	f406 61c0 	and.w	r1, r6, #1536	@ 0x600
 801dba0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801dba4:	d193      	bne.n	801dace <__ssvfiscanf_r+0xcae>
 801dba6:	f426 7600 	bic.w	r6, r6, #512	@ 0x200
 801dbaa:	2110      	movs	r1, #16
 801dbac:	f446 66a0 	orr.w	r6, r6, #1280	@ 0x500
 801dbb0:	6179      	str	r1, [r7, #20]
 801dbb2:	e7c1      	b.n	801db38 <__ssvfiscanf_r+0xd18>
 801dbb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbb6:	4621      	mov	r1, r4
 801dbb8:	f7ff f8db 	bl	801cd72 <__ssrefill_r>
 801dbbc:	2800      	cmp	r0, #0
 801dbbe:	d0d3      	beq.n	801db68 <__ssvfiscanf_r+0xd48>
 801dbc0:	e785      	b.n	801dace <__ssvfiscanf_r+0xcae>
 801dbc2:	0733      	lsls	r3, r6, #28
 801dbc4:	d50d      	bpl.n	801dbe2 <__ssvfiscanf_r+0xdc2>
 801dbc6:	6a3b      	ldr	r3, [r7, #32]
 801dbc8:	681b      	ldr	r3, [r3, #0]
 801dbca:	7018      	strb	r0, [r3, #0]
 801dbcc:	69fb      	ldr	r3, [r7, #28]
 801dbce:	3301      	adds	r3, #1
 801dbd0:	e9c7 3807 	strd	r3, r8, [r7, #28]
 801dbd4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801dbd8:	ebaa 0503 	sub.w	r5, sl, r3
 801dbdc:	444d      	add	r5, r9
 801dbde:	f7ff bbac 	b.w	801d33a <__ssvfiscanf_r+0x51a>
 801dbe2:	0775      	lsls	r5, r6, #29
 801dbe4:	d503      	bpl.n	801dbee <__ssvfiscanf_r+0xdce>
 801dbe6:	6a3b      	ldr	r3, [r7, #32]
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	8018      	strh	r0, [r3, #0]
 801dbec:	e7ee      	b.n	801dbcc <__ssvfiscanf_r+0xdac>
 801dbee:	f016 0201 	ands.w	r2, r6, #1
 801dbf2:	d001      	beq.n	801dbf8 <__ssvfiscanf_r+0xdd8>
 801dbf4:	6a3b      	ldr	r3, [r7, #32]
 801dbf6:	e78e      	b.n	801db16 <__ssvfiscanf_r+0xcf6>
 801dbf8:	07b1      	lsls	r1, r6, #30
 801dbfa:	d5fb      	bpl.n	801dbf4 <__ssvfiscanf_r+0xdd4>
 801dbfc:	4b15      	ldr	r3, [pc, #84]	@ (801dc54 <__ssvfiscanf_r+0xe34>)
 801dbfe:	68f9      	ldr	r1, [r7, #12]
 801dc00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dc02:	4299      	cmp	r1, r3
 801dc04:	697b      	ldr	r3, [r7, #20]
 801dc06:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 801dc0a:	d106      	bne.n	801dc1a <__ssvfiscanf_r+0xdfa>
 801dc0c:	f003 f86e 	bl	8020cec <_strtoull_r>
 801dc10:	6a3b      	ldr	r3, [r7, #32]
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	e9c3 0100 	strd	r0, r1, [r3]
 801dc18:	e7d8      	b.n	801dbcc <__ssvfiscanf_r+0xdac>
 801dc1a:	f002 ffcf 	bl	8020bbc <_strtoll_r>
 801dc1e:	e7f7      	b.n	801dc10 <__ssvfiscanf_r+0xdf0>
 801dc20:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801dc24:	6818      	ldr	r0, [r3, #0]
 801dc26:	f7fd fb35 	bl	801b294 <free>
 801dc2a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801dc2e:	3401      	adds	r4, #1
 801dc30:	601e      	str	r6, [r3, #0]
 801dc32:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 801dc36:	f8db 5000 	ldr.w	r5, [fp]
 801dc3a:	42a3      	cmp	r3, r4
 801dc3c:	dcf0      	bgt.n	801dc20 <__ssvfiscanf_r+0xe00>
 801dc3e:	f04f 33ff 	mov.w	r3, #4294967295
 801dc42:	61fb      	str	r3, [r7, #28]
 801dc44:	f7ff ba46 	b.w	801d0d4 <__ssvfiscanf_r+0x2b4>
 801dc48:	2400      	movs	r4, #0
 801dc4a:	4626      	mov	r6, r4
 801dc4c:	e7f1      	b.n	801dc32 <__ssvfiscanf_r+0xe12>
 801dc4e:	bf00      	nop
 801dc50:	08022fa0 	.word	0x08022fa0
 801dc54:	0801cc91 	.word	0x0801cc91

0801dc58 <_svfprintf_r>:
 801dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc5c:	b0d3      	sub	sp, #332	@ 0x14c
 801dc5e:	468b      	mov	fp, r1
 801dc60:	4691      	mov	r9, r2
 801dc62:	461e      	mov	r6, r3
 801dc64:	9003      	str	r0, [sp, #12]
 801dc66:	f001 facd 	bl	801f204 <_localeconv_r>
 801dc6a:	6803      	ldr	r3, [r0, #0]
 801dc6c:	9316      	str	r3, [sp, #88]	@ 0x58
 801dc6e:	4618      	mov	r0, r3
 801dc70:	f7e2 fab8 	bl	80001e4 <strlen>
 801dc74:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801dc78:	900d      	str	r0, [sp, #52]	@ 0x34
 801dc7a:	061b      	lsls	r3, r3, #24
 801dc7c:	d515      	bpl.n	801dcaa <_svfprintf_r+0x52>
 801dc7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 801dc82:	b993      	cbnz	r3, 801dcaa <_svfprintf_r+0x52>
 801dc84:	9803      	ldr	r0, [sp, #12]
 801dc86:	2140      	movs	r1, #64	@ 0x40
 801dc88:	f7fd fb0c 	bl	801b2a4 <_malloc_r>
 801dc8c:	f8cb 0000 	str.w	r0, [fp]
 801dc90:	f8cb 0010 	str.w	r0, [fp, #16]
 801dc94:	b930      	cbnz	r0, 801dca4 <_svfprintf_r+0x4c>
 801dc96:	9a03      	ldr	r2, [sp, #12]
 801dc98:	230c      	movs	r3, #12
 801dc9a:	6013      	str	r3, [r2, #0]
 801dc9c:	f04f 33ff 	mov.w	r3, #4294967295
 801dca0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dca2:	e1f7      	b.n	801e094 <_svfprintf_r+0x43c>
 801dca4:	2340      	movs	r3, #64	@ 0x40
 801dca6:	f8cb 3014 	str.w	r3, [fp, #20]
 801dcaa:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 801def8 <_svfprintf_r+0x2a0>
 801dcae:	2300      	movs	r3, #0
 801dcb0:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801dcb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801dcb8:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 801dcbc:	ac29      	add	r4, sp, #164	@ 0xa4
 801dcbe:	9426      	str	r4, [sp, #152]	@ 0x98
 801dcc0:	9304      	str	r3, [sp, #16]
 801dcc2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dcc4:	9312      	str	r3, [sp, #72]	@ 0x48
 801dcc6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dcc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dcca:	464b      	mov	r3, r9
 801dccc:	461d      	mov	r5, r3
 801dcce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dcd2:	b10a      	cbz	r2, 801dcd8 <_svfprintf_r+0x80>
 801dcd4:	2a25      	cmp	r2, #37	@ 0x25
 801dcd6:	d1f9      	bne.n	801dccc <_svfprintf_r+0x74>
 801dcd8:	ebb5 0709 	subs.w	r7, r5, r9
 801dcdc:	d00d      	beq.n	801dcfa <_svfprintf_r+0xa2>
 801dcde:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dce0:	443b      	add	r3, r7
 801dce2:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dce4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dce6:	3301      	adds	r3, #1
 801dce8:	2b07      	cmp	r3, #7
 801dcea:	e9c4 9700 	strd	r9, r7, [r4]
 801dcee:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dcf0:	dc75      	bgt.n	801ddde <_svfprintf_r+0x186>
 801dcf2:	3408      	adds	r4, #8
 801dcf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcf6:	443b      	add	r3, r7
 801dcf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dcfa:	782b      	ldrb	r3, [r5, #0]
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	f001 8148 	beq.w	801ef92 <_svfprintf_r+0x133a>
 801dd02:	2200      	movs	r2, #0
 801dd04:	1c6b      	adds	r3, r5, #1
 801dd06:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801dd0a:	f04f 38ff 	mov.w	r8, #4294967295
 801dd0e:	920e      	str	r2, [sp, #56]	@ 0x38
 801dd10:	4615      	mov	r5, r2
 801dd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd16:	9206      	str	r2, [sp, #24]
 801dd18:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd1a:	9b06      	ldr	r3, [sp, #24]
 801dd1c:	3b20      	subs	r3, #32
 801dd1e:	2b5a      	cmp	r3, #90	@ 0x5a
 801dd20:	f200 85a4 	bhi.w	801e86c <_svfprintf_r+0xc14>
 801dd24:	e8df f013 	tbh	[pc, r3, lsl #1]
 801dd28:	05a2009d 	.word	0x05a2009d
 801dd2c:	00a505a2 	.word	0x00a505a2
 801dd30:	05a205a2 	.word	0x05a205a2
 801dd34:	008505a2 	.word	0x008505a2
 801dd38:	05a205a2 	.word	0x05a205a2
 801dd3c:	00b200a8 	.word	0x00b200a8
 801dd40:	00af05a2 	.word	0x00af05a2
 801dd44:	05a200b4 	.word	0x05a200b4
 801dd48:	00d100ce 	.word	0x00d100ce
 801dd4c:	00d100d1 	.word	0x00d100d1
 801dd50:	00d100d1 	.word	0x00d100d1
 801dd54:	00d100d1 	.word	0x00d100d1
 801dd58:	00d100d1 	.word	0x00d100d1
 801dd5c:	05a205a2 	.word	0x05a205a2
 801dd60:	05a205a2 	.word	0x05a205a2
 801dd64:	05a205a2 	.word	0x05a205a2
 801dd68:	014705a2 	.word	0x014705a2
 801dd6c:	010805a2 	.word	0x010805a2
 801dd70:	0147011b 	.word	0x0147011b
 801dd74:	01470147 	.word	0x01470147
 801dd78:	05a205a2 	.word	0x05a205a2
 801dd7c:	05a205a2 	.word	0x05a205a2
 801dd80:	05a200e2 	.word	0x05a200e2
 801dd84:	049d05a2 	.word	0x049d05a2
 801dd88:	05a205a2 	.word	0x05a205a2
 801dd8c:	04e705a2 	.word	0x04e705a2
 801dd90:	050805a2 	.word	0x050805a2
 801dd94:	05a205a2 	.word	0x05a205a2
 801dd98:	05a2052a 	.word	0x05a2052a
 801dd9c:	05a205a2 	.word	0x05a205a2
 801dda0:	05a205a2 	.word	0x05a205a2
 801dda4:	05a205a2 	.word	0x05a205a2
 801dda8:	014705a2 	.word	0x014705a2
 801ddac:	010805a2 	.word	0x010805a2
 801ddb0:	0147011d 	.word	0x0147011d
 801ddb4:	01470147 	.word	0x01470147
 801ddb8:	011d00ee 	.word	0x011d00ee
 801ddbc:	05a20102 	.word	0x05a20102
 801ddc0:	05a200fb 	.word	0x05a200fb
 801ddc4:	049f047e 	.word	0x049f047e
 801ddc8:	010204d6 	.word	0x010204d6
 801ddcc:	04e705a2 	.word	0x04e705a2
 801ddd0:	050a009b 	.word	0x050a009b
 801ddd4:	05a205a2 	.word	0x05a205a2
 801ddd8:	05a20065 	.word	0x05a20065
 801dddc:	009b      	.short	0x009b
 801ddde:	9803      	ldr	r0, [sp, #12]
 801dde0:	aa26      	add	r2, sp, #152	@ 0x98
 801dde2:	4659      	mov	r1, fp
 801dde4:	f002 ffac 	bl	8020d40 <__ssprint_r>
 801dde8:	2800      	cmp	r0, #0
 801ddea:	f040 814e 	bne.w	801e08a <_svfprintf_r+0x432>
 801ddee:	ac29      	add	r4, sp, #164	@ 0xa4
 801ddf0:	e780      	b.n	801dcf4 <_svfprintf_r+0x9c>
 801ddf2:	4b43      	ldr	r3, [pc, #268]	@ (801df00 <_svfprintf_r+0x2a8>)
 801ddf4:	9319      	str	r3, [sp, #100]	@ 0x64
 801ddf6:	f015 0320 	ands.w	r3, r5, #32
 801ddfa:	f000 84c2 	beq.w	801e782 <_svfprintf_r+0xb2a>
 801ddfe:	3607      	adds	r6, #7
 801de00:	f026 0307 	bic.w	r3, r6, #7
 801de04:	461a      	mov	r2, r3
 801de06:	685f      	ldr	r7, [r3, #4]
 801de08:	f852 6b08 	ldr.w	r6, [r2], #8
 801de0c:	9207      	str	r2, [sp, #28]
 801de0e:	07eb      	lsls	r3, r5, #31
 801de10:	d50a      	bpl.n	801de28 <_svfprintf_r+0x1d0>
 801de12:	ea56 0307 	orrs.w	r3, r6, r7
 801de16:	d007      	beq.n	801de28 <_svfprintf_r+0x1d0>
 801de18:	2330      	movs	r3, #48	@ 0x30
 801de1a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 801de1e:	9b06      	ldr	r3, [sp, #24]
 801de20:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801de24:	f045 0502 	orr.w	r5, r5, #2
 801de28:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801de2c:	2302      	movs	r3, #2
 801de2e:	f000 bc28 	b.w	801e682 <_svfprintf_r+0xa2a>
 801de32:	9803      	ldr	r0, [sp, #12]
 801de34:	f001 f9e6 	bl	801f204 <_localeconv_r>
 801de38:	6843      	ldr	r3, [r0, #4]
 801de3a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801de3c:	4618      	mov	r0, r3
 801de3e:	f7e2 f9d1 	bl	80001e4 <strlen>
 801de42:	9012      	str	r0, [sp, #72]	@ 0x48
 801de44:	9803      	ldr	r0, [sp, #12]
 801de46:	f001 f9dd 	bl	801f204 <_localeconv_r>
 801de4a:	6883      	ldr	r3, [r0, #8]
 801de4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801de4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801de50:	b12b      	cbz	r3, 801de5e <_svfprintf_r+0x206>
 801de52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de54:	b11b      	cbz	r3, 801de5e <_svfprintf_r+0x206>
 801de56:	781b      	ldrb	r3, [r3, #0]
 801de58:	b10b      	cbz	r3, 801de5e <_svfprintf_r+0x206>
 801de5a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801de5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de60:	e757      	b.n	801dd12 <_svfprintf_r+0xba>
 801de62:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801de66:	2b00      	cmp	r3, #0
 801de68:	d1f9      	bne.n	801de5e <_svfprintf_r+0x206>
 801de6a:	2320      	movs	r3, #32
 801de6c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801de70:	e7f5      	b.n	801de5e <_svfprintf_r+0x206>
 801de72:	f045 0501 	orr.w	r5, r5, #1
 801de76:	e7f2      	b.n	801de5e <_svfprintf_r+0x206>
 801de78:	f856 3b04 	ldr.w	r3, [r6], #4
 801de7c:	930e      	str	r3, [sp, #56]	@ 0x38
 801de7e:	2b00      	cmp	r3, #0
 801de80:	daed      	bge.n	801de5e <_svfprintf_r+0x206>
 801de82:	425b      	negs	r3, r3
 801de84:	930e      	str	r3, [sp, #56]	@ 0x38
 801de86:	f045 0504 	orr.w	r5, r5, #4
 801de8a:	e7e8      	b.n	801de5e <_svfprintf_r+0x206>
 801de8c:	232b      	movs	r3, #43	@ 0x2b
 801de8e:	e7ed      	b.n	801de6c <_svfprintf_r+0x214>
 801de90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de96:	9206      	str	r2, [sp, #24]
 801de98:	2a2a      	cmp	r2, #42	@ 0x2a
 801de9a:	d10f      	bne.n	801debc <_svfprintf_r+0x264>
 801de9c:	f856 2b04 	ldr.w	r2, [r6], #4
 801dea0:	930c      	str	r3, [sp, #48]	@ 0x30
 801dea2:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 801dea6:	e7da      	b.n	801de5e <_svfprintf_r+0x206>
 801dea8:	fb01 2808 	mla	r8, r1, r8, r2
 801deac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801deb0:	9206      	str	r2, [sp, #24]
 801deb2:	9a06      	ldr	r2, [sp, #24]
 801deb4:	3a30      	subs	r2, #48	@ 0x30
 801deb6:	2a09      	cmp	r2, #9
 801deb8:	d9f6      	bls.n	801dea8 <_svfprintf_r+0x250>
 801deba:	e72d      	b.n	801dd18 <_svfprintf_r+0xc0>
 801debc:	f04f 0800 	mov.w	r8, #0
 801dec0:	210a      	movs	r1, #10
 801dec2:	e7f6      	b.n	801deb2 <_svfprintf_r+0x25a>
 801dec4:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 801dec8:	e7c9      	b.n	801de5e <_svfprintf_r+0x206>
 801deca:	2200      	movs	r2, #0
 801decc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dece:	920e      	str	r2, [sp, #56]	@ 0x38
 801ded0:	210a      	movs	r1, #10
 801ded2:	9a06      	ldr	r2, [sp, #24]
 801ded4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ded6:	3a30      	subs	r2, #48	@ 0x30
 801ded8:	fb01 2200 	mla	r2, r1, r0, r2
 801dedc:	920e      	str	r2, [sp, #56]	@ 0x38
 801dede:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dee2:	9206      	str	r2, [sp, #24]
 801dee4:	3a30      	subs	r2, #48	@ 0x30
 801dee6:	2a09      	cmp	r2, #9
 801dee8:	d9f3      	bls.n	801ded2 <_svfprintf_r+0x27a>
 801deea:	e715      	b.n	801dd18 <_svfprintf_r+0xc0>
 801deec:	f045 0508 	orr.w	r5, r5, #8
 801def0:	e7b5      	b.n	801de5e <_svfprintf_r+0x206>
 801def2:	bf00      	nop
 801def4:	f3af 8000 	nop.w
	...
 801df00:	08022fd2 	.word	0x08022fd2
 801df04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801df06:	781b      	ldrb	r3, [r3, #0]
 801df08:	2b68      	cmp	r3, #104	@ 0x68
 801df0a:	bf01      	itttt	eq
 801df0c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 801df0e:	3301      	addeq	r3, #1
 801df10:	930c      	streq	r3, [sp, #48]	@ 0x30
 801df12:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801df16:	bf18      	it	ne
 801df18:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 801df1c:	e79f      	b.n	801de5e <_svfprintf_r+0x206>
 801df1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801df20:	781b      	ldrb	r3, [r3, #0]
 801df22:	2b6c      	cmp	r3, #108	@ 0x6c
 801df24:	d105      	bne.n	801df32 <_svfprintf_r+0x2da>
 801df26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801df28:	3301      	adds	r3, #1
 801df2a:	930c      	str	r3, [sp, #48]	@ 0x30
 801df2c:	f045 0520 	orr.w	r5, r5, #32
 801df30:	e795      	b.n	801de5e <_svfprintf_r+0x206>
 801df32:	f045 0510 	orr.w	r5, r5, #16
 801df36:	e792      	b.n	801de5e <_svfprintf_r+0x206>
 801df38:	4632      	mov	r2, r6
 801df3a:	f852 3b04 	ldr.w	r3, [r2], #4
 801df3e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801df42:	2300      	movs	r3, #0
 801df44:	9207      	str	r2, [sp, #28]
 801df46:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801df4a:	469a      	mov	sl, r3
 801df4c:	f04f 0801 	mov.w	r8, #1
 801df50:	9310      	str	r3, [sp, #64]	@ 0x40
 801df52:	461f      	mov	r7, r3
 801df54:	9308      	str	r3, [sp, #32]
 801df56:	461e      	mov	r6, r3
 801df58:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801df5c:	e1d2      	b.n	801e304 <_svfprintf_r+0x6ac>
 801df5e:	f045 0510 	orr.w	r5, r5, #16
 801df62:	06af      	lsls	r7, r5, #26
 801df64:	d512      	bpl.n	801df8c <_svfprintf_r+0x334>
 801df66:	3607      	adds	r6, #7
 801df68:	f026 0307 	bic.w	r3, r6, #7
 801df6c:	461a      	mov	r2, r3
 801df6e:	685f      	ldr	r7, [r3, #4]
 801df70:	f852 6b08 	ldr.w	r6, [r2], #8
 801df74:	9207      	str	r2, [sp, #28]
 801df76:	2f00      	cmp	r7, #0
 801df78:	da06      	bge.n	801df88 <_svfprintf_r+0x330>
 801df7a:	4276      	negs	r6, r6
 801df7c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 801df80:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 801df84:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801df88:	2301      	movs	r3, #1
 801df8a:	e37d      	b.n	801e688 <_svfprintf_r+0xa30>
 801df8c:	4633      	mov	r3, r6
 801df8e:	06ee      	lsls	r6, r5, #27
 801df90:	f853 7b04 	ldr.w	r7, [r3], #4
 801df94:	9307      	str	r3, [sp, #28]
 801df96:	d502      	bpl.n	801df9e <_svfprintf_r+0x346>
 801df98:	463e      	mov	r6, r7
 801df9a:	17ff      	asrs	r7, r7, #31
 801df9c:	e7eb      	b.n	801df76 <_svfprintf_r+0x31e>
 801df9e:	0668      	lsls	r0, r5, #25
 801dfa0:	d503      	bpl.n	801dfaa <_svfprintf_r+0x352>
 801dfa2:	b23e      	sxth	r6, r7
 801dfa4:	f347 37c0 	sbfx	r7, r7, #15, #1
 801dfa8:	e7e5      	b.n	801df76 <_svfprintf_r+0x31e>
 801dfaa:	05a9      	lsls	r1, r5, #22
 801dfac:	d5f4      	bpl.n	801df98 <_svfprintf_r+0x340>
 801dfae:	b27e      	sxtb	r6, r7
 801dfb0:	f347 17c0 	sbfx	r7, r7, #7, #1
 801dfb4:	e7df      	b.n	801df76 <_svfprintf_r+0x31e>
 801dfb6:	3607      	adds	r6, #7
 801dfb8:	f026 0307 	bic.w	r3, r6, #7
 801dfbc:	ecb3 7b02 	vldmia	r3!, {d7}
 801dfc0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801dfc4:	9307      	str	r3, [sp, #28]
 801dfc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dfc8:	931a      	str	r3, [sp, #104]	@ 0x68
 801dfca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dfcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801dfd0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dfd2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801dfd6:	4b81      	ldr	r3, [pc, #516]	@ (801e1dc <_svfprintf_r+0x584>)
 801dfd8:	f04f 32ff 	mov.w	r2, #4294967295
 801dfdc:	f7e2 fdb6 	bl	8000b4c <__aeabi_dcmpun>
 801dfe0:	bb10      	cbnz	r0, 801e028 <_svfprintf_r+0x3d0>
 801dfe2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 801dfe6:	4b7d      	ldr	r3, [pc, #500]	@ (801e1dc <_svfprintf_r+0x584>)
 801dfe8:	f04f 32ff 	mov.w	r2, #4294967295
 801dfec:	f7e2 fd90 	bl	8000b10 <__aeabi_dcmple>
 801dff0:	b9d0      	cbnz	r0, 801e028 <_svfprintf_r+0x3d0>
 801dff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801dff6:	2200      	movs	r2, #0
 801dff8:	2300      	movs	r3, #0
 801dffa:	f7e2 fd7f 	bl	8000afc <__aeabi_dcmplt>
 801dffe:	b110      	cbz	r0, 801e006 <_svfprintf_r+0x3ae>
 801e000:	232d      	movs	r3, #45	@ 0x2d
 801e002:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e006:	4a76      	ldr	r2, [pc, #472]	@ (801e1e0 <_svfprintf_r+0x588>)
 801e008:	4b76      	ldr	r3, [pc, #472]	@ (801e1e4 <_svfprintf_r+0x58c>)
 801e00a:	9906      	ldr	r1, [sp, #24]
 801e00c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 801e010:	2947      	cmp	r1, #71	@ 0x47
 801e012:	bfd4      	ite	le
 801e014:	4691      	movle	r9, r2
 801e016:	4699      	movgt	r9, r3
 801e018:	f04f 0a00 	mov.w	sl, #0
 801e01c:	f04f 0803 	mov.w	r8, #3
 801e020:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 801e024:	f000 bfec 	b.w	801f000 <_svfprintf_r+0x13a8>
 801e028:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801e02c:	4610      	mov	r0, r2
 801e02e:	4619      	mov	r1, r3
 801e030:	f7e2 fd8c 	bl	8000b4c <__aeabi_dcmpun>
 801e034:	4682      	mov	sl, r0
 801e036:	b140      	cbz	r0, 801e04a <_svfprintf_r+0x3f2>
 801e038:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e03a:	4a6b      	ldr	r2, [pc, #428]	@ (801e1e8 <_svfprintf_r+0x590>)
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	bfbc      	itt	lt
 801e040:	232d      	movlt	r3, #45	@ 0x2d
 801e042:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 801e046:	4b69      	ldr	r3, [pc, #420]	@ (801e1ec <_svfprintf_r+0x594>)
 801e048:	e7df      	b.n	801e00a <_svfprintf_r+0x3b2>
 801e04a:	9b06      	ldr	r3, [sp, #24]
 801e04c:	2b61      	cmp	r3, #97	@ 0x61
 801e04e:	d025      	beq.n	801e09c <_svfprintf_r+0x444>
 801e050:	2b41      	cmp	r3, #65	@ 0x41
 801e052:	d125      	bne.n	801e0a0 <_svfprintf_r+0x448>
 801e054:	2358      	movs	r3, #88	@ 0x58
 801e056:	2230      	movs	r2, #48	@ 0x30
 801e058:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 801e05c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 801e060:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 801e064:	f045 0502 	orr.w	r5, r5, #2
 801e068:	f340 80a5 	ble.w	801e1b6 <_svfprintf_r+0x55e>
 801e06c:	9803      	ldr	r0, [sp, #12]
 801e06e:	f108 0101 	add.w	r1, r8, #1
 801e072:	f7fd f917 	bl	801b2a4 <_malloc_r>
 801e076:	4681      	mov	r9, r0
 801e078:	2800      	cmp	r0, #0
 801e07a:	f040 80a1 	bne.w	801e1c0 <_svfprintf_r+0x568>
 801e07e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801e082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e086:	f8ab 300c 	strh.w	r3, [fp, #12]
 801e08a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801e08e:	065b      	lsls	r3, r3, #25
 801e090:	f53f ae04 	bmi.w	801dc9c <_svfprintf_r+0x44>
 801e094:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801e096:	b053      	add	sp, #332	@ 0x14c
 801e098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e09c:	2378      	movs	r3, #120	@ 0x78
 801e09e:	e7da      	b.n	801e056 <_svfprintf_r+0x3fe>
 801e0a0:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e0a4:	f000 808e 	beq.w	801e1c4 <_svfprintf_r+0x56c>
 801e0a8:	9b06      	ldr	r3, [sp, #24]
 801e0aa:	f023 0320 	bic.w	r3, r3, #32
 801e0ae:	2b47      	cmp	r3, #71	@ 0x47
 801e0b0:	d105      	bne.n	801e0be <_svfprintf_r+0x466>
 801e0b2:	f1b8 0f00 	cmp.w	r8, #0
 801e0b6:	d102      	bne.n	801e0be <_svfprintf_r+0x466>
 801e0b8:	46c2      	mov	sl, r8
 801e0ba:	f04f 0801 	mov.w	r8, #1
 801e0be:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801e0c2:	9311      	str	r3, [sp, #68]	@ 0x44
 801e0c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	da7f      	bge.n	801e1ca <_svfprintf_r+0x572>
 801e0ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0cc:	9314      	str	r3, [sp, #80]	@ 0x50
 801e0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801e0d4:	9315      	str	r3, [sp, #84]	@ 0x54
 801e0d6:	232d      	movs	r3, #45	@ 0x2d
 801e0d8:	931c      	str	r3, [sp, #112]	@ 0x70
 801e0da:	9b06      	ldr	r3, [sp, #24]
 801e0dc:	f023 0320 	bic.w	r3, r3, #32
 801e0e0:	2b41      	cmp	r3, #65	@ 0x41
 801e0e2:	9308      	str	r3, [sp, #32]
 801e0e4:	f040 81e6 	bne.w	801e4b4 <_svfprintf_r+0x85c>
 801e0e8:	a820      	add	r0, sp, #128	@ 0x80
 801e0ea:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801e0ee:	f001 f8a1 	bl	801f234 <frexp>
 801e0f2:	2200      	movs	r2, #0
 801e0f4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801e0f8:	ec51 0b10 	vmov	r0, r1, d0
 801e0fc:	f7e2 fa8c 	bl	8000618 <__aeabi_dmul>
 801e100:	4602      	mov	r2, r0
 801e102:	460b      	mov	r3, r1
 801e104:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e108:	2200      	movs	r2, #0
 801e10a:	2300      	movs	r3, #0
 801e10c:	f7e2 fcec 	bl	8000ae8 <__aeabi_dcmpeq>
 801e110:	b108      	cbz	r0, 801e116 <_svfprintf_r+0x4be>
 801e112:	2301      	movs	r3, #1
 801e114:	9320      	str	r3, [sp, #128]	@ 0x80
 801e116:	4a36      	ldr	r2, [pc, #216]	@ (801e1f0 <_svfprintf_r+0x598>)
 801e118:	4b36      	ldr	r3, [pc, #216]	@ (801e1f4 <_svfprintf_r+0x59c>)
 801e11a:	9906      	ldr	r1, [sp, #24]
 801e11c:	2961      	cmp	r1, #97	@ 0x61
 801e11e:	bf18      	it	ne
 801e120:	461a      	movne	r2, r3
 801e122:	9210      	str	r2, [sp, #64]	@ 0x40
 801e124:	f108 37ff 	add.w	r7, r8, #4294967295
 801e128:	464e      	mov	r6, r9
 801e12a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e12e:	4b32      	ldr	r3, [pc, #200]	@ (801e1f8 <_svfprintf_r+0x5a0>)
 801e130:	2200      	movs	r2, #0
 801e132:	f7e2 fa71 	bl	8000618 <__aeabi_dmul>
 801e136:	4602      	mov	r2, r0
 801e138:	460b      	mov	r3, r1
 801e13a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e13e:	f7e2 fd1b 	bl	8000b78 <__aeabi_d2iz>
 801e142:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e144:	f7e2 f9fe 	bl	8000544 <__aeabi_i2d>
 801e148:	4602      	mov	r2, r0
 801e14a:	460b      	mov	r3, r1
 801e14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e150:	f7e2 f8aa 	bl	80002a8 <__aeabi_dsub>
 801e154:	4602      	mov	r2, r0
 801e156:	460b      	mov	r3, r1
 801e158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801e15c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e15e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e160:	5c9b      	ldrb	r3, [r3, r2]
 801e162:	f806 3b01 	strb.w	r3, [r6], #1
 801e166:	1c7a      	adds	r2, r7, #1
 801e168:	d006      	beq.n	801e178 <_svfprintf_r+0x520>
 801e16a:	1e7b      	subs	r3, r7, #1
 801e16c:	931d      	str	r3, [sp, #116]	@ 0x74
 801e16e:	2200      	movs	r2, #0
 801e170:	2300      	movs	r3, #0
 801e172:	f7e2 fcb9 	bl	8000ae8 <__aeabi_dcmpeq>
 801e176:	b370      	cbz	r0, 801e1d6 <_svfprintf_r+0x57e>
 801e178:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e17c:	4b1f      	ldr	r3, [pc, #124]	@ (801e1fc <_svfprintf_r+0x5a4>)
 801e17e:	2200      	movs	r2, #0
 801e180:	f7e2 fcda 	bl	8000b38 <__aeabi_dcmpgt>
 801e184:	2800      	cmp	r0, #0
 801e186:	d13b      	bne.n	801e200 <_svfprintf_r+0x5a8>
 801e188:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e18c:	4b1b      	ldr	r3, [pc, #108]	@ (801e1fc <_svfprintf_r+0x5a4>)
 801e18e:	2200      	movs	r2, #0
 801e190:	f7e2 fcaa 	bl	8000ae8 <__aeabi_dcmpeq>
 801e194:	b110      	cbz	r0, 801e19c <_svfprintf_r+0x544>
 801e196:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e198:	07db      	lsls	r3, r3, #31
 801e19a:	d431      	bmi.n	801e200 <_svfprintf_r+0x5a8>
 801e19c:	4633      	mov	r3, r6
 801e19e:	19f1      	adds	r1, r6, r7
 801e1a0:	2030      	movs	r0, #48	@ 0x30
 801e1a2:	1aca      	subs	r2, r1, r3
 801e1a4:	2a00      	cmp	r2, #0
 801e1a6:	f280 8182 	bge.w	801e4ae <_svfprintf_r+0x856>
 801e1aa:	1c7b      	adds	r3, r7, #1
 801e1ac:	3701      	adds	r7, #1
 801e1ae:	bfb8      	it	lt
 801e1b0:	2300      	movlt	r3, #0
 801e1b2:	441e      	add	r6, r3
 801e1b4:	e038      	b.n	801e228 <_svfprintf_r+0x5d0>
 801e1b6:	f04f 0a00 	mov.w	sl, #0
 801e1ba:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 801e1be:	e77e      	b.n	801e0be <_svfprintf_r+0x466>
 801e1c0:	4682      	mov	sl, r0
 801e1c2:	e77c      	b.n	801e0be <_svfprintf_r+0x466>
 801e1c4:	f04f 0806 	mov.w	r8, #6
 801e1c8:	e779      	b.n	801e0be <_svfprintf_r+0x466>
 801e1ca:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 801e1ce:	2300      	movs	r3, #0
 801e1d0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 801e1d4:	e780      	b.n	801e0d8 <_svfprintf_r+0x480>
 801e1d6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801e1d8:	e7a7      	b.n	801e12a <_svfprintf_r+0x4d2>
 801e1da:	bf00      	nop
 801e1dc:	7fefffff 	.word	0x7fefffff
 801e1e0:	08022fc2 	.word	0x08022fc2
 801e1e4:	08022fc6 	.word	0x08022fc6
 801e1e8:	08022fca 	.word	0x08022fca
 801e1ec:	08022fce 	.word	0x08022fce
 801e1f0:	08022fd2 	.word	0x08022fd2
 801e1f4:	08022fe3 	.word	0x08022fe3
 801e1f8:	40300000 	.word	0x40300000
 801e1fc:	3fe00000 	.word	0x3fe00000
 801e200:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e202:	9624      	str	r6, [sp, #144]	@ 0x90
 801e204:	7bd9      	ldrb	r1, [r3, #15]
 801e206:	2030      	movs	r0, #48	@ 0x30
 801e208:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e20a:	1e53      	subs	r3, r2, #1
 801e20c:	9324      	str	r3, [sp, #144]	@ 0x90
 801e20e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 801e212:	428b      	cmp	r3, r1
 801e214:	f000 8148 	beq.w	801e4a8 <_svfprintf_r+0x850>
 801e218:	2b39      	cmp	r3, #57	@ 0x39
 801e21a:	bf0b      	itete	eq
 801e21c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 801e21e:	3301      	addne	r3, #1
 801e220:	7a9b      	ldrbeq	r3, [r3, #10]
 801e222:	b2db      	uxtbne	r3, r3
 801e224:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e228:	eba6 0309 	sub.w	r3, r6, r9
 801e22c:	9304      	str	r3, [sp, #16]
 801e22e:	9b08      	ldr	r3, [sp, #32]
 801e230:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e232:	2b47      	cmp	r3, #71	@ 0x47
 801e234:	f040 8187 	bne.w	801e546 <_svfprintf_r+0x8ee>
 801e238:	1cf1      	adds	r1, r6, #3
 801e23a:	db02      	blt.n	801e242 <_svfprintf_r+0x5ea>
 801e23c:	4546      	cmp	r6, r8
 801e23e:	f340 81a5 	ble.w	801e58c <_svfprintf_r+0x934>
 801e242:	9b06      	ldr	r3, [sp, #24]
 801e244:	3b02      	subs	r3, #2
 801e246:	9306      	str	r3, [sp, #24]
 801e248:	9906      	ldr	r1, [sp, #24]
 801e24a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801e24e:	f021 0120 	bic.w	r1, r1, #32
 801e252:	2941      	cmp	r1, #65	@ 0x41
 801e254:	bf08      	it	eq
 801e256:	320f      	addeq	r2, #15
 801e258:	f106 33ff 	add.w	r3, r6, #4294967295
 801e25c:	bf06      	itte	eq
 801e25e:	b2d2      	uxtbeq	r2, r2
 801e260:	2101      	moveq	r1, #1
 801e262:	2100      	movne	r1, #0
 801e264:	2b00      	cmp	r3, #0
 801e266:	9320      	str	r3, [sp, #128]	@ 0x80
 801e268:	bfb8      	it	lt
 801e26a:	f1c6 0301 	rsblt	r3, r6, #1
 801e26e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 801e272:	bfb4      	ite	lt
 801e274:	222d      	movlt	r2, #45	@ 0x2d
 801e276:	222b      	movge	r2, #43	@ 0x2b
 801e278:	2b09      	cmp	r3, #9
 801e27a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 801e27e:	f340 8178 	ble.w	801e572 <_svfprintf_r+0x91a>
 801e282:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801e286:	270a      	movs	r7, #10
 801e288:	4602      	mov	r2, r0
 801e28a:	fbb3 f6f7 	udiv	r6, r3, r7
 801e28e:	fb07 3116 	mls	r1, r7, r6, r3
 801e292:	3130      	adds	r1, #48	@ 0x30
 801e294:	f802 1c01 	strb.w	r1, [r2, #-1]
 801e298:	4619      	mov	r1, r3
 801e29a:	2963      	cmp	r1, #99	@ 0x63
 801e29c:	f100 30ff 	add.w	r0, r0, #4294967295
 801e2a0:	4633      	mov	r3, r6
 801e2a2:	dcf1      	bgt.n	801e288 <_svfprintf_r+0x630>
 801e2a4:	3330      	adds	r3, #48	@ 0x30
 801e2a6:	1e91      	subs	r1, r2, #2
 801e2a8:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e2ac:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 801e2b0:	460b      	mov	r3, r1
 801e2b2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 801e2b6:	4283      	cmp	r3, r0
 801e2b8:	f0c0 8156 	bcc.w	801e568 <_svfprintf_r+0x910>
 801e2bc:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 801e2c0:	1a9b      	subs	r3, r3, r2
 801e2c2:	4281      	cmp	r1, r0
 801e2c4:	bf88      	it	hi
 801e2c6:	2300      	movhi	r3, #0
 801e2c8:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801e2cc:	441a      	add	r2, r3
 801e2ce:	ab22      	add	r3, sp, #136	@ 0x88
 801e2d0:	1ad3      	subs	r3, r2, r3
 801e2d2:	9a04      	ldr	r2, [sp, #16]
 801e2d4:	9318      	str	r3, [sp, #96]	@ 0x60
 801e2d6:	2a01      	cmp	r2, #1
 801e2d8:	eb03 0802 	add.w	r8, r3, r2
 801e2dc:	dc01      	bgt.n	801e2e2 <_svfprintf_r+0x68a>
 801e2de:	07ea      	lsls	r2, r5, #31
 801e2e0:	d501      	bpl.n	801e2e6 <_svfprintf_r+0x68e>
 801e2e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2e4:	4498      	add	r8, r3
 801e2e6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801e2ea:	2700      	movs	r7, #0
 801e2ec:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 801e2f0:	9311      	str	r3, [sp, #68]	@ 0x44
 801e2f2:	9708      	str	r7, [sp, #32]
 801e2f4:	463e      	mov	r6, r7
 801e2f6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	f040 818f 	bne.w	801e61c <_svfprintf_r+0x9c4>
 801e2fe:	2300      	movs	r3, #0
 801e300:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801e302:	9310      	str	r3, [sp, #64]	@ 0x40
 801e304:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e306:	4543      	cmp	r3, r8
 801e308:	bfb8      	it	lt
 801e30a:	4643      	movlt	r3, r8
 801e30c:	9311      	str	r3, [sp, #68]	@ 0x44
 801e30e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 801e312:	b113      	cbz	r3, 801e31a <_svfprintf_r+0x6c2>
 801e314:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e316:	3301      	adds	r3, #1
 801e318:	9311      	str	r3, [sp, #68]	@ 0x44
 801e31a:	f015 0302 	ands.w	r3, r5, #2
 801e31e:	931c      	str	r3, [sp, #112]	@ 0x70
 801e320:	bf1e      	ittt	ne
 801e322:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 801e324:	3302      	addne	r3, #2
 801e326:	9311      	strne	r3, [sp, #68]	@ 0x44
 801e328:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 801e32c:	931d      	str	r3, [sp, #116]	@ 0x74
 801e32e:	d122      	bne.n	801e376 <_svfprintf_r+0x71e>
 801e330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e332:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e334:	1a9b      	subs	r3, r3, r2
 801e336:	2b00      	cmp	r3, #0
 801e338:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e33a:	dd1c      	ble.n	801e376 <_svfprintf_r+0x71e>
 801e33c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e33e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801e342:	2810      	cmp	r0, #16
 801e344:	489e      	ldr	r0, [pc, #632]	@ (801e5c0 <_svfprintf_r+0x968>)
 801e346:	6020      	str	r0, [r4, #0]
 801e348:	f102 0201 	add.w	r2, r2, #1
 801e34c:	f104 0108 	add.w	r1, r4, #8
 801e350:	f300 8298 	bgt.w	801e884 <_svfprintf_r+0xc2c>
 801e354:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e356:	6060      	str	r0, [r4, #4]
 801e358:	4403      	add	r3, r0
 801e35a:	2a07      	cmp	r2, #7
 801e35c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e360:	f340 82a5 	ble.w	801e8ae <_svfprintf_r+0xc56>
 801e364:	9803      	ldr	r0, [sp, #12]
 801e366:	aa26      	add	r2, sp, #152	@ 0x98
 801e368:	4659      	mov	r1, fp
 801e36a:	f002 fce9 	bl	8020d40 <__ssprint_r>
 801e36e:	2800      	cmp	r0, #0
 801e370:	f040 85ed 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e374:	ac29      	add	r4, sp, #164	@ 0xa4
 801e376:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 801e37a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e37c:	b16a      	cbz	r2, 801e39a <_svfprintf_r+0x742>
 801e37e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 801e382:	6022      	str	r2, [r4, #0]
 801e384:	2201      	movs	r2, #1
 801e386:	4413      	add	r3, r2
 801e388:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e38a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e38c:	6062      	str	r2, [r4, #4]
 801e38e:	4413      	add	r3, r2
 801e390:	2b07      	cmp	r3, #7
 801e392:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e394:	f300 828d 	bgt.w	801e8b2 <_svfprintf_r+0xc5a>
 801e398:	3408      	adds	r4, #8
 801e39a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801e39c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e39e:	b162      	cbz	r2, 801e3ba <_svfprintf_r+0x762>
 801e3a0:	aa1f      	add	r2, sp, #124	@ 0x7c
 801e3a2:	6022      	str	r2, [r4, #0]
 801e3a4:	2202      	movs	r2, #2
 801e3a6:	4413      	add	r3, r2
 801e3a8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e3aa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e3ac:	6062      	str	r2, [r4, #4]
 801e3ae:	3301      	adds	r3, #1
 801e3b0:	2b07      	cmp	r3, #7
 801e3b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e3b4:	f300 8287 	bgt.w	801e8c6 <_svfprintf_r+0xc6e>
 801e3b8:	3408      	adds	r4, #8
 801e3ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e3bc:	2b80      	cmp	r3, #128	@ 0x80
 801e3be:	d122      	bne.n	801e406 <_svfprintf_r+0x7ae>
 801e3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e3c4:	1a9b      	subs	r3, r3, r2
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e3ca:	dd1c      	ble.n	801e406 <_svfprintf_r+0x7ae>
 801e3cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e3ce:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801e3d2:	2810      	cmp	r0, #16
 801e3d4:	487b      	ldr	r0, [pc, #492]	@ (801e5c4 <_svfprintf_r+0x96c>)
 801e3d6:	6020      	str	r0, [r4, #0]
 801e3d8:	f102 0201 	add.w	r2, r2, #1
 801e3dc:	f104 0108 	add.w	r1, r4, #8
 801e3e0:	f300 827b 	bgt.w	801e8da <_svfprintf_r+0xc82>
 801e3e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e3e6:	6060      	str	r0, [r4, #4]
 801e3e8:	4403      	add	r3, r0
 801e3ea:	2a07      	cmp	r2, #7
 801e3ec:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e3f0:	f340 8288 	ble.w	801e904 <_svfprintf_r+0xcac>
 801e3f4:	9803      	ldr	r0, [sp, #12]
 801e3f6:	aa26      	add	r2, sp, #152	@ 0x98
 801e3f8:	4659      	mov	r1, fp
 801e3fa:	f002 fca1 	bl	8020d40 <__ssprint_r>
 801e3fe:	2800      	cmp	r0, #0
 801e400:	f040 85a5 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e404:	ac29      	add	r4, sp, #164	@ 0xa4
 801e406:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e408:	eba3 0308 	sub.w	r3, r3, r8
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e410:	dd1c      	ble.n	801e44c <_svfprintf_r+0x7f4>
 801e412:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e414:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801e418:	2810      	cmp	r0, #16
 801e41a:	486a      	ldr	r0, [pc, #424]	@ (801e5c4 <_svfprintf_r+0x96c>)
 801e41c:	6020      	str	r0, [r4, #0]
 801e41e:	f102 0201 	add.w	r2, r2, #1
 801e422:	f104 0108 	add.w	r1, r4, #8
 801e426:	f300 826f 	bgt.w	801e908 <_svfprintf_r+0xcb0>
 801e42a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e42c:	6060      	str	r0, [r4, #4]
 801e42e:	4403      	add	r3, r0
 801e430:	2a07      	cmp	r2, #7
 801e432:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e436:	f340 827c 	ble.w	801e932 <_svfprintf_r+0xcda>
 801e43a:	9803      	ldr	r0, [sp, #12]
 801e43c:	aa26      	add	r2, sp, #152	@ 0x98
 801e43e:	4659      	mov	r1, fp
 801e440:	f002 fc7e 	bl	8020d40 <__ssprint_r>
 801e444:	2800      	cmp	r0, #0
 801e446:	f040 8582 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e44a:	ac29      	add	r4, sp, #164	@ 0xa4
 801e44c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e44e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e450:	05ea      	lsls	r2, r5, #23
 801e452:	f100 8275 	bmi.w	801e940 <_svfprintf_r+0xce8>
 801e456:	4443      	add	r3, r8
 801e458:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e45a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e45c:	3301      	adds	r3, #1
 801e45e:	2b07      	cmp	r3, #7
 801e460:	e9c4 9800 	strd	r9, r8, [r4]
 801e464:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e466:	f300 82b1 	bgt.w	801e9cc <_svfprintf_r+0xd74>
 801e46a:	3408      	adds	r4, #8
 801e46c:	076a      	lsls	r2, r5, #29
 801e46e:	f100 8550 	bmi.w	801ef12 <_svfprintf_r+0x12ba>
 801e472:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801e476:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e478:	428a      	cmp	r2, r1
 801e47a:	bfac      	ite	ge
 801e47c:	189b      	addge	r3, r3, r2
 801e47e:	185b      	addlt	r3, r3, r1
 801e480:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e482:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e484:	b13b      	cbz	r3, 801e496 <_svfprintf_r+0x83e>
 801e486:	9803      	ldr	r0, [sp, #12]
 801e488:	aa26      	add	r2, sp, #152	@ 0x98
 801e48a:	4659      	mov	r1, fp
 801e48c:	f002 fc58 	bl	8020d40 <__ssprint_r>
 801e490:	2800      	cmp	r0, #0
 801e492:	f040 855c 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e496:	2300      	movs	r3, #0
 801e498:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e49a:	f1ba 0f00 	cmp.w	sl, #0
 801e49e:	f040 8572 	bne.w	801ef86 <_svfprintf_r+0x132e>
 801e4a2:	9e07      	ldr	r6, [sp, #28]
 801e4a4:	ac29      	add	r4, sp, #164	@ 0xa4
 801e4a6:	e0c6      	b.n	801e636 <_svfprintf_r+0x9de>
 801e4a8:	f802 0c01 	strb.w	r0, [r2, #-1]
 801e4ac:	e6ac      	b.n	801e208 <_svfprintf_r+0x5b0>
 801e4ae:	f803 0b01 	strb.w	r0, [r3], #1
 801e4b2:	e676      	b.n	801e1a2 <_svfprintf_r+0x54a>
 801e4b4:	9b08      	ldr	r3, [sp, #32]
 801e4b6:	2b46      	cmp	r3, #70	@ 0x46
 801e4b8:	d005      	beq.n	801e4c6 <_svfprintf_r+0x86e>
 801e4ba:	2b45      	cmp	r3, #69	@ 0x45
 801e4bc:	d11a      	bne.n	801e4f4 <_svfprintf_r+0x89c>
 801e4be:	f108 0601 	add.w	r6, r8, #1
 801e4c2:	2102      	movs	r1, #2
 801e4c4:	e001      	b.n	801e4ca <_svfprintf_r+0x872>
 801e4c6:	4646      	mov	r6, r8
 801e4c8:	2103      	movs	r1, #3
 801e4ca:	ab24      	add	r3, sp, #144	@ 0x90
 801e4cc:	9301      	str	r3, [sp, #4]
 801e4ce:	ab21      	add	r3, sp, #132	@ 0x84
 801e4d0:	9300      	str	r3, [sp, #0]
 801e4d2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801e4d6:	ab20      	add	r3, sp, #128	@ 0x80
 801e4d8:	9803      	ldr	r0, [sp, #12]
 801e4da:	4632      	mov	r2, r6
 801e4dc:	f000 ffa8 	bl	801f430 <_dtoa_r>
 801e4e0:	9b08      	ldr	r3, [sp, #32]
 801e4e2:	2b47      	cmp	r3, #71	@ 0x47
 801e4e4:	4681      	mov	r9, r0
 801e4e6:	d119      	bne.n	801e51c <_svfprintf_r+0x8c4>
 801e4e8:	07e8      	lsls	r0, r5, #31
 801e4ea:	d405      	bmi.n	801e4f8 <_svfprintf_r+0x8a0>
 801e4ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e4ee:	eba3 0309 	sub.w	r3, r3, r9
 801e4f2:	e69b      	b.n	801e22c <_svfprintf_r+0x5d4>
 801e4f4:	4646      	mov	r6, r8
 801e4f6:	e7e4      	b.n	801e4c2 <_svfprintf_r+0x86a>
 801e4f8:	eb09 0706 	add.w	r7, r9, r6
 801e4fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801e500:	2200      	movs	r2, #0
 801e502:	2300      	movs	r3, #0
 801e504:	f7e2 faf0 	bl	8000ae8 <__aeabi_dcmpeq>
 801e508:	b100      	cbz	r0, 801e50c <_svfprintf_r+0x8b4>
 801e50a:	9724      	str	r7, [sp, #144]	@ 0x90
 801e50c:	2230      	movs	r2, #48	@ 0x30
 801e50e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e510:	429f      	cmp	r7, r3
 801e512:	d9eb      	bls.n	801e4ec <_svfprintf_r+0x894>
 801e514:	1c59      	adds	r1, r3, #1
 801e516:	9124      	str	r1, [sp, #144]	@ 0x90
 801e518:	701a      	strb	r2, [r3, #0]
 801e51a:	e7f8      	b.n	801e50e <_svfprintf_r+0x8b6>
 801e51c:	9b08      	ldr	r3, [sp, #32]
 801e51e:	2b46      	cmp	r3, #70	@ 0x46
 801e520:	eb00 0706 	add.w	r7, r0, r6
 801e524:	d1ea      	bne.n	801e4fc <_svfprintf_r+0x8a4>
 801e526:	7803      	ldrb	r3, [r0, #0]
 801e528:	2b30      	cmp	r3, #48	@ 0x30
 801e52a:	d109      	bne.n	801e540 <_svfprintf_r+0x8e8>
 801e52c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 801e530:	2200      	movs	r2, #0
 801e532:	2300      	movs	r3, #0
 801e534:	f7e2 fad8 	bl	8000ae8 <__aeabi_dcmpeq>
 801e538:	b910      	cbnz	r0, 801e540 <_svfprintf_r+0x8e8>
 801e53a:	f1c6 0601 	rsb	r6, r6, #1
 801e53e:	9620      	str	r6, [sp, #128]	@ 0x80
 801e540:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e542:	441f      	add	r7, r3
 801e544:	e7da      	b.n	801e4fc <_svfprintf_r+0x8a4>
 801e546:	9b08      	ldr	r3, [sp, #32]
 801e548:	2b46      	cmp	r3, #70	@ 0x46
 801e54a:	f47f ae7d 	bne.w	801e248 <_svfprintf_r+0x5f0>
 801e54e:	f005 0301 	and.w	r3, r5, #1
 801e552:	2e00      	cmp	r6, #0
 801e554:	ea43 0308 	orr.w	r3, r3, r8
 801e558:	dd25      	ble.n	801e5a6 <_svfprintf_r+0x94e>
 801e55a:	b37b      	cbz	r3, 801e5bc <_svfprintf_r+0x964>
 801e55c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e55e:	18f3      	adds	r3, r6, r3
 801e560:	4498      	add	r8, r3
 801e562:	2366      	movs	r3, #102	@ 0x66
 801e564:	9306      	str	r3, [sp, #24]
 801e566:	e033      	b.n	801e5d0 <_svfprintf_r+0x978>
 801e568:	f813 7b01 	ldrb.w	r7, [r3], #1
 801e56c:	f806 7f01 	strb.w	r7, [r6, #1]!
 801e570:	e6a1      	b.n	801e2b6 <_svfprintf_r+0x65e>
 801e572:	b941      	cbnz	r1, 801e586 <_svfprintf_r+0x92e>
 801e574:	2230      	movs	r2, #48	@ 0x30
 801e576:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 801e57a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 801e57e:	3330      	adds	r3, #48	@ 0x30
 801e580:	f802 3b01 	strb.w	r3, [r2], #1
 801e584:	e6a3      	b.n	801e2ce <_svfprintf_r+0x676>
 801e586:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 801e58a:	e7f8      	b.n	801e57e <_svfprintf_r+0x926>
 801e58c:	9b04      	ldr	r3, [sp, #16]
 801e58e:	429e      	cmp	r6, r3
 801e590:	da0d      	bge.n	801e5ae <_svfprintf_r+0x956>
 801e592:	9b04      	ldr	r3, [sp, #16]
 801e594:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e596:	2e00      	cmp	r6, #0
 801e598:	eb03 0802 	add.w	r8, r3, r2
 801e59c:	dc0c      	bgt.n	801e5b8 <_svfprintf_r+0x960>
 801e59e:	f1c6 0301 	rsb	r3, r6, #1
 801e5a2:	4498      	add	r8, r3
 801e5a4:	e008      	b.n	801e5b8 <_svfprintf_r+0x960>
 801e5a6:	b17b      	cbz	r3, 801e5c8 <_svfprintf_r+0x970>
 801e5a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e5aa:	3301      	adds	r3, #1
 801e5ac:	e7d8      	b.n	801e560 <_svfprintf_r+0x908>
 801e5ae:	07eb      	lsls	r3, r5, #31
 801e5b0:	d521      	bpl.n	801e5f6 <_svfprintf_r+0x99e>
 801e5b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e5b4:	eb06 0803 	add.w	r8, r6, r3
 801e5b8:	2367      	movs	r3, #103	@ 0x67
 801e5ba:	e7d3      	b.n	801e564 <_svfprintf_r+0x90c>
 801e5bc:	46b0      	mov	r8, r6
 801e5be:	e7d0      	b.n	801e562 <_svfprintf_r+0x90a>
 801e5c0:	08023006 	.word	0x08023006
 801e5c4:	08022ff6 	.word	0x08022ff6
 801e5c8:	2366      	movs	r3, #102	@ 0x66
 801e5ca:	9306      	str	r3, [sp, #24]
 801e5cc:	f04f 0801 	mov.w	r8, #1
 801e5d0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801e5d4:	9308      	str	r3, [sp, #32]
 801e5d6:	d01f      	beq.n	801e618 <_svfprintf_r+0x9c0>
 801e5d8:	2700      	movs	r7, #0
 801e5da:	2e00      	cmp	r6, #0
 801e5dc:	9708      	str	r7, [sp, #32]
 801e5de:	f77f ae8a 	ble.w	801e2f6 <_svfprintf_r+0x69e>
 801e5e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5e4:	781b      	ldrb	r3, [r3, #0]
 801e5e6:	2bff      	cmp	r3, #255	@ 0xff
 801e5e8:	d107      	bne.n	801e5fa <_svfprintf_r+0x9a2>
 801e5ea:	9b08      	ldr	r3, [sp, #32]
 801e5ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e5ee:	443b      	add	r3, r7
 801e5f0:	fb02 8803 	mla	r8, r2, r3, r8
 801e5f4:	e67f      	b.n	801e2f6 <_svfprintf_r+0x69e>
 801e5f6:	46b0      	mov	r8, r6
 801e5f8:	e7de      	b.n	801e5b8 <_svfprintf_r+0x960>
 801e5fa:	42b3      	cmp	r3, r6
 801e5fc:	daf5      	bge.n	801e5ea <_svfprintf_r+0x992>
 801e5fe:	1af6      	subs	r6, r6, r3
 801e600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e602:	785b      	ldrb	r3, [r3, #1]
 801e604:	b133      	cbz	r3, 801e614 <_svfprintf_r+0x9bc>
 801e606:	9b08      	ldr	r3, [sp, #32]
 801e608:	3301      	adds	r3, #1
 801e60a:	9308      	str	r3, [sp, #32]
 801e60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e60e:	3301      	adds	r3, #1
 801e610:	9309      	str	r3, [sp, #36]	@ 0x24
 801e612:	e7e6      	b.n	801e5e2 <_svfprintf_r+0x98a>
 801e614:	3701      	adds	r7, #1
 801e616:	e7e4      	b.n	801e5e2 <_svfprintf_r+0x98a>
 801e618:	9f08      	ldr	r7, [sp, #32]
 801e61a:	e66c      	b.n	801e2f6 <_svfprintf_r+0x69e>
 801e61c:	232d      	movs	r3, #45	@ 0x2d
 801e61e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e622:	e66c      	b.n	801e2fe <_svfprintf_r+0x6a6>
 801e624:	06af      	lsls	r7, r5, #26
 801e626:	d50a      	bpl.n	801e63e <_svfprintf_r+0x9e6>
 801e628:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e62a:	6833      	ldr	r3, [r6, #0]
 801e62c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e62e:	17d2      	asrs	r2, r2, #31
 801e630:	e9c3 1200 	strd	r1, r2, [r3]
 801e634:	3604      	adds	r6, #4
 801e636:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 801e63a:	f7ff bb46 	b.w	801dcca <_svfprintf_r+0x72>
 801e63e:	06e8      	lsls	r0, r5, #27
 801e640:	d503      	bpl.n	801e64a <_svfprintf_r+0x9f2>
 801e642:	6833      	ldr	r3, [r6, #0]
 801e644:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e646:	601a      	str	r2, [r3, #0]
 801e648:	e7f4      	b.n	801e634 <_svfprintf_r+0x9dc>
 801e64a:	0669      	lsls	r1, r5, #25
 801e64c:	d503      	bpl.n	801e656 <_svfprintf_r+0x9fe>
 801e64e:	6833      	ldr	r3, [r6, #0]
 801e650:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e652:	801a      	strh	r2, [r3, #0]
 801e654:	e7ee      	b.n	801e634 <_svfprintf_r+0x9dc>
 801e656:	05aa      	lsls	r2, r5, #22
 801e658:	d5f3      	bpl.n	801e642 <_svfprintf_r+0x9ea>
 801e65a:	6833      	ldr	r3, [r6, #0]
 801e65c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e65e:	701a      	strb	r2, [r3, #0]
 801e660:	e7e8      	b.n	801e634 <_svfprintf_r+0x9dc>
 801e662:	f045 0510 	orr.w	r5, r5, #16
 801e666:	f015 0320 	ands.w	r3, r5, #32
 801e66a:	d020      	beq.n	801e6ae <_svfprintf_r+0xa56>
 801e66c:	3607      	adds	r6, #7
 801e66e:	f026 0307 	bic.w	r3, r6, #7
 801e672:	461a      	mov	r2, r3
 801e674:	685f      	ldr	r7, [r3, #4]
 801e676:	f852 6b08 	ldr.w	r6, [r2], #8
 801e67a:	9207      	str	r2, [sp, #28]
 801e67c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801e680:	2300      	movs	r3, #0
 801e682:	2200      	movs	r2, #0
 801e684:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 801e688:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e68c:	f000 848c 	beq.w	801efa8 <_svfprintf_r+0x1350>
 801e690:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 801e694:	9208      	str	r2, [sp, #32]
 801e696:	ea56 0207 	orrs.w	r2, r6, r7
 801e69a:	f040 848a 	bne.w	801efb2 <_svfprintf_r+0x135a>
 801e69e:	f1b8 0f00 	cmp.w	r8, #0
 801e6a2:	f000 80db 	beq.w	801e85c <_svfprintf_r+0xc04>
 801e6a6:	2b01      	cmp	r3, #1
 801e6a8:	f040 8486 	bne.w	801efb8 <_svfprintf_r+0x1360>
 801e6ac:	e083      	b.n	801e7b6 <_svfprintf_r+0xb5e>
 801e6ae:	4632      	mov	r2, r6
 801e6b0:	f015 0710 	ands.w	r7, r5, #16
 801e6b4:	f852 6b04 	ldr.w	r6, [r2], #4
 801e6b8:	9207      	str	r2, [sp, #28]
 801e6ba:	d001      	beq.n	801e6c0 <_svfprintf_r+0xa68>
 801e6bc:	461f      	mov	r7, r3
 801e6be:	e7dd      	b.n	801e67c <_svfprintf_r+0xa24>
 801e6c0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801e6c4:	d001      	beq.n	801e6ca <_svfprintf_r+0xa72>
 801e6c6:	b2b6      	uxth	r6, r6
 801e6c8:	e7d8      	b.n	801e67c <_svfprintf_r+0xa24>
 801e6ca:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801e6ce:	d0d5      	beq.n	801e67c <_svfprintf_r+0xa24>
 801e6d0:	b2f6      	uxtb	r6, r6
 801e6d2:	e7f3      	b.n	801e6bc <_svfprintf_r+0xa64>
 801e6d4:	4633      	mov	r3, r6
 801e6d6:	2278      	movs	r2, #120	@ 0x78
 801e6d8:	f853 6b04 	ldr.w	r6, [r3], #4
 801e6dc:	9307      	str	r3, [sp, #28]
 801e6de:	f647 0330 	movw	r3, #30768	@ 0x7830
 801e6e2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 801e6e6:	4b94      	ldr	r3, [pc, #592]	@ (801e938 <_svfprintf_r+0xce0>)
 801e6e8:	9319      	str	r3, [sp, #100]	@ 0x64
 801e6ea:	2700      	movs	r7, #0
 801e6ec:	f045 0502 	orr.w	r5, r5, #2
 801e6f0:	2302      	movs	r3, #2
 801e6f2:	9206      	str	r2, [sp, #24]
 801e6f4:	e7c5      	b.n	801e682 <_svfprintf_r+0xa2a>
 801e6f6:	4633      	mov	r3, r6
 801e6f8:	f1b8 3fff 	cmp.w	r8, #4294967295
 801e6fc:	f853 9b04 	ldr.w	r9, [r3], #4
 801e700:	9307      	str	r3, [sp, #28]
 801e702:	f04f 0600 	mov.w	r6, #0
 801e706:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 801e70a:	d00f      	beq.n	801e72c <_svfprintf_r+0xad4>
 801e70c:	4642      	mov	r2, r8
 801e70e:	4631      	mov	r1, r6
 801e710:	4648      	mov	r0, r9
 801e712:	f7e1 fd75 	bl	8000200 <memchr>
 801e716:	4682      	mov	sl, r0
 801e718:	2800      	cmp	r0, #0
 801e71a:	f43f ac81 	beq.w	801e020 <_svfprintf_r+0x3c8>
 801e71e:	eba0 0809 	sub.w	r8, r0, r9
 801e722:	46b2      	mov	sl, r6
 801e724:	9610      	str	r6, [sp, #64]	@ 0x40
 801e726:	4637      	mov	r7, r6
 801e728:	9608      	str	r6, [sp, #32]
 801e72a:	e5eb      	b.n	801e304 <_svfprintf_r+0x6ac>
 801e72c:	4648      	mov	r0, r9
 801e72e:	f7e1 fd59 	bl	80001e4 <strlen>
 801e732:	46b2      	mov	sl, r6
 801e734:	4680      	mov	r8, r0
 801e736:	e473      	b.n	801e020 <_svfprintf_r+0x3c8>
 801e738:	f045 0510 	orr.w	r5, r5, #16
 801e73c:	f015 0320 	ands.w	r3, r5, #32
 801e740:	d009      	beq.n	801e756 <_svfprintf_r+0xafe>
 801e742:	3607      	adds	r6, #7
 801e744:	f026 0307 	bic.w	r3, r6, #7
 801e748:	461a      	mov	r2, r3
 801e74a:	685f      	ldr	r7, [r3, #4]
 801e74c:	f852 6b08 	ldr.w	r6, [r2], #8
 801e750:	9207      	str	r2, [sp, #28]
 801e752:	2301      	movs	r3, #1
 801e754:	e795      	b.n	801e682 <_svfprintf_r+0xa2a>
 801e756:	4632      	mov	r2, r6
 801e758:	f015 0710 	ands.w	r7, r5, #16
 801e75c:	f852 6b04 	ldr.w	r6, [r2], #4
 801e760:	9207      	str	r2, [sp, #28]
 801e762:	d001      	beq.n	801e768 <_svfprintf_r+0xb10>
 801e764:	461f      	mov	r7, r3
 801e766:	e7f4      	b.n	801e752 <_svfprintf_r+0xafa>
 801e768:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801e76c:	d001      	beq.n	801e772 <_svfprintf_r+0xb1a>
 801e76e:	b2b6      	uxth	r6, r6
 801e770:	e7ef      	b.n	801e752 <_svfprintf_r+0xafa>
 801e772:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801e776:	d0ec      	beq.n	801e752 <_svfprintf_r+0xafa>
 801e778:	b2f6      	uxtb	r6, r6
 801e77a:	e7f3      	b.n	801e764 <_svfprintf_r+0xb0c>
 801e77c:	4b6f      	ldr	r3, [pc, #444]	@ (801e93c <_svfprintf_r+0xce4>)
 801e77e:	f7ff bb39 	b.w	801ddf4 <_svfprintf_r+0x19c>
 801e782:	4632      	mov	r2, r6
 801e784:	f015 0710 	ands.w	r7, r5, #16
 801e788:	f852 6b04 	ldr.w	r6, [r2], #4
 801e78c:	9207      	str	r2, [sp, #28]
 801e78e:	d002      	beq.n	801e796 <_svfprintf_r+0xb3e>
 801e790:	461f      	mov	r7, r3
 801e792:	f7ff bb3c 	b.w	801de0e <_svfprintf_r+0x1b6>
 801e796:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801e79a:	d002      	beq.n	801e7a2 <_svfprintf_r+0xb4a>
 801e79c:	b2b6      	uxth	r6, r6
 801e79e:	f7ff bb36 	b.w	801de0e <_svfprintf_r+0x1b6>
 801e7a2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 801e7a6:	f43f ab32 	beq.w	801de0e <_svfprintf_r+0x1b6>
 801e7aa:	b2f6      	uxtb	r6, r6
 801e7ac:	e7f0      	b.n	801e790 <_svfprintf_r+0xb38>
 801e7ae:	2e0a      	cmp	r6, #10
 801e7b0:	f177 0300 	sbcs.w	r3, r7, #0
 801e7b4:	d207      	bcs.n	801e7c6 <_svfprintf_r+0xb6e>
 801e7b6:	3630      	adds	r6, #48	@ 0x30
 801e7b8:	b2f6      	uxtb	r6, r6
 801e7ba:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 801e7be:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 801e7c2:	f000 bc15 	b.w	801eff0 <_svfprintf_r+0x1398>
 801e7c6:	2300      	movs	r3, #0
 801e7c8:	9304      	str	r3, [sp, #16]
 801e7ca:	9b08      	ldr	r3, [sp, #32]
 801e7cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801e7d0:	ad52      	add	r5, sp, #328	@ 0x148
 801e7d2:	9310      	str	r3, [sp, #64]	@ 0x40
 801e7d4:	220a      	movs	r2, #10
 801e7d6:	2300      	movs	r3, #0
 801e7d8:	4630      	mov	r0, r6
 801e7da:	4639      	mov	r1, r7
 801e7dc:	f7e2 fa64 	bl	8000ca8 <__aeabi_uldivmod>
 801e7e0:	9b04      	ldr	r3, [sp, #16]
 801e7e2:	9011      	str	r0, [sp, #68]	@ 0x44
 801e7e4:	3301      	adds	r3, #1
 801e7e6:	9304      	str	r3, [sp, #16]
 801e7e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7ea:	3230      	adds	r2, #48	@ 0x30
 801e7ec:	468a      	mov	sl, r1
 801e7ee:	f105 39ff 	add.w	r9, r5, #4294967295
 801e7f2:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e7f6:	b1d3      	cbz	r3, 801e82e <_svfprintf_r+0xbd6>
 801e7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7fa:	9a04      	ldr	r2, [sp, #16]
 801e7fc:	781b      	ldrb	r3, [r3, #0]
 801e7fe:	429a      	cmp	r2, r3
 801e800:	d115      	bne.n	801e82e <_svfprintf_r+0xbd6>
 801e802:	2aff      	cmp	r2, #255	@ 0xff
 801e804:	d013      	beq.n	801e82e <_svfprintf_r+0xbd6>
 801e806:	2e0a      	cmp	r6, #10
 801e808:	f177 0300 	sbcs.w	r3, r7, #0
 801e80c:	d30f      	bcc.n	801e82e <_svfprintf_r+0xbd6>
 801e80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e810:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e812:	eba9 0903 	sub.w	r9, r9, r3
 801e816:	461a      	mov	r2, r3
 801e818:	4648      	mov	r0, r9
 801e81a:	f000 fcd5 	bl	801f1c8 <strncpy>
 801e81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e820:	785b      	ldrb	r3, [r3, #1]
 801e822:	b11b      	cbz	r3, 801e82c <_svfprintf_r+0xbd4>
 801e824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e826:	3301      	adds	r3, #1
 801e828:	9309      	str	r3, [sp, #36]	@ 0x24
 801e82a:	2300      	movs	r3, #0
 801e82c:	9304      	str	r3, [sp, #16]
 801e82e:	2e0a      	cmp	r6, #10
 801e830:	f177 0700 	sbcs.w	r7, r7, #0
 801e834:	f0c0 83dc 	bcc.w	801eff0 <_svfprintf_r+0x1398>
 801e838:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801e83a:	4657      	mov	r7, sl
 801e83c:	464d      	mov	r5, r9
 801e83e:	e7c9      	b.n	801e7d4 <_svfprintf_r+0xb7c>
 801e840:	f006 030f 	and.w	r3, r6, #15
 801e844:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e846:	0936      	lsrs	r6, r6, #4
 801e848:	5cd3      	ldrb	r3, [r2, r3]
 801e84a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801e84e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 801e852:	093f      	lsrs	r7, r7, #4
 801e854:	ea56 0307 	orrs.w	r3, r6, r7
 801e858:	d1f2      	bne.n	801e840 <_svfprintf_r+0xbe8>
 801e85a:	e3c9      	b.n	801eff0 <_svfprintf_r+0x1398>
 801e85c:	b91b      	cbnz	r3, 801e866 <_svfprintf_r+0xc0e>
 801e85e:	07e9      	lsls	r1, r5, #31
 801e860:	d501      	bpl.n	801e866 <_svfprintf_r+0xc0e>
 801e862:	2630      	movs	r6, #48	@ 0x30
 801e864:	e7a9      	b.n	801e7ba <_svfprintf_r+0xb62>
 801e866:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801e86a:	e3c1      	b.n	801eff0 <_svfprintf_r+0x1398>
 801e86c:	9b06      	ldr	r3, [sp, #24]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	f000 838f 	beq.w	801ef92 <_svfprintf_r+0x133a>
 801e874:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 801e878:	2300      	movs	r3, #0
 801e87a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 801e87e:	9607      	str	r6, [sp, #28]
 801e880:	f7ff bb63 	b.w	801df4a <_svfprintf_r+0x2f2>
 801e884:	2010      	movs	r0, #16
 801e886:	4403      	add	r3, r0
 801e888:	2a07      	cmp	r2, #7
 801e88a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e88e:	6060      	str	r0, [r4, #4]
 801e890:	dd08      	ble.n	801e8a4 <_svfprintf_r+0xc4c>
 801e892:	9803      	ldr	r0, [sp, #12]
 801e894:	aa26      	add	r2, sp, #152	@ 0x98
 801e896:	4659      	mov	r1, fp
 801e898:	f002 fa52 	bl	8020d40 <__ssprint_r>
 801e89c:	2800      	cmp	r0, #0
 801e89e:	f040 8356 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e8a2:	a929      	add	r1, sp, #164	@ 0xa4
 801e8a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e8a6:	3b10      	subs	r3, #16
 801e8a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e8aa:	460c      	mov	r4, r1
 801e8ac:	e546      	b.n	801e33c <_svfprintf_r+0x6e4>
 801e8ae:	460c      	mov	r4, r1
 801e8b0:	e561      	b.n	801e376 <_svfprintf_r+0x71e>
 801e8b2:	9803      	ldr	r0, [sp, #12]
 801e8b4:	aa26      	add	r2, sp, #152	@ 0x98
 801e8b6:	4659      	mov	r1, fp
 801e8b8:	f002 fa42 	bl	8020d40 <__ssprint_r>
 801e8bc:	2800      	cmp	r0, #0
 801e8be:	f040 8346 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e8c2:	ac29      	add	r4, sp, #164	@ 0xa4
 801e8c4:	e569      	b.n	801e39a <_svfprintf_r+0x742>
 801e8c6:	9803      	ldr	r0, [sp, #12]
 801e8c8:	aa26      	add	r2, sp, #152	@ 0x98
 801e8ca:	4659      	mov	r1, fp
 801e8cc:	f002 fa38 	bl	8020d40 <__ssprint_r>
 801e8d0:	2800      	cmp	r0, #0
 801e8d2:	f040 833c 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e8d6:	ac29      	add	r4, sp, #164	@ 0xa4
 801e8d8:	e56f      	b.n	801e3ba <_svfprintf_r+0x762>
 801e8da:	2010      	movs	r0, #16
 801e8dc:	4403      	add	r3, r0
 801e8de:	2a07      	cmp	r2, #7
 801e8e0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e8e4:	6060      	str	r0, [r4, #4]
 801e8e6:	dd08      	ble.n	801e8fa <_svfprintf_r+0xca2>
 801e8e8:	9803      	ldr	r0, [sp, #12]
 801e8ea:	aa26      	add	r2, sp, #152	@ 0x98
 801e8ec:	4659      	mov	r1, fp
 801e8ee:	f002 fa27 	bl	8020d40 <__ssprint_r>
 801e8f2:	2800      	cmp	r0, #0
 801e8f4:	f040 832b 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e8f8:	a929      	add	r1, sp, #164	@ 0xa4
 801e8fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e8fc:	3b10      	subs	r3, #16
 801e8fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e900:	460c      	mov	r4, r1
 801e902:	e563      	b.n	801e3cc <_svfprintf_r+0x774>
 801e904:	460c      	mov	r4, r1
 801e906:	e57e      	b.n	801e406 <_svfprintf_r+0x7ae>
 801e908:	2010      	movs	r0, #16
 801e90a:	4403      	add	r3, r0
 801e90c:	2a07      	cmp	r2, #7
 801e90e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801e912:	6060      	str	r0, [r4, #4]
 801e914:	dd08      	ble.n	801e928 <_svfprintf_r+0xcd0>
 801e916:	9803      	ldr	r0, [sp, #12]
 801e918:	aa26      	add	r2, sp, #152	@ 0x98
 801e91a:	4659      	mov	r1, fp
 801e91c:	f002 fa10 	bl	8020d40 <__ssprint_r>
 801e920:	2800      	cmp	r0, #0
 801e922:	f040 8314 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e926:	a929      	add	r1, sp, #164	@ 0xa4
 801e928:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e92a:	3b10      	subs	r3, #16
 801e92c:	9310      	str	r3, [sp, #64]	@ 0x40
 801e92e:	460c      	mov	r4, r1
 801e930:	e56f      	b.n	801e412 <_svfprintf_r+0x7ba>
 801e932:	460c      	mov	r4, r1
 801e934:	e58a      	b.n	801e44c <_svfprintf_r+0x7f4>
 801e936:	bf00      	nop
 801e938:	08022fd2 	.word	0x08022fd2
 801e93c:	08022fe3 	.word	0x08022fe3
 801e940:	9b06      	ldr	r3, [sp, #24]
 801e942:	2b65      	cmp	r3, #101	@ 0x65
 801e944:	f340 8246 	ble.w	801edd4 <_svfprintf_r+0x117c>
 801e948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801e94c:	2200      	movs	r2, #0
 801e94e:	2300      	movs	r3, #0
 801e950:	f7e2 f8ca 	bl	8000ae8 <__aeabi_dcmpeq>
 801e954:	2800      	cmp	r0, #0
 801e956:	d06a      	beq.n	801ea2e <_svfprintf_r+0xdd6>
 801e958:	4b73      	ldr	r3, [pc, #460]	@ (801eb28 <_svfprintf_r+0xed0>)
 801e95a:	6023      	str	r3, [r4, #0]
 801e95c:	2301      	movs	r3, #1
 801e95e:	6063      	str	r3, [r4, #4]
 801e960:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e962:	3301      	adds	r3, #1
 801e964:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e966:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e968:	3301      	adds	r3, #1
 801e96a:	2b07      	cmp	r3, #7
 801e96c:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e96e:	dc37      	bgt.n	801e9e0 <_svfprintf_r+0xd88>
 801e970:	3408      	adds	r4, #8
 801e972:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e974:	9a04      	ldr	r2, [sp, #16]
 801e976:	4293      	cmp	r3, r2
 801e978:	db02      	blt.n	801e980 <_svfprintf_r+0xd28>
 801e97a:	07ef      	lsls	r7, r5, #31
 801e97c:	f57f ad76 	bpl.w	801e46c <_svfprintf_r+0x814>
 801e980:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e982:	6023      	str	r3, [r4, #0]
 801e984:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e986:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e988:	6063      	str	r3, [r4, #4]
 801e98a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e98c:	4413      	add	r3, r2
 801e98e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e990:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e992:	3301      	adds	r3, #1
 801e994:	2b07      	cmp	r3, #7
 801e996:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e998:	dc2c      	bgt.n	801e9f4 <_svfprintf_r+0xd9c>
 801e99a:	3408      	adds	r4, #8
 801e99c:	9b04      	ldr	r3, [sp, #16]
 801e99e:	1e5e      	subs	r6, r3, #1
 801e9a0:	2e00      	cmp	r6, #0
 801e9a2:	f77f ad63 	ble.w	801e46c <_svfprintf_r+0x814>
 801e9a6:	4f61      	ldr	r7, [pc, #388]	@ (801eb2c <_svfprintf_r+0xed4>)
 801e9a8:	f04f 0810 	mov.w	r8, #16
 801e9ac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801e9b0:	2e10      	cmp	r6, #16
 801e9b2:	f103 0301 	add.w	r3, r3, #1
 801e9b6:	f104 0108 	add.w	r1, r4, #8
 801e9ba:	6027      	str	r7, [r4, #0]
 801e9bc:	dc24      	bgt.n	801ea08 <_svfprintf_r+0xdb0>
 801e9be:	6066      	str	r6, [r4, #4]
 801e9c0:	2b07      	cmp	r3, #7
 801e9c2:	4416      	add	r6, r2
 801e9c4:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801e9c8:	f340 82a0 	ble.w	801ef0c <_svfprintf_r+0x12b4>
 801e9cc:	9803      	ldr	r0, [sp, #12]
 801e9ce:	aa26      	add	r2, sp, #152	@ 0x98
 801e9d0:	4659      	mov	r1, fp
 801e9d2:	f002 f9b5 	bl	8020d40 <__ssprint_r>
 801e9d6:	2800      	cmp	r0, #0
 801e9d8:	f040 82b9 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e9dc:	ac29      	add	r4, sp, #164	@ 0xa4
 801e9de:	e545      	b.n	801e46c <_svfprintf_r+0x814>
 801e9e0:	9803      	ldr	r0, [sp, #12]
 801e9e2:	aa26      	add	r2, sp, #152	@ 0x98
 801e9e4:	4659      	mov	r1, fp
 801e9e6:	f002 f9ab 	bl	8020d40 <__ssprint_r>
 801e9ea:	2800      	cmp	r0, #0
 801e9ec:	f040 82af 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801e9f0:	ac29      	add	r4, sp, #164	@ 0xa4
 801e9f2:	e7be      	b.n	801e972 <_svfprintf_r+0xd1a>
 801e9f4:	9803      	ldr	r0, [sp, #12]
 801e9f6:	aa26      	add	r2, sp, #152	@ 0x98
 801e9f8:	4659      	mov	r1, fp
 801e9fa:	f002 f9a1 	bl	8020d40 <__ssprint_r>
 801e9fe:	2800      	cmp	r0, #0
 801ea00:	f040 82a5 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ea04:	ac29      	add	r4, sp, #164	@ 0xa4
 801ea06:	e7c9      	b.n	801e99c <_svfprintf_r+0xd44>
 801ea08:	3210      	adds	r2, #16
 801ea0a:	2b07      	cmp	r3, #7
 801ea0c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ea10:	f8c4 8004 	str.w	r8, [r4, #4]
 801ea14:	dd08      	ble.n	801ea28 <_svfprintf_r+0xdd0>
 801ea16:	9803      	ldr	r0, [sp, #12]
 801ea18:	aa26      	add	r2, sp, #152	@ 0x98
 801ea1a:	4659      	mov	r1, fp
 801ea1c:	f002 f990 	bl	8020d40 <__ssprint_r>
 801ea20:	2800      	cmp	r0, #0
 801ea22:	f040 8294 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ea26:	a929      	add	r1, sp, #164	@ 0xa4
 801ea28:	3e10      	subs	r6, #16
 801ea2a:	460c      	mov	r4, r1
 801ea2c:	e7be      	b.n	801e9ac <_svfprintf_r+0xd54>
 801ea2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	dc7d      	bgt.n	801eb30 <_svfprintf_r+0xed8>
 801ea34:	4b3c      	ldr	r3, [pc, #240]	@ (801eb28 <_svfprintf_r+0xed0>)
 801ea36:	6023      	str	r3, [r4, #0]
 801ea38:	2301      	movs	r3, #1
 801ea3a:	6063      	str	r3, [r4, #4]
 801ea3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea3e:	3301      	adds	r3, #1
 801ea40:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ea42:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ea44:	3301      	adds	r3, #1
 801ea46:	2b07      	cmp	r3, #7
 801ea48:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ea4a:	dc46      	bgt.n	801eada <_svfprintf_r+0xe82>
 801ea4c:	3408      	adds	r4, #8
 801ea4e:	9904      	ldr	r1, [sp, #16]
 801ea50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ea52:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801ea54:	430b      	orrs	r3, r1
 801ea56:	f005 0101 	and.w	r1, r5, #1
 801ea5a:	430b      	orrs	r3, r1
 801ea5c:	f43f ad06 	beq.w	801e46c <_svfprintf_r+0x814>
 801ea60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ea62:	6023      	str	r3, [r4, #0]
 801ea64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ea66:	6063      	str	r3, [r4, #4]
 801ea68:	441a      	add	r2, r3
 801ea6a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ea6c:	9228      	str	r2, [sp, #160]	@ 0xa0
 801ea6e:	3301      	adds	r3, #1
 801ea70:	2b07      	cmp	r3, #7
 801ea72:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ea74:	dc3b      	bgt.n	801eaee <_svfprintf_r+0xe96>
 801ea76:	f104 0308 	add.w	r3, r4, #8
 801ea7a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ea7c:	2e00      	cmp	r6, #0
 801ea7e:	da1b      	bge.n	801eab8 <_svfprintf_r+0xe60>
 801ea80:	4f2a      	ldr	r7, [pc, #168]	@ (801eb2c <_svfprintf_r+0xed4>)
 801ea82:	4276      	negs	r6, r6
 801ea84:	461a      	mov	r2, r3
 801ea86:	2410      	movs	r4, #16
 801ea88:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 801ea8c:	2e10      	cmp	r6, #16
 801ea8e:	f101 0101 	add.w	r1, r1, #1
 801ea92:	f103 0308 	add.w	r3, r3, #8
 801ea96:	6017      	str	r7, [r2, #0]
 801ea98:	dc33      	bgt.n	801eb02 <_svfprintf_r+0xeaa>
 801ea9a:	6056      	str	r6, [r2, #4]
 801ea9c:	2907      	cmp	r1, #7
 801ea9e:	4406      	add	r6, r0
 801eaa0:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 801eaa4:	dd08      	ble.n	801eab8 <_svfprintf_r+0xe60>
 801eaa6:	9803      	ldr	r0, [sp, #12]
 801eaa8:	aa26      	add	r2, sp, #152	@ 0x98
 801eaaa:	4659      	mov	r1, fp
 801eaac:	f002 f948 	bl	8020d40 <__ssprint_r>
 801eab0:	2800      	cmp	r0, #0
 801eab2:	f040 824c 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801eab6:	ab29      	add	r3, sp, #164	@ 0xa4
 801eab8:	9a04      	ldr	r2, [sp, #16]
 801eaba:	9904      	ldr	r1, [sp, #16]
 801eabc:	605a      	str	r2, [r3, #4]
 801eabe:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801eac0:	f8c3 9000 	str.w	r9, [r3]
 801eac4:	440a      	add	r2, r1
 801eac6:	9228      	str	r2, [sp, #160]	@ 0xa0
 801eac8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801eaca:	3201      	adds	r2, #1
 801eacc:	2a07      	cmp	r2, #7
 801eace:	9227      	str	r2, [sp, #156]	@ 0x9c
 801ead0:	f73f af7c 	bgt.w	801e9cc <_svfprintf_r+0xd74>
 801ead4:	f103 0408 	add.w	r4, r3, #8
 801ead8:	e4c8      	b.n	801e46c <_svfprintf_r+0x814>
 801eada:	9803      	ldr	r0, [sp, #12]
 801eadc:	aa26      	add	r2, sp, #152	@ 0x98
 801eade:	4659      	mov	r1, fp
 801eae0:	f002 f92e 	bl	8020d40 <__ssprint_r>
 801eae4:	2800      	cmp	r0, #0
 801eae6:	f040 8232 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801eaea:	ac29      	add	r4, sp, #164	@ 0xa4
 801eaec:	e7af      	b.n	801ea4e <_svfprintf_r+0xdf6>
 801eaee:	9803      	ldr	r0, [sp, #12]
 801eaf0:	aa26      	add	r2, sp, #152	@ 0x98
 801eaf2:	4659      	mov	r1, fp
 801eaf4:	f002 f924 	bl	8020d40 <__ssprint_r>
 801eaf8:	2800      	cmp	r0, #0
 801eafa:	f040 8228 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801eafe:	ab29      	add	r3, sp, #164	@ 0xa4
 801eb00:	e7bb      	b.n	801ea7a <_svfprintf_r+0xe22>
 801eb02:	3010      	adds	r0, #16
 801eb04:	2907      	cmp	r1, #7
 801eb06:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 801eb0a:	6054      	str	r4, [r2, #4]
 801eb0c:	dd08      	ble.n	801eb20 <_svfprintf_r+0xec8>
 801eb0e:	9803      	ldr	r0, [sp, #12]
 801eb10:	aa26      	add	r2, sp, #152	@ 0x98
 801eb12:	4659      	mov	r1, fp
 801eb14:	f002 f914 	bl	8020d40 <__ssprint_r>
 801eb18:	2800      	cmp	r0, #0
 801eb1a:	f040 8218 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801eb1e:	ab29      	add	r3, sp, #164	@ 0xa4
 801eb20:	3e10      	subs	r6, #16
 801eb22:	461a      	mov	r2, r3
 801eb24:	e7b0      	b.n	801ea88 <_svfprintf_r+0xe30>
 801eb26:	bf00      	nop
 801eb28:	08022ff4 	.word	0x08022ff4
 801eb2c:	08022ff6 	.word	0x08022ff6
 801eb30:	9b04      	ldr	r3, [sp, #16]
 801eb32:	444b      	add	r3, r9
 801eb34:	9306      	str	r3, [sp, #24]
 801eb36:	9b04      	ldr	r3, [sp, #16]
 801eb38:	42b3      	cmp	r3, r6
 801eb3a:	bfa8      	it	ge
 801eb3c:	4633      	movge	r3, r6
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	4698      	mov	r8, r3
 801eb42:	dd0b      	ble.n	801eb5c <_svfprintf_r+0xf04>
 801eb44:	e9c4 9300 	strd	r9, r3, [r4]
 801eb48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eb4a:	4443      	add	r3, r8
 801eb4c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801eb4e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eb50:	3301      	adds	r3, #1
 801eb52:	2b07      	cmp	r3, #7
 801eb54:	9327      	str	r3, [sp, #156]	@ 0x9c
 801eb56:	f300 8089 	bgt.w	801ec6c <_svfprintf_r+0x1014>
 801eb5a:	3408      	adds	r4, #8
 801eb5c:	4643      	mov	r3, r8
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	bfac      	ite	ge
 801eb62:	eba6 0808 	subge.w	r8, r6, r8
 801eb66:	46b0      	movlt	r8, r6
 801eb68:	f1b8 0f00 	cmp.w	r8, #0
 801eb6c:	dd1b      	ble.n	801eba6 <_svfprintf_r+0xf4e>
 801eb6e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 801eb72:	4897      	ldr	r0, [pc, #604]	@ (801edd0 <_svfprintf_r+0x1178>)
 801eb74:	6020      	str	r0, [r4, #0]
 801eb76:	f1b8 0f10 	cmp.w	r8, #16
 801eb7a:	f102 0201 	add.w	r2, r2, #1
 801eb7e:	f104 0108 	add.w	r1, r4, #8
 801eb82:	dc7d      	bgt.n	801ec80 <_svfprintf_r+0x1028>
 801eb84:	4443      	add	r3, r8
 801eb86:	2a07      	cmp	r2, #7
 801eb88:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801eb8c:	f8c4 8004 	str.w	r8, [r4, #4]
 801eb90:	f340 808a 	ble.w	801eca8 <_svfprintf_r+0x1050>
 801eb94:	9803      	ldr	r0, [sp, #12]
 801eb96:	aa26      	add	r2, sp, #152	@ 0x98
 801eb98:	4659      	mov	r1, fp
 801eb9a:	f002 f8d1 	bl	8020d40 <__ssprint_r>
 801eb9e:	2800      	cmp	r0, #0
 801eba0:	f040 81d5 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801eba4:	ac29      	add	r4, sp, #164	@ 0xa4
 801eba6:	eb09 0806 	add.w	r8, r9, r6
 801ebaa:	056e      	lsls	r6, r5, #21
 801ebac:	d508      	bpl.n	801ebc0 <_svfprintf_r+0xf68>
 801ebae:	9b08      	ldr	r3, [sp, #32]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	d17b      	bne.n	801ecac <_svfprintf_r+0x1054>
 801ebb4:	2f00      	cmp	r7, #0
 801ebb6:	d17b      	bne.n	801ecb0 <_svfprintf_r+0x1058>
 801ebb8:	9b06      	ldr	r3, [sp, #24]
 801ebba:	4598      	cmp	r8, r3
 801ebbc:	bf28      	it	cs
 801ebbe:	4698      	movcs	r8, r3
 801ebc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ebc2:	9a04      	ldr	r2, [sp, #16]
 801ebc4:	4293      	cmp	r3, r2
 801ebc6:	db01      	blt.n	801ebcc <_svfprintf_r+0xf74>
 801ebc8:	07e8      	lsls	r0, r5, #31
 801ebca:	d50e      	bpl.n	801ebea <_svfprintf_r+0xf92>
 801ebcc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ebce:	6023      	str	r3, [r4, #0]
 801ebd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ebd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ebd4:	6063      	str	r3, [r4, #4]
 801ebd6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ebd8:	4413      	add	r3, r2
 801ebda:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ebdc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ebde:	3301      	adds	r3, #1
 801ebe0:	2b07      	cmp	r3, #7
 801ebe2:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ebe4:	f300 80df 	bgt.w	801eda6 <_svfprintf_r+0x114e>
 801ebe8:	3408      	adds	r4, #8
 801ebea:	9b04      	ldr	r3, [sp, #16]
 801ebec:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 801ebee:	1bdf      	subs	r7, r3, r7
 801ebf0:	9b06      	ldr	r3, [sp, #24]
 801ebf2:	eba3 0308 	sub.w	r3, r3, r8
 801ebf6:	429f      	cmp	r7, r3
 801ebf8:	bfa8      	it	ge
 801ebfa:	461f      	movge	r7, r3
 801ebfc:	2f00      	cmp	r7, #0
 801ebfe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ec00:	dd0a      	ble.n	801ec18 <_svfprintf_r+0xfc0>
 801ec02:	443b      	add	r3, r7
 801ec04:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ec06:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ec08:	3301      	adds	r3, #1
 801ec0a:	2b07      	cmp	r3, #7
 801ec0c:	e9c4 8700 	strd	r8, r7, [r4]
 801ec10:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ec12:	f300 80d2 	bgt.w	801edba <_svfprintf_r+0x1162>
 801ec16:	3408      	adds	r4, #8
 801ec18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ec1a:	9b04      	ldr	r3, [sp, #16]
 801ec1c:	2f00      	cmp	r7, #0
 801ec1e:	eba3 0606 	sub.w	r6, r3, r6
 801ec22:	bfa8      	it	ge
 801ec24:	1bf6      	subge	r6, r6, r7
 801ec26:	2e00      	cmp	r6, #0
 801ec28:	f77f ac20 	ble.w	801e46c <_svfprintf_r+0x814>
 801ec2c:	4f68      	ldr	r7, [pc, #416]	@ (801edd0 <_svfprintf_r+0x1178>)
 801ec2e:	f04f 0810 	mov.w	r8, #16
 801ec32:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ec36:	2e10      	cmp	r6, #16
 801ec38:	f103 0301 	add.w	r3, r3, #1
 801ec3c:	f104 0108 	add.w	r1, r4, #8
 801ec40:	6027      	str	r7, [r4, #0]
 801ec42:	f77f aebc 	ble.w	801e9be <_svfprintf_r+0xd66>
 801ec46:	3210      	adds	r2, #16
 801ec48:	2b07      	cmp	r3, #7
 801ec4a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ec4e:	f8c4 8004 	str.w	r8, [r4, #4]
 801ec52:	dd08      	ble.n	801ec66 <_svfprintf_r+0x100e>
 801ec54:	9803      	ldr	r0, [sp, #12]
 801ec56:	aa26      	add	r2, sp, #152	@ 0x98
 801ec58:	4659      	mov	r1, fp
 801ec5a:	f002 f871 	bl	8020d40 <__ssprint_r>
 801ec5e:	2800      	cmp	r0, #0
 801ec60:	f040 8175 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ec64:	a929      	add	r1, sp, #164	@ 0xa4
 801ec66:	3e10      	subs	r6, #16
 801ec68:	460c      	mov	r4, r1
 801ec6a:	e7e2      	b.n	801ec32 <_svfprintf_r+0xfda>
 801ec6c:	9803      	ldr	r0, [sp, #12]
 801ec6e:	aa26      	add	r2, sp, #152	@ 0x98
 801ec70:	4659      	mov	r1, fp
 801ec72:	f002 f865 	bl	8020d40 <__ssprint_r>
 801ec76:	2800      	cmp	r0, #0
 801ec78:	f040 8169 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ec7c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ec7e:	e76d      	b.n	801eb5c <_svfprintf_r+0xf04>
 801ec80:	2010      	movs	r0, #16
 801ec82:	4403      	add	r3, r0
 801ec84:	2a07      	cmp	r2, #7
 801ec86:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801ec8a:	6060      	str	r0, [r4, #4]
 801ec8c:	dd08      	ble.n	801eca0 <_svfprintf_r+0x1048>
 801ec8e:	9803      	ldr	r0, [sp, #12]
 801ec90:	aa26      	add	r2, sp, #152	@ 0x98
 801ec92:	4659      	mov	r1, fp
 801ec94:	f002 f854 	bl	8020d40 <__ssprint_r>
 801ec98:	2800      	cmp	r0, #0
 801ec9a:	f040 8158 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ec9e:	a929      	add	r1, sp, #164	@ 0xa4
 801eca0:	f1a8 0810 	sub.w	r8, r8, #16
 801eca4:	460c      	mov	r4, r1
 801eca6:	e762      	b.n	801eb6e <_svfprintf_r+0xf16>
 801eca8:	460c      	mov	r4, r1
 801ecaa:	e77c      	b.n	801eba6 <_svfprintf_r+0xf4e>
 801ecac:	2f00      	cmp	r7, #0
 801ecae:	d04a      	beq.n	801ed46 <_svfprintf_r+0x10ee>
 801ecb0:	3f01      	subs	r7, #1
 801ecb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ecb4:	6023      	str	r3, [r4, #0]
 801ecb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ecb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ecba:	6063      	str	r3, [r4, #4]
 801ecbc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ecbe:	4413      	add	r3, r2
 801ecc0:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ecc2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ecc4:	3301      	adds	r3, #1
 801ecc6:	2b07      	cmp	r3, #7
 801ecc8:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ecca:	dc43      	bgt.n	801ed54 <_svfprintf_r+0x10fc>
 801eccc:	3408      	adds	r4, #8
 801ecce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecd0:	781a      	ldrb	r2, [r3, #0]
 801ecd2:	9b06      	ldr	r3, [sp, #24]
 801ecd4:	eba3 0308 	sub.w	r3, r3, r8
 801ecd8:	429a      	cmp	r2, r3
 801ecda:	bfa8      	it	ge
 801ecdc:	461a      	movge	r2, r3
 801ecde:	2a00      	cmp	r2, #0
 801ece0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ece2:	4691      	mov	r9, r2
 801ece4:	dd09      	ble.n	801ecfa <_svfprintf_r+0x10a2>
 801ece6:	4413      	add	r3, r2
 801ece8:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ecea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ecec:	3301      	adds	r3, #1
 801ecee:	2b07      	cmp	r3, #7
 801ecf0:	e9c4 8200 	strd	r8, r2, [r4]
 801ecf4:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ecf6:	dc37      	bgt.n	801ed68 <_svfprintf_r+0x1110>
 801ecf8:	3408      	adds	r4, #8
 801ecfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecfc:	781e      	ldrb	r6, [r3, #0]
 801ecfe:	f1b9 0f00 	cmp.w	r9, #0
 801ed02:	bfa8      	it	ge
 801ed04:	eba6 0609 	subge.w	r6, r6, r9
 801ed08:	2e00      	cmp	r6, #0
 801ed0a:	dd18      	ble.n	801ed3e <_svfprintf_r+0x10e6>
 801ed0c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ed10:	482f      	ldr	r0, [pc, #188]	@ (801edd0 <_svfprintf_r+0x1178>)
 801ed12:	6020      	str	r0, [r4, #0]
 801ed14:	2e10      	cmp	r6, #16
 801ed16:	f103 0301 	add.w	r3, r3, #1
 801ed1a:	f104 0108 	add.w	r1, r4, #8
 801ed1e:	dc2d      	bgt.n	801ed7c <_svfprintf_r+0x1124>
 801ed20:	6066      	str	r6, [r4, #4]
 801ed22:	2b07      	cmp	r3, #7
 801ed24:	4416      	add	r6, r2
 801ed26:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 801ed2a:	dd3a      	ble.n	801eda2 <_svfprintf_r+0x114a>
 801ed2c:	9803      	ldr	r0, [sp, #12]
 801ed2e:	aa26      	add	r2, sp, #152	@ 0x98
 801ed30:	4659      	mov	r1, fp
 801ed32:	f002 f805 	bl	8020d40 <__ssprint_r>
 801ed36:	2800      	cmp	r0, #0
 801ed38:	f040 8109 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ed3c:	ac29      	add	r4, sp, #164	@ 0xa4
 801ed3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed40:	781b      	ldrb	r3, [r3, #0]
 801ed42:	4498      	add	r8, r3
 801ed44:	e733      	b.n	801ebae <_svfprintf_r+0xf56>
 801ed46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed48:	3b01      	subs	r3, #1
 801ed4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed4c:	9b08      	ldr	r3, [sp, #32]
 801ed4e:	3b01      	subs	r3, #1
 801ed50:	9308      	str	r3, [sp, #32]
 801ed52:	e7ae      	b.n	801ecb2 <_svfprintf_r+0x105a>
 801ed54:	9803      	ldr	r0, [sp, #12]
 801ed56:	aa26      	add	r2, sp, #152	@ 0x98
 801ed58:	4659      	mov	r1, fp
 801ed5a:	f001 fff1 	bl	8020d40 <__ssprint_r>
 801ed5e:	2800      	cmp	r0, #0
 801ed60:	f040 80f5 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ed64:	ac29      	add	r4, sp, #164	@ 0xa4
 801ed66:	e7b2      	b.n	801ecce <_svfprintf_r+0x1076>
 801ed68:	9803      	ldr	r0, [sp, #12]
 801ed6a:	aa26      	add	r2, sp, #152	@ 0x98
 801ed6c:	4659      	mov	r1, fp
 801ed6e:	f001 ffe7 	bl	8020d40 <__ssprint_r>
 801ed72:	2800      	cmp	r0, #0
 801ed74:	f040 80eb 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ed78:	ac29      	add	r4, sp, #164	@ 0xa4
 801ed7a:	e7be      	b.n	801ecfa <_svfprintf_r+0x10a2>
 801ed7c:	2010      	movs	r0, #16
 801ed7e:	4402      	add	r2, r0
 801ed80:	2b07      	cmp	r3, #7
 801ed82:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ed86:	6060      	str	r0, [r4, #4]
 801ed88:	dd08      	ble.n	801ed9c <_svfprintf_r+0x1144>
 801ed8a:	9803      	ldr	r0, [sp, #12]
 801ed8c:	aa26      	add	r2, sp, #152	@ 0x98
 801ed8e:	4659      	mov	r1, fp
 801ed90:	f001 ffd6 	bl	8020d40 <__ssprint_r>
 801ed94:	2800      	cmp	r0, #0
 801ed96:	f040 80da 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ed9a:	a929      	add	r1, sp, #164	@ 0xa4
 801ed9c:	3e10      	subs	r6, #16
 801ed9e:	460c      	mov	r4, r1
 801eda0:	e7b4      	b.n	801ed0c <_svfprintf_r+0x10b4>
 801eda2:	460c      	mov	r4, r1
 801eda4:	e7cb      	b.n	801ed3e <_svfprintf_r+0x10e6>
 801eda6:	9803      	ldr	r0, [sp, #12]
 801eda8:	aa26      	add	r2, sp, #152	@ 0x98
 801edaa:	4659      	mov	r1, fp
 801edac:	f001 ffc8 	bl	8020d40 <__ssprint_r>
 801edb0:	2800      	cmp	r0, #0
 801edb2:	f040 80cc 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801edb6:	ac29      	add	r4, sp, #164	@ 0xa4
 801edb8:	e717      	b.n	801ebea <_svfprintf_r+0xf92>
 801edba:	9803      	ldr	r0, [sp, #12]
 801edbc:	aa26      	add	r2, sp, #152	@ 0x98
 801edbe:	4659      	mov	r1, fp
 801edc0:	f001 ffbe 	bl	8020d40 <__ssprint_r>
 801edc4:	2800      	cmp	r0, #0
 801edc6:	f040 80c2 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801edca:	ac29      	add	r4, sp, #164	@ 0xa4
 801edcc:	e724      	b.n	801ec18 <_svfprintf_r+0xfc0>
 801edce:	bf00      	nop
 801edd0:	08022ff6 	.word	0x08022ff6
 801edd4:	9904      	ldr	r1, [sp, #16]
 801edd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801edd8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801edda:	2901      	cmp	r1, #1
 801eddc:	f103 0301 	add.w	r3, r3, #1
 801ede0:	f102 0201 	add.w	r2, r2, #1
 801ede4:	f104 0608 	add.w	r6, r4, #8
 801ede8:	dc02      	bgt.n	801edf0 <_svfprintf_r+0x1198>
 801edea:	07e9      	lsls	r1, r5, #31
 801edec:	f140 8083 	bpl.w	801eef6 <_svfprintf_r+0x129e>
 801edf0:	2101      	movs	r1, #1
 801edf2:	2a07      	cmp	r2, #7
 801edf4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801edf8:	f8c4 9000 	str.w	r9, [r4]
 801edfc:	6061      	str	r1, [r4, #4]
 801edfe:	dd08      	ble.n	801ee12 <_svfprintf_r+0x11ba>
 801ee00:	9803      	ldr	r0, [sp, #12]
 801ee02:	aa26      	add	r2, sp, #152	@ 0x98
 801ee04:	4659      	mov	r1, fp
 801ee06:	f001 ff9b 	bl	8020d40 <__ssprint_r>
 801ee0a:	2800      	cmp	r0, #0
 801ee0c:	f040 809f 	bne.w	801ef4e <_svfprintf_r+0x12f6>
 801ee10:	ae29      	add	r6, sp, #164	@ 0xa4
 801ee12:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ee14:	6033      	str	r3, [r6, #0]
 801ee16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ee18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ee1a:	6073      	str	r3, [r6, #4]
 801ee1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ee1e:	4413      	add	r3, r2
 801ee20:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ee22:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ee24:	3301      	adds	r3, #1
 801ee26:	2b07      	cmp	r3, #7
 801ee28:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ee2a:	dc33      	bgt.n	801ee94 <_svfprintf_r+0x123c>
 801ee2c:	3608      	adds	r6, #8
 801ee2e:	9b04      	ldr	r3, [sp, #16]
 801ee30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ee34:	1e5c      	subs	r4, r3, #1
 801ee36:	2200      	movs	r2, #0
 801ee38:	2300      	movs	r3, #0
 801ee3a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 801ee3e:	f7e1 fe53 	bl	8000ae8 <__aeabi_dcmpeq>
 801ee42:	2800      	cmp	r0, #0
 801ee44:	d12f      	bne.n	801eea6 <_svfprintf_r+0x124e>
 801ee46:	f109 0201 	add.w	r2, r9, #1
 801ee4a:	e9c6 2400 	strd	r2, r4, [r6]
 801ee4e:	9a04      	ldr	r2, [sp, #16]
 801ee50:	f108 0301 	add.w	r3, r8, #1
 801ee54:	3f01      	subs	r7, #1
 801ee56:	4417      	add	r7, r2
 801ee58:	2b07      	cmp	r3, #7
 801ee5a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 801ee5e:	dd53      	ble.n	801ef08 <_svfprintf_r+0x12b0>
 801ee60:	9803      	ldr	r0, [sp, #12]
 801ee62:	aa26      	add	r2, sp, #152	@ 0x98
 801ee64:	4659      	mov	r1, fp
 801ee66:	f001 ff6b 	bl	8020d40 <__ssprint_r>
 801ee6a:	2800      	cmp	r0, #0
 801ee6c:	d16f      	bne.n	801ef4e <_svfprintf_r+0x12f6>
 801ee6e:	ae29      	add	r6, sp, #164	@ 0xa4
 801ee70:	ab22      	add	r3, sp, #136	@ 0x88
 801ee72:	6033      	str	r3, [r6, #0]
 801ee74:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ee76:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ee78:	6073      	str	r3, [r6, #4]
 801ee7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ee7c:	4413      	add	r3, r2
 801ee7e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ee80:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ee82:	3301      	adds	r3, #1
 801ee84:	2b07      	cmp	r3, #7
 801ee86:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ee88:	f73f ada0 	bgt.w	801e9cc <_svfprintf_r+0xd74>
 801ee8c:	f106 0408 	add.w	r4, r6, #8
 801ee90:	f7ff baec 	b.w	801e46c <_svfprintf_r+0x814>
 801ee94:	9803      	ldr	r0, [sp, #12]
 801ee96:	aa26      	add	r2, sp, #152	@ 0x98
 801ee98:	4659      	mov	r1, fp
 801ee9a:	f001 ff51 	bl	8020d40 <__ssprint_r>
 801ee9e:	2800      	cmp	r0, #0
 801eea0:	d155      	bne.n	801ef4e <_svfprintf_r+0x12f6>
 801eea2:	ae29      	add	r6, sp, #164	@ 0xa4
 801eea4:	e7c3      	b.n	801ee2e <_svfprintf_r+0x11d6>
 801eea6:	9b04      	ldr	r3, [sp, #16]
 801eea8:	2b01      	cmp	r3, #1
 801eeaa:	dde1      	ble.n	801ee70 <_svfprintf_r+0x1218>
 801eeac:	4f57      	ldr	r7, [pc, #348]	@ (801f00c <_svfprintf_r+0x13b4>)
 801eeae:	f04f 0810 	mov.w	r8, #16
 801eeb2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801eeb6:	2c10      	cmp	r4, #16
 801eeb8:	f103 0301 	add.w	r3, r3, #1
 801eebc:	f106 0108 	add.w	r1, r6, #8
 801eec0:	6037      	str	r7, [r6, #0]
 801eec2:	dc07      	bgt.n	801eed4 <_svfprintf_r+0x127c>
 801eec4:	6074      	str	r4, [r6, #4]
 801eec6:	2b07      	cmp	r3, #7
 801eec8:	4414      	add	r4, r2
 801eeca:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 801eece:	dcc7      	bgt.n	801ee60 <_svfprintf_r+0x1208>
 801eed0:	460e      	mov	r6, r1
 801eed2:	e7cd      	b.n	801ee70 <_svfprintf_r+0x1218>
 801eed4:	3210      	adds	r2, #16
 801eed6:	2b07      	cmp	r3, #7
 801eed8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801eedc:	f8c6 8004 	str.w	r8, [r6, #4]
 801eee0:	dd06      	ble.n	801eef0 <_svfprintf_r+0x1298>
 801eee2:	9803      	ldr	r0, [sp, #12]
 801eee4:	aa26      	add	r2, sp, #152	@ 0x98
 801eee6:	4659      	mov	r1, fp
 801eee8:	f001 ff2a 	bl	8020d40 <__ssprint_r>
 801eeec:	bb78      	cbnz	r0, 801ef4e <_svfprintf_r+0x12f6>
 801eeee:	a929      	add	r1, sp, #164	@ 0xa4
 801eef0:	3c10      	subs	r4, #16
 801eef2:	460e      	mov	r6, r1
 801eef4:	e7dd      	b.n	801eeb2 <_svfprintf_r+0x125a>
 801eef6:	2101      	movs	r1, #1
 801eef8:	2a07      	cmp	r2, #7
 801eefa:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 801eefe:	f8c4 9000 	str.w	r9, [r4]
 801ef02:	6061      	str	r1, [r4, #4]
 801ef04:	ddb4      	ble.n	801ee70 <_svfprintf_r+0x1218>
 801ef06:	e7ab      	b.n	801ee60 <_svfprintf_r+0x1208>
 801ef08:	3608      	adds	r6, #8
 801ef0a:	e7b1      	b.n	801ee70 <_svfprintf_r+0x1218>
 801ef0c:	460c      	mov	r4, r1
 801ef0e:	f7ff baad 	b.w	801e46c <_svfprintf_r+0x814>
 801ef12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef14:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ef16:	1a9d      	subs	r5, r3, r2
 801ef18:	2d00      	cmp	r5, #0
 801ef1a:	f77f aaaa 	ble.w	801e472 <_svfprintf_r+0x81a>
 801ef1e:	4e3c      	ldr	r6, [pc, #240]	@ (801f010 <_svfprintf_r+0x13b8>)
 801ef20:	2710      	movs	r7, #16
 801ef22:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 801ef26:	2d10      	cmp	r5, #16
 801ef28:	f103 0301 	add.w	r3, r3, #1
 801ef2c:	6026      	str	r6, [r4, #0]
 801ef2e:	dc18      	bgt.n	801ef62 <_svfprintf_r+0x130a>
 801ef30:	442a      	add	r2, r5
 801ef32:	2b07      	cmp	r3, #7
 801ef34:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ef38:	6065      	str	r5, [r4, #4]
 801ef3a:	f77f aa9a 	ble.w	801e472 <_svfprintf_r+0x81a>
 801ef3e:	9803      	ldr	r0, [sp, #12]
 801ef40:	aa26      	add	r2, sp, #152	@ 0x98
 801ef42:	4659      	mov	r1, fp
 801ef44:	f001 fefc 	bl	8020d40 <__ssprint_r>
 801ef48:	2800      	cmp	r0, #0
 801ef4a:	f43f aa92 	beq.w	801e472 <_svfprintf_r+0x81a>
 801ef4e:	f1ba 0f00 	cmp.w	sl, #0
 801ef52:	f43f a89a 	beq.w	801e08a <_svfprintf_r+0x432>
 801ef56:	9803      	ldr	r0, [sp, #12]
 801ef58:	4651      	mov	r1, sl
 801ef5a:	f7fd fd27 	bl	801c9ac <_free_r>
 801ef5e:	f7ff b894 	b.w	801e08a <_svfprintf_r+0x432>
 801ef62:	3210      	adds	r2, #16
 801ef64:	2b07      	cmp	r3, #7
 801ef66:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 801ef6a:	6067      	str	r7, [r4, #4]
 801ef6c:	dc02      	bgt.n	801ef74 <_svfprintf_r+0x131c>
 801ef6e:	3408      	adds	r4, #8
 801ef70:	3d10      	subs	r5, #16
 801ef72:	e7d6      	b.n	801ef22 <_svfprintf_r+0x12ca>
 801ef74:	9803      	ldr	r0, [sp, #12]
 801ef76:	aa26      	add	r2, sp, #152	@ 0x98
 801ef78:	4659      	mov	r1, fp
 801ef7a:	f001 fee1 	bl	8020d40 <__ssprint_r>
 801ef7e:	2800      	cmp	r0, #0
 801ef80:	d1e5      	bne.n	801ef4e <_svfprintf_r+0x12f6>
 801ef82:	ac29      	add	r4, sp, #164	@ 0xa4
 801ef84:	e7f4      	b.n	801ef70 <_svfprintf_r+0x1318>
 801ef86:	9803      	ldr	r0, [sp, #12]
 801ef88:	4651      	mov	r1, sl
 801ef8a:	f7fd fd0f 	bl	801c9ac <_free_r>
 801ef8e:	f7ff ba88 	b.w	801e4a2 <_svfprintf_r+0x84a>
 801ef92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ef94:	2b00      	cmp	r3, #0
 801ef96:	f43f a878 	beq.w	801e08a <_svfprintf_r+0x432>
 801ef9a:	9803      	ldr	r0, [sp, #12]
 801ef9c:	aa26      	add	r2, sp, #152	@ 0x98
 801ef9e:	4659      	mov	r1, fp
 801efa0:	f001 fece 	bl	8020d40 <__ssprint_r>
 801efa4:	f7ff b871 	b.w	801e08a <_svfprintf_r+0x432>
 801efa8:	ea56 0207 	orrs.w	r2, r6, r7
 801efac:	9508      	str	r5, [sp, #32]
 801efae:	f43f ab7a 	beq.w	801e6a6 <_svfprintf_r+0xa4e>
 801efb2:	2b01      	cmp	r3, #1
 801efb4:	f43f abfb 	beq.w	801e7ae <_svfprintf_r+0xb56>
 801efb8:	2b02      	cmp	r3, #2
 801efba:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 801efbe:	f43f ac3f 	beq.w	801e840 <_svfprintf_r+0xbe8>
 801efc2:	f006 0307 	and.w	r3, r6, #7
 801efc6:	08f6      	lsrs	r6, r6, #3
 801efc8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 801efcc:	08ff      	lsrs	r7, r7, #3
 801efce:	3330      	adds	r3, #48	@ 0x30
 801efd0:	ea56 0107 	orrs.w	r1, r6, r7
 801efd4:	464a      	mov	r2, r9
 801efd6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 801efda:	d1f2      	bne.n	801efc2 <_svfprintf_r+0x136a>
 801efdc:	9908      	ldr	r1, [sp, #32]
 801efde:	07c8      	lsls	r0, r1, #31
 801efe0:	d506      	bpl.n	801eff0 <_svfprintf_r+0x1398>
 801efe2:	2b30      	cmp	r3, #48	@ 0x30
 801efe4:	d004      	beq.n	801eff0 <_svfprintf_r+0x1398>
 801efe6:	2330      	movs	r3, #48	@ 0x30
 801efe8:	f809 3c01 	strb.w	r3, [r9, #-1]
 801efec:	f1a2 0902 	sub.w	r9, r2, #2
 801eff0:	ab52      	add	r3, sp, #328	@ 0x148
 801eff2:	9d08      	ldr	r5, [sp, #32]
 801eff4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 801eff8:	f04f 0a00 	mov.w	sl, #0
 801effc:	eba3 0809 	sub.w	r8, r3, r9
 801f000:	4657      	mov	r7, sl
 801f002:	f8cd a020 	str.w	sl, [sp, #32]
 801f006:	4656      	mov	r6, sl
 801f008:	f7ff b97c 	b.w	801e304 <_svfprintf_r+0x6ac>
 801f00c:	08022ff6 	.word	0x08022ff6
 801f010:	08023006 	.word	0x08023006

0801f014 <_fclose_r>:
 801f014:	b570      	push	{r4, r5, r6, lr}
 801f016:	4605      	mov	r5, r0
 801f018:	460c      	mov	r4, r1
 801f01a:	b1b1      	cbz	r1, 801f04a <_fclose_r+0x36>
 801f01c:	b118      	cbz	r0, 801f026 <_fclose_r+0x12>
 801f01e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801f020:	b90b      	cbnz	r3, 801f026 <_fclose_r+0x12>
 801f022:	f7fc fcd3 	bl	801b9cc <__sinit>
 801f026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f028:	07de      	lsls	r6, r3, #31
 801f02a:	d405      	bmi.n	801f038 <_fclose_r+0x24>
 801f02c:	89a3      	ldrh	r3, [r4, #12]
 801f02e:	0598      	lsls	r0, r3, #22
 801f030:	d402      	bmi.n	801f038 <_fclose_r+0x24>
 801f032:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f034:	f7fd fc27 	bl	801c886 <__retarget_lock_acquire_recursive>
 801f038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f03c:	b943      	cbnz	r3, 801f050 <_fclose_r+0x3c>
 801f03e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f040:	07d9      	lsls	r1, r3, #31
 801f042:	d402      	bmi.n	801f04a <_fclose_r+0x36>
 801f044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f046:	f7fd fc20 	bl	801c88a <__retarget_lock_release_recursive>
 801f04a:	2600      	movs	r6, #0
 801f04c:	4630      	mov	r0, r6
 801f04e:	bd70      	pop	{r4, r5, r6, pc}
 801f050:	4621      	mov	r1, r4
 801f052:	4628      	mov	r0, r5
 801f054:	f7fc fb6c 	bl	801b730 <__sflush_r>
 801f058:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801f05a:	4606      	mov	r6, r0
 801f05c:	b133      	cbz	r3, 801f06c <_fclose_r+0x58>
 801f05e:	69e1      	ldr	r1, [r4, #28]
 801f060:	4628      	mov	r0, r5
 801f062:	4798      	blx	r3
 801f064:	2800      	cmp	r0, #0
 801f066:	bfb8      	it	lt
 801f068:	f04f 36ff 	movlt.w	r6, #4294967295
 801f06c:	89a3      	ldrh	r3, [r4, #12]
 801f06e:	061a      	lsls	r2, r3, #24
 801f070:	d503      	bpl.n	801f07a <_fclose_r+0x66>
 801f072:	6921      	ldr	r1, [r4, #16]
 801f074:	4628      	mov	r0, r5
 801f076:	f7fd fc99 	bl	801c9ac <_free_r>
 801f07a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801f07c:	b141      	cbz	r1, 801f090 <_fclose_r+0x7c>
 801f07e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801f082:	4299      	cmp	r1, r3
 801f084:	d002      	beq.n	801f08c <_fclose_r+0x78>
 801f086:	4628      	mov	r0, r5
 801f088:	f7fd fc90 	bl	801c9ac <_free_r>
 801f08c:	2300      	movs	r3, #0
 801f08e:	6323      	str	r3, [r4, #48]	@ 0x30
 801f090:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801f092:	b121      	cbz	r1, 801f09e <_fclose_r+0x8a>
 801f094:	4628      	mov	r0, r5
 801f096:	f7fd fc89 	bl	801c9ac <_free_r>
 801f09a:	2300      	movs	r3, #0
 801f09c:	6463      	str	r3, [r4, #68]	@ 0x44
 801f09e:	f7fc fc89 	bl	801b9b4 <__sfp_lock_acquire>
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	81a3      	strh	r3, [r4, #12]
 801f0a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f0a8:	07db      	lsls	r3, r3, #31
 801f0aa:	d402      	bmi.n	801f0b2 <_fclose_r+0x9e>
 801f0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0ae:	f7fd fbec 	bl	801c88a <__retarget_lock_release_recursive>
 801f0b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f0b4:	f7fd fbe5 	bl	801c882 <__retarget_lock_close_recursive>
 801f0b8:	f7fc fc82 	bl	801b9c0 <__sfp_lock_release>
 801f0bc:	e7c6      	b.n	801f04c <_fclose_r+0x38>

0801f0be <__sccl>:
 801f0be:	b570      	push	{r4, r5, r6, lr}
 801f0c0:	780b      	ldrb	r3, [r1, #0]
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	2b5e      	cmp	r3, #94	@ 0x5e
 801f0c6:	bf0b      	itete	eq
 801f0c8:	784b      	ldrbeq	r3, [r1, #1]
 801f0ca:	1c4a      	addne	r2, r1, #1
 801f0cc:	1c8a      	addeq	r2, r1, #2
 801f0ce:	2100      	movne	r1, #0
 801f0d0:	bf08      	it	eq
 801f0d2:	2101      	moveq	r1, #1
 801f0d4:	3801      	subs	r0, #1
 801f0d6:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801f0da:	f800 1f01 	strb.w	r1, [r0, #1]!
 801f0de:	42a8      	cmp	r0, r5
 801f0e0:	d1fb      	bne.n	801f0da <__sccl+0x1c>
 801f0e2:	b90b      	cbnz	r3, 801f0e8 <__sccl+0x2a>
 801f0e4:	1e50      	subs	r0, r2, #1
 801f0e6:	bd70      	pop	{r4, r5, r6, pc}
 801f0e8:	f081 0101 	eor.w	r1, r1, #1
 801f0ec:	54e1      	strb	r1, [r4, r3]
 801f0ee:	4610      	mov	r0, r2
 801f0f0:	4602      	mov	r2, r0
 801f0f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 801f0f6:	2d2d      	cmp	r5, #45	@ 0x2d
 801f0f8:	d005      	beq.n	801f106 <__sccl+0x48>
 801f0fa:	2d5d      	cmp	r5, #93	@ 0x5d
 801f0fc:	d016      	beq.n	801f12c <__sccl+0x6e>
 801f0fe:	2d00      	cmp	r5, #0
 801f100:	d0f1      	beq.n	801f0e6 <__sccl+0x28>
 801f102:	462b      	mov	r3, r5
 801f104:	e7f2      	b.n	801f0ec <__sccl+0x2e>
 801f106:	7846      	ldrb	r6, [r0, #1]
 801f108:	2e5d      	cmp	r6, #93	@ 0x5d
 801f10a:	d0fa      	beq.n	801f102 <__sccl+0x44>
 801f10c:	42b3      	cmp	r3, r6
 801f10e:	dcf8      	bgt.n	801f102 <__sccl+0x44>
 801f110:	3002      	adds	r0, #2
 801f112:	461a      	mov	r2, r3
 801f114:	3201      	adds	r2, #1
 801f116:	4296      	cmp	r6, r2
 801f118:	54a1      	strb	r1, [r4, r2]
 801f11a:	dcfb      	bgt.n	801f114 <__sccl+0x56>
 801f11c:	1af2      	subs	r2, r6, r3
 801f11e:	3a01      	subs	r2, #1
 801f120:	1c5d      	adds	r5, r3, #1
 801f122:	42b3      	cmp	r3, r6
 801f124:	bfa8      	it	ge
 801f126:	2200      	movge	r2, #0
 801f128:	18ab      	adds	r3, r5, r2
 801f12a:	e7e1      	b.n	801f0f0 <__sccl+0x32>
 801f12c:	4610      	mov	r0, r2
 801f12e:	e7da      	b.n	801f0e6 <__sccl+0x28>

0801f130 <__submore>:
 801f130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f134:	460c      	mov	r4, r1
 801f136:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 801f138:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 801f13c:	4299      	cmp	r1, r3
 801f13e:	d11d      	bne.n	801f17c <__submore+0x4c>
 801f140:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801f144:	f7fc f8ae 	bl	801b2a4 <_malloc_r>
 801f148:	b918      	cbnz	r0, 801f152 <__submore+0x22>
 801f14a:	f04f 30ff 	mov.w	r0, #4294967295
 801f14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f156:	6363      	str	r3, [r4, #52]	@ 0x34
 801f158:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 801f15c:	6320      	str	r0, [r4, #48]	@ 0x30
 801f15e:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801f162:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 801f166:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801f16a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801f16e:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801f172:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801f176:	6020      	str	r0, [r4, #0]
 801f178:	2000      	movs	r0, #0
 801f17a:	e7e8      	b.n	801f14e <__submore+0x1e>
 801f17c:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 801f17e:	0077      	lsls	r7, r6, #1
 801f180:	463a      	mov	r2, r7
 801f182:	f001 fa5b 	bl	802063c <_realloc_r>
 801f186:	4605      	mov	r5, r0
 801f188:	2800      	cmp	r0, #0
 801f18a:	d0de      	beq.n	801f14a <__submore+0x1a>
 801f18c:	eb00 0806 	add.w	r8, r0, r6
 801f190:	4601      	mov	r1, r0
 801f192:	4632      	mov	r2, r6
 801f194:	4640      	mov	r0, r8
 801f196:	f7fd fb8d 	bl	801c8b4 <memcpy>
 801f19a:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 801f19e:	f8c4 8000 	str.w	r8, [r4]
 801f1a2:	e7e9      	b.n	801f178 <__submore+0x48>

0801f1a4 <strncmp>:
 801f1a4:	b510      	push	{r4, lr}
 801f1a6:	b16a      	cbz	r2, 801f1c4 <strncmp+0x20>
 801f1a8:	3901      	subs	r1, #1
 801f1aa:	1884      	adds	r4, r0, r2
 801f1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f1b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801f1b4:	429a      	cmp	r2, r3
 801f1b6:	d103      	bne.n	801f1c0 <strncmp+0x1c>
 801f1b8:	42a0      	cmp	r0, r4
 801f1ba:	d001      	beq.n	801f1c0 <strncmp+0x1c>
 801f1bc:	2a00      	cmp	r2, #0
 801f1be:	d1f5      	bne.n	801f1ac <strncmp+0x8>
 801f1c0:	1ad0      	subs	r0, r2, r3
 801f1c2:	bd10      	pop	{r4, pc}
 801f1c4:	4610      	mov	r0, r2
 801f1c6:	e7fc      	b.n	801f1c2 <strncmp+0x1e>

0801f1c8 <strncpy>:
 801f1c8:	b510      	push	{r4, lr}
 801f1ca:	3901      	subs	r1, #1
 801f1cc:	4603      	mov	r3, r0
 801f1ce:	b132      	cbz	r2, 801f1de <strncpy+0x16>
 801f1d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f1d4:	f803 4b01 	strb.w	r4, [r3], #1
 801f1d8:	3a01      	subs	r2, #1
 801f1da:	2c00      	cmp	r4, #0
 801f1dc:	d1f7      	bne.n	801f1ce <strncpy+0x6>
 801f1de:	441a      	add	r2, r3
 801f1e0:	2100      	movs	r1, #0
 801f1e2:	4293      	cmp	r3, r2
 801f1e4:	d100      	bne.n	801f1e8 <strncpy+0x20>
 801f1e6:	bd10      	pop	{r4, pc}
 801f1e8:	f803 1b01 	strb.w	r1, [r3], #1
 801f1ec:	e7f9      	b.n	801f1e2 <strncpy+0x1a>
	...

0801f1f0 <__gettzinfo>:
 801f1f0:	4800      	ldr	r0, [pc, #0]	@ (801f1f4 <__gettzinfo+0x4>)
 801f1f2:	4770      	bx	lr
 801f1f4:	200007a0 	.word	0x200007a0

0801f1f8 <__locale_mb_cur_max>:
 801f1f8:	4b01      	ldr	r3, [pc, #4]	@ (801f200 <__locale_mb_cur_max+0x8>)
 801f1fa:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 801f1fe:	4770      	bx	lr
 801f200:	200007f8 	.word	0x200007f8

0801f204 <_localeconv_r>:
 801f204:	4800      	ldr	r0, [pc, #0]	@ (801f208 <_localeconv_r+0x4>)
 801f206:	4770      	bx	lr
 801f208:	200008e8 	.word	0x200008e8

0801f20c <__libc_fini_array>:
 801f20c:	b538      	push	{r3, r4, r5, lr}
 801f20e:	4d07      	ldr	r5, [pc, #28]	@ (801f22c <__libc_fini_array+0x20>)
 801f210:	4c07      	ldr	r4, [pc, #28]	@ (801f230 <__libc_fini_array+0x24>)
 801f212:	1b64      	subs	r4, r4, r5
 801f214:	10a4      	asrs	r4, r4, #2
 801f216:	b91c      	cbnz	r4, 801f220 <__libc_fini_array+0x14>
 801f218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f21c:	f003 b852 	b.w	80222c4 <_fini>
 801f220:	3c01      	subs	r4, #1
 801f222:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801f226:	4798      	blx	r3
 801f228:	e7f5      	b.n	801f216 <__libc_fini_array+0xa>
 801f22a:	bf00      	nop
 801f22c:	080233a8 	.word	0x080233a8
 801f230:	080233ac 	.word	0x080233ac

0801f234 <frexp>:
 801f234:	b570      	push	{r4, r5, r6, lr}
 801f236:	2100      	movs	r1, #0
 801f238:	ec55 4b10 	vmov	r4, r5, d0
 801f23c:	6001      	str	r1, [r0, #0]
 801f23e:	4915      	ldr	r1, [pc, #84]	@ (801f294 <frexp+0x60>)
 801f240:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801f244:	428a      	cmp	r2, r1
 801f246:	4606      	mov	r6, r0
 801f248:	462b      	mov	r3, r5
 801f24a:	d820      	bhi.n	801f28e <frexp+0x5a>
 801f24c:	4621      	mov	r1, r4
 801f24e:	4311      	orrs	r1, r2
 801f250:	d01d      	beq.n	801f28e <frexp+0x5a>
 801f252:	4911      	ldr	r1, [pc, #68]	@ (801f298 <frexp+0x64>)
 801f254:	4029      	ands	r1, r5
 801f256:	b961      	cbnz	r1, 801f272 <frexp+0x3e>
 801f258:	4b10      	ldr	r3, [pc, #64]	@ (801f29c <frexp+0x68>)
 801f25a:	2200      	movs	r2, #0
 801f25c:	4620      	mov	r0, r4
 801f25e:	4629      	mov	r1, r5
 801f260:	f7e1 f9da 	bl	8000618 <__aeabi_dmul>
 801f264:	460b      	mov	r3, r1
 801f266:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 801f26a:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 801f26e:	4604      	mov	r4, r0
 801f270:	6031      	str	r1, [r6, #0]
 801f272:	6831      	ldr	r1, [r6, #0]
 801f274:	1512      	asrs	r2, r2, #20
 801f276:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f27a:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 801f27e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f282:	4411      	add	r1, r2
 801f284:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 801f288:	6031      	str	r1, [r6, #0]
 801f28a:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 801f28e:	ec45 4b10 	vmov	d0, r4, r5
 801f292:	bd70      	pop	{r4, r5, r6, pc}
 801f294:	7fefffff 	.word	0x7fefffff
 801f298:	7ff00000 	.word	0x7ff00000
 801f29c:	43500000 	.word	0x43500000

0801f2a0 <__register_exitproc>:
 801f2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f2a4:	f8df a074 	ldr.w	sl, [pc, #116]	@ 801f31c <__register_exitproc+0x7c>
 801f2a8:	4606      	mov	r6, r0
 801f2aa:	f8da 0000 	ldr.w	r0, [sl]
 801f2ae:	4698      	mov	r8, r3
 801f2b0:	460f      	mov	r7, r1
 801f2b2:	4691      	mov	r9, r2
 801f2b4:	f7fd fae7 	bl	801c886 <__retarget_lock_acquire_recursive>
 801f2b8:	4b16      	ldr	r3, [pc, #88]	@ (801f314 <__register_exitproc+0x74>)
 801f2ba:	681c      	ldr	r4, [r3, #0]
 801f2bc:	b90c      	cbnz	r4, 801f2c2 <__register_exitproc+0x22>
 801f2be:	4c16      	ldr	r4, [pc, #88]	@ (801f318 <__register_exitproc+0x78>)
 801f2c0:	601c      	str	r4, [r3, #0]
 801f2c2:	6865      	ldr	r5, [r4, #4]
 801f2c4:	f8da 0000 	ldr.w	r0, [sl]
 801f2c8:	2d1f      	cmp	r5, #31
 801f2ca:	dd05      	ble.n	801f2d8 <__register_exitproc+0x38>
 801f2cc:	f7fd fadd 	bl	801c88a <__retarget_lock_release_recursive>
 801f2d0:	f04f 30ff 	mov.w	r0, #4294967295
 801f2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2d8:	b19e      	cbz	r6, 801f302 <__register_exitproc+0x62>
 801f2da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801f2de:	2201      	movs	r2, #1
 801f2e0:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801f2e4:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801f2e8:	40aa      	lsls	r2, r5
 801f2ea:	4313      	orrs	r3, r2
 801f2ec:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 801f2f0:	2e02      	cmp	r6, #2
 801f2f2:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801f2f6:	bf02      	ittt	eq
 801f2f8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 801f2fc:	4313      	orreq	r3, r2
 801f2fe:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801f302:	1c6b      	adds	r3, r5, #1
 801f304:	3502      	adds	r5, #2
 801f306:	6063      	str	r3, [r4, #4]
 801f308:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801f30c:	f7fd fabd 	bl	801c88a <__retarget_lock_release_recursive>
 801f310:	2000      	movs	r0, #0
 801f312:	e7df      	b.n	801f2d4 <__register_exitproc+0x34>
 801f314:	2000ce70 	.word	0x2000ce70
 801f318:	2000ce74 	.word	0x2000ce74
 801f31c:	20000798 	.word	0x20000798

0801f320 <quorem>:
 801f320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f324:	6903      	ldr	r3, [r0, #16]
 801f326:	690c      	ldr	r4, [r1, #16]
 801f328:	42a3      	cmp	r3, r4
 801f32a:	4607      	mov	r7, r0
 801f32c:	db7e      	blt.n	801f42c <quorem+0x10c>
 801f32e:	3c01      	subs	r4, #1
 801f330:	f101 0814 	add.w	r8, r1, #20
 801f334:	00a3      	lsls	r3, r4, #2
 801f336:	f100 0514 	add.w	r5, r0, #20
 801f33a:	9300      	str	r3, [sp, #0]
 801f33c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f340:	9301      	str	r3, [sp, #4]
 801f342:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f34a:	3301      	adds	r3, #1
 801f34c:	429a      	cmp	r2, r3
 801f34e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801f352:	fbb2 f6f3 	udiv	r6, r2, r3
 801f356:	d32e      	bcc.n	801f3b6 <quorem+0x96>
 801f358:	f04f 0a00 	mov.w	sl, #0
 801f35c:	46c4      	mov	ip, r8
 801f35e:	46ae      	mov	lr, r5
 801f360:	46d3      	mov	fp, sl
 801f362:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f366:	b298      	uxth	r0, r3
 801f368:	fb06 a000 	mla	r0, r6, r0, sl
 801f36c:	0c02      	lsrs	r2, r0, #16
 801f36e:	0c1b      	lsrs	r3, r3, #16
 801f370:	fb06 2303 	mla	r3, r6, r3, r2
 801f374:	f8de 2000 	ldr.w	r2, [lr]
 801f378:	b280      	uxth	r0, r0
 801f37a:	b292      	uxth	r2, r2
 801f37c:	1a12      	subs	r2, r2, r0
 801f37e:	445a      	add	r2, fp
 801f380:	f8de 0000 	ldr.w	r0, [lr]
 801f384:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f388:	b29b      	uxth	r3, r3
 801f38a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801f38e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801f392:	b292      	uxth	r2, r2
 801f394:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801f398:	45e1      	cmp	r9, ip
 801f39a:	f84e 2b04 	str.w	r2, [lr], #4
 801f39e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801f3a2:	d2de      	bcs.n	801f362 <quorem+0x42>
 801f3a4:	9b00      	ldr	r3, [sp, #0]
 801f3a6:	58eb      	ldr	r3, [r5, r3]
 801f3a8:	b92b      	cbnz	r3, 801f3b6 <quorem+0x96>
 801f3aa:	9b01      	ldr	r3, [sp, #4]
 801f3ac:	3b04      	subs	r3, #4
 801f3ae:	429d      	cmp	r5, r3
 801f3b0:	461a      	mov	r2, r3
 801f3b2:	d32f      	bcc.n	801f414 <quorem+0xf4>
 801f3b4:	613c      	str	r4, [r7, #16]
 801f3b6:	4638      	mov	r0, r7
 801f3b8:	f001 f830 	bl	802041c <__mcmp>
 801f3bc:	2800      	cmp	r0, #0
 801f3be:	db25      	blt.n	801f40c <quorem+0xec>
 801f3c0:	4629      	mov	r1, r5
 801f3c2:	2000      	movs	r0, #0
 801f3c4:	f858 2b04 	ldr.w	r2, [r8], #4
 801f3c8:	f8d1 c000 	ldr.w	ip, [r1]
 801f3cc:	fa1f fe82 	uxth.w	lr, r2
 801f3d0:	fa1f f38c 	uxth.w	r3, ip
 801f3d4:	eba3 030e 	sub.w	r3, r3, lr
 801f3d8:	4403      	add	r3, r0
 801f3da:	0c12      	lsrs	r2, r2, #16
 801f3dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801f3e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801f3e4:	b29b      	uxth	r3, r3
 801f3e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f3ea:	45c1      	cmp	r9, r8
 801f3ec:	f841 3b04 	str.w	r3, [r1], #4
 801f3f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 801f3f4:	d2e6      	bcs.n	801f3c4 <quorem+0xa4>
 801f3f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f3fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f3fe:	b922      	cbnz	r2, 801f40a <quorem+0xea>
 801f400:	3b04      	subs	r3, #4
 801f402:	429d      	cmp	r5, r3
 801f404:	461a      	mov	r2, r3
 801f406:	d30b      	bcc.n	801f420 <quorem+0x100>
 801f408:	613c      	str	r4, [r7, #16]
 801f40a:	3601      	adds	r6, #1
 801f40c:	4630      	mov	r0, r6
 801f40e:	b003      	add	sp, #12
 801f410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f414:	6812      	ldr	r2, [r2, #0]
 801f416:	3b04      	subs	r3, #4
 801f418:	2a00      	cmp	r2, #0
 801f41a:	d1cb      	bne.n	801f3b4 <quorem+0x94>
 801f41c:	3c01      	subs	r4, #1
 801f41e:	e7c6      	b.n	801f3ae <quorem+0x8e>
 801f420:	6812      	ldr	r2, [r2, #0]
 801f422:	3b04      	subs	r3, #4
 801f424:	2a00      	cmp	r2, #0
 801f426:	d1ef      	bne.n	801f408 <quorem+0xe8>
 801f428:	3c01      	subs	r4, #1
 801f42a:	e7ea      	b.n	801f402 <quorem+0xe2>
 801f42c:	2000      	movs	r0, #0
 801f42e:	e7ee      	b.n	801f40e <quorem+0xee>

0801f430 <_dtoa_r>:
 801f430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f434:	b099      	sub	sp, #100	@ 0x64
 801f436:	ed8d 0b02 	vstr	d0, [sp, #8]
 801f43a:	9109      	str	r1, [sp, #36]	@ 0x24
 801f43c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801f43e:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801f440:	920e      	str	r2, [sp, #56]	@ 0x38
 801f442:	ec55 4b10 	vmov	r4, r5, d0
 801f446:	4683      	mov	fp, r0
 801f448:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f44a:	b149      	cbz	r1, 801f460 <_dtoa_r+0x30>
 801f44c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f44e:	604a      	str	r2, [r1, #4]
 801f450:	2301      	movs	r3, #1
 801f452:	4093      	lsls	r3, r2
 801f454:	608b      	str	r3, [r1, #8]
 801f456:	f000 fdda 	bl	802000e <_Bfree>
 801f45a:	2300      	movs	r3, #0
 801f45c:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 801f460:	1e2b      	subs	r3, r5, #0
 801f462:	bfb9      	ittee	lt
 801f464:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801f468:	9303      	strlt	r3, [sp, #12]
 801f46a:	2300      	movge	r3, #0
 801f46c:	6033      	strge	r3, [r6, #0]
 801f46e:	9f03      	ldr	r7, [sp, #12]
 801f470:	4b97      	ldr	r3, [pc, #604]	@ (801f6d0 <_dtoa_r+0x2a0>)
 801f472:	bfbc      	itt	lt
 801f474:	2201      	movlt	r2, #1
 801f476:	6032      	strlt	r2, [r6, #0]
 801f478:	43bb      	bics	r3, r7
 801f47a:	d114      	bne.n	801f4a6 <_dtoa_r+0x76>
 801f47c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f47e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801f482:	6013      	str	r3, [r2, #0]
 801f484:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f488:	4323      	orrs	r3, r4
 801f48a:	f000 854c 	beq.w	801ff26 <_dtoa_r+0xaf6>
 801f48e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f490:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f6e8 <_dtoa_r+0x2b8>
 801f494:	b11b      	cbz	r3, 801f49e <_dtoa_r+0x6e>
 801f496:	f10a 0303 	add.w	r3, sl, #3
 801f49a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f49c:	6013      	str	r3, [r2, #0]
 801f49e:	4650      	mov	r0, sl
 801f4a0:	b019      	add	sp, #100	@ 0x64
 801f4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f4aa:	2200      	movs	r2, #0
 801f4ac:	ec51 0b17 	vmov	r0, r1, d7
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801f4b6:	f7e1 fb17 	bl	8000ae8 <__aeabi_dcmpeq>
 801f4ba:	4680      	mov	r8, r0
 801f4bc:	b150      	cbz	r0, 801f4d4 <_dtoa_r+0xa4>
 801f4be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f4c0:	2301      	movs	r3, #1
 801f4c2:	6013      	str	r3, [r2, #0]
 801f4c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f4c6:	b113      	cbz	r3, 801f4ce <_dtoa_r+0x9e>
 801f4c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f4ca:	4b82      	ldr	r3, [pc, #520]	@ (801f6d4 <_dtoa_r+0x2a4>)
 801f4cc:	6013      	str	r3, [r2, #0]
 801f4ce:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 801f6ec <_dtoa_r+0x2bc>
 801f4d2:	e7e4      	b.n	801f49e <_dtoa_r+0x6e>
 801f4d4:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801f4d8:	aa16      	add	r2, sp, #88	@ 0x58
 801f4da:	a917      	add	r1, sp, #92	@ 0x5c
 801f4dc:	4658      	mov	r0, fp
 801f4de:	f001 f84d 	bl	802057c <__d2b>
 801f4e2:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801f4e6:	4681      	mov	r9, r0
 801f4e8:	2e00      	cmp	r6, #0
 801f4ea:	d077      	beq.n	801f5dc <_dtoa_r+0x1ac>
 801f4ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f4ee:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801f4f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f4f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f4fa:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801f4fe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801f502:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801f506:	4619      	mov	r1, r3
 801f508:	2200      	movs	r2, #0
 801f50a:	4b73      	ldr	r3, [pc, #460]	@ (801f6d8 <_dtoa_r+0x2a8>)
 801f50c:	f7e0 fecc 	bl	80002a8 <__aeabi_dsub>
 801f510:	a369      	add	r3, pc, #420	@ (adr r3, 801f6b8 <_dtoa_r+0x288>)
 801f512:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f516:	f7e1 f87f 	bl	8000618 <__aeabi_dmul>
 801f51a:	a369      	add	r3, pc, #420	@ (adr r3, 801f6c0 <_dtoa_r+0x290>)
 801f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f520:	f7e0 fec4 	bl	80002ac <__adddf3>
 801f524:	4604      	mov	r4, r0
 801f526:	4630      	mov	r0, r6
 801f528:	460d      	mov	r5, r1
 801f52a:	f7e1 f80b 	bl	8000544 <__aeabi_i2d>
 801f52e:	a366      	add	r3, pc, #408	@ (adr r3, 801f6c8 <_dtoa_r+0x298>)
 801f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f534:	f7e1 f870 	bl	8000618 <__aeabi_dmul>
 801f538:	4602      	mov	r2, r0
 801f53a:	460b      	mov	r3, r1
 801f53c:	4620      	mov	r0, r4
 801f53e:	4629      	mov	r1, r5
 801f540:	f7e0 feb4 	bl	80002ac <__adddf3>
 801f544:	4604      	mov	r4, r0
 801f546:	460d      	mov	r5, r1
 801f548:	f7e1 fb16 	bl	8000b78 <__aeabi_d2iz>
 801f54c:	2200      	movs	r2, #0
 801f54e:	4607      	mov	r7, r0
 801f550:	2300      	movs	r3, #0
 801f552:	4620      	mov	r0, r4
 801f554:	4629      	mov	r1, r5
 801f556:	f7e1 fad1 	bl	8000afc <__aeabi_dcmplt>
 801f55a:	b140      	cbz	r0, 801f56e <_dtoa_r+0x13e>
 801f55c:	4638      	mov	r0, r7
 801f55e:	f7e0 fff1 	bl	8000544 <__aeabi_i2d>
 801f562:	4622      	mov	r2, r4
 801f564:	462b      	mov	r3, r5
 801f566:	f7e1 fabf 	bl	8000ae8 <__aeabi_dcmpeq>
 801f56a:	b900      	cbnz	r0, 801f56e <_dtoa_r+0x13e>
 801f56c:	3f01      	subs	r7, #1
 801f56e:	2f16      	cmp	r7, #22
 801f570:	d851      	bhi.n	801f616 <_dtoa_r+0x1e6>
 801f572:	4b5a      	ldr	r3, [pc, #360]	@ (801f6dc <_dtoa_r+0x2ac>)
 801f574:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f57c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f580:	f7e1 fabc 	bl	8000afc <__aeabi_dcmplt>
 801f584:	2800      	cmp	r0, #0
 801f586:	d048      	beq.n	801f61a <_dtoa_r+0x1ea>
 801f588:	3f01      	subs	r7, #1
 801f58a:	2300      	movs	r3, #0
 801f58c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f58e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f590:	1b9b      	subs	r3, r3, r6
 801f592:	1e5a      	subs	r2, r3, #1
 801f594:	bf44      	itt	mi
 801f596:	f1c3 0801 	rsbmi	r8, r3, #1
 801f59a:	2300      	movmi	r3, #0
 801f59c:	9208      	str	r2, [sp, #32]
 801f59e:	bf54      	ite	pl
 801f5a0:	f04f 0800 	movpl.w	r8, #0
 801f5a4:	9308      	strmi	r3, [sp, #32]
 801f5a6:	2f00      	cmp	r7, #0
 801f5a8:	db39      	blt.n	801f61e <_dtoa_r+0x1ee>
 801f5aa:	9b08      	ldr	r3, [sp, #32]
 801f5ac:	970f      	str	r7, [sp, #60]	@ 0x3c
 801f5ae:	443b      	add	r3, r7
 801f5b0:	9308      	str	r3, [sp, #32]
 801f5b2:	2300      	movs	r3, #0
 801f5b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5b8:	2b09      	cmp	r3, #9
 801f5ba:	d865      	bhi.n	801f688 <_dtoa_r+0x258>
 801f5bc:	2b05      	cmp	r3, #5
 801f5be:	bfc4      	itt	gt
 801f5c0:	3b04      	subgt	r3, #4
 801f5c2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801f5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5c6:	f1a3 0302 	sub.w	r3, r3, #2
 801f5ca:	bfcc      	ite	gt
 801f5cc:	2400      	movgt	r4, #0
 801f5ce:	2401      	movle	r4, #1
 801f5d0:	2b03      	cmp	r3, #3
 801f5d2:	d864      	bhi.n	801f69e <_dtoa_r+0x26e>
 801f5d4:	e8df f003 	tbb	[pc, r3]
 801f5d8:	5635372a 	.word	0x5635372a
 801f5dc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801f5e0:	441e      	add	r6, r3
 801f5e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801f5e6:	2b20      	cmp	r3, #32
 801f5e8:	bfc1      	itttt	gt
 801f5ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801f5ee:	409f      	lslgt	r7, r3
 801f5f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801f5f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 801f5f8:	bfd6      	itet	le
 801f5fa:	f1c3 0320 	rsble	r3, r3, #32
 801f5fe:	ea47 0003 	orrgt.w	r0, r7, r3
 801f602:	fa04 f003 	lslle.w	r0, r4, r3
 801f606:	f7e0 ff8d 	bl	8000524 <__aeabi_ui2d>
 801f60a:	2201      	movs	r2, #1
 801f60c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801f610:	3e01      	subs	r6, #1
 801f612:	9214      	str	r2, [sp, #80]	@ 0x50
 801f614:	e777      	b.n	801f506 <_dtoa_r+0xd6>
 801f616:	2301      	movs	r3, #1
 801f618:	e7b8      	b.n	801f58c <_dtoa_r+0x15c>
 801f61a:	9012      	str	r0, [sp, #72]	@ 0x48
 801f61c:	e7b7      	b.n	801f58e <_dtoa_r+0x15e>
 801f61e:	427b      	negs	r3, r7
 801f620:	930a      	str	r3, [sp, #40]	@ 0x28
 801f622:	2300      	movs	r3, #0
 801f624:	eba8 0807 	sub.w	r8, r8, r7
 801f628:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f62a:	e7c4      	b.n	801f5b6 <_dtoa_r+0x186>
 801f62c:	2300      	movs	r3, #0
 801f62e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f632:	2b00      	cmp	r3, #0
 801f634:	dc36      	bgt.n	801f6a4 <_dtoa_r+0x274>
 801f636:	2301      	movs	r3, #1
 801f638:	9300      	str	r3, [sp, #0]
 801f63a:	9307      	str	r3, [sp, #28]
 801f63c:	461a      	mov	r2, r3
 801f63e:	920e      	str	r2, [sp, #56]	@ 0x38
 801f640:	e00b      	b.n	801f65a <_dtoa_r+0x22a>
 801f642:	2301      	movs	r3, #1
 801f644:	e7f3      	b.n	801f62e <_dtoa_r+0x1fe>
 801f646:	2300      	movs	r3, #0
 801f648:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f64a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f64c:	18fb      	adds	r3, r7, r3
 801f64e:	9300      	str	r3, [sp, #0]
 801f650:	3301      	adds	r3, #1
 801f652:	2b01      	cmp	r3, #1
 801f654:	9307      	str	r3, [sp, #28]
 801f656:	bfb8      	it	lt
 801f658:	2301      	movlt	r3, #1
 801f65a:	2100      	movs	r1, #0
 801f65c:	2204      	movs	r2, #4
 801f65e:	f102 0014 	add.w	r0, r2, #20
 801f662:	4298      	cmp	r0, r3
 801f664:	d922      	bls.n	801f6ac <_dtoa_r+0x27c>
 801f666:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 801f66a:	4658      	mov	r0, fp
 801f66c:	f000 fcaa 	bl	801ffc4 <_Balloc>
 801f670:	4682      	mov	sl, r0
 801f672:	2800      	cmp	r0, #0
 801f674:	d13c      	bne.n	801f6f0 <_dtoa_r+0x2c0>
 801f676:	4b1a      	ldr	r3, [pc, #104]	@ (801f6e0 <_dtoa_r+0x2b0>)
 801f678:	4602      	mov	r2, r0
 801f67a:	f240 11af 	movw	r1, #431	@ 0x1af
 801f67e:	4819      	ldr	r0, [pc, #100]	@ (801f6e4 <_dtoa_r+0x2b4>)
 801f680:	f001 fbf6 	bl	8020e70 <__assert_func>
 801f684:	2301      	movs	r3, #1
 801f686:	e7df      	b.n	801f648 <_dtoa_r+0x218>
 801f688:	2401      	movs	r4, #1
 801f68a:	2300      	movs	r3, #0
 801f68c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f68e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f690:	f04f 33ff 	mov.w	r3, #4294967295
 801f694:	9300      	str	r3, [sp, #0]
 801f696:	9307      	str	r3, [sp, #28]
 801f698:	2200      	movs	r2, #0
 801f69a:	2312      	movs	r3, #18
 801f69c:	e7cf      	b.n	801f63e <_dtoa_r+0x20e>
 801f69e:	2301      	movs	r3, #1
 801f6a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f6a2:	e7f5      	b.n	801f690 <_dtoa_r+0x260>
 801f6a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f6a6:	9300      	str	r3, [sp, #0]
 801f6a8:	9307      	str	r3, [sp, #28]
 801f6aa:	e7d6      	b.n	801f65a <_dtoa_r+0x22a>
 801f6ac:	3101      	adds	r1, #1
 801f6ae:	0052      	lsls	r2, r2, #1
 801f6b0:	e7d5      	b.n	801f65e <_dtoa_r+0x22e>
 801f6b2:	bf00      	nop
 801f6b4:	f3af 8000 	nop.w
 801f6b8:	636f4361 	.word	0x636f4361
 801f6bc:	3fd287a7 	.word	0x3fd287a7
 801f6c0:	8b60c8b3 	.word	0x8b60c8b3
 801f6c4:	3fc68a28 	.word	0x3fc68a28
 801f6c8:	509f79fb 	.word	0x509f79fb
 801f6cc:	3fd34413 	.word	0x3fd34413
 801f6d0:	7ff00000 	.word	0x7ff00000
 801f6d4:	08022ff5 	.word	0x08022ff5
 801f6d8:	3ff80000 	.word	0x3ff80000
 801f6dc:	08023188 	.word	0x08023188
 801f6e0:	0802308f 	.word	0x0802308f
 801f6e4:	080230a0 	.word	0x080230a0
 801f6e8:	0802308b 	.word	0x0802308b
 801f6ec:	08022ff4 	.word	0x08022ff4
 801f6f0:	9b07      	ldr	r3, [sp, #28]
 801f6f2:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 801f6f6:	2b0e      	cmp	r3, #14
 801f6f8:	f200 80a4 	bhi.w	801f844 <_dtoa_r+0x414>
 801f6fc:	2c00      	cmp	r4, #0
 801f6fe:	f000 80a1 	beq.w	801f844 <_dtoa_r+0x414>
 801f702:	2f00      	cmp	r7, #0
 801f704:	dd33      	ble.n	801f76e <_dtoa_r+0x33e>
 801f706:	4bae      	ldr	r3, [pc, #696]	@ (801f9c0 <_dtoa_r+0x590>)
 801f708:	f007 020f 	and.w	r2, r7, #15
 801f70c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f710:	ed93 7b00 	vldr	d7, [r3]
 801f714:	05f8      	lsls	r0, r7, #23
 801f716:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f71a:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f71e:	d516      	bpl.n	801f74e <_dtoa_r+0x31e>
 801f720:	4ba8      	ldr	r3, [pc, #672]	@ (801f9c4 <_dtoa_r+0x594>)
 801f722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f726:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f72a:	f7e1 f89f 	bl	800086c <__aeabi_ddiv>
 801f72e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f732:	f004 040f 	and.w	r4, r4, #15
 801f736:	2603      	movs	r6, #3
 801f738:	4da2      	ldr	r5, [pc, #648]	@ (801f9c4 <_dtoa_r+0x594>)
 801f73a:	b954      	cbnz	r4, 801f752 <_dtoa_r+0x322>
 801f73c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f744:	f7e1 f892 	bl	800086c <__aeabi_ddiv>
 801f748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f74c:	e028      	b.n	801f7a0 <_dtoa_r+0x370>
 801f74e:	2602      	movs	r6, #2
 801f750:	e7f2      	b.n	801f738 <_dtoa_r+0x308>
 801f752:	07e1      	lsls	r1, r4, #31
 801f754:	d508      	bpl.n	801f768 <_dtoa_r+0x338>
 801f756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f75a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f75e:	f7e0 ff5b 	bl	8000618 <__aeabi_dmul>
 801f762:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f766:	3601      	adds	r6, #1
 801f768:	1064      	asrs	r4, r4, #1
 801f76a:	3508      	adds	r5, #8
 801f76c:	e7e5      	b.n	801f73a <_dtoa_r+0x30a>
 801f76e:	f000 80d2 	beq.w	801f916 <_dtoa_r+0x4e6>
 801f772:	427c      	negs	r4, r7
 801f774:	4b92      	ldr	r3, [pc, #584]	@ (801f9c0 <_dtoa_r+0x590>)
 801f776:	4d93      	ldr	r5, [pc, #588]	@ (801f9c4 <_dtoa_r+0x594>)
 801f778:	f004 020f 	and.w	r2, r4, #15
 801f77c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f788:	f7e0 ff46 	bl	8000618 <__aeabi_dmul>
 801f78c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f790:	1124      	asrs	r4, r4, #4
 801f792:	2300      	movs	r3, #0
 801f794:	2602      	movs	r6, #2
 801f796:	2c00      	cmp	r4, #0
 801f798:	f040 80b2 	bne.w	801f900 <_dtoa_r+0x4d0>
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d1d3      	bne.n	801f748 <_dtoa_r+0x318>
 801f7a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f7a2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	f000 80b7 	beq.w	801f91a <_dtoa_r+0x4ea>
 801f7ac:	4b86      	ldr	r3, [pc, #536]	@ (801f9c8 <_dtoa_r+0x598>)
 801f7ae:	2200      	movs	r2, #0
 801f7b0:	4620      	mov	r0, r4
 801f7b2:	4629      	mov	r1, r5
 801f7b4:	f7e1 f9a2 	bl	8000afc <__aeabi_dcmplt>
 801f7b8:	2800      	cmp	r0, #0
 801f7ba:	f000 80ae 	beq.w	801f91a <_dtoa_r+0x4ea>
 801f7be:	9b07      	ldr	r3, [sp, #28]
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	f000 80aa 	beq.w	801f91a <_dtoa_r+0x4ea>
 801f7c6:	9b00      	ldr	r3, [sp, #0]
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	dd37      	ble.n	801f83c <_dtoa_r+0x40c>
 801f7cc:	1e7b      	subs	r3, r7, #1
 801f7ce:	9304      	str	r3, [sp, #16]
 801f7d0:	4620      	mov	r0, r4
 801f7d2:	4b7e      	ldr	r3, [pc, #504]	@ (801f9cc <_dtoa_r+0x59c>)
 801f7d4:	2200      	movs	r2, #0
 801f7d6:	4629      	mov	r1, r5
 801f7d8:	f7e0 ff1e 	bl	8000618 <__aeabi_dmul>
 801f7dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f7e0:	9c00      	ldr	r4, [sp, #0]
 801f7e2:	3601      	adds	r6, #1
 801f7e4:	4630      	mov	r0, r6
 801f7e6:	f7e0 fead 	bl	8000544 <__aeabi_i2d>
 801f7ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f7ee:	f7e0 ff13 	bl	8000618 <__aeabi_dmul>
 801f7f2:	4b77      	ldr	r3, [pc, #476]	@ (801f9d0 <_dtoa_r+0x5a0>)
 801f7f4:	2200      	movs	r2, #0
 801f7f6:	f7e0 fd59 	bl	80002ac <__adddf3>
 801f7fa:	4605      	mov	r5, r0
 801f7fc:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f800:	2c00      	cmp	r4, #0
 801f802:	f040 808d 	bne.w	801f920 <_dtoa_r+0x4f0>
 801f806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f80a:	4b72      	ldr	r3, [pc, #456]	@ (801f9d4 <_dtoa_r+0x5a4>)
 801f80c:	2200      	movs	r2, #0
 801f80e:	f7e0 fd4b 	bl	80002a8 <__aeabi_dsub>
 801f812:	4602      	mov	r2, r0
 801f814:	460b      	mov	r3, r1
 801f816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f81a:	462a      	mov	r2, r5
 801f81c:	4633      	mov	r3, r6
 801f81e:	f7e1 f98b 	bl	8000b38 <__aeabi_dcmpgt>
 801f822:	2800      	cmp	r0, #0
 801f824:	f040 828c 	bne.w	801fd40 <_dtoa_r+0x910>
 801f828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f82c:	462a      	mov	r2, r5
 801f82e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f832:	f7e1 f963 	bl	8000afc <__aeabi_dcmplt>
 801f836:	2800      	cmp	r0, #0
 801f838:	f040 8129 	bne.w	801fa8e <_dtoa_r+0x65e>
 801f83c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f840:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f844:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f846:	2b00      	cmp	r3, #0
 801f848:	f2c0 815b 	blt.w	801fb02 <_dtoa_r+0x6d2>
 801f84c:	2f0e      	cmp	r7, #14
 801f84e:	f300 8158 	bgt.w	801fb02 <_dtoa_r+0x6d2>
 801f852:	4b5b      	ldr	r3, [pc, #364]	@ (801f9c0 <_dtoa_r+0x590>)
 801f854:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f858:	ed93 7b00 	vldr	d7, [r3]
 801f85c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f85e:	2b00      	cmp	r3, #0
 801f860:	ed8d 7b00 	vstr	d7, [sp]
 801f864:	da03      	bge.n	801f86e <_dtoa_r+0x43e>
 801f866:	9b07      	ldr	r3, [sp, #28]
 801f868:	2b00      	cmp	r3, #0
 801f86a:	f340 8102 	ble.w	801fa72 <_dtoa_r+0x642>
 801f86e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f872:	4656      	mov	r6, sl
 801f874:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f878:	4620      	mov	r0, r4
 801f87a:	4629      	mov	r1, r5
 801f87c:	f7e0 fff6 	bl	800086c <__aeabi_ddiv>
 801f880:	f7e1 f97a 	bl	8000b78 <__aeabi_d2iz>
 801f884:	4680      	mov	r8, r0
 801f886:	f7e0 fe5d 	bl	8000544 <__aeabi_i2d>
 801f88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f88e:	f7e0 fec3 	bl	8000618 <__aeabi_dmul>
 801f892:	4602      	mov	r2, r0
 801f894:	460b      	mov	r3, r1
 801f896:	4620      	mov	r0, r4
 801f898:	4629      	mov	r1, r5
 801f89a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f89e:	f7e0 fd03 	bl	80002a8 <__aeabi_dsub>
 801f8a2:	f806 4b01 	strb.w	r4, [r6], #1
 801f8a6:	9d07      	ldr	r5, [sp, #28]
 801f8a8:	eba6 040a 	sub.w	r4, r6, sl
 801f8ac:	42a5      	cmp	r5, r4
 801f8ae:	4602      	mov	r2, r0
 801f8b0:	460b      	mov	r3, r1
 801f8b2:	f040 8118 	bne.w	801fae6 <_dtoa_r+0x6b6>
 801f8b6:	f7e0 fcf9 	bl	80002ac <__adddf3>
 801f8ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f8be:	4604      	mov	r4, r0
 801f8c0:	460d      	mov	r5, r1
 801f8c2:	f7e1 f939 	bl	8000b38 <__aeabi_dcmpgt>
 801f8c6:	2800      	cmp	r0, #0
 801f8c8:	f040 80fa 	bne.w	801fac0 <_dtoa_r+0x690>
 801f8cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f8d0:	4620      	mov	r0, r4
 801f8d2:	4629      	mov	r1, r5
 801f8d4:	f7e1 f908 	bl	8000ae8 <__aeabi_dcmpeq>
 801f8d8:	b118      	cbz	r0, 801f8e2 <_dtoa_r+0x4b2>
 801f8da:	f018 0f01 	tst.w	r8, #1
 801f8de:	f040 80ef 	bne.w	801fac0 <_dtoa_r+0x690>
 801f8e2:	4649      	mov	r1, r9
 801f8e4:	4658      	mov	r0, fp
 801f8e6:	f000 fb92 	bl	802000e <_Bfree>
 801f8ea:	2300      	movs	r3, #0
 801f8ec:	7033      	strb	r3, [r6, #0]
 801f8ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8f0:	3701      	adds	r7, #1
 801f8f2:	601f      	str	r7, [r3, #0]
 801f8f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	f43f add1 	beq.w	801f49e <_dtoa_r+0x6e>
 801f8fc:	601e      	str	r6, [r3, #0]
 801f8fe:	e5ce      	b.n	801f49e <_dtoa_r+0x6e>
 801f900:	07e2      	lsls	r2, r4, #31
 801f902:	d505      	bpl.n	801f910 <_dtoa_r+0x4e0>
 801f904:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f908:	f7e0 fe86 	bl	8000618 <__aeabi_dmul>
 801f90c:	3601      	adds	r6, #1
 801f90e:	2301      	movs	r3, #1
 801f910:	1064      	asrs	r4, r4, #1
 801f912:	3508      	adds	r5, #8
 801f914:	e73f      	b.n	801f796 <_dtoa_r+0x366>
 801f916:	2602      	movs	r6, #2
 801f918:	e742      	b.n	801f7a0 <_dtoa_r+0x370>
 801f91a:	9c07      	ldr	r4, [sp, #28]
 801f91c:	9704      	str	r7, [sp, #16]
 801f91e:	e761      	b.n	801f7e4 <_dtoa_r+0x3b4>
 801f920:	4b27      	ldr	r3, [pc, #156]	@ (801f9c0 <_dtoa_r+0x590>)
 801f922:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f924:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f928:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f92c:	4454      	add	r4, sl
 801f92e:	2900      	cmp	r1, #0
 801f930:	d054      	beq.n	801f9dc <_dtoa_r+0x5ac>
 801f932:	4929      	ldr	r1, [pc, #164]	@ (801f9d8 <_dtoa_r+0x5a8>)
 801f934:	2000      	movs	r0, #0
 801f936:	f7e0 ff99 	bl	800086c <__aeabi_ddiv>
 801f93a:	4633      	mov	r3, r6
 801f93c:	462a      	mov	r2, r5
 801f93e:	f7e0 fcb3 	bl	80002a8 <__aeabi_dsub>
 801f942:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f946:	4656      	mov	r6, sl
 801f948:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f94c:	f7e1 f914 	bl	8000b78 <__aeabi_d2iz>
 801f950:	4605      	mov	r5, r0
 801f952:	f7e0 fdf7 	bl	8000544 <__aeabi_i2d>
 801f956:	4602      	mov	r2, r0
 801f958:	460b      	mov	r3, r1
 801f95a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f95e:	f7e0 fca3 	bl	80002a8 <__aeabi_dsub>
 801f962:	3530      	adds	r5, #48	@ 0x30
 801f964:	4602      	mov	r2, r0
 801f966:	460b      	mov	r3, r1
 801f968:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f96c:	f806 5b01 	strb.w	r5, [r6], #1
 801f970:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f974:	f7e1 f8c2 	bl	8000afc <__aeabi_dcmplt>
 801f978:	2800      	cmp	r0, #0
 801f97a:	d172      	bne.n	801fa62 <_dtoa_r+0x632>
 801f97c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f980:	4911      	ldr	r1, [pc, #68]	@ (801f9c8 <_dtoa_r+0x598>)
 801f982:	2000      	movs	r0, #0
 801f984:	f7e0 fc90 	bl	80002a8 <__aeabi_dsub>
 801f988:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f98c:	f7e1 f8b6 	bl	8000afc <__aeabi_dcmplt>
 801f990:	2800      	cmp	r0, #0
 801f992:	f040 8096 	bne.w	801fac2 <_dtoa_r+0x692>
 801f996:	42a6      	cmp	r6, r4
 801f998:	f43f af50 	beq.w	801f83c <_dtoa_r+0x40c>
 801f99c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f9a0:	4b0a      	ldr	r3, [pc, #40]	@ (801f9cc <_dtoa_r+0x59c>)
 801f9a2:	2200      	movs	r2, #0
 801f9a4:	f7e0 fe38 	bl	8000618 <__aeabi_dmul>
 801f9a8:	4b08      	ldr	r3, [pc, #32]	@ (801f9cc <_dtoa_r+0x59c>)
 801f9aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f9ae:	2200      	movs	r2, #0
 801f9b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f9b4:	f7e0 fe30 	bl	8000618 <__aeabi_dmul>
 801f9b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f9bc:	e7c4      	b.n	801f948 <_dtoa_r+0x518>
 801f9be:	bf00      	nop
 801f9c0:	08023188 	.word	0x08023188
 801f9c4:	08023160 	.word	0x08023160
 801f9c8:	3ff00000 	.word	0x3ff00000
 801f9cc:	40240000 	.word	0x40240000
 801f9d0:	401c0000 	.word	0x401c0000
 801f9d4:	40140000 	.word	0x40140000
 801f9d8:	3fe00000 	.word	0x3fe00000
 801f9dc:	4631      	mov	r1, r6
 801f9de:	4628      	mov	r0, r5
 801f9e0:	f7e0 fe1a 	bl	8000618 <__aeabi_dmul>
 801f9e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f9e8:	9415      	str	r4, [sp, #84]	@ 0x54
 801f9ea:	4656      	mov	r6, sl
 801f9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f9f0:	f7e1 f8c2 	bl	8000b78 <__aeabi_d2iz>
 801f9f4:	4605      	mov	r5, r0
 801f9f6:	f7e0 fda5 	bl	8000544 <__aeabi_i2d>
 801f9fa:	4602      	mov	r2, r0
 801f9fc:	460b      	mov	r3, r1
 801f9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fa02:	f7e0 fc51 	bl	80002a8 <__aeabi_dsub>
 801fa06:	3530      	adds	r5, #48	@ 0x30
 801fa08:	f806 5b01 	strb.w	r5, [r6], #1
 801fa0c:	4602      	mov	r2, r0
 801fa0e:	460b      	mov	r3, r1
 801fa10:	42a6      	cmp	r6, r4
 801fa12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801fa16:	f04f 0200 	mov.w	r2, #0
 801fa1a:	d124      	bne.n	801fa66 <_dtoa_r+0x636>
 801fa1c:	4bac      	ldr	r3, [pc, #688]	@ (801fcd0 <_dtoa_r+0x8a0>)
 801fa1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801fa22:	f7e0 fc43 	bl	80002ac <__adddf3>
 801fa26:	4602      	mov	r2, r0
 801fa28:	460b      	mov	r3, r1
 801fa2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fa2e:	f7e1 f883 	bl	8000b38 <__aeabi_dcmpgt>
 801fa32:	2800      	cmp	r0, #0
 801fa34:	d145      	bne.n	801fac2 <_dtoa_r+0x692>
 801fa36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801fa3a:	49a5      	ldr	r1, [pc, #660]	@ (801fcd0 <_dtoa_r+0x8a0>)
 801fa3c:	2000      	movs	r0, #0
 801fa3e:	f7e0 fc33 	bl	80002a8 <__aeabi_dsub>
 801fa42:	4602      	mov	r2, r0
 801fa44:	460b      	mov	r3, r1
 801fa46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801fa4a:	f7e1 f857 	bl	8000afc <__aeabi_dcmplt>
 801fa4e:	2800      	cmp	r0, #0
 801fa50:	f43f aef4 	beq.w	801f83c <_dtoa_r+0x40c>
 801fa54:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801fa56:	1e73      	subs	r3, r6, #1
 801fa58:	9315      	str	r3, [sp, #84]	@ 0x54
 801fa5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801fa5e:	2b30      	cmp	r3, #48	@ 0x30
 801fa60:	d0f8      	beq.n	801fa54 <_dtoa_r+0x624>
 801fa62:	9f04      	ldr	r7, [sp, #16]
 801fa64:	e73d      	b.n	801f8e2 <_dtoa_r+0x4b2>
 801fa66:	4b9b      	ldr	r3, [pc, #620]	@ (801fcd4 <_dtoa_r+0x8a4>)
 801fa68:	f7e0 fdd6 	bl	8000618 <__aeabi_dmul>
 801fa6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fa70:	e7bc      	b.n	801f9ec <_dtoa_r+0x5bc>
 801fa72:	d10c      	bne.n	801fa8e <_dtoa_r+0x65e>
 801fa74:	4b98      	ldr	r3, [pc, #608]	@ (801fcd8 <_dtoa_r+0x8a8>)
 801fa76:	2200      	movs	r2, #0
 801fa78:	e9dd 0100 	ldrd	r0, r1, [sp]
 801fa7c:	f7e0 fdcc 	bl	8000618 <__aeabi_dmul>
 801fa80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801fa84:	f7e1 f84e 	bl	8000b24 <__aeabi_dcmpge>
 801fa88:	2800      	cmp	r0, #0
 801fa8a:	f000 8157 	beq.w	801fd3c <_dtoa_r+0x90c>
 801fa8e:	2400      	movs	r4, #0
 801fa90:	4625      	mov	r5, r4
 801fa92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa94:	43db      	mvns	r3, r3
 801fa96:	9304      	str	r3, [sp, #16]
 801fa98:	4656      	mov	r6, sl
 801fa9a:	2700      	movs	r7, #0
 801fa9c:	4621      	mov	r1, r4
 801fa9e:	4658      	mov	r0, fp
 801faa0:	f000 fab5 	bl	802000e <_Bfree>
 801faa4:	2d00      	cmp	r5, #0
 801faa6:	d0dc      	beq.n	801fa62 <_dtoa_r+0x632>
 801faa8:	b12f      	cbz	r7, 801fab6 <_dtoa_r+0x686>
 801faaa:	42af      	cmp	r7, r5
 801faac:	d003      	beq.n	801fab6 <_dtoa_r+0x686>
 801faae:	4639      	mov	r1, r7
 801fab0:	4658      	mov	r0, fp
 801fab2:	f000 faac 	bl	802000e <_Bfree>
 801fab6:	4629      	mov	r1, r5
 801fab8:	4658      	mov	r0, fp
 801faba:	f000 faa8 	bl	802000e <_Bfree>
 801fabe:	e7d0      	b.n	801fa62 <_dtoa_r+0x632>
 801fac0:	9704      	str	r7, [sp, #16]
 801fac2:	4633      	mov	r3, r6
 801fac4:	461e      	mov	r6, r3
 801fac6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801faca:	2a39      	cmp	r2, #57	@ 0x39
 801facc:	d107      	bne.n	801fade <_dtoa_r+0x6ae>
 801face:	459a      	cmp	sl, r3
 801fad0:	d1f8      	bne.n	801fac4 <_dtoa_r+0x694>
 801fad2:	9a04      	ldr	r2, [sp, #16]
 801fad4:	3201      	adds	r2, #1
 801fad6:	9204      	str	r2, [sp, #16]
 801fad8:	2230      	movs	r2, #48	@ 0x30
 801fada:	f88a 2000 	strb.w	r2, [sl]
 801fade:	781a      	ldrb	r2, [r3, #0]
 801fae0:	3201      	adds	r2, #1
 801fae2:	701a      	strb	r2, [r3, #0]
 801fae4:	e7bd      	b.n	801fa62 <_dtoa_r+0x632>
 801fae6:	4b7b      	ldr	r3, [pc, #492]	@ (801fcd4 <_dtoa_r+0x8a4>)
 801fae8:	2200      	movs	r2, #0
 801faea:	f7e0 fd95 	bl	8000618 <__aeabi_dmul>
 801faee:	2200      	movs	r2, #0
 801faf0:	2300      	movs	r3, #0
 801faf2:	4604      	mov	r4, r0
 801faf4:	460d      	mov	r5, r1
 801faf6:	f7e0 fff7 	bl	8000ae8 <__aeabi_dcmpeq>
 801fafa:	2800      	cmp	r0, #0
 801fafc:	f43f aeba 	beq.w	801f874 <_dtoa_r+0x444>
 801fb00:	e6ef      	b.n	801f8e2 <_dtoa_r+0x4b2>
 801fb02:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fb04:	2a00      	cmp	r2, #0
 801fb06:	f000 80db 	beq.w	801fcc0 <_dtoa_r+0x890>
 801fb0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb0c:	2a01      	cmp	r2, #1
 801fb0e:	f300 80bf 	bgt.w	801fc90 <_dtoa_r+0x860>
 801fb12:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fb14:	2a00      	cmp	r2, #0
 801fb16:	f000 80b7 	beq.w	801fc88 <_dtoa_r+0x858>
 801fb1a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801fb1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fb20:	4646      	mov	r6, r8
 801fb22:	9a08      	ldr	r2, [sp, #32]
 801fb24:	2101      	movs	r1, #1
 801fb26:	441a      	add	r2, r3
 801fb28:	4658      	mov	r0, fp
 801fb2a:	4498      	add	r8, r3
 801fb2c:	9208      	str	r2, [sp, #32]
 801fb2e:	f000 fb09 	bl	8020144 <__i2b>
 801fb32:	4605      	mov	r5, r0
 801fb34:	b15e      	cbz	r6, 801fb4e <_dtoa_r+0x71e>
 801fb36:	9b08      	ldr	r3, [sp, #32]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	dd08      	ble.n	801fb4e <_dtoa_r+0x71e>
 801fb3c:	42b3      	cmp	r3, r6
 801fb3e:	9a08      	ldr	r2, [sp, #32]
 801fb40:	bfa8      	it	ge
 801fb42:	4633      	movge	r3, r6
 801fb44:	eba8 0803 	sub.w	r8, r8, r3
 801fb48:	1af6      	subs	r6, r6, r3
 801fb4a:	1ad3      	subs	r3, r2, r3
 801fb4c:	9308      	str	r3, [sp, #32]
 801fb4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb50:	b1f3      	cbz	r3, 801fb90 <_dtoa_r+0x760>
 801fb52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	f000 80b7 	beq.w	801fcc8 <_dtoa_r+0x898>
 801fb5a:	b18c      	cbz	r4, 801fb80 <_dtoa_r+0x750>
 801fb5c:	4629      	mov	r1, r5
 801fb5e:	4622      	mov	r2, r4
 801fb60:	4658      	mov	r0, fp
 801fb62:	f000 fbaf 	bl	80202c4 <__pow5mult>
 801fb66:	464a      	mov	r2, r9
 801fb68:	4601      	mov	r1, r0
 801fb6a:	4605      	mov	r5, r0
 801fb6c:	4658      	mov	r0, fp
 801fb6e:	f000 faff 	bl	8020170 <__multiply>
 801fb72:	4649      	mov	r1, r9
 801fb74:	9004      	str	r0, [sp, #16]
 801fb76:	4658      	mov	r0, fp
 801fb78:	f000 fa49 	bl	802000e <_Bfree>
 801fb7c:	9b04      	ldr	r3, [sp, #16]
 801fb7e:	4699      	mov	r9, r3
 801fb80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fb82:	1b1a      	subs	r2, r3, r4
 801fb84:	d004      	beq.n	801fb90 <_dtoa_r+0x760>
 801fb86:	4649      	mov	r1, r9
 801fb88:	4658      	mov	r0, fp
 801fb8a:	f000 fb9b 	bl	80202c4 <__pow5mult>
 801fb8e:	4681      	mov	r9, r0
 801fb90:	2101      	movs	r1, #1
 801fb92:	4658      	mov	r0, fp
 801fb94:	f000 fad6 	bl	8020144 <__i2b>
 801fb98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fb9a:	4604      	mov	r4, r0
 801fb9c:	2b00      	cmp	r3, #0
 801fb9e:	f000 81cc 	beq.w	801ff3a <_dtoa_r+0xb0a>
 801fba2:	461a      	mov	r2, r3
 801fba4:	4601      	mov	r1, r0
 801fba6:	4658      	mov	r0, fp
 801fba8:	f000 fb8c 	bl	80202c4 <__pow5mult>
 801fbac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbae:	2b01      	cmp	r3, #1
 801fbb0:	4604      	mov	r4, r0
 801fbb2:	f300 8095 	bgt.w	801fce0 <_dtoa_r+0x8b0>
 801fbb6:	9b02      	ldr	r3, [sp, #8]
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	f040 8087 	bne.w	801fccc <_dtoa_r+0x89c>
 801fbbe:	9b03      	ldr	r3, [sp, #12]
 801fbc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	f040 8089 	bne.w	801fcdc <_dtoa_r+0x8ac>
 801fbca:	9b03      	ldr	r3, [sp, #12]
 801fbcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801fbd0:	0d1b      	lsrs	r3, r3, #20
 801fbd2:	051b      	lsls	r3, r3, #20
 801fbd4:	b12b      	cbz	r3, 801fbe2 <_dtoa_r+0x7b2>
 801fbd6:	9b08      	ldr	r3, [sp, #32]
 801fbd8:	3301      	adds	r3, #1
 801fbda:	9308      	str	r3, [sp, #32]
 801fbdc:	f108 0801 	add.w	r8, r8, #1
 801fbe0:	2301      	movs	r3, #1
 801fbe2:	930a      	str	r3, [sp, #40]	@ 0x28
 801fbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbe6:	2b00      	cmp	r3, #0
 801fbe8:	f000 81ad 	beq.w	801ff46 <_dtoa_r+0xb16>
 801fbec:	6923      	ldr	r3, [r4, #16]
 801fbee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fbf2:	6918      	ldr	r0, [r3, #16]
 801fbf4:	f000 fa5a 	bl	80200ac <__hi0bits>
 801fbf8:	f1c0 0020 	rsb	r0, r0, #32
 801fbfc:	9b08      	ldr	r3, [sp, #32]
 801fbfe:	4418      	add	r0, r3
 801fc00:	f010 001f 	ands.w	r0, r0, #31
 801fc04:	d077      	beq.n	801fcf6 <_dtoa_r+0x8c6>
 801fc06:	f1c0 0320 	rsb	r3, r0, #32
 801fc0a:	2b04      	cmp	r3, #4
 801fc0c:	dd6b      	ble.n	801fce6 <_dtoa_r+0x8b6>
 801fc0e:	9b08      	ldr	r3, [sp, #32]
 801fc10:	f1c0 001c 	rsb	r0, r0, #28
 801fc14:	4403      	add	r3, r0
 801fc16:	4480      	add	r8, r0
 801fc18:	4406      	add	r6, r0
 801fc1a:	9308      	str	r3, [sp, #32]
 801fc1c:	f1b8 0f00 	cmp.w	r8, #0
 801fc20:	dd05      	ble.n	801fc2e <_dtoa_r+0x7fe>
 801fc22:	4649      	mov	r1, r9
 801fc24:	4642      	mov	r2, r8
 801fc26:	4658      	mov	r0, fp
 801fc28:	f000 fb8c 	bl	8020344 <__lshift>
 801fc2c:	4681      	mov	r9, r0
 801fc2e:	9b08      	ldr	r3, [sp, #32]
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	dd05      	ble.n	801fc40 <_dtoa_r+0x810>
 801fc34:	4621      	mov	r1, r4
 801fc36:	461a      	mov	r2, r3
 801fc38:	4658      	mov	r0, fp
 801fc3a:	f000 fb83 	bl	8020344 <__lshift>
 801fc3e:	4604      	mov	r4, r0
 801fc40:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d059      	beq.n	801fcfa <_dtoa_r+0x8ca>
 801fc46:	4621      	mov	r1, r4
 801fc48:	4648      	mov	r0, r9
 801fc4a:	f000 fbe7 	bl	802041c <__mcmp>
 801fc4e:	2800      	cmp	r0, #0
 801fc50:	da53      	bge.n	801fcfa <_dtoa_r+0x8ca>
 801fc52:	1e7b      	subs	r3, r7, #1
 801fc54:	9304      	str	r3, [sp, #16]
 801fc56:	4649      	mov	r1, r9
 801fc58:	2300      	movs	r3, #0
 801fc5a:	220a      	movs	r2, #10
 801fc5c:	4658      	mov	r0, fp
 801fc5e:	f000 f9df 	bl	8020020 <__multadd>
 801fc62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc64:	4681      	mov	r9, r0
 801fc66:	2b00      	cmp	r3, #0
 801fc68:	f000 816f 	beq.w	801ff4a <_dtoa_r+0xb1a>
 801fc6c:	2300      	movs	r3, #0
 801fc6e:	4629      	mov	r1, r5
 801fc70:	220a      	movs	r2, #10
 801fc72:	4658      	mov	r0, fp
 801fc74:	f000 f9d4 	bl	8020020 <__multadd>
 801fc78:	9b00      	ldr	r3, [sp, #0]
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	4605      	mov	r5, r0
 801fc7e:	dc67      	bgt.n	801fd50 <_dtoa_r+0x920>
 801fc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc82:	2b02      	cmp	r3, #2
 801fc84:	dc41      	bgt.n	801fd0a <_dtoa_r+0x8da>
 801fc86:	e063      	b.n	801fd50 <_dtoa_r+0x920>
 801fc88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fc8a:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801fc8e:	e746      	b.n	801fb1e <_dtoa_r+0x6ee>
 801fc90:	9b07      	ldr	r3, [sp, #28]
 801fc92:	1e5c      	subs	r4, r3, #1
 801fc94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc96:	42a3      	cmp	r3, r4
 801fc98:	bfbf      	itttt	lt
 801fc9a:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801fc9c:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801fc9e:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801fca0:	1ae3      	sublt	r3, r4, r3
 801fca2:	bfb4      	ite	lt
 801fca4:	18d2      	addlt	r2, r2, r3
 801fca6:	1b1c      	subge	r4, r3, r4
 801fca8:	9b07      	ldr	r3, [sp, #28]
 801fcaa:	bfbc      	itt	lt
 801fcac:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801fcae:	2400      	movlt	r4, #0
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	bfb5      	itete	lt
 801fcb4:	eba8 0603 	sublt.w	r6, r8, r3
 801fcb8:	9b07      	ldrge	r3, [sp, #28]
 801fcba:	2300      	movlt	r3, #0
 801fcbc:	4646      	movge	r6, r8
 801fcbe:	e730      	b.n	801fb22 <_dtoa_r+0x6f2>
 801fcc0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801fcc2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801fcc4:	4646      	mov	r6, r8
 801fcc6:	e735      	b.n	801fb34 <_dtoa_r+0x704>
 801fcc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fcca:	e75c      	b.n	801fb86 <_dtoa_r+0x756>
 801fccc:	2300      	movs	r3, #0
 801fcce:	e788      	b.n	801fbe2 <_dtoa_r+0x7b2>
 801fcd0:	3fe00000 	.word	0x3fe00000
 801fcd4:	40240000 	.word	0x40240000
 801fcd8:	40140000 	.word	0x40140000
 801fcdc:	9b02      	ldr	r3, [sp, #8]
 801fcde:	e780      	b.n	801fbe2 <_dtoa_r+0x7b2>
 801fce0:	2300      	movs	r3, #0
 801fce2:	930a      	str	r3, [sp, #40]	@ 0x28
 801fce4:	e782      	b.n	801fbec <_dtoa_r+0x7bc>
 801fce6:	d099      	beq.n	801fc1c <_dtoa_r+0x7ec>
 801fce8:	9a08      	ldr	r2, [sp, #32]
 801fcea:	331c      	adds	r3, #28
 801fcec:	441a      	add	r2, r3
 801fcee:	4498      	add	r8, r3
 801fcf0:	441e      	add	r6, r3
 801fcf2:	9208      	str	r2, [sp, #32]
 801fcf4:	e792      	b.n	801fc1c <_dtoa_r+0x7ec>
 801fcf6:	4603      	mov	r3, r0
 801fcf8:	e7f6      	b.n	801fce8 <_dtoa_r+0x8b8>
 801fcfa:	9b07      	ldr	r3, [sp, #28]
 801fcfc:	9704      	str	r7, [sp, #16]
 801fcfe:	2b00      	cmp	r3, #0
 801fd00:	dc20      	bgt.n	801fd44 <_dtoa_r+0x914>
 801fd02:	9300      	str	r3, [sp, #0]
 801fd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd06:	2b02      	cmp	r3, #2
 801fd08:	dd1e      	ble.n	801fd48 <_dtoa_r+0x918>
 801fd0a:	9b00      	ldr	r3, [sp, #0]
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	f47f aec0 	bne.w	801fa92 <_dtoa_r+0x662>
 801fd12:	4621      	mov	r1, r4
 801fd14:	2205      	movs	r2, #5
 801fd16:	4658      	mov	r0, fp
 801fd18:	f000 f982 	bl	8020020 <__multadd>
 801fd1c:	4601      	mov	r1, r0
 801fd1e:	4604      	mov	r4, r0
 801fd20:	4648      	mov	r0, r9
 801fd22:	f000 fb7b 	bl	802041c <__mcmp>
 801fd26:	2800      	cmp	r0, #0
 801fd28:	f77f aeb3 	ble.w	801fa92 <_dtoa_r+0x662>
 801fd2c:	4656      	mov	r6, sl
 801fd2e:	2331      	movs	r3, #49	@ 0x31
 801fd30:	f806 3b01 	strb.w	r3, [r6], #1
 801fd34:	9b04      	ldr	r3, [sp, #16]
 801fd36:	3301      	adds	r3, #1
 801fd38:	9304      	str	r3, [sp, #16]
 801fd3a:	e6ae      	b.n	801fa9a <_dtoa_r+0x66a>
 801fd3c:	9c07      	ldr	r4, [sp, #28]
 801fd3e:	9704      	str	r7, [sp, #16]
 801fd40:	4625      	mov	r5, r4
 801fd42:	e7f3      	b.n	801fd2c <_dtoa_r+0x8fc>
 801fd44:	9b07      	ldr	r3, [sp, #28]
 801fd46:	9300      	str	r3, [sp, #0]
 801fd48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	f000 8101 	beq.w	801ff52 <_dtoa_r+0xb22>
 801fd50:	2e00      	cmp	r6, #0
 801fd52:	dd05      	ble.n	801fd60 <_dtoa_r+0x930>
 801fd54:	4629      	mov	r1, r5
 801fd56:	4632      	mov	r2, r6
 801fd58:	4658      	mov	r0, fp
 801fd5a:	f000 faf3 	bl	8020344 <__lshift>
 801fd5e:	4605      	mov	r5, r0
 801fd60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d059      	beq.n	801fe1a <_dtoa_r+0x9ea>
 801fd66:	6869      	ldr	r1, [r5, #4]
 801fd68:	4658      	mov	r0, fp
 801fd6a:	f000 f92b 	bl	801ffc4 <_Balloc>
 801fd6e:	4606      	mov	r6, r0
 801fd70:	b920      	cbnz	r0, 801fd7c <_dtoa_r+0x94c>
 801fd72:	4b83      	ldr	r3, [pc, #524]	@ (801ff80 <_dtoa_r+0xb50>)
 801fd74:	4602      	mov	r2, r0
 801fd76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801fd7a:	e480      	b.n	801f67e <_dtoa_r+0x24e>
 801fd7c:	692a      	ldr	r2, [r5, #16]
 801fd7e:	3202      	adds	r2, #2
 801fd80:	0092      	lsls	r2, r2, #2
 801fd82:	f105 010c 	add.w	r1, r5, #12
 801fd86:	300c      	adds	r0, #12
 801fd88:	f7fc fd94 	bl	801c8b4 <memcpy>
 801fd8c:	2201      	movs	r2, #1
 801fd8e:	4631      	mov	r1, r6
 801fd90:	4658      	mov	r0, fp
 801fd92:	f000 fad7 	bl	8020344 <__lshift>
 801fd96:	f10a 0301 	add.w	r3, sl, #1
 801fd9a:	9307      	str	r3, [sp, #28]
 801fd9c:	9b00      	ldr	r3, [sp, #0]
 801fd9e:	4453      	add	r3, sl
 801fda0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801fda2:	9b02      	ldr	r3, [sp, #8]
 801fda4:	f003 0301 	and.w	r3, r3, #1
 801fda8:	462f      	mov	r7, r5
 801fdaa:	930a      	str	r3, [sp, #40]	@ 0x28
 801fdac:	4605      	mov	r5, r0
 801fdae:	9b07      	ldr	r3, [sp, #28]
 801fdb0:	4621      	mov	r1, r4
 801fdb2:	3b01      	subs	r3, #1
 801fdb4:	4648      	mov	r0, r9
 801fdb6:	9300      	str	r3, [sp, #0]
 801fdb8:	f7ff fab2 	bl	801f320 <quorem>
 801fdbc:	4639      	mov	r1, r7
 801fdbe:	9002      	str	r0, [sp, #8]
 801fdc0:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801fdc4:	4648      	mov	r0, r9
 801fdc6:	f000 fb29 	bl	802041c <__mcmp>
 801fdca:	462a      	mov	r2, r5
 801fdcc:	9008      	str	r0, [sp, #32]
 801fdce:	4621      	mov	r1, r4
 801fdd0:	4658      	mov	r0, fp
 801fdd2:	f000 fb3f 	bl	8020454 <__mdiff>
 801fdd6:	68c2      	ldr	r2, [r0, #12]
 801fdd8:	4606      	mov	r6, r0
 801fdda:	bb02      	cbnz	r2, 801fe1e <_dtoa_r+0x9ee>
 801fddc:	4601      	mov	r1, r0
 801fdde:	4648      	mov	r0, r9
 801fde0:	f000 fb1c 	bl	802041c <__mcmp>
 801fde4:	4602      	mov	r2, r0
 801fde6:	4631      	mov	r1, r6
 801fde8:	4658      	mov	r0, fp
 801fdea:	920e      	str	r2, [sp, #56]	@ 0x38
 801fdec:	f000 f90f 	bl	802000e <_Bfree>
 801fdf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fdf4:	9e07      	ldr	r6, [sp, #28]
 801fdf6:	ea43 0102 	orr.w	r1, r3, r2
 801fdfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fdfc:	4319      	orrs	r1, r3
 801fdfe:	d110      	bne.n	801fe22 <_dtoa_r+0x9f2>
 801fe00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fe04:	d029      	beq.n	801fe5a <_dtoa_r+0xa2a>
 801fe06:	9b08      	ldr	r3, [sp, #32]
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	dd02      	ble.n	801fe12 <_dtoa_r+0x9e2>
 801fe0c:	9b02      	ldr	r3, [sp, #8]
 801fe0e:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801fe12:	9b00      	ldr	r3, [sp, #0]
 801fe14:	f883 8000 	strb.w	r8, [r3]
 801fe18:	e640      	b.n	801fa9c <_dtoa_r+0x66c>
 801fe1a:	4628      	mov	r0, r5
 801fe1c:	e7bb      	b.n	801fd96 <_dtoa_r+0x966>
 801fe1e:	2201      	movs	r2, #1
 801fe20:	e7e1      	b.n	801fde6 <_dtoa_r+0x9b6>
 801fe22:	9b08      	ldr	r3, [sp, #32]
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	db04      	blt.n	801fe32 <_dtoa_r+0xa02>
 801fe28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fe2a:	430b      	orrs	r3, r1
 801fe2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe2e:	430b      	orrs	r3, r1
 801fe30:	d120      	bne.n	801fe74 <_dtoa_r+0xa44>
 801fe32:	2a00      	cmp	r2, #0
 801fe34:	dded      	ble.n	801fe12 <_dtoa_r+0x9e2>
 801fe36:	4649      	mov	r1, r9
 801fe38:	2201      	movs	r2, #1
 801fe3a:	4658      	mov	r0, fp
 801fe3c:	f000 fa82 	bl	8020344 <__lshift>
 801fe40:	4621      	mov	r1, r4
 801fe42:	4681      	mov	r9, r0
 801fe44:	f000 faea 	bl	802041c <__mcmp>
 801fe48:	2800      	cmp	r0, #0
 801fe4a:	dc03      	bgt.n	801fe54 <_dtoa_r+0xa24>
 801fe4c:	d1e1      	bne.n	801fe12 <_dtoa_r+0x9e2>
 801fe4e:	f018 0f01 	tst.w	r8, #1
 801fe52:	d0de      	beq.n	801fe12 <_dtoa_r+0x9e2>
 801fe54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fe58:	d1d8      	bne.n	801fe0c <_dtoa_r+0x9dc>
 801fe5a:	9a00      	ldr	r2, [sp, #0]
 801fe5c:	2339      	movs	r3, #57	@ 0x39
 801fe5e:	7013      	strb	r3, [r2, #0]
 801fe60:	4633      	mov	r3, r6
 801fe62:	461e      	mov	r6, r3
 801fe64:	3b01      	subs	r3, #1
 801fe66:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801fe6a:	2a39      	cmp	r2, #57	@ 0x39
 801fe6c:	d052      	beq.n	801ff14 <_dtoa_r+0xae4>
 801fe6e:	3201      	adds	r2, #1
 801fe70:	701a      	strb	r2, [r3, #0]
 801fe72:	e613      	b.n	801fa9c <_dtoa_r+0x66c>
 801fe74:	2a00      	cmp	r2, #0
 801fe76:	dd07      	ble.n	801fe88 <_dtoa_r+0xa58>
 801fe78:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801fe7c:	d0ed      	beq.n	801fe5a <_dtoa_r+0xa2a>
 801fe7e:	9a00      	ldr	r2, [sp, #0]
 801fe80:	f108 0301 	add.w	r3, r8, #1
 801fe84:	7013      	strb	r3, [r2, #0]
 801fe86:	e609      	b.n	801fa9c <_dtoa_r+0x66c>
 801fe88:	9b07      	ldr	r3, [sp, #28]
 801fe8a:	9a07      	ldr	r2, [sp, #28]
 801fe8c:	f803 8c01 	strb.w	r8, [r3, #-1]
 801fe90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fe92:	4293      	cmp	r3, r2
 801fe94:	d028      	beq.n	801fee8 <_dtoa_r+0xab8>
 801fe96:	4649      	mov	r1, r9
 801fe98:	2300      	movs	r3, #0
 801fe9a:	220a      	movs	r2, #10
 801fe9c:	4658      	mov	r0, fp
 801fe9e:	f000 f8bf 	bl	8020020 <__multadd>
 801fea2:	42af      	cmp	r7, r5
 801fea4:	4681      	mov	r9, r0
 801fea6:	f04f 0300 	mov.w	r3, #0
 801feaa:	f04f 020a 	mov.w	r2, #10
 801feae:	4639      	mov	r1, r7
 801feb0:	4658      	mov	r0, fp
 801feb2:	d107      	bne.n	801fec4 <_dtoa_r+0xa94>
 801feb4:	f000 f8b4 	bl	8020020 <__multadd>
 801feb8:	4607      	mov	r7, r0
 801feba:	4605      	mov	r5, r0
 801febc:	9b07      	ldr	r3, [sp, #28]
 801febe:	3301      	adds	r3, #1
 801fec0:	9307      	str	r3, [sp, #28]
 801fec2:	e774      	b.n	801fdae <_dtoa_r+0x97e>
 801fec4:	f000 f8ac 	bl	8020020 <__multadd>
 801fec8:	4629      	mov	r1, r5
 801feca:	4607      	mov	r7, r0
 801fecc:	2300      	movs	r3, #0
 801fece:	220a      	movs	r2, #10
 801fed0:	4658      	mov	r0, fp
 801fed2:	f000 f8a5 	bl	8020020 <__multadd>
 801fed6:	4605      	mov	r5, r0
 801fed8:	e7f0      	b.n	801febc <_dtoa_r+0xa8c>
 801feda:	9b00      	ldr	r3, [sp, #0]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	bfcc      	ite	gt
 801fee0:	461e      	movgt	r6, r3
 801fee2:	2601      	movle	r6, #1
 801fee4:	4456      	add	r6, sl
 801fee6:	2700      	movs	r7, #0
 801fee8:	4649      	mov	r1, r9
 801feea:	2201      	movs	r2, #1
 801feec:	4658      	mov	r0, fp
 801feee:	f000 fa29 	bl	8020344 <__lshift>
 801fef2:	4621      	mov	r1, r4
 801fef4:	4681      	mov	r9, r0
 801fef6:	f000 fa91 	bl	802041c <__mcmp>
 801fefa:	2800      	cmp	r0, #0
 801fefc:	dcb0      	bgt.n	801fe60 <_dtoa_r+0xa30>
 801fefe:	d102      	bne.n	801ff06 <_dtoa_r+0xad6>
 801ff00:	f018 0f01 	tst.w	r8, #1
 801ff04:	d1ac      	bne.n	801fe60 <_dtoa_r+0xa30>
 801ff06:	4633      	mov	r3, r6
 801ff08:	461e      	mov	r6, r3
 801ff0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ff0e:	2a30      	cmp	r2, #48	@ 0x30
 801ff10:	d0fa      	beq.n	801ff08 <_dtoa_r+0xad8>
 801ff12:	e5c3      	b.n	801fa9c <_dtoa_r+0x66c>
 801ff14:	459a      	cmp	sl, r3
 801ff16:	d1a4      	bne.n	801fe62 <_dtoa_r+0xa32>
 801ff18:	9b04      	ldr	r3, [sp, #16]
 801ff1a:	3301      	adds	r3, #1
 801ff1c:	9304      	str	r3, [sp, #16]
 801ff1e:	2331      	movs	r3, #49	@ 0x31
 801ff20:	f88a 3000 	strb.w	r3, [sl]
 801ff24:	e5ba      	b.n	801fa9c <_dtoa_r+0x66c>
 801ff26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ff28:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801ff84 <_dtoa_r+0xb54>
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	f43f aab6 	beq.w	801f49e <_dtoa_r+0x6e>
 801ff32:	f10a 0308 	add.w	r3, sl, #8
 801ff36:	f7ff bab0 	b.w	801f49a <_dtoa_r+0x6a>
 801ff3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff3c:	2b01      	cmp	r3, #1
 801ff3e:	f77f ae3a 	ble.w	801fbb6 <_dtoa_r+0x786>
 801ff42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff44:	930a      	str	r3, [sp, #40]	@ 0x28
 801ff46:	2001      	movs	r0, #1
 801ff48:	e658      	b.n	801fbfc <_dtoa_r+0x7cc>
 801ff4a:	9b00      	ldr	r3, [sp, #0]
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	f77f aed9 	ble.w	801fd04 <_dtoa_r+0x8d4>
 801ff52:	4656      	mov	r6, sl
 801ff54:	4621      	mov	r1, r4
 801ff56:	4648      	mov	r0, r9
 801ff58:	f7ff f9e2 	bl	801f320 <quorem>
 801ff5c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ff60:	f806 8b01 	strb.w	r8, [r6], #1
 801ff64:	9b00      	ldr	r3, [sp, #0]
 801ff66:	eba6 020a 	sub.w	r2, r6, sl
 801ff6a:	4293      	cmp	r3, r2
 801ff6c:	ddb5      	ble.n	801feda <_dtoa_r+0xaaa>
 801ff6e:	4649      	mov	r1, r9
 801ff70:	2300      	movs	r3, #0
 801ff72:	220a      	movs	r2, #10
 801ff74:	4658      	mov	r0, fp
 801ff76:	f000 f853 	bl	8020020 <__multadd>
 801ff7a:	4681      	mov	r9, r0
 801ff7c:	e7ea      	b.n	801ff54 <_dtoa_r+0xb24>
 801ff7e:	bf00      	nop
 801ff80:	0802308f 	.word	0x0802308f
 801ff84:	08023082 	.word	0x08023082

0801ff88 <__env_lock>:
 801ff88:	4801      	ldr	r0, [pc, #4]	@ (801ff90 <__env_lock+0x8>)
 801ff8a:	f7fc bc7c 	b.w	801c886 <__retarget_lock_acquire_recursive>
 801ff8e:	bf00      	nop
 801ff90:	2000ce69 	.word	0x2000ce69

0801ff94 <__env_unlock>:
 801ff94:	4801      	ldr	r0, [pc, #4]	@ (801ff9c <__env_unlock+0x8>)
 801ff96:	f7fc bc78 	b.w	801c88a <__retarget_lock_release_recursive>
 801ff9a:	bf00      	nop
 801ff9c:	2000ce69 	.word	0x2000ce69

0801ffa0 <__ascii_mbtowc>:
 801ffa0:	b082      	sub	sp, #8
 801ffa2:	b901      	cbnz	r1, 801ffa6 <__ascii_mbtowc+0x6>
 801ffa4:	a901      	add	r1, sp, #4
 801ffa6:	b142      	cbz	r2, 801ffba <__ascii_mbtowc+0x1a>
 801ffa8:	b14b      	cbz	r3, 801ffbe <__ascii_mbtowc+0x1e>
 801ffaa:	7813      	ldrb	r3, [r2, #0]
 801ffac:	600b      	str	r3, [r1, #0]
 801ffae:	7812      	ldrb	r2, [r2, #0]
 801ffb0:	1e10      	subs	r0, r2, #0
 801ffb2:	bf18      	it	ne
 801ffb4:	2001      	movne	r0, #1
 801ffb6:	b002      	add	sp, #8
 801ffb8:	4770      	bx	lr
 801ffba:	4610      	mov	r0, r2
 801ffbc:	e7fb      	b.n	801ffb6 <__ascii_mbtowc+0x16>
 801ffbe:	f06f 0001 	mvn.w	r0, #1
 801ffc2:	e7f8      	b.n	801ffb6 <__ascii_mbtowc+0x16>

0801ffc4 <_Balloc>:
 801ffc4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801ffc6:	b570      	push	{r4, r5, r6, lr}
 801ffc8:	4605      	mov	r5, r0
 801ffca:	460c      	mov	r4, r1
 801ffcc:	b17b      	cbz	r3, 801ffee <_Balloc+0x2a>
 801ffce:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801ffd0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ffd4:	b9a0      	cbnz	r0, 8020000 <_Balloc+0x3c>
 801ffd6:	2101      	movs	r1, #1
 801ffd8:	fa01 f604 	lsl.w	r6, r1, r4
 801ffdc:	1d72      	adds	r2, r6, #5
 801ffde:	0092      	lsls	r2, r2, #2
 801ffe0:	4628      	mov	r0, r5
 801ffe2:	f000 ff63 	bl	8020eac <_calloc_r>
 801ffe6:	b148      	cbz	r0, 801fffc <_Balloc+0x38>
 801ffe8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 801ffec:	e00b      	b.n	8020006 <_Balloc+0x42>
 801ffee:	2221      	movs	r2, #33	@ 0x21
 801fff0:	2104      	movs	r1, #4
 801fff2:	f000 ff5b 	bl	8020eac <_calloc_r>
 801fff6:	6468      	str	r0, [r5, #68]	@ 0x44
 801fff8:	2800      	cmp	r0, #0
 801fffa:	d1e8      	bne.n	801ffce <_Balloc+0xa>
 801fffc:	2000      	movs	r0, #0
 801fffe:	bd70      	pop	{r4, r5, r6, pc}
 8020000:	6802      	ldr	r2, [r0, #0]
 8020002:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8020006:	2300      	movs	r3, #0
 8020008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802000c:	e7f7      	b.n	801fffe <_Balloc+0x3a>

0802000e <_Bfree>:
 802000e:	b131      	cbz	r1, 802001e <_Bfree+0x10>
 8020010:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8020012:	684a      	ldr	r2, [r1, #4]
 8020014:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020018:	6008      	str	r0, [r1, #0]
 802001a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 802001e:	4770      	bx	lr

08020020 <__multadd>:
 8020020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020024:	690d      	ldr	r5, [r1, #16]
 8020026:	4607      	mov	r7, r0
 8020028:	460c      	mov	r4, r1
 802002a:	461e      	mov	r6, r3
 802002c:	f101 0c14 	add.w	ip, r1, #20
 8020030:	2000      	movs	r0, #0
 8020032:	f8dc 3000 	ldr.w	r3, [ip]
 8020036:	b299      	uxth	r1, r3
 8020038:	fb02 6101 	mla	r1, r2, r1, r6
 802003c:	0c1e      	lsrs	r6, r3, #16
 802003e:	0c0b      	lsrs	r3, r1, #16
 8020040:	fb02 3306 	mla	r3, r2, r6, r3
 8020044:	b289      	uxth	r1, r1
 8020046:	3001      	adds	r0, #1
 8020048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802004c:	4285      	cmp	r5, r0
 802004e:	f84c 1b04 	str.w	r1, [ip], #4
 8020052:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020056:	dcec      	bgt.n	8020032 <__multadd+0x12>
 8020058:	b30e      	cbz	r6, 802009e <__multadd+0x7e>
 802005a:	68a3      	ldr	r3, [r4, #8]
 802005c:	42ab      	cmp	r3, r5
 802005e:	dc19      	bgt.n	8020094 <__multadd+0x74>
 8020060:	6861      	ldr	r1, [r4, #4]
 8020062:	4638      	mov	r0, r7
 8020064:	3101      	adds	r1, #1
 8020066:	f7ff ffad 	bl	801ffc4 <_Balloc>
 802006a:	4680      	mov	r8, r0
 802006c:	b928      	cbnz	r0, 802007a <__multadd+0x5a>
 802006e:	4602      	mov	r2, r0
 8020070:	4b0c      	ldr	r3, [pc, #48]	@ (80200a4 <__multadd+0x84>)
 8020072:	480d      	ldr	r0, [pc, #52]	@ (80200a8 <__multadd+0x88>)
 8020074:	21ba      	movs	r1, #186	@ 0xba
 8020076:	f000 fefb 	bl	8020e70 <__assert_func>
 802007a:	6922      	ldr	r2, [r4, #16]
 802007c:	3202      	adds	r2, #2
 802007e:	f104 010c 	add.w	r1, r4, #12
 8020082:	0092      	lsls	r2, r2, #2
 8020084:	300c      	adds	r0, #12
 8020086:	f7fc fc15 	bl	801c8b4 <memcpy>
 802008a:	4621      	mov	r1, r4
 802008c:	4638      	mov	r0, r7
 802008e:	f7ff ffbe 	bl	802000e <_Bfree>
 8020092:	4644      	mov	r4, r8
 8020094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020098:	3501      	adds	r5, #1
 802009a:	615e      	str	r6, [r3, #20]
 802009c:	6125      	str	r5, [r4, #16]
 802009e:	4620      	mov	r0, r4
 80200a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80200a4:	0802308f 	.word	0x0802308f
 80200a8:	080230f8 	.word	0x080230f8

080200ac <__hi0bits>:
 80200ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80200b0:	4603      	mov	r3, r0
 80200b2:	bf36      	itet	cc
 80200b4:	0403      	lslcc	r3, r0, #16
 80200b6:	2000      	movcs	r0, #0
 80200b8:	2010      	movcc	r0, #16
 80200ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80200be:	bf3c      	itt	cc
 80200c0:	021b      	lslcc	r3, r3, #8
 80200c2:	3008      	addcc	r0, #8
 80200c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80200c8:	bf3c      	itt	cc
 80200ca:	011b      	lslcc	r3, r3, #4
 80200cc:	3004      	addcc	r0, #4
 80200ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80200d2:	bf3c      	itt	cc
 80200d4:	009b      	lslcc	r3, r3, #2
 80200d6:	3002      	addcc	r0, #2
 80200d8:	2b00      	cmp	r3, #0
 80200da:	db05      	blt.n	80200e8 <__hi0bits+0x3c>
 80200dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80200e0:	f100 0001 	add.w	r0, r0, #1
 80200e4:	bf08      	it	eq
 80200e6:	2020      	moveq	r0, #32
 80200e8:	4770      	bx	lr

080200ea <__lo0bits>:
 80200ea:	6803      	ldr	r3, [r0, #0]
 80200ec:	4602      	mov	r2, r0
 80200ee:	f013 0007 	ands.w	r0, r3, #7
 80200f2:	d00b      	beq.n	802010c <__lo0bits+0x22>
 80200f4:	07d9      	lsls	r1, r3, #31
 80200f6:	d421      	bmi.n	802013c <__lo0bits+0x52>
 80200f8:	0798      	lsls	r0, r3, #30
 80200fa:	bf49      	itett	mi
 80200fc:	085b      	lsrmi	r3, r3, #1
 80200fe:	089b      	lsrpl	r3, r3, #2
 8020100:	2001      	movmi	r0, #1
 8020102:	6013      	strmi	r3, [r2, #0]
 8020104:	bf5c      	itt	pl
 8020106:	6013      	strpl	r3, [r2, #0]
 8020108:	2002      	movpl	r0, #2
 802010a:	4770      	bx	lr
 802010c:	b299      	uxth	r1, r3
 802010e:	b909      	cbnz	r1, 8020114 <__lo0bits+0x2a>
 8020110:	0c1b      	lsrs	r3, r3, #16
 8020112:	2010      	movs	r0, #16
 8020114:	b2d9      	uxtb	r1, r3
 8020116:	b909      	cbnz	r1, 802011c <__lo0bits+0x32>
 8020118:	3008      	adds	r0, #8
 802011a:	0a1b      	lsrs	r3, r3, #8
 802011c:	0719      	lsls	r1, r3, #28
 802011e:	bf04      	itt	eq
 8020120:	091b      	lsreq	r3, r3, #4
 8020122:	3004      	addeq	r0, #4
 8020124:	0799      	lsls	r1, r3, #30
 8020126:	bf04      	itt	eq
 8020128:	089b      	lsreq	r3, r3, #2
 802012a:	3002      	addeq	r0, #2
 802012c:	07d9      	lsls	r1, r3, #31
 802012e:	d403      	bmi.n	8020138 <__lo0bits+0x4e>
 8020130:	085b      	lsrs	r3, r3, #1
 8020132:	f100 0001 	add.w	r0, r0, #1
 8020136:	d003      	beq.n	8020140 <__lo0bits+0x56>
 8020138:	6013      	str	r3, [r2, #0]
 802013a:	4770      	bx	lr
 802013c:	2000      	movs	r0, #0
 802013e:	4770      	bx	lr
 8020140:	2020      	movs	r0, #32
 8020142:	4770      	bx	lr

08020144 <__i2b>:
 8020144:	b510      	push	{r4, lr}
 8020146:	460c      	mov	r4, r1
 8020148:	2101      	movs	r1, #1
 802014a:	f7ff ff3b 	bl	801ffc4 <_Balloc>
 802014e:	4602      	mov	r2, r0
 8020150:	b928      	cbnz	r0, 802015e <__i2b+0x1a>
 8020152:	4b05      	ldr	r3, [pc, #20]	@ (8020168 <__i2b+0x24>)
 8020154:	4805      	ldr	r0, [pc, #20]	@ (802016c <__i2b+0x28>)
 8020156:	f240 1145 	movw	r1, #325	@ 0x145
 802015a:	f000 fe89 	bl	8020e70 <__assert_func>
 802015e:	2301      	movs	r3, #1
 8020160:	6144      	str	r4, [r0, #20]
 8020162:	6103      	str	r3, [r0, #16]
 8020164:	bd10      	pop	{r4, pc}
 8020166:	bf00      	nop
 8020168:	0802308f 	.word	0x0802308f
 802016c:	080230f8 	.word	0x080230f8

08020170 <__multiply>:
 8020170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020174:	4614      	mov	r4, r2
 8020176:	690a      	ldr	r2, [r1, #16]
 8020178:	6923      	ldr	r3, [r4, #16]
 802017a:	429a      	cmp	r2, r3
 802017c:	bfa8      	it	ge
 802017e:	4623      	movge	r3, r4
 8020180:	460f      	mov	r7, r1
 8020182:	bfa4      	itt	ge
 8020184:	460c      	movge	r4, r1
 8020186:	461f      	movge	r7, r3
 8020188:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802018c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8020190:	68a3      	ldr	r3, [r4, #8]
 8020192:	6861      	ldr	r1, [r4, #4]
 8020194:	eb0a 0609 	add.w	r6, sl, r9
 8020198:	42b3      	cmp	r3, r6
 802019a:	b085      	sub	sp, #20
 802019c:	bfb8      	it	lt
 802019e:	3101      	addlt	r1, #1
 80201a0:	f7ff ff10 	bl	801ffc4 <_Balloc>
 80201a4:	b930      	cbnz	r0, 80201b4 <__multiply+0x44>
 80201a6:	4602      	mov	r2, r0
 80201a8:	4b44      	ldr	r3, [pc, #272]	@ (80202bc <__multiply+0x14c>)
 80201aa:	4845      	ldr	r0, [pc, #276]	@ (80202c0 <__multiply+0x150>)
 80201ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80201b0:	f000 fe5e 	bl	8020e70 <__assert_func>
 80201b4:	f100 0514 	add.w	r5, r0, #20
 80201b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80201bc:	462b      	mov	r3, r5
 80201be:	2200      	movs	r2, #0
 80201c0:	4543      	cmp	r3, r8
 80201c2:	d321      	bcc.n	8020208 <__multiply+0x98>
 80201c4:	f107 0114 	add.w	r1, r7, #20
 80201c8:	f104 0214 	add.w	r2, r4, #20
 80201cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80201d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80201d4:	9302      	str	r3, [sp, #8]
 80201d6:	1b13      	subs	r3, r2, r4
 80201d8:	3b15      	subs	r3, #21
 80201da:	f023 0303 	bic.w	r3, r3, #3
 80201de:	3304      	adds	r3, #4
 80201e0:	f104 0715 	add.w	r7, r4, #21
 80201e4:	42ba      	cmp	r2, r7
 80201e6:	bf38      	it	cc
 80201e8:	2304      	movcc	r3, #4
 80201ea:	9301      	str	r3, [sp, #4]
 80201ec:	9b02      	ldr	r3, [sp, #8]
 80201ee:	9103      	str	r1, [sp, #12]
 80201f0:	428b      	cmp	r3, r1
 80201f2:	d80c      	bhi.n	802020e <__multiply+0x9e>
 80201f4:	2e00      	cmp	r6, #0
 80201f6:	dd03      	ble.n	8020200 <__multiply+0x90>
 80201f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d05b      	beq.n	80202b8 <__multiply+0x148>
 8020200:	6106      	str	r6, [r0, #16]
 8020202:	b005      	add	sp, #20
 8020204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020208:	f843 2b04 	str.w	r2, [r3], #4
 802020c:	e7d8      	b.n	80201c0 <__multiply+0x50>
 802020e:	f8b1 a000 	ldrh.w	sl, [r1]
 8020212:	f1ba 0f00 	cmp.w	sl, #0
 8020216:	d024      	beq.n	8020262 <__multiply+0xf2>
 8020218:	f104 0e14 	add.w	lr, r4, #20
 802021c:	46a9      	mov	r9, r5
 802021e:	f04f 0c00 	mov.w	ip, #0
 8020222:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020226:	f8d9 3000 	ldr.w	r3, [r9]
 802022a:	fa1f fb87 	uxth.w	fp, r7
 802022e:	b29b      	uxth	r3, r3
 8020230:	fb0a 330b 	mla	r3, sl, fp, r3
 8020234:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8020238:	f8d9 7000 	ldr.w	r7, [r9]
 802023c:	4463      	add	r3, ip
 802023e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8020242:	fb0a c70b 	mla	r7, sl, fp, ip
 8020246:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802024a:	b29b      	uxth	r3, r3
 802024c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020250:	4572      	cmp	r2, lr
 8020252:	f849 3b04 	str.w	r3, [r9], #4
 8020256:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802025a:	d8e2      	bhi.n	8020222 <__multiply+0xb2>
 802025c:	9b01      	ldr	r3, [sp, #4]
 802025e:	f845 c003 	str.w	ip, [r5, r3]
 8020262:	9b03      	ldr	r3, [sp, #12]
 8020264:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8020268:	3104      	adds	r1, #4
 802026a:	f1b9 0f00 	cmp.w	r9, #0
 802026e:	d021      	beq.n	80202b4 <__multiply+0x144>
 8020270:	682b      	ldr	r3, [r5, #0]
 8020272:	f104 0c14 	add.w	ip, r4, #20
 8020276:	46ae      	mov	lr, r5
 8020278:	f04f 0a00 	mov.w	sl, #0
 802027c:	f8bc b000 	ldrh.w	fp, [ip]
 8020280:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8020284:	fb09 770b 	mla	r7, r9, fp, r7
 8020288:	4457      	add	r7, sl
 802028a:	b29b      	uxth	r3, r3
 802028c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8020290:	f84e 3b04 	str.w	r3, [lr], #4
 8020294:	f85c 3b04 	ldr.w	r3, [ip], #4
 8020298:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802029c:	f8be 3000 	ldrh.w	r3, [lr]
 80202a0:	fb09 330a 	mla	r3, r9, sl, r3
 80202a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80202a8:	4562      	cmp	r2, ip
 80202aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80202ae:	d8e5      	bhi.n	802027c <__multiply+0x10c>
 80202b0:	9f01      	ldr	r7, [sp, #4]
 80202b2:	51eb      	str	r3, [r5, r7]
 80202b4:	3504      	adds	r5, #4
 80202b6:	e799      	b.n	80201ec <__multiply+0x7c>
 80202b8:	3e01      	subs	r6, #1
 80202ba:	e79b      	b.n	80201f4 <__multiply+0x84>
 80202bc:	0802308f 	.word	0x0802308f
 80202c0:	080230f8 	.word	0x080230f8

080202c4 <__pow5mult>:
 80202c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80202c8:	4615      	mov	r5, r2
 80202ca:	f012 0203 	ands.w	r2, r2, #3
 80202ce:	4607      	mov	r7, r0
 80202d0:	460e      	mov	r6, r1
 80202d2:	d007      	beq.n	80202e4 <__pow5mult+0x20>
 80202d4:	4c1a      	ldr	r4, [pc, #104]	@ (8020340 <__pow5mult+0x7c>)
 80202d6:	3a01      	subs	r2, #1
 80202d8:	2300      	movs	r3, #0
 80202da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80202de:	f7ff fe9f 	bl	8020020 <__multadd>
 80202e2:	4606      	mov	r6, r0
 80202e4:	10ad      	asrs	r5, r5, #2
 80202e6:	d027      	beq.n	8020338 <__pow5mult+0x74>
 80202e8:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80202ea:	b944      	cbnz	r4, 80202fe <__pow5mult+0x3a>
 80202ec:	f240 2171 	movw	r1, #625	@ 0x271
 80202f0:	4638      	mov	r0, r7
 80202f2:	f7ff ff27 	bl	8020144 <__i2b>
 80202f6:	2300      	movs	r3, #0
 80202f8:	6438      	str	r0, [r7, #64]	@ 0x40
 80202fa:	4604      	mov	r4, r0
 80202fc:	6003      	str	r3, [r0, #0]
 80202fe:	f04f 0900 	mov.w	r9, #0
 8020302:	07eb      	lsls	r3, r5, #31
 8020304:	d50a      	bpl.n	802031c <__pow5mult+0x58>
 8020306:	4631      	mov	r1, r6
 8020308:	4622      	mov	r2, r4
 802030a:	4638      	mov	r0, r7
 802030c:	f7ff ff30 	bl	8020170 <__multiply>
 8020310:	4631      	mov	r1, r6
 8020312:	4680      	mov	r8, r0
 8020314:	4638      	mov	r0, r7
 8020316:	f7ff fe7a 	bl	802000e <_Bfree>
 802031a:	4646      	mov	r6, r8
 802031c:	106d      	asrs	r5, r5, #1
 802031e:	d00b      	beq.n	8020338 <__pow5mult+0x74>
 8020320:	6820      	ldr	r0, [r4, #0]
 8020322:	b938      	cbnz	r0, 8020334 <__pow5mult+0x70>
 8020324:	4622      	mov	r2, r4
 8020326:	4621      	mov	r1, r4
 8020328:	4638      	mov	r0, r7
 802032a:	f7ff ff21 	bl	8020170 <__multiply>
 802032e:	6020      	str	r0, [r4, #0]
 8020330:	f8c0 9000 	str.w	r9, [r0]
 8020334:	4604      	mov	r4, r0
 8020336:	e7e4      	b.n	8020302 <__pow5mult+0x3e>
 8020338:	4630      	mov	r0, r6
 802033a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802033e:	bf00      	nop
 8020340:	08023154 	.word	0x08023154

08020344 <__lshift>:
 8020344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020348:	460c      	mov	r4, r1
 802034a:	6849      	ldr	r1, [r1, #4]
 802034c:	6923      	ldr	r3, [r4, #16]
 802034e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020352:	68a3      	ldr	r3, [r4, #8]
 8020354:	4607      	mov	r7, r0
 8020356:	4691      	mov	r9, r2
 8020358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802035c:	f108 0601 	add.w	r6, r8, #1
 8020360:	42b3      	cmp	r3, r6
 8020362:	db0b      	blt.n	802037c <__lshift+0x38>
 8020364:	4638      	mov	r0, r7
 8020366:	f7ff fe2d 	bl	801ffc4 <_Balloc>
 802036a:	4605      	mov	r5, r0
 802036c:	b948      	cbnz	r0, 8020382 <__lshift+0x3e>
 802036e:	4602      	mov	r2, r0
 8020370:	4b28      	ldr	r3, [pc, #160]	@ (8020414 <__lshift+0xd0>)
 8020372:	4829      	ldr	r0, [pc, #164]	@ (8020418 <__lshift+0xd4>)
 8020374:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020378:	f000 fd7a 	bl	8020e70 <__assert_func>
 802037c:	3101      	adds	r1, #1
 802037e:	005b      	lsls	r3, r3, #1
 8020380:	e7ee      	b.n	8020360 <__lshift+0x1c>
 8020382:	2300      	movs	r3, #0
 8020384:	f100 0114 	add.w	r1, r0, #20
 8020388:	f100 0210 	add.w	r2, r0, #16
 802038c:	4618      	mov	r0, r3
 802038e:	4553      	cmp	r3, sl
 8020390:	db33      	blt.n	80203fa <__lshift+0xb6>
 8020392:	6920      	ldr	r0, [r4, #16]
 8020394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020398:	f104 0314 	add.w	r3, r4, #20
 802039c:	f019 091f 	ands.w	r9, r9, #31
 80203a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80203a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80203a8:	d02b      	beq.n	8020402 <__lshift+0xbe>
 80203aa:	f1c9 0e20 	rsb	lr, r9, #32
 80203ae:	468a      	mov	sl, r1
 80203b0:	2200      	movs	r2, #0
 80203b2:	6818      	ldr	r0, [r3, #0]
 80203b4:	fa00 f009 	lsl.w	r0, r0, r9
 80203b8:	4310      	orrs	r0, r2
 80203ba:	f84a 0b04 	str.w	r0, [sl], #4
 80203be:	f853 2b04 	ldr.w	r2, [r3], #4
 80203c2:	459c      	cmp	ip, r3
 80203c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80203c8:	d8f3      	bhi.n	80203b2 <__lshift+0x6e>
 80203ca:	ebac 0304 	sub.w	r3, ip, r4
 80203ce:	3b15      	subs	r3, #21
 80203d0:	f023 0303 	bic.w	r3, r3, #3
 80203d4:	3304      	adds	r3, #4
 80203d6:	f104 0015 	add.w	r0, r4, #21
 80203da:	4584      	cmp	ip, r0
 80203dc:	bf38      	it	cc
 80203de:	2304      	movcc	r3, #4
 80203e0:	50ca      	str	r2, [r1, r3]
 80203e2:	b10a      	cbz	r2, 80203e8 <__lshift+0xa4>
 80203e4:	f108 0602 	add.w	r6, r8, #2
 80203e8:	3e01      	subs	r6, #1
 80203ea:	4638      	mov	r0, r7
 80203ec:	612e      	str	r6, [r5, #16]
 80203ee:	4621      	mov	r1, r4
 80203f0:	f7ff fe0d 	bl	802000e <_Bfree>
 80203f4:	4628      	mov	r0, r5
 80203f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80203fe:	3301      	adds	r3, #1
 8020400:	e7c5      	b.n	802038e <__lshift+0x4a>
 8020402:	3904      	subs	r1, #4
 8020404:	f853 2b04 	ldr.w	r2, [r3], #4
 8020408:	f841 2f04 	str.w	r2, [r1, #4]!
 802040c:	459c      	cmp	ip, r3
 802040e:	d8f9      	bhi.n	8020404 <__lshift+0xc0>
 8020410:	e7ea      	b.n	80203e8 <__lshift+0xa4>
 8020412:	bf00      	nop
 8020414:	0802308f 	.word	0x0802308f
 8020418:	080230f8 	.word	0x080230f8

0802041c <__mcmp>:
 802041c:	690a      	ldr	r2, [r1, #16]
 802041e:	4603      	mov	r3, r0
 8020420:	6900      	ldr	r0, [r0, #16]
 8020422:	1a80      	subs	r0, r0, r2
 8020424:	b530      	push	{r4, r5, lr}
 8020426:	d10e      	bne.n	8020446 <__mcmp+0x2a>
 8020428:	3314      	adds	r3, #20
 802042a:	3114      	adds	r1, #20
 802042c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8020430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8020434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8020438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802043c:	4295      	cmp	r5, r2
 802043e:	d003      	beq.n	8020448 <__mcmp+0x2c>
 8020440:	d205      	bcs.n	802044e <__mcmp+0x32>
 8020442:	f04f 30ff 	mov.w	r0, #4294967295
 8020446:	bd30      	pop	{r4, r5, pc}
 8020448:	42a3      	cmp	r3, r4
 802044a:	d3f3      	bcc.n	8020434 <__mcmp+0x18>
 802044c:	e7fb      	b.n	8020446 <__mcmp+0x2a>
 802044e:	2001      	movs	r0, #1
 8020450:	e7f9      	b.n	8020446 <__mcmp+0x2a>
	...

08020454 <__mdiff>:
 8020454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020458:	4689      	mov	r9, r1
 802045a:	4606      	mov	r6, r0
 802045c:	4611      	mov	r1, r2
 802045e:	4648      	mov	r0, r9
 8020460:	4614      	mov	r4, r2
 8020462:	f7ff ffdb 	bl	802041c <__mcmp>
 8020466:	1e05      	subs	r5, r0, #0
 8020468:	d112      	bne.n	8020490 <__mdiff+0x3c>
 802046a:	4629      	mov	r1, r5
 802046c:	4630      	mov	r0, r6
 802046e:	f7ff fda9 	bl	801ffc4 <_Balloc>
 8020472:	4602      	mov	r2, r0
 8020474:	b928      	cbnz	r0, 8020482 <__mdiff+0x2e>
 8020476:	4b3f      	ldr	r3, [pc, #252]	@ (8020574 <__mdiff+0x120>)
 8020478:	f240 2137 	movw	r1, #567	@ 0x237
 802047c:	483e      	ldr	r0, [pc, #248]	@ (8020578 <__mdiff+0x124>)
 802047e:	f000 fcf7 	bl	8020e70 <__assert_func>
 8020482:	2301      	movs	r3, #1
 8020484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8020488:	4610      	mov	r0, r2
 802048a:	b003      	add	sp, #12
 802048c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020490:	bfbc      	itt	lt
 8020492:	464b      	movlt	r3, r9
 8020494:	46a1      	movlt	r9, r4
 8020496:	4630      	mov	r0, r6
 8020498:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802049c:	bfba      	itte	lt
 802049e:	461c      	movlt	r4, r3
 80204a0:	2501      	movlt	r5, #1
 80204a2:	2500      	movge	r5, #0
 80204a4:	f7ff fd8e 	bl	801ffc4 <_Balloc>
 80204a8:	4602      	mov	r2, r0
 80204aa:	b918      	cbnz	r0, 80204b4 <__mdiff+0x60>
 80204ac:	4b31      	ldr	r3, [pc, #196]	@ (8020574 <__mdiff+0x120>)
 80204ae:	f240 2145 	movw	r1, #581	@ 0x245
 80204b2:	e7e3      	b.n	802047c <__mdiff+0x28>
 80204b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80204b8:	6926      	ldr	r6, [r4, #16]
 80204ba:	60c5      	str	r5, [r0, #12]
 80204bc:	f109 0310 	add.w	r3, r9, #16
 80204c0:	f109 0514 	add.w	r5, r9, #20
 80204c4:	f104 0e14 	add.w	lr, r4, #20
 80204c8:	f100 0b14 	add.w	fp, r0, #20
 80204cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80204d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80204d4:	9301      	str	r3, [sp, #4]
 80204d6:	46d9      	mov	r9, fp
 80204d8:	f04f 0c00 	mov.w	ip, #0
 80204dc:	9b01      	ldr	r3, [sp, #4]
 80204de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80204e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80204e6:	9301      	str	r3, [sp, #4]
 80204e8:	fa1f f38a 	uxth.w	r3, sl
 80204ec:	4619      	mov	r1, r3
 80204ee:	b283      	uxth	r3, r0
 80204f0:	1acb      	subs	r3, r1, r3
 80204f2:	0c00      	lsrs	r0, r0, #16
 80204f4:	4463      	add	r3, ip
 80204f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80204fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80204fe:	b29b      	uxth	r3, r3
 8020500:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020504:	4576      	cmp	r6, lr
 8020506:	f849 3b04 	str.w	r3, [r9], #4
 802050a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802050e:	d8e5      	bhi.n	80204dc <__mdiff+0x88>
 8020510:	1b33      	subs	r3, r6, r4
 8020512:	3b15      	subs	r3, #21
 8020514:	f023 0303 	bic.w	r3, r3, #3
 8020518:	3415      	adds	r4, #21
 802051a:	3304      	adds	r3, #4
 802051c:	42a6      	cmp	r6, r4
 802051e:	bf38      	it	cc
 8020520:	2304      	movcc	r3, #4
 8020522:	441d      	add	r5, r3
 8020524:	445b      	add	r3, fp
 8020526:	461e      	mov	r6, r3
 8020528:	462c      	mov	r4, r5
 802052a:	4544      	cmp	r4, r8
 802052c:	d30e      	bcc.n	802054c <__mdiff+0xf8>
 802052e:	f108 0103 	add.w	r1, r8, #3
 8020532:	1b49      	subs	r1, r1, r5
 8020534:	f021 0103 	bic.w	r1, r1, #3
 8020538:	3d03      	subs	r5, #3
 802053a:	45a8      	cmp	r8, r5
 802053c:	bf38      	it	cc
 802053e:	2100      	movcc	r1, #0
 8020540:	440b      	add	r3, r1
 8020542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020546:	b191      	cbz	r1, 802056e <__mdiff+0x11a>
 8020548:	6117      	str	r7, [r2, #16]
 802054a:	e79d      	b.n	8020488 <__mdiff+0x34>
 802054c:	f854 1b04 	ldr.w	r1, [r4], #4
 8020550:	46e6      	mov	lr, ip
 8020552:	0c08      	lsrs	r0, r1, #16
 8020554:	fa1c fc81 	uxtah	ip, ip, r1
 8020558:	4471      	add	r1, lr
 802055a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802055e:	b289      	uxth	r1, r1
 8020560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020564:	f846 1b04 	str.w	r1, [r6], #4
 8020568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802056c:	e7dd      	b.n	802052a <__mdiff+0xd6>
 802056e:	3f01      	subs	r7, #1
 8020570:	e7e7      	b.n	8020542 <__mdiff+0xee>
 8020572:	bf00      	nop
 8020574:	0802308f 	.word	0x0802308f
 8020578:	080230f8 	.word	0x080230f8

0802057c <__d2b>:
 802057c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020580:	460f      	mov	r7, r1
 8020582:	2101      	movs	r1, #1
 8020584:	ec59 8b10 	vmov	r8, r9, d0
 8020588:	4616      	mov	r6, r2
 802058a:	f7ff fd1b 	bl	801ffc4 <_Balloc>
 802058e:	4604      	mov	r4, r0
 8020590:	b930      	cbnz	r0, 80205a0 <__d2b+0x24>
 8020592:	4602      	mov	r2, r0
 8020594:	4b23      	ldr	r3, [pc, #140]	@ (8020624 <__d2b+0xa8>)
 8020596:	4824      	ldr	r0, [pc, #144]	@ (8020628 <__d2b+0xac>)
 8020598:	f240 310f 	movw	r1, #783	@ 0x30f
 802059c:	f000 fc68 	bl	8020e70 <__assert_func>
 80205a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80205a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80205a8:	b10d      	cbz	r5, 80205ae <__d2b+0x32>
 80205aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80205ae:	9301      	str	r3, [sp, #4]
 80205b0:	f1b8 0300 	subs.w	r3, r8, #0
 80205b4:	d023      	beq.n	80205fe <__d2b+0x82>
 80205b6:	4668      	mov	r0, sp
 80205b8:	9300      	str	r3, [sp, #0]
 80205ba:	f7ff fd96 	bl	80200ea <__lo0bits>
 80205be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80205c2:	b1d0      	cbz	r0, 80205fa <__d2b+0x7e>
 80205c4:	f1c0 0320 	rsb	r3, r0, #32
 80205c8:	fa02 f303 	lsl.w	r3, r2, r3
 80205cc:	430b      	orrs	r3, r1
 80205ce:	40c2      	lsrs	r2, r0
 80205d0:	6163      	str	r3, [r4, #20]
 80205d2:	9201      	str	r2, [sp, #4]
 80205d4:	9b01      	ldr	r3, [sp, #4]
 80205d6:	61a3      	str	r3, [r4, #24]
 80205d8:	2b00      	cmp	r3, #0
 80205da:	bf0c      	ite	eq
 80205dc:	2201      	moveq	r2, #1
 80205de:	2202      	movne	r2, #2
 80205e0:	6122      	str	r2, [r4, #16]
 80205e2:	b1a5      	cbz	r5, 802060e <__d2b+0x92>
 80205e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80205e8:	4405      	add	r5, r0
 80205ea:	603d      	str	r5, [r7, #0]
 80205ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80205f0:	6030      	str	r0, [r6, #0]
 80205f2:	4620      	mov	r0, r4
 80205f4:	b003      	add	sp, #12
 80205f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80205fa:	6161      	str	r1, [r4, #20]
 80205fc:	e7ea      	b.n	80205d4 <__d2b+0x58>
 80205fe:	a801      	add	r0, sp, #4
 8020600:	f7ff fd73 	bl	80200ea <__lo0bits>
 8020604:	9b01      	ldr	r3, [sp, #4]
 8020606:	6163      	str	r3, [r4, #20]
 8020608:	3020      	adds	r0, #32
 802060a:	2201      	movs	r2, #1
 802060c:	e7e8      	b.n	80205e0 <__d2b+0x64>
 802060e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020616:	6038      	str	r0, [r7, #0]
 8020618:	6918      	ldr	r0, [r3, #16]
 802061a:	f7ff fd47 	bl	80200ac <__hi0bits>
 802061e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020622:	e7e5      	b.n	80205f0 <__d2b+0x74>
 8020624:	0802308f 	.word	0x0802308f
 8020628:	080230f8 	.word	0x080230f8

0802062c <realloc>:
 802062c:	4b02      	ldr	r3, [pc, #8]	@ (8020638 <realloc+0xc>)
 802062e:	460a      	mov	r2, r1
 8020630:	4601      	mov	r1, r0
 8020632:	6818      	ldr	r0, [r3, #0]
 8020634:	f000 b802 	b.w	802063c <_realloc_r>
 8020638:	20000674 	.word	0x20000674

0802063c <_realloc_r>:
 802063c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020640:	4682      	mov	sl, r0
 8020642:	4693      	mov	fp, r2
 8020644:	460c      	mov	r4, r1
 8020646:	b929      	cbnz	r1, 8020654 <_realloc_r+0x18>
 8020648:	4611      	mov	r1, r2
 802064a:	b003      	add	sp, #12
 802064c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020650:	f7fa be28 	b.w	801b2a4 <_malloc_r>
 8020654:	f7fb f860 	bl	801b718 <__malloc_lock>
 8020658:	f10b 080b 	add.w	r8, fp, #11
 802065c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8020660:	f1b8 0f16 	cmp.w	r8, #22
 8020664:	f1a4 0908 	sub.w	r9, r4, #8
 8020668:	f025 0603 	bic.w	r6, r5, #3
 802066c:	d908      	bls.n	8020680 <_realloc_r+0x44>
 802066e:	f038 0807 	bics.w	r8, r8, #7
 8020672:	d507      	bpl.n	8020684 <_realloc_r+0x48>
 8020674:	230c      	movs	r3, #12
 8020676:	f8ca 3000 	str.w	r3, [sl]
 802067a:	f04f 0b00 	mov.w	fp, #0
 802067e:	e032      	b.n	80206e6 <_realloc_r+0xaa>
 8020680:	f04f 0810 	mov.w	r8, #16
 8020684:	45c3      	cmp	fp, r8
 8020686:	d8f5      	bhi.n	8020674 <_realloc_r+0x38>
 8020688:	4546      	cmp	r6, r8
 802068a:	f280 8174 	bge.w	8020976 <_realloc_r+0x33a>
 802068e:	4b9e      	ldr	r3, [pc, #632]	@ (8020908 <_realloc_r+0x2cc>)
 8020690:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8020694:	eb09 0106 	add.w	r1, r9, r6
 8020698:	458c      	cmp	ip, r1
 802069a:	6848      	ldr	r0, [r1, #4]
 802069c:	d005      	beq.n	80206aa <_realloc_r+0x6e>
 802069e:	f020 0201 	bic.w	r2, r0, #1
 80206a2:	440a      	add	r2, r1
 80206a4:	6852      	ldr	r2, [r2, #4]
 80206a6:	07d7      	lsls	r7, r2, #31
 80206a8:	d449      	bmi.n	802073e <_realloc_r+0x102>
 80206aa:	f020 0003 	bic.w	r0, r0, #3
 80206ae:	458c      	cmp	ip, r1
 80206b0:	eb06 0700 	add.w	r7, r6, r0
 80206b4:	d11b      	bne.n	80206ee <_realloc_r+0xb2>
 80206b6:	f108 0210 	add.w	r2, r8, #16
 80206ba:	42ba      	cmp	r2, r7
 80206bc:	dc41      	bgt.n	8020742 <_realloc_r+0x106>
 80206be:	eb09 0208 	add.w	r2, r9, r8
 80206c2:	eba7 0708 	sub.w	r7, r7, r8
 80206c6:	f047 0701 	orr.w	r7, r7, #1
 80206ca:	609a      	str	r2, [r3, #8]
 80206cc:	6057      	str	r7, [r2, #4]
 80206ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80206d2:	f003 0301 	and.w	r3, r3, #1
 80206d6:	ea43 0308 	orr.w	r3, r3, r8
 80206da:	f844 3c04 	str.w	r3, [r4, #-4]
 80206de:	4650      	mov	r0, sl
 80206e0:	f7fb f820 	bl	801b724 <__malloc_unlock>
 80206e4:	46a3      	mov	fp, r4
 80206e6:	4658      	mov	r0, fp
 80206e8:	b003      	add	sp, #12
 80206ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206ee:	45b8      	cmp	r8, r7
 80206f0:	dc27      	bgt.n	8020742 <_realloc_r+0x106>
 80206f2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80206f6:	60d3      	str	r3, [r2, #12]
 80206f8:	609a      	str	r2, [r3, #8]
 80206fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80206fe:	eba7 0008 	sub.w	r0, r7, r8
 8020702:	280f      	cmp	r0, #15
 8020704:	f003 0301 	and.w	r3, r3, #1
 8020708:	eb09 0207 	add.w	r2, r9, r7
 802070c:	f240 8135 	bls.w	802097a <_realloc_r+0x33e>
 8020710:	eb09 0108 	add.w	r1, r9, r8
 8020714:	ea48 0303 	orr.w	r3, r8, r3
 8020718:	f040 0001 	orr.w	r0, r0, #1
 802071c:	f8c9 3004 	str.w	r3, [r9, #4]
 8020720:	6048      	str	r0, [r1, #4]
 8020722:	6853      	ldr	r3, [r2, #4]
 8020724:	f043 0301 	orr.w	r3, r3, #1
 8020728:	6053      	str	r3, [r2, #4]
 802072a:	3108      	adds	r1, #8
 802072c:	4650      	mov	r0, sl
 802072e:	f7fc f93d 	bl	801c9ac <_free_r>
 8020732:	4650      	mov	r0, sl
 8020734:	f7fa fff6 	bl	801b724 <__malloc_unlock>
 8020738:	f109 0b08 	add.w	fp, r9, #8
 802073c:	e7d3      	b.n	80206e6 <_realloc_r+0xaa>
 802073e:	2000      	movs	r0, #0
 8020740:	4601      	mov	r1, r0
 8020742:	07ea      	lsls	r2, r5, #31
 8020744:	f100 80c7 	bmi.w	80208d6 <_realloc_r+0x29a>
 8020748:	f854 5c08 	ldr.w	r5, [r4, #-8]
 802074c:	eba9 0505 	sub.w	r5, r9, r5
 8020750:	686a      	ldr	r2, [r5, #4]
 8020752:	f022 0203 	bic.w	r2, r2, #3
 8020756:	4432      	add	r2, r6
 8020758:	9201      	str	r2, [sp, #4]
 802075a:	2900      	cmp	r1, #0
 802075c:	f000 8086 	beq.w	802086c <_realloc_r+0x230>
 8020760:	458c      	cmp	ip, r1
 8020762:	eb00 0702 	add.w	r7, r0, r2
 8020766:	d149      	bne.n	80207fc <_realloc_r+0x1c0>
 8020768:	f108 0210 	add.w	r2, r8, #16
 802076c:	42ba      	cmp	r2, r7
 802076e:	dc7d      	bgt.n	802086c <_realloc_r+0x230>
 8020770:	46ab      	mov	fp, r5
 8020772:	68ea      	ldr	r2, [r5, #12]
 8020774:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8020778:	60ca      	str	r2, [r1, #12]
 802077a:	6091      	str	r1, [r2, #8]
 802077c:	1f32      	subs	r2, r6, #4
 802077e:	2a24      	cmp	r2, #36	@ 0x24
 8020780:	d836      	bhi.n	80207f0 <_realloc_r+0x1b4>
 8020782:	2a13      	cmp	r2, #19
 8020784:	d932      	bls.n	80207ec <_realloc_r+0x1b0>
 8020786:	6821      	ldr	r1, [r4, #0]
 8020788:	60a9      	str	r1, [r5, #8]
 802078a:	6861      	ldr	r1, [r4, #4]
 802078c:	60e9      	str	r1, [r5, #12]
 802078e:	2a1b      	cmp	r2, #27
 8020790:	d81a      	bhi.n	80207c8 <_realloc_r+0x18c>
 8020792:	3408      	adds	r4, #8
 8020794:	f105 0210 	add.w	r2, r5, #16
 8020798:	6821      	ldr	r1, [r4, #0]
 802079a:	6011      	str	r1, [r2, #0]
 802079c:	6861      	ldr	r1, [r4, #4]
 802079e:	6051      	str	r1, [r2, #4]
 80207a0:	68a1      	ldr	r1, [r4, #8]
 80207a2:	6091      	str	r1, [r2, #8]
 80207a4:	eb05 0208 	add.w	r2, r5, r8
 80207a8:	eba7 0708 	sub.w	r7, r7, r8
 80207ac:	f047 0701 	orr.w	r7, r7, #1
 80207b0:	609a      	str	r2, [r3, #8]
 80207b2:	6057      	str	r7, [r2, #4]
 80207b4:	686b      	ldr	r3, [r5, #4]
 80207b6:	f003 0301 	and.w	r3, r3, #1
 80207ba:	ea43 0308 	orr.w	r3, r3, r8
 80207be:	606b      	str	r3, [r5, #4]
 80207c0:	4650      	mov	r0, sl
 80207c2:	f7fa ffaf 	bl	801b724 <__malloc_unlock>
 80207c6:	e78e      	b.n	80206e6 <_realloc_r+0xaa>
 80207c8:	68a1      	ldr	r1, [r4, #8]
 80207ca:	6129      	str	r1, [r5, #16]
 80207cc:	68e1      	ldr	r1, [r4, #12]
 80207ce:	6169      	str	r1, [r5, #20]
 80207d0:	2a24      	cmp	r2, #36	@ 0x24
 80207d2:	bf01      	itttt	eq
 80207d4:	6922      	ldreq	r2, [r4, #16]
 80207d6:	61aa      	streq	r2, [r5, #24]
 80207d8:	6961      	ldreq	r1, [r4, #20]
 80207da:	61e9      	streq	r1, [r5, #28]
 80207dc:	bf19      	ittee	ne
 80207de:	3410      	addne	r4, #16
 80207e0:	f105 0218 	addne.w	r2, r5, #24
 80207e4:	f105 0220 	addeq.w	r2, r5, #32
 80207e8:	3418      	addeq	r4, #24
 80207ea:	e7d5      	b.n	8020798 <_realloc_r+0x15c>
 80207ec:	465a      	mov	r2, fp
 80207ee:	e7d3      	b.n	8020798 <_realloc_r+0x15c>
 80207f0:	4621      	mov	r1, r4
 80207f2:	4658      	mov	r0, fp
 80207f4:	f000 fb21 	bl	8020e3a <memmove>
 80207f8:	4b43      	ldr	r3, [pc, #268]	@ (8020908 <_realloc_r+0x2cc>)
 80207fa:	e7d3      	b.n	80207a4 <_realloc_r+0x168>
 80207fc:	45b8      	cmp	r8, r7
 80207fe:	dc35      	bgt.n	802086c <_realloc_r+0x230>
 8020800:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8020804:	4628      	mov	r0, r5
 8020806:	60d3      	str	r3, [r2, #12]
 8020808:	609a      	str	r2, [r3, #8]
 802080a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802080e:	68eb      	ldr	r3, [r5, #12]
 8020810:	60d3      	str	r3, [r2, #12]
 8020812:	609a      	str	r2, [r3, #8]
 8020814:	1f32      	subs	r2, r6, #4
 8020816:	2a24      	cmp	r2, #36	@ 0x24
 8020818:	d824      	bhi.n	8020864 <_realloc_r+0x228>
 802081a:	2a13      	cmp	r2, #19
 802081c:	d908      	bls.n	8020830 <_realloc_r+0x1f4>
 802081e:	6823      	ldr	r3, [r4, #0]
 8020820:	60ab      	str	r3, [r5, #8]
 8020822:	6863      	ldr	r3, [r4, #4]
 8020824:	60eb      	str	r3, [r5, #12]
 8020826:	2a1b      	cmp	r2, #27
 8020828:	d80a      	bhi.n	8020840 <_realloc_r+0x204>
 802082a:	3408      	adds	r4, #8
 802082c:	f105 0010 	add.w	r0, r5, #16
 8020830:	6823      	ldr	r3, [r4, #0]
 8020832:	6003      	str	r3, [r0, #0]
 8020834:	6863      	ldr	r3, [r4, #4]
 8020836:	6043      	str	r3, [r0, #4]
 8020838:	68a3      	ldr	r3, [r4, #8]
 802083a:	6083      	str	r3, [r0, #8]
 802083c:	46a9      	mov	r9, r5
 802083e:	e75c      	b.n	80206fa <_realloc_r+0xbe>
 8020840:	68a3      	ldr	r3, [r4, #8]
 8020842:	612b      	str	r3, [r5, #16]
 8020844:	68e3      	ldr	r3, [r4, #12]
 8020846:	616b      	str	r3, [r5, #20]
 8020848:	2a24      	cmp	r2, #36	@ 0x24
 802084a:	bf01      	itttt	eq
 802084c:	6923      	ldreq	r3, [r4, #16]
 802084e:	61ab      	streq	r3, [r5, #24]
 8020850:	6963      	ldreq	r3, [r4, #20]
 8020852:	61eb      	streq	r3, [r5, #28]
 8020854:	bf19      	ittee	ne
 8020856:	3410      	addne	r4, #16
 8020858:	f105 0018 	addne.w	r0, r5, #24
 802085c:	f105 0020 	addeq.w	r0, r5, #32
 8020860:	3418      	addeq	r4, #24
 8020862:	e7e5      	b.n	8020830 <_realloc_r+0x1f4>
 8020864:	4621      	mov	r1, r4
 8020866:	f000 fae8 	bl	8020e3a <memmove>
 802086a:	e7e7      	b.n	802083c <_realloc_r+0x200>
 802086c:	9b01      	ldr	r3, [sp, #4]
 802086e:	4598      	cmp	r8, r3
 8020870:	dc31      	bgt.n	80208d6 <_realloc_r+0x29a>
 8020872:	4628      	mov	r0, r5
 8020874:	68eb      	ldr	r3, [r5, #12]
 8020876:	f850 2f08 	ldr.w	r2, [r0, #8]!
 802087a:	60d3      	str	r3, [r2, #12]
 802087c:	609a      	str	r2, [r3, #8]
 802087e:	1f32      	subs	r2, r6, #4
 8020880:	2a24      	cmp	r2, #36	@ 0x24
 8020882:	d824      	bhi.n	80208ce <_realloc_r+0x292>
 8020884:	2a13      	cmp	r2, #19
 8020886:	d908      	bls.n	802089a <_realloc_r+0x25e>
 8020888:	6823      	ldr	r3, [r4, #0]
 802088a:	60ab      	str	r3, [r5, #8]
 802088c:	6863      	ldr	r3, [r4, #4]
 802088e:	60eb      	str	r3, [r5, #12]
 8020890:	2a1b      	cmp	r2, #27
 8020892:	d80a      	bhi.n	80208aa <_realloc_r+0x26e>
 8020894:	3408      	adds	r4, #8
 8020896:	f105 0010 	add.w	r0, r5, #16
 802089a:	6823      	ldr	r3, [r4, #0]
 802089c:	6003      	str	r3, [r0, #0]
 802089e:	6863      	ldr	r3, [r4, #4]
 80208a0:	6043      	str	r3, [r0, #4]
 80208a2:	68a3      	ldr	r3, [r4, #8]
 80208a4:	6083      	str	r3, [r0, #8]
 80208a6:	9f01      	ldr	r7, [sp, #4]
 80208a8:	e7c8      	b.n	802083c <_realloc_r+0x200>
 80208aa:	68a3      	ldr	r3, [r4, #8]
 80208ac:	612b      	str	r3, [r5, #16]
 80208ae:	68e3      	ldr	r3, [r4, #12]
 80208b0:	616b      	str	r3, [r5, #20]
 80208b2:	2a24      	cmp	r2, #36	@ 0x24
 80208b4:	bf01      	itttt	eq
 80208b6:	6923      	ldreq	r3, [r4, #16]
 80208b8:	61ab      	streq	r3, [r5, #24]
 80208ba:	6963      	ldreq	r3, [r4, #20]
 80208bc:	61eb      	streq	r3, [r5, #28]
 80208be:	bf19      	ittee	ne
 80208c0:	3410      	addne	r4, #16
 80208c2:	f105 0018 	addne.w	r0, r5, #24
 80208c6:	f105 0020 	addeq.w	r0, r5, #32
 80208ca:	3418      	addeq	r4, #24
 80208cc:	e7e5      	b.n	802089a <_realloc_r+0x25e>
 80208ce:	4621      	mov	r1, r4
 80208d0:	f000 fab3 	bl	8020e3a <memmove>
 80208d4:	e7e7      	b.n	80208a6 <_realloc_r+0x26a>
 80208d6:	4659      	mov	r1, fp
 80208d8:	4650      	mov	r0, sl
 80208da:	f7fa fce3 	bl	801b2a4 <_malloc_r>
 80208de:	4683      	mov	fp, r0
 80208e0:	b918      	cbnz	r0, 80208ea <_realloc_r+0x2ae>
 80208e2:	4650      	mov	r0, sl
 80208e4:	f7fa ff1e 	bl	801b724 <__malloc_unlock>
 80208e8:	e6c7      	b.n	802067a <_realloc_r+0x3e>
 80208ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80208ee:	f023 0301 	bic.w	r3, r3, #1
 80208f2:	444b      	add	r3, r9
 80208f4:	f1a0 0208 	sub.w	r2, r0, #8
 80208f8:	4293      	cmp	r3, r2
 80208fa:	d107      	bne.n	802090c <_realloc_r+0x2d0>
 80208fc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8020900:	f027 0703 	bic.w	r7, r7, #3
 8020904:	4437      	add	r7, r6
 8020906:	e6f8      	b.n	80206fa <_realloc_r+0xbe>
 8020908:	20000258 	.word	0x20000258
 802090c:	1f32      	subs	r2, r6, #4
 802090e:	2a24      	cmp	r2, #36	@ 0x24
 8020910:	d82d      	bhi.n	802096e <_realloc_r+0x332>
 8020912:	2a13      	cmp	r2, #19
 8020914:	d928      	bls.n	8020968 <_realloc_r+0x32c>
 8020916:	6823      	ldr	r3, [r4, #0]
 8020918:	6003      	str	r3, [r0, #0]
 802091a:	6863      	ldr	r3, [r4, #4]
 802091c:	6043      	str	r3, [r0, #4]
 802091e:	2a1b      	cmp	r2, #27
 8020920:	d80e      	bhi.n	8020940 <_realloc_r+0x304>
 8020922:	f104 0208 	add.w	r2, r4, #8
 8020926:	f100 0308 	add.w	r3, r0, #8
 802092a:	6811      	ldr	r1, [r2, #0]
 802092c:	6019      	str	r1, [r3, #0]
 802092e:	6851      	ldr	r1, [r2, #4]
 8020930:	6059      	str	r1, [r3, #4]
 8020932:	6892      	ldr	r2, [r2, #8]
 8020934:	609a      	str	r2, [r3, #8]
 8020936:	4621      	mov	r1, r4
 8020938:	4650      	mov	r0, sl
 802093a:	f7fc f837 	bl	801c9ac <_free_r>
 802093e:	e73f      	b.n	80207c0 <_realloc_r+0x184>
 8020940:	68a3      	ldr	r3, [r4, #8]
 8020942:	6083      	str	r3, [r0, #8]
 8020944:	68e3      	ldr	r3, [r4, #12]
 8020946:	60c3      	str	r3, [r0, #12]
 8020948:	2a24      	cmp	r2, #36	@ 0x24
 802094a:	bf01      	itttt	eq
 802094c:	6923      	ldreq	r3, [r4, #16]
 802094e:	6103      	streq	r3, [r0, #16]
 8020950:	6961      	ldreq	r1, [r4, #20]
 8020952:	6141      	streq	r1, [r0, #20]
 8020954:	bf19      	ittee	ne
 8020956:	f104 0210 	addne.w	r2, r4, #16
 802095a:	f100 0310 	addne.w	r3, r0, #16
 802095e:	f104 0218 	addeq.w	r2, r4, #24
 8020962:	f100 0318 	addeq.w	r3, r0, #24
 8020966:	e7e0      	b.n	802092a <_realloc_r+0x2ee>
 8020968:	4603      	mov	r3, r0
 802096a:	4622      	mov	r2, r4
 802096c:	e7dd      	b.n	802092a <_realloc_r+0x2ee>
 802096e:	4621      	mov	r1, r4
 8020970:	f000 fa63 	bl	8020e3a <memmove>
 8020974:	e7df      	b.n	8020936 <_realloc_r+0x2fa>
 8020976:	4637      	mov	r7, r6
 8020978:	e6bf      	b.n	80206fa <_realloc_r+0xbe>
 802097a:	431f      	orrs	r7, r3
 802097c:	f8c9 7004 	str.w	r7, [r9, #4]
 8020980:	6853      	ldr	r3, [r2, #4]
 8020982:	f043 0301 	orr.w	r3, r3, #1
 8020986:	6053      	str	r3, [r2, #4]
 8020988:	e6d3      	b.n	8020732 <_realloc_r+0xf6>
 802098a:	bf00      	nop

0802098c <_strtol_l.constprop.0>:
 802098c:	2b24      	cmp	r3, #36	@ 0x24
 802098e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020992:	4686      	mov	lr, r0
 8020994:	4690      	mov	r8, r2
 8020996:	d801      	bhi.n	802099c <_strtol_l.constprop.0+0x10>
 8020998:	2b01      	cmp	r3, #1
 802099a:	d106      	bne.n	80209aa <_strtol_l.constprop.0+0x1e>
 802099c:	f7fb ff46 	bl	801c82c <__errno>
 80209a0:	2316      	movs	r3, #22
 80209a2:	6003      	str	r3, [r0, #0]
 80209a4:	2000      	movs	r0, #0
 80209a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80209aa:	4834      	ldr	r0, [pc, #208]	@ (8020a7c <_strtol_l.constprop.0+0xf0>)
 80209ac:	460d      	mov	r5, r1
 80209ae:	462a      	mov	r2, r5
 80209b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80209b4:	5d06      	ldrb	r6, [r0, r4]
 80209b6:	f016 0608 	ands.w	r6, r6, #8
 80209ba:	d1f8      	bne.n	80209ae <_strtol_l.constprop.0+0x22>
 80209bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80209be:	d12d      	bne.n	8020a1c <_strtol_l.constprop.0+0x90>
 80209c0:	782c      	ldrb	r4, [r5, #0]
 80209c2:	2601      	movs	r6, #1
 80209c4:	1c95      	adds	r5, r2, #2
 80209c6:	f033 0210 	bics.w	r2, r3, #16
 80209ca:	d109      	bne.n	80209e0 <_strtol_l.constprop.0+0x54>
 80209cc:	2c30      	cmp	r4, #48	@ 0x30
 80209ce:	d12a      	bne.n	8020a26 <_strtol_l.constprop.0+0x9a>
 80209d0:	782a      	ldrb	r2, [r5, #0]
 80209d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80209d6:	2a58      	cmp	r2, #88	@ 0x58
 80209d8:	d125      	bne.n	8020a26 <_strtol_l.constprop.0+0x9a>
 80209da:	786c      	ldrb	r4, [r5, #1]
 80209dc:	2310      	movs	r3, #16
 80209de:	3502      	adds	r5, #2
 80209e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80209e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80209e8:	2200      	movs	r2, #0
 80209ea:	fbbc f9f3 	udiv	r9, ip, r3
 80209ee:	4610      	mov	r0, r2
 80209f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80209f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80209f8:	2f09      	cmp	r7, #9
 80209fa:	d81b      	bhi.n	8020a34 <_strtol_l.constprop.0+0xa8>
 80209fc:	463c      	mov	r4, r7
 80209fe:	42a3      	cmp	r3, r4
 8020a00:	dd27      	ble.n	8020a52 <_strtol_l.constprop.0+0xc6>
 8020a02:	1c57      	adds	r7, r2, #1
 8020a04:	d007      	beq.n	8020a16 <_strtol_l.constprop.0+0x8a>
 8020a06:	4581      	cmp	r9, r0
 8020a08:	d320      	bcc.n	8020a4c <_strtol_l.constprop.0+0xc0>
 8020a0a:	d101      	bne.n	8020a10 <_strtol_l.constprop.0+0x84>
 8020a0c:	45a2      	cmp	sl, r4
 8020a0e:	db1d      	blt.n	8020a4c <_strtol_l.constprop.0+0xc0>
 8020a10:	fb00 4003 	mla	r0, r0, r3, r4
 8020a14:	2201      	movs	r2, #1
 8020a16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020a1a:	e7eb      	b.n	80209f4 <_strtol_l.constprop.0+0x68>
 8020a1c:	2c2b      	cmp	r4, #43	@ 0x2b
 8020a1e:	bf04      	itt	eq
 8020a20:	782c      	ldrbeq	r4, [r5, #0]
 8020a22:	1c95      	addeq	r5, r2, #2
 8020a24:	e7cf      	b.n	80209c6 <_strtol_l.constprop.0+0x3a>
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	d1da      	bne.n	80209e0 <_strtol_l.constprop.0+0x54>
 8020a2a:	2c30      	cmp	r4, #48	@ 0x30
 8020a2c:	bf0c      	ite	eq
 8020a2e:	2308      	moveq	r3, #8
 8020a30:	230a      	movne	r3, #10
 8020a32:	e7d5      	b.n	80209e0 <_strtol_l.constprop.0+0x54>
 8020a34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8020a38:	2f19      	cmp	r7, #25
 8020a3a:	d801      	bhi.n	8020a40 <_strtol_l.constprop.0+0xb4>
 8020a3c:	3c37      	subs	r4, #55	@ 0x37
 8020a3e:	e7de      	b.n	80209fe <_strtol_l.constprop.0+0x72>
 8020a40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8020a44:	2f19      	cmp	r7, #25
 8020a46:	d804      	bhi.n	8020a52 <_strtol_l.constprop.0+0xc6>
 8020a48:	3c57      	subs	r4, #87	@ 0x57
 8020a4a:	e7d8      	b.n	80209fe <_strtol_l.constprop.0+0x72>
 8020a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8020a50:	e7e1      	b.n	8020a16 <_strtol_l.constprop.0+0x8a>
 8020a52:	1c53      	adds	r3, r2, #1
 8020a54:	d108      	bne.n	8020a68 <_strtol_l.constprop.0+0xdc>
 8020a56:	2322      	movs	r3, #34	@ 0x22
 8020a58:	f8ce 3000 	str.w	r3, [lr]
 8020a5c:	4660      	mov	r0, ip
 8020a5e:	f1b8 0f00 	cmp.w	r8, #0
 8020a62:	d0a0      	beq.n	80209a6 <_strtol_l.constprop.0+0x1a>
 8020a64:	1e69      	subs	r1, r5, #1
 8020a66:	e006      	b.n	8020a76 <_strtol_l.constprop.0+0xea>
 8020a68:	b106      	cbz	r6, 8020a6c <_strtol_l.constprop.0+0xe0>
 8020a6a:	4240      	negs	r0, r0
 8020a6c:	f1b8 0f00 	cmp.w	r8, #0
 8020a70:	d099      	beq.n	80209a6 <_strtol_l.constprop.0+0x1a>
 8020a72:	2a00      	cmp	r2, #0
 8020a74:	d1f6      	bne.n	8020a64 <_strtol_l.constprop.0+0xd8>
 8020a76:	f8c8 1000 	str.w	r1, [r8]
 8020a7a:	e794      	b.n	80209a6 <_strtol_l.constprop.0+0x1a>
 8020a7c:	08022e9f 	.word	0x08022e9f

08020a80 <_strtol_r>:
 8020a80:	f7ff bf84 	b.w	802098c <_strtol_l.constprop.0>

08020a84 <__ascii_wctomb>:
 8020a84:	4603      	mov	r3, r0
 8020a86:	4608      	mov	r0, r1
 8020a88:	b141      	cbz	r1, 8020a9c <__ascii_wctomb+0x18>
 8020a8a:	2aff      	cmp	r2, #255	@ 0xff
 8020a8c:	d904      	bls.n	8020a98 <__ascii_wctomb+0x14>
 8020a8e:	228a      	movs	r2, #138	@ 0x8a
 8020a90:	601a      	str	r2, [r3, #0]
 8020a92:	f04f 30ff 	mov.w	r0, #4294967295
 8020a96:	4770      	bx	lr
 8020a98:	700a      	strb	r2, [r1, #0]
 8020a9a:	2001      	movs	r0, #1
 8020a9c:	4770      	bx	lr
	...

08020aa0 <_strtoll_l.constprop.0>:
 8020aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aa4:	b085      	sub	sp, #20
 8020aa6:	4690      	mov	r8, r2
 8020aa8:	4a43      	ldr	r2, [pc, #268]	@ (8020bb8 <_strtoll_l.constprop.0+0x118>)
 8020aaa:	9002      	str	r0, [sp, #8]
 8020aac:	4689      	mov	r9, r1
 8020aae:	461e      	mov	r6, r3
 8020ab0:	460d      	mov	r5, r1
 8020ab2:	462b      	mov	r3, r5
 8020ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020ab8:	5d17      	ldrb	r7, [r2, r4]
 8020aba:	f017 0708 	ands.w	r7, r7, #8
 8020abe:	d1f8      	bne.n	8020ab2 <_strtoll_l.constprop.0+0x12>
 8020ac0:	2c2d      	cmp	r4, #45	@ 0x2d
 8020ac2:	d149      	bne.n	8020b58 <_strtoll_l.constprop.0+0xb8>
 8020ac4:	782c      	ldrb	r4, [r5, #0]
 8020ac6:	2701      	movs	r7, #1
 8020ac8:	1c9d      	adds	r5, r3, #2
 8020aca:	f036 0310 	bics.w	r3, r6, #16
 8020ace:	d109      	bne.n	8020ae4 <_strtoll_l.constprop.0+0x44>
 8020ad0:	2c30      	cmp	r4, #48	@ 0x30
 8020ad2:	d146      	bne.n	8020b62 <_strtoll_l.constprop.0+0xc2>
 8020ad4:	782b      	ldrb	r3, [r5, #0]
 8020ad6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8020ada:	2b58      	cmp	r3, #88	@ 0x58
 8020adc:	d141      	bne.n	8020b62 <_strtoll_l.constprop.0+0xc2>
 8020ade:	786c      	ldrb	r4, [r5, #1]
 8020ae0:	2610      	movs	r6, #16
 8020ae2:	3502      	adds	r5, #2
 8020ae4:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8020ae8:	f107 3bff 	add.w	fp, r7, #4294967295
 8020aec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020af0:	17f3      	asrs	r3, r6, #31
 8020af2:	4632      	mov	r2, r6
 8020af4:	4658      	mov	r0, fp
 8020af6:	4651      	mov	r1, sl
 8020af8:	9303      	str	r3, [sp, #12]
 8020afa:	f7e0 f8d5 	bl	8000ca8 <__aeabi_uldivmod>
 8020afe:	9201      	str	r2, [sp, #4]
 8020b00:	2200      	movs	r2, #0
 8020b02:	468e      	mov	lr, r1
 8020b04:	4684      	mov	ip, r0
 8020b06:	4611      	mov	r1, r2
 8020b08:	4610      	mov	r0, r2
 8020b0a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8020b0e:	2b09      	cmp	r3, #9
 8020b10:	d905      	bls.n	8020b1e <_strtoll_l.constprop.0+0x7e>
 8020b12:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8020b16:	2b19      	cmp	r3, #25
 8020b18:	d82a      	bhi.n	8020b70 <_strtoll_l.constprop.0+0xd0>
 8020b1a:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 8020b1e:	429e      	cmp	r6, r3
 8020b20:	dd30      	ble.n	8020b84 <_strtoll_l.constprop.0+0xe4>
 8020b22:	1c54      	adds	r4, r2, #1
 8020b24:	d015      	beq.n	8020b52 <_strtoll_l.constprop.0+0xb2>
 8020b26:	4584      	cmp	ip, r0
 8020b28:	eb7e 0201 	sbcs.w	r2, lr, r1
 8020b2c:	d327      	bcc.n	8020b7e <_strtoll_l.constprop.0+0xde>
 8020b2e:	458e      	cmp	lr, r1
 8020b30:	bf08      	it	eq
 8020b32:	4584      	cmpeq	ip, r0
 8020b34:	d102      	bne.n	8020b3c <_strtoll_l.constprop.0+0x9c>
 8020b36:	9a01      	ldr	r2, [sp, #4]
 8020b38:	429a      	cmp	r2, r3
 8020b3a:	db20      	blt.n	8020b7e <_strtoll_l.constprop.0+0xde>
 8020b3c:	9a03      	ldr	r2, [sp, #12]
 8020b3e:	4371      	muls	r1, r6
 8020b40:	fb00 1102 	mla	r1, r0, r2, r1
 8020b44:	fba6 0200 	umull	r0, r2, r6, r0
 8020b48:	440a      	add	r2, r1
 8020b4a:	1818      	adds	r0, r3, r0
 8020b4c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8020b50:	2201      	movs	r2, #1
 8020b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020b56:	e7d8      	b.n	8020b0a <_strtoll_l.constprop.0+0x6a>
 8020b58:	2c2b      	cmp	r4, #43	@ 0x2b
 8020b5a:	bf04      	itt	eq
 8020b5c:	782c      	ldrbeq	r4, [r5, #0]
 8020b5e:	1c9d      	addeq	r5, r3, #2
 8020b60:	e7b3      	b.n	8020aca <_strtoll_l.constprop.0+0x2a>
 8020b62:	2e00      	cmp	r6, #0
 8020b64:	d1be      	bne.n	8020ae4 <_strtoll_l.constprop.0+0x44>
 8020b66:	2c30      	cmp	r4, #48	@ 0x30
 8020b68:	bf0c      	ite	eq
 8020b6a:	2608      	moveq	r6, #8
 8020b6c:	260a      	movne	r6, #10
 8020b6e:	e7b9      	b.n	8020ae4 <_strtoll_l.constprop.0+0x44>
 8020b70:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8020b74:	2b19      	cmp	r3, #25
 8020b76:	d805      	bhi.n	8020b84 <_strtoll_l.constprop.0+0xe4>
 8020b78:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8020b7c:	e7cf      	b.n	8020b1e <_strtoll_l.constprop.0+0x7e>
 8020b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8020b82:	e7e6      	b.n	8020b52 <_strtoll_l.constprop.0+0xb2>
 8020b84:	1c53      	adds	r3, r2, #1
 8020b86:	d10a      	bne.n	8020b9e <_strtoll_l.constprop.0+0xfe>
 8020b88:	9a02      	ldr	r2, [sp, #8]
 8020b8a:	2322      	movs	r3, #34	@ 0x22
 8020b8c:	6013      	str	r3, [r2, #0]
 8020b8e:	4658      	mov	r0, fp
 8020b90:	4651      	mov	r1, sl
 8020b92:	f1b8 0f00 	cmp.w	r8, #0
 8020b96:	d10a      	bne.n	8020bae <_strtoll_l.constprop.0+0x10e>
 8020b98:	b005      	add	sp, #20
 8020b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b9e:	b117      	cbz	r7, 8020ba6 <_strtoll_l.constprop.0+0x106>
 8020ba0:	4240      	negs	r0, r0
 8020ba2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020ba6:	f1b8 0f00 	cmp.w	r8, #0
 8020baa:	d0f5      	beq.n	8020b98 <_strtoll_l.constprop.0+0xf8>
 8020bac:	b10a      	cbz	r2, 8020bb2 <_strtoll_l.constprop.0+0x112>
 8020bae:	f105 39ff 	add.w	r9, r5, #4294967295
 8020bb2:	f8c8 9000 	str.w	r9, [r8]
 8020bb6:	e7ef      	b.n	8020b98 <_strtoll_l.constprop.0+0xf8>
 8020bb8:	08022e9f 	.word	0x08022e9f

08020bbc <_strtoll_r>:
 8020bbc:	f7ff bf70 	b.w	8020aa0 <_strtoll_l.constprop.0>

08020bc0 <_strtoull_l.constprop.0>:
 8020bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bc4:	4691      	mov	r9, r2
 8020bc6:	4a48      	ldr	r2, [pc, #288]	@ (8020ce8 <_strtoull_l.constprop.0+0x128>)
 8020bc8:	9001      	str	r0, [sp, #4]
 8020bca:	468a      	mov	sl, r1
 8020bcc:	461e      	mov	r6, r3
 8020bce:	460d      	mov	r5, r1
 8020bd0:	462b      	mov	r3, r5
 8020bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020bd6:	5d17      	ldrb	r7, [r2, r4]
 8020bd8:	f017 0708 	ands.w	r7, r7, #8
 8020bdc:	d1f8      	bne.n	8020bd0 <_strtoull_l.constprop.0+0x10>
 8020bde:	2c2d      	cmp	r4, #45	@ 0x2d
 8020be0:	d14a      	bne.n	8020c78 <_strtoull_l.constprop.0+0xb8>
 8020be2:	782c      	ldrb	r4, [r5, #0]
 8020be4:	2701      	movs	r7, #1
 8020be6:	1c9d      	adds	r5, r3, #2
 8020be8:	f036 0310 	bics.w	r3, r6, #16
 8020bec:	d109      	bne.n	8020c02 <_strtoull_l.constprop.0+0x42>
 8020bee:	2c30      	cmp	r4, #48	@ 0x30
 8020bf0:	d147      	bne.n	8020c82 <_strtoull_l.constprop.0+0xc2>
 8020bf2:	782b      	ldrb	r3, [r5, #0]
 8020bf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8020bf8:	2b58      	cmp	r3, #88	@ 0x58
 8020bfa:	d142      	bne.n	8020c82 <_strtoull_l.constprop.0+0xc2>
 8020bfc:	786c      	ldrb	r4, [r5, #1]
 8020bfe:	2610      	movs	r6, #16
 8020c00:	3502      	adds	r5, #2
 8020c02:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8020c06:	4632      	mov	r2, r6
 8020c08:	465b      	mov	r3, fp
 8020c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8020c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8020c12:	f7e0 f849 	bl	8000ca8 <__aeabi_uldivmod>
 8020c16:	4632      	mov	r2, r6
 8020c18:	9000      	str	r0, [sp, #0]
 8020c1a:	4688      	mov	r8, r1
 8020c1c:	465b      	mov	r3, fp
 8020c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8020c22:	f04f 31ff 	mov.w	r1, #4294967295
 8020c26:	f7e0 f83f 	bl	8000ca8 <__aeabi_uldivmod>
 8020c2a:	2300      	movs	r3, #0
 8020c2c:	4618      	mov	r0, r3
 8020c2e:	4619      	mov	r1, r3
 8020c30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8020c34:	f1bc 0f09 	cmp.w	ip, #9
 8020c38:	d82a      	bhi.n	8020c90 <_strtoull_l.constprop.0+0xd0>
 8020c3a:	4664      	mov	r4, ip
 8020c3c:	42a6      	cmp	r6, r4
 8020c3e:	dd38      	ble.n	8020cb2 <_strtoull_l.constprop.0+0xf2>
 8020c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020c44:	d015      	beq.n	8020c72 <_strtoull_l.constprop.0+0xb2>
 8020c46:	9b00      	ldr	r3, [sp, #0]
 8020c48:	4283      	cmp	r3, r0
 8020c4a:	eb78 0301 	sbcs.w	r3, r8, r1
 8020c4e:	d32d      	bcc.n	8020cac <_strtoull_l.constprop.0+0xec>
 8020c50:	9b00      	ldr	r3, [sp, #0]
 8020c52:	4588      	cmp	r8, r1
 8020c54:	bf08      	it	eq
 8020c56:	4283      	cmpeq	r3, r0
 8020c58:	d101      	bne.n	8020c5e <_strtoull_l.constprop.0+0x9e>
 8020c5a:	42a2      	cmp	r2, r4
 8020c5c:	db26      	blt.n	8020cac <_strtoull_l.constprop.0+0xec>
 8020c5e:	4371      	muls	r1, r6
 8020c60:	fb00 110b 	mla	r1, r0, fp, r1
 8020c64:	fba6 0300 	umull	r0, r3, r6, r0
 8020c68:	4419      	add	r1, r3
 8020c6a:	1820      	adds	r0, r4, r0
 8020c6c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8020c70:	2301      	movs	r3, #1
 8020c72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020c76:	e7db      	b.n	8020c30 <_strtoull_l.constprop.0+0x70>
 8020c78:	2c2b      	cmp	r4, #43	@ 0x2b
 8020c7a:	bf04      	itt	eq
 8020c7c:	782c      	ldrbeq	r4, [r5, #0]
 8020c7e:	1c9d      	addeq	r5, r3, #2
 8020c80:	e7b2      	b.n	8020be8 <_strtoull_l.constprop.0+0x28>
 8020c82:	2e00      	cmp	r6, #0
 8020c84:	d1bd      	bne.n	8020c02 <_strtoull_l.constprop.0+0x42>
 8020c86:	2c30      	cmp	r4, #48	@ 0x30
 8020c88:	bf0c      	ite	eq
 8020c8a:	2608      	moveq	r6, #8
 8020c8c:	260a      	movne	r6, #10
 8020c8e:	e7b8      	b.n	8020c02 <_strtoull_l.constprop.0+0x42>
 8020c90:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8020c94:	f1bc 0f19 	cmp.w	ip, #25
 8020c98:	d801      	bhi.n	8020c9e <_strtoull_l.constprop.0+0xde>
 8020c9a:	3c37      	subs	r4, #55	@ 0x37
 8020c9c:	e7ce      	b.n	8020c3c <_strtoull_l.constprop.0+0x7c>
 8020c9e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8020ca2:	f1bc 0f19 	cmp.w	ip, #25
 8020ca6:	d804      	bhi.n	8020cb2 <_strtoull_l.constprop.0+0xf2>
 8020ca8:	3c57      	subs	r4, #87	@ 0x57
 8020caa:	e7c7      	b.n	8020c3c <_strtoull_l.constprop.0+0x7c>
 8020cac:	f04f 33ff 	mov.w	r3, #4294967295
 8020cb0:	e7df      	b.n	8020c72 <_strtoull_l.constprop.0+0xb2>
 8020cb2:	1c5a      	adds	r2, r3, #1
 8020cb4:	d10a      	bne.n	8020ccc <_strtoull_l.constprop.0+0x10c>
 8020cb6:	9901      	ldr	r1, [sp, #4]
 8020cb8:	2222      	movs	r2, #34	@ 0x22
 8020cba:	600a      	str	r2, [r1, #0]
 8020cbc:	4618      	mov	r0, r3
 8020cbe:	4619      	mov	r1, r3
 8020cc0:	f1b9 0f00 	cmp.w	r9, #0
 8020cc4:	d10a      	bne.n	8020cdc <_strtoull_l.constprop.0+0x11c>
 8020cc6:	b003      	add	sp, #12
 8020cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ccc:	b117      	cbz	r7, 8020cd4 <_strtoull_l.constprop.0+0x114>
 8020cce:	4240      	negs	r0, r0
 8020cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020cd4:	f1b9 0f00 	cmp.w	r9, #0
 8020cd8:	d0f5      	beq.n	8020cc6 <_strtoull_l.constprop.0+0x106>
 8020cda:	b10b      	cbz	r3, 8020ce0 <_strtoull_l.constprop.0+0x120>
 8020cdc:	f105 3aff 	add.w	sl, r5, #4294967295
 8020ce0:	f8c9 a000 	str.w	sl, [r9]
 8020ce4:	e7ef      	b.n	8020cc6 <_strtoull_l.constprop.0+0x106>
 8020ce6:	bf00      	nop
 8020ce8:	08022e9f 	.word	0x08022e9f

08020cec <_strtoull_r>:
 8020cec:	f7ff bf68 	b.w	8020bc0 <_strtoull_l.constprop.0>

08020cf0 <_mbrtowc_r>:
 8020cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020cf2:	4c0a      	ldr	r4, [pc, #40]	@ (8020d1c <_mbrtowc_r+0x2c>)
 8020cf4:	9e08      	ldr	r6, [sp, #32]
 8020cf6:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 8020cfa:	9600      	str	r6, [sp, #0]
 8020cfc:	4605      	mov	r5, r0
 8020cfe:	4614      	mov	r4, r2
 8020d00:	b912      	cbnz	r2, 8020d08 <_mbrtowc_r+0x18>
 8020d02:	4a07      	ldr	r2, [pc, #28]	@ (8020d20 <_mbrtowc_r+0x30>)
 8020d04:	2301      	movs	r3, #1
 8020d06:	4621      	mov	r1, r4
 8020d08:	47b8      	blx	r7
 8020d0a:	1c43      	adds	r3, r0, #1
 8020d0c:	bf01      	itttt	eq
 8020d0e:	2300      	moveq	r3, #0
 8020d10:	6033      	streq	r3, [r6, #0]
 8020d12:	238a      	moveq	r3, #138	@ 0x8a
 8020d14:	602b      	streq	r3, [r5, #0]
 8020d16:	b003      	add	sp, #12
 8020d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d1a:	bf00      	nop
 8020d1c:	200007f8 	.word	0x200007f8
 8020d20:	0802328b 	.word	0x0802328b

08020d24 <iswspace>:
 8020d24:	2100      	movs	r1, #0
 8020d26:	f000 b801 	b.w	8020d2c <iswspace_l>
	...

08020d2c <iswspace_l>:
 8020d2c:	28ff      	cmp	r0, #255	@ 0xff
 8020d2e:	bf9d      	ittte	ls
 8020d30:	4b02      	ldrls	r3, [pc, #8]	@ (8020d3c <iswspace_l+0x10>)
 8020d32:	5c18      	ldrbls	r0, [r3, r0]
 8020d34:	f000 0008 	andls.w	r0, r0, #8
 8020d38:	2000      	movhi	r0, #0
 8020d3a:	4770      	bx	lr
 8020d3c:	08022e9f 	.word	0x08022e9f

08020d40 <__ssprint_r>:
 8020d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d44:	6893      	ldr	r3, [r2, #8]
 8020d46:	f8d2 b000 	ldr.w	fp, [r2]
 8020d4a:	9001      	str	r0, [sp, #4]
 8020d4c:	460c      	mov	r4, r1
 8020d4e:	4617      	mov	r7, r2
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d157      	bne.n	8020e04 <__ssprint_r+0xc4>
 8020d54:	2000      	movs	r0, #0
 8020d56:	2300      	movs	r3, #0
 8020d58:	607b      	str	r3, [r7, #4]
 8020d5a:	b003      	add	sp, #12
 8020d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d60:	e9db a800 	ldrd	sl, r8, [fp]
 8020d64:	f10b 0b08 	add.w	fp, fp, #8
 8020d68:	68a6      	ldr	r6, [r4, #8]
 8020d6a:	6820      	ldr	r0, [r4, #0]
 8020d6c:	f1b8 0f00 	cmp.w	r8, #0
 8020d70:	d0f6      	beq.n	8020d60 <__ssprint_r+0x20>
 8020d72:	45b0      	cmp	r8, r6
 8020d74:	d32e      	bcc.n	8020dd4 <__ssprint_r+0x94>
 8020d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d7a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020d7e:	d029      	beq.n	8020dd4 <__ssprint_r+0x94>
 8020d80:	6921      	ldr	r1, [r4, #16]
 8020d82:	6965      	ldr	r5, [r4, #20]
 8020d84:	eba0 0901 	sub.w	r9, r0, r1
 8020d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020d90:	f109 0001 	add.w	r0, r9, #1
 8020d94:	106d      	asrs	r5, r5, #1
 8020d96:	4440      	add	r0, r8
 8020d98:	4285      	cmp	r5, r0
 8020d9a:	bf38      	it	cc
 8020d9c:	4605      	movcc	r5, r0
 8020d9e:	0553      	lsls	r3, r2, #21
 8020da0:	d534      	bpl.n	8020e0c <__ssprint_r+0xcc>
 8020da2:	9801      	ldr	r0, [sp, #4]
 8020da4:	4629      	mov	r1, r5
 8020da6:	f7fa fa7d 	bl	801b2a4 <_malloc_r>
 8020daa:	4606      	mov	r6, r0
 8020dac:	2800      	cmp	r0, #0
 8020dae:	d038      	beq.n	8020e22 <__ssprint_r+0xe2>
 8020db0:	464a      	mov	r2, r9
 8020db2:	6921      	ldr	r1, [r4, #16]
 8020db4:	f7fb fd7e 	bl	801c8b4 <memcpy>
 8020db8:	89a2      	ldrh	r2, [r4, #12]
 8020dba:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8020dbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8020dc2:	81a2      	strh	r2, [r4, #12]
 8020dc4:	6126      	str	r6, [r4, #16]
 8020dc6:	6165      	str	r5, [r4, #20]
 8020dc8:	444e      	add	r6, r9
 8020dca:	eba5 0509 	sub.w	r5, r5, r9
 8020dce:	6026      	str	r6, [r4, #0]
 8020dd0:	60a5      	str	r5, [r4, #8]
 8020dd2:	4646      	mov	r6, r8
 8020dd4:	4546      	cmp	r6, r8
 8020dd6:	bf28      	it	cs
 8020dd8:	4646      	movcs	r6, r8
 8020dda:	4632      	mov	r2, r6
 8020ddc:	4651      	mov	r1, sl
 8020dde:	6820      	ldr	r0, [r4, #0]
 8020de0:	f000 f82b 	bl	8020e3a <memmove>
 8020de4:	68a2      	ldr	r2, [r4, #8]
 8020de6:	1b92      	subs	r2, r2, r6
 8020de8:	60a2      	str	r2, [r4, #8]
 8020dea:	6822      	ldr	r2, [r4, #0]
 8020dec:	4432      	add	r2, r6
 8020dee:	6022      	str	r2, [r4, #0]
 8020df0:	68ba      	ldr	r2, [r7, #8]
 8020df2:	eba2 0308 	sub.w	r3, r2, r8
 8020df6:	44c2      	add	sl, r8
 8020df8:	60bb      	str	r3, [r7, #8]
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d0aa      	beq.n	8020d54 <__ssprint_r+0x14>
 8020dfe:	f04f 0800 	mov.w	r8, #0
 8020e02:	e7b1      	b.n	8020d68 <__ssprint_r+0x28>
 8020e04:	f04f 0a00 	mov.w	sl, #0
 8020e08:	46d0      	mov	r8, sl
 8020e0a:	e7ad      	b.n	8020d68 <__ssprint_r+0x28>
 8020e0c:	9801      	ldr	r0, [sp, #4]
 8020e0e:	462a      	mov	r2, r5
 8020e10:	f7ff fc14 	bl	802063c <_realloc_r>
 8020e14:	4606      	mov	r6, r0
 8020e16:	2800      	cmp	r0, #0
 8020e18:	d1d4      	bne.n	8020dc4 <__ssprint_r+0x84>
 8020e1a:	6921      	ldr	r1, [r4, #16]
 8020e1c:	9801      	ldr	r0, [sp, #4]
 8020e1e:	f7fb fdc5 	bl	801c9ac <_free_r>
 8020e22:	9a01      	ldr	r2, [sp, #4]
 8020e24:	230c      	movs	r3, #12
 8020e26:	6013      	str	r3, [r2, #0]
 8020e28:	89a3      	ldrh	r3, [r4, #12]
 8020e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020e2e:	81a3      	strh	r3, [r4, #12]
 8020e30:	2300      	movs	r3, #0
 8020e32:	60bb      	str	r3, [r7, #8]
 8020e34:	f04f 30ff 	mov.w	r0, #4294967295
 8020e38:	e78d      	b.n	8020d56 <__ssprint_r+0x16>

08020e3a <memmove>:
 8020e3a:	4288      	cmp	r0, r1
 8020e3c:	b510      	push	{r4, lr}
 8020e3e:	eb01 0402 	add.w	r4, r1, r2
 8020e42:	d902      	bls.n	8020e4a <memmove+0x10>
 8020e44:	4284      	cmp	r4, r0
 8020e46:	4623      	mov	r3, r4
 8020e48:	d807      	bhi.n	8020e5a <memmove+0x20>
 8020e4a:	1e43      	subs	r3, r0, #1
 8020e4c:	42a1      	cmp	r1, r4
 8020e4e:	d008      	beq.n	8020e62 <memmove+0x28>
 8020e50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020e54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020e58:	e7f8      	b.n	8020e4c <memmove+0x12>
 8020e5a:	4402      	add	r2, r0
 8020e5c:	4601      	mov	r1, r0
 8020e5e:	428a      	cmp	r2, r1
 8020e60:	d100      	bne.n	8020e64 <memmove+0x2a>
 8020e62:	bd10      	pop	{r4, pc}
 8020e64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020e68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020e6c:	e7f7      	b.n	8020e5e <memmove+0x24>
	...

08020e70 <__assert_func>:
 8020e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020e72:	4614      	mov	r4, r2
 8020e74:	461a      	mov	r2, r3
 8020e76:	4b09      	ldr	r3, [pc, #36]	@ (8020e9c <__assert_func+0x2c>)
 8020e78:	681b      	ldr	r3, [r3, #0]
 8020e7a:	4605      	mov	r5, r0
 8020e7c:	68d8      	ldr	r0, [r3, #12]
 8020e7e:	b954      	cbnz	r4, 8020e96 <__assert_func+0x26>
 8020e80:	4b07      	ldr	r3, [pc, #28]	@ (8020ea0 <__assert_func+0x30>)
 8020e82:	461c      	mov	r4, r3
 8020e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020e88:	9100      	str	r1, [sp, #0]
 8020e8a:	462b      	mov	r3, r5
 8020e8c:	4905      	ldr	r1, [pc, #20]	@ (8020ea4 <__assert_func+0x34>)
 8020e8e:	f000 f843 	bl	8020f18 <fiprintf>
 8020e92:	f000 ff59 	bl	8021d48 <abort>
 8020e96:	4b04      	ldr	r3, [pc, #16]	@ (8020ea8 <__assert_func+0x38>)
 8020e98:	e7f4      	b.n	8020e84 <__assert_func+0x14>
 8020e9a:	bf00      	nop
 8020e9c:	20000674 	.word	0x20000674
 8020ea0:	0802328b 	.word	0x0802328b
 8020ea4:	0802325d 	.word	0x0802325d
 8020ea8:	08023250 	.word	0x08023250

08020eac <_calloc_r>:
 8020eac:	b538      	push	{r3, r4, r5, lr}
 8020eae:	fba1 1502 	umull	r1, r5, r1, r2
 8020eb2:	b935      	cbnz	r5, 8020ec2 <_calloc_r+0x16>
 8020eb4:	f7fa f9f6 	bl	801b2a4 <_malloc_r>
 8020eb8:	4604      	mov	r4, r0
 8020eba:	b938      	cbnz	r0, 8020ecc <_calloc_r+0x20>
 8020ebc:	2400      	movs	r4, #0
 8020ebe:	4620      	mov	r0, r4
 8020ec0:	bd38      	pop	{r3, r4, r5, pc}
 8020ec2:	f7fb fcb3 	bl	801c82c <__errno>
 8020ec6:	230c      	movs	r3, #12
 8020ec8:	6003      	str	r3, [r0, #0]
 8020eca:	e7f7      	b.n	8020ebc <_calloc_r+0x10>
 8020ecc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8020ed0:	f022 0203 	bic.w	r2, r2, #3
 8020ed4:	3a04      	subs	r2, #4
 8020ed6:	2a24      	cmp	r2, #36	@ 0x24
 8020ed8:	d819      	bhi.n	8020f0e <_calloc_r+0x62>
 8020eda:	2a13      	cmp	r2, #19
 8020edc:	d915      	bls.n	8020f0a <_calloc_r+0x5e>
 8020ede:	2a1b      	cmp	r2, #27
 8020ee0:	e9c0 5500 	strd	r5, r5, [r0]
 8020ee4:	d806      	bhi.n	8020ef4 <_calloc_r+0x48>
 8020ee6:	f100 0308 	add.w	r3, r0, #8
 8020eea:	2200      	movs	r2, #0
 8020eec:	e9c3 2200 	strd	r2, r2, [r3]
 8020ef0:	609a      	str	r2, [r3, #8]
 8020ef2:	e7e4      	b.n	8020ebe <_calloc_r+0x12>
 8020ef4:	2a24      	cmp	r2, #36	@ 0x24
 8020ef6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8020efa:	bf11      	iteee	ne
 8020efc:	f100 0310 	addne.w	r3, r0, #16
 8020f00:	6105      	streq	r5, [r0, #16]
 8020f02:	f100 0318 	addeq.w	r3, r0, #24
 8020f06:	6145      	streq	r5, [r0, #20]
 8020f08:	e7ef      	b.n	8020eea <_calloc_r+0x3e>
 8020f0a:	4603      	mov	r3, r0
 8020f0c:	e7ed      	b.n	8020eea <_calloc_r+0x3e>
 8020f0e:	4629      	mov	r1, r5
 8020f10:	f7fa fe1e 	bl	801bb50 <memset>
 8020f14:	e7d3      	b.n	8020ebe <_calloc_r+0x12>
	...

08020f18 <fiprintf>:
 8020f18:	b40e      	push	{r1, r2, r3}
 8020f1a:	b503      	push	{r0, r1, lr}
 8020f1c:	4601      	mov	r1, r0
 8020f1e:	ab03      	add	r3, sp, #12
 8020f20:	4805      	ldr	r0, [pc, #20]	@ (8020f38 <fiprintf+0x20>)
 8020f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8020f26:	6800      	ldr	r0, [r0, #0]
 8020f28:	9301      	str	r3, [sp, #4]
 8020f2a:	f000 f839 	bl	8020fa0 <_vfiprintf_r>
 8020f2e:	b002      	add	sp, #8
 8020f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8020f34:	b003      	add	sp, #12
 8020f36:	4770      	bx	lr
 8020f38:	20000674 	.word	0x20000674

08020f3c <__sprint_r>:
 8020f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f40:	6893      	ldr	r3, [r2, #8]
 8020f42:	4680      	mov	r8, r0
 8020f44:	460e      	mov	r6, r1
 8020f46:	4614      	mov	r4, r2
 8020f48:	b343      	cbz	r3, 8020f9c <__sprint_r+0x60>
 8020f4a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8020f4c:	049d      	lsls	r5, r3, #18
 8020f4e:	d522      	bpl.n	8020f96 <__sprint_r+0x5a>
 8020f50:	6815      	ldr	r5, [r2, #0]
 8020f52:	68a0      	ldr	r0, [r4, #8]
 8020f54:	3508      	adds	r5, #8
 8020f56:	b928      	cbnz	r0, 8020f64 <__sprint_r+0x28>
 8020f58:	2300      	movs	r3, #0
 8020f5a:	60a3      	str	r3, [r4, #8]
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	6063      	str	r3, [r4, #4]
 8020f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f64:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 8020f68:	f04f 0900 	mov.w	r9, #0
 8020f6c:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 8020f70:	45ca      	cmp	sl, r9
 8020f72:	dc05      	bgt.n	8020f80 <__sprint_r+0x44>
 8020f74:	68a3      	ldr	r3, [r4, #8]
 8020f76:	f027 0703 	bic.w	r7, r7, #3
 8020f7a:	1bdb      	subs	r3, r3, r7
 8020f7c:	60a3      	str	r3, [r4, #8]
 8020f7e:	e7e8      	b.n	8020f52 <__sprint_r+0x16>
 8020f80:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8020f84:	4632      	mov	r2, r6
 8020f86:	4640      	mov	r0, r8
 8020f88:	f000 feb5 	bl	8021cf6 <_fputwc_r>
 8020f8c:	1c43      	adds	r3, r0, #1
 8020f8e:	d0e3      	beq.n	8020f58 <__sprint_r+0x1c>
 8020f90:	f109 0901 	add.w	r9, r9, #1
 8020f94:	e7ec      	b.n	8020f70 <__sprint_r+0x34>
 8020f96:	f000 fccb 	bl	8021930 <__sfvwrite_r>
 8020f9a:	e7dd      	b.n	8020f58 <__sprint_r+0x1c>
 8020f9c:	4618      	mov	r0, r3
 8020f9e:	e7dd      	b.n	8020f5c <__sprint_r+0x20>

08020fa0 <_vfiprintf_r>:
 8020fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fa4:	b0bb      	sub	sp, #236	@ 0xec
 8020fa6:	460f      	mov	r7, r1
 8020fa8:	4693      	mov	fp, r2
 8020faa:	461c      	mov	r4, r3
 8020fac:	461d      	mov	r5, r3
 8020fae:	9000      	str	r0, [sp, #0]
 8020fb0:	b118      	cbz	r0, 8020fba <_vfiprintf_r+0x1a>
 8020fb2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8020fb4:	b90b      	cbnz	r3, 8020fba <_vfiprintf_r+0x1a>
 8020fb6:	f7fa fd09 	bl	801b9cc <__sinit>
 8020fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020fbc:	07db      	lsls	r3, r3, #31
 8020fbe:	d405      	bmi.n	8020fcc <_vfiprintf_r+0x2c>
 8020fc0:	89bb      	ldrh	r3, [r7, #12]
 8020fc2:	059e      	lsls	r6, r3, #22
 8020fc4:	d402      	bmi.n	8020fcc <_vfiprintf_r+0x2c>
 8020fc6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020fc8:	f7fb fc5d 	bl	801c886 <__retarget_lock_acquire_recursive>
 8020fcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8020fd0:	0498      	lsls	r0, r3, #18
 8020fd2:	d406      	bmi.n	8020fe2 <_vfiprintf_r+0x42>
 8020fd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8020fd8:	81bb      	strh	r3, [r7, #12]
 8020fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020fdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020fe0:	667b      	str	r3, [r7, #100]	@ 0x64
 8020fe2:	89bb      	ldrh	r3, [r7, #12]
 8020fe4:	0719      	lsls	r1, r3, #28
 8020fe6:	d501      	bpl.n	8020fec <_vfiprintf_r+0x4c>
 8020fe8:	693b      	ldr	r3, [r7, #16]
 8020fea:	b9ab      	cbnz	r3, 8021018 <_vfiprintf_r+0x78>
 8020fec:	9800      	ldr	r0, [sp, #0]
 8020fee:	4639      	mov	r1, r7
 8020ff0:	f000 fdea 	bl	8021bc8 <__swsetup_r>
 8020ff4:	b180      	cbz	r0, 8021018 <_vfiprintf_r+0x78>
 8020ff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020ff8:	07da      	lsls	r2, r3, #31
 8020ffa:	d506      	bpl.n	802100a <_vfiprintf_r+0x6a>
 8020ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8021000:	9303      	str	r3, [sp, #12]
 8021002:	9803      	ldr	r0, [sp, #12]
 8021004:	b03b      	add	sp, #236	@ 0xec
 8021006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802100a:	89bb      	ldrh	r3, [r7, #12]
 802100c:	059b      	lsls	r3, r3, #22
 802100e:	d4f5      	bmi.n	8020ffc <_vfiprintf_r+0x5c>
 8021010:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021012:	f7fb fc3a 	bl	801c88a <__retarget_lock_release_recursive>
 8021016:	e7f1      	b.n	8020ffc <_vfiprintf_r+0x5c>
 8021018:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 802101c:	f003 021a 	and.w	r2, r3, #26
 8021020:	2a0a      	cmp	r2, #10
 8021022:	d114      	bne.n	802104e <_vfiprintf_r+0xae>
 8021024:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8021028:	2a00      	cmp	r2, #0
 802102a:	db10      	blt.n	802104e <_vfiprintf_r+0xae>
 802102c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 802102e:	07d6      	lsls	r6, r2, #31
 8021030:	d404      	bmi.n	802103c <_vfiprintf_r+0x9c>
 8021032:	059d      	lsls	r5, r3, #22
 8021034:	d402      	bmi.n	802103c <_vfiprintf_r+0x9c>
 8021036:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021038:	f7fb fc27 	bl	801c88a <__retarget_lock_release_recursive>
 802103c:	9800      	ldr	r0, [sp, #0]
 802103e:	4623      	mov	r3, r4
 8021040:	465a      	mov	r2, fp
 8021042:	4639      	mov	r1, r7
 8021044:	b03b      	add	sp, #236	@ 0xec
 8021046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802104a:	f000 bc31 	b.w	80218b0 <__sbprintf>
 802104e:	2300      	movs	r3, #0
 8021050:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8021054:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021058:	ae11      	add	r6, sp, #68	@ 0x44
 802105a:	960e      	str	r6, [sp, #56]	@ 0x38
 802105c:	9307      	str	r3, [sp, #28]
 802105e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021060:	9303      	str	r3, [sp, #12]
 8021062:	465b      	mov	r3, fp
 8021064:	461c      	mov	r4, r3
 8021066:	f813 2b01 	ldrb.w	r2, [r3], #1
 802106a:	b10a      	cbz	r2, 8021070 <_vfiprintf_r+0xd0>
 802106c:	2a25      	cmp	r2, #37	@ 0x25
 802106e:	d1f9      	bne.n	8021064 <_vfiprintf_r+0xc4>
 8021070:	ebb4 080b 	subs.w	r8, r4, fp
 8021074:	d00d      	beq.n	8021092 <_vfiprintf_r+0xf2>
 8021076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021078:	4443      	add	r3, r8
 802107a:	9310      	str	r3, [sp, #64]	@ 0x40
 802107c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802107e:	3301      	adds	r3, #1
 8021080:	2b07      	cmp	r3, #7
 8021082:	e9c6 b800 	strd	fp, r8, [r6]
 8021086:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021088:	dc75      	bgt.n	8021176 <_vfiprintf_r+0x1d6>
 802108a:	3608      	adds	r6, #8
 802108c:	9b03      	ldr	r3, [sp, #12]
 802108e:	4443      	add	r3, r8
 8021090:	9303      	str	r3, [sp, #12]
 8021092:	7823      	ldrb	r3, [r4, #0]
 8021094:	2b00      	cmp	r3, #0
 8021096:	f000 83cd 	beq.w	8021834 <_vfiprintf_r+0x894>
 802109a:	2300      	movs	r3, #0
 802109c:	f04f 32ff 	mov.w	r2, #4294967295
 80210a0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80210a4:	3401      	adds	r4, #1
 80210a6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80210aa:	469a      	mov	sl, r3
 80210ac:	46a3      	mov	fp, r4
 80210ae:	f81b 3b01 	ldrb.w	r3, [fp], #1
 80210b2:	f1a3 0220 	sub.w	r2, r3, #32
 80210b6:	2a5a      	cmp	r2, #90	@ 0x5a
 80210b8:	f200 8316 	bhi.w	80216e8 <_vfiprintf_r+0x748>
 80210bc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80210c0:	0314009a 	.word	0x0314009a
 80210c4:	00a20314 	.word	0x00a20314
 80210c8:	03140314 	.word	0x03140314
 80210cc:	00820314 	.word	0x00820314
 80210d0:	03140314 	.word	0x03140314
 80210d4:	00af00a5 	.word	0x00af00a5
 80210d8:	00ac0314 	.word	0x00ac0314
 80210dc:	031400b1 	.word	0x031400b1
 80210e0:	00d000cd 	.word	0x00d000cd
 80210e4:	00d000d0 	.word	0x00d000d0
 80210e8:	00d000d0 	.word	0x00d000d0
 80210ec:	00d000d0 	.word	0x00d000d0
 80210f0:	00d000d0 	.word	0x00d000d0
 80210f4:	03140314 	.word	0x03140314
 80210f8:	03140314 	.word	0x03140314
 80210fc:	03140314 	.word	0x03140314
 8021100:	03140314 	.word	0x03140314
 8021104:	00f70314 	.word	0x00f70314
 8021108:	03140104 	.word	0x03140104
 802110c:	03140314 	.word	0x03140314
 8021110:	03140314 	.word	0x03140314
 8021114:	03140314 	.word	0x03140314
 8021118:	03140314 	.word	0x03140314
 802111c:	01520314 	.word	0x01520314
 8021120:	03140314 	.word	0x03140314
 8021124:	019a0314 	.word	0x019a0314
 8021128:	027a0314 	.word	0x027a0314
 802112c:	03140314 	.word	0x03140314
 8021130:	0314029a 	.word	0x0314029a
 8021134:	03140314 	.word	0x03140314
 8021138:	03140314 	.word	0x03140314
 802113c:	03140314 	.word	0x03140314
 8021140:	03140314 	.word	0x03140314
 8021144:	00f70314 	.word	0x00f70314
 8021148:	03140106 	.word	0x03140106
 802114c:	03140314 	.word	0x03140314
 8021150:	010600e0 	.word	0x010600e0
 8021154:	031400f1 	.word	0x031400f1
 8021158:	031400eb 	.word	0x031400eb
 802115c:	01540132 	.word	0x01540132
 8021160:	00f10189 	.word	0x00f10189
 8021164:	019a0314 	.word	0x019a0314
 8021168:	027c0098 	.word	0x027c0098
 802116c:	03140314 	.word	0x03140314
 8021170:	03140065 	.word	0x03140065
 8021174:	0098      	.short	0x0098
 8021176:	9800      	ldr	r0, [sp, #0]
 8021178:	aa0e      	add	r2, sp, #56	@ 0x38
 802117a:	4639      	mov	r1, r7
 802117c:	f7ff fede 	bl	8020f3c <__sprint_r>
 8021180:	2800      	cmp	r0, #0
 8021182:	f040 8336 	bne.w	80217f2 <_vfiprintf_r+0x852>
 8021186:	ae11      	add	r6, sp, #68	@ 0x44
 8021188:	e780      	b.n	802108c <_vfiprintf_r+0xec>
 802118a:	4a99      	ldr	r2, [pc, #612]	@ (80213f0 <_vfiprintf_r+0x450>)
 802118c:	9205      	str	r2, [sp, #20]
 802118e:	f01a 0220 	ands.w	r2, sl, #32
 8021192:	f000 8231 	beq.w	80215f8 <_vfiprintf_r+0x658>
 8021196:	3507      	adds	r5, #7
 8021198:	f025 0507 	bic.w	r5, r5, #7
 802119c:	46a8      	mov	r8, r5
 802119e:	686d      	ldr	r5, [r5, #4]
 80211a0:	f858 4b08 	ldr.w	r4, [r8], #8
 80211a4:	f01a 0f01 	tst.w	sl, #1
 80211a8:	d009      	beq.n	80211be <_vfiprintf_r+0x21e>
 80211aa:	ea54 0205 	orrs.w	r2, r4, r5
 80211ae:	bf1f      	itttt	ne
 80211b0:	2230      	movne	r2, #48	@ 0x30
 80211b2:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 80211b6:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 80211ba:	f04a 0a02 	orrne.w	sl, sl, #2
 80211be:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 80211c2:	e112      	b.n	80213ea <_vfiprintf_r+0x44a>
 80211c4:	9800      	ldr	r0, [sp, #0]
 80211c6:	f7fe f81d 	bl	801f204 <_localeconv_r>
 80211ca:	6843      	ldr	r3, [r0, #4]
 80211cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80211ce:	4618      	mov	r0, r3
 80211d0:	f7df f808 	bl	80001e4 <strlen>
 80211d4:	9007      	str	r0, [sp, #28]
 80211d6:	9800      	ldr	r0, [sp, #0]
 80211d8:	f7fe f814 	bl	801f204 <_localeconv_r>
 80211dc:	6883      	ldr	r3, [r0, #8]
 80211de:	9306      	str	r3, [sp, #24]
 80211e0:	9b07      	ldr	r3, [sp, #28]
 80211e2:	b12b      	cbz	r3, 80211f0 <_vfiprintf_r+0x250>
 80211e4:	9b06      	ldr	r3, [sp, #24]
 80211e6:	b11b      	cbz	r3, 80211f0 <_vfiprintf_r+0x250>
 80211e8:	781b      	ldrb	r3, [r3, #0]
 80211ea:	b10b      	cbz	r3, 80211f0 <_vfiprintf_r+0x250>
 80211ec:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 80211f0:	465c      	mov	r4, fp
 80211f2:	e75b      	b.n	80210ac <_vfiprintf_r+0x10c>
 80211f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	d1f9      	bne.n	80211f0 <_vfiprintf_r+0x250>
 80211fc:	2320      	movs	r3, #32
 80211fe:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8021202:	e7f5      	b.n	80211f0 <_vfiprintf_r+0x250>
 8021204:	f04a 0a01 	orr.w	sl, sl, #1
 8021208:	e7f2      	b.n	80211f0 <_vfiprintf_r+0x250>
 802120a:	f855 3b04 	ldr.w	r3, [r5], #4
 802120e:	9302      	str	r3, [sp, #8]
 8021210:	2b00      	cmp	r3, #0
 8021212:	daed      	bge.n	80211f0 <_vfiprintf_r+0x250>
 8021214:	425b      	negs	r3, r3
 8021216:	9302      	str	r3, [sp, #8]
 8021218:	f04a 0a04 	orr.w	sl, sl, #4
 802121c:	e7e8      	b.n	80211f0 <_vfiprintf_r+0x250>
 802121e:	232b      	movs	r3, #43	@ 0x2b
 8021220:	e7ed      	b.n	80211fe <_vfiprintf_r+0x25e>
 8021222:	465a      	mov	r2, fp
 8021224:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021228:	2b2a      	cmp	r3, #42	@ 0x2a
 802122a:	d112      	bne.n	8021252 <_vfiprintf_r+0x2b2>
 802122c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021230:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021234:	9301      	str	r3, [sp, #4]
 8021236:	4693      	mov	fp, r2
 8021238:	e7da      	b.n	80211f0 <_vfiprintf_r+0x250>
 802123a:	9b01      	ldr	r3, [sp, #4]
 802123c:	fb00 1303 	mla	r3, r0, r3, r1
 8021240:	9301      	str	r3, [sp, #4]
 8021242:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021246:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802124a:	2909      	cmp	r1, #9
 802124c:	d9f5      	bls.n	802123a <_vfiprintf_r+0x29a>
 802124e:	4693      	mov	fp, r2
 8021250:	e72f      	b.n	80210b2 <_vfiprintf_r+0x112>
 8021252:	2100      	movs	r1, #0
 8021254:	9101      	str	r1, [sp, #4]
 8021256:	200a      	movs	r0, #10
 8021258:	e7f5      	b.n	8021246 <_vfiprintf_r+0x2a6>
 802125a:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 802125e:	e7c7      	b.n	80211f0 <_vfiprintf_r+0x250>
 8021260:	2100      	movs	r1, #0
 8021262:	465a      	mov	r2, fp
 8021264:	9102      	str	r1, [sp, #8]
 8021266:	200a      	movs	r0, #10
 8021268:	9902      	ldr	r1, [sp, #8]
 802126a:	3b30      	subs	r3, #48	@ 0x30
 802126c:	fb00 3301 	mla	r3, r0, r1, r3
 8021270:	9302      	str	r3, [sp, #8]
 8021272:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021276:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 802127a:	2909      	cmp	r1, #9
 802127c:	d9f4      	bls.n	8021268 <_vfiprintf_r+0x2c8>
 802127e:	e7e6      	b.n	802124e <_vfiprintf_r+0x2ae>
 8021280:	f89b 3000 	ldrb.w	r3, [fp]
 8021284:	2b68      	cmp	r3, #104	@ 0x68
 8021286:	bf06      	itte	eq
 8021288:	f10b 0b01 	addeq.w	fp, fp, #1
 802128c:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8021290:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8021294:	e7ac      	b.n	80211f0 <_vfiprintf_r+0x250>
 8021296:	f89b 3000 	ldrb.w	r3, [fp]
 802129a:	2b6c      	cmp	r3, #108	@ 0x6c
 802129c:	d104      	bne.n	80212a8 <_vfiprintf_r+0x308>
 802129e:	f10b 0b01 	add.w	fp, fp, #1
 80212a2:	f04a 0a20 	orr.w	sl, sl, #32
 80212a6:	e7a3      	b.n	80211f0 <_vfiprintf_r+0x250>
 80212a8:	f04a 0a10 	orr.w	sl, sl, #16
 80212ac:	e7a0      	b.n	80211f0 <_vfiprintf_r+0x250>
 80212ae:	46a8      	mov	r8, r5
 80212b0:	2400      	movs	r4, #0
 80212b2:	f858 3b04 	ldr.w	r3, [r8], #4
 80212b6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80212ba:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80212be:	2301      	movs	r3, #1
 80212c0:	9301      	str	r3, [sp, #4]
 80212c2:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 80212c6:	e0ab      	b.n	8021420 <_vfiprintf_r+0x480>
 80212c8:	f04a 0a10 	orr.w	sl, sl, #16
 80212cc:	f01a 0f20 	tst.w	sl, #32
 80212d0:	d011      	beq.n	80212f6 <_vfiprintf_r+0x356>
 80212d2:	3507      	adds	r5, #7
 80212d4:	f025 0507 	bic.w	r5, r5, #7
 80212d8:	46a8      	mov	r8, r5
 80212da:	686d      	ldr	r5, [r5, #4]
 80212dc:	f858 4b08 	ldr.w	r4, [r8], #8
 80212e0:	2d00      	cmp	r5, #0
 80212e2:	da06      	bge.n	80212f2 <_vfiprintf_r+0x352>
 80212e4:	4264      	negs	r4, r4
 80212e6:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 80212ea:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80212ee:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80212f2:	2301      	movs	r3, #1
 80212f4:	e048      	b.n	8021388 <_vfiprintf_r+0x3e8>
 80212f6:	46a8      	mov	r8, r5
 80212f8:	f01a 0f10 	tst.w	sl, #16
 80212fc:	f858 5b04 	ldr.w	r5, [r8], #4
 8021300:	d002      	beq.n	8021308 <_vfiprintf_r+0x368>
 8021302:	462c      	mov	r4, r5
 8021304:	17ed      	asrs	r5, r5, #31
 8021306:	e7eb      	b.n	80212e0 <_vfiprintf_r+0x340>
 8021308:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802130c:	d003      	beq.n	8021316 <_vfiprintf_r+0x376>
 802130e:	b22c      	sxth	r4, r5
 8021310:	f345 35c0 	sbfx	r5, r5, #15, #1
 8021314:	e7e4      	b.n	80212e0 <_vfiprintf_r+0x340>
 8021316:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802131a:	d0f2      	beq.n	8021302 <_vfiprintf_r+0x362>
 802131c:	b26c      	sxtb	r4, r5
 802131e:	f345 15c0 	sbfx	r5, r5, #7, #1
 8021322:	e7dd      	b.n	80212e0 <_vfiprintf_r+0x340>
 8021324:	f01a 0f20 	tst.w	sl, #32
 8021328:	d007      	beq.n	802133a <_vfiprintf_r+0x39a>
 802132a:	9a03      	ldr	r2, [sp, #12]
 802132c:	682b      	ldr	r3, [r5, #0]
 802132e:	9903      	ldr	r1, [sp, #12]
 8021330:	17d2      	asrs	r2, r2, #31
 8021332:	e9c3 1200 	strd	r1, r2, [r3]
 8021336:	3504      	adds	r5, #4
 8021338:	e693      	b.n	8021062 <_vfiprintf_r+0xc2>
 802133a:	f01a 0f10 	tst.w	sl, #16
 802133e:	d003      	beq.n	8021348 <_vfiprintf_r+0x3a8>
 8021340:	682b      	ldr	r3, [r5, #0]
 8021342:	9a03      	ldr	r2, [sp, #12]
 8021344:	601a      	str	r2, [r3, #0]
 8021346:	e7f6      	b.n	8021336 <_vfiprintf_r+0x396>
 8021348:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 802134c:	d003      	beq.n	8021356 <_vfiprintf_r+0x3b6>
 802134e:	682b      	ldr	r3, [r5, #0]
 8021350:	9a03      	ldr	r2, [sp, #12]
 8021352:	801a      	strh	r2, [r3, #0]
 8021354:	e7ef      	b.n	8021336 <_vfiprintf_r+0x396>
 8021356:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 802135a:	d0f1      	beq.n	8021340 <_vfiprintf_r+0x3a0>
 802135c:	682b      	ldr	r3, [r5, #0]
 802135e:	9a03      	ldr	r2, [sp, #12]
 8021360:	701a      	strb	r2, [r3, #0]
 8021362:	e7e8      	b.n	8021336 <_vfiprintf_r+0x396>
 8021364:	f04a 0a10 	orr.w	sl, sl, #16
 8021368:	f01a 0320 	ands.w	r3, sl, #32
 802136c:	d01f      	beq.n	80213ae <_vfiprintf_r+0x40e>
 802136e:	3507      	adds	r5, #7
 8021370:	f025 0507 	bic.w	r5, r5, #7
 8021374:	46a8      	mov	r8, r5
 8021376:	686d      	ldr	r5, [r5, #4]
 8021378:	f858 4b08 	ldr.w	r4, [r8], #8
 802137c:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8021380:	2300      	movs	r3, #0
 8021382:	2200      	movs	r2, #0
 8021384:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8021388:	9a01      	ldr	r2, [sp, #4]
 802138a:	3201      	adds	r2, #1
 802138c:	f000 825f 	beq.w	802184e <_vfiprintf_r+0x8ae>
 8021390:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8021394:	9204      	str	r2, [sp, #16]
 8021396:	ea54 0205 	orrs.w	r2, r4, r5
 802139a:	f040 825e 	bne.w	802185a <_vfiprintf_r+0x8ba>
 802139e:	9a01      	ldr	r2, [sp, #4]
 80213a0:	2a00      	cmp	r2, #0
 80213a2:	f000 8198 	beq.w	80216d6 <_vfiprintf_r+0x736>
 80213a6:	2b01      	cmp	r3, #1
 80213a8:	f040 825a 	bne.w	8021860 <_vfiprintf_r+0x8c0>
 80213ac:	e13b      	b.n	8021626 <_vfiprintf_r+0x686>
 80213ae:	46a8      	mov	r8, r5
 80213b0:	f01a 0510 	ands.w	r5, sl, #16
 80213b4:	f858 4b04 	ldr.w	r4, [r8], #4
 80213b8:	d001      	beq.n	80213be <_vfiprintf_r+0x41e>
 80213ba:	461d      	mov	r5, r3
 80213bc:	e7de      	b.n	802137c <_vfiprintf_r+0x3dc>
 80213be:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80213c2:	d001      	beq.n	80213c8 <_vfiprintf_r+0x428>
 80213c4:	b2a4      	uxth	r4, r4
 80213c6:	e7d9      	b.n	802137c <_vfiprintf_r+0x3dc>
 80213c8:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80213cc:	d0d6      	beq.n	802137c <_vfiprintf_r+0x3dc>
 80213ce:	b2e4      	uxtb	r4, r4
 80213d0:	e7f3      	b.n	80213ba <_vfiprintf_r+0x41a>
 80213d2:	46a8      	mov	r8, r5
 80213d4:	f647 0330 	movw	r3, #30768	@ 0x7830
 80213d8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80213dc:	f858 4b04 	ldr.w	r4, [r8], #4
 80213e0:	4b03      	ldr	r3, [pc, #12]	@ (80213f0 <_vfiprintf_r+0x450>)
 80213e2:	9305      	str	r3, [sp, #20]
 80213e4:	2500      	movs	r5, #0
 80213e6:	f04a 0a02 	orr.w	sl, sl, #2
 80213ea:	2302      	movs	r3, #2
 80213ec:	e7c9      	b.n	8021382 <_vfiprintf_r+0x3e2>
 80213ee:	bf00      	nop
 80213f0:	08022fd2 	.word	0x08022fd2
 80213f4:	9b01      	ldr	r3, [sp, #4]
 80213f6:	46a8      	mov	r8, r5
 80213f8:	1c5c      	adds	r4, r3, #1
 80213fa:	f04f 0500 	mov.w	r5, #0
 80213fe:	f858 9b04 	ldr.w	r9, [r8], #4
 8021402:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8021406:	f000 80d0 	beq.w	80215aa <_vfiprintf_r+0x60a>
 802140a:	461a      	mov	r2, r3
 802140c:	4629      	mov	r1, r5
 802140e:	4648      	mov	r0, r9
 8021410:	f7de fef6 	bl	8000200 <memchr>
 8021414:	4604      	mov	r4, r0
 8021416:	b118      	cbz	r0, 8021420 <_vfiprintf_r+0x480>
 8021418:	eba0 0309 	sub.w	r3, r0, r9
 802141c:	9301      	str	r3, [sp, #4]
 802141e:	462c      	mov	r4, r5
 8021420:	9b01      	ldr	r3, [sp, #4]
 8021422:	42a3      	cmp	r3, r4
 8021424:	bfb8      	it	lt
 8021426:	4623      	movlt	r3, r4
 8021428:	9304      	str	r3, [sp, #16]
 802142a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 802142e:	b113      	cbz	r3, 8021436 <_vfiprintf_r+0x496>
 8021430:	9b04      	ldr	r3, [sp, #16]
 8021432:	3301      	adds	r3, #1
 8021434:	9304      	str	r3, [sp, #16]
 8021436:	f01a 0302 	ands.w	r3, sl, #2
 802143a:	9308      	str	r3, [sp, #32]
 802143c:	bf1e      	ittt	ne
 802143e:	9b04      	ldrne	r3, [sp, #16]
 8021440:	3302      	addne	r3, #2
 8021442:	9304      	strne	r3, [sp, #16]
 8021444:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8021448:	930a      	str	r3, [sp, #40]	@ 0x28
 802144a:	d11f      	bne.n	802148c <_vfiprintf_r+0x4ec>
 802144c:	9b02      	ldr	r3, [sp, #8]
 802144e:	9a04      	ldr	r2, [sp, #16]
 8021450:	1a9d      	subs	r5, r3, r2
 8021452:	2d00      	cmp	r5, #0
 8021454:	dd1a      	ble.n	802148c <_vfiprintf_r+0x4ec>
 8021456:	4ba9      	ldr	r3, [pc, #676]	@ (80216fc <_vfiprintf_r+0x75c>)
 8021458:	6033      	str	r3, [r6, #0]
 802145a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 802145e:	2d10      	cmp	r5, #16
 8021460:	f102 0201 	add.w	r2, r2, #1
 8021464:	f106 0008 	add.w	r0, r6, #8
 8021468:	f300 814e 	bgt.w	8021708 <_vfiprintf_r+0x768>
 802146c:	6075      	str	r5, [r6, #4]
 802146e:	2a07      	cmp	r2, #7
 8021470:	4465      	add	r5, ip
 8021472:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8021476:	f340 815a 	ble.w	802172e <_vfiprintf_r+0x78e>
 802147a:	9800      	ldr	r0, [sp, #0]
 802147c:	aa0e      	add	r2, sp, #56	@ 0x38
 802147e:	4639      	mov	r1, r7
 8021480:	f7ff fd5c 	bl	8020f3c <__sprint_r>
 8021484:	2800      	cmp	r0, #0
 8021486:	f040 81b4 	bne.w	80217f2 <_vfiprintf_r+0x852>
 802148a:	ae11      	add	r6, sp, #68	@ 0x44
 802148c:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8021490:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8021494:	b161      	cbz	r1, 80214b0 <_vfiprintf_r+0x510>
 8021496:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 802149a:	3301      	adds	r3, #1
 802149c:	6031      	str	r1, [r6, #0]
 802149e:	2101      	movs	r1, #1
 80214a0:	440a      	add	r2, r1
 80214a2:	2b07      	cmp	r3, #7
 80214a4:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80214a8:	6071      	str	r1, [r6, #4]
 80214aa:	f300 8142 	bgt.w	8021732 <_vfiprintf_r+0x792>
 80214ae:	3608      	adds	r6, #8
 80214b0:	9908      	ldr	r1, [sp, #32]
 80214b2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80214b6:	b159      	cbz	r1, 80214d0 <_vfiprintf_r+0x530>
 80214b8:	a90d      	add	r1, sp, #52	@ 0x34
 80214ba:	3301      	adds	r3, #1
 80214bc:	6031      	str	r1, [r6, #0]
 80214be:	2102      	movs	r1, #2
 80214c0:	440a      	add	r2, r1
 80214c2:	2b07      	cmp	r3, #7
 80214c4:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80214c8:	6071      	str	r1, [r6, #4]
 80214ca:	f300 813b 	bgt.w	8021744 <_vfiprintf_r+0x7a4>
 80214ce:	3608      	adds	r6, #8
 80214d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80214d2:	2b80      	cmp	r3, #128	@ 0x80
 80214d4:	d11f      	bne.n	8021516 <_vfiprintf_r+0x576>
 80214d6:	9b02      	ldr	r3, [sp, #8]
 80214d8:	9a04      	ldr	r2, [sp, #16]
 80214da:	1a9d      	subs	r5, r3, r2
 80214dc:	2d00      	cmp	r5, #0
 80214de:	dd1a      	ble.n	8021516 <_vfiprintf_r+0x576>
 80214e0:	4b87      	ldr	r3, [pc, #540]	@ (8021700 <_vfiprintf_r+0x760>)
 80214e2:	6033      	str	r3, [r6, #0]
 80214e4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80214e8:	2d10      	cmp	r5, #16
 80214ea:	f102 0201 	add.w	r2, r2, #1
 80214ee:	f106 0008 	add.w	r0, r6, #8
 80214f2:	f300 8130 	bgt.w	8021756 <_vfiprintf_r+0x7b6>
 80214f6:	6075      	str	r5, [r6, #4]
 80214f8:	2a07      	cmp	r2, #7
 80214fa:	4465      	add	r5, ip
 80214fc:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8021500:	f340 813c 	ble.w	802177c <_vfiprintf_r+0x7dc>
 8021504:	9800      	ldr	r0, [sp, #0]
 8021506:	aa0e      	add	r2, sp, #56	@ 0x38
 8021508:	4639      	mov	r1, r7
 802150a:	f7ff fd17 	bl	8020f3c <__sprint_r>
 802150e:	2800      	cmp	r0, #0
 8021510:	f040 816f 	bne.w	80217f2 <_vfiprintf_r+0x852>
 8021514:	ae11      	add	r6, sp, #68	@ 0x44
 8021516:	9b01      	ldr	r3, [sp, #4]
 8021518:	1ae4      	subs	r4, r4, r3
 802151a:	2c00      	cmp	r4, #0
 802151c:	dd1a      	ble.n	8021554 <_vfiprintf_r+0x5b4>
 802151e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8021522:	4877      	ldr	r0, [pc, #476]	@ (8021700 <_vfiprintf_r+0x760>)
 8021524:	6030      	str	r0, [r6, #0]
 8021526:	2c10      	cmp	r4, #16
 8021528:	f103 0301 	add.w	r3, r3, #1
 802152c:	f106 0108 	add.w	r1, r6, #8
 8021530:	f300 8126 	bgt.w	8021780 <_vfiprintf_r+0x7e0>
 8021534:	6074      	str	r4, [r6, #4]
 8021536:	2b07      	cmp	r3, #7
 8021538:	4414      	add	r4, r2
 802153a:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 802153e:	f340 8130 	ble.w	80217a2 <_vfiprintf_r+0x802>
 8021542:	9800      	ldr	r0, [sp, #0]
 8021544:	aa0e      	add	r2, sp, #56	@ 0x38
 8021546:	4639      	mov	r1, r7
 8021548:	f7ff fcf8 	bl	8020f3c <__sprint_r>
 802154c:	2800      	cmp	r0, #0
 802154e:	f040 8150 	bne.w	80217f2 <_vfiprintf_r+0x852>
 8021552:	ae11      	add	r6, sp, #68	@ 0x44
 8021554:	9b01      	ldr	r3, [sp, #4]
 8021556:	9a01      	ldr	r2, [sp, #4]
 8021558:	6073      	str	r3, [r6, #4]
 802155a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802155c:	f8c6 9000 	str.w	r9, [r6]
 8021560:	4413      	add	r3, r2
 8021562:	9310      	str	r3, [sp, #64]	@ 0x40
 8021564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021566:	3301      	adds	r3, #1
 8021568:	2b07      	cmp	r3, #7
 802156a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802156c:	f300 811b 	bgt.w	80217a6 <_vfiprintf_r+0x806>
 8021570:	f106 0308 	add.w	r3, r6, #8
 8021574:	f01a 0f04 	tst.w	sl, #4
 8021578:	f040 811d 	bne.w	80217b6 <_vfiprintf_r+0x816>
 802157c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021580:	9904      	ldr	r1, [sp, #16]
 8021582:	428a      	cmp	r2, r1
 8021584:	bfac      	ite	ge
 8021586:	189b      	addge	r3, r3, r2
 8021588:	185b      	addlt	r3, r3, r1
 802158a:	9303      	str	r3, [sp, #12]
 802158c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802158e:	b13b      	cbz	r3, 80215a0 <_vfiprintf_r+0x600>
 8021590:	9800      	ldr	r0, [sp, #0]
 8021592:	aa0e      	add	r2, sp, #56	@ 0x38
 8021594:	4639      	mov	r1, r7
 8021596:	f7ff fcd1 	bl	8020f3c <__sprint_r>
 802159a:	2800      	cmp	r0, #0
 802159c:	f040 8129 	bne.w	80217f2 <_vfiprintf_r+0x852>
 80215a0:	2300      	movs	r3, #0
 80215a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80215a4:	4645      	mov	r5, r8
 80215a6:	ae11      	add	r6, sp, #68	@ 0x44
 80215a8:	e55b      	b.n	8021062 <_vfiprintf_r+0xc2>
 80215aa:	4648      	mov	r0, r9
 80215ac:	f7de fe1a 	bl	80001e4 <strlen>
 80215b0:	9001      	str	r0, [sp, #4]
 80215b2:	e734      	b.n	802141e <_vfiprintf_r+0x47e>
 80215b4:	f04a 0a10 	orr.w	sl, sl, #16
 80215b8:	f01a 0320 	ands.w	r3, sl, #32
 80215bc:	d008      	beq.n	80215d0 <_vfiprintf_r+0x630>
 80215be:	3507      	adds	r5, #7
 80215c0:	f025 0507 	bic.w	r5, r5, #7
 80215c4:	46a8      	mov	r8, r5
 80215c6:	686d      	ldr	r5, [r5, #4]
 80215c8:	f858 4b08 	ldr.w	r4, [r8], #8
 80215cc:	2301      	movs	r3, #1
 80215ce:	e6d8      	b.n	8021382 <_vfiprintf_r+0x3e2>
 80215d0:	46a8      	mov	r8, r5
 80215d2:	f01a 0510 	ands.w	r5, sl, #16
 80215d6:	f858 4b04 	ldr.w	r4, [r8], #4
 80215da:	d001      	beq.n	80215e0 <_vfiprintf_r+0x640>
 80215dc:	461d      	mov	r5, r3
 80215de:	e7f5      	b.n	80215cc <_vfiprintf_r+0x62c>
 80215e0:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 80215e4:	d001      	beq.n	80215ea <_vfiprintf_r+0x64a>
 80215e6:	b2a4      	uxth	r4, r4
 80215e8:	e7f0      	b.n	80215cc <_vfiprintf_r+0x62c>
 80215ea:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 80215ee:	d0ed      	beq.n	80215cc <_vfiprintf_r+0x62c>
 80215f0:	b2e4      	uxtb	r4, r4
 80215f2:	e7f3      	b.n	80215dc <_vfiprintf_r+0x63c>
 80215f4:	4a43      	ldr	r2, [pc, #268]	@ (8021704 <_vfiprintf_r+0x764>)
 80215f6:	e5c9      	b.n	802118c <_vfiprintf_r+0x1ec>
 80215f8:	46a8      	mov	r8, r5
 80215fa:	f01a 0510 	ands.w	r5, sl, #16
 80215fe:	f858 4b04 	ldr.w	r4, [r8], #4
 8021602:	d001      	beq.n	8021608 <_vfiprintf_r+0x668>
 8021604:	4615      	mov	r5, r2
 8021606:	e5cd      	b.n	80211a4 <_vfiprintf_r+0x204>
 8021608:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 802160c:	d001      	beq.n	8021612 <_vfiprintf_r+0x672>
 802160e:	b2a4      	uxth	r4, r4
 8021610:	e5c8      	b.n	80211a4 <_vfiprintf_r+0x204>
 8021612:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8021616:	f43f adc5 	beq.w	80211a4 <_vfiprintf_r+0x204>
 802161a:	b2e4      	uxtb	r4, r4
 802161c:	e7f2      	b.n	8021604 <_vfiprintf_r+0x664>
 802161e:	2c0a      	cmp	r4, #10
 8021620:	f175 0300 	sbcs.w	r3, r5, #0
 8021624:	d206      	bcs.n	8021634 <_vfiprintf_r+0x694>
 8021626:	3430      	adds	r4, #48	@ 0x30
 8021628:	b2e4      	uxtb	r4, r4
 802162a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 802162e:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8021632:	e131      	b.n	8021898 <_vfiprintf_r+0x8f8>
 8021634:	ab3a      	add	r3, sp, #232	@ 0xe8
 8021636:	9308      	str	r3, [sp, #32]
 8021638:	9b04      	ldr	r3, [sp, #16]
 802163a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802163e:	f04f 0a00 	mov.w	sl, #0
 8021642:	930a      	str	r3, [sp, #40]	@ 0x28
 8021644:	220a      	movs	r2, #10
 8021646:	2300      	movs	r3, #0
 8021648:	4620      	mov	r0, r4
 802164a:	4629      	mov	r1, r5
 802164c:	f7df fb2c 	bl	8000ca8 <__aeabi_uldivmod>
 8021650:	460b      	mov	r3, r1
 8021652:	9908      	ldr	r1, [sp, #32]
 8021654:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021656:	3230      	adds	r2, #48	@ 0x30
 8021658:	f801 2c01 	strb.w	r2, [r1, #-1]
 802165c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802165e:	f101 39ff 	add.w	r9, r1, #4294967295
 8021662:	f10a 0a01 	add.w	sl, sl, #1
 8021666:	b1e2      	cbz	r2, 80216a2 <_vfiprintf_r+0x702>
 8021668:	9a06      	ldr	r2, [sp, #24]
 802166a:	7812      	ldrb	r2, [r2, #0]
 802166c:	4552      	cmp	r2, sl
 802166e:	d118      	bne.n	80216a2 <_vfiprintf_r+0x702>
 8021670:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8021674:	d015      	beq.n	80216a2 <_vfiprintf_r+0x702>
 8021676:	2c0a      	cmp	r4, #10
 8021678:	f175 0200 	sbcs.w	r2, r5, #0
 802167c:	d311      	bcc.n	80216a2 <_vfiprintf_r+0x702>
 802167e:	9308      	str	r3, [sp, #32]
 8021680:	9b07      	ldr	r3, [sp, #28]
 8021682:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021684:	eba9 0903 	sub.w	r9, r9, r3
 8021688:	461a      	mov	r2, r3
 802168a:	4648      	mov	r0, r9
 802168c:	f7fd fd9c 	bl	801f1c8 <strncpy>
 8021690:	9b06      	ldr	r3, [sp, #24]
 8021692:	785a      	ldrb	r2, [r3, #1]
 8021694:	9b08      	ldr	r3, [sp, #32]
 8021696:	b172      	cbz	r2, 80216b6 <_vfiprintf_r+0x716>
 8021698:	9a06      	ldr	r2, [sp, #24]
 802169a:	3201      	adds	r2, #1
 802169c:	9206      	str	r2, [sp, #24]
 802169e:	f04f 0a00 	mov.w	sl, #0
 80216a2:	2c0a      	cmp	r4, #10
 80216a4:	f175 0500 	sbcs.w	r5, r5, #0
 80216a8:	f0c0 80f6 	bcc.w	8021898 <_vfiprintf_r+0x8f8>
 80216ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80216ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80216b2:	461d      	mov	r5, r3
 80216b4:	e7c6      	b.n	8021644 <_vfiprintf_r+0x6a4>
 80216b6:	4692      	mov	sl, r2
 80216b8:	e7f3      	b.n	80216a2 <_vfiprintf_r+0x702>
 80216ba:	f004 030f 	and.w	r3, r4, #15
 80216be:	9a05      	ldr	r2, [sp, #20]
 80216c0:	0924      	lsrs	r4, r4, #4
 80216c2:	5cd3      	ldrb	r3, [r2, r3]
 80216c4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80216c8:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80216cc:	092d      	lsrs	r5, r5, #4
 80216ce:	ea54 0305 	orrs.w	r3, r4, r5
 80216d2:	d1f2      	bne.n	80216ba <_vfiprintf_r+0x71a>
 80216d4:	e0e0      	b.n	8021898 <_vfiprintf_r+0x8f8>
 80216d6:	b923      	cbnz	r3, 80216e2 <_vfiprintf_r+0x742>
 80216d8:	f01a 0f01 	tst.w	sl, #1
 80216dc:	d001      	beq.n	80216e2 <_vfiprintf_r+0x742>
 80216de:	2430      	movs	r4, #48	@ 0x30
 80216e0:	e7a3      	b.n	802162a <_vfiprintf_r+0x68a>
 80216e2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 80216e6:	e0d7      	b.n	8021898 <_vfiprintf_r+0x8f8>
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	f000 80a3 	beq.w	8021834 <_vfiprintf_r+0x894>
 80216ee:	2400      	movs	r4, #0
 80216f0:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 80216f4:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 80216f8:	46a8      	mov	r8, r5
 80216fa:	e5e0      	b.n	80212be <_vfiprintf_r+0x31e>
 80216fc:	0802329c 	.word	0x0802329c
 8021700:	0802328c 	.word	0x0802328c
 8021704:	08022fe3 	.word	0x08022fe3
 8021708:	2110      	movs	r1, #16
 802170a:	6071      	str	r1, [r6, #4]
 802170c:	2a07      	cmp	r2, #7
 802170e:	4461      	add	r1, ip
 8021710:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8021714:	dd08      	ble.n	8021728 <_vfiprintf_r+0x788>
 8021716:	9800      	ldr	r0, [sp, #0]
 8021718:	aa0e      	add	r2, sp, #56	@ 0x38
 802171a:	4639      	mov	r1, r7
 802171c:	f7ff fc0e 	bl	8020f3c <__sprint_r>
 8021720:	2800      	cmp	r0, #0
 8021722:	d166      	bne.n	80217f2 <_vfiprintf_r+0x852>
 8021724:	4b60      	ldr	r3, [pc, #384]	@ (80218a8 <_vfiprintf_r+0x908>)
 8021726:	a811      	add	r0, sp, #68	@ 0x44
 8021728:	3d10      	subs	r5, #16
 802172a:	4606      	mov	r6, r0
 802172c:	e694      	b.n	8021458 <_vfiprintf_r+0x4b8>
 802172e:	4606      	mov	r6, r0
 8021730:	e6ac      	b.n	802148c <_vfiprintf_r+0x4ec>
 8021732:	9800      	ldr	r0, [sp, #0]
 8021734:	aa0e      	add	r2, sp, #56	@ 0x38
 8021736:	4639      	mov	r1, r7
 8021738:	f7ff fc00 	bl	8020f3c <__sprint_r>
 802173c:	2800      	cmp	r0, #0
 802173e:	d158      	bne.n	80217f2 <_vfiprintf_r+0x852>
 8021740:	ae11      	add	r6, sp, #68	@ 0x44
 8021742:	e6b5      	b.n	80214b0 <_vfiprintf_r+0x510>
 8021744:	9800      	ldr	r0, [sp, #0]
 8021746:	aa0e      	add	r2, sp, #56	@ 0x38
 8021748:	4639      	mov	r1, r7
 802174a:	f7ff fbf7 	bl	8020f3c <__sprint_r>
 802174e:	2800      	cmp	r0, #0
 8021750:	d14f      	bne.n	80217f2 <_vfiprintf_r+0x852>
 8021752:	ae11      	add	r6, sp, #68	@ 0x44
 8021754:	e6bc      	b.n	80214d0 <_vfiprintf_r+0x530>
 8021756:	2110      	movs	r1, #16
 8021758:	6071      	str	r1, [r6, #4]
 802175a:	2a07      	cmp	r2, #7
 802175c:	4461      	add	r1, ip
 802175e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8021762:	dd08      	ble.n	8021776 <_vfiprintf_r+0x7d6>
 8021764:	9800      	ldr	r0, [sp, #0]
 8021766:	aa0e      	add	r2, sp, #56	@ 0x38
 8021768:	4639      	mov	r1, r7
 802176a:	f7ff fbe7 	bl	8020f3c <__sprint_r>
 802176e:	2800      	cmp	r0, #0
 8021770:	d13f      	bne.n	80217f2 <_vfiprintf_r+0x852>
 8021772:	4b4e      	ldr	r3, [pc, #312]	@ (80218ac <_vfiprintf_r+0x90c>)
 8021774:	a811      	add	r0, sp, #68	@ 0x44
 8021776:	3d10      	subs	r5, #16
 8021778:	4606      	mov	r6, r0
 802177a:	e6b2      	b.n	80214e2 <_vfiprintf_r+0x542>
 802177c:	4606      	mov	r6, r0
 802177e:	e6ca      	b.n	8021516 <_vfiprintf_r+0x576>
 8021780:	2010      	movs	r0, #16
 8021782:	4402      	add	r2, r0
 8021784:	2b07      	cmp	r3, #7
 8021786:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 802178a:	6070      	str	r0, [r6, #4]
 802178c:	dd06      	ble.n	802179c <_vfiprintf_r+0x7fc>
 802178e:	9800      	ldr	r0, [sp, #0]
 8021790:	aa0e      	add	r2, sp, #56	@ 0x38
 8021792:	4639      	mov	r1, r7
 8021794:	f7ff fbd2 	bl	8020f3c <__sprint_r>
 8021798:	bb58      	cbnz	r0, 80217f2 <_vfiprintf_r+0x852>
 802179a:	a911      	add	r1, sp, #68	@ 0x44
 802179c:	3c10      	subs	r4, #16
 802179e:	460e      	mov	r6, r1
 80217a0:	e6bd      	b.n	802151e <_vfiprintf_r+0x57e>
 80217a2:	460e      	mov	r6, r1
 80217a4:	e6d6      	b.n	8021554 <_vfiprintf_r+0x5b4>
 80217a6:	9800      	ldr	r0, [sp, #0]
 80217a8:	aa0e      	add	r2, sp, #56	@ 0x38
 80217aa:	4639      	mov	r1, r7
 80217ac:	f7ff fbc6 	bl	8020f3c <__sprint_r>
 80217b0:	b9f8      	cbnz	r0, 80217f2 <_vfiprintf_r+0x852>
 80217b2:	ab11      	add	r3, sp, #68	@ 0x44
 80217b4:	e6de      	b.n	8021574 <_vfiprintf_r+0x5d4>
 80217b6:	9a02      	ldr	r2, [sp, #8]
 80217b8:	9904      	ldr	r1, [sp, #16]
 80217ba:	1a54      	subs	r4, r2, r1
 80217bc:	2c00      	cmp	r4, #0
 80217be:	f77f aedd 	ble.w	802157c <_vfiprintf_r+0x5dc>
 80217c2:	4d39      	ldr	r5, [pc, #228]	@ (80218a8 <_vfiprintf_r+0x908>)
 80217c4:	2610      	movs	r6, #16
 80217c6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80217ca:	2c10      	cmp	r4, #16
 80217cc:	f102 0201 	add.w	r2, r2, #1
 80217d0:	601d      	str	r5, [r3, #0]
 80217d2:	dc1d      	bgt.n	8021810 <_vfiprintf_r+0x870>
 80217d4:	605c      	str	r4, [r3, #4]
 80217d6:	2a07      	cmp	r2, #7
 80217d8:	440c      	add	r4, r1
 80217da:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 80217de:	f77f aecd 	ble.w	802157c <_vfiprintf_r+0x5dc>
 80217e2:	9800      	ldr	r0, [sp, #0]
 80217e4:	aa0e      	add	r2, sp, #56	@ 0x38
 80217e6:	4639      	mov	r1, r7
 80217e8:	f7ff fba8 	bl	8020f3c <__sprint_r>
 80217ec:	2800      	cmp	r0, #0
 80217ee:	f43f aec5 	beq.w	802157c <_vfiprintf_r+0x5dc>
 80217f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80217f4:	07d9      	lsls	r1, r3, #31
 80217f6:	d405      	bmi.n	8021804 <_vfiprintf_r+0x864>
 80217f8:	89bb      	ldrh	r3, [r7, #12]
 80217fa:	059a      	lsls	r2, r3, #22
 80217fc:	d402      	bmi.n	8021804 <_vfiprintf_r+0x864>
 80217fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021800:	f7fb f843 	bl	801c88a <__retarget_lock_release_recursive>
 8021804:	89bb      	ldrh	r3, [r7, #12]
 8021806:	065b      	lsls	r3, r3, #25
 8021808:	f57f abfb 	bpl.w	8021002 <_vfiprintf_r+0x62>
 802180c:	f7ff bbf6 	b.w	8020ffc <_vfiprintf_r+0x5c>
 8021810:	3110      	adds	r1, #16
 8021812:	2a07      	cmp	r2, #7
 8021814:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8021818:	605e      	str	r6, [r3, #4]
 802181a:	dc02      	bgt.n	8021822 <_vfiprintf_r+0x882>
 802181c:	3308      	adds	r3, #8
 802181e:	3c10      	subs	r4, #16
 8021820:	e7d1      	b.n	80217c6 <_vfiprintf_r+0x826>
 8021822:	9800      	ldr	r0, [sp, #0]
 8021824:	aa0e      	add	r2, sp, #56	@ 0x38
 8021826:	4639      	mov	r1, r7
 8021828:	f7ff fb88 	bl	8020f3c <__sprint_r>
 802182c:	2800      	cmp	r0, #0
 802182e:	d1e0      	bne.n	80217f2 <_vfiprintf_r+0x852>
 8021830:	ab11      	add	r3, sp, #68	@ 0x44
 8021832:	e7f4      	b.n	802181e <_vfiprintf_r+0x87e>
 8021834:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021836:	b913      	cbnz	r3, 802183e <_vfiprintf_r+0x89e>
 8021838:	2300      	movs	r3, #0
 802183a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802183c:	e7d9      	b.n	80217f2 <_vfiprintf_r+0x852>
 802183e:	9800      	ldr	r0, [sp, #0]
 8021840:	aa0e      	add	r2, sp, #56	@ 0x38
 8021842:	4639      	mov	r1, r7
 8021844:	f7ff fb7a 	bl	8020f3c <__sprint_r>
 8021848:	2800      	cmp	r0, #0
 802184a:	d0f5      	beq.n	8021838 <_vfiprintf_r+0x898>
 802184c:	e7d1      	b.n	80217f2 <_vfiprintf_r+0x852>
 802184e:	ea54 0205 	orrs.w	r2, r4, r5
 8021852:	f8cd a010 	str.w	sl, [sp, #16]
 8021856:	f43f ada6 	beq.w	80213a6 <_vfiprintf_r+0x406>
 802185a:	2b01      	cmp	r3, #1
 802185c:	f43f aedf 	beq.w	802161e <_vfiprintf_r+0x67e>
 8021860:	2b02      	cmp	r3, #2
 8021862:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8021866:	f43f af28 	beq.w	80216ba <_vfiprintf_r+0x71a>
 802186a:	f004 0307 	and.w	r3, r4, #7
 802186e:	08e4      	lsrs	r4, r4, #3
 8021870:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8021874:	08ed      	lsrs	r5, r5, #3
 8021876:	3330      	adds	r3, #48	@ 0x30
 8021878:	ea54 0105 	orrs.w	r1, r4, r5
 802187c:	464a      	mov	r2, r9
 802187e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8021882:	d1f2      	bne.n	802186a <_vfiprintf_r+0x8ca>
 8021884:	9904      	ldr	r1, [sp, #16]
 8021886:	07c8      	lsls	r0, r1, #31
 8021888:	d506      	bpl.n	8021898 <_vfiprintf_r+0x8f8>
 802188a:	2b30      	cmp	r3, #48	@ 0x30
 802188c:	d004      	beq.n	8021898 <_vfiprintf_r+0x8f8>
 802188e:	2330      	movs	r3, #48	@ 0x30
 8021890:	f809 3c01 	strb.w	r3, [r9, #-1]
 8021894:	f1a2 0902 	sub.w	r9, r2, #2
 8021898:	ab3a      	add	r3, sp, #232	@ 0xe8
 802189a:	eba3 0309 	sub.w	r3, r3, r9
 802189e:	9c01      	ldr	r4, [sp, #4]
 80218a0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80218a4:	9301      	str	r3, [sp, #4]
 80218a6:	e5bb      	b.n	8021420 <_vfiprintf_r+0x480>
 80218a8:	0802329c 	.word	0x0802329c
 80218ac:	0802328c 	.word	0x0802328c

080218b0 <__sbprintf>:
 80218b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218b2:	461f      	mov	r7, r3
 80218b4:	898b      	ldrh	r3, [r1, #12]
 80218b6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80218ba:	f023 0302 	bic.w	r3, r3, #2
 80218be:	f8ad 300c 	strh.w	r3, [sp, #12]
 80218c2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80218c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80218c6:	89cb      	ldrh	r3, [r1, #14]
 80218c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80218cc:	69cb      	ldr	r3, [r1, #28]
 80218ce:	9307      	str	r3, [sp, #28]
 80218d0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80218d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80218d4:	ab1a      	add	r3, sp, #104	@ 0x68
 80218d6:	9300      	str	r3, [sp, #0]
 80218d8:	9304      	str	r3, [sp, #16]
 80218da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80218de:	4615      	mov	r5, r2
 80218e0:	4606      	mov	r6, r0
 80218e2:	9302      	str	r3, [sp, #8]
 80218e4:	9305      	str	r3, [sp, #20]
 80218e6:	a816      	add	r0, sp, #88	@ 0x58
 80218e8:	2300      	movs	r3, #0
 80218ea:	460c      	mov	r4, r1
 80218ec:	9306      	str	r3, [sp, #24]
 80218ee:	f7fa ffc7 	bl	801c880 <__retarget_lock_init_recursive>
 80218f2:	462a      	mov	r2, r5
 80218f4:	463b      	mov	r3, r7
 80218f6:	4669      	mov	r1, sp
 80218f8:	4630      	mov	r0, r6
 80218fa:	f7ff fb51 	bl	8020fa0 <_vfiprintf_r>
 80218fe:	1e05      	subs	r5, r0, #0
 8021900:	db07      	blt.n	8021912 <__sbprintf+0x62>
 8021902:	4669      	mov	r1, sp
 8021904:	4630      	mov	r0, r6
 8021906:	f7f9 ff9b 	bl	801b840 <_fflush_r>
 802190a:	2800      	cmp	r0, #0
 802190c:	bf18      	it	ne
 802190e:	f04f 35ff 	movne.w	r5, #4294967295
 8021912:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8021916:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021918:	065b      	lsls	r3, r3, #25
 802191a:	bf42      	ittt	mi
 802191c:	89a3      	ldrhmi	r3, [r4, #12]
 802191e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8021922:	81a3      	strhmi	r3, [r4, #12]
 8021924:	f7fa ffad 	bl	801c882 <__retarget_lock_close_recursive>
 8021928:	4628      	mov	r0, r5
 802192a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 802192e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021930 <__sfvwrite_r>:
 8021930:	6893      	ldr	r3, [r2, #8]
 8021932:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021936:	4606      	mov	r6, r0
 8021938:	460c      	mov	r4, r1
 802193a:	4691      	mov	r9, r2
 802193c:	b91b      	cbnz	r3, 8021946 <__sfvwrite_r+0x16>
 802193e:	2000      	movs	r0, #0
 8021940:	b003      	add	sp, #12
 8021942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021946:	898b      	ldrh	r3, [r1, #12]
 8021948:	0718      	lsls	r0, r3, #28
 802194a:	d550      	bpl.n	80219ee <__sfvwrite_r+0xbe>
 802194c:	690b      	ldr	r3, [r1, #16]
 802194e:	2b00      	cmp	r3, #0
 8021950:	d04d      	beq.n	80219ee <__sfvwrite_r+0xbe>
 8021952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021956:	f8d9 8000 	ldr.w	r8, [r9]
 802195a:	f013 0702 	ands.w	r7, r3, #2
 802195e:	d16b      	bne.n	8021a38 <__sfvwrite_r+0x108>
 8021960:	f013 0301 	ands.w	r3, r3, #1
 8021964:	f000 809c 	beq.w	8021aa0 <__sfvwrite_r+0x170>
 8021968:	4638      	mov	r0, r7
 802196a:	46ba      	mov	sl, r7
 802196c:	46bb      	mov	fp, r7
 802196e:	f1bb 0f00 	cmp.w	fp, #0
 8021972:	f000 8103 	beq.w	8021b7c <__sfvwrite_r+0x24c>
 8021976:	b950      	cbnz	r0, 802198e <__sfvwrite_r+0x5e>
 8021978:	465a      	mov	r2, fp
 802197a:	210a      	movs	r1, #10
 802197c:	4650      	mov	r0, sl
 802197e:	f7de fc3f 	bl	8000200 <memchr>
 8021982:	2800      	cmp	r0, #0
 8021984:	f000 8100 	beq.w	8021b88 <__sfvwrite_r+0x258>
 8021988:	3001      	adds	r0, #1
 802198a:	eba0 070a 	sub.w	r7, r0, sl
 802198e:	6820      	ldr	r0, [r4, #0]
 8021990:	6921      	ldr	r1, [r4, #16]
 8021992:	68a5      	ldr	r5, [r4, #8]
 8021994:	6963      	ldr	r3, [r4, #20]
 8021996:	455f      	cmp	r7, fp
 8021998:	463a      	mov	r2, r7
 802199a:	bf28      	it	cs
 802199c:	465a      	movcs	r2, fp
 802199e:	4288      	cmp	r0, r1
 80219a0:	f240 80f5 	bls.w	8021b8e <__sfvwrite_r+0x25e>
 80219a4:	441d      	add	r5, r3
 80219a6:	42aa      	cmp	r2, r5
 80219a8:	f340 80f1 	ble.w	8021b8e <__sfvwrite_r+0x25e>
 80219ac:	4651      	mov	r1, sl
 80219ae:	462a      	mov	r2, r5
 80219b0:	f7ff fa43 	bl	8020e3a <memmove>
 80219b4:	6823      	ldr	r3, [r4, #0]
 80219b6:	442b      	add	r3, r5
 80219b8:	6023      	str	r3, [r4, #0]
 80219ba:	4621      	mov	r1, r4
 80219bc:	4630      	mov	r0, r6
 80219be:	f7f9 ff3f 	bl	801b840 <_fflush_r>
 80219c2:	2800      	cmp	r0, #0
 80219c4:	d167      	bne.n	8021a96 <__sfvwrite_r+0x166>
 80219c6:	1b7f      	subs	r7, r7, r5
 80219c8:	f040 80f9 	bne.w	8021bbe <__sfvwrite_r+0x28e>
 80219cc:	4621      	mov	r1, r4
 80219ce:	4630      	mov	r0, r6
 80219d0:	f7f9 ff36 	bl	801b840 <_fflush_r>
 80219d4:	2800      	cmp	r0, #0
 80219d6:	d15e      	bne.n	8021a96 <__sfvwrite_r+0x166>
 80219d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80219dc:	1b5b      	subs	r3, r3, r5
 80219de:	44aa      	add	sl, r5
 80219e0:	ebab 0b05 	sub.w	fp, fp, r5
 80219e4:	f8c9 3008 	str.w	r3, [r9, #8]
 80219e8:	2b00      	cmp	r3, #0
 80219ea:	d1c0      	bne.n	802196e <__sfvwrite_r+0x3e>
 80219ec:	e7a7      	b.n	802193e <__sfvwrite_r+0xe>
 80219ee:	4621      	mov	r1, r4
 80219f0:	4630      	mov	r0, r6
 80219f2:	f000 f8e9 	bl	8021bc8 <__swsetup_r>
 80219f6:	2800      	cmp	r0, #0
 80219f8:	d0ab      	beq.n	8021952 <__sfvwrite_r+0x22>
 80219fa:	f04f 30ff 	mov.w	r0, #4294967295
 80219fe:	e79f      	b.n	8021940 <__sfvwrite_r+0x10>
 8021a00:	e9d8 a500 	ldrd	sl, r5, [r8]
 8021a04:	f108 0808 	add.w	r8, r8, #8
 8021a08:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8021a0c:	69e1      	ldr	r1, [r4, #28]
 8021a0e:	2d00      	cmp	r5, #0
 8021a10:	d0f6      	beq.n	8021a00 <__sfvwrite_r+0xd0>
 8021a12:	42bd      	cmp	r5, r7
 8021a14:	462b      	mov	r3, r5
 8021a16:	4652      	mov	r2, sl
 8021a18:	bf28      	it	cs
 8021a1a:	463b      	movcs	r3, r7
 8021a1c:	4630      	mov	r0, r6
 8021a1e:	47d8      	blx	fp
 8021a20:	2800      	cmp	r0, #0
 8021a22:	dd38      	ble.n	8021a96 <__sfvwrite_r+0x166>
 8021a24:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021a28:	1a1b      	subs	r3, r3, r0
 8021a2a:	4482      	add	sl, r0
 8021a2c:	1a2d      	subs	r5, r5, r0
 8021a2e:	f8c9 3008 	str.w	r3, [r9, #8]
 8021a32:	2b00      	cmp	r3, #0
 8021a34:	d1e8      	bne.n	8021a08 <__sfvwrite_r+0xd8>
 8021a36:	e782      	b.n	802193e <__sfvwrite_r+0xe>
 8021a38:	f04f 0a00 	mov.w	sl, #0
 8021a3c:	4f61      	ldr	r7, [pc, #388]	@ (8021bc4 <__sfvwrite_r+0x294>)
 8021a3e:	4655      	mov	r5, sl
 8021a40:	e7e2      	b.n	8021a08 <__sfvwrite_r+0xd8>
 8021a42:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8021a46:	f108 0808 	add.w	r8, r8, #8
 8021a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a4e:	6820      	ldr	r0, [r4, #0]
 8021a50:	68a2      	ldr	r2, [r4, #8]
 8021a52:	f1ba 0f00 	cmp.w	sl, #0
 8021a56:	d0f4      	beq.n	8021a42 <__sfvwrite_r+0x112>
 8021a58:	0599      	lsls	r1, r3, #22
 8021a5a:	d563      	bpl.n	8021b24 <__sfvwrite_r+0x1f4>
 8021a5c:	4552      	cmp	r2, sl
 8021a5e:	d836      	bhi.n	8021ace <__sfvwrite_r+0x19e>
 8021a60:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8021a64:	d033      	beq.n	8021ace <__sfvwrite_r+0x19e>
 8021a66:	6921      	ldr	r1, [r4, #16]
 8021a68:	6965      	ldr	r5, [r4, #20]
 8021a6a:	eba0 0b01 	sub.w	fp, r0, r1
 8021a6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021a72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021a76:	f10b 0201 	add.w	r2, fp, #1
 8021a7a:	106d      	asrs	r5, r5, #1
 8021a7c:	4452      	add	r2, sl
 8021a7e:	4295      	cmp	r5, r2
 8021a80:	bf38      	it	cc
 8021a82:	4615      	movcc	r5, r2
 8021a84:	055b      	lsls	r3, r3, #21
 8021a86:	d53d      	bpl.n	8021b04 <__sfvwrite_r+0x1d4>
 8021a88:	4629      	mov	r1, r5
 8021a8a:	4630      	mov	r0, r6
 8021a8c:	f7f9 fc0a 	bl	801b2a4 <_malloc_r>
 8021a90:	b948      	cbnz	r0, 8021aa6 <__sfvwrite_r+0x176>
 8021a92:	230c      	movs	r3, #12
 8021a94:	6033      	str	r3, [r6, #0]
 8021a96:	89a3      	ldrh	r3, [r4, #12]
 8021a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021a9c:	81a3      	strh	r3, [r4, #12]
 8021a9e:	e7ac      	b.n	80219fa <__sfvwrite_r+0xca>
 8021aa0:	461f      	mov	r7, r3
 8021aa2:	469a      	mov	sl, r3
 8021aa4:	e7d1      	b.n	8021a4a <__sfvwrite_r+0x11a>
 8021aa6:	465a      	mov	r2, fp
 8021aa8:	6921      	ldr	r1, [r4, #16]
 8021aaa:	9001      	str	r0, [sp, #4]
 8021aac:	f7fa ff02 	bl	801c8b4 <memcpy>
 8021ab0:	89a2      	ldrh	r2, [r4, #12]
 8021ab2:	9b01      	ldr	r3, [sp, #4]
 8021ab4:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8021ab8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8021abc:	81a2      	strh	r2, [r4, #12]
 8021abe:	6123      	str	r3, [r4, #16]
 8021ac0:	6165      	str	r5, [r4, #20]
 8021ac2:	445b      	add	r3, fp
 8021ac4:	eba5 050b 	sub.w	r5, r5, fp
 8021ac8:	6023      	str	r3, [r4, #0]
 8021aca:	4652      	mov	r2, sl
 8021acc:	60a5      	str	r5, [r4, #8]
 8021ace:	4552      	cmp	r2, sl
 8021ad0:	bf28      	it	cs
 8021ad2:	4652      	movcs	r2, sl
 8021ad4:	6820      	ldr	r0, [r4, #0]
 8021ad6:	9201      	str	r2, [sp, #4]
 8021ad8:	4639      	mov	r1, r7
 8021ada:	f7ff f9ae 	bl	8020e3a <memmove>
 8021ade:	68a3      	ldr	r3, [r4, #8]
 8021ae0:	9a01      	ldr	r2, [sp, #4]
 8021ae2:	1a9b      	subs	r3, r3, r2
 8021ae4:	60a3      	str	r3, [r4, #8]
 8021ae6:	6823      	ldr	r3, [r4, #0]
 8021ae8:	4413      	add	r3, r2
 8021aea:	4655      	mov	r5, sl
 8021aec:	6023      	str	r3, [r4, #0]
 8021aee:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8021af2:	1b5b      	subs	r3, r3, r5
 8021af4:	442f      	add	r7, r5
 8021af6:	ebaa 0a05 	sub.w	sl, sl, r5
 8021afa:	f8c9 3008 	str.w	r3, [r9, #8]
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d1a3      	bne.n	8021a4a <__sfvwrite_r+0x11a>
 8021b02:	e71c      	b.n	802193e <__sfvwrite_r+0xe>
 8021b04:	462a      	mov	r2, r5
 8021b06:	4630      	mov	r0, r6
 8021b08:	f7fe fd98 	bl	802063c <_realloc_r>
 8021b0c:	4603      	mov	r3, r0
 8021b0e:	2800      	cmp	r0, #0
 8021b10:	d1d5      	bne.n	8021abe <__sfvwrite_r+0x18e>
 8021b12:	6921      	ldr	r1, [r4, #16]
 8021b14:	4630      	mov	r0, r6
 8021b16:	f7fa ff49 	bl	801c9ac <_free_r>
 8021b1a:	89a3      	ldrh	r3, [r4, #12]
 8021b1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8021b20:	81a3      	strh	r3, [r4, #12]
 8021b22:	e7b6      	b.n	8021a92 <__sfvwrite_r+0x162>
 8021b24:	6923      	ldr	r3, [r4, #16]
 8021b26:	4283      	cmp	r3, r0
 8021b28:	d302      	bcc.n	8021b30 <__sfvwrite_r+0x200>
 8021b2a:	6961      	ldr	r1, [r4, #20]
 8021b2c:	4551      	cmp	r1, sl
 8021b2e:	d915      	bls.n	8021b5c <__sfvwrite_r+0x22c>
 8021b30:	4552      	cmp	r2, sl
 8021b32:	bf28      	it	cs
 8021b34:	4652      	movcs	r2, sl
 8021b36:	4639      	mov	r1, r7
 8021b38:	4615      	mov	r5, r2
 8021b3a:	f7ff f97e 	bl	8020e3a <memmove>
 8021b3e:	68a3      	ldr	r3, [r4, #8]
 8021b40:	6822      	ldr	r2, [r4, #0]
 8021b42:	1b5b      	subs	r3, r3, r5
 8021b44:	442a      	add	r2, r5
 8021b46:	60a3      	str	r3, [r4, #8]
 8021b48:	6022      	str	r2, [r4, #0]
 8021b4a:	2b00      	cmp	r3, #0
 8021b4c:	d1cf      	bne.n	8021aee <__sfvwrite_r+0x1be>
 8021b4e:	4621      	mov	r1, r4
 8021b50:	4630      	mov	r0, r6
 8021b52:	f7f9 fe75 	bl	801b840 <_fflush_r>
 8021b56:	2800      	cmp	r0, #0
 8021b58:	d0c9      	beq.n	8021aee <__sfvwrite_r+0x1be>
 8021b5a:	e79c      	b.n	8021a96 <__sfvwrite_r+0x166>
 8021b5c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8021b60:	4553      	cmp	r3, sl
 8021b62:	bf28      	it	cs
 8021b64:	4653      	movcs	r3, sl
 8021b66:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8021b68:	fb93 f3f1 	sdiv	r3, r3, r1
 8021b6c:	463a      	mov	r2, r7
 8021b6e:	434b      	muls	r3, r1
 8021b70:	4630      	mov	r0, r6
 8021b72:	69e1      	ldr	r1, [r4, #28]
 8021b74:	47a8      	blx	r5
 8021b76:	1e05      	subs	r5, r0, #0
 8021b78:	dcb9      	bgt.n	8021aee <__sfvwrite_r+0x1be>
 8021b7a:	e78c      	b.n	8021a96 <__sfvwrite_r+0x166>
 8021b7c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8021b80:	2000      	movs	r0, #0
 8021b82:	f108 0808 	add.w	r8, r8, #8
 8021b86:	e6f2      	b.n	802196e <__sfvwrite_r+0x3e>
 8021b88:	f10b 0701 	add.w	r7, fp, #1
 8021b8c:	e6ff      	b.n	802198e <__sfvwrite_r+0x5e>
 8021b8e:	4293      	cmp	r3, r2
 8021b90:	dc08      	bgt.n	8021ba4 <__sfvwrite_r+0x274>
 8021b92:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8021b94:	69e1      	ldr	r1, [r4, #28]
 8021b96:	4652      	mov	r2, sl
 8021b98:	4630      	mov	r0, r6
 8021b9a:	47a8      	blx	r5
 8021b9c:	1e05      	subs	r5, r0, #0
 8021b9e:	f73f af12 	bgt.w	80219c6 <__sfvwrite_r+0x96>
 8021ba2:	e778      	b.n	8021a96 <__sfvwrite_r+0x166>
 8021ba4:	4651      	mov	r1, sl
 8021ba6:	9201      	str	r2, [sp, #4]
 8021ba8:	f7ff f947 	bl	8020e3a <memmove>
 8021bac:	9a01      	ldr	r2, [sp, #4]
 8021bae:	68a3      	ldr	r3, [r4, #8]
 8021bb0:	1a9b      	subs	r3, r3, r2
 8021bb2:	60a3      	str	r3, [r4, #8]
 8021bb4:	6823      	ldr	r3, [r4, #0]
 8021bb6:	4413      	add	r3, r2
 8021bb8:	6023      	str	r3, [r4, #0]
 8021bba:	4615      	mov	r5, r2
 8021bbc:	e703      	b.n	80219c6 <__sfvwrite_r+0x96>
 8021bbe:	2001      	movs	r0, #1
 8021bc0:	e70a      	b.n	80219d8 <__sfvwrite_r+0xa8>
 8021bc2:	bf00      	nop
 8021bc4:	7ffffc00 	.word	0x7ffffc00

08021bc8 <__swsetup_r>:
 8021bc8:	b538      	push	{r3, r4, r5, lr}
 8021bca:	4b29      	ldr	r3, [pc, #164]	@ (8021c70 <__swsetup_r+0xa8>)
 8021bcc:	4605      	mov	r5, r0
 8021bce:	6818      	ldr	r0, [r3, #0]
 8021bd0:	460c      	mov	r4, r1
 8021bd2:	b118      	cbz	r0, 8021bdc <__swsetup_r+0x14>
 8021bd4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8021bd6:	b90b      	cbnz	r3, 8021bdc <__swsetup_r+0x14>
 8021bd8:	f7f9 fef8 	bl	801b9cc <__sinit>
 8021bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021be0:	0719      	lsls	r1, r3, #28
 8021be2:	d422      	bmi.n	8021c2a <__swsetup_r+0x62>
 8021be4:	06da      	lsls	r2, r3, #27
 8021be6:	d407      	bmi.n	8021bf8 <__swsetup_r+0x30>
 8021be8:	2209      	movs	r2, #9
 8021bea:	602a      	str	r2, [r5, #0]
 8021bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021bf0:	81a3      	strh	r3, [r4, #12]
 8021bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8021bf6:	e033      	b.n	8021c60 <__swsetup_r+0x98>
 8021bf8:	0758      	lsls	r0, r3, #29
 8021bfa:	d512      	bpl.n	8021c22 <__swsetup_r+0x5a>
 8021bfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021bfe:	b141      	cbz	r1, 8021c12 <__swsetup_r+0x4a>
 8021c00:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8021c04:	4299      	cmp	r1, r3
 8021c06:	d002      	beq.n	8021c0e <__swsetup_r+0x46>
 8021c08:	4628      	mov	r0, r5
 8021c0a:	f7fa fecf 	bl	801c9ac <_free_r>
 8021c0e:	2300      	movs	r3, #0
 8021c10:	6323      	str	r3, [r4, #48]	@ 0x30
 8021c12:	89a3      	ldrh	r3, [r4, #12]
 8021c14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021c18:	81a3      	strh	r3, [r4, #12]
 8021c1a:	2300      	movs	r3, #0
 8021c1c:	6063      	str	r3, [r4, #4]
 8021c1e:	6923      	ldr	r3, [r4, #16]
 8021c20:	6023      	str	r3, [r4, #0]
 8021c22:	89a3      	ldrh	r3, [r4, #12]
 8021c24:	f043 0308 	orr.w	r3, r3, #8
 8021c28:	81a3      	strh	r3, [r4, #12]
 8021c2a:	6923      	ldr	r3, [r4, #16]
 8021c2c:	b94b      	cbnz	r3, 8021c42 <__swsetup_r+0x7a>
 8021c2e:	89a3      	ldrh	r3, [r4, #12]
 8021c30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021c38:	d003      	beq.n	8021c42 <__swsetup_r+0x7a>
 8021c3a:	4621      	mov	r1, r4
 8021c3c:	4628      	mov	r0, r5
 8021c3e:	f000 f8c9 	bl	8021dd4 <__smakebuf_r>
 8021c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c46:	f013 0201 	ands.w	r2, r3, #1
 8021c4a:	d00a      	beq.n	8021c62 <__swsetup_r+0x9a>
 8021c4c:	2200      	movs	r2, #0
 8021c4e:	60a2      	str	r2, [r4, #8]
 8021c50:	6962      	ldr	r2, [r4, #20]
 8021c52:	4252      	negs	r2, r2
 8021c54:	61a2      	str	r2, [r4, #24]
 8021c56:	6922      	ldr	r2, [r4, #16]
 8021c58:	b942      	cbnz	r2, 8021c6c <__swsetup_r+0xa4>
 8021c5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021c5e:	d1c5      	bne.n	8021bec <__swsetup_r+0x24>
 8021c60:	bd38      	pop	{r3, r4, r5, pc}
 8021c62:	0799      	lsls	r1, r3, #30
 8021c64:	bf58      	it	pl
 8021c66:	6962      	ldrpl	r2, [r4, #20]
 8021c68:	60a2      	str	r2, [r4, #8]
 8021c6a:	e7f4      	b.n	8021c56 <__swsetup_r+0x8e>
 8021c6c:	2000      	movs	r0, #0
 8021c6e:	e7f7      	b.n	8021c60 <__swsetup_r+0x98>
 8021c70:	20000674 	.word	0x20000674

08021c74 <__fputwc>:
 8021c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021c78:	4680      	mov	r8, r0
 8021c7a:	460f      	mov	r7, r1
 8021c7c:	4614      	mov	r4, r2
 8021c7e:	f7fd fabb 	bl	801f1f8 <__locale_mb_cur_max>
 8021c82:	2801      	cmp	r0, #1
 8021c84:	4605      	mov	r5, r0
 8021c86:	d11b      	bne.n	8021cc0 <__fputwc+0x4c>
 8021c88:	1e7b      	subs	r3, r7, #1
 8021c8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8021c8c:	d818      	bhi.n	8021cc0 <__fputwc+0x4c>
 8021c8e:	f88d 7004 	strb.w	r7, [sp, #4]
 8021c92:	2600      	movs	r6, #0
 8021c94:	f10d 0904 	add.w	r9, sp, #4
 8021c98:	42ae      	cmp	r6, r5
 8021c9a:	d021      	beq.n	8021ce0 <__fputwc+0x6c>
 8021c9c:	68a3      	ldr	r3, [r4, #8]
 8021c9e:	f816 1009 	ldrb.w	r1, [r6, r9]
 8021ca2:	3b01      	subs	r3, #1
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	60a3      	str	r3, [r4, #8]
 8021ca8:	da04      	bge.n	8021cb4 <__fputwc+0x40>
 8021caa:	69a2      	ldr	r2, [r4, #24]
 8021cac:	4293      	cmp	r3, r2
 8021cae:	db1b      	blt.n	8021ce8 <__fputwc+0x74>
 8021cb0:	290a      	cmp	r1, #10
 8021cb2:	d019      	beq.n	8021ce8 <__fputwc+0x74>
 8021cb4:	6823      	ldr	r3, [r4, #0]
 8021cb6:	1c5a      	adds	r2, r3, #1
 8021cb8:	6022      	str	r2, [r4, #0]
 8021cba:	7019      	strb	r1, [r3, #0]
 8021cbc:	3601      	adds	r6, #1
 8021cbe:	e7eb      	b.n	8021c98 <__fputwc+0x24>
 8021cc0:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8021cc4:	463a      	mov	r2, r7
 8021cc6:	a901      	add	r1, sp, #4
 8021cc8:	4640      	mov	r0, r8
 8021cca:	f000 f845 	bl	8021d58 <_wcrtomb_r>
 8021cce:	1c43      	adds	r3, r0, #1
 8021cd0:	4605      	mov	r5, r0
 8021cd2:	d1de      	bne.n	8021c92 <__fputwc+0x1e>
 8021cd4:	89a3      	ldrh	r3, [r4, #12]
 8021cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021cda:	81a3      	strh	r3, [r4, #12]
 8021cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8021ce0:	4638      	mov	r0, r7
 8021ce2:	b003      	add	sp, #12
 8021ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021ce8:	4622      	mov	r2, r4
 8021cea:	4640      	mov	r0, r8
 8021cec:	f000 f8ae 	bl	8021e4c <__swbuf_r>
 8021cf0:	3001      	adds	r0, #1
 8021cf2:	d1e3      	bne.n	8021cbc <__fputwc+0x48>
 8021cf4:	e7f2      	b.n	8021cdc <__fputwc+0x68>

08021cf6 <_fputwc_r>:
 8021cf6:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 8021cf8:	07db      	lsls	r3, r3, #31
 8021cfa:	b570      	push	{r4, r5, r6, lr}
 8021cfc:	4605      	mov	r5, r0
 8021cfe:	460e      	mov	r6, r1
 8021d00:	4614      	mov	r4, r2
 8021d02:	d405      	bmi.n	8021d10 <_fputwc_r+0x1a>
 8021d04:	8993      	ldrh	r3, [r2, #12]
 8021d06:	0598      	lsls	r0, r3, #22
 8021d08:	d402      	bmi.n	8021d10 <_fputwc_r+0x1a>
 8021d0a:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 8021d0c:	f7fa fdbb 	bl	801c886 <__retarget_lock_acquire_recursive>
 8021d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d14:	0499      	lsls	r1, r3, #18
 8021d16:	d406      	bmi.n	8021d26 <_fputwc_r+0x30>
 8021d18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021d1c:	81a3      	strh	r3, [r4, #12]
 8021d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021d20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021d24:	6663      	str	r3, [r4, #100]	@ 0x64
 8021d26:	4622      	mov	r2, r4
 8021d28:	4628      	mov	r0, r5
 8021d2a:	4631      	mov	r1, r6
 8021d2c:	f7ff ffa2 	bl	8021c74 <__fputwc>
 8021d30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021d32:	07da      	lsls	r2, r3, #31
 8021d34:	4605      	mov	r5, r0
 8021d36:	d405      	bmi.n	8021d44 <_fputwc_r+0x4e>
 8021d38:	89a3      	ldrh	r3, [r4, #12]
 8021d3a:	059b      	lsls	r3, r3, #22
 8021d3c:	d402      	bmi.n	8021d44 <_fputwc_r+0x4e>
 8021d3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021d40:	f7fa fda3 	bl	801c88a <__retarget_lock_release_recursive>
 8021d44:	4628      	mov	r0, r5
 8021d46:	bd70      	pop	{r4, r5, r6, pc}

08021d48 <abort>:
 8021d48:	b508      	push	{r3, lr}
 8021d4a:	2006      	movs	r0, #6
 8021d4c:	f000 f8f0 	bl	8021f30 <raise>
 8021d50:	2001      	movs	r0, #1
 8021d52:	f7e0 f8a1 	bl	8001e98 <_exit>
	...

08021d58 <_wcrtomb_r>:
 8021d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d5a:	4c09      	ldr	r4, [pc, #36]	@ (8021d80 <_wcrtomb_r+0x28>)
 8021d5c:	b085      	sub	sp, #20
 8021d5e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 8021d62:	4605      	mov	r5, r0
 8021d64:	461e      	mov	r6, r3
 8021d66:	b909      	cbnz	r1, 8021d6c <_wcrtomb_r+0x14>
 8021d68:	460a      	mov	r2, r1
 8021d6a:	a901      	add	r1, sp, #4
 8021d6c:	47b8      	blx	r7
 8021d6e:	1c43      	adds	r3, r0, #1
 8021d70:	bf01      	itttt	eq
 8021d72:	2300      	moveq	r3, #0
 8021d74:	6033      	streq	r3, [r6, #0]
 8021d76:	238a      	moveq	r3, #138	@ 0x8a
 8021d78:	602b      	streq	r3, [r5, #0]
 8021d7a:	b005      	add	sp, #20
 8021d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d7e:	bf00      	nop
 8021d80:	200007f8 	.word	0x200007f8

08021d84 <__swhatbuf_r>:
 8021d84:	b570      	push	{r4, r5, r6, lr}
 8021d86:	460c      	mov	r4, r1
 8021d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021d8c:	2900      	cmp	r1, #0
 8021d8e:	b096      	sub	sp, #88	@ 0x58
 8021d90:	4615      	mov	r5, r2
 8021d92:	461e      	mov	r6, r3
 8021d94:	da07      	bge.n	8021da6 <__swhatbuf_r+0x22>
 8021d96:	89a1      	ldrh	r1, [r4, #12]
 8021d98:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8021d9c:	d117      	bne.n	8021dce <__swhatbuf_r+0x4a>
 8021d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021da2:	4608      	mov	r0, r1
 8021da4:	e00f      	b.n	8021dc6 <__swhatbuf_r+0x42>
 8021da6:	466a      	mov	r2, sp
 8021da8:	f000 f8ca 	bl	8021f40 <_fstat_r>
 8021dac:	2800      	cmp	r0, #0
 8021dae:	dbf2      	blt.n	8021d96 <__swhatbuf_r+0x12>
 8021db0:	9901      	ldr	r1, [sp, #4]
 8021db2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021db6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021dba:	4259      	negs	r1, r3
 8021dbc:	4159      	adcs	r1, r3
 8021dbe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8021dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021dc6:	6031      	str	r1, [r6, #0]
 8021dc8:	602b      	str	r3, [r5, #0]
 8021dca:	b016      	add	sp, #88	@ 0x58
 8021dcc:	bd70      	pop	{r4, r5, r6, pc}
 8021dce:	2100      	movs	r1, #0
 8021dd0:	2340      	movs	r3, #64	@ 0x40
 8021dd2:	e7e6      	b.n	8021da2 <__swhatbuf_r+0x1e>

08021dd4 <__smakebuf_r>:
 8021dd4:	898b      	ldrh	r3, [r1, #12]
 8021dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021dd8:	079d      	lsls	r5, r3, #30
 8021dda:	4606      	mov	r6, r0
 8021ddc:	460c      	mov	r4, r1
 8021dde:	d507      	bpl.n	8021df0 <__smakebuf_r+0x1c>
 8021de0:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8021de4:	6023      	str	r3, [r4, #0]
 8021de6:	6123      	str	r3, [r4, #16]
 8021de8:	2301      	movs	r3, #1
 8021dea:	6163      	str	r3, [r4, #20]
 8021dec:	b003      	add	sp, #12
 8021dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021df0:	ab01      	add	r3, sp, #4
 8021df2:	466a      	mov	r2, sp
 8021df4:	f7ff ffc6 	bl	8021d84 <__swhatbuf_r>
 8021df8:	9f00      	ldr	r7, [sp, #0]
 8021dfa:	4605      	mov	r5, r0
 8021dfc:	4639      	mov	r1, r7
 8021dfe:	4630      	mov	r0, r6
 8021e00:	f7f9 fa50 	bl	801b2a4 <_malloc_r>
 8021e04:	b948      	cbnz	r0, 8021e1a <__smakebuf_r+0x46>
 8021e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e0a:	059a      	lsls	r2, r3, #22
 8021e0c:	d4ee      	bmi.n	8021dec <__smakebuf_r+0x18>
 8021e0e:	f023 0303 	bic.w	r3, r3, #3
 8021e12:	f043 0302 	orr.w	r3, r3, #2
 8021e16:	81a3      	strh	r3, [r4, #12]
 8021e18:	e7e2      	b.n	8021de0 <__smakebuf_r+0xc>
 8021e1a:	89a3      	ldrh	r3, [r4, #12]
 8021e1c:	6020      	str	r0, [r4, #0]
 8021e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021e22:	81a3      	strh	r3, [r4, #12]
 8021e24:	9b01      	ldr	r3, [sp, #4]
 8021e26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021e2a:	b15b      	cbz	r3, 8021e44 <__smakebuf_r+0x70>
 8021e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021e30:	4630      	mov	r0, r6
 8021e32:	f000 f897 	bl	8021f64 <_isatty_r>
 8021e36:	b128      	cbz	r0, 8021e44 <__smakebuf_r+0x70>
 8021e38:	89a3      	ldrh	r3, [r4, #12]
 8021e3a:	f023 0303 	bic.w	r3, r3, #3
 8021e3e:	f043 0301 	orr.w	r3, r3, #1
 8021e42:	81a3      	strh	r3, [r4, #12]
 8021e44:	89a3      	ldrh	r3, [r4, #12]
 8021e46:	431d      	orrs	r5, r3
 8021e48:	81a5      	strh	r5, [r4, #12]
 8021e4a:	e7cf      	b.n	8021dec <__smakebuf_r+0x18>

08021e4c <__swbuf_r>:
 8021e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e4e:	460e      	mov	r6, r1
 8021e50:	4614      	mov	r4, r2
 8021e52:	4605      	mov	r5, r0
 8021e54:	b118      	cbz	r0, 8021e5e <__swbuf_r+0x12>
 8021e56:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8021e58:	b90b      	cbnz	r3, 8021e5e <__swbuf_r+0x12>
 8021e5a:	f7f9 fdb7 	bl	801b9cc <__sinit>
 8021e5e:	69a3      	ldr	r3, [r4, #24]
 8021e60:	60a3      	str	r3, [r4, #8]
 8021e62:	89a3      	ldrh	r3, [r4, #12]
 8021e64:	0719      	lsls	r1, r3, #28
 8021e66:	d501      	bpl.n	8021e6c <__swbuf_r+0x20>
 8021e68:	6923      	ldr	r3, [r4, #16]
 8021e6a:	b943      	cbnz	r3, 8021e7e <__swbuf_r+0x32>
 8021e6c:	4621      	mov	r1, r4
 8021e6e:	4628      	mov	r0, r5
 8021e70:	f7ff feaa 	bl	8021bc8 <__swsetup_r>
 8021e74:	b118      	cbz	r0, 8021e7e <__swbuf_r+0x32>
 8021e76:	f04f 37ff 	mov.w	r7, #4294967295
 8021e7a:	4638      	mov	r0, r7
 8021e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e82:	b2f6      	uxtb	r6, r6
 8021e84:	049a      	lsls	r2, r3, #18
 8021e86:	4637      	mov	r7, r6
 8021e88:	d406      	bmi.n	8021e98 <__swbuf_r+0x4c>
 8021e8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8021e8e:	81a3      	strh	r3, [r4, #12]
 8021e90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021e92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8021e96:	6663      	str	r3, [r4, #100]	@ 0x64
 8021e98:	6823      	ldr	r3, [r4, #0]
 8021e9a:	6922      	ldr	r2, [r4, #16]
 8021e9c:	1a98      	subs	r0, r3, r2
 8021e9e:	6963      	ldr	r3, [r4, #20]
 8021ea0:	4283      	cmp	r3, r0
 8021ea2:	dc05      	bgt.n	8021eb0 <__swbuf_r+0x64>
 8021ea4:	4621      	mov	r1, r4
 8021ea6:	4628      	mov	r0, r5
 8021ea8:	f7f9 fcca 	bl	801b840 <_fflush_r>
 8021eac:	2800      	cmp	r0, #0
 8021eae:	d1e2      	bne.n	8021e76 <__swbuf_r+0x2a>
 8021eb0:	68a3      	ldr	r3, [r4, #8]
 8021eb2:	3b01      	subs	r3, #1
 8021eb4:	60a3      	str	r3, [r4, #8]
 8021eb6:	6823      	ldr	r3, [r4, #0]
 8021eb8:	1c5a      	adds	r2, r3, #1
 8021eba:	6022      	str	r2, [r4, #0]
 8021ebc:	701e      	strb	r6, [r3, #0]
 8021ebe:	6962      	ldr	r2, [r4, #20]
 8021ec0:	1c43      	adds	r3, r0, #1
 8021ec2:	429a      	cmp	r2, r3
 8021ec4:	d004      	beq.n	8021ed0 <__swbuf_r+0x84>
 8021ec6:	89a3      	ldrh	r3, [r4, #12]
 8021ec8:	07db      	lsls	r3, r3, #31
 8021eca:	d5d6      	bpl.n	8021e7a <__swbuf_r+0x2e>
 8021ecc:	2e0a      	cmp	r6, #10
 8021ece:	d1d4      	bne.n	8021e7a <__swbuf_r+0x2e>
 8021ed0:	4621      	mov	r1, r4
 8021ed2:	4628      	mov	r0, r5
 8021ed4:	f7f9 fcb4 	bl	801b840 <_fflush_r>
 8021ed8:	2800      	cmp	r0, #0
 8021eda:	d0ce      	beq.n	8021e7a <__swbuf_r+0x2e>
 8021edc:	e7cb      	b.n	8021e76 <__swbuf_r+0x2a>

08021ede <_raise_r>:
 8021ede:	291f      	cmp	r1, #31
 8021ee0:	b538      	push	{r3, r4, r5, lr}
 8021ee2:	4605      	mov	r5, r0
 8021ee4:	460c      	mov	r4, r1
 8021ee6:	d904      	bls.n	8021ef2 <_raise_r+0x14>
 8021ee8:	2316      	movs	r3, #22
 8021eea:	6003      	str	r3, [r0, #0]
 8021eec:	f04f 30ff 	mov.w	r0, #4294967295
 8021ef0:	bd38      	pop	{r3, r4, r5, pc}
 8021ef2:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 8021ef6:	b112      	cbz	r2, 8021efe <_raise_r+0x20>
 8021ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021efc:	b94b      	cbnz	r3, 8021f12 <_raise_r+0x34>
 8021efe:	4628      	mov	r0, r5
 8021f00:	f000 f852 	bl	8021fa8 <_getpid_r>
 8021f04:	4622      	mov	r2, r4
 8021f06:	4601      	mov	r1, r0
 8021f08:	4628      	mov	r0, r5
 8021f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f0e:	f000 b839 	b.w	8021f84 <_kill_r>
 8021f12:	2b01      	cmp	r3, #1
 8021f14:	d00a      	beq.n	8021f2c <_raise_r+0x4e>
 8021f16:	1c59      	adds	r1, r3, #1
 8021f18:	d103      	bne.n	8021f22 <_raise_r+0x44>
 8021f1a:	2316      	movs	r3, #22
 8021f1c:	6003      	str	r3, [r0, #0]
 8021f1e:	2001      	movs	r0, #1
 8021f20:	e7e6      	b.n	8021ef0 <_raise_r+0x12>
 8021f22:	2100      	movs	r1, #0
 8021f24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021f28:	4620      	mov	r0, r4
 8021f2a:	4798      	blx	r3
 8021f2c:	2000      	movs	r0, #0
 8021f2e:	e7df      	b.n	8021ef0 <_raise_r+0x12>

08021f30 <raise>:
 8021f30:	4b02      	ldr	r3, [pc, #8]	@ (8021f3c <raise+0xc>)
 8021f32:	4601      	mov	r1, r0
 8021f34:	6818      	ldr	r0, [r3, #0]
 8021f36:	f7ff bfd2 	b.w	8021ede <_raise_r>
 8021f3a:	bf00      	nop
 8021f3c:	20000674 	.word	0x20000674

08021f40 <_fstat_r>:
 8021f40:	b538      	push	{r3, r4, r5, lr}
 8021f42:	4d07      	ldr	r5, [pc, #28]	@ (8021f60 <_fstat_r+0x20>)
 8021f44:	2300      	movs	r3, #0
 8021f46:	4604      	mov	r4, r0
 8021f48:	4608      	mov	r0, r1
 8021f4a:	4611      	mov	r1, r2
 8021f4c:	602b      	str	r3, [r5, #0]
 8021f4e:	f7df ffd7 	bl	8001f00 <_fstat>
 8021f52:	1c43      	adds	r3, r0, #1
 8021f54:	d102      	bne.n	8021f5c <_fstat_r+0x1c>
 8021f56:	682b      	ldr	r3, [r5, #0]
 8021f58:	b103      	cbz	r3, 8021f5c <_fstat_r+0x1c>
 8021f5a:	6023      	str	r3, [r4, #0]
 8021f5c:	bd38      	pop	{r3, r4, r5, pc}
 8021f5e:	bf00      	nop
 8021f60:	2000ce64 	.word	0x2000ce64

08021f64 <_isatty_r>:
 8021f64:	b538      	push	{r3, r4, r5, lr}
 8021f66:	4d06      	ldr	r5, [pc, #24]	@ (8021f80 <_isatty_r+0x1c>)
 8021f68:	2300      	movs	r3, #0
 8021f6a:	4604      	mov	r4, r0
 8021f6c:	4608      	mov	r0, r1
 8021f6e:	602b      	str	r3, [r5, #0]
 8021f70:	f7df ffd6 	bl	8001f20 <_isatty>
 8021f74:	1c43      	adds	r3, r0, #1
 8021f76:	d102      	bne.n	8021f7e <_isatty_r+0x1a>
 8021f78:	682b      	ldr	r3, [r5, #0]
 8021f7a:	b103      	cbz	r3, 8021f7e <_isatty_r+0x1a>
 8021f7c:	6023      	str	r3, [r4, #0]
 8021f7e:	bd38      	pop	{r3, r4, r5, pc}
 8021f80:	2000ce64 	.word	0x2000ce64

08021f84 <_kill_r>:
 8021f84:	b538      	push	{r3, r4, r5, lr}
 8021f86:	4d07      	ldr	r5, [pc, #28]	@ (8021fa4 <_kill_r+0x20>)
 8021f88:	2300      	movs	r3, #0
 8021f8a:	4604      	mov	r4, r0
 8021f8c:	4608      	mov	r0, r1
 8021f8e:	4611      	mov	r1, r2
 8021f90:	602b      	str	r3, [r5, #0]
 8021f92:	f7df ff71 	bl	8001e78 <_kill>
 8021f96:	1c43      	adds	r3, r0, #1
 8021f98:	d102      	bne.n	8021fa0 <_kill_r+0x1c>
 8021f9a:	682b      	ldr	r3, [r5, #0]
 8021f9c:	b103      	cbz	r3, 8021fa0 <_kill_r+0x1c>
 8021f9e:	6023      	str	r3, [r4, #0]
 8021fa0:	bd38      	pop	{r3, r4, r5, pc}
 8021fa2:	bf00      	nop
 8021fa4:	2000ce64 	.word	0x2000ce64

08021fa8 <_getpid_r>:
 8021fa8:	f7df bf5e 	b.w	8001e68 <_getpid>
 8021fac:	0000      	movs	r0, r0
	...

08021fb0 <ceil>:
 8021fb0:	ec51 0b10 	vmov	r0, r1, d0
 8021fb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8021fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021fbc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8021fc0:	2e13      	cmp	r6, #19
 8021fc2:	460c      	mov	r4, r1
 8021fc4:	4605      	mov	r5, r0
 8021fc6:	4680      	mov	r8, r0
 8021fc8:	dc2e      	bgt.n	8022028 <ceil+0x78>
 8021fca:	2e00      	cmp	r6, #0
 8021fcc:	da11      	bge.n	8021ff2 <ceil+0x42>
 8021fce:	a332      	add	r3, pc, #200	@ (adr r3, 8022098 <ceil+0xe8>)
 8021fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fd4:	f7de f96a 	bl	80002ac <__adddf3>
 8021fd8:	2200      	movs	r2, #0
 8021fda:	2300      	movs	r3, #0
 8021fdc:	f7de fdac 	bl	8000b38 <__aeabi_dcmpgt>
 8021fe0:	b120      	cbz	r0, 8021fec <ceil+0x3c>
 8021fe2:	2c00      	cmp	r4, #0
 8021fe4:	db4f      	blt.n	8022086 <ceil+0xd6>
 8021fe6:	4325      	orrs	r5, r4
 8021fe8:	d151      	bne.n	802208e <ceil+0xde>
 8021fea:	462c      	mov	r4, r5
 8021fec:	4621      	mov	r1, r4
 8021fee:	4628      	mov	r0, r5
 8021ff0:	e023      	b.n	802203a <ceil+0x8a>
 8021ff2:	4f2b      	ldr	r7, [pc, #172]	@ (80220a0 <ceil+0xf0>)
 8021ff4:	4137      	asrs	r7, r6
 8021ff6:	ea01 0307 	and.w	r3, r1, r7
 8021ffa:	4303      	orrs	r3, r0
 8021ffc:	d01d      	beq.n	802203a <ceil+0x8a>
 8021ffe:	a326      	add	r3, pc, #152	@ (adr r3, 8022098 <ceil+0xe8>)
 8022000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022004:	f7de f952 	bl	80002ac <__adddf3>
 8022008:	2200      	movs	r2, #0
 802200a:	2300      	movs	r3, #0
 802200c:	f7de fd94 	bl	8000b38 <__aeabi_dcmpgt>
 8022010:	2800      	cmp	r0, #0
 8022012:	d0eb      	beq.n	8021fec <ceil+0x3c>
 8022014:	2c00      	cmp	r4, #0
 8022016:	bfc2      	ittt	gt
 8022018:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 802201c:	4133      	asrgt	r3, r6
 802201e:	18e4      	addgt	r4, r4, r3
 8022020:	ea24 0407 	bic.w	r4, r4, r7
 8022024:	2500      	movs	r5, #0
 8022026:	e7e1      	b.n	8021fec <ceil+0x3c>
 8022028:	2e33      	cmp	r6, #51	@ 0x33
 802202a:	dd0a      	ble.n	8022042 <ceil+0x92>
 802202c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022030:	d103      	bne.n	802203a <ceil+0x8a>
 8022032:	4602      	mov	r2, r0
 8022034:	460b      	mov	r3, r1
 8022036:	f7de f939 	bl	80002ac <__adddf3>
 802203a:	ec41 0b10 	vmov	d0, r0, r1
 802203e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022042:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8022046:	f04f 37ff 	mov.w	r7, #4294967295
 802204a:	40df      	lsrs	r7, r3
 802204c:	4238      	tst	r0, r7
 802204e:	d0f4      	beq.n	802203a <ceil+0x8a>
 8022050:	a311      	add	r3, pc, #68	@ (adr r3, 8022098 <ceil+0xe8>)
 8022052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022056:	f7de f929 	bl	80002ac <__adddf3>
 802205a:	2200      	movs	r2, #0
 802205c:	2300      	movs	r3, #0
 802205e:	f7de fd6b 	bl	8000b38 <__aeabi_dcmpgt>
 8022062:	2800      	cmp	r0, #0
 8022064:	d0c2      	beq.n	8021fec <ceil+0x3c>
 8022066:	2c00      	cmp	r4, #0
 8022068:	dd0a      	ble.n	8022080 <ceil+0xd0>
 802206a:	2e14      	cmp	r6, #20
 802206c:	d101      	bne.n	8022072 <ceil+0xc2>
 802206e:	3401      	adds	r4, #1
 8022070:	e006      	b.n	8022080 <ceil+0xd0>
 8022072:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8022076:	2301      	movs	r3, #1
 8022078:	40b3      	lsls	r3, r6
 802207a:	441d      	add	r5, r3
 802207c:	45a8      	cmp	r8, r5
 802207e:	d8f6      	bhi.n	802206e <ceil+0xbe>
 8022080:	ea25 0507 	bic.w	r5, r5, r7
 8022084:	e7b2      	b.n	8021fec <ceil+0x3c>
 8022086:	2500      	movs	r5, #0
 8022088:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 802208c:	e7ae      	b.n	8021fec <ceil+0x3c>
 802208e:	4c05      	ldr	r4, [pc, #20]	@ (80220a4 <ceil+0xf4>)
 8022090:	2500      	movs	r5, #0
 8022092:	e7ab      	b.n	8021fec <ceil+0x3c>
 8022094:	f3af 8000 	nop.w
 8022098:	8800759c 	.word	0x8800759c
 802209c:	7e37e43c 	.word	0x7e37e43c
 80220a0:	000fffff 	.word	0x000fffff
 80220a4:	3ff00000 	.word	0x3ff00000

080220a8 <floor>:
 80220a8:	ec51 0b10 	vmov	r0, r1, d0
 80220ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80220b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220b4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80220b8:	2e13      	cmp	r6, #19
 80220ba:	460c      	mov	r4, r1
 80220bc:	4605      	mov	r5, r0
 80220be:	4680      	mov	r8, r0
 80220c0:	dc34      	bgt.n	802212c <floor+0x84>
 80220c2:	2e00      	cmp	r6, #0
 80220c4:	da17      	bge.n	80220f6 <floor+0x4e>
 80220c6:	a332      	add	r3, pc, #200	@ (adr r3, 8022190 <floor+0xe8>)
 80220c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220cc:	f7de f8ee 	bl	80002ac <__adddf3>
 80220d0:	2200      	movs	r2, #0
 80220d2:	2300      	movs	r3, #0
 80220d4:	f7de fd30 	bl	8000b38 <__aeabi_dcmpgt>
 80220d8:	b150      	cbz	r0, 80220f0 <floor+0x48>
 80220da:	2c00      	cmp	r4, #0
 80220dc:	da55      	bge.n	802218a <floor+0xe2>
 80220de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80220e2:	432c      	orrs	r4, r5
 80220e4:	2500      	movs	r5, #0
 80220e6:	42ac      	cmp	r4, r5
 80220e8:	4c2b      	ldr	r4, [pc, #172]	@ (8022198 <floor+0xf0>)
 80220ea:	bf08      	it	eq
 80220ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80220f0:	4621      	mov	r1, r4
 80220f2:	4628      	mov	r0, r5
 80220f4:	e023      	b.n	802213e <floor+0x96>
 80220f6:	4f29      	ldr	r7, [pc, #164]	@ (802219c <floor+0xf4>)
 80220f8:	4137      	asrs	r7, r6
 80220fa:	ea01 0307 	and.w	r3, r1, r7
 80220fe:	4303      	orrs	r3, r0
 8022100:	d01d      	beq.n	802213e <floor+0x96>
 8022102:	a323      	add	r3, pc, #140	@ (adr r3, 8022190 <floor+0xe8>)
 8022104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022108:	f7de f8d0 	bl	80002ac <__adddf3>
 802210c:	2200      	movs	r2, #0
 802210e:	2300      	movs	r3, #0
 8022110:	f7de fd12 	bl	8000b38 <__aeabi_dcmpgt>
 8022114:	2800      	cmp	r0, #0
 8022116:	d0eb      	beq.n	80220f0 <floor+0x48>
 8022118:	2c00      	cmp	r4, #0
 802211a:	bfbe      	ittt	lt
 802211c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8022120:	4133      	asrlt	r3, r6
 8022122:	18e4      	addlt	r4, r4, r3
 8022124:	ea24 0407 	bic.w	r4, r4, r7
 8022128:	2500      	movs	r5, #0
 802212a:	e7e1      	b.n	80220f0 <floor+0x48>
 802212c:	2e33      	cmp	r6, #51	@ 0x33
 802212e:	dd0a      	ble.n	8022146 <floor+0x9e>
 8022130:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022134:	d103      	bne.n	802213e <floor+0x96>
 8022136:	4602      	mov	r2, r0
 8022138:	460b      	mov	r3, r1
 802213a:	f7de f8b7 	bl	80002ac <__adddf3>
 802213e:	ec41 0b10 	vmov	d0, r0, r1
 8022142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022146:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 802214a:	f04f 37ff 	mov.w	r7, #4294967295
 802214e:	40df      	lsrs	r7, r3
 8022150:	4207      	tst	r7, r0
 8022152:	d0f4      	beq.n	802213e <floor+0x96>
 8022154:	a30e      	add	r3, pc, #56	@ (adr r3, 8022190 <floor+0xe8>)
 8022156:	e9d3 2300 	ldrd	r2, r3, [r3]
 802215a:	f7de f8a7 	bl	80002ac <__adddf3>
 802215e:	2200      	movs	r2, #0
 8022160:	2300      	movs	r3, #0
 8022162:	f7de fce9 	bl	8000b38 <__aeabi_dcmpgt>
 8022166:	2800      	cmp	r0, #0
 8022168:	d0c2      	beq.n	80220f0 <floor+0x48>
 802216a:	2c00      	cmp	r4, #0
 802216c:	da0a      	bge.n	8022184 <floor+0xdc>
 802216e:	2e14      	cmp	r6, #20
 8022170:	d101      	bne.n	8022176 <floor+0xce>
 8022172:	3401      	adds	r4, #1
 8022174:	e006      	b.n	8022184 <floor+0xdc>
 8022176:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802217a:	2301      	movs	r3, #1
 802217c:	40b3      	lsls	r3, r6
 802217e:	441d      	add	r5, r3
 8022180:	4545      	cmp	r5, r8
 8022182:	d3f6      	bcc.n	8022172 <floor+0xca>
 8022184:	ea25 0507 	bic.w	r5, r5, r7
 8022188:	e7b2      	b.n	80220f0 <floor+0x48>
 802218a:	2500      	movs	r5, #0
 802218c:	462c      	mov	r4, r5
 802218e:	e7af      	b.n	80220f0 <floor+0x48>
 8022190:	8800759c 	.word	0x8800759c
 8022194:	7e37e43c 	.word	0x7e37e43c
 8022198:	bff00000 	.word	0xbff00000
 802219c:	000fffff 	.word	0x000fffff

080221a0 <rint>:
 80221a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221a2:	ec53 2b10 	vmov	r2, r3, d0
 80221a6:	f3c3 500a 	ubfx	r0, r3, #20, #11
 80221aa:	f2a0 35ff 	subw	r5, r0, #1023	@ 0x3ff
 80221ae:	2d13      	cmp	r5, #19
 80221b0:	461c      	mov	r4, r3
 80221b2:	4611      	mov	r1, r2
 80221b4:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 80221b8:	dc5b      	bgt.n	8022272 <rint+0xd2>
 80221ba:	2d00      	cmp	r5, #0
 80221bc:	da2f      	bge.n	802221e <rint+0x7e>
 80221be:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80221c2:	4310      	orrs	r0, r2
 80221c4:	d027      	beq.n	8022216 <rint+0x76>
 80221c6:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80221ca:	4315      	orrs	r5, r2
 80221cc:	426b      	negs	r3, r5
 80221ce:	432b      	orrs	r3, r5
 80221d0:	4610      	mov	r0, r2
 80221d2:	0b1b      	lsrs	r3, r3, #12
 80221d4:	0c62      	lsrs	r2, r4, #17
 80221d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80221da:	0452      	lsls	r2, r2, #17
 80221dc:	ea43 0102 	orr.w	r1, r3, r2
 80221e0:	460b      	mov	r3, r1
 80221e2:	4933      	ldr	r1, [pc, #204]	@ (80222b0 <rint+0x110>)
 80221e4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80221e8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80221ec:	4602      	mov	r2, r0
 80221ee:	4639      	mov	r1, r7
 80221f0:	4630      	mov	r0, r6
 80221f2:	f7de f85b 	bl	80002ac <__adddf3>
 80221f6:	e9cd 0100 	strd	r0, r1, [sp]
 80221fa:	463b      	mov	r3, r7
 80221fc:	4632      	mov	r2, r6
 80221fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022202:	f7de f851 	bl	80002a8 <__aeabi_dsub>
 8022206:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 802220a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802220e:	ea44 0703 	orr.w	r7, r4, r3
 8022212:	4602      	mov	r2, r0
 8022214:	463b      	mov	r3, r7
 8022216:	ec43 2b10 	vmov	d0, r2, r3
 802221a:	b003      	add	sp, #12
 802221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802221e:	4825      	ldr	r0, [pc, #148]	@ (80222b4 <rint+0x114>)
 8022220:	4128      	asrs	r0, r5
 8022222:	ea00 0703 	and.w	r7, r0, r3
 8022226:	4317      	orrs	r7, r2
 8022228:	d0f5      	beq.n	8022216 <rint+0x76>
 802222a:	0843      	lsrs	r3, r0, #1
 802222c:	ea04 0050 	and.w	r0, r4, r0, lsr #1
 8022230:	4301      	orrs	r1, r0
 8022232:	d00a      	beq.n	802224a <rint+0xaa>
 8022234:	f1a5 0213 	sub.w	r2, r5, #19
 8022238:	ea24 0303 	bic.w	r3, r4, r3
 802223c:	4251      	negs	r1, r2
 802223e:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 8022242:	4151      	adcs	r1, r2
 8022244:	412c      	asrs	r4, r5
 8022246:	07c9      	lsls	r1, r1, #31
 8022248:	431c      	orrs	r4, r3
 802224a:	460a      	mov	r2, r1
 802224c:	4918      	ldr	r1, [pc, #96]	@ (80222b0 <rint+0x110>)
 802224e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8022252:	4623      	mov	r3, r4
 8022254:	e9d1 4500 	ldrd	r4, r5, [r1]
 8022258:	4620      	mov	r0, r4
 802225a:	4629      	mov	r1, r5
 802225c:	f7de f826 	bl	80002ac <__adddf3>
 8022260:	e9cd 0100 	strd	r0, r1, [sp]
 8022264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022268:	4622      	mov	r2, r4
 802226a:	462b      	mov	r3, r5
 802226c:	f7de f81c 	bl	80002a8 <__aeabi_dsub>
 8022270:	e008      	b.n	8022284 <rint+0xe4>
 8022272:	2d33      	cmp	r5, #51	@ 0x33
 8022274:	dd09      	ble.n	802228a <rint+0xea>
 8022276:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 802227a:	d1cc      	bne.n	8022216 <rint+0x76>
 802227c:	4610      	mov	r0, r2
 802227e:	4619      	mov	r1, r3
 8022280:	f7de f814 	bl	80002ac <__adddf3>
 8022284:	4602      	mov	r2, r0
 8022286:	460b      	mov	r3, r1
 8022288:	e7c5      	b.n	8022216 <rint+0x76>
 802228a:	f2a0 4513 	subw	r5, r0, #1043	@ 0x413
 802228e:	f04f 30ff 	mov.w	r0, #4294967295
 8022292:	40e8      	lsrs	r0, r5
 8022294:	4202      	tst	r2, r0
 8022296:	d0be      	beq.n	8022216 <rint+0x76>
 8022298:	0843      	lsrs	r3, r0, #1
 802229a:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
 802229e:	bf1f      	itttt	ne
 80222a0:	ea21 0303 	bicne.w	r3, r1, r3
 80222a4:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 80222a8:	4129      	asrne	r1, r5
 80222aa:	4319      	orrne	r1, r3
 80222ac:	e7cd      	b.n	802224a <rint+0xaa>
 80222ae:	bf00      	nop
 80222b0:	080232b0 	.word	0x080232b0
 80222b4:	000fffff 	.word	0x000fffff

080222b8 <_init>:
 80222b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222ba:	bf00      	nop
 80222bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222be:	bc08      	pop	{r3}
 80222c0:	469e      	mov	lr, r3
 80222c2:	4770      	bx	lr

080222c4 <_fini>:
 80222c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80222c6:	bf00      	nop
 80222c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80222ca:	bc08      	pop	{r3}
 80222cc:	469e      	mov	lr, r3
 80222ce:	4770      	bx	lr
