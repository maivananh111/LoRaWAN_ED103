
LoRaWANNode_L431CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024400  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001390  08024590  08024590  00025590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025920  08025920  000275a0  2**0
                  CONTENTS
  4 .ARM          00000008  08025920  08025920  00026920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025928  08025928  000275a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025928  08025928  00026928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802592c  0802592c  0002692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005a0  20000000  08025930  00027000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007bac  200005a0  08025ed0  000275a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000814c  08025ed0  0002814c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000275a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044c58  00000000  00000000  000275d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009712  00000000  00000000  0006c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003270  00000000  00000000  00075940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002713  00000000  00000000  00078bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fd22  00000000  00000000  0007b2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00043917  00000000  00000000  0008afe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a935  00000000  00000000  000ce8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d9231  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e5ac  00000000  00000000  001d9274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001e7820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005a0 	.word	0x200005a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08024578 	.word	0x08024578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005a4 	.word	0x200005a4
 80001cc:	08024578 	.word	0x08024578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f824 	bl	8000c54 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fce9 	bl	80005f8 <__aeabi_dmul>
 8000c26:	f7ff ffbf 	bl	8000ba8 <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc6a 	bl	8000504 <__aeabi_ui2d>
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <__aeabi_d2ulz+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f7ff fce0 	bl	80005f8 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb22 	bl	8000288 <__aeabi_dsub>
 8000c44:	f7ff ffb0 	bl	8000ba8 <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9d08      	ldr	r5, [sp, #32]
 8000c5a:	460c      	mov	r4, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14e      	bne.n	8000cfe <__udivmoddi4+0xaa>
 8000c60:	4694      	mov	ip, r2
 8000c62:	458c      	cmp	ip, r1
 8000c64:	4686      	mov	lr, r0
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	d962      	bls.n	8000d32 <__udivmoddi4+0xde>
 8000c6c:	b14a      	cbz	r2, 8000c82 <__udivmoddi4+0x2e>
 8000c6e:	f1c2 0320 	rsb	r3, r2, #32
 8000c72:	4091      	lsls	r1, r2
 8000c74:	fa20 f303 	lsr.w	r3, r0, r3
 8000c78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f f68c 	uxth.w	r6, ip
 8000c8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c92:	fb07 1114 	mls	r1, r7, r4, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb04 f106 	mul.w	r1, r4, r6
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x64>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000caa:	f080 8112 	bcs.w	8000ed2 <__udivmoddi4+0x27e>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 810f 	bls.w	8000ed2 <__udivmoddi4+0x27e>
 8000cb4:	3c02      	subs	r4, #2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb00 f606 	mul.w	r6, r0, r6
 8000cce:	429e      	cmp	r6, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x94>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cda:	f080 80fc 	bcs.w	8000ed6 <__udivmoddi4+0x282>
 8000cde:	429e      	cmp	r6, r3
 8000ce0:	f240 80f9 	bls.w	8000ed6 <__udivmoddi4+0x282>
 8000ce4:	4463      	add	r3, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	1b9b      	subs	r3, r3, r6
 8000cea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa6>
 8000cf2:	40d3      	lsrs	r3, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xba>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb4>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x150>
 8000d16:	42a3      	cmp	r3, r4
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xcc>
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	f0c0 80f0 	bcc.w	8000f00 <__udivmoddi4+0x2ac>
 8000d20:	1a86      	subs	r6, r0, r2
 8000d22:	eb64 0303 	sbc.w	r3, r4, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d0e6      	beq.n	8000cfa <__udivmoddi4+0xa6>
 8000d2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d30:	e7e3      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x204>
 8000d38:	eba1 040c 	sub.w	r4, r1, ip
 8000d3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	2101      	movs	r1, #1
 8000d46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb07 f006 	mul.w	r0, r7, r6
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x11c>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x11a>
 8000d68:	4298      	cmp	r0, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2b4>
 8000d6e:	4626      	mov	r6, r4
 8000d70:	1a1c      	subs	r4, r3, r0
 8000d72:	fa1f f38e 	uxth.w	r3, lr
 8000d76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d82:	fb00 f707 	mul.w	r7, r0, r7
 8000d86:	429f      	cmp	r7, r3
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x148>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x146>
 8000d94:	429f      	cmp	r7, r3
 8000d96:	f200 80b0 	bhi.w	8000efa <__udivmoddi4+0x2a6>
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	1bdb      	subs	r3, r3, r7
 8000d9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x9c>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db4:	fa04 f301 	lsl.w	r3, r4, r1
 8000db8:	ea43 030c 	orr.w	r3, r3, ip
 8000dbc:	40f4      	lsrs	r4, r6
 8000dbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc2:	0c38      	lsrs	r0, r7, #16
 8000dc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dcc:	fa1f fc87 	uxth.w	ip, r7
 8000dd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ddc:	45a1      	cmp	r9, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x1a6>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dea:	f080 8084 	bcs.w	8000ef6 <__udivmoddi4+0x2a2>
 8000dee:	45a1      	cmp	r9, r4
 8000df0:	f240 8081 	bls.w	8000ef6 <__udivmoddi4+0x2a2>
 8000df4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	eba4 0409 	sub.w	r4, r4, r9
 8000dfe:	fa1f f983 	uxth.w	r9, r3
 8000e02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e06:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x1d2>
 8000e16:	193c      	adds	r4, r7, r4
 8000e18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e1c:	d267      	bcs.n	8000eee <__udivmoddi4+0x29a>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d965      	bls.n	8000eee <__udivmoddi4+0x29a>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2e:	eba4 040c 	sub.w	r4, r4, ip
 8000e32:	429c      	cmp	r4, r3
 8000e34:	46ce      	mov	lr, r9
 8000e36:	469c      	mov	ip, r3
 8000e38:	d351      	bcc.n	8000ede <__udivmoddi4+0x28a>
 8000e3a:	d04e      	beq.n	8000eda <__udivmoddi4+0x286>
 8000e3c:	b155      	cbz	r5, 8000e54 <__udivmoddi4+0x200>
 8000e3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e42:	eb64 040c 	sbc.w	r4, r4, ip
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	40cb      	lsrs	r3, r1
 8000e4c:	431e      	orrs	r6, r3
 8000e4e:	40cc      	lsrs	r4, r1
 8000e50:	e9c5 6400 	strd	r6, r4, [r5]
 8000e54:	2100      	movs	r1, #0
 8000e56:	e750      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa24 f303 	lsr.w	r3, r4, r3
 8000e68:	4094      	lsls	r4, r2
 8000e6a:	430c      	orrs	r4, r1
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e74:	fa1f f78c 	uxth.w	r7, ip
 8000e78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e80:	0c23      	lsrs	r3, r4, #16
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb00 f107 	mul.w	r1, r0, r7
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x24c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e96:	d22c      	bcs.n	8000ef2 <__udivmoddi4+0x29e>
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	d92a      	bls.n	8000ef2 <__udivmoddi4+0x29e>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea8:	fb08 3311 	mls	r3, r8, r1, r3
 8000eac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb0:	fb01 f307 	mul.w	r3, r1, r7
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x276>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ec0:	d213      	bcs.n	8000eea <__udivmoddi4+0x296>
 8000ec2:	42a3      	cmp	r3, r4
 8000ec4:	d911      	bls.n	8000eea <__udivmoddi4+0x296>
 8000ec6:	3902      	subs	r1, #2
 8000ec8:	4464      	add	r4, ip
 8000eca:	1ae4      	subs	r4, r4, r3
 8000ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed0:	e739      	b.n	8000d46 <__udivmoddi4+0xf2>
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	e6f0      	b.n	8000cb8 <__udivmoddi4+0x64>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e706      	b.n	8000ce8 <__udivmoddi4+0x94>
 8000eda:	45c8      	cmp	r8, r9
 8000edc:	d2ae      	bcs.n	8000e3c <__udivmoddi4+0x1e8>
 8000ede:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7a8      	b.n	8000e3c <__udivmoddi4+0x1e8>
 8000eea:	4631      	mov	r1, r6
 8000eec:	e7ed      	b.n	8000eca <__udivmoddi4+0x276>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	e799      	b.n	8000e26 <__udivmoddi4+0x1d2>
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	e7d4      	b.n	8000ea0 <__udivmoddi4+0x24c>
 8000ef6:	46d6      	mov	lr, sl
 8000ef8:	e77f      	b.n	8000dfa <__udivmoddi4+0x1a6>
 8000efa:	4463      	add	r3, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e74d      	b.n	8000d9c <__udivmoddi4+0x148>
 8000f00:	4606      	mov	r6, r0
 8000f02:	4623      	mov	r3, r4
 8000f04:	4608      	mov	r0, r1
 8000f06:	e70f      	b.n	8000d28 <__udivmoddi4+0xd4>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	e730      	b.n	8000d70 <__udivmoddi4+0x11c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <app_main>:
		LORAWAN_DUTYCYCLE_OFF };
static lmh_callback_t lora_callbacks = { BoardGetBatteryLevel, BoardGetUniqueId,
		BoardGetRandomSeed, lorawan_rx_handler, lorawan_has_joined_handler,
		lorawan_confirm_class_handler, lorawan_join_failed_handler };

void app_main(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
	MX_SPI1_Init();
 8000f1a:	f000 fc49 	bl	80017b0 <MX_SPI1_Init>
	MX_LPTIM1_Init();
 8000f1e:	f000 fb4f 	bl	80015c0 <MX_LPTIM1_Init>

	Radio_HardWare_Init();
 8000f22:	f01e fd33 	bl	801f98c <Radio_HardWare_Init>

	timers_init();
 8000f26:	f000 f993 	bl	8001250 <timers_init>

	lmh_setDevEui(nodeDeviceEUI);
 8000f2a:	481b      	ldr	r0, [pc, #108]	@ (8000f98 <app_main+0x84>)
 8000f2c:	f00e f8d0 	bl	800f0d0 <lmh_setDevEui>
	lmh_setAppEui(nodeAppEUI);
 8000f30:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <app_main+0x88>)
 8000f32:	f00e f8df 	bl	800f0f4 <lmh_setAppEui>
	lmh_setAppKey(nodeAppKey);
 8000f36:	481a      	ldr	r0, [pc, #104]	@ (8000fa0 <app_main+0x8c>)
 8000f38:	f00e f8ee 	bl	800f118 <lmh_setAppKey>
//	lmh_setAppSKey(nodeAppsKey);
//	lmh_setDevAddr(nodeDevAddr);



	uint32_t err_code = lmh_init(&lora_callbacks, lora_param_init, true, CLASS_A, LORAMAC_REGION_AS923_2, false);
 8000f3c:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <app_main+0x90>)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2309      	movs	r3, #9
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	ca06      	ldmia	r2, {r1, r2}
 8000f4e:	4816      	ldr	r0, [pc, #88]	@ (8000fa8 <app_main+0x94>)
 8000f50:	f00e fd12 	bl	800f978 <lmh_init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	607b      	str	r3, [r7, #4]
	if (err_code != 0)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <app_main+0x58>
		LOG_ERROR(TAG, "lmh_init failed - %d\n", err_code);
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <app_main+0x98>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4912      	ldr	r1, [pc, #72]	@ (8000fb0 <app_main+0x9c>)
 8000f66:	4618      	mov	r0, r3
 8000f68:	f01f fece 	bl	8020d08 <LOG_ERROR>
	if (!lmh_setSubBandChannels(1))
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f00e f8e7 	bl	800f140 <lmh_setSubBandChannels>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <app_main+0x76>
		LOG_ERROR(TAG, "lmh_setSubBandChannels failed. Wrong sub band requested?");
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <app_main+0x98>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	490c      	ldr	r1, [pc, #48]	@ (8000fb4 <app_main+0xa0>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	f01f febf 	bl	8020d08 <LOG_ERROR>

	lmh_join();
 8000f8a:	f00e ff8d 	bl	800fea8 <lmh_join>

	while (1) {
		vTaskDelay(1000);
 8000f8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f92:	f007 fc15 	bl	80087c0 <vTaskDelay>
 8000f96:	e7fa      	b.n	8000f8e <app_main+0x7a>
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	20000014 	.word	0x20000014
 8000fa4:	20000030 	.word	0x20000030
 8000fa8:	20000038 	.word	0x20000038
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	08024598 	.word	0x08024598
 8000fb4:	080245b0 	.word	0x080245b0

08000fb8 <lorawan_join_failed_handler>:
	}
}

static void lorawan_join_failed_handler(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LOG_ERROR(TAG, "OVER_THE_AIR_ACTIVATION failed!");
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <lorawan_join_failed_handler+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4903      	ldr	r1, [pc, #12]	@ (8000fd0 <lorawan_join_failed_handler+0x18>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f01f fea0 	bl	8020d08 <LOG_ERROR>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	080245ec 	.word	0x080245ec

08000fd4 <lorawan_has_joined_handler>:

static void lorawan_has_joined_handler(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	LOG_INFO(TAG, "OVER_THE_AIR_ACTIVATION OKE, JOINED");
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <lorawan_has_joined_handler+0x30>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	490a      	ldr	r1, [pc, #40]	@ (8001008 <lorawan_has_joined_handler+0x34>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f01f fe46 	bl	8020c70 <LOG_INFO>
	lmh_class_request(CLASS_A);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f00f f849 	bl	801007c <lmh_class_request>

	TimerSetValue(&appTimer, LORAWAN_APP_TX_DUTYCYCLE);
 8000fea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <lorawan_has_joined_handler+0x38>)
 8000ff4:	f020 f800 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&appTimer);
 8000ff8:	4804      	ldr	r0, [pc, #16]	@ (800100c <lorawan_has_joined_handler+0x38>)
 8000ffa:	f01f ff19 	bl	8020e30 <util_timer_start>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000000 	.word	0x20000000
 8001008:	0802460c 	.word	0x0802460c
 800100c:	200005c0 	.word	0x200005c0

08001010 <lorawan_rx_handler>:

static void lorawan_rx_handler(lmh_app_data_t *app_data) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b085      	sub	sp, #20
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
	LOG_INFO(TAG, "LoRa Packet received on port %d, size:%d, rssi:%d, snr:%d\n",
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <lorawan_rx_handler+0x8c>)
 800101a:	6818      	ldr	r0, [r3, #0]
			app_data->port, app_data->buffsize, app_data->rssi, app_data->snr);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	795b      	ldrb	r3, [r3, #5]
	LOG_INFO(TAG, "LoRa Packet received on port %d, size:%d, rssi:%d, snr:%d\n",
 8001020:	4619      	mov	r1, r3
			app_data->port, app_data->buffsize, app_data->rssi, app_data->snr);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	791b      	ldrb	r3, [r3, #4]
	LOG_INFO(TAG, "LoRa Packet received on port %d, size:%d, rssi:%d, snr:%d\n",
 8001026:	461c      	mov	r4, r3
			app_data->port, app_data->buffsize, app_data->rssi, app_data->snr);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	LOG_INFO(TAG, "LoRa Packet received on port %d, size:%d, rssi:%d, snr:%d\n",
 800102e:	461a      	mov	r2, r3
			app_data->port, app_data->buffsize, app_data->rssi, app_data->snr);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a1b      	ldrb	r3, [r3, #8]
	LOG_INFO(TAG, "LoRa Packet received on port %d, size:%d, rssi:%d, snr:%d\n",
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	9200      	str	r2, [sp, #0]
 8001038:	4623      	mov	r3, r4
 800103a:	460a      	mov	r2, r1
 800103c:	4918      	ldr	r1, [pc, #96]	@ (80010a0 <lorawan_rx_handler+0x90>)
 800103e:	f01f fe17 	bl	8020c70 <LOG_INFO>

	switch (app_data->port) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	795b      	ldrb	r3, [r3, #5]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d01f      	beq.n	800108a <lorawan_rx_handler+0x7a>
 800104a:	2b03      	cmp	r3, #3
 800104c:	d11f      	bne.n	800108e <lorawan_rx_handler+0x7e>
		case 3:
			// Port 3 switches the class
			if (app_data->buffsize == 1) {
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d11d      	bne.n	8001092 <lorawan_rx_handler+0x82>
				switch (app_data->buffer[0]) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d00e      	beq.n	800107e <lorawan_rx_handler+0x6e>
 8001060:	2b02      	cmp	r3, #2
 8001062:	dc10      	bgt.n	8001086 <lorawan_rx_handler+0x76>
 8001064:	2b00      	cmp	r3, #0
 8001066:	d002      	beq.n	800106e <lorawan_rx_handler+0x5e>
 8001068:	2b01      	cmp	r3, #1
 800106a:	d004      	beq.n	8001076 <lorawan_rx_handler+0x66>
					case 2:
						lmh_class_request(CLASS_C);
					break;

					default:
					break;
 800106c:	e00b      	b.n	8001086 <lorawan_rx_handler+0x76>
						lmh_class_request(CLASS_A);
 800106e:	2000      	movs	r0, #0
 8001070:	f00f f804 	bl	801007c <lmh_class_request>
					break;
 8001074:	e008      	b.n	8001088 <lorawan_rx_handler+0x78>
						lmh_class_request(CLASS_B);
 8001076:	2001      	movs	r0, #1
 8001078:	f00f f800 	bl	801007c <lmh_class_request>
					break;
 800107c:	e004      	b.n	8001088 <lorawan_rx_handler+0x78>
						lmh_class_request(CLASS_C);
 800107e:	2002      	movs	r0, #2
 8001080:	f00e fffc 	bl	801007c <lmh_class_request>
					break;
 8001084:	e000      	b.n	8001088 <lorawan_rx_handler+0x78>
					break;
 8001086:	bf00      	nop
				}
			}
		break;
 8001088:	e003      	b.n	8001092 <lorawan_rx_handler+0x82>

		case LORAWAN_APP_PORT:
			// YOUR_JOB: Take action on received data
		break;
 800108a:	bf00      	nop
 800108c:	e002      	b.n	8001094 <lorawan_rx_handler+0x84>

		default:
		break;
 800108e:	bf00      	nop
 8001090:	e000      	b.n	8001094 <lorawan_rx_handler+0x84>
		break;
 8001092:	bf00      	nop
	}
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	08024630 	.word	0x08024630

080010a4 <lorawan_confirm_class_handler>:

static void lorawan_confirm_class_handler(DeviceClass_t Class) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	LOG_INFO(TAG, "switch to class %c done\n", "ABC"[Class]);
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <lorawan_confirm_class_handler+0x38>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <lorawan_confirm_class_handler+0x3c>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	461a      	mov	r2, r3
 80010ba:	490a      	ldr	r1, [pc, #40]	@ (80010e4 <lorawan_confirm_class_handler+0x40>)
 80010bc:	f01f fdd8 	bl	8020c70 <LOG_INFO>

	m_lora_app_data.buffsize = 0;
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <lorawan_confirm_class_handler+0x44>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	711a      	strb	r2, [r3, #4]
	m_lora_app_data.port = LORAWAN_APP_PORT;
 80010c6:	4b08      	ldr	r3, [pc, #32]	@ (80010e8 <lorawan_confirm_class_handler+0x44>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	715a      	strb	r2, [r3, #5]
	lmh_send(&m_lora_app_data, LMH_UNCONFIRMED_MSG);
 80010cc:	2100      	movs	r1, #0
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <lorawan_confirm_class_handler+0x44>)
 80010d0:	f00e ff62 	bl	800ff98 <lmh_send>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	08024688 	.word	0x08024688
 80010e4:	0802466c 	.word	0x0802466c
 80010e8:	20000024 	.word	0x20000024

080010ec <send_lora_frame>:

static void send_lora_frame(void) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	if (lmh_join_status_get() != LMH_SET) {
 80010f2:	f00e ff43 	bl	800ff7c <lmh_join_status_get>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d006      	beq.n	800110a <send_lora_frame+0x1e>
		//Not joined, try again later
		LOG_ERROR(TAG, "Did not join network, skip sending frame");
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <send_lora_frame+0x114>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4940      	ldr	r1, [pc, #256]	@ (8001204 <send_lora_frame+0x118>)
 8001102:	4618      	mov	r0, r3
 8001104:	f01f fe00 	bl	8020d08 <LOG_ERROR>
		return;
 8001108:	e076      	b.n	80011f8 <send_lora_frame+0x10c>
	}

	uint32_t i = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
	m_lora_app_data.port = LORAWAN_APP_PORT;
 800110e:	4b3e      	ldr	r3, [pc, #248]	@ (8001208 <send_lora_frame+0x11c>)
 8001110:	2202      	movs	r2, #2
 8001112:	715a      	strb	r2, [r3, #5]
	m_lora_app_data.buffer[i++] = 'H';
 8001114:	4b3c      	ldr	r3, [pc, #240]	@ (8001208 <send_lora_frame+0x11c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	1c59      	adds	r1, r3, #1
 800111c:	6079      	str	r1, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	2248      	movs	r2, #72	@ 0x48
 8001122:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'e';
 8001124:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <send_lora_frame+0x11c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	1c59      	adds	r1, r3, #1
 800112c:	6079      	str	r1, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	2265      	movs	r2, #101	@ 0x65
 8001132:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'l';
 8001134:	4b34      	ldr	r3, [pc, #208]	@ (8001208 <send_lora_frame+0x11c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	1c59      	adds	r1, r3, #1
 800113c:	6079      	str	r1, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	226c      	movs	r2, #108	@ 0x6c
 8001142:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'l';
 8001144:	4b30      	ldr	r3, [pc, #192]	@ (8001208 <send_lora_frame+0x11c>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	6079      	str	r1, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	226c      	movs	r2, #108	@ 0x6c
 8001152:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'o';
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <send_lora_frame+0x11c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	1c59      	adds	r1, r3, #1
 800115c:	6079      	str	r1, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	226f      	movs	r2, #111	@ 0x6f
 8001162:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = ' ';
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <send_lora_frame+0x11c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1c59      	adds	r1, r3, #1
 800116c:	6079      	str	r1, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	2220      	movs	r2, #32
 8001172:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'w';
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <send_lora_frame+0x11c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1c59      	adds	r1, r3, #1
 800117c:	6079      	str	r1, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	2277      	movs	r2, #119	@ 0x77
 8001182:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'o';
 8001184:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <send_lora_frame+0x11c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6079      	str	r1, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	226f      	movs	r2, #111	@ 0x6f
 8001192:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'r';
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <send_lora_frame+0x11c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	6079      	str	r1, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	2272      	movs	r2, #114	@ 0x72
 80011a2:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'l';
 80011a4:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <send_lora_frame+0x11c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	1c59      	adds	r1, r3, #1
 80011ac:	6079      	str	r1, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	226c      	movs	r2, #108	@ 0x6c
 80011b2:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = 'd';
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <send_lora_frame+0x11c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	1c59      	adds	r1, r3, #1
 80011bc:	6079      	str	r1, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	2264      	movs	r2, #100	@ 0x64
 80011c2:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffer[i++] = '!';
 80011c4:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <send_lora_frame+0x11c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1c59      	adds	r1, r3, #1
 80011cc:	6079      	str	r1, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	2221      	movs	r2, #33	@ 0x21
 80011d2:	701a      	strb	r2, [r3, #0]
	m_lora_app_data.buffsize = i;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <send_lora_frame+0x11c>)
 80011da:	711a      	strb	r2, [r3, #4]

	lmh_error_status error = lmh_send(&m_lora_app_data, LMH_UNCONFIRMED_MSG);
 80011dc:	2100      	movs	r1, #0
 80011de:	480a      	ldr	r0, [pc, #40]	@ (8001208 <send_lora_frame+0x11c>)
 80011e0:	f00e feda 	bl	800ff98 <lmh_send>
 80011e4:	4603      	mov	r3, r0
 80011e6:	70fb      	strb	r3, [r7, #3]
	LOG_INFO(TAG, "lmh_send result %d\n", error);
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <send_lora_frame+0x114>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80011f0:	4906      	ldr	r1, [pc, #24]	@ (800120c <send_lora_frame+0x120>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f01f fd3c 	bl	8020c70 <LOG_INFO>
}
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000
 8001204:	0802468c 	.word	0x0802468c
 8001208:	20000024 	.word	0x20000024
 800120c:	080246b8 	.word	0x080246b8

08001210 <tx_lora_periodic_handler>:

static void tx_lora_periodic_handler(void *arg) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	TimerSetValue(&appTimer, LORAWAN_APP_TX_DUTYCYCLE);
 8001218:	f242 7210 	movw	r2, #10000	@ 0x2710
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <tx_lora_periodic_handler+0x34>)
 8001222:	f01f fee9 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&appTimer);
 8001226:	4807      	ldr	r0, [pc, #28]	@ (8001244 <tx_lora_periodic_handler+0x34>)
 8001228:	f01f fe02 	bl	8020e30 <util_timer_start>
	LOG_INFO(TAG, "Sending frame");
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <tx_lora_periodic_handler+0x38>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4906      	ldr	r1, [pc, #24]	@ (800124c <tx_lora_periodic_handler+0x3c>)
 8001232:	4618      	mov	r0, r3
 8001234:	f01f fd1c 	bl	8020c70 <LOG_INFO>
	send_lora_frame();
 8001238:	f7ff ff58 	bl	80010ec <send_lora_frame>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200005c0 	.word	0x200005c0
 8001248:	20000000 	.word	0x20000000
 800124c:	080246cc 	.word	0x080246cc

08001250 <timers_init>:

static uint32_t timers_init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af04      	add	r7, sp, #16
	TimerInit(&appTimer, tx_lora_periodic_handler);
 8001256:	2300      	movs	r3, #0
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <timers_init+0x28>)
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	4804      	ldr	r0, [pc, #16]	@ (800127c <timers_init+0x2c>)
 800126c:	f01f fdaa 	bl	8020dc4 <util_timer_create>
	return 0;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	08001211 	.word	0x08001211
 800127c:	200005c0 	.word	0x200005c0

08001280 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LORA_INT_Pin) {
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2b08      	cmp	r3, #8
 800128e:	d101      	bne.n	8001294 <HAL_GPIO_EXTI_Callback+0x14>
		RadioOnDioIrq();
 8001290:	f01e f9b6 	bl	801f600 <RadioOnDioIrq>
	}
	if (GPIO_Pin == BTN_WAKE_Pin) {
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800129a:	d110      	bne.n	80012be <HAL_GPIO_EXTI_Callback+0x3e>
		for (uint32_t i = 0; i < 120000; i++)
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e003      	b.n	80012aa <HAL_GPIO_EXTI_Callback+0x2a>
			__NOP(); //10ms
 80012a2:	bf00      	nop
		for (uint32_t i = 0; i < 120000; i++)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_GPIO_EXTI_Callback+0x48>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d9f7      	bls.n	80012a2 <HAL_GPIO_EXTI_Callback+0x22>
		if (HAL_GPIO_ReadPin(BTN_WAKE_GPIO_Port, BTN_WAKE_Pin)
 80012b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ba:	f001 f91f 	bl	80024fc <HAL_GPIO_ReadPin>
				== GPIO_PIN_RESET) {

		}
	}
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	0001d4bf 	.word	0x0001d4bf

080012cc <main_task>:


void SystemClock_Config(void);


static void main_task(void *arg){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	extern void app_main(void);
	app_main();
 80012d4:	f7ff fe1e 	bl	8000f14 <app_main>
	vTaskDelete(NULL);
 80012d8:	2000      	movs	r0, #0
 80012da:	f007 f9fd 	bl	80086d8 <vTaskDelete>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <tracelog>:

static void tracelog(char *str){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), 1000);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7fe ffbd 	bl	8000270 <strlen>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <tracelog+0x28>)
 8001302:	f005 f8e1 	bl	80064c8 <HAL_UART_Transmit>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000734 	.word	0x20000734

08001314 <sys_main>:


void sys_main(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af02      	add	r7, sp, #8
	HAL_Init();
 800131a:	f000 fd38 	bl	8001d8e <HAL_Init>
	SystemClock_Config();
 800131e:	f000 f9cb 	bl	80016b8 <SystemClock_Config>
	MX_GPIO_Init();
 8001322:	f000 f863 	bl	80013ec <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001326:	f000 fc81 	bl	8001c2c <MX_USART1_UART_Init>
	log_monitor_init(tracelog);
 800132a:	4810      	ldr	r0, [pc, #64]	@ (800136c <sys_main+0x58>)
 800132c:	f01f fc90 	bl	8020c50 <log_monitor_init>

	LOG_INFO("STARTUP", "App startup.");
 8001330:	490f      	ldr	r1, [pc, #60]	@ (8001370 <sys_main+0x5c>)
 8001332:	4810      	ldr	r0, [pc, #64]	@ (8001374 <sys_main+0x60>)
 8001334:	f01f fc9c 	bl	8020c70 <LOG_INFO>

	osKernelInitialize();
 8001338:	f005 ff56 	bl	80071e8 <osKernelInitialize>
	if(xTaskCreate(main_task, "main_task", 512, NULL, 1, NULL) != pdTRUE)
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2301      	movs	r3, #1
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2300      	movs	r3, #0
 8001346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134a:	490b      	ldr	r1, [pc, #44]	@ (8001378 <sys_main+0x64>)
 800134c:	480b      	ldr	r0, [pc, #44]	@ (800137c <sys_main+0x68>)
 800134e:	f007 f879 	bl	8008444 <xTaskCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	2b01      	cmp	r3, #1
 8001356:	d003      	beq.n	8001360 <sys_main+0x4c>
		LOG_ERROR("STARTUP", "sys_main task startup fail");
 8001358:	4909      	ldr	r1, [pc, #36]	@ (8001380 <sys_main+0x6c>)
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <sys_main+0x60>)
 800135c:	f01f fcd4 	bl	8020d08 <LOG_ERROR>
	osKernelStart();
 8001360:	f005 ff66 	bl	8007230 <osKernelStart>
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	080012e9 	.word	0x080012e9
 8001370:	080246dc 	.word	0x080246dc
 8001374:	080246ec 	.word	0x080246ec
 8001378:	080246f4 	.word	0x080246f4
 800137c:	080012cd 	.word	0x080012cd
 8001380:	08024700 	.word	0x08024700

08001384 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <MX_FREERTOS_Init+0x18>)
 80013be:	2100      	movs	r1, #0
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_FREERTOS_Init+0x1c>)
 80013c2:	f005 ff5b 	bl	800727c <osThreadNew>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a03      	ldr	r2, [pc, #12]	@ (80013d8 <MX_FREERTOS_Init+0x20>)
 80013ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	08024dec 	.word	0x08024dec
 80013d4:	080013dd 	.word	0x080013dd
 80013d8:	20000620 	.word	0x20000620

080013dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013e4:	2001      	movs	r0, #1
 80013e6:	f005 ffdb 	bl	80073a0 <osDelay>
 80013ea:	e7fb      	b.n	80013e4 <StartDefaultTask+0x8>

080013ec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b6b      	ldr	r3, [pc, #428]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a6a      	ldr	r2, [pc, #424]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b68      	ldr	r3, [pc, #416]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	4b65      	ldr	r3, [pc, #404]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a64      	ldr	r2, [pc, #400]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b62      	ldr	r3, [pc, #392]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b5f      	ldr	r3, [pc, #380]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a5e      	ldr	r2, [pc, #376]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b5c      	ldr	r3, [pc, #368]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b59      	ldr	r3, [pc, #356]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a58      	ldr	r2, [pc, #352]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <MX_GPIO_Init+0x1c4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_CS_Pin|LORA_RST_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146c:	f001 f866 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INB_Pin|INA_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8001476:	484f      	ldr	r0, [pc, #316]	@ (80015b4 <MX_GPIO_Init+0x1c8>)
 8001478:	f001 f860 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(P12V_EN_GPIO_Port, P12V_EN_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001486:	f001 f859 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800148a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001490:	2303      	movs	r3, #3
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4846      	ldr	r0, [pc, #280]	@ (80015b8 <MX_GPIO_Init+0x1cc>)
 80014a0:	f000 fde4 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80014a4:	230b      	movs	r3, #11
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a8:	2303      	movs	r3, #3
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4841      	ldr	r0, [pc, #260]	@ (80015bc <MX_GPIO_Init+0x1d0>)
 80014b8:	f000 fdd8 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_15;
 80014bc:	f249 0305 	movw	r3, #36869	@ 0x9005
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d4:	f000 fdca 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 80014d8:	2308      	movs	r3, #8
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f0:	f000 fdbc 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LORA_CS_Pin|LORA_RST_Pin|P12V_EN_Pin;
 80014f4:	f44f 63a2 	mov.w	r3, #1296	@ 0x510
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f000 fdac 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8001514:	f64f 133f 	movw	r3, #63807	@ 0xf93f
 8001518:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151a:	2303      	movs	r3, #3
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4822      	ldr	r0, [pc, #136]	@ (80015b4 <MX_GPIO_Init+0x1c8>)
 800152a:	f000 fd9f 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INB_Pin|INA_Pin;
 800152e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	481b      	ldr	r0, [pc, #108]	@ (80015b4 <MX_GPIO_Init+0x1c8>)
 8001548:	f000 fd90 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 800154c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001564:	f000 fd82 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_WAKE_Pin;
 8001568:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_WAKE_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f000 fd73 	bl	800206c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2105      	movs	r1, #5
 800158a:	2009      	movs	r0, #9
 800158c:	f000 fd2a 	bl	8001fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001590:	2009      	movs	r0, #9
 8001592:	f000 fd53 	bl	800203c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2105      	movs	r1, #5
 800159a:	2028      	movs	r0, #40	@ 0x28
 800159c:	f000 fd22 	bl	8001fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015a0:	2028      	movs	r0, #40	@ 0x28
 80015a2:	f000 fd4b 	bl	800203c <HAL_NVIC_EnableIRQ>

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000400 	.word	0x48000400
 80015b8:	48000800 	.word	0x48000800
 80015bc:	48001c00 	.word	0x48001c00

080015c0 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015c6:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <MX_LPTIM1_Init+0x58>)
 80015c8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 80015d0:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015d2:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80015d6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015de:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80015f2:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	@ (8001614 <MX_LPTIM1_Init+0x54>)
 8001600:	f000 ffe0 	bl	80025c4 <HAL_LPTIM_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 800160a:	f000 f8bf 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000624 	.word	0x20000624
 8001618:	40007c00 	.word	0x40007c00

0800161c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b09a      	sub	sp, #104	@ 0x68
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	225c      	movs	r2, #92	@ 0x5c
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f020 fe0d 	bl	802224c <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a15      	ldr	r2, [pc, #84]	@ (800168c <HAL_LPTIM_MspInit+0x70>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d123      	bne.n	8001684 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800163c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001640:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8001642:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001646:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4618      	mov	r0, r3
 800164e:	f002 fda5 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8001658:	f000 f898 	bl	800178c <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <HAL_LPTIM_MspInit+0x74>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <HAL_LPTIM_MspInit+0x74>)
 8001662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001666:	6593      	str	r3, [r2, #88]	@ 0x58
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_LPTIM_MspInit+0x74>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2105      	movs	r1, #5
 8001678:	2041      	movs	r0, #65	@ 0x41
 800167a:	f000 fcb3 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800167e:	2041      	movs	r0, #65	@ 0x41
 8001680:	f000 fcdc 	bl	800203c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001684:	bf00      	nop
 8001686:	3768      	adds	r7, #104	@ 0x68
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40007c00 	.word	0x40007c00
 8001690:	40021000 	.word	0x40021000

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001698:	f000 fb79 	bl	8001d8e <HAL_Init>

  /* USER CODE BEGIN Init */
  extern void sys_main(void);
  sys_main();
 800169c:	f7ff fe3a 	bl	8001314 <sys_main>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f80a 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f7ff fea2 	bl	80013ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016a8:	f005 fd9e 	bl	80071e8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80016ac:	f7ff fe84 	bl	80013b8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80016b0:	f005 fdbe 	bl	8007230 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <main+0x20>

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b096      	sub	sp, #88	@ 0x58
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2244      	movs	r2, #68	@ 0x44
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f020 fdc0 	bl	802224c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016de:	f001 fcab 	bl	8003038 <HAL_PWREx_ControlVoltageScaling>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016e8:	f000 f850 	bl	800178c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016ec:	f001 fc86 	bl	8002ffc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <SystemClock_Config+0xac>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001764 <SystemClock_Config+0xac>)
 80016f8:	f023 0318 	bic.w	r3, r3, #24
 80016fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001700:	231c      	movs	r3, #28
 8001702:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001704:	2301      	movs	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001708:	2301      	movs	r3, #1
 800170a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800170c:	2301      	movs	r3, #1
 800170e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001714:	23b0      	movs	r3, #176	@ 0xb0
 8001716:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001718:	2300      	movs	r3, #0
 800171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fceb 	bl	80030fc <HAL_RCC_OscConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800172c:	f000 f82e 	bl	800178c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001730:	230f      	movs	r3, #15
 8001732:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001744:	463b      	mov	r3, r7
 8001746:	2102      	movs	r1, #2
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fa21 	bl	8003b90 <HAL_RCC_ClockConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001754:	f000 f81a 	bl	800178c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001758:	f003 f890 	bl	800487c <HAL_RCCEx_EnableMSIPLLMode>
}
 800175c:	bf00      	nop
 800175e:	3758      	adds	r7, #88	@ 0x58
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000

08001768 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800177a:	f000 fb21 	bl	8001dc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40012c00 	.word	0x40012c00

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <Error_Handler+0x8>

08001798 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001828 <MX_SPI1_Init+0x78>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80017ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d6:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017e6:	2208      	movs	r2, #8
 80017e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <MX_SPI1_Init+0x74>)
 80017fe:	2207      	movs	r2, #7
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <MX_SPI1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <MX_SPI1_Init+0x74>)
 800180a:	2208      	movs	r2, #8
 800180c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180e:	4805      	ldr	r0, [pc, #20]	@ (8001824 <MX_SPI1_Init+0x74>)
 8001810:	f003 fa1e 	bl	8004c50 <HAL_SPI_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800181a:	f7ff ffb7 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000680 	.word	0x20000680
 8001828:	40013000 	.word	0x40013000

0800182c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <HAL_SPI_MspInit+0x7c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d128      	bne.n	80018a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_SPI_MspInit+0x80>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001852:	4a16      	ldr	r2, [pc, #88]	@ (80018ac <HAL_SPI_MspInit+0x80>)
 8001854:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001858:	6613      	str	r3, [r2, #96]	@ 0x60
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_SPI_MspInit+0x80>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_SPI_MspInit+0x80>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a10      	ldr	r2, [pc, #64]	@ (80018ac <HAL_SPI_MspInit+0x80>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b0e      	ldr	r3, [pc, #56]	@ (80018ac <HAL_SPI_MspInit+0x80>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800187e:	23e0      	movs	r3, #224	@ 0xe0
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f000 fbe6 	bl	800206c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40013000 	.word	0x40013000
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <HAL_MspInit+0x4c>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ba:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <HAL_MspInit+0x4c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_MspInit+0x4c>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_MspInit+0x4c>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <HAL_MspInit+0x4c>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_MspInit+0x4c>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	210f      	movs	r1, #15
 80018ea:	f06f 0001 	mvn.w	r0, #1
 80018ee:	f000 fb79 	bl	8001fe4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800190e:	4b2e      	ldr	r3, [pc, #184]	@ (80019c8 <HAL_InitTick+0xc8>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001912:	4a2d      	ldr	r2, [pc, #180]	@ (80019c8 <HAL_InitTick+0xc8>)
 8001914:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001918:	6613      	str	r3, [r2, #96]	@ 0x60
 800191a:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_InitTick+0xc8>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fb91 	bl	8004058 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001936:	f002 fb79 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 800193a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800193c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193e:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <HAL_InitTick+0xcc>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	3b01      	subs	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800194a:	4b21      	ldr	r3, [pc, #132]	@ (80019d0 <HAL_InitTick+0xd0>)
 800194c:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <HAL_InitTick+0xd4>)
 800194e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <HAL_InitTick+0xd0>)
 8001952:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001956:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001958:	4a1d      	ldr	r2, [pc, #116]	@ (80019d0 <HAL_InitTick+0xd0>)
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800195e:	4b1c      	ldr	r3, [pc, #112]	@ (80019d0 <HAL_InitTick+0xd0>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_InitTick+0xd0>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_InitTick+0xd0>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001970:	4817      	ldr	r0, [pc, #92]	@ (80019d0 <HAL_InitTick+0xd0>)
 8001972:	f004 fa03 	bl	8005d7c <HAL_TIM_Base_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800197c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001980:	2b00      	cmp	r3, #0
 8001982:	d11b      	bne.n	80019bc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001984:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <HAL_InitTick+0xd0>)
 8001986:	f004 fae5 	bl	8005f54 <HAL_TIM_Base_Start_IT>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001994:	2b00      	cmp	r3, #0
 8001996:	d111      	bne.n	80019bc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001998:	2019      	movs	r0, #25
 800199a:	f000 fb4f 	bl	800203c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d808      	bhi.n	80019b6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	2019      	movs	r0, #25
 80019aa:	f000 fb1b 	bl	8001fe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_InitTick+0xd8>)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e002      	b.n	80019bc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3730      	adds	r7, #48	@ 0x30
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	200006e4 	.word	0x200006e4
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	20000060 	.word	0x20000060

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <NMI_Handler+0x4>

080019e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	LOG_ERROR("FAULT", "HardFault_Handler");
 80019e8:	4902      	ldr	r1, [pc, #8]	@ (80019f4 <HardFault_Handler+0x10>)
 80019ea:	4803      	ldr	r0, [pc, #12]	@ (80019f8 <HardFault_Handler+0x14>)
 80019ec:	f01f f98c 	bl	8020d08 <LOG_ERROR>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <HardFault_Handler+0xc>
 80019f4:	08024728 	.word	0x08024728
 80019f8:	0802473c 	.word	0x0802473c

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <MemManage_Handler+0x4>

08001a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8001a26:	2008      	movs	r0, #8
 8001a28:	f000 fdb4 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a34:	4802      	ldr	r0, [pc, #8]	@ (8001a40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a36:	f004 fb0b 	bl	8006050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200006e4 	.word	0x200006e4

08001a44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_WAKE_Pin);
 8001a48:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001a4c:	f000 fda2 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a58:	4802      	ldr	r0, [pc, #8]	@ (8001a64 <RTC_Alarm_IRQHandler+0x10>)
 8001a5a:	f003 f89f 	bl	8004b9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	2000065c 	.word	0x2000065c

08001a68 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <LPTIM1_IRQHandler+0x10>)
 8001a6e:	f001 f8af 	bl	8002bd0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000624 	.word	0x20000624

08001a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_kill>:

int _kill(int pid, int sig)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a96:	f020 fc3b 	bl	8022310 <__errno>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2216      	movs	r2, #22
 8001a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_exit>:

void _exit (int status)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffe7 	bl	8001a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001abe:	bf00      	nop
 8001ac0:	e7fd      	b.n	8001abe <_exit+0x12>

08001ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e00a      	b.n	8001aea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	4601      	mov	r1, r0
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60ba      	str	r2, [r7, #8]
 8001ae0:	b2ca      	uxtb	r2, r1
 8001ae2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf0      	blt.n	8001ad4 <_read+0x12>
  }

  return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	e009      	b.n	8001b22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	60ba      	str	r2, [r7, #8]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbf1      	blt.n	8001b0e <_write+0x12>
  }
  return len;
 8001b2a:	687b      	ldr	r3, [r7, #4]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_close>:

int _close(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_isatty>:

int _isatty(int file)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	@ (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f020 fba0 	bl	8022310 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20010000 	.word	0x20010000
 8001bfc:	00000400 	.word	0x00000400
 8001c00:	20000730 	.word	0x20000730
 8001c04:	20008150 	.word	0x20008150

08001c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	@ (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c30:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c32:	4a15      	ldr	r2, [pc, #84]	@ (8001c88 <MX_USART1_UART_Init+0x5c>)
 8001c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c52:	220c      	movs	r2, #12
 8001c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c62:	4b08      	ldr	r3, [pc, #32]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <MX_USART1_UART_Init+0x58>)
 8001c70:	f004 fb9a 	bl	80063a8 <HAL_UART_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c7a:	f7ff fd87 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000734 	.word	0x20000734
 8001c88:	40013800 	.word	0x40013800

08001c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0a0      	sub	sp, #128	@ 0x80
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	225c      	movs	r2, #92	@ 0x5c
 8001caa:	2100      	movs	r1, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	f020 facd 	bl	802224c <memset>
  if(uartHandle->Instance==USART1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d30 <HAL_UART_MspInit+0xa4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d135      	bne.n	8001d28 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 fa67 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cd4:	f7ff fd5a 	bl	800178c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <HAL_UART_MspInit+0xa8>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cdc:	4a15      	ldr	r2, [pc, #84]	@ (8001d34 <HAL_UART_MspInit+0xa8>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_UART_MspInit+0xa8>)
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_UART_MspInit+0xa8>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <HAL_UART_MspInit+0xa8>)
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_UART_MspInit+0xa8>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d08:	23c0      	movs	r3, #192	@ 0xc0
 8001d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d18:	2307      	movs	r3, #7
 8001d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	@ (8001d38 <HAL_UART_MspInit+0xac>)
 8001d24:	f000 f9a2 	bl	800206c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3780      	adds	r7, #128	@ 0x80
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	48000400 	.word	0x48000400

08001d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d40:	f7ff ff62 	bl	8001c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	@ (8001d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <LoopForever+0xe>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d88 <LoopForever+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f020 fad7 	bl	802231c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d6e:	f7ff fc91 	bl	8001694 <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	200005a0 	.word	0x200005a0
  ldr r2, =_sidata
 8001d80:	08025930 	.word	0x08025930
  ldr r2, =_sbss
 8001d84:	200005a0 	.word	0x200005a0
  ldr r4, =_ebss
 8001d88:	2000814c 	.word	0x2000814c

08001d8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_IRQHandler>

08001d8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f000 f903 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9e:	200f      	movs	r0, #15
 8001da0:	f7ff fdae 	bl	8001900 <HAL_InitTick>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	e001      	b.n	8001db4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001db0:	f7ff fd7e 	bl	80018b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000064 	.word	0x20000064
 8001de4:	200007bc 	.word	0x200007bc

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	200007bc 	.word	0x200007bc

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e18:	d005      	beq.n	8001e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_Delay+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e26:	bf00      	nop
 8001e28:	f7ff ffde 	bl	8001de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d8f7      	bhi.n	8001e28 <HAL_Delay+0x28>
  {
  }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000064 	.word	0x20000064

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7a:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	60d3      	str	r3, [r2, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	@ (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	@ (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	@ (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	@ 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	@ 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b07      	cmp	r3, #7
 8001fb0:	d00f      	beq.n	8001fd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d00c      	beq.n	8001fd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d009      	beq.n	8001fd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d006      	beq.n	8001fd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d003      	beq.n	8001fd2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001fca:	21a6      	movs	r1, #166	@ 0xa6
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001fce:	f7ff fbe3 	bl	8001798 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff38 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	08024744 	.word	0x08024744

08001fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d903      	bls.n	8002004 <HAL_NVIC_SetPriority+0x20>
 8001ffc:	21be      	movs	r1, #190	@ 0xbe
 8001ffe:	480e      	ldr	r0, [pc, #56]	@ (8002038 <HAL_NVIC_SetPriority+0x54>)
 8002000:	f7ff fbca 	bl	8001798 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	d903      	bls.n	8002012 <HAL_NVIC_SetPriority+0x2e>
 800200a:	21bf      	movs	r1, #191	@ 0xbf
 800200c:	480a      	ldr	r0, [pc, #40]	@ (8002038 <HAL_NVIC_SetPriority+0x54>)
 800200e:	f7ff fbc3 	bl	8001798 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002012:	f7ff ff3d 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8002016:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	6978      	ldr	r0, [r7, #20]
 800201e:	f7ff ff8d 	bl	8001f3c <NVIC_EncodePriority>
 8002022:	4602      	mov	r2, r0
 8002024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff5c 	bl	8001ee8 <__NVIC_SetPriority>
}
 8002030:	bf00      	nop
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	08024744 	.word	0x08024744

0800203c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	2b00      	cmp	r3, #0
 800204c:	da03      	bge.n	8002056 <HAL_NVIC_EnableIRQ+0x1a>
 800204e:	21d2      	movs	r1, #210	@ 0xd2
 8002050:	4805      	ldr	r0, [pc, #20]	@ (8002068 <HAL_NVIC_EnableIRQ+0x2c>)
 8002052:	f7ff fba1 	bl	8001798 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ff26 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	08024744 	.word	0x08024744

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002080:	d017      	beq.n	80020b2 <HAL_GPIO_Init+0x46>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a38      	ldr	r2, [pc, #224]	@ (8002168 <HAL_GPIO_Init+0xfc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0x46>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a37      	ldr	r2, [pc, #220]	@ (800216c <HAL_GPIO_Init+0x100>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <HAL_GPIO_Init+0x46>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a36      	ldr	r2, [pc, #216]	@ (8002170 <HAL_GPIO_Init+0x104>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <HAL_GPIO_Init+0x46>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a35      	ldr	r2, [pc, #212]	@ (8002174 <HAL_GPIO_Init+0x108>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <HAL_GPIO_Init+0x46>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a34      	ldr	r2, [pc, #208]	@ (8002178 <HAL_GPIO_Init+0x10c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x46>
 80020aa:	21aa      	movs	r1, #170	@ 0xaa
 80020ac:	4833      	ldr	r0, [pc, #204]	@ (800217c <HAL_GPIO_Init+0x110>)
 80020ae:	f7ff fb73 	bl	8001798 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_GPIO_Init+0x5a>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020c4:	d303      	bcc.n	80020ce <HAL_GPIO_Init+0x62>
 80020c6:	21ab      	movs	r1, #171	@ 0xab
 80020c8:	482c      	ldr	r0, [pc, #176]	@ (800217c <HAL_GPIO_Init+0x110>)
 80020ca:	f7ff fb65 	bl	8001798 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8201 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	f000 81fc 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b11      	cmp	r3, #17
 80020e8:	f000 81f7 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f000 81f2 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	f000 81ed 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002108:	f000 81e7 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002114:	f000 81e1 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002120:	f000 81db 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800212c:	f000 81d5 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002138:	f000 81cf 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002144:	f000 81c9 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	f000 81c4 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b0b      	cmp	r3, #11
 8002158:	f000 81bf 	beq.w	80024da <HAL_GPIO_Init+0x46e>
 800215c:	21ac      	movs	r1, #172	@ 0xac
 800215e:	4807      	ldr	r0, [pc, #28]	@ (800217c <HAL_GPIO_Init+0x110>)
 8002160:	f7ff fb1a 	bl	8001798 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002164:	e1b9      	b.n	80024da <HAL_GPIO_Init+0x46e>
 8002166:	bf00      	nop
 8002168:	48000400 	.word	0x48000400
 800216c:	48000800 	.word	0x48000800
 8002170:	48000c00 	.word	0x48000c00
 8002174:	48001000 	.word	0x48001000
 8002178:	48001c00 	.word	0x48001c00
 800217c:	08024780 	.word	0x08024780
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 819e 	beq.w	80024d4 <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d005      	beq.n	80021b0 <HAL_GPIO_Init+0x144>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d144      	bne.n	800223a <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00f      	beq.n	80021d8 <HAL_GPIO_Init+0x16c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d00b      	beq.n	80021d8 <HAL_GPIO_Init+0x16c>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d007      	beq.n	80021d8 <HAL_GPIO_Init+0x16c>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x16c>
 80021d0:	21bb      	movs	r1, #187	@ 0xbb
 80021d2:	4886      	ldr	r0, [pc, #536]	@ (80023ec <HAL_GPIO_Init+0x380>)
 80021d4:	f7ff fae0 	bl	8001798 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220e:	2201      	movs	r2, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	f003 0201 	and.w	r2, r3, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b03      	cmp	r3, #3
 8002244:	d027      	beq.n	8002296 <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_GPIO_Init+0x1fa>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x1fa>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x1fa>
 800225e:	21dc      	movs	r1, #220	@ 0xdc
 8002260:	4862      	ldr	r0, [pc, #392]	@ (80023ec <HAL_GPIO_Init+0x380>)
 8002262:	f7ff fa99 	bl	8001798 <assert_failed>

        temp = GPIOx->PUPDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d147      	bne.n	8002332 <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022a8:	d017      	beq.n	80022da <HAL_GPIO_Init+0x26e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a50      	ldr	r2, [pc, #320]	@ (80023f0 <HAL_GPIO_Init+0x384>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0x26e>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	@ (80023f4 <HAL_GPIO_Init+0x388>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00f      	beq.n	80022da <HAL_GPIO_Init+0x26e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4e      	ldr	r2, [pc, #312]	@ (80023f8 <HAL_GPIO_Init+0x38c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00b      	beq.n	80022da <HAL_GPIO_Init+0x26e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	@ (80023fc <HAL_GPIO_Init+0x390>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x26e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002400 <HAL_GPIO_Init+0x394>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x26e>
 80022d2:	21e8      	movs	r1, #232	@ 0xe8
 80022d4:	4845      	ldr	r0, [pc, #276]	@ (80023ec <HAL_GPIO_Init+0x380>)
 80022d6:	f7ff fa5f 	bl	8001798 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	d903      	bls.n	80022ea <HAL_GPIO_Init+0x27e>
 80022e2:	21e9      	movs	r1, #233	@ 0xe9
 80022e4:	4841      	ldr	r0, [pc, #260]	@ (80023ec <HAL_GPIO_Init+0x380>)
 80022e6:	f7ff fa57 	bl	8001798 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	6939      	ldr	r1, [r7, #16]
 800232e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0203 	and.w	r2, r3, #3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80b0 	beq.w	80024d4 <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002374:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <HAL_GPIO_Init+0x398>)
 8002376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002378:	4a22      	ldr	r2, [pc, #136]	@ (8002404 <HAL_GPIO_Init+0x398>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002380:	4b20      	ldr	r3, [pc, #128]	@ (8002404 <HAL_GPIO_Init+0x398>)
 8002382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800238c:	4a1e      	ldr	r2, [pc, #120]	@ (8002408 <HAL_GPIO_Init+0x39c>)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023b6:	d029      	beq.n	800240c <HAL_GPIO_Init+0x3a0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_GPIO_Init+0x384>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_GPIO_Init+0x37c>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0c      	ldr	r2, [pc, #48]	@ (80023f4 <HAL_GPIO_Init+0x388>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00d      	beq.n	80023e4 <HAL_GPIO_Init+0x378>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0b      	ldr	r2, [pc, #44]	@ (80023f8 <HAL_GPIO_Init+0x38c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <HAL_GPIO_Init+0x374>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <HAL_GPIO_Init+0x390>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_GPIO_Init+0x370>
 80023d8:	2304      	movs	r3, #4
 80023da:	e018      	b.n	800240e <HAL_GPIO_Init+0x3a2>
 80023dc:	2307      	movs	r3, #7
 80023de:	e016      	b.n	800240e <HAL_GPIO_Init+0x3a2>
 80023e0:	2303      	movs	r3, #3
 80023e2:	e014      	b.n	800240e <HAL_GPIO_Init+0x3a2>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e012      	b.n	800240e <HAL_GPIO_Init+0x3a2>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e010      	b.n	800240e <HAL_GPIO_Init+0x3a2>
 80023ec:	08024780 	.word	0x08024780
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	48001000 	.word	0x48001000
 8002400:	48001c00 	.word	0x48001c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40010000 	.word	0x40010000
 800240c:	2300      	movs	r3, #0
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800241e:	4935      	ldr	r1, [pc, #212]	@ (80024f4 <HAL_GPIO_Init+0x488>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002450:	4a29      	ldr	r2, [pc, #164]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800247a:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002480:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024aa:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_GPIO_Init+0x48c>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae4b 	bne.w	8002180 <HAL_GPIO_Init+0x114>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40010400 	.word	0x40010400

080024fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <HAL_GPIO_ReadPin+0x1c>
 800250e:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 8002512:	4809      	ldr	r0, [pc, #36]	@ (8002538 <HAL_GPIO_ReadPin+0x3c>)
 8002514:	f7ff f940 	bl	8001798 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	08024780 	.word	0x08024780

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <HAL_GPIO_WritePin+0x20>
 8002552:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8002556:	480e      	ldr	r0, [pc, #56]	@ (8002590 <HAL_GPIO_WritePin+0x54>)
 8002558:	f7ff f91e 	bl	8001798 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800255c:	787b      	ldrb	r3, [r7, #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_WritePin+0x36>
 8002562:	787b      	ldrb	r3, [r7, #1]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d004      	beq.n	8002572 <HAL_GPIO_WritePin+0x36>
 8002568:	f240 11af 	movw	r1, #431	@ 0x1af
 800256c:	4808      	ldr	r0, [pc, #32]	@ (8002590 <HAL_GPIO_WritePin+0x54>)
 800256e:	f7ff f913 	bl	8001798 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002572:	787b      	ldrb	r3, [r7, #1]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800257e:	e002      	b.n	8002586 <HAL_GPIO_WritePin+0x4a>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	08024780 	.word	0x08024780

08002594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fe64 	bl	8001280 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1f3      	b.n	80029be <HAL_LPTIM_Init+0x3fa>
  }

  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a8e      	ldr	r2, [pc, #568]	@ (8002814 <HAL_LPTIM_Init+0x250>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d008      	beq.n	80025f2 <HAL_LPTIM_Init+0x2e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a8c      	ldr	r2, [pc, #560]	@ (8002818 <HAL_LPTIM_Init+0x254>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <HAL_LPTIM_Init+0x2e>
 80025ea:	21fc      	movs	r1, #252	@ 0xfc
 80025ec:	488b      	ldr	r0, [pc, #556]	@ (800281c <HAL_LPTIM_Init+0x258>)
 80025ee:	f7ff f8d3 	bl	8001798 <assert_failed>

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_LPTIM_Init+0x46>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_LPTIM_Init+0x46>
 8002602:	21fe      	movs	r1, #254	@ 0xfe
 8002604:	4885      	ldr	r0, [pc, #532]	@ (800281c <HAL_LPTIM_Init+0x258>)
 8002606:	f7ff f8c7 	bl	8001798 <assert_failed>
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d026      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800261a:	d021      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002624:	d01c      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800262e:	d017      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002638:	d012      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002642:	d00d      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800264c:	d008      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8002656:	d003      	beq.n	8002660 <HAL_LPTIM_Init+0x9c>
 8002658:	21ff      	movs	r1, #255	@ 0xff
 800265a:	4870      	ldr	r0, [pc, #448]	@ (800281c <HAL_LPTIM_Init+0x258>)
 800265c:	f7ff f89c 	bl	8001798 <assert_failed>
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d004      	beq.n	8002672 <HAL_LPTIM_Init+0xae>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002670:	d125      	bne.n	80026be <HAL_LPTIM_Init+0xfa>
  {
    assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00c      	beq.n	8002694 <HAL_LPTIM_Init+0xd0>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d008      	beq.n	8002694 <HAL_LPTIM_Init+0xd0>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b04      	cmp	r3, #4
 8002688:	d004      	beq.n	8002694 <HAL_LPTIM_Init+0xd0>
 800268a:	f240 1103 	movw	r1, #259	@ 0x103
 800268e:	4863      	ldr	r0, [pc, #396]	@ (800281c <HAL_LPTIM_Init+0x258>)
 8002690:	f7ff f882 	bl	8001798 <assert_failed>
    assert_param(IS_LPTIM_CLOCK_SAMPLE_TIME(hlptim->Init.UltraLowPowerClock.SampleTime));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_LPTIM_Init+0xfa>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d00c      	beq.n	80026be <HAL_LPTIM_Init+0xfa>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d008      	beq.n	80026be <HAL_LPTIM_Init+0xfa>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	2b18      	cmp	r3, #24
 80026b2:	d004      	beq.n	80026be <HAL_LPTIM_Init+0xfa>
 80026b4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80026b8:	4858      	ldr	r0, [pc, #352]	@ (800281c <HAL_LPTIM_Init+0x258>)
 80026ba:	f7ff f86d 	bl	8001798 <assert_failed>
  }
  assert_param(IS_LPTIM_TRG_SOURCE(hlptim->Init.Trigger.Source));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d027      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026da:	d022      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e4:	d01d      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80026ee:	d018      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026f8:	d013      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002702:	d00e      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800270c:	d009      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002716:	d004      	beq.n	8002722 <HAL_LPTIM_Init+0x15e>
 8002718:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800271c:	483f      	ldr	r0, [pc, #252]	@ (800281c <HAL_LPTIM_Init+0x258>)
 800271e:	f7ff f83b 	bl	8001798 <assert_failed>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800272a:	4293      	cmp	r3, r2
 800272c:	d028      	beq.n	8002780 <HAL_LPTIM_Init+0x1bc>
  {
    assert_param(IS_LPTIM_EXT_TRG_POLARITY(hlptim->Init.Trigger.ActiveEdge));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002736:	d00e      	beq.n	8002756 <HAL_LPTIM_Init+0x192>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002740:	d009      	beq.n	8002756 <HAL_LPTIM_Init+0x192>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800274a:	d004      	beq.n	8002756 <HAL_LPTIM_Init+0x192>
 800274c:	f240 1109 	movw	r1, #265	@ 0x109
 8002750:	4832      	ldr	r0, [pc, #200]	@ (800281c <HAL_LPTIM_Init+0x258>)
 8002752:	f7ff f821 	bl	8001798 <assert_failed>
    assert_param(IS_LPTIM_TRIG_SAMPLE_TIME(hlptim->Init.Trigger.SampleTime));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_LPTIM_Init+0x1bc>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	d00c      	beq.n	8002780 <HAL_LPTIM_Init+0x1bc>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	2b80      	cmp	r3, #128	@ 0x80
 800276c:	d008      	beq.n	8002780 <HAL_LPTIM_Init+0x1bc>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2bc0      	cmp	r3, #192	@ 0xc0
 8002774:	d004      	beq.n	8002780 <HAL_LPTIM_Init+0x1bc>
 8002776:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 800277a:	4828      	ldr	r0, [pc, #160]	@ (800281c <HAL_LPTIM_Init+0x258>)
 800277c:	f7ff f80c 	bl	8001798 <assert_failed>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002788:	d008      	beq.n	800279c <HAL_LPTIM_Init+0x1d8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_LPTIM_Init+0x1d8>
 8002792:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8002796:	4821      	ldr	r0, [pc, #132]	@ (800281c <HAL_LPTIM_Init+0x258>)
 8002798:	f7fe fffe 	bl	8001798 <assert_failed>
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <HAL_LPTIM_Init+0x1f4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ac:	d004      	beq.n	80027b8 <HAL_LPTIM_Init+0x1f4>
 80027ae:	f240 110d 	movw	r1, #269	@ 0x10d
 80027b2:	481a      	ldr	r0, [pc, #104]	@ (800281c <HAL_LPTIM_Init+0x258>)
 80027b4:	f7fe fff0 	bl	8001798 <assert_failed>
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_LPTIM_Init+0x210>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027c8:	d004      	beq.n	80027d4 <HAL_LPTIM_Init+0x210>
 80027ca:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80027ce:	4813      	ldr	r0, [pc, #76]	@ (800281c <HAL_LPTIM_Init+0x258>)
 80027d0:	f7fe ffe2 	bl	8001798 <assert_failed>
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <HAL_LPTIM_Init+0x22a>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7fe ff17 	bl	800161c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d00c      	beq.n	8002820 <HAL_LPTIM_Init+0x25c>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800280a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800280e:	d10b      	bne.n	8002828 <HAL_LPTIM_Init+0x264>
 8002810:	e006      	b.n	8002820 <HAL_LPTIM_Init+0x25c>
 8002812:	bf00      	nop
 8002814:	40007c00 	.word	0x40007c00
 8002818:	40009400 	.word	0x40009400
 800281c:	080247bc 	.word	0x080247bc
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 031e 	bic.w	r3, r3, #30
 8002826:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002830:	4293      	cmp	r3, r2
 8002832:	d005      	beq.n	8002840 <HAL_LPTIM_Init+0x27c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800283a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4b61      	ldr	r3, [pc, #388]	@ (80029c8 <HAL_LPTIM_Init+0x404>)
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002850:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002856:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800285c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8002862:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <HAL_LPTIM_Init+0x2be>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800287a:	4313      	orrs	r3, r2
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d004      	beq.n	8002894 <HAL_LPTIM_Init+0x2d0>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002892:	d107      	bne.n	80028a4 <HAL_LPTIM_Init+0x2e0>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800289c:	4313      	orrs	r3, r2
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00a      	beq.n	80028c6 <HAL_LPTIM_Init+0x302>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80028b8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80028be:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	@ (80029cc <HAL_LPTIM_Init+0x408>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d141      	bne.n	800295c <HAL_LPTIM_Init+0x398>
  {
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3b      	ldr	r2, [pc, #236]	@ (80029cc <HAL_LPTIM_Init+0x408>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d107      	bne.n	80028f2 <HAL_LPTIM_Init+0x32e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01d      	beq.n	8002926 <HAL_LPTIM_Init+0x362>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d019      	beq.n	8002926 <HAL_LPTIM_Init+0x362>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a36      	ldr	r2, [pc, #216]	@ (80029d0 <HAL_LPTIM_Init+0x40c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d10f      	bne.n	800291c <HAL_LPTIM_Init+0x358>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_LPTIM_Init+0x362>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d00c      	beq.n	8002926 <HAL_LPTIM_Init+0x362>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	2b02      	cmp	r3, #2
 8002912:	d008      	beq.n	8002926 <HAL_LPTIM_Init+0x362>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	2b03      	cmp	r3, #3
 800291a:	d004      	beq.n	8002926 <HAL_LPTIM_Init+0x362>
 800291c:	f240 117f 	movw	r1, #383	@ 0x17f
 8002920:	482c      	ldr	r0, [pc, #176]	@ (80029d4 <HAL_LPTIM_Init+0x410>)
 8002922:	f7fe ff39 	bl	8001798 <assert_failed>
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a28      	ldr	r2, [pc, #160]	@ (80029cc <HAL_LPTIM_Init+0x408>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d107      	bne.n	8002940 <HAL_LPTIM_Init+0x37c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_LPTIM_Init+0x386>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	2b02      	cmp	r3, #2
 800293e:	d004      	beq.n	800294a <HAL_LPTIM_Init+0x386>
 8002940:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002944:	4823      	ldr	r0, [pc, #140]	@ (80029d4 <HAL_LPTIM_Init+0x410>)
 8002946:	f7fe ff27 	bl	8001798 <assert_failed>

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	621a      	str	r2, [r3, #32]
 800295a:	e02b      	b.n	80029b4 <HAL_LPTIM_Init+0x3f0>
  }
  else
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1a      	ldr	r2, [pc, #104]	@ (80029cc <HAL_LPTIM_Init+0x408>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d107      	bne.n	8002976 <HAL_LPTIM_Init+0x3b2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01d      	beq.n	80029aa <HAL_LPTIM_Init+0x3e6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d019      	beq.n	80029aa <HAL_LPTIM_Init+0x3e6>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a15      	ldr	r2, [pc, #84]	@ (80029d0 <HAL_LPTIM_Init+0x40c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d10f      	bne.n	80029a0 <HAL_LPTIM_Init+0x3dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d010      	beq.n	80029aa <HAL_LPTIM_Init+0x3e6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d00c      	beq.n	80029aa <HAL_LPTIM_Init+0x3e6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	2b02      	cmp	r3, #2
 8002996:	d008      	beq.n	80029aa <HAL_LPTIM_Init+0x3e6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	2b03      	cmp	r3, #3
 800299e:	d004      	beq.n	80029aa <HAL_LPTIM_Init+0x3e6>
 80029a0:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80029a4:	480b      	ldr	r0, [pc, #44]	@ (80029d4 <HAL_LPTIM_Init+0x410>)
 80029a6:	f7fe fef7 	bl	8001798 <assert_failed>

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029b2:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	ff19f1fe 	.word	0xff19f1fe
 80029cc:	40007c00 	.word	0x40007c00
 80029d0:	40009400 	.word	0x40009400
 80029d4:	080247bc 	.word	0x080247bc

080029d8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a4b      	ldr	r2, [pc, #300]	@ (8002b14 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_LPTIM_Counter_Start_IT+0x28>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a49      	ldr	r2, [pc, #292]	@ (8002b18 <HAL_LPTIM_Counter_Start_IT+0x140>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_LPTIM_Counter_Start_IT+0x28>
 80029f6:	f240 61b7 	movw	r1, #1719	@ 0x6b7
 80029fa:	4848      	ldr	r0, [pc, #288]	@ (8002b1c <HAL_LPTIM_Counter_Start_IT+0x144>)
 80029fc:	f7fe fecc 	bl	8001798 <assert_failed>
  assert_param(IS_LPTIM_PERIOD(Period));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_LPTIM_Counter_Start_IT+0x36>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0c:	d304      	bcc.n	8002a18 <HAL_LPTIM_Counter_Start_IT+0x40>
 8002a0e:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8002a12:	4842      	ldr	r0, [pc, #264]	@ (8002b1c <HAL_LPTIM_Counter_Start_IT+0x144>)
 8002a14:	f7fe fec0 	bl	8001798 <assert_failed>

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3b      	ldr	r2, [pc, #236]	@ (8002b14 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d106      	bne.n	8002a38 <HAL_LPTIM_Counter_Start_IT+0x60>
 8002a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_LPTIM_Counter_Start_IT+0x148>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b20 <HAL_LPTIM_Counter_Start_IT+0x148>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	e005      	b.n	8002a44 <HAL_LPTIM_Counter_Start_IT+0x6c>
 8002a38:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <HAL_LPTIM_Counter_Start_IT+0x148>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a38      	ldr	r2, [pc, #224]	@ (8002b20 <HAL_LPTIM_Counter_Start_IT+0x148>)
 8002a3e:	f043 0302 	orr.w	r3, r3, #2
 8002a42:	6213      	str	r3, [r2, #32]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d015      	beq.n	8002a78 <HAL_LPTIM_Counter_Start_IT+0xa0>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a54:	d110      	bne.n	8002a78 <HAL_LPTIM_Counter_Start_IT+0xa0>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d004      	beq.n	8002a68 <HAL_LPTIM_Counter_Start_IT+0x90>
 8002a5e:	f240 61c5 	movw	r1, #1733	@ 0x6c5
 8002a62:	482e      	ldr	r0, [pc, #184]	@ (8002b1c <HAL_LPTIM_Counter_Start_IT+0x144>)
 8002a64:	f7fe fe98 	bl	8001798 <assert_failed>
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 8002a76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002a98:	2110      	movs	r1, #16
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f97e 	bl	8002d9c <LPTIM_WaitForFlag>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d101      	bne.n	8002aaa <HAL_LPTIM_Counter_Start_IT+0xd2>
  {
    return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e02f      	b.n	8002b0a <HAL_LPTIM_Counter_Start_IT+0x132>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9a6 	bl	8002dfc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f964 	bl	8002d7e <HAL_LPTIM_GetState>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d101      	bne.n	8002ac0 <HAL_LPTIM_Counter_Start_IT+0xe8>
  {
    return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e024      	b.n	8002b0a <HAL_LPTIM_Counter_Start_IT+0x132>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0210 	orr.w	r2, r2, #16
 8002ace:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0202 	orr.w	r2, r2, #2
 8002ade:	609a      	str	r2, [r3, #8]
  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);

#endif
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0204 	orr.w	r2, r2, #4
 8002afe:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40007c00 	.word	0x40007c00
 8002b18:	40009400 	.word	0x40009400
 8002b1c:	080247bc 	.word	0x080247bc
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <HAL_LPTIM_Counter_Stop_IT+0x9c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d009      	beq.n	8002b4a <HAL_LPTIM_Counter_Stop_IT+0x26>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	@ (8002bc4 <HAL_LPTIM_Counter_Stop_IT+0xa0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_LPTIM_Counter_Stop_IT+0x26>
 8002b40:	f240 7104 	movw	r1, #1796	@ 0x704
 8002b44:	4820      	ldr	r0, [pc, #128]	@ (8002bc8 <HAL_LPTIM_Counter_Stop_IT+0xa4>)
 8002b46:	f7fe fe27 	bl	8001798 <assert_failed>


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <HAL_LPTIM_Counter_Stop_IT+0x9c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d106      	bne.n	8002b62 <HAL_LPTIM_Counter_Stop_IT+0x3e>
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_LPTIM_Counter_Stop_IT+0xa8>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a1c      	ldr	r2, [pc, #112]	@ (8002bcc <HAL_LPTIM_Counter_Stop_IT+0xa8>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	e005      	b.n	8002b6e <HAL_LPTIM_Counter_Stop_IT+0x4a>
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <HAL_LPTIM_Counter_Stop_IT+0xa8>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a19      	ldr	r2, [pc, #100]	@ (8002bcc <HAL_LPTIM_Counter_Stop_IT+0xa8>)
 8002b68:	f023 0302 	bic.w	r3, r3, #2
 8002b6c:	6213      	str	r3, [r2, #32]

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f940 	bl	8002dfc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f8fe 	bl	8002d7e <HAL_LPTIM_GetState>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d101      	bne.n	8002b8c <HAL_LPTIM_Counter_Stop_IT+0x68>
  {
    return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e014      	b.n	8002bb6 <HAL_LPTIM_Counter_Stop_IT+0x92>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0210 	bic.w	r2, r2, #16
 8002b9a:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0202 	bic.w	r2, r2, #2
 8002baa:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
#endif
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40007c00 	.word	0x40007c00
 8002bc4:	40009400 	.word	0x40009400
 8002bc8:	080247bc 	.word	0x080247bc
 8002bcc:	40010400 	.word	0x40010400

08002bd0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d10d      	bne.n	8002c02 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f882 	bl	8002d06 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d10d      	bne.n	8002c2c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d106      	bne.n	8002c2c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2202      	movs	r2, #2
 8002c24:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f01e fc36 	bl	8021498 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d10d      	bne.n	8002c56 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d106      	bne.n	8002c56 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f862 	bl	8002d1a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d10d      	bne.n	8002c80 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d106      	bne.n	8002c80 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2208      	movs	r2, #8
 8002c78:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f857 	bl	8002d2e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d10d      	bne.n	8002caa <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d106      	bne.n	8002caa <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f84c 	bl	8002d42 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d10d      	bne.n	8002cd4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d106      	bne.n	8002cd4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f841 	bl	8002d56 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cde:	2b40      	cmp	r3, #64	@ 0x40
 8002ce0:	d10d      	bne.n	8002cfe <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cec:	2b40      	cmp	r3, #64	@ 0x40
 8002cee:	d106      	bne.n	8002cfe <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2240      	movs	r2, #64	@ 0x40
 8002cf6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f836 	bl	8002d6a <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8002cfe:	bf00      	nop
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002d8c:	b2db      	uxtb	r3, r3
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002daa:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <LPTIM_WaitForFlag+0x58>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a12      	ldr	r2, [pc, #72]	@ (8002df8 <LPTIM_WaitForFlag+0x5c>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	0b9b      	lsrs	r3, r3, #14
 8002db6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d002      	beq.n	8002de6 <LPTIM_WaitForFlag+0x4a>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ec      	bne.n	8002dc0 <LPTIM_WaitForFlag+0x24>

  return result;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	2000005c 	.word	0x2000005c
 8002df8:	d1b71759 	.word	0xd1b71759

08002dfc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	@ 0x30
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e08:	f3ef 8310 	mrs	r3, PRIMASK
 8002e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e12:	2301      	movs	r3, #1
 8002e14:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f383 8810 	msr	PRIMASK, r3
}
 8002e1c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a73      	ldr	r2, [pc, #460]	@ (8002ff0 <LPTIM_Disable+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <LPTIM_Disable+0x34>
 8002e28:	4a72      	ldr	r2, [pc, #456]	@ (8002ff4 <LPTIM_Disable+0x1f8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8002e2e:	e00d      	b.n	8002e4c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002e30:	4b71      	ldr	r3, [pc, #452]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e36:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8002e3c:	e006      	b.n	8002e4c <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8002e4a:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff0 <LPTIM_Disable+0x1f4>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <LPTIM_Disable+0x8a>
 8002e7e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff4 <LPTIM_Disable+0x1f8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d00d      	beq.n	8002ea0 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8002e84:	e019      	b.n	8002eba <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8002e86:	4b5c      	ldr	r3, [pc, #368]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002e8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e90:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8002e92:	4b59      	ldr	r3, [pc, #356]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	4a58      	ldr	r2, [pc, #352]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e9c:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 8002e9e:	e00c      	b.n	8002eba <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8002ea0:	4b55      	ldr	r3, [pc, #340]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	4a54      	ldr	r2, [pc, #336]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002ea6:	f043 0320 	orr.w	r3, r3, #32
 8002eaa:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8002eac:	4b52      	ldr	r3, [pc, #328]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	4a51      	ldr	r2, [pc, #324]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002eb2:	f023 0320 	bic.w	r3, r3, #32
 8002eb6:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8002eb8:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <LPTIM_Disable+0xca>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d075      	beq.n	8002fb2 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a49      	ldr	r2, [pc, #292]	@ (8002ff0 <LPTIM_Disable+0x1f4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <LPTIM_Disable+0xdc>
 8002ed0:	4a48      	ldr	r2, [pc, #288]	@ (8002ff4 <LPTIM_Disable+0x1f8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8002ed6:	e011      	b.n	8002efc <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8002ed8:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ede:	4a46      	ldr	r2, [pc, #280]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002ee0:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8002ee8:	e008      	b.n	8002efc <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8002eea:	4b43      	ldr	r3, [pc, #268]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	4a41      	ldr	r2, [pc, #260]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002ef2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002ef6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 8002efa:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01a      	beq.n	8002f38 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8002f1a:	2108      	movs	r1, #8
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff ff3d 	bl	8002d9c <LPTIM_WaitForFlag>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d103      	bne.n	8002f30 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2208      	movs	r2, #8
 8002f36:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01a      	beq.n	8002f74 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002f56:	2110      	movs	r1, #16
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff1f 	bl	8002d9c <LPTIM_WaitForFlag>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d103      	bne.n	8002f6c <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2203      	movs	r2, #3
 8002f68:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <LPTIM_Disable+0x1f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <LPTIM_Disable+0x18a>
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <LPTIM_Disable+0x1f8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8002f84:	e015      	b.n	8002fb2 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8002f86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f90:	4919      	ldr	r1, [pc, #100]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8002f9a:	e00a      	b.n	8002fb2 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8002f9c:	4b16      	ldr	r3, [pc, #88]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fa6:	4914      	ldr	r1, [pc, #80]	@ (8002ff8 <LPTIM_Disable+0x1fc>)
 8002fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8002fb0:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a3a      	ldr	r2, [r7, #32]
 8002fd0:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8002fe6:	bf00      	nop
 8002fe8:	3730      	adds	r7, #48	@ 0x30
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40007c00 	.word	0x40007c00
 8002ff4:	40009400 	.word	0x40009400
 8002ff8:	40021000 	.word	0x40021000

08002ffc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003020:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <HAL_PWREx_GetVoltageRange+0x18>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40007000 	.word	0x40007000

08003038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003046:	d007      	beq.n	8003058 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304e:	d003      	beq.n	8003058 <HAL_PWREx_ControlVoltageScaling+0x20>
 8003050:	21a7      	movs	r1, #167	@ 0xa7
 8003052:	4826      	ldr	r0, [pc, #152]	@ (80030ec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003054:	f7fe fba0 	bl	8001798 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800305e:	d130      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003060:	4b23      	ldr	r3, [pc, #140]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800306c:	d038      	beq.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800306e:	4b20      	ldr	r3, [pc, #128]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003076:	4a1e      	ldr	r2, [pc, #120]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003078:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800307e:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2232      	movs	r2, #50	@ 0x32
 8003084:	fb02 f303 	mul.w	r3, r2, r3
 8003088:	4a1b      	ldr	r2, [pc, #108]	@ (80030f8 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9b      	lsrs	r3, r3, #18
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003094:	e002      	b.n	800309c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3b01      	subs	r3, #1
 800309a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800309c:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a8:	d102      	bne.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x78>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f2      	bne.n	8003096 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030b0:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030bc:	d110      	bne.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e00f      	b.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030c2:	4b0b      	ldr	r3, [pc, #44]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ce:	d007      	beq.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030d0:	4b07      	ldr	r3, [pc, #28]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030d8:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80030da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	080247f8 	.word	0x080247f8
 80030f0:	40007000 	.word	0x40007000
 80030f4:	2000005c 	.word	0x2000005c
 80030f8:	431bde83 	.word	0x431bde83

080030fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f000 bd38 	b.w	8003b80 <HAL_RCC_OscConfig+0xa84>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_OscConfig+0x2e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b3f      	cmp	r3, #63	@ 0x3f
 800311e:	d904      	bls.n	800312a <HAL_RCC_OscConfig+0x2e>
 8003120:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8003124:	489b      	ldr	r0, [pc, #620]	@ (8003394 <HAL_RCC_OscConfig+0x298>)
 8003126:	f7fe fb37 	bl	8001798 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312a:	4b9b      	ldr	r3, [pc, #620]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003134:	4b98      	ldr	r3, [pc, #608]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 813f 	beq.w	80033ca <HAL_RCC_OscConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_OscConfig+0x6a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d004      	beq.n	8003166 <HAL_RCC_OscConfig+0x6a>
 800315c:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8003160:	488c      	ldr	r0, [pc, #560]	@ (8003394 <HAL_RCC_OscConfig+0x298>)
 8003162:	f7fe fb19 	bl	8001798 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2bff      	cmp	r3, #255	@ 0xff
 800316c:	d904      	bls.n	8003178 <HAL_RCC_OscConfig+0x7c>
 800316e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8003172:	4888      	ldr	r0, [pc, #544]	@ (8003394 <HAL_RCC_OscConfig+0x298>)
 8003174:	f7fe fb10 	bl	8001798 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d030      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	2b10      	cmp	r3, #16
 8003186:	d02c      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	2b20      	cmp	r3, #32
 800318e:	d028      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	2b30      	cmp	r3, #48	@ 0x30
 8003196:	d024      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	2b50      	cmp	r3, #80	@ 0x50
 80031a6:	d01c      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	2b60      	cmp	r3, #96	@ 0x60
 80031ae:	d018      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2b70      	cmp	r3, #112	@ 0x70
 80031b6:	d014      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	2b80      	cmp	r3, #128	@ 0x80
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	2b90      	cmp	r3, #144	@ 0x90
 80031c6:	d00c      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	2bb0      	cmp	r3, #176	@ 0xb0
 80031d6:	d004      	beq.n	80031e2 <HAL_RCC_OscConfig+0xe6>
 80031d8:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80031dc:	486d      	ldr	r0, [pc, #436]	@ (8003394 <HAL_RCC_OscConfig+0x298>)
 80031de:	f7fe fadb 	bl	8001798 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_RCC_OscConfig+0xfc>
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	f040 808f 	bne.w	800330e <HAL_RCC_OscConfig+0x212>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	f040 808b 	bne.w	800330e <HAL_RCC_OscConfig+0x212>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f8:	4b67      	ldr	r3, [pc, #412]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d006      	beq.n	8003212 <HAL_RCC_OscConfig+0x116>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d102      	bne.n	8003212 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	f000 bcb7 	b.w	8003b80 <HAL_RCC_OscConfig+0xa84>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	4b60      	ldr	r3, [pc, #384]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <HAL_RCC_OscConfig+0x130>
 8003222:	4b5d      	ldr	r3, [pc, #372]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800322a:	e005      	b.n	8003238 <HAL_RCC_OscConfig+0x13c>
 800322c:	4b5a      	ldr	r3, [pc, #360]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 800322e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003238:	4293      	cmp	r3, r2
 800323a:	d224      	bcs.n	8003286 <HAL_RCC_OscConfig+0x18a>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4618      	mov	r0, r3
 8003242:	f000 ff4b 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f000 bc97 	b.w	8003b80 <HAL_RCC_OscConfig+0xa84>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003252:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a50      	ldr	r2, [pc, #320]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003258:	f043 0308 	orr.w	r3, r3, #8
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b4e      	ldr	r3, [pc, #312]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	494b      	ldr	r1, [pc, #300]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003270:	4b49      	ldr	r3, [pc, #292]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	4946      	ldr	r1, [pc, #280]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
 8003284:	e026      	b.n	80032d4 <HAL_RCC_OscConfig+0x1d8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003286:	4b44      	ldr	r3, [pc, #272]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a43      	ldr	r2, [pc, #268]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 800328c:	f043 0308 	orr.w	r3, r3, #8
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b41      	ldr	r3, [pc, #260]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	493e      	ldr	r1, [pc, #248]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	4939      	ldr	r1, [pc, #228]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1d8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 ff0a 	bl	80040dc <RCC_SetFlashLatencyFromMSIRange>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_OscConfig+0x1d8>
            {
              return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f000 bc56 	b.w	8003b80 <HAL_RCC_OscConfig+0xa84>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032d4:	f000 fdfc 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b2f      	ldr	r3, [pc, #188]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	492d      	ldr	r1, [pc, #180]	@ (800339c <HAL_RCC_OscConfig+0x2a0>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	4a2b      	ldr	r2, [pc, #172]	@ (80033a0 <HAL_RCC_OscConfig+0x2a4>)
 80032f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032f4:	4b2b      	ldr	r3, [pc, #172]	@ (80033a4 <HAL_RCC_OscConfig+0x2a8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fb01 	bl	8001900 <HAL_InitTick>
 80032fe:	4603      	mov	r3, r0
 8003300:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05f      	beq.n	80033c8 <HAL_RCC_OscConfig+0x2cc>
        {
          return status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	f000 bc39 	b.w	8003b80 <HAL_RCC_OscConfig+0xa84>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d033      	beq.n	800337e <HAL_RCC_OscConfig+0x282>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1f      	ldr	r2, [pc, #124]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003322:	f7fe fd61 	bl	8001de8 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003328:	e009      	b.n	800333e <HAL_RCC_OscConfig+0x242>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800332a:	f7fe fd5d 	bl	8001de8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d902      	bls.n	800333e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	f000 bc21 	b.w	8003b80 <HAL_RCC_OscConfig+0xa84>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800333e:	4b16      	ldr	r3, [pc, #88]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ef      	beq.n	800332a <HAL_RCC_OscConfig+0x22e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800334a:	4b13      	ldr	r3, [pc, #76]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	490d      	ldr	r1, [pc, #52]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	4908      	ldr	r1, [pc, #32]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
 800337c:	e025      	b.n	80033ca <HAL_RCC_OscConfig+0x2ce>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a05      	ldr	r2, [pc, #20]	@ (8003398 <HAL_RCC_OscConfig+0x29c>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800338a:	f7fe fd2d 	bl	8001de8 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003390:	e013      	b.n	80033ba <HAL_RCC_OscConfig+0x2be>
 8003392:	bf00      	nop
 8003394:	08024834 	.word	0x08024834
 8003398:	40021000 	.word	0x40021000
 800339c:	08024e10 	.word	0x08024e10
 80033a0:	2000005c 	.word	0x2000005c
 80033a4:	20000060 	.word	0x20000060
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a8:	f7fe fd1e 	bl	8001de8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e3e2      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033ba:	4b97      	ldr	r3, [pc, #604]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x2ac>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x2ce>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d07e      	beq.n	80034d4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <HAL_RCC_OscConfig+0x300>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e6:	d009      	beq.n	80033fc <HAL_RCC_OscConfig+0x300>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f0:	d004      	beq.n	80033fc <HAL_RCC_OscConfig+0x300>
 80033f2:	f240 2119 	movw	r1, #537	@ 0x219
 80033f6:	4889      	ldr	r0, [pc, #548]	@ (800361c <HAL_RCC_OscConfig+0x520>)
 80033f8:	f7fe f9ce 	bl	8001798 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x312>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b0c      	cmp	r3, #12
 8003406:	d10e      	bne.n	8003426 <HAL_RCC_OscConfig+0x32a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d10b      	bne.n	8003426 <HAL_RCC_OscConfig+0x32a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340e:	4b82      	ldr	r3, [pc, #520]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d05b      	beq.n	80034d2 <HAL_RCC_OscConfig+0x3d6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d157      	bne.n	80034d2 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e3ac      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x342>
 8003430:	4b79      	ldr	r3, [pc, #484]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a78      	ldr	r2, [pc, #480]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e01d      	b.n	800347a <HAL_RCC_OscConfig+0x37e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x366>
 8003448:	4b73      	ldr	r3, [pc, #460]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a72      	ldr	r2, [pc, #456]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800344e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b70      	ldr	r3, [pc, #448]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6f      	ldr	r2, [pc, #444]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800345a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x37e>
 8003462:	4b6d      	ldr	r3, [pc, #436]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6c      	ldr	r2, [pc, #432]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b6a      	ldr	r3, [pc, #424]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a69      	ldr	r2, [pc, #420]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003478:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <HAL_RCC_OscConfig+0x3ae>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe fcb1 	bl	8001de8 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800348a:	f7fe fcad 	bl	8001de8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b64      	cmp	r3, #100	@ 0x64
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e371      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800349c:	4b5e      	ldr	r3, [pc, #376]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x38e>
 80034a8:	e014      	b.n	80034d4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe fc9d 	bl	8001de8 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x3c8>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b2:	f7fe fc99 	bl	8001de8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b64      	cmp	r3, #100	@ 0x64
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x3c8>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e35d      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034c4:	4b54      	ldr	r3, [pc, #336]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3b6>
 80034d0:	e000      	b.n	80034d4 <HAL_RCC_OscConfig+0x3d8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d077      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_RCC_OscConfig+0x400>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f0:	d004      	beq.n	80034fc <HAL_RCC_OscConfig+0x400>
 80034f2:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80034f6:	4849      	ldr	r0, [pc, #292]	@ (800361c <HAL_RCC_OscConfig+0x520>)
 80034f8:	f7fe f94e 	bl	8001798 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b1f      	cmp	r3, #31
 8003502:	d904      	bls.n	800350e <HAL_RCC_OscConfig+0x412>
 8003504:	f240 214d 	movw	r1, #589	@ 0x24d
 8003508:	4844      	ldr	r0, [pc, #272]	@ (800361c <HAL_RCC_OscConfig+0x520>)
 800350a:	f7fe f945 	bl	8001798 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d005      	beq.n	8003520 <HAL_RCC_OscConfig+0x424>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d119      	bne.n	800354e <HAL_RCC_OscConfig+0x452>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d116      	bne.n	800354e <HAL_RCC_OscConfig+0x452>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003520:	4b3d      	ldr	r3, [pc, #244]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_OscConfig+0x43c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_OscConfig+0x43c>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e323      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b37      	ldr	r3, [pc, #220]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	4934      	ldr	r1, [pc, #208]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800354c:	e040      	b.n	80035d0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d023      	beq.n	800359e <HAL_RCC_OscConfig+0x4a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003556:	4b30      	ldr	r3, [pc, #192]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2f      	ldr	r2, [pc, #188]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800355c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe fc41 	bl	8001de8 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x480>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800356a:	f7fe fc3d 	bl	8001de8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x480>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e301      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357c:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x46e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003588:	4b23      	ldr	r3, [pc, #140]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	4920      	ldr	r1, [pc, #128]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
 800359c:	e018      	b.n	80035d0 <HAL_RCC_OscConfig+0x4d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359e:	4b1e      	ldr	r3, [pc, #120]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 80035a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fe fc1d 	bl	8001de8 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x4c8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fe fc19 	bl	8001de8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x4c8>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e2dd      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035c4:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x4b6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d04e      	beq.n	800367a <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4fa>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d004      	beq.n	80035f6 <HAL_RCC_OscConfig+0x4fa>
 80035ec:	f240 218d 	movw	r1, #653	@ 0x28d
 80035f0:	480a      	ldr	r0, [pc, #40]	@ (800361c <HAL_RCC_OscConfig+0x520>)
 80035f2:	f7fe f8d1 	bl	8001798 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d021      	beq.n	8003642 <HAL_RCC_OscConfig+0x546>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003604:	4a04      	ldr	r2, [pc, #16]	@ (8003618 <HAL_RCC_OscConfig+0x51c>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360e:	f7fe fbeb 	bl	8001de8 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003614:	e00d      	b.n	8003632 <HAL_RCC_OscConfig+0x536>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	08024834 	.word	0x08024834
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003620:	f7fe fbe2 	bl	8001de8 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e2a6      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003632:	4b93      	ldr	r3, [pc, #588]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <HAL_RCC_OscConfig+0x524>
 8003640:	e01b      	b.n	800367a <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003642:	4b8f      	ldr	r3, [pc, #572]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003648:	4a8d      	ldr	r2, [pc, #564]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe fbc9 	bl	8001de8 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe fbc5 	bl	8001de8 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e289      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800366c:	4b84      	ldr	r3, [pc, #528]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ef      	bne.n	800365a <HAL_RCC_OscConfig+0x55e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80b2 	beq.w	80037ec <HAL_RCC_OscConfig+0x6f0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_RCC_OscConfig+0x5b2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d008      	beq.n	80036ae <HAL_RCC_OscConfig+0x5b2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d004      	beq.n	80036ae <HAL_RCC_OscConfig+0x5b2>
 80036a4:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 80036a8:	4876      	ldr	r0, [pc, #472]	@ (8003884 <HAL_RCC_OscConfig+0x788>)
 80036aa:	f7fe f875 	bl	8001798 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036ae:	4b74      	ldr	r3, [pc, #464]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10d      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ba:	4b71      	ldr	r3, [pc, #452]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	4a70      	ldr	r2, [pc, #448]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c6:	4b6e      	ldr	r3, [pc, #440]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036d2:	2301      	movs	r3, #1
 80036d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003888 <HAL_RCC_OscConfig+0x78c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d118      	bne.n	8003714 <HAL_RCC_OscConfig+0x618>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e2:	4b69      	ldr	r3, [pc, #420]	@ (8003888 <HAL_RCC_OscConfig+0x78c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a68      	ldr	r2, [pc, #416]	@ (8003888 <HAL_RCC_OscConfig+0x78c>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ee:	f7fe fb7b 	bl	8001de8 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x60c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f6:	f7fe fb77 	bl	8001de8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x60c>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e23b      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003708:	4b5f      	ldr	r3, [pc, #380]	@ (8003888 <HAL_RCC_OscConfig+0x78c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x5fa>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d108      	bne.n	800372e <HAL_RCC_OscConfig+0x632>
 800371c:	4b58      	ldr	r3, [pc, #352]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	4a57      	ldr	r2, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800372c:	e024      	b.n	8003778 <HAL_RCC_OscConfig+0x67c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b05      	cmp	r3, #5
 8003734:	d110      	bne.n	8003758 <HAL_RCC_OscConfig+0x65c>
 8003736:	4b52      	ldr	r3, [pc, #328]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	4a50      	ldr	r2, [pc, #320]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800373e:	f043 0304 	orr.w	r3, r3, #4
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003746:	4b4e      	ldr	r3, [pc, #312]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	4a4c      	ldr	r2, [pc, #304]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003756:	e00f      	b.n	8003778 <HAL_RCC_OscConfig+0x67c>
 8003758:	4b49      	ldr	r3, [pc, #292]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375e:	4a48      	ldr	r2, [pc, #288]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003768:	4b45      	ldr	r3, [pc, #276]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376e:	4a44      	ldr	r2, [pc, #272]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d016      	beq.n	80037ae <HAL_RCC_OscConfig+0x6b2>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe fb32 	bl	8001de8 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003786:	e00a      	b.n	800379e <HAL_RCC_OscConfig+0x6a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003788:	f7fe fb2e 	bl	8001de8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x6a2>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1f0      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	4b38      	ldr	r3, [pc, #224]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ed      	beq.n	8003788 <HAL_RCC_OscConfig+0x68c>
 80037ac:	e015      	b.n	80037da <HAL_RCC_OscConfig+0x6de>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fb1b 	bl	8001de8 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x6d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fe fb17 	bl	8001de8 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x6d0>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e1d9      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ed      	bne.n	80037b6 <HAL_RCC_OscConfig+0x6ba>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037da:	7ffb      	ldrb	r3, [r7, #31]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x6f0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	4a26      	ldr	r2, [pc, #152]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d050      	beq.n	800389a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_OscConfig+0x716>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	2b01      	cmp	r3, #1
 8003806:	d004      	beq.n	8003812 <HAL_RCC_OscConfig+0x716>
 8003808:	f240 3145 	movw	r1, #837	@ 0x345
 800380c:	481d      	ldr	r0, [pc, #116]	@ (8003884 <HAL_RCC_OscConfig+0x788>)
 800380e:	f7fd ffc3 	bl	8001798 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01c      	beq.n	8003854 <HAL_RCC_OscConfig+0x758>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800381a:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800381c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003820:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe fadd 	bl	8001de8 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x748>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003832:	f7fe fad9 	bl	8001de8 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x748>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e19d      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003844:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ef      	beq.n	8003832 <HAL_RCC_OscConfig+0x736>
 8003852:	e022      	b.n	800389a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 8003856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800385a:	4a09      	ldr	r2, [pc, #36]	@ (8003880 <HAL_RCC_OscConfig+0x784>)
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7fe fac0 	bl	8001de8 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800386a:	e00f      	b.n	800388c <HAL_RCC_OscConfig+0x790>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800386c:	f7fe fabc 	bl	8001de8 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d908      	bls.n	800388c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e180      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	08024834 	.word	0x08024834
 8003888:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800388c:	4b93      	ldr	r3, [pc, #588]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e8      	bne.n	800386c <HAL_RCC_OscConfig+0x770>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <HAL_RCC_OscConfig+0x7c0>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d008      	beq.n	80038bc <HAL_RCC_OscConfig+0x7c0>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d004      	beq.n	80038bc <HAL_RCC_OscConfig+0x7c0>
 80038b2:	f240 316e 	movw	r1, #878	@ 0x36e
 80038b6:	488a      	ldr	r0, [pc, #552]	@ (8003ae0 <HAL_RCC_OscConfig+0x9e4>)
 80038b8:	f7fd ff6e 	bl	8001798 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 815c 	beq.w	8003b7e <HAL_RCC_OscConfig+0xa82>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	f040 8132 	bne.w	8003b34 <HAL_RCC_OscConfig+0xa38>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d010      	beq.n	80038fa <HAL_RCC_OscConfig+0x7fe>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d00c      	beq.n	80038fa <HAL_RCC_OscConfig+0x7fe>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_OscConfig+0x7fe>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d004      	beq.n	80038fa <HAL_RCC_OscConfig+0x7fe>
 80038f0:	f240 3176 	movw	r1, #886	@ 0x376
 80038f4:	487a      	ldr	r0, [pc, #488]	@ (8003ae0 <HAL_RCC_OscConfig+0x9e4>)
 80038f6:	f7fd ff4f 	bl	8001798 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_RCC_OscConfig+0x80e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	2b08      	cmp	r3, #8
 8003908:	d904      	bls.n	8003914 <HAL_RCC_OscConfig+0x818>
 800390a:	f240 3177 	movw	r1, #887	@ 0x377
 800390e:	4874      	ldr	r0, [pc, #464]	@ (8003ae0 <HAL_RCC_OscConfig+0x9e4>)
 8003910:	f7fd ff42 	bl	8001798 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003918:	2b07      	cmp	r3, #7
 800391a:	d903      	bls.n	8003924 <HAL_RCC_OscConfig+0x828>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003920:	2b56      	cmp	r3, #86	@ 0x56
 8003922:	d904      	bls.n	800392e <HAL_RCC_OscConfig+0x832>
 8003924:	f44f 715e 	mov.w	r1, #888	@ 0x378
 8003928:	486d      	ldr	r0, [pc, #436]	@ (8003ae0 <HAL_RCC_OscConfig+0x9e4>)
 800392a:	f7fd ff35 	bl	8001798 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	2b01      	cmp	r3, #1
 8003934:	d903      	bls.n	800393e <HAL_RCC_OscConfig+0x842>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	2b1f      	cmp	r3, #31
 800393c:	d904      	bls.n	8003948 <HAL_RCC_OscConfig+0x84c>
 800393e:	f240 317a 	movw	r1, #890	@ 0x37a
 8003942:	4867      	ldr	r0, [pc, #412]	@ (8003ae0 <HAL_RCC_OscConfig+0x9e4>)
 8003944:	f7fd ff28 	bl	8001798 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394c:	2b02      	cmp	r3, #2
 800394e:	d010      	beq.n	8003972 <HAL_RCC_OscConfig+0x876>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003954:	2b04      	cmp	r3, #4
 8003956:	d00c      	beq.n	8003972 <HAL_RCC_OscConfig+0x876>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	2b06      	cmp	r3, #6
 800395e:	d008      	beq.n	8003972 <HAL_RCC_OscConfig+0x876>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003964:	2b08      	cmp	r3, #8
 8003966:	d004      	beq.n	8003972 <HAL_RCC_OscConfig+0x876>
 8003968:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 800396c:	485c      	ldr	r0, [pc, #368]	@ (8003ae0 <HAL_RCC_OscConfig+0x9e4>)
 800396e:	f7fd ff13 	bl	8001798 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	2b02      	cmp	r3, #2
 8003978:	d010      	beq.n	800399c <HAL_RCC_OscConfig+0x8a0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	2b04      	cmp	r3, #4
 8003980:	d00c      	beq.n	800399c <HAL_RCC_OscConfig+0x8a0>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	2b06      	cmp	r3, #6
 8003988:	d008      	beq.n	800399c <HAL_RCC_OscConfig+0x8a0>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	2b08      	cmp	r3, #8
 8003990:	d004      	beq.n	800399c <HAL_RCC_OscConfig+0x8a0>
 8003992:	f240 317d 	movw	r1, #893	@ 0x37d
 8003996:	4852      	ldr	r0, [pc, #328]	@ (8003ae0 <HAL_RCC_OscConfig+0x9e4>)
 8003998:	f7fd fefe 	bl	8001798 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800399c:	4b4f      	ldr	r3, [pc, #316]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0203 	and.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d12c      	bne.n	8003a0a <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	3b01      	subs	r3, #1
 80039bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d123      	bne.n	8003a0a <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d11b      	bne.n	8003a0a <HAL_RCC_OscConfig+0x90e>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039de:	429a      	cmp	r2, r3
 80039e0:	d113      	bne.n	8003a0a <HAL_RCC_OscConfig+0x90e>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_OscConfig+0x90e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	3b01      	subs	r3, #1
 8003a04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d06e      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x9ec>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d062      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x9da>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a10:	4b32      	ldr	r3, [pc, #200]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_OscConfig+0x924>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0af      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a20:	4b2e      	ldr	r3, [pc, #184]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2d      	ldr	r2, [pc, #180]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a2c:	f7fe f9dc 	bl	8001de8 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x94a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fe f9d8 	bl	8001de8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x94a>
              {
                return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e09c      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a46:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x938>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	4b23      	ldr	r3, [pc, #140]	@ (8003ae4 <HAL_RCC_OscConfig+0x9e8>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a62:	3a01      	subs	r2, #1
 8003a64:	0112      	lsls	r2, r2, #4
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a6c:	0212      	lsls	r2, r2, #8
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a74:	0852      	lsrs	r2, r2, #1
 8003a76:	3a01      	subs	r2, #1
 8003a78:	0552      	lsls	r2, r2, #21
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0652      	lsls	r2, r2, #25
 8003a86:	4311      	orrs	r1, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a8c:	06d2      	lsls	r2, r2, #27
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	4912      	ldr	r1, [pc, #72]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a96:	4b11      	ldr	r3, [pc, #68]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a10      	ldr	r2, [pc, #64]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003aa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aac:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aae:	f7fe f99b 	bl	8001de8 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x9cc>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fe f997 	bl	8001de8 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x9cc>
              {
                return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e05b      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <HAL_RCC_OscConfig+0x9e0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x9ba>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ad4:	e053      	b.n	8003b7e <HAL_RCC_OscConfig+0xa82>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e052      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	08024834 	.word	0x08024834
 8003ae4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae8:	4b27      	ldr	r3, [pc, #156]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d144      	bne.n	8003b7e <HAL_RCC_OscConfig+0xa82>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003af4:	4b24      	ldr	r3, [pc, #144]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b00:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4a20      	ldr	r2, [pc, #128]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b0c:	f7fe f96c 	bl	8001de8 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xa2a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fe f968 	bl	8001de8 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xa2a>
            {
              return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e02c      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	4b18      	ldr	r3, [pc, #96]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0xa18>
 8003b32:	e024      	b.n	8003b7e <HAL_RCC_OscConfig+0xa82>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d01f      	beq.n	8003b7a <HAL_RCC_OscConfig+0xa7e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b13      	ldr	r3, [pc, #76]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a12      	ldr	r2, [pc, #72]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b46:	f7fe f94f 	bl	8001de8 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0xa64>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7fe f94b 	bl	8001de8 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0xa64>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e00f      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1f0      	bne.n	8003b4e <HAL_RCC_OscConfig+0xa52>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4905      	ldr	r1, [pc, #20]	@ (8003b88 <HAL_RCC_OscConfig+0xa8c>)
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_OscConfig+0xa90>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e001      	b.n	8003b7e <HAL_RCC_OscConfig+0xa82>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_RCC_OscConfig+0xa84>
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	feeefffc 	.word	0xfeeefffc

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e186      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x24>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d904      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x2e>
 8003bb4:	f240 4159 	movw	r1, #1113	@ 0x459
 8003bb8:	4882      	ldr	r0, [pc, #520]	@ (8003dc4 <HAL_RCC_ClockConfig+0x234>)
 8003bba:	f7fd fded 	bl	8001798 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x56>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d00d      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x56>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x56>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d007      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x56>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d004      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x56>
 8003bdc:	f240 415a 	movw	r1, #1114	@ 0x45a
 8003be0:	4878      	ldr	r0, [pc, #480]	@ (8003dc4 <HAL_RCC_ClockConfig+0x234>)
 8003be2:	f7fd fdd9 	bl	8001798 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be6:	4b78      	ldr	r3, [pc, #480]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d910      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf4:	4b74      	ldr	r3, [pc, #464]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 0207 	bic.w	r2, r3, #7
 8003bfc:	4972      	ldr	r1, [pc, #456]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c04:	4b70      	ldr	r3, [pc, #448]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e14d      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d039      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d024      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b80      	cmp	r3, #128	@ 0x80
 8003c30:	d020      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b90      	cmp	r3, #144	@ 0x90
 8003c38:	d01c      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c40:	d018      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2bb0      	cmp	r3, #176	@ 0xb0
 8003c48:	d014      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c50:	d010      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2bd0      	cmp	r3, #208	@ 0xd0
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2be0      	cmp	r3, #224	@ 0xe0
 8003c60:	d008      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2bf0      	cmp	r3, #240	@ 0xf0
 8003c68:	d004      	beq.n	8003c74 <HAL_RCC_ClockConfig+0xe4>
 8003c6a:	f240 4172 	movw	r1, #1138	@ 0x472
 8003c6e:	4855      	ldr	r0, [pc, #340]	@ (8003dc4 <HAL_RCC_ClockConfig+0x234>)
 8003c70:	f7fd fd92 	bl	8001798 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	4b54      	ldr	r3, [pc, #336]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d908      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b51      	ldr	r3, [pc, #324]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	494e      	ldr	r1, [pc, #312]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d061      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d010      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x13c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d00c      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x13c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x13c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d004      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x13c>
 8003cc2:	f240 417d 	movw	r1, #1149	@ 0x47d
 8003cc6:	483f      	ldr	r0, [pc, #252]	@ (8003dc4 <HAL_RCC_ClockConfig+0x234>)
 8003cc8:	f7fd fd66 	bl	8001798 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d121      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0e6      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cec:	4b37      	ldr	r3, [pc, #220]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d115      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0da      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d04:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0ce      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d14:	4b2d      	ldr	r3, [pc, #180]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0c6      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d24:	4b29      	ldr	r3, [pc, #164]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f023 0203 	bic.w	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4926      	ldr	r1, [pc, #152]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d36:	f7fe f857 	bl	8001de8 <HAL_GetTick>
 8003d3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d3e:	f7fe f853 	bl	8001de8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0ae      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d54:	4b1d      	ldr	r3, [pc, #116]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 020c 	and.w	r2, r3, #12
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d1eb      	bne.n	8003d3e <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	4b15      	ldr	r3, [pc, #84]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d208      	bcs.n	8003d94 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d82:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	490f      	ldr	r1, [pc, #60]	@ (8003dcc <HAL_RCC_ClockConfig+0x23c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d216      	bcs.n	8003dd0 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4907      	ldr	r1, [pc, #28]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_RCC_ClockConfig+0x238>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d007      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e076      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x322>
 8003dc4:	08024834 	.word	0x08024834
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d025      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d018      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x286>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dec:	d013      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x286>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003df6:	d00e      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x286>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x286>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e0a:	d004      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x286>
 8003e0c:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 8003e10:	482a      	ldr	r0, [pc, #168]	@ (8003ebc <HAL_RCC_ClockConfig+0x32c>)
 8003e12:	f7fd fcc1 	bl	8001798 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e16:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec0 <HAL_RCC_ClockConfig+0x330>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4927      	ldr	r1, [pc, #156]	@ (8003ec0 <HAL_RCC_ClockConfig+0x330>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d026      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d018      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e44:	d013      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003e4e:	d00e      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e58:	d009      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e62:	d004      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x2de>
 8003e64:	f240 41fc 	movw	r1, #1276	@ 0x4fc
 8003e68:	4814      	ldr	r0, [pc, #80]	@ (8003ebc <HAL_RCC_ClockConfig+0x32c>)
 8003e6a:	f7fd fc95 	bl	8001798 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6e:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <HAL_RCC_ClockConfig+0x330>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4910      	ldr	r1, [pc, #64]	@ (8003ec0 <HAL_RCC_ClockConfig+0x330>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e82:	f000 f825 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <HAL_RCC_ClockConfig+0x330>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	490c      	ldr	r1, [pc, #48]	@ (8003ec4 <HAL_RCC_ClockConfig+0x334>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec8 <HAL_RCC_ClockConfig+0x338>)
 8003ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_RCC_ClockConfig+0x33c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fd fd2a 	bl	8001900 <HAL_InitTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	72fb      	strb	r3, [r7, #11]

  return status;
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	08024834 	.word	0x08024834
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	08024e10 	.word	0x08024e10
 8003ec8:	2000005c 	.word	0x2000005c
 8003ecc:	20000060 	.word	0x20000060

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	@ 0x24
 8003ed4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ede:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x34>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d121      	bne.n	8003f42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d11e      	bne.n	8003f42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f04:	4b34      	ldr	r3, [pc, #208]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f10:	4b31      	ldr	r3, [pc, #196]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	e005      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f20:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10d      	bne.n	8003f58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d102      	bne.n	8003f4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f48:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	e004      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f54:	4b23      	ldr	r3, [pc, #140]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d134      	bne.n	8003fc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d003      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0xac>
 8003f74:	e005      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f76:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f78:	617b      	str	r3, [r7, #20]
      break;
 8003f7a:	e005      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f7c:	4b19      	ldr	r3, [pc, #100]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f7e:	617b      	str	r3, [r7, #20]
      break;
 8003f80:	e002      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	617b      	str	r3, [r7, #20]
      break;
 8003f86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f88:	4b13      	ldr	r3, [pc, #76]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	3301      	adds	r3, #1
 8003f94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f96:	4b10      	ldr	r3, [pc, #64]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	fb03 f202 	mul.w	r2, r3, r2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	0e5b      	lsrs	r3, r3, #25
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	3301      	adds	r3, #1
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fc8:	69bb      	ldr	r3, [r7, #24]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	@ 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	08024e28 	.word	0x08024e28
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	007a1200 	.word	0x007a1200

08003fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b03      	ldr	r3, [pc, #12]	@ (8003ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000005c 	.word	0x2000005c

08004000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b06      	ldr	r3, [pc, #24]	@ (8004024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	4904      	ldr	r1, [pc, #16]	@ (8004028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	08024e20 	.word	0x08024e20

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004030:	f7ff ffda 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0adb      	lsrs	r3, r3, #11
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4904      	ldr	r1, [pc, #16]	@ (8004054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	08024e20 	.word	0x08024e20

08004058 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d104      	bne.n	8004072 <HAL_RCC_GetClockConfig+0x1a>
 8004068:	f240 6194 	movw	r1, #1684	@ 0x694
 800406c:	4818      	ldr	r0, [pc, #96]	@ (80040d0 <HAL_RCC_GetClockConfig+0x78>)
 800406e:	f7fd fb93 	bl	8001798 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d104      	bne.n	8004082 <HAL_RCC_GetClockConfig+0x2a>
 8004078:	f240 6195 	movw	r1, #1685	@ 0x695
 800407c:	4814      	ldr	r0, [pc, #80]	@ (80040d0 <HAL_RCC_GetClockConfig+0x78>)
 800407e:	f7fd fb8b 	bl	8001798 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	220f      	movs	r2, #15
 8004086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004088:	4b12      	ldr	r3, [pc, #72]	@ (80040d4 <HAL_RCC_GetClockConfig+0x7c>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0203 	and.w	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004094:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <HAL_RCC_GetClockConfig+0x7c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80040a0:	4b0c      	ldr	r3, [pc, #48]	@ (80040d4 <HAL_RCC_GetClockConfig+0x7c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80040ac:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_RCC_GetClockConfig+0x7c>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	08db      	lsrs	r3, r3, #3
 80040b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80040ba:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <HAL_RCC_GetClockConfig+0x80>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0207 	and.w	r2, r3, #7
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	601a      	str	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	08024834 	.word	0x08024834
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40022000 	.word	0x40022000

080040dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040f4:	f7fe ff92 	bl	800301c <HAL_PWREx_GetVoltageRange>
 80040f8:	6178      	str	r0, [r7, #20]
 80040fa:	e014      	b.n	8004126 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	4b25      	ldr	r3, [pc, #148]	@ (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004100:	4a24      	ldr	r2, [pc, #144]	@ (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004106:	6593      	str	r3, [r2, #88]	@ 0x58
 8004108:	4b22      	ldr	r3, [pc, #136]	@ (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004114:	f7fe ff82 	bl	800301c <HAL_PWREx_GetVoltageRange>
 8004118:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004124:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d10b      	bne.n	8004146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b80      	cmp	r3, #128	@ 0x80
 8004132:	d919      	bls.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2ba0      	cmp	r3, #160	@ 0xa0
 8004138:	d902      	bls.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800413a:	2302      	movs	r3, #2
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e013      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	e010      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b80      	cmp	r3, #128	@ 0x80
 800414a:	d902      	bls.n	8004152 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800414c:	2303      	movs	r3, #3
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	e00a      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b80      	cmp	r3, #128	@ 0x80
 8004156:	d102      	bne.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004158:	2302      	movs	r3, #2
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	e004      	b.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b70      	cmp	r3, #112	@ 0x70
 8004162:	d101      	bne.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004164:	2301      	movs	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 0207 	bic.w	r2, r3, #7
 8004170:	4909      	ldr	r1, [pc, #36]	@ (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004178:	4b07      	ldr	r3, [pc, #28]	@ (8004198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	429a      	cmp	r2, r3
 8004184:	d001      	beq.n	800418a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40021000 	.word	0x40021000
 8004198:	40022000 	.word	0x40022000

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041a4:	2300      	movs	r3, #0
 80041a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041a8:	2300      	movs	r3, #0
 80041aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b82      	ldr	r3, [pc, #520]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b80      	ldr	r3, [pc, #512]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x30>
 80041c4:	21c9      	movs	r1, #201	@ 0xc9
 80041c6:	487f      	ldr	r0, [pc, #508]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80041c8:	f7fd fae6 	bl	8001798 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d043      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041e8:	d008      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041f2:	d003      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80041f4:	21d1      	movs	r1, #209	@ 0xd1
 80041f6:	4873      	ldr	r0, [pc, #460]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80041f8:	f7fd face 	bl	8001798 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004204:	d01a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004206:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800420a:	d814      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004210:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004214:	d10f      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004216:	4b6c      	ldr	r3, [pc, #432]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	4a6b      	ldr	r2, [pc, #428]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800421c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004220:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004222:	e00c      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xa2>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fb36 	bl	800489c <RCCEx_PLLSAI1_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004234:	e003      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xa2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	74fb      	strb	r3, [r7, #19]
      break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      break;
 800423c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004244:	4b60      	ldr	r3, [pc, #384]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	495d      	ldr	r1, [pc, #372]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800425a:	e001      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80bc 	beq.w	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	2b00      	cmp	r3, #0
 8004278:	d013      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004282:	d00e      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004296:	d004      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004298:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800429c:	4849      	ldr	r0, [pc, #292]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800429e:	f7fd fa7b 	bl	8001798 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042a2:	4b49      	ldr	r3, [pc, #292]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b8:	4b43      	ldr	r3, [pc, #268]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	4a42      	ldr	r2, [pc, #264]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c4:	4b40      	ldr	r3, [pc, #256]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d0:	2301      	movs	r3, #1
 80042d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d4:	4b3d      	ldr	r3, [pc, #244]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a3c      	ldr	r2, [pc, #240]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e0:	f7fd fd82 	bl	8001de8 <HAL_GetTick>
 80042e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e6:	e009      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fd fd7e 	bl	8001de8 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        ret = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	74fb      	strb	r3, [r7, #19]
        break;
 80042fa:	e005      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042fc:	4b33      	ldr	r3, [pc, #204]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ef      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    if(ret == HAL_OK)
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d160      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800430e:	4b2e      	ldr	r3, [pc, #184]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004318:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01e      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	429a      	cmp	r2, r3
 8004328:	d019      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800432a:	4b27      	ldr	r3, [pc, #156]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004334:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433c:	4a22      	ldr	r2, [pc, #136]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800433e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004346:	4b20      	ldr	r3, [pc, #128]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434c:	4a1e      	ldr	r2, [pc, #120]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004352:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004356:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d016      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd fd3e 	bl	8001de8 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800436e:	e00b      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fd fd3a 	bl	8001de8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d902      	bls.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
          {
            ret = HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	74fb      	strb	r3, [r7, #19]
            break;
 8004386:	e006      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0ec      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
          }
        }
      }

      if(ret == HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	4907      	ldr	r1, [pc, #28]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043b2:	e00f      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80043ba:	bf00      	nop
 80043bc:	000ecfe7 	.word	0x000ecfe7
 80043c0:	fff13018 	.word	0xfff13018
 80043c4:	0802486c 	.word	0x0802486c
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043d4:	7c7b      	ldrb	r3, [r7, #17]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d105      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043da:	4b9c      	ldr	r3, [pc, #624]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80043dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043de:	4a9b      	ldr	r2, [pc, #620]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80043e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01f      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d010      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x280>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d00c      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d008      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d004      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8004412:	f240 1199 	movw	r1, #409	@ 0x199
 8004416:	488e      	ldr	r0, [pc, #568]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8004418:	f7fd f9be 	bl	8001798 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800441c:	4b8b      	ldr	r3, [pc, #556]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4988      	ldr	r1, [pc, #544]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01f      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d010      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	2b04      	cmp	r3, #4
 800444c:	d00c      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d008      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445a:	2b08      	cmp	r3, #8
 800445c:	d004      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800445e:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8004462:	487b      	ldr	r0, [pc, #492]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8004464:	f7fd f998 	bl	8001798 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004468:	4b78      	ldr	r3, [pc, #480]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	f023 020c 	bic.w	r2, r3, #12
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	4975      	ldr	r1, [pc, #468]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01f      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d010      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	2b10      	cmp	r3, #16
 8004498:	d00c      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449e:	2b30      	cmp	r3, #48	@ 0x30
 80044a0:	d008      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d004      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80044aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80044ae:	4868      	ldr	r0, [pc, #416]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80044b0:	f7fd f972 	bl	8001798 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044b4:	4b65      	ldr	r3, [pc, #404]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c2:	4962      	ldr	r1, [pc, #392]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d022      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d013      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e6:	d00e      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044f0:	d009      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044fa:	d004      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80044fc:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8004500:	4853      	ldr	r0, [pc, #332]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8004502:	f7fd f949 	bl	8001798 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004506:	4b51      	ldr	r3, [pc, #324]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	494d      	ldr	r1, [pc, #308]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004524:	2b00      	cmp	r3, #0
 8004526:	d022      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004538:	d00e      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800454c:	d004      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800454e:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004552:	483f      	ldr	r0, [pc, #252]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8004554:	f7fd f920 	bl	8001798 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004558:	4b3c      	ldr	r3, [pc, #240]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004566:	4939      	ldr	r1, [pc, #228]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004576:	2b00      	cmp	r3, #0
 8004578:	d022      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458a:	d00e      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004594:	d009      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800459e:	d004      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80045a0:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80045a4:	482a      	ldr	r0, [pc, #168]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80045a6:	f7fd f8f7 	bl	8001798 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045aa:	4b28      	ldr	r3, [pc, #160]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	4924      	ldr	r1, [pc, #144]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01d      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x456>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045dc:	d009      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x456>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e6:	d004      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x456>
 80045e8:	f240 11ef 	movw	r1, #495	@ 0x1ef
 80045ec:	4818      	ldr	r0, [pc, #96]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 80045ee:	f7fd f8d3 	bl	8001798 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f2:	4b16      	ldr	r3, [pc, #88]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	4912      	ldr	r1, [pc, #72]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d023      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004624:	d009      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462e:	d004      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8004630:	f240 11fb 	movw	r1, #507	@ 0x1fb
 8004634:	4806      	ldr	r0, [pc, #24]	@ (8004650 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8004636:	f7fd f8af 	bl	8001798 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800463a:	4b04      	ldr	r3, [pc, #16]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004648:	e004      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
 8004650:	0802486c 	.word	0x0802486c
 8004654:	4987      	ldr	r1, [pc, #540]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004678:	d009      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004682:	d004      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004684:	f240 2107 	movw	r1, #519	@ 0x207
 8004688:	487b      	ldr	r0, [pc, #492]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 800468a:	f7fd f885 	bl	8001798 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800468e:	4b79      	ldr	r3, [pc, #484]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	4975      	ldr	r1, [pc, #468]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d040      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046c0:	d00e      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046ca:	d009      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046d4:	d004      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80046d6:	f240 2141 	movw	r1, #577	@ 0x241
 80046da:	4867      	ldr	r0, [pc, #412]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 80046dc:	f7fd f85c 	bl	8001798 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e0:	4b64      	ldr	r3, [pc, #400]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ee:	4961      	ldr	r1, [pc, #388]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046fe:	d106      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004700:	4b5c      	ldr	r3, [pc, #368]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a5b      	ldr	r2, [pc, #364]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470a:	60d3      	str	r3, [r2, #12]
 800470c:	e011      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004712:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004716:	d10c      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f8bc 	bl	800489c <RCCEx_PLLSAI1_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x596>
      {
        /* set overall return value */
        status = ret;
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d040      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d013      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800474e:	d00e      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004758:	d009      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004762:	d004      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8004764:	f240 2166 	movw	r1, #614	@ 0x266
 8004768:	4843      	ldr	r0, [pc, #268]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 800476a:	f7fd f815 	bl	8001798 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800476e:	4b41      	ldr	r3, [pc, #260]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004774:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477c:	493d      	ldr	r1, [pc, #244]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800478c:	d106      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x600>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800478e:	4b39      	ldr	r3, [pc, #228]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4a38      	ldr	r2, [pc, #224]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004798:	60d3      	str	r3, [r2, #12]
 800479a:	e011      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f875 	bl	800489c <RCCEx_PLLSAI1_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      {
        /* set overall return value */
        status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02f      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00e      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x656>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047dc:	d009      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x656>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047e6:	d004      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x656>
 80047e8:	f240 2186 	movw	r1, #646	@ 0x286
 80047ec:	4822      	ldr	r0, [pc, #136]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 80047ee:	f7fc ffd3 	bl	8001798 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047f2:	4b20      	ldr	r3, [pc, #128]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004800:	491c      	ldr	r1, [pc, #112]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004810:	d10c      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	2102      	movs	r1, #2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f83f 	bl	800489c <RCCEx_PLLSAI1_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* set overall return value */
        status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d018      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004848:	d004      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800484a:	f240 21b2 	movw	r1, #690	@ 0x2b2
 800484e:	480a      	ldr	r0, [pc, #40]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x6dc>)
 8004850:	f7fc ffa2 	bl	8001798 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004854:	4b07      	ldr	r3, [pc, #28]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004862:	4904      	ldr	r1, [pc, #16]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800486a:	7cbb      	ldrb	r3, [r7, #18]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	0802486c 	.word	0x0802486c

0800487c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a04      	ldr	r2, [pc, #16]	@ (8004898 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004886:	f043 0304 	orr.w	r3, r3, #4
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000

0800489c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d010      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x38>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d00c      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x38>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d008      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x38>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d004      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x38>
 80048ca:	f640 315e 	movw	r1, #2910	@ 0xb5e
 80048ce:	4887      	ldr	r0, [pc, #540]	@ (8004aec <RCCEx_PLLSAI1_Config+0x250>)
 80048d0:	f7fc ff62 	bl	8001798 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0x48>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d904      	bls.n	80048ee <RCCEx_PLLSAI1_Config+0x52>
 80048e4:	f640 315f 	movw	r1, #2911	@ 0xb5f
 80048e8:	4880      	ldr	r0, [pc, #512]	@ (8004aec <RCCEx_PLLSAI1_Config+0x250>)
 80048ea:	f7fc ff55 	bl	8001798 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b07      	cmp	r3, #7
 80048f4:	d903      	bls.n	80048fe <RCCEx_PLLSAI1_Config+0x62>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b56      	cmp	r3, #86	@ 0x56
 80048fc:	d904      	bls.n	8004908 <RCCEx_PLLSAI1_Config+0x6c>
 80048fe:	f44f 6136 	mov.w	r1, #2912	@ 0xb60
 8004902:	487a      	ldr	r0, [pc, #488]	@ (8004aec <RCCEx_PLLSAI1_Config+0x250>)
 8004904:	f7fc ff48 	bl	8001798 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <RCCEx_PLLSAI1_Config+0x90>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <RCCEx_PLLSAI1_Config+0x90>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <RCCEx_PLLSAI1_Config+0xa0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <RCCEx_PLLSAI1_Config+0xaa>
 800493c:	f640 3161 	movw	r1, #2913	@ 0xb61
 8004940:	486a      	ldr	r0, [pc, #424]	@ (8004aec <RCCEx_PLLSAI1_Config+0x250>)
 8004942:	f7fc ff29 	bl	8001798 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004946:	4b6a      	ldr	r3, [pc, #424]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d018      	beq.n	8004984 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004952:	4b67      	ldr	r3, [pc, #412]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0203 	and.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d10d      	bne.n	800497e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
       ||
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800496a:	4b61      	ldr	r3, [pc, #388]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
       ||
 800497a:	429a      	cmp	r2, r3
 800497c:	d047      	beq.n	8004a0e <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e044      	b.n	8004a0e <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d018      	beq.n	80049be <RCCEx_PLLSAI1_Config+0x122>
 800498c:	2b03      	cmp	r3, #3
 800498e:	d825      	bhi.n	80049dc <RCCEx_PLLSAI1_Config+0x140>
 8004990:	2b01      	cmp	r3, #1
 8004992:	d002      	beq.n	800499a <RCCEx_PLLSAI1_Config+0xfe>
 8004994:	2b02      	cmp	r3, #2
 8004996:	d009      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0x110>
 8004998:	e020      	b.n	80049dc <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800499a:	4b55      	ldr	r3, [pc, #340]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11d      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049aa:	e01a      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049ac:	4b50      	ldr	r3, [pc, #320]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d116      	bne.n	80049e6 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049bc:	e013      	b.n	80049e6 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049be:	4b4c      	ldr	r3, [pc, #304]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ca:	4b49      	ldr	r3, [pc, #292]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049da:	e006      	b.n	80049ea <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	e004      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x150>
      break;
 80049e2:	bf00      	nop
 80049e4:	e002      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x150>
      break;
 80049e6:	bf00      	nop
 80049e8:	e000      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x150>
      break;
 80049ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10d      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049f2:	4b3f      	ldr	r3, [pc, #252]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	430b      	orrs	r3, r1
 8004a08:	4939      	ldr	r1, [pc, #228]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 80ba 	bne.w	8004b8a <RCCEx_PLLSAI1_Config+0x2ee>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a16:	4b36      	ldr	r3, [pc, #216]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a35      	ldr	r2, [pc, #212]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a22:	f7fd f9e1 	bl	8001de8 <HAL_GetTick>
 8004a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a28:	e009      	b.n	8004a3e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a2a:	f7fd f9dd 	bl	8001de8 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d902      	bls.n	8004a3e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	73fb      	strb	r3, [r7, #15]
        break;
 8004a3c:	e005      	b.n	8004a4a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1ef      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 809c 	bne.w	8004b8a <RCCEx_PLLSAI1_Config+0x2ee>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d903      	bls.n	8004a68 <RCCEx_PLLSAI1_Config+0x1cc>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	2b1f      	cmp	r3, #31
 8004a66:	d904      	bls.n	8004a72 <RCCEx_PLLSAI1_Config+0x1d6>
 8004a68:	f640 31b4 	movw	r1, #2996	@ 0xbb4
 8004a6c:	481f      	ldr	r0, [pc, #124]	@ (8004aec <RCCEx_PLLSAI1_Config+0x250>)
 8004a6e:	f7fc fe93 	bl	8001798 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a72:	4b1f      	ldr	r3, [pc, #124]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6892      	ldr	r2, [r2, #8]
 8004a82:	0211      	lsls	r1, r2, #8
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68d2      	ldr	r2, [r2, #12]
 8004a88:	06d2      	lsls	r2, r2, #27
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	4918      	ldr	r1, [pc, #96]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	610b      	str	r3, [r1, #16]
 8004a92:	e056      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0x2a6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d12c      	bne.n	8004af4 <RCCEx_PLLSAI1_Config+0x258>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d010      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0x228>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d00c      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0x228>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d008      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0x228>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d004      	beq.n	8004ac4 <RCCEx_PLLSAI1_Config+0x228>
 8004aba:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8004abe:	480b      	ldr	r0, [pc, #44]	@ (8004aec <RCCEx_PLLSAI1_Config+0x250>)
 8004ac0:	f7fc fe6a 	bl	8001798 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004acc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6892      	ldr	r2, [r2, #8]
 8004ad4:	0211      	lsls	r1, r2, #8
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6912      	ldr	r2, [r2, #16]
 8004ada:	0852      	lsrs	r2, r2, #1
 8004adc:	3a01      	subs	r2, #1
 8004ade:	0552      	lsls	r2, r2, #21
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	4903      	ldr	r1, [pc, #12]	@ (8004af0 <RCCEx_PLLSAI1_Config+0x254>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	610b      	str	r3, [r1, #16]
 8004ae8:	e02b      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0x2a6>
 8004aea:	bf00      	nop
 8004aec:	0802486c 	.word	0x0802486c
 8004af0:	40021000 	.word	0x40021000
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d010      	beq.n	8004b1e <RCCEx_PLLSAI1_Config+0x282>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d00c      	beq.n	8004b1e <RCCEx_PLLSAI1_Config+0x282>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d008      	beq.n	8004b1e <RCCEx_PLLSAI1_Config+0x282>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d004      	beq.n	8004b1e <RCCEx_PLLSAI1_Config+0x282>
 8004b14:	f640 31ea 	movw	r1, #3050	@ 0xbea
 8004b18:	481e      	ldr	r0, [pc, #120]	@ (8004b94 <RCCEx_PLLSAI1_Config+0x2f8>)
 8004b1a:	f7fc fe3d 	bl	8001798 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6892      	ldr	r2, [r2, #8]
 8004b2e:	0211      	lsls	r1, r2, #8
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6952      	ldr	r2, [r2, #20]
 8004b34:	0852      	lsrs	r2, r2, #1
 8004b36:	3a01      	subs	r2, #1
 8004b38:	0652      	lsls	r2, r2, #25
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	4916      	ldr	r1, [pc, #88]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fd f94b 	bl	8001de8 <HAL_GetTick>
 8004b52:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b54:	e009      	b.n	8004b6a <RCCEx_PLLSAI1_Config+0x2ce>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b56:	f7fd f947 	bl	8001de8 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d902      	bls.n	8004b6a <RCCEx_PLLSAI1_Config+0x2ce>
        {
          status = HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	73fb      	strb	r3, [r7, #15]
          break;
 8004b68:	e005      	b.n	8004b76 <RCCEx_PLLSAI1_Config+0x2da>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0x2ba>
        }
      }

      if(status == HAL_OK)
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0x2ee>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b7c:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	4904      	ldr	r1, [pc, #16]	@ (8004b98 <RCCEx_PLLSAI1_Config+0x2fc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	0802486c 	.word	0x0802486c
 8004b98:	40021000 	.word	0x40021000

08004b9c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8004c24 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004ba6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004baa:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d012      	beq.n	8004be0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004bd8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f824 	bl	8004c28 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004c0c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f814 	bl	8004c3c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e1dd      	b.n	800501e <HAL_SPI_Init+0x3ce>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7b      	ldr	r2, [pc, #492]	@ (8004e54 <HAL_SPI_Init+0x204>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_SPI_Init+0x3a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a79      	ldr	r2, [pc, #484]	@ (8004e58 <HAL_SPI_Init+0x208>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d009      	beq.n	8004c8a <HAL_SPI_Init+0x3a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a78      	ldr	r2, [pc, #480]	@ (8004e5c <HAL_SPI_Init+0x20c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_SPI_Init+0x3a>
 8004c80:	f240 1145 	movw	r1, #325	@ 0x145
 8004c84:	4876      	ldr	r0, [pc, #472]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004c86:	f7fc fd87 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_SPI_Init+0x56>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9a:	d004      	beq.n	8004ca6 <HAL_SPI_Init+0x56>
 8004c9c:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8004ca0:	486f      	ldr	r0, [pc, #444]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004ca2:	f7fc fd79 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <HAL_SPI_Init+0x7c>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d009      	beq.n	8004ccc <HAL_SPI_Init+0x7c>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cc0:	d004      	beq.n	8004ccc <HAL_SPI_Init+0x7c>
 8004cc2:	f240 1147 	movw	r1, #327	@ 0x147
 8004cc6:	4866      	ldr	r0, [pc, #408]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004cc8:	f7fc fd66 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004cd4:	d040      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8004cde:	d03b      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8004ce8:	d036      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cf2:	d031      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8004cfc:	d02c      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d06:	d027      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8004d10:	d022      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1a:	d01d      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d24:	d018      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d2e:	d013      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004d38:	d00e      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d42:	d009      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d4c:	d004      	beq.n	8004d58 <HAL_SPI_Init+0x108>
 8004d4e:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004d52:	4843      	ldr	r0, [pc, #268]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004d54:	f7fc fd20 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d60:	d00d      	beq.n	8004d7e <HAL_SPI_Init+0x12e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_SPI_Init+0x12e>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d72:	d004      	beq.n	8004d7e <HAL_SPI_Init+0x12e>
 8004d74:	f240 1149 	movw	r1, #329	@ 0x149
 8004d78:	4839      	ldr	r0, [pc, #228]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004d7a:	f7fc fd0d 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d008      	beq.n	8004d98 <HAL_SPI_Init+0x148>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <HAL_SPI_Init+0x148>
 8004d8e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004d92:	4833      	ldr	r0, [pc, #204]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004d94:	f7fc fd00 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d01c      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d018      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	2b18      	cmp	r3, #24
 8004db6:	d014      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d010      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	2b28      	cmp	r3, #40	@ 0x28
 8004dc6:	d00c      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	2b30      	cmp	r3, #48	@ 0x30
 8004dce:	d008      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	2b38      	cmp	r3, #56	@ 0x38
 8004dd6:	d004      	beq.n	8004de2 <HAL_SPI_Init+0x192>
 8004dd8:	f240 114b 	movw	r1, #331	@ 0x14b
 8004ddc:	4820      	ldr	r0, [pc, #128]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004dde:	f7fc fcdb 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <HAL_SPI_Init+0x1ac>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	2b80      	cmp	r3, #128	@ 0x80
 8004df0:	d004      	beq.n	8004dfc <HAL_SPI_Init+0x1ac>
 8004df2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004df6:	481a      	ldr	r0, [pc, #104]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004df8:	f7fc fcce 	bl	8001798 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_SPI_Init+0x1c6>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d004      	beq.n	8004e16 <HAL_SPI_Init+0x1c6>
 8004e0c:	f240 114d 	movw	r1, #333	@ 0x14d
 8004e10:	4813      	ldr	r0, [pc, #76]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004e12:	f7fc fcc1 	bl	8001798 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d151      	bne.n	8004ec2 <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_SPI_Init+0x1e8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d004      	beq.n	8004e38 <HAL_SPI_Init+0x1e8>
 8004e2e:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8004e32:	480b      	ldr	r0, [pc, #44]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004e34:	f7fc fcb0 	bl	8001798 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d011      	beq.n	8004e64 <HAL_SPI_Init+0x214>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d00d      	beq.n	8004e64 <HAL_SPI_Init+0x214>
 8004e48:	f240 1151 	movw	r1, #337	@ 0x151
 8004e4c:	4804      	ldr	r0, [pc, #16]	@ (8004e60 <HAL_SPI_Init+0x210>)
 8004e4e:	f7fc fca3 	bl	8001798 <assert_failed>
 8004e52:	e007      	b.n	8004e64 <HAL_SPI_Init+0x214>
 8004e54:	40013000 	.word	0x40013000
 8004e58:	40003800 	.word	0x40003800
 8004e5c:	40003c00 	.word	0x40003c00
 8004e60:	080248a8 	.word	0x080248a8

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6c:	d125      	bne.n	8004eba <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d050      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d04c      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d048      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	2b18      	cmp	r3, #24
 8004e8c:	d044      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d040      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	2b28      	cmp	r3, #40	@ 0x28
 8004e9c:	d03c      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	2b30      	cmp	r3, #48	@ 0x30
 8004ea4:	d038      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	2b38      	cmp	r3, #56	@ 0x38
 8004eac:	d034      	beq.n	8004f18 <HAL_SPI_Init+0x2c8>
 8004eae:	f240 1155 	movw	r1, #341	@ 0x155
 8004eb2:	485d      	ldr	r0, [pc, #372]	@ (8005028 <HAL_SPI_Init+0x3d8>)
 8004eb4:	f7fc fc70 	bl	8001798 <assert_failed>
 8004eb8:	e02e      	b.n	8004f18 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	61da      	str	r2, [r3, #28]
 8004ec0:	e02a      	b.n	8004f18 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d01c      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d018      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b18      	cmp	r3, #24
 8004ee0:	d014      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d010      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	2b28      	cmp	r3, #40	@ 0x28
 8004ef0:	d00c      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b30      	cmp	r3, #48	@ 0x30
 8004ef8:	d008      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	2b38      	cmp	r3, #56	@ 0x38
 8004f00:	d004      	beq.n	8004f0c <HAL_SPI_Init+0x2bc>
 8004f02:	f240 115f 	movw	r1, #351	@ 0x15f
 8004f06:	4848      	ldr	r0, [pc, #288]	@ (8005028 <HAL_SPI_Init+0x3d8>)
 8004f08:	f7fc fc46 	bl	8001798 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc fc7a 	bl	800182c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f58:	d902      	bls.n	8004f60 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	e002      	b.n	8004f66 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004f6e:	d007      	beq.n	8004f80 <HAL_SPI_Init+0x330>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	ea42 0103 	orr.w	r1, r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 0204 	and.w	r2, r3, #4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004ffc:	ea42 0103 	orr.w	r1, r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	080248a8 	.word	0x080248a8

0800502c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <HAL_SPI_Transmit+0x30>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005050:	d004      	beq.n	800505c <HAL_SPI_Transmit+0x30>
 8005052:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 8005056:	4888      	ldr	r0, [pc, #544]	@ (8005278 <HAL_SPI_Transmit+0x24c>)
 8005058:	f7fc fb9e 	bl	8001798 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_SPI_Transmit+0x3e>
 8005066:	2302      	movs	r3, #2
 8005068:	e161      	b.n	800532e <HAL_SPI_Transmit+0x302>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005072:	f7fc feb9 	bl	8001de8 <HAL_GetTick>
 8005076:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d002      	beq.n	800508e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8005088:	2302      	movs	r3, #2
 800508a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800508c:	e14a      	b.n	8005324 <HAL_SPI_Transmit+0x2f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_SPI_Transmit+0x6e>
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800509e:	e141      	b.n	8005324 <HAL_SPI_Transmit+0x2f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2203      	movs	r2, #3
 80050a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ea:	d10f      	bne.n	800510c <HAL_SPI_Transmit+0xe0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800510a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d007      	beq.n	800512a <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005132:	d94f      	bls.n	80051d4 <HAL_SPI_Transmit+0x1a8>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <HAL_SPI_Transmit+0x116>
 800513c:	8afb      	ldrh	r3, [r7, #22]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d142      	bne.n	80051c8 <HAL_SPI_Transmit+0x19c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005166:	e02f      	b.n	80051c8 <HAL_SPI_Transmit+0x19c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b02      	cmp	r3, #2
 8005174:	d112      	bne.n	800519c <HAL_SPI_Transmit+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800519a:	e015      	b.n	80051c8 <HAL_SPI_Transmit+0x19c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800519c:	f7fc fe24 	bl	8001de8 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d803      	bhi.n	80051b4 <HAL_SPI_Transmit+0x188>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051b2:	d102      	bne.n	80051ba <HAL_SPI_Transmit+0x18e>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_SPI_Transmit+0x19c>
        {
          errorcode = HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80051c6:	e0ad      	b.n	8005324 <HAL_SPI_Transmit+0x2f8>
    while (hspi->TxXferCount > 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1ca      	bne.n	8005168 <HAL_SPI_Transmit+0x13c>
 80051d2:	e082      	b.n	80052da <HAL_SPI_Transmit+0x2ae>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_SPI_Transmit+0x1b6>
 80051dc:	8afb      	ldrh	r3, [r7, #22]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d176      	bne.n	80052d0 <HAL_SPI_Transmit+0x2a4>
    {
      if (hspi->TxXferCount > 1U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d912      	bls.n	8005212 <HAL_SPI_Transmit+0x1e6>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f0:	881a      	ldrh	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fc:	1c9a      	adds	r2, r3, #2
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b02      	subs	r3, #2
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005210:	e05e      	b.n	80052d0 <HAL_SPI_Transmit+0x2a4>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005238:	e04a      	b.n	80052d0 <HAL_SPI_Transmit+0x2a4>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d12d      	bne.n	80052a4 <HAL_SPI_Transmit+0x278>
      {
        if (hspi->TxXferCount > 1U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d914      	bls.n	800527c <HAL_SPI_Transmit+0x250>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005256:	881a      	ldrh	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b02      	subs	r3, #2
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005276:	e02b      	b.n	80052d0 <HAL_SPI_Transmit+0x2a4>
 8005278:	080248a8 	.word	0x080248a8
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	7812      	ldrb	r2, [r2, #0]
 8005288:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052a2:	e015      	b.n	80052d0 <HAL_SPI_Transmit+0x2a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a4:	f7fc fda0 	bl	8001de8 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d803      	bhi.n	80052bc <HAL_SPI_Transmit+0x290>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ba:	d102      	bne.n	80052c2 <HAL_SPI_Transmit+0x296>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_SPI_Transmit+0x2a4>
        {
          errorcode = HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80052ce:	e029      	b.n	8005324 <HAL_SPI_Transmit+0x2f8>
    while (hspi->TxXferCount > 0U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1af      	bne.n	800523a <HAL_SPI_Transmit+0x20e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 fd06 	bl	8005cf0 <SPI_EndRxTxTransaction>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_SPI_Transmit+0x2c4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <HAL_SPI_Transmit+0x2e2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_SPI_Transmit+0x2f0>
  {
    errorcode = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	77fb      	strb	r3, [r7, #31]
 800531a:	e003      	b.n	8005324 <HAL_SPI_Transmit+0x2f8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800532c:	7ffb      	ldrb	r3, [r7, #31]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop

08005338 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	d002      	beq.n	800535e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005358:	2302      	movs	r3, #2
 800535a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800535c:	e11a      	b.n	8005594 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005366:	d112      	bne.n	800538e <HAL_SPI_Receive+0x56>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10e      	bne.n	800538e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2204      	movs	r2, #4
 8005374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f90f 	bl	80055a8 <HAL_SPI_TransmitReceive>
 800538a:	4603      	mov	r3, r0
 800538c:	e107      	b.n	800559e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_SPI_Receive+0x64>
 8005398:	2302      	movs	r3, #2
 800539a:	e100      	b.n	800559e <HAL_SPI_Receive+0x266>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053a4:	f7fc fd20 	bl	8001de8 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_SPI_Receive+0x7e>
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053ba:	e0eb      	b.n	8005594 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2204      	movs	r2, #4
 80053c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005406:	d908      	bls.n	800541a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005416:	605a      	str	r2, [r3, #4]
 8005418:	e007      	b.n	800542a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005432:	d10f      	bne.n	8005454 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005442:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	d007      	beq.n	8005472 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005470:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800547a:	d86f      	bhi.n	800555c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800547c:	e034      	b.n	80054e8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d117      	bne.n	80054bc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f103 020c 	add.w	r2, r3, #12
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80054ba:	e015      	b.n	80054e8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054bc:	f7fc fc94 	bl	8001de8 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d803      	bhi.n	80054d4 <HAL_SPI_Receive+0x19c>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054d2:	d102      	bne.n	80054da <HAL_SPI_Receive+0x1a2>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80054e6:	e055      	b.n	8005594 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1c4      	bne.n	800547e <HAL_SPI_Receive+0x146>
 80054f4:	e038      	b.n	8005568 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d115      	bne.n	8005530 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	b292      	uxth	r2, r2
 8005510:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005516:	1c9a      	adds	r2, r3, #2
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800552e:	e015      	b.n	800555c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005530:	f7fc fc5a 	bl	8001de8 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d803      	bhi.n	8005548 <HAL_SPI_Receive+0x210>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005546:	d102      	bne.n	800554e <HAL_SPI_Receive+0x216>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800555a:	e01b      	b.n	8005594 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1c6      	bne.n	80054f6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fb67 	bl	8005c40 <SPI_EndRxTransaction>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	75fb      	strb	r3, [r7, #23]
 800558a:	e003      	b.n	8005594 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	@ 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055b6:	2301      	movs	r3, #1
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <HAL_SPI_TransmitReceive+0x2a>
 80055c8:	f240 41fd 	movw	r1, #1277	@ 0x4fd
 80055cc:	4888      	ldr	r0, [pc, #544]	@ (80057f0 <HAL_SPI_TransmitReceive+0x248>)
 80055ce:	f7fc f8e3 	bl	8001798 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x38>
 80055dc:	2302      	movs	r3, #2
 80055de:	e20d      	b.n	80059fc <HAL_SPI_TransmitReceive+0x454>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055e8:	f7fc fbfe 	bl	8001de8 <HAL_GetTick>
 80055ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80055fc:	887b      	ldrh	r3, [r7, #2]
 80055fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005600:	887b      	ldrh	r3, [r7, #2]
 8005602:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005604:	7efb      	ldrb	r3, [r7, #27]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d00e      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x80>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005610:	d106      	bne.n	8005620 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <HAL_SPI_TransmitReceive+0x78>
 800561a:	7efb      	ldrb	r3, [r7, #27]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d003      	beq.n	8005628 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8005620:	2302      	movs	r3, #2
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005626:	e1e3      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x448>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_SPI_TransmitReceive+0x92>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_SPI_TransmitReceive+0x92>
 8005634:	887b      	ldrh	r3, [r7, #2]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005640:	e1d6      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x448>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b04      	cmp	r3, #4
 800564c:	d003      	beq.n	8005656 <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2205      	movs	r2, #5
 8005652:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	887a      	ldrh	r2, [r7, #2]
 8005666:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	887a      	ldrh	r2, [r7, #2]
 800566e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	887a      	ldrh	r2, [r7, #2]
 800567c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	887a      	ldrh	r2, [r7, #2]
 8005682:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005698:	d802      	bhi.n	80056a0 <HAL_SPI_TransmitReceive+0xf8>
 800569a:	8a3b      	ldrh	r3, [r7, #16]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d908      	bls.n	80056b2 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80056ae:	605a      	str	r2, [r3, #4]
 80056b0:	e007      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b40      	cmp	r3, #64	@ 0x40
 80056ce:	d007      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80056e8:	f240 8084 	bls.w	80057f4 <HAL_SPI_TransmitReceive+0x24c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_TransmitReceive+0x152>
 80056f4:	8a7b      	ldrh	r3, [r7, #18]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d16d      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x22e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	881a      	ldrh	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	1c9a      	adds	r2, r3, #2
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800571e:	e05a      	b.n	80057d6 <HAL_SPI_TransmitReceive+0x22e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d11b      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x1be>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d016      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x1be>
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	2b01      	cmp	r3, #1
 800573c:	d113      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x1be>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005742:	881a      	ldrh	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	1c9a      	adds	r2, r3, #2
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b01      	cmp	r3, #1
 8005772:	d11c      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x206>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d016      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x206>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	b292      	uxth	r2, r2
 800578c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057aa:	2301      	movs	r3, #1
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057ae:	f7fc fb1b 	bl	8001de8 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d80b      	bhi.n	80057d6 <HAL_SPI_TransmitReceive+0x22e>
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057c4:	d007      	beq.n	80057d6 <HAL_SPI_TransmitReceive+0x22e>
      {
        errorcode = HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80057d4:	e10c      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d19f      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x178>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d199      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x178>
 80057ec:	e0e6      	b.n	80059bc <HAL_SPI_TransmitReceive+0x414>
 80057ee:	bf00      	nop
 80057f0:	080248a8 	.word	0x080248a8
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <HAL_SPI_TransmitReceive+0x25c>
 80057fc:	8a7b      	ldrh	r3, [r7, #18]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	f040 80cf 	bne.w	80059a2 <HAL_SPI_TransmitReceive+0x3fa>
    {
      if (hspi->TxXferCount > 1U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b01      	cmp	r3, #1
 800580c:	d912      	bls.n	8005834 <HAL_SPI_TransmitReceive+0x28c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	881a      	ldrh	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800581e:	1c9a      	adds	r2, r3, #2
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b02      	subs	r3, #2
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005832:	e0b6      	b.n	80059a2 <HAL_SPI_TransmitReceive+0x3fa>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800585a:	e0a2      	b.n	80059a2 <HAL_SPI_TransmitReceive+0x3fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b02      	cmp	r3, #2
 8005868:	d134      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x32c>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d02f      	beq.n	80058d4 <HAL_SPI_TransmitReceive+0x32c>
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	2b01      	cmp	r3, #1
 8005878:	d12c      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x32c>
      {
        if (hspi->TxXferCount > 1U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d912      	bls.n	80058aa <HAL_SPI_TransmitReceive+0x302>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005888:	881a      	ldrh	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	1c9a      	adds	r2, r3, #2
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b02      	subs	r3, #2
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058a8:	e012      	b.n	80058d0 <HAL_SPI_TransmitReceive+0x328>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d148      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x3cc>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d042      	beq.n	8005974 <HAL_SPI_TransmitReceive+0x3cc>
      {
        if (hspi->RxXferCount > 1U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d923      	bls.n	8005942 <HAL_SPI_TransmitReceive+0x39a>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005904:	b292      	uxth	r2, r2
 8005906:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	1c9a      	adds	r2, r3, #2
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b02      	subs	r3, #2
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d81f      	bhi.n	8005970 <HAL_SPI_TransmitReceive+0x3c8>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800593e:	605a      	str	r2, [r3, #4]
 8005940:	e016      	b.n	8005970 <HAL_SPI_TransmitReceive+0x3c8>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f103 020c 	add.w	r2, r3, #12
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	7812      	ldrb	r2, [r2, #0]
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005970:	2301      	movs	r3, #1
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005974:	f7fc fa38 	bl	8001de8 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005980:	429a      	cmp	r2, r3
 8005982:	d803      	bhi.n	800598c <HAL_SPI_TransmitReceive+0x3e4>
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800598a:	d102      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x3ea>
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x3fa>
      {
        errorcode = HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80059a0:	e026      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x448>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f47f af57 	bne.w	800585c <HAL_SPI_TransmitReceive+0x2b4>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f47f af50 	bne.w	800585c <HAL_SPI_TransmitReceive+0x2b4>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 f995 	bl	8005cf0 <SPI_EndRxTxTransaction>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x430>
  {
    errorcode = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_SPI_TransmitReceive+0x440>
  {
    errorcode = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e6:	e003      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x448>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80059f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3728      	adds	r7, #40	@ 0x28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a14:	f7fc f9e8 	bl	8001de8 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	4413      	add	r3, r2
 8005a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a24:	f7fc f9e0 	bl	8001de8 <HAL_GetTick>
 8005a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a2a:	4b39      	ldr	r3, [pc, #228]	@ (8005b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	015b      	lsls	r3, r3, #5
 8005a30:	0d1b      	lsrs	r3, r3, #20
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	fb02 f303 	mul.w	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a3a:	e054      	b.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a42:	d050      	beq.n	8005ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a44:	f7fc f9d0 	bl	8001de8 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d902      	bls.n	8005a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d13d      	bne.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a72:	d111      	bne.n	8005a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a7c:	d004      	beq.n	8005a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a86:	d107      	bne.n	8005a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa0:	d10f      	bne.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e017      	b.n	8005b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	bf0c      	ite	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	2300      	movne	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d19b      	bne.n	8005a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3720      	adds	r7, #32
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	2000005c 	.word	0x2000005c

08005b14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	@ 0x28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b26:	f7fc f95f 	bl	8001de8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	4413      	add	r3, r2
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005b36:	f7fc f957 	bl	8001de8 <HAL_GetTick>
 8005b3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b44:	4b3d      	ldr	r3, [pc, #244]	@ (8005c3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	00da      	lsls	r2, r3, #3
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	0d1b      	lsrs	r3, r3, #20
 8005b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b56:	fb02 f303 	mul.w	r3, r2, r3
 8005b5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b5c:	e060      	b.n	8005c20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005b64:	d107      	bne.n	8005b76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b7c:	d050      	beq.n	8005c20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b7e:	f7fc f933 	bl	8001de8 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d902      	bls.n	8005b94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d13d      	bne.n	8005c10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bac:	d111      	bne.n	8005bd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb6:	d004      	beq.n	8005bc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc0:	d107      	bne.n	8005bd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bda:	d10f      	bne.n	8005bfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e010      	b.n	8005c32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c16:	2300      	movs	r3, #0
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d196      	bne.n	8005b5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3728      	adds	r7, #40	@ 0x28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	2000005c 	.word	0x2000005c

08005c40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c54:	d111      	bne.n	8005c7a <SPI_EndRxTransaction+0x3a>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c5e:	d004      	beq.n	8005c6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c68:	d107      	bne.n	8005c7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c78:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2200      	movs	r2, #0
 8005c82:	2180      	movs	r1, #128	@ 0x80
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff febd 	bl	8005a04 <SPI_WaitFlagStateUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e023      	b.n	8005ce8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ca8:	d11d      	bne.n	8005ce6 <SPI_EndRxTransaction+0xa6>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cb2:	d004      	beq.n	8005cbe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cbc:	d113      	bne.n	8005ce6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff ff22 	bl	8005b14 <SPI_WaitFifoStateUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cda:	f043 0220 	orr.w	r2, r3, #32
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e000      	b.n	8005ce8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af02      	add	r7, sp, #8
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff ff03 	bl	8005b14 <SPI_WaitFifoStateUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e027      	b.n	8005d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2180      	movs	r1, #128	@ 0x80
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f7ff fe68 	bl	8005a04 <SPI_WaitFlagStateUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d3e:	f043 0220 	orr.w	r2, r3, #32
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e014      	b.n	8005d74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff fedc 	bl	8005b14 <SPI_WaitFifoStateUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d66:	f043 0220 	orr.w	r2, r3, #32
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e000      	b.n	8005d74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e0c8      	b.n	8005f20 <HAL_TIM_Base_Init+0x1a4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a65      	ldr	r2, [pc, #404]	@ (8005f28 <HAL_TIM_Base_Init+0x1ac>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d01d      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x58>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005da0:	d018      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x58>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a61      	ldr	r2, [pc, #388]	@ (8005f2c <HAL_TIM_Base_Init+0x1b0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d013      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x58>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5f      	ldr	r2, [pc, #380]	@ (8005f30 <HAL_TIM_Base_Init+0x1b4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00e      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x58>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a5e      	ldr	r2, [pc, #376]	@ (8005f34 <HAL_TIM_Base_Init+0x1b8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x58>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a5c      	ldr	r2, [pc, #368]	@ (8005f38 <HAL_TIM_Base_Init+0x1bc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <HAL_TIM_Base_Init+0x58>
 8005dca:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005dce:	485b      	ldr	r0, [pc, #364]	@ (8005f3c <HAL_TIM_Base_Init+0x1c0>)
 8005dd0:	f7fb fce2 	bl	8001798 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d014      	beq.n	8005e06 <HAL_TIM_Base_Init+0x8a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d010      	beq.n	8005e06 <HAL_TIM_Base_Init+0x8a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d00c      	beq.n	8005e06 <HAL_TIM_Base_Init+0x8a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d008      	beq.n	8005e06 <HAL_TIM_Base_Init+0x8a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b60      	cmp	r3, #96	@ 0x60
 8005dfa:	d004      	beq.n	8005e06 <HAL_TIM_Base_Init+0x8a>
 8005dfc:	f240 1117 	movw	r1, #279	@ 0x117
 8005e00:	484e      	ldr	r0, [pc, #312]	@ (8005f3c <HAL_TIM_Base_Init+0x1c0>)
 8005e02:	f7fb fcc9 	bl	8001798 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00e      	beq.n	8005e2c <HAL_TIM_Base_Init+0xb0>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e16:	d009      	beq.n	8005e2c <HAL_TIM_Base_Init+0xb0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e20:	d004      	beq.n	8005e2c <HAL_TIM_Base_Init+0xb0>
 8005e22:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8005e26:	4845      	ldr	r0, [pc, #276]	@ (8005f3c <HAL_TIM_Base_Init+0x1c0>)
 8005e28:	f7fb fcb6 	bl	8001798 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e34:	d00f      	beq.n	8005e56 <HAL_TIM_Base_Init+0xda>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d006      	beq.n	8005e4c <HAL_TIM_Base_Init+0xd0>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e46:	d201      	bcs.n	8005e4c <HAL_TIM_Base_Init+0xd0>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <HAL_TIM_Base_Init+0xd2>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	e006      	b.n	8005e64 <HAL_TIM_Base_Init+0xe8>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bf14      	ite	ne
 8005e5e:	2301      	movne	r3, #1
 8005e60:	2300      	moveq	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_Base_Init+0xf6>
 8005e68:	f240 1119 	movw	r1, #281	@ 0x119
 8005e6c:	4833      	ldr	r0, [pc, #204]	@ (8005f3c <HAL_TIM_Base_Init+0x1c0>)
 8005e6e:	f7fb fc93 	bl	8001798 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_TIM_Base_Init+0x110>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b80      	cmp	r3, #128	@ 0x80
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_Base_Init+0x110>
 8005e82:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8005e86:	482d      	ldr	r0, [pc, #180]	@ (8005f3c <HAL_TIM_Base_Init+0x1c0>)
 8005e88:	f7fb fc86 	bl	8001798 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <HAL_TIM_Base_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f84d 	bl	8005f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f000 f9f3 	bl	80062a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40001000 	.word	0x40001000
 8005f30:	40001400 	.word	0x40001400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	080248e0 	.word	0x080248e0

08005f40 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a34      	ldr	r2, [pc, #208]	@ (8006034 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f6e:	d018      	beq.n	8005fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a30      	ldr	r2, [pc, #192]	@ (8006038 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800603c <HAL_TIM_Base_Start_IT+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a2d      	ldr	r2, [pc, #180]	@ (8006040 <HAL_TIM_Base_Start_IT+0xec>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a2c      	ldr	r2, [pc, #176]	@ (8006044 <HAL_TIM_Base_Start_IT+0xf0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIM_Base_Start_IT+0x4e>
 8005f98:	f240 11d3 	movw	r1, #467	@ 0x1d3
 8005f9c:	482a      	ldr	r0, [pc, #168]	@ (8006048 <HAL_TIM_Base_Start_IT+0xf4>)
 8005f9e:	f7fb fbfb 	bl	8001798 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_Base_Start_IT+0x5e>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e03b      	b.n	800602a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0201 	orr.w	r2, r2, #1
 8005fc8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <HAL_TIM_Base_Start_IT+0xe0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x94>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x94>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a17      	ldr	r2, [pc, #92]	@ (8006040 <HAL_TIM_Base_Start_IT+0xec>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d115      	bne.n	8006014 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	4b17      	ldr	r3, [pc, #92]	@ (800604c <HAL_TIM_Base_Start_IT+0xf8>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d015      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0xd2>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006000:	d011      	beq.n	8006026 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006012:	e008      	b.n	8006026 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e000      	b.n	8006028 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00
 8006038:	40001000 	.word	0x40001000
 800603c:	40001400 	.word	0x40001400
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	080248e0 	.word	0x080248e0
 800604c:	00010007 	.word	0x00010007

08006050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d020      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f06f 0202 	mvn.w	r2, #2
 8006084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8e4 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 80060a0:	e005      	b.n	80060ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8d6 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8e7 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d020      	beq.n	8006100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0204 	mvn.w	r2, #4
 80060d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8be 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 80060ec:	e005      	b.n	80060fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8b0 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8c1 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d020      	beq.n	800614c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01b      	beq.n	800614c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0208 	mvn.w	r2, #8
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2204      	movs	r2, #4
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f898 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f88a 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f89b 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	2b00      	cmp	r3, #0
 8006154:	d020      	beq.n	8006198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01b      	beq.n	8006198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f06f 0210 	mvn.w	r2, #16
 8006168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2208      	movs	r2, #8
 800616e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f872 	bl	8006268 <HAL_TIM_IC_CaptureCallback>
 8006184:	e005      	b.n	8006192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f864 	bl	8006254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f875 	bl	800627c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0201 	mvn.w	r2, #1
 80061b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb fad6 	bl	8001768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d007      	beq.n	80061e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f8d0 	bl	8006380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00c      	beq.n	8006204 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f8c8 	bl	8006394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f834 	bl	8006290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0320 	and.w	r3, r3, #32
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0220 	mvn.w	r2, #32
 8006244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f890 	bl	800636c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006360 <TIM_Base_SetConfig+0xbc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_Base_SetConfig+0x20>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c2:	d108      	bne.n	80062d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a21      	ldr	r2, [pc, #132]	@ (8006360 <TIM_Base_SetConfig+0xbc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x52>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x52>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006364 <TIM_Base_SetConfig+0xc0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x52>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006368 <TIM_Base_SetConfig+0xc4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0c      	ldr	r2, [pc, #48]	@ (8006360 <TIM_Base_SetConfig+0xbc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d007      	beq.n	8006344 <TIM_Base_SetConfig+0xa0>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0b      	ldr	r2, [pc, #44]	@ (8006364 <TIM_Base_SetConfig+0xc0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_Base_SetConfig+0xa0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a0a      	ldr	r2, [pc, #40]	@ (8006368 <TIM_Base_SetConfig+0xc4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d103      	bne.n	800634c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	615a      	str	r2, [r3, #20]
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400

0800636c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e077      	b.n	80064aa <HAL_UART_Init+0x102>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d019      	beq.n	80063f6 <HAL_UART_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a3b      	ldr	r2, [pc, #236]	@ (80064b4 <HAL_UART_Init+0x10c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d02d      	beq.n	8006428 <HAL_UART_Init+0x80>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a39      	ldr	r2, [pc, #228]	@ (80064b8 <HAL_UART_Init+0x110>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d028      	beq.n	8006428 <HAL_UART_Init+0x80>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a38      	ldr	r2, [pc, #224]	@ (80064bc <HAL_UART_Init+0x114>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d023      	beq.n	8006428 <HAL_UART_Init+0x80>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a36      	ldr	r2, [pc, #216]	@ (80064c0 <HAL_UART_Init+0x118>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01e      	beq.n	8006428 <HAL_UART_Init+0x80>
 80063ea:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 80063ee:	4835      	ldr	r0, [pc, #212]	@ (80064c4 <HAL_UART_Init+0x11c>)
 80063f0:	f7fb f9d2 	bl	8001798 <assert_failed>
 80063f4:	e018      	b.n	8006428 <HAL_UART_Init+0x80>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2e      	ldr	r2, [pc, #184]	@ (80064b4 <HAL_UART_Init+0x10c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_UART_Init+0x80>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2c      	ldr	r2, [pc, #176]	@ (80064b8 <HAL_UART_Init+0x110>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_UART_Init+0x80>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2b      	ldr	r2, [pc, #172]	@ (80064bc <HAL_UART_Init+0x114>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_UART_Init+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a29      	ldr	r2, [pc, #164]	@ (80064c0 <HAL_UART_Init+0x118>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_UART_Init+0x80>
 800641e:	f240 1157 	movw	r1, #343	@ 0x157
 8006422:	4828      	ldr	r0, [pc, #160]	@ (80064c4 <HAL_UART_Init+0x11c>)
 8006424:	f7fb f9b8 	bl	8001798 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800642c:	2b00      	cmp	r3, #0
 800642e:	d106      	bne.n	800643e <HAL_UART_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7fb fc27 	bl	8001c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2224      	movs	r2, #36	@ 0x24
 8006442:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_Init+0xba>
  {
    UART_AdvFeatureConfig(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbbb 	bl	8006bd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8ba 	bl	80065dc <UART_SetConfig>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_UART_Init+0xca>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e01b      	b.n	80064aa <HAL_UART_Init+0x102>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006480:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006490:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fce8 	bl	8006e78 <UART_CheckIdleState>
 80064a8:	4603      	mov	r3, r0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40013800 	.word	0x40013800
 80064b8:	40004400 	.word	0x40004400
 80064bc:	40004800 	.word	0x40004800
 80064c0:	40008000 	.word	0x40008000
 80064c4:	08024918 	.word	0x08024918

080064c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	@ 0x28
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d177      	bne.n	80065d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_UART_Transmit+0x24>
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e070      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2221      	movs	r2, #33	@ 0x21
 80064fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064fe:	f7fb fc73 	bl	8001de8 <HAL_GetTick>
 8006502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651c:	d108      	bne.n	8006530 <HAL_UART_Transmit+0x68>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	e003      	b.n	8006538 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006538:	e02f      	b.n	800659a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	@ 0x80
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fd3f 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d004      	beq.n	800655a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e03b      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800656c:	b292      	uxth	r2, r2
 800656e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	3302      	adds	r3, #2
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	e007      	b.n	8006588 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	781a      	ldrb	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	3301      	adds	r3, #1
 8006586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1c9      	bne.n	800653a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2200      	movs	r2, #0
 80065ae:	2140      	movs	r1, #64	@ 0x40
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fd09 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e005      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e000      	b.n	80065d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
  }
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3720      	adds	r7, #32
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e0:	b08a      	sub	sp, #40	@ 0x28
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint32_t lpuart_ker_ck_pres;
#endif /* USART_PRESC_PRESCALER */
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4a9e      	ldr	r2, [pc, #632]	@ (800686c <UART_SetConfig+0x290>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d904      	bls.n	8006600 <UART_SetConfig+0x24>
 80065f6:	f640 414d 	movw	r1, #3149	@ 0xc4d
 80065fa:	489d      	ldr	r0, [pc, #628]	@ (8006870 <UART_SetConfig+0x294>)
 80065fc:	f7fb f8cc 	bl	8001798 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006608:	d00d      	beq.n	8006626 <UART_SetConfig+0x4a>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <UART_SetConfig+0x4a>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661a:	d004      	beq.n	8006626 <UART_SetConfig+0x4a>
 800661c:	f640 414e 	movw	r1, #3150	@ 0xc4e
 8006620:	4893      	ldr	r0, [pc, #588]	@ (8006870 <UART_SetConfig+0x294>)
 8006622:	f7fb f8b9 	bl	8001798 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a92      	ldr	r2, [pc, #584]	@ (8006874 <UART_SetConfig+0x298>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d10e      	bne.n	800664e <UART_SetConfig+0x72>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d030      	beq.n	800669a <UART_SetConfig+0xbe>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006640:	d02b      	beq.n	800669a <UART_SetConfig+0xbe>
 8006642:	f640 4151 	movw	r1, #3153	@ 0xc51
 8006646:	488a      	ldr	r0, [pc, #552]	@ (8006870 <UART_SetConfig+0x294>)
 8006648:	f7fb f8a6 	bl	8001798 <assert_failed>
 800664c:	e025      	b.n	800669a <UART_SetConfig+0xbe>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006656:	d012      	beq.n	800667e <UART_SetConfig+0xa2>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <UART_SetConfig+0xa2>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006668:	d009      	beq.n	800667e <UART_SetConfig+0xa2>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006672:	d004      	beq.n	800667e <UART_SetConfig+0xa2>
 8006674:	f640 4155 	movw	r1, #3157	@ 0xc55
 8006678:	487d      	ldr	r0, [pc, #500]	@ (8006870 <UART_SetConfig+0x294>)
 800667a:	f7fb f88d 	bl	8001798 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <UART_SetConfig+0xbe>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800668e:	d004      	beq.n	800669a <UART_SetConfig+0xbe>
 8006690:	f640 4156 	movw	r1, #3158	@ 0xc56
 8006694:	4876      	ldr	r0, [pc, #472]	@ (8006870 <UART_SetConfig+0x294>)
 8006696:	f7fb f87f 	bl	8001798 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00e      	beq.n	80066c0 <UART_SetConfig+0xe4>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066aa:	d009      	beq.n	80066c0 <UART_SetConfig+0xe4>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066b4:	d004      	beq.n	80066c0 <UART_SetConfig+0xe4>
 80066b6:	f640 4159 	movw	r1, #3161	@ 0xc59
 80066ba:	486d      	ldr	r0, [pc, #436]	@ (8006870 <UART_SetConfig+0x294>)
 80066bc:	f7fb f86c 	bl	8001798 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f023 030c 	bic.w	r3, r3, #12
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <UART_SetConfig+0xf8>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <UART_SetConfig+0x102>
 80066d4:	f640 415a 	movw	r1, #3162	@ 0xc5a
 80066d8:	4865      	ldr	r0, [pc, #404]	@ (8006870 <UART_SetConfig+0x294>)
 80066da:	f7fb f85d 	bl	8001798 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <UART_SetConfig+0x132>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ee:	d00e      	beq.n	800670e <UART_SetConfig+0x132>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f8:	d009      	beq.n	800670e <UART_SetConfig+0x132>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006702:	d004      	beq.n	800670e <UART_SetConfig+0x132>
 8006704:	f640 415b 	movw	r1, #3163	@ 0xc5b
 8006708:	4859      	ldr	r0, [pc, #356]	@ (8006870 <UART_SetConfig+0x294>)
 800670a:	f7fb f845 	bl	8001798 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <UART_SetConfig+0x14e>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800671e:	d004      	beq.n	800672a <UART_SetConfig+0x14e>
 8006720:	f640 415c 	movw	r1, #3164	@ 0xc5c
 8006724:	4852      	ldr	r0, [pc, #328]	@ (8006870 <UART_SetConfig+0x294>)
 8006726:	f7fb f837 	bl	8001798 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	431a      	orrs	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	4313      	orrs	r3, r2
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	4b4b      	ldr	r3, [pc, #300]	@ (8006878 <UART_SetConfig+0x29c>)
 800674a:	4013      	ands	r3, r2
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006752:	430b      	orrs	r3, r1
 8006754:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3f      	ldr	r2, [pc, #252]	@ (8006874 <UART_SetConfig+0x298>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <UART_SetConfig+0x1aa>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006782:	4313      	orrs	r3, r2
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006796:	430a      	orrs	r2, r1
 8006798:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a37      	ldr	r2, [pc, #220]	@ (800687c <UART_SetConfig+0x2a0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d125      	bne.n	80067f0 <UART_SetConfig+0x214>
 80067a4:	4b36      	ldr	r3, [pc, #216]	@ (8006880 <UART_SetConfig+0x2a4>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d81a      	bhi.n	80067e8 <UART_SetConfig+0x20c>
 80067b2:	a201      	add	r2, pc, #4	@ (adr r2, 80067b8 <UART_SetConfig+0x1dc>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	080067d1 	.word	0x080067d1
 80067c4:	080067e1 	.word	0x080067e1
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ce:	e0b9      	b.n	8006944 <UART_SetConfig+0x368>
 80067d0:	2302      	movs	r3, #2
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e0b5      	b.n	8006944 <UART_SetConfig+0x368>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e0b1      	b.n	8006944 <UART_SetConfig+0x368>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e0ad      	b.n	8006944 <UART_SetConfig+0x368>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e0a9      	b.n	8006944 <UART_SetConfig+0x368>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a23      	ldr	r2, [pc, #140]	@ (8006884 <UART_SetConfig+0x2a8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d146      	bne.n	8006888 <UART_SetConfig+0x2ac>
 80067fa:	4b21      	ldr	r3, [pc, #132]	@ (8006880 <UART_SetConfig+0x2a4>)
 80067fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006800:	f003 030c 	and.w	r3, r3, #12
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d82d      	bhi.n	8006864 <UART_SetConfig+0x288>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <UART_SetConfig+0x234>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006845 	.word	0x08006845
 8006814:	08006865 	.word	0x08006865
 8006818:	08006865 	.word	0x08006865
 800681c:	08006865 	.word	0x08006865
 8006820:	08006855 	.word	0x08006855
 8006824:	08006865 	.word	0x08006865
 8006828:	08006865 	.word	0x08006865
 800682c:	08006865 	.word	0x08006865
 8006830:	0800684d 	.word	0x0800684d
 8006834:	08006865 	.word	0x08006865
 8006838:	08006865 	.word	0x08006865
 800683c:	08006865 	.word	0x08006865
 8006840:	0800685d 	.word	0x0800685d
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684a:	e07b      	b.n	8006944 <UART_SetConfig+0x368>
 800684c:	2302      	movs	r3, #2
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006852:	e077      	b.n	8006944 <UART_SetConfig+0x368>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685a:	e073      	b.n	8006944 <UART_SetConfig+0x368>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006862:	e06f      	b.n	8006944 <UART_SetConfig+0x368>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800686a:	e06b      	b.n	8006944 <UART_SetConfig+0x368>
 800686c:	00989680 	.word	0x00989680
 8006870:	08024918 	.word	0x08024918
 8006874:	40008000 	.word	0x40008000
 8006878:	efff69f3 	.word	0xefff69f3
 800687c:	40013800 	.word	0x40013800
 8006880:	40021000 	.word	0x40021000
 8006884:	40004400 	.word	0x40004400
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4aaf      	ldr	r2, [pc, #700]	@ (8006b4c <UART_SetConfig+0x570>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d125      	bne.n	80068de <UART_SetConfig+0x302>
 8006892:	4baf      	ldr	r3, [pc, #700]	@ (8006b50 <UART_SetConfig+0x574>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006898:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800689c:	2b30      	cmp	r3, #48	@ 0x30
 800689e:	d016      	beq.n	80068ce <UART_SetConfig+0x2f2>
 80068a0:	2b30      	cmp	r3, #48	@ 0x30
 80068a2:	d818      	bhi.n	80068d6 <UART_SetConfig+0x2fa>
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d00a      	beq.n	80068be <UART_SetConfig+0x2e2>
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d814      	bhi.n	80068d6 <UART_SetConfig+0x2fa>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <UART_SetConfig+0x2da>
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d008      	beq.n	80068c6 <UART_SetConfig+0x2ea>
 80068b4:	e00f      	b.n	80068d6 <UART_SetConfig+0x2fa>
 80068b6:	2300      	movs	r3, #0
 80068b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068bc:	e042      	b.n	8006944 <UART_SetConfig+0x368>
 80068be:	2302      	movs	r3, #2
 80068c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068c4:	e03e      	b.n	8006944 <UART_SetConfig+0x368>
 80068c6:	2304      	movs	r3, #4
 80068c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068cc:	e03a      	b.n	8006944 <UART_SetConfig+0x368>
 80068ce:	2308      	movs	r3, #8
 80068d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d4:	e036      	b.n	8006944 <UART_SetConfig+0x368>
 80068d6:	2310      	movs	r3, #16
 80068d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068dc:	e032      	b.n	8006944 <UART_SetConfig+0x368>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a9c      	ldr	r2, [pc, #624]	@ (8006b54 <UART_SetConfig+0x578>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d12a      	bne.n	800693e <UART_SetConfig+0x362>
 80068e8:	4b99      	ldr	r3, [pc, #612]	@ (8006b50 <UART_SetConfig+0x574>)
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068f6:	d01a      	beq.n	800692e <UART_SetConfig+0x352>
 80068f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068fc:	d81b      	bhi.n	8006936 <UART_SetConfig+0x35a>
 80068fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006902:	d00c      	beq.n	800691e <UART_SetConfig+0x342>
 8006904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006908:	d815      	bhi.n	8006936 <UART_SetConfig+0x35a>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <UART_SetConfig+0x33a>
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006912:	d008      	beq.n	8006926 <UART_SetConfig+0x34a>
 8006914:	e00f      	b.n	8006936 <UART_SetConfig+0x35a>
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691c:	e012      	b.n	8006944 <UART_SetConfig+0x368>
 800691e:	2302      	movs	r3, #2
 8006920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006924:	e00e      	b.n	8006944 <UART_SetConfig+0x368>
 8006926:	2304      	movs	r3, #4
 8006928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800692c:	e00a      	b.n	8006944 <UART_SetConfig+0x368>
 800692e:	2308      	movs	r3, #8
 8006930:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006934:	e006      	b.n	8006944 <UART_SetConfig+0x368>
 8006936:	2310      	movs	r3, #16
 8006938:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800693c:	e002      	b.n	8006944 <UART_SetConfig+0x368>
 800693e:	2310      	movs	r3, #16
 8006940:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a82      	ldr	r2, [pc, #520]	@ (8006b54 <UART_SetConfig+0x578>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d179      	bne.n	8006a42 <UART_SetConfig+0x466>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800694e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006952:	2b08      	cmp	r3, #8
 8006954:	d823      	bhi.n	800699e <UART_SetConfig+0x3c2>
 8006956:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <UART_SetConfig+0x380>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	08006981 	.word	0x08006981
 8006960:	0800699f 	.word	0x0800699f
 8006964:	08006989 	.word	0x08006989
 8006968:	0800699f 	.word	0x0800699f
 800696c:	0800698f 	.word	0x0800698f
 8006970:	0800699f 	.word	0x0800699f
 8006974:	0800699f 	.word	0x0800699f
 8006978:	0800699f 	.word	0x0800699f
 800697c:	08006997 	.word	0x08006997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006980:	f7fd fb3e 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8006984:	61f8      	str	r0, [r7, #28]
        break;
 8006986:	e010      	b.n	80069aa <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006988:	4b73      	ldr	r3, [pc, #460]	@ (8006b58 <UART_SetConfig+0x57c>)
 800698a:	61fb      	str	r3, [r7, #28]
        break;
 800698c:	e00d      	b.n	80069aa <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698e:	f7fd fa9f 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8006992:	61f8      	str	r0, [r7, #28]
        break;
 8006994:	e009      	b.n	80069aa <UART_SetConfig+0x3ce>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699a:	61fb      	str	r3, [r7, #28]
        break;
 800699c:	e005      	b.n	80069aa <UART_SetConfig+0x3ce>
      default:
        pclk = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8103 	beq.w	8006bb8 <UART_SetConfig+0x5dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4413      	add	r3, r2
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d305      	bcc.n	80069ce <UART_SetConfig+0x3f2>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d903      	bls.n	80069d6 <UART_SetConfig+0x3fa>
      {
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069d4:	e0f0      	b.n	8006bb8 <UART_SetConfig+0x5dc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	2200      	movs	r2, #0
 80069da:	461c      	mov	r4, r3
 80069dc:	4615      	mov	r5, r2
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	022b      	lsls	r3, r5, #8
 80069e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069ec:	0222      	lsls	r2, r4, #8
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	6849      	ldr	r1, [r1, #4]
 80069f2:	0849      	lsrs	r1, r1, #1
 80069f4:	2000      	movs	r0, #0
 80069f6:	4688      	mov	r8, r1
 80069f8:	4681      	mov	r9, r0
 80069fa:	eb12 0a08 	adds.w	sl, r2, r8
 80069fe:	eb43 0b09 	adc.w	fp, r3, r9
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a10:	4650      	mov	r0, sl
 8006a12:	4659      	mov	r1, fp
 8006a14:	f7fa f8e8 	bl	8000be8 <__aeabi_uldivmod>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a26:	d308      	bcc.n	8006a3a <UART_SetConfig+0x45e>
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2e:	d204      	bcs.n	8006a3a <UART_SetConfig+0x45e>
        {
          huart->Instance->BRR = usartdiv;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	60da      	str	r2, [r3, #12]
 8006a38:	e0be      	b.n	8006bb8 <UART_SetConfig+0x5dc>
        }
        else
        {
          ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a40:	e0ba      	b.n	8006bb8 <UART_SetConfig+0x5dc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4a:	d15e      	bne.n	8006b0a <UART_SetConfig+0x52e>
  {
    switch (clocksource)
 8006a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d828      	bhi.n	8006aa6 <UART_SetConfig+0x4ca>
 8006a54:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <UART_SetConfig+0x480>)
 8006a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a91 	.word	0x08006a91
 8006a68:	08006aa7 	.word	0x08006aa7
 8006a6c:	08006a97 	.word	0x08006a97
 8006a70:	08006aa7 	.word	0x08006aa7
 8006a74:	08006aa7 	.word	0x08006aa7
 8006a78:	08006aa7 	.word	0x08006aa7
 8006a7c:	08006a9f 	.word	0x08006a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a80:	f7fd fabe 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8006a84:	61f8      	str	r0, [r7, #28]
        break;
 8006a86:	e014      	b.n	8006ab2 <UART_SetConfig+0x4d6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a88:	f7fd fad0 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8006a8c:	61f8      	str	r0, [r7, #28]
        break;
 8006a8e:	e010      	b.n	8006ab2 <UART_SetConfig+0x4d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a90:	4b31      	ldr	r3, [pc, #196]	@ (8006b58 <UART_SetConfig+0x57c>)
 8006a92:	61fb      	str	r3, [r7, #28]
        break;
 8006a94:	e00d      	b.n	8006ab2 <UART_SetConfig+0x4d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a96:	f7fd fa1b 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8006a9a:	61f8      	str	r0, [r7, #28]
        break;
 8006a9c:	e009      	b.n	8006ab2 <UART_SetConfig+0x4d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa2:	61fb      	str	r3, [r7, #28]
        break;
 8006aa4:	e005      	b.n	8006ab2 <UART_SetConfig+0x4d6>
      default:
        pclk = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d07f      	beq.n	8006bb8 <UART_SetConfig+0x5dc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	005a      	lsls	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	441a      	add	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006acc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b0f      	cmp	r3, #15
 8006ad2:	d916      	bls.n	8006b02 <UART_SetConfig+0x526>
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ada:	d212      	bcs.n	8006b02 <UART_SetConfig+0x526>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f023 030f 	bic.w	r3, r3, #15
 8006ae4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	8afb      	ldrh	r3, [r7, #22]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	8afa      	ldrh	r2, [r7, #22]
 8006afe:	60da      	str	r2, [r3, #12]
 8006b00:	e05a      	b.n	8006bb8 <UART_SetConfig+0x5dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b08:	e056      	b.n	8006bb8 <UART_SetConfig+0x5dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d82f      	bhi.n	8006b72 <UART_SetConfig+0x596>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0x53c>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b5d 	.word	0x08006b5d
 8006b24:	08006b73 	.word	0x08006b73
 8006b28:	08006b63 	.word	0x08006b63
 8006b2c:	08006b73 	.word	0x08006b73
 8006b30:	08006b73 	.word	0x08006b73
 8006b34:	08006b73 	.word	0x08006b73
 8006b38:	08006b6b 	.word	0x08006b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b3c:	f7fd fa60 	bl	8004000 <HAL_RCC_GetPCLK1Freq>
 8006b40:	61f8      	str	r0, [r7, #28]
        break;
 8006b42:	e01c      	b.n	8006b7e <UART_SetConfig+0x5a2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b44:	f7fd fa72 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8006b48:	61f8      	str	r0, [r7, #28]
        break;
 8006b4a:	e018      	b.n	8006b7e <UART_SetConfig+0x5a2>
 8006b4c:	40004800 	.word	0x40004800
 8006b50:	40021000 	.word	0x40021000
 8006b54:	40008000 	.word	0x40008000
 8006b58:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd4 <UART_SetConfig+0x5f8>)
 8006b5e:	61fb      	str	r3, [r7, #28]
        break;
 8006b60:	e00d      	b.n	8006b7e <UART_SetConfig+0x5a2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b62:	f7fd f9b5 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8006b66:	61f8      	str	r0, [r7, #28]
        break;
 8006b68:	e009      	b.n	8006b7e <UART_SetConfig+0x5a2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b6e:	61fb      	str	r3, [r7, #28]
        break;
 8006b70:	e005      	b.n	8006b7e <UART_SetConfig+0x5a2>
      default:
        pclk = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b7c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d019      	beq.n	8006bb8 <UART_SetConfig+0x5dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	085a      	lsrs	r2, r3, #1
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	441a      	add	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b0f      	cmp	r3, #15
 8006b9c:	d909      	bls.n	8006bb2 <UART_SetConfig+0x5d6>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba4:	d205      	bcs.n	8006bb2 <UART_SetConfig+0x5d6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60da      	str	r2, [r3, #12]
 8006bb0:	e002      	b.n	8006bb8 <UART_SetConfig+0x5dc>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006bc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3728      	adds	r7, #40	@ 0x28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd2:	bf00      	nop
 8006bd4:	00f42400 	.word	0x00f42400

08006bd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	2bff      	cmp	r3, #255	@ 0xff
 8006be6:	d904      	bls.n	8006bf2 <UART_AdvFeatureConfig+0x1a>
 8006be8:	f640 5142 	movw	r1, #3394	@ 0xd42
 8006bec:	4896      	ldr	r0, [pc, #600]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006bee:	f7fa fdd3 	bl	8001798 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	f003 0308 	and.w	r3, r3, #8
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d018      	beq.n	8006c30 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <UART_AdvFeatureConfig+0x42>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c0e:	d004      	beq.n	8006c1a <UART_AdvFeatureConfig+0x42>
 8006c10:	f640 5147 	movw	r1, #3399	@ 0xd47
 8006c14:	488c      	ldr	r0, [pc, #560]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006c16:	f7fa fdbf 	bl	8001798 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d018      	beq.n	8006c6e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d009      	beq.n	8006c58 <UART_AdvFeatureConfig+0x80>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c4c:	d004      	beq.n	8006c58 <UART_AdvFeatureConfig+0x80>
 8006c4e:	f640 514e 	movw	r1, #3406	@ 0xd4e
 8006c52:	487d      	ldr	r0, [pc, #500]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006c54:	f7fa fda0 	bl	8001798 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d018      	beq.n	8006cac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <UART_AdvFeatureConfig+0xbe>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8a:	d004      	beq.n	8006c96 <UART_AdvFeatureConfig+0xbe>
 8006c8c:	f640 5155 	movw	r1, #3413	@ 0xd55
 8006c90:	486d      	ldr	r0, [pc, #436]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006c92:	f7fa fd81 	bl	8001798 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d018      	beq.n	8006cea <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <UART_AdvFeatureConfig+0xfc>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cc8:	d004      	beq.n	8006cd4 <UART_AdvFeatureConfig+0xfc>
 8006cca:	f640 515c 	movw	r1, #3420	@ 0xd5c
 8006cce:	485e      	ldr	r0, [pc, #376]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006cd0:	f7fa fd62 	bl	8001798 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d018      	beq.n	8006d28 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <UART_AdvFeatureConfig+0x13a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d06:	d004      	beq.n	8006d12 <UART_AdvFeatureConfig+0x13a>
 8006d08:	f640 5163 	movw	r1, #3427	@ 0xd63
 8006d0c:	484e      	ldr	r0, [pc, #312]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006d0e:	f7fa fd43 	bl	8001798 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d018      	beq.n	8006d66 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d009      	beq.n	8006d50 <UART_AdvFeatureConfig+0x178>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d44:	d004      	beq.n	8006d50 <UART_AdvFeatureConfig+0x178>
 8006d46:	f640 516a 	movw	r1, #3434	@ 0xd6a
 8006d4a:	483f      	ldr	r0, [pc, #252]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006d4c:	f7fa fd24 	bl	8001798 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	430a      	orrs	r2, r1
 8006d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d054      	beq.n	8006e1c <UART_AdvFeatureConfig+0x244>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a35      	ldr	r2, [pc, #212]	@ (8006e4c <UART_AdvFeatureConfig+0x274>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <UART_AdvFeatureConfig+0x1c2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a33      	ldr	r2, [pc, #204]	@ (8006e50 <UART_AdvFeatureConfig+0x278>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <UART_AdvFeatureConfig+0x1c2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a32      	ldr	r2, [pc, #200]	@ (8006e54 <UART_AdvFeatureConfig+0x27c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <UART_AdvFeatureConfig+0x1c2>
 8006d90:	f640 5171 	movw	r1, #3441	@ 0xd71
 8006d94:	482c      	ldr	r0, [pc, #176]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006d96:	f7fa fcff 	bl	8001798 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <UART_AdvFeatureConfig+0x1de>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006daa:	d004      	beq.n	8006db6 <UART_AdvFeatureConfig+0x1de>
 8006dac:	f640 5172 	movw	r1, #3442	@ 0xd72
 8006db0:	4825      	ldr	r0, [pc, #148]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006db2:	f7fa fcf1 	bl	8001798 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd4:	d122      	bne.n	8006e1c <UART_AdvFeatureConfig+0x244>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d013      	beq.n	8006e06 <UART_AdvFeatureConfig+0x22e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006de6:	d00e      	beq.n	8006e06 <UART_AdvFeatureConfig+0x22e>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006df0:	d009      	beq.n	8006e06 <UART_AdvFeatureConfig+0x22e>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dfa:	d004      	beq.n	8006e06 <UART_AdvFeatureConfig+0x22e>
 8006dfc:	f640 5177 	movw	r1, #3447	@ 0xd77
 8006e00:	4811      	ldr	r0, [pc, #68]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006e02:	f7fa fcc9 	bl	8001798 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d022      	beq.n	8006e6e <UART_AdvFeatureConfig+0x296>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d013      	beq.n	8006e58 <UART_AdvFeatureConfig+0x280>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e38:	d00e      	beq.n	8006e58 <UART_AdvFeatureConfig+0x280>
 8006e3a:	f640 517f 	movw	r1, #3455	@ 0xd7f
 8006e3e:	4802      	ldr	r0, [pc, #8]	@ (8006e48 <UART_AdvFeatureConfig+0x270>)
 8006e40:	f7fa fcaa 	bl	8001798 <assert_failed>
 8006e44:	e008      	b.n	8006e58 <UART_AdvFeatureConfig+0x280>
 8006e46:	bf00      	nop
 8006e48:	08024918 	.word	0x08024918
 8006e4c:	40013800 	.word	0x40013800
 8006e50:	40004400 	.word	0x40004400
 8006e54:	40004800 	.word	0x40004800
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b098      	sub	sp, #96	@ 0x60
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e88:	f7fa ffae 	bl	8001de8 <HAL_GetTick>
 8006e8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d12e      	bne.n	8006efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f88c 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d021      	beq.n	8006efa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ed6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e6      	bne.n	8006eb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2220      	movs	r2, #32
 8006eec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e062      	b.n	8006fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d149      	bne.n	8006f9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f10:	2200      	movs	r2, #0
 8006f12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f856 	bl	8006fc8 <UART_WaitOnFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d03c      	beq.n	8006f9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f74:	61fa      	str	r2, [r7, #28]
 8006f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	617b      	str	r3, [r7, #20]
   return(result);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e011      	b.n	8006fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3758      	adds	r7, #88	@ 0x58
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd8:	e049      	b.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe0:	d045      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fa ff01 	bl	8001de8 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e048      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0304 	and.w	r3, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	d031      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d110      	bne.n	800703a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2208      	movs	r2, #8
 800701e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f838 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2208      	movs	r2, #8
 800702a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e029      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007048:	d111      	bne.n	800706e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f81e 	bl	8007096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e00f      	b.n	800708e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4013      	ands	r3, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	429a      	cmp	r2, r3
 800707c:	bf0c      	ite	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	2300      	movne	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	461a      	mov	r2, r3
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	429a      	cmp	r2, r3
 800708a:	d0a6      	beq.n	8006fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007096:	b480      	push	{r7}
 8007098:	b095      	sub	sp, #84	@ 0x54
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e6      	bne.n	800709e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	3308      	adds	r3, #8
 80070ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007108:	2b01      	cmp	r3, #1
 800710a:	d118      	bne.n	800713e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	60bb      	str	r3, [r7, #8]
   return(result);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f023 0310 	bic.w	r3, r3, #16
 8007120:	647b      	str	r3, [r7, #68]	@ 0x44
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6979      	ldr	r1, [r7, #20]
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	613b      	str	r3, [r7, #16]
   return(result);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e6      	bne.n	800710c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007152:	bf00      	nop
 8007154:	3754      	adds	r7, #84	@ 0x54
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
	...

08007160 <__NVIC_SetPriority>:
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800716c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007170:	2b00      	cmp	r3, #0
 8007172:	db0a      	blt.n	800718a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	490c      	ldr	r1, [pc, #48]	@ (80071ac <__NVIC_SetPriority+0x4c>)
 800717a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717e:	0112      	lsls	r2, r2, #4
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	440b      	add	r3, r1
 8007184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007188:	e00a      	b.n	80071a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	b2da      	uxtb	r2, r3
 800718e:	4908      	ldr	r1, [pc, #32]	@ (80071b0 <__NVIC_SetPriority+0x50>)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	3b04      	subs	r3, #4
 8007198:	0112      	lsls	r2, r2, #4
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	440b      	add	r3, r1
 800719e:	761a      	strb	r2, [r3, #24]
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	e000e100 	.word	0xe000e100
 80071b0:	e000ed00 	.word	0xe000ed00

080071b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071b4:	b580      	push	{r7, lr}
 80071b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80071b8:	4b05      	ldr	r3, [pc, #20]	@ (80071d0 <SysTick_Handler+0x1c>)
 80071ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071bc:	f001 ffbc 	bl	8009138 <xTaskGetSchedulerState>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d001      	beq.n	80071ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80071c6:	f002 feb7 	bl	8009f38 <xPortSysTickHandler>
  }
}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000e010 	.word	0xe000e010

080071d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071d8:	2100      	movs	r1, #0
 80071da:	f06f 0004 	mvn.w	r0, #4
 80071de:	f7ff ffbf 	bl	8007160 <__NVIC_SetPriority>
#endif
}
 80071e2:	bf00      	nop
 80071e4:	bd80      	pop	{r7, pc}
	...

080071e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ee:	f3ef 8305 	mrs	r3, IPSR
 80071f2:	603b      	str	r3, [r7, #0]
  return(result);
 80071f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071fa:	f06f 0305 	mvn.w	r3, #5
 80071fe:	607b      	str	r3, [r7, #4]
 8007200:	e00c      	b.n	800721c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007202:	4b0a      	ldr	r3, [pc, #40]	@ (800722c <osKernelInitialize+0x44>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800720a:	4b08      	ldr	r3, [pc, #32]	@ (800722c <osKernelInitialize+0x44>)
 800720c:	2201      	movs	r2, #1
 800720e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007210:	2300      	movs	r3, #0
 8007212:	607b      	str	r3, [r7, #4]
 8007214:	e002      	b.n	800721c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007216:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800721a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800721c:	687b      	ldr	r3, [r7, #4]
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	200007c0 	.word	0x200007c0

08007230 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007236:	f3ef 8305 	mrs	r3, IPSR
 800723a:	603b      	str	r3, [r7, #0]
  return(result);
 800723c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007242:	f06f 0305 	mvn.w	r3, #5
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	e010      	b.n	800726c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800724a:	4b0b      	ldr	r3, [pc, #44]	@ (8007278 <osKernelStart+0x48>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d109      	bne.n	8007266 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007252:	f7ff ffbf 	bl	80071d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007256:	4b08      	ldr	r3, [pc, #32]	@ (8007278 <osKernelStart+0x48>)
 8007258:	2202      	movs	r2, #2
 800725a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800725c:	f001 fae6 	bl	800882c <vTaskStartScheduler>
      stat = osOK;
 8007260:	2300      	movs	r3, #0
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	e002      	b.n	800726c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800726a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800726c:	687b      	ldr	r3, [r7, #4]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	200007c0 	.word	0x200007c0

0800727c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b08e      	sub	sp, #56	@ 0x38
 8007280:	af04      	add	r7, sp, #16
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800728c:	f3ef 8305 	mrs	r3, IPSR
 8007290:	617b      	str	r3, [r7, #20]
  return(result);
 8007292:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007294:	2b00      	cmp	r3, #0
 8007296:	d17e      	bne.n	8007396 <osThreadNew+0x11a>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d07b      	beq.n	8007396 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800729e:	2380      	movs	r3, #128	@ 0x80
 80072a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072a2:	2318      	movs	r3, #24
 80072a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80072aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d045      	beq.n	8007342 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <osThreadNew+0x48>
        name = attr->name;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d008      	beq.n	80072ea <osThreadNew+0x6e>
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	2b38      	cmp	r3, #56	@ 0x38
 80072dc:	d805      	bhi.n	80072ea <osThreadNew+0x6e>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <osThreadNew+0x72>
        return (NULL);
 80072ea:	2300      	movs	r3, #0
 80072ec:	e054      	b.n	8007398 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	089b      	lsrs	r3, r3, #2
 80072fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00e      	beq.n	8007324 <osThreadNew+0xa8>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b5b      	cmp	r3, #91	@ 0x5b
 800730c:	d90a      	bls.n	8007324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007312:	2b00      	cmp	r3, #0
 8007314:	d006      	beq.n	8007324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <osThreadNew+0xa8>
        mem = 1;
 800731e:	2301      	movs	r3, #1
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	e010      	b.n	8007346 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10c      	bne.n	8007346 <osThreadNew+0xca>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d108      	bne.n	8007346 <osThreadNew+0xca>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <osThreadNew+0xca>
          mem = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	61bb      	str	r3, [r7, #24]
 8007340:	e001      	b.n	8007346 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d110      	bne.n	800736e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007354:	9202      	str	r2, [sp, #8]
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	6a3a      	ldr	r2, [r7, #32]
 8007360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f001 f80e 	bl	8008384 <xTaskCreateStatic>
 8007368:	4603      	mov	r3, r0
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	e013      	b.n	8007396 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d110      	bne.n	8007396 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	b29a      	uxth	r2, r3
 8007378:	f107 0310 	add.w	r3, r7, #16
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 f85c 	bl	8008444 <xTaskCreate>
 800738c:	4603      	mov	r3, r0
 800738e:	2b01      	cmp	r3, #1
 8007390:	d001      	beq.n	8007396 <osThreadNew+0x11a>
            hTask = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007396:	693b      	ldr	r3, [r7, #16]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3728      	adds	r7, #40	@ 0x28
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073a8:	f3ef 8305 	mrs	r3, IPSR
 80073ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <osDelay+0x1c>
    stat = osErrorISR;
 80073b4:	f06f 0305 	mvn.w	r3, #5
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e007      	b.n	80073cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 f9fa 	bl	80087c0 <vTaskDelay>
    }
  }

  return (stat);
 80073cc:	68fb      	ldr	r3, [r7, #12]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4a07      	ldr	r2, [pc, #28]	@ (8007404 <vApplicationGetIdleTaskMemory+0x2c>)
 80073e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4a06      	ldr	r2, [pc, #24]	@ (8007408 <vApplicationGetIdleTaskMemory+0x30>)
 80073ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2280      	movs	r2, #128	@ 0x80
 80073f4:	601a      	str	r2, [r3, #0]
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	200007c4 	.word	0x200007c4
 8007408:	20000820 	.word	0x20000820

0800740c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4a07      	ldr	r2, [pc, #28]	@ (8007438 <vApplicationGetTimerTaskMemory+0x2c>)
 800741c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4a06      	ldr	r2, [pc, #24]	@ (800743c <vApplicationGetTimerTaskMemory+0x30>)
 8007422:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800742a:	601a      	str	r2, [r3, #0]
}
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	20000a20 	.word	0x20000a20
 800743c:	20000a7c 	.word	0x20000a7c

08007440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f103 0208 	add.w	r2, r3, #8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f103 0208 	add.w	r2, r3, #8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f103 0208 	add.w	r2, r3, #8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800748e:	bf00      	nop
 8007490:	370c      	adds	r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	601a      	str	r2, [r3, #0]
}
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074f8:	d103      	bne.n	8007502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	60fb      	str	r3, [r7, #12]
 8007500:	e00c      	b.n	800751c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3308      	adds	r3, #8
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	e002      	b.n	8007510 <vListInsert+0x2e>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	429a      	cmp	r2, r3
 800751a:	d2f6      	bcs.n	800750a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6892      	ldr	r2, [r2, #8]
 800756a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6852      	ldr	r2, [r2, #4]
 8007574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	d103      	bne.n	8007588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	1e5a      	subs	r2, r3, #1
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10b      	bne.n	80075d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075d4:	f002 fc20 	bl	8009e18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e0:	68f9      	ldr	r1, [r7, #12]
 80075e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	441a      	add	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007604:	3b01      	subs	r3, #1
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800760a:	fb01 f303 	mul.w	r3, r1, r3
 800760e:	441a      	add	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	22ff      	movs	r2, #255	@ 0xff
 8007618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	22ff      	movs	r2, #255	@ 0xff
 8007620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d114      	bne.n	8007654 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01a      	beq.n	8007668 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3310      	adds	r3, #16
 8007636:	4618      	mov	r0, r3
 8007638:	f001 fbac 	bl	8008d94 <xTaskRemoveFromEventList>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d012      	beq.n	8007668 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <xQueueGenericReset+0xd0>)
 8007644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	e009      	b.n	8007668 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3310      	adds	r3, #16
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff fef1 	bl	8007440 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3324      	adds	r3, #36	@ 0x24
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff feec 	bl	8007440 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007668:	f002 fc08 	bl	8009e7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800766c:	2301      	movs	r3, #1
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08e      	sub	sp, #56	@ 0x38
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10b      	bne.n	80076a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076a2:	bf00      	nop
 80076a4:	bf00      	nop
 80076a6:	e7fd      	b.n	80076a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10b      	bne.n	80076c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	e7fd      	b.n	80076c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <xQueueGenericCreateStatic+0x56>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <xQueueGenericCreateStatic+0x5a>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <xQueueGenericCreateStatic+0x5c>
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10b      	bne.n	80076f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	623b      	str	r3, [r7, #32]
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	e7fd      	b.n	80076f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <xQueueGenericCreateStatic+0x84>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <xQueueGenericCreateStatic+0x88>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <xQueueGenericCreateStatic+0x8a>
 8007704:	2300      	movs	r3, #0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	61fb      	str	r3, [r7, #28]
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007722:	2350      	movs	r3, #80	@ 0x50
 8007724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b50      	cmp	r3, #80	@ 0x50
 800772a:	d00b      	beq.n	8007744 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	61bb      	str	r3, [r7, #24]
}
 800773e:	bf00      	nop
 8007740:	bf00      	nop
 8007742:	e7fd      	b.n	8007740 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007744:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800774a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00d      	beq.n	800776c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007758:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800775c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f840 	bl	80077ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800776e:	4618      	mov	r0, r3
 8007770:	3730      	adds	r7, #48	@ 0x30
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007776:	b580      	push	{r7, lr}
 8007778:	b08a      	sub	sp, #40	@ 0x28
 800777a:	af02      	add	r7, sp, #8
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	4613      	mov	r3, r2
 8007782:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	613b      	str	r3, [r7, #16]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	3350      	adds	r3, #80	@ 0x50
 80077b0:	4618      	mov	r0, r3
 80077b2:	f002 fc53 	bl	800a05c <pvPortMalloc>
 80077b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d011      	beq.n	80077e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	3350      	adds	r3, #80	@ 0x50
 80077c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077d0:	79fa      	ldrb	r2, [r7, #7]
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	4613      	mov	r3, r2
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 f805 	bl	80077ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077e2:	69bb      	ldr	r3, [r7, #24]
	}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d103      	bne.n	8007808 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	e002      	b.n	800780e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800781a:	2101      	movs	r1, #1
 800781c:	69b8      	ldr	r0, [r7, #24]
 800781e:	f7ff fec3 	bl	80075a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08e      	sub	sp, #56	@ 0x38
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007842:	2300      	movs	r3, #0
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800784a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <xQueueGenericSend+0x34>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <xQueueGenericSend+0x42>
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <xQueueGenericSend+0x46>
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <xQueueGenericSend+0x48>
 800787a:	2300      	movs	r3, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <xQueueGenericSend+0x64>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d103      	bne.n	80078a6 <xQueueGenericSend+0x72>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <xQueueGenericSend+0x76>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e000      	b.n	80078ac <xQueueGenericSend+0x78>
 80078aa:	2300      	movs	r3, #0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10b      	bne.n	80078c8 <xQueueGenericSend+0x94>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	623b      	str	r3, [r7, #32]
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078c8:	f001 fc36 	bl	8009138 <xTaskGetSchedulerState>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d102      	bne.n	80078d8 <xQueueGenericSend+0xa4>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <xQueueGenericSend+0xa8>
 80078d8:	2301      	movs	r3, #1
 80078da:	e000      	b.n	80078de <xQueueGenericSend+0xaa>
 80078dc:	2300      	movs	r3, #0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <xQueueGenericSend+0xc6>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	61fb      	str	r3, [r7, #28]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078fa:	f002 fa8d 	bl	8009e18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007906:	429a      	cmp	r2, r3
 8007908:	d302      	bcc.n	8007910 <xQueueGenericSend+0xdc>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b02      	cmp	r3, #2
 800790e:	d129      	bne.n	8007964 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007916:	f000 fbc7 	bl	80080a8 <prvCopyDataToQueue>
 800791a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007926:	3324      	adds	r3, #36	@ 0x24
 8007928:	4618      	mov	r0, r3
 800792a:	f001 fa33 	bl	8008d94 <xTaskRemoveFromEventList>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d013      	beq.n	800795c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007934:	4b3f      	ldr	r3, [pc, #252]	@ (8007a34 <xQueueGenericSend+0x200>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	e00a      	b.n	800795c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800794c:	4b39      	ldr	r3, [pc, #228]	@ (8007a34 <xQueueGenericSend+0x200>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800795c:	f002 fa8e 	bl	8009e7c <vPortExitCritical>
				return pdPASS;
 8007960:	2301      	movs	r3, #1
 8007962:	e063      	b.n	8007a2c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800796a:	f002 fa87 	bl	8009e7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800796e:	2300      	movs	r3, #0
 8007970:	e05c      	b.n	8007a2c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007974:	2b00      	cmp	r3, #0
 8007976:	d106      	bne.n	8007986 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007978:	f107 0314 	add.w	r3, r7, #20
 800797c:	4618      	mov	r0, r3
 800797e:	f001 fa6d 	bl	8008e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007982:	2301      	movs	r3, #1
 8007984:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007986:	f002 fa79 	bl	8009e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800798a:	f000 ffb7 	bl	80088fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800798e:	f002 fa43 	bl	8009e18 <vPortEnterCritical>
 8007992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007994:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007998:	b25b      	sxtb	r3, r3
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800799e:	d103      	bne.n	80079a8 <xQueueGenericSend+0x174>
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079ae:	b25b      	sxtb	r3, r3
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079b4:	d103      	bne.n	80079be <xQueueGenericSend+0x18a>
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079be:	f002 fa5d 	bl	8009e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079c2:	1d3a      	adds	r2, r7, #4
 80079c4:	f107 0314 	add.w	r3, r7, #20
 80079c8:	4611      	mov	r1, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f001 fa5c 	bl	8008e88 <xTaskCheckForTimeOut>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d124      	bne.n	8007a20 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079d8:	f000 fc5e 	bl	8008298 <prvIsQueueFull>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d018      	beq.n	8007a14 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	3310      	adds	r3, #16
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4611      	mov	r1, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 f980 	bl	8008cf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079f2:	f000 fbe9 	bl	80081c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079f6:	f000 ff8f 	bl	8008918 <xTaskResumeAll>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f af7c 	bne.w	80078fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007a02:	4b0c      	ldr	r3, [pc, #48]	@ (8007a34 <xQueueGenericSend+0x200>)
 8007a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	e772      	b.n	80078fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a16:	f000 fbd7 	bl	80081c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a1a:	f000 ff7d 	bl	8008918 <xTaskResumeAll>
 8007a1e:	e76c      	b.n	80078fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a22:	f000 fbd1 	bl	80081c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a26:	f000 ff77 	bl	8008918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3738      	adds	r7, #56	@ 0x38
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	e000ed04 	.word	0xe000ed04

08007a38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b090      	sub	sp, #64	@ 0x40
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10b      	bne.n	8007a68 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <xQueueGenericSendFromISR+0x3e>
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <xQueueGenericSendFromISR+0x42>
 8007a76:	2301      	movs	r3, #1
 8007a78:	e000      	b.n	8007a7c <xQueueGenericSendFromISR+0x44>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d103      	bne.n	8007aa6 <xQueueGenericSendFromISR+0x6e>
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <xQueueGenericSendFromISR+0x72>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <xQueueGenericSendFromISR+0x74>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10b      	bne.n	8007ac8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	623b      	str	r3, [r7, #32]
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	e7fd      	b.n	8007ac4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ac8:	f002 fa86 	bl	8009fd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007acc:	f3ef 8211 	mrs	r2, BASEPRI
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	61fa      	str	r2, [r7, #28]
 8007ae2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d302      	bcc.n	8007afa <xQueueGenericSendFromISR+0xc2>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d12f      	bne.n	8007b5a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b10:	f000 faca 	bl	80080a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b1c:	d112      	bne.n	8007b44 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	3324      	adds	r3, #36	@ 0x24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 f932 	bl	8008d94 <xTaskRemoveFromEventList>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00e      	beq.n	8007b54 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e007      	b.n	8007b54 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b48:	3301      	adds	r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	b25a      	sxtb	r2, r3
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b54:	2301      	movs	r3, #1
 8007b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b58:	e001      	b.n	8007b5e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b60:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3740      	adds	r7, #64	@ 0x40
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08e      	sub	sp, #56	@ 0x38
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	623b      	str	r3, [r7, #32]
}
 8007b9a:	bf00      	nop
 8007b9c:	bf00      	nop
 8007b9e:	e7fd      	b.n	8007b9c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	61fb      	str	r3, [r7, #28]
}
 8007bba:	bf00      	nop
 8007bbc:	bf00      	nop
 8007bbe:	e7fd      	b.n	8007bbc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <xQueueGiveFromISR+0x5c>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <xQueueGiveFromISR+0x60>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <xQueueGiveFromISR+0x62>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	61bb      	str	r3, [r7, #24]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bf2:	f002 f9f1 	bl	8009fd8 <vPortValidateInterruptPriority>
	__asm volatile
 8007bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8007bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	617a      	str	r2, [r7, #20]
 8007c0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007c0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d22b      	bcs.n	8007c7a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	1c5a      	adds	r2, r3, #1
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c3c:	d112      	bne.n	8007c64 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d016      	beq.n	8007c74 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	3324      	adds	r3, #36	@ 0x24
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 f8a2 	bl	8008d94 <xTaskRemoveFromEventList>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	e007      	b.n	8007c74 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c68:	3301      	adds	r3, #1
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	b25a      	sxtb	r2, r3
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c74:	2301      	movs	r3, #1
 8007c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c78:	e001      	b.n	8007c7e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f383 8811 	msr	BASEPRI, r3
}
 8007c88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3738      	adds	r7, #56	@ 0x38
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08c      	sub	sp, #48	@ 0x30
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <xQueueReceive+0x32>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	623b      	str	r3, [r7, #32]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d103      	bne.n	8007cd4 <xQueueReceive+0x40>
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <xQueueReceive+0x44>
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e000      	b.n	8007cda <xQueueReceive+0x46>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <xQueueReceive+0x62>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	61fb      	str	r3, [r7, #28]
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	e7fd      	b.n	8007cf2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cf6:	f001 fa1f 	bl	8009138 <xTaskGetSchedulerState>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <xQueueReceive+0x72>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <xQueueReceive+0x76>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xQueueReceive+0x78>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <xQueueReceive+0x94>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	61bb      	str	r3, [r7, #24]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d28:	f002 f876 	bl	8009e18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d01f      	beq.n	8007d78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d38:	68b9      	ldr	r1, [r7, #8]
 8007d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d3c:	f000 fa1e 	bl	800817c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	1e5a      	subs	r2, r3, #1
 8007d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00f      	beq.n	8007d70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d52:	3310      	adds	r3, #16
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 f81d 	bl	8008d94 <xTaskRemoveFromEventList>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d60:	4b3c      	ldr	r3, [pc, #240]	@ (8007e54 <xQueueReceive+0x1c0>)
 8007d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d70:	f002 f884 	bl	8009e7c <vPortExitCritical>
				return pdPASS;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e069      	b.n	8007e4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d103      	bne.n	8007d86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d7e:	f002 f87d 	bl	8009e7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e062      	b.n	8007e4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d8c:	f107 0310 	add.w	r3, r7, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 f863 	bl	8008e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d96:	2301      	movs	r3, #1
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d9a:	f002 f86f 	bl	8009e7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d9e:	f000 fdad 	bl	80088fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007da2:	f002 f839 	bl	8009e18 <vPortEnterCritical>
 8007da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dac:	b25b      	sxtb	r3, r3
 8007dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007db2:	d103      	bne.n	8007dbc <xQueueReceive+0x128>
 8007db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dc2:	b25b      	sxtb	r3, r3
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dc8:	d103      	bne.n	8007dd2 <xQueueReceive+0x13e>
 8007dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007dd2:	f002 f853 	bl	8009e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dd6:	1d3a      	adds	r2, r7, #4
 8007dd8:	f107 0310 	add.w	r3, r7, #16
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 f852 	bl	8008e88 <xTaskCheckForTimeOut>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d123      	bne.n	8007e32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dec:	f000 fa3e 	bl	800826c <prvIsQueueEmpty>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d017      	beq.n	8007e26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df8:	3324      	adds	r3, #36	@ 0x24
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ff76 	bl	8008cf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e06:	f000 f9df 	bl	80081c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e0a:	f000 fd85 	bl	8008918 <xTaskResumeAll>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d189      	bne.n	8007d28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007e14:	4b0f      	ldr	r3, [pc, #60]	@ (8007e54 <xQueueReceive+0x1c0>)
 8007e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	e780      	b.n	8007d28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e28:	f000 f9ce 	bl	80081c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e2c:	f000 fd74 	bl	8008918 <xTaskResumeAll>
 8007e30:	e77a      	b.n	8007d28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e34:	f000 f9c8 	bl	80081c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e38:	f000 fd6e 	bl	8008918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e3e:	f000 fa15 	bl	800826c <prvIsQueueEmpty>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f43f af6f 	beq.w	8007d28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3730      	adds	r7, #48	@ 0x30
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	@ 0x38
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10b      	bne.n	8007e8c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	623b      	str	r3, [r7, #32]
}
 8007e86:	bf00      	nop
 8007e88:	bf00      	nop
 8007e8a:	e7fd      	b.n	8007e88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	61fb      	str	r3, [r7, #28]
}
 8007ea6:	bf00      	nop
 8007ea8:	bf00      	nop
 8007eaa:	e7fd      	b.n	8007ea8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eac:	f001 f944 	bl	8009138 <xTaskGetSchedulerState>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d102      	bne.n	8007ebc <xQueueSemaphoreTake+0x64>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <xQueueSemaphoreTake+0x68>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <xQueueSemaphoreTake+0x6a>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	61bb      	str	r3, [r7, #24]
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	e7fd      	b.n	8007eda <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ede:	f001 ff9b 	bl	8009e18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d024      	beq.n	8007f38 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	1e5a      	subs	r2, r3, #1
 8007ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d104      	bne.n	8007f08 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007efe:	f001 fa95 	bl	800942c <pvTaskIncrementMutexHeldCount>
 8007f02:	4602      	mov	r2, r0
 8007f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00f      	beq.n	8007f30 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	3310      	adds	r3, #16
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ff3d 	bl	8008d94 <xTaskRemoveFromEventList>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f20:	4b54      	ldr	r3, [pc, #336]	@ (8008074 <xQueueSemaphoreTake+0x21c>)
 8007f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f30:	f001 ffa4 	bl	8009e7c <vPortExitCritical>
				return pdPASS;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e098      	b.n	800806a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d112      	bne.n	8007f64 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	617b      	str	r3, [r7, #20]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f5c:	f001 ff8e 	bl	8009e7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f60:	2300      	movs	r3, #0
 8007f62:	e082      	b.n	800806a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f6a:	f107 030c 	add.w	r3, r7, #12
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ff74 	bl	8008e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f78:	f001 ff80 	bl	8009e7c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f7c:	f000 fcbe 	bl	80088fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f80:	f001 ff4a 	bl	8009e18 <vPortEnterCritical>
 8007f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f8a:	b25b      	sxtb	r3, r3
 8007f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f90:	d103      	bne.n	8007f9a <xQueueSemaphoreTake+0x142>
 8007f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fa0:	b25b      	sxtb	r3, r3
 8007fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fa6:	d103      	bne.n	8007fb0 <xQueueSemaphoreTake+0x158>
 8007fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fb0:	f001 ff64 	bl	8009e7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fb4:	463a      	mov	r2, r7
 8007fb6:	f107 030c 	add.w	r3, r7, #12
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 ff63 	bl	8008e88 <xTaskCheckForTimeOut>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d132      	bne.n	800802e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007fca:	f000 f94f 	bl	800826c <prvIsQueueEmpty>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d026      	beq.n	8008022 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007fdc:	f001 ff1c 	bl	8009e18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 f8c5 	bl	8009174 <xTaskPriorityInherit>
 8007fea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007fec:	f001 ff46 	bl	8009e7c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff2:	3324      	adds	r3, #36	@ 0x24
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fe79 	bl	8008cf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ffe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008000:	f000 f8e2 	bl	80081c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008004:	f000 fc88 	bl	8008918 <xTaskResumeAll>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	f47f af67 	bne.w	8007ede <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008010:	4b18      	ldr	r3, [pc, #96]	@ (8008074 <xQueueSemaphoreTake+0x21c>)
 8008012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	e75d      	b.n	8007ede <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008024:	f000 f8d0 	bl	80081c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008028:	f000 fc76 	bl	8008918 <xTaskResumeAll>
 800802c:	e757      	b.n	8007ede <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800802e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008030:	f000 f8ca 	bl	80081c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008034:	f000 fc70 	bl	8008918 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008038:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800803a:	f000 f917 	bl	800826c <prvIsQueueEmpty>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	f43f af4c 	beq.w	8007ede <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00d      	beq.n	8008068 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800804c:	f001 fee4 	bl	8009e18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008050:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008052:	f000 f811 	bl	8008078 <prvGetDisinheritPriorityAfterTimeout>
 8008056:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800805e:	4618      	mov	r0, r3
 8008060:	f001 f960 	bl	8009324 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008064:	f001 ff0a 	bl	8009e7c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800806a:	4618      	mov	r0, r3
 800806c:	3738      	adds	r7, #56	@ 0x38
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	e000ed04 	.word	0xe000ed04

08008078 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	d006      	beq.n	8008096 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	e001      	b.n	800809a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800809a:	68fb      	ldr	r3, [r7, #12]
	}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10d      	bne.n	80080e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d14d      	bne.n	800816a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 f8b6 	bl	8009244 <xTaskPriorityDisinherit>
 80080d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	609a      	str	r2, [r3, #8]
 80080e0:	e043      	b.n	800816a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d119      	bne.n	800811c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6858      	ldr	r0, [r3, #4]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f0:	461a      	mov	r2, r3
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	f01a f939 	bl	802236a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	d32b      	bcc.n	800816a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	605a      	str	r2, [r3, #4]
 800811a:	e026      	b.n	800816a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	68d8      	ldr	r0, [r3, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008124:	461a      	mov	r2, r3
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	f01a f91f 	bl	802236a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68da      	ldr	r2, [r3, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008134:	425b      	negs	r3, r3
 8008136:	441a      	add	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d207      	bcs.n	8008158 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008150:	425b      	negs	r3, r3
 8008152:	441a      	add	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d105      	bne.n	800816a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	3b01      	subs	r3, #1
 8008168:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008172:	697b      	ldr	r3, [r7, #20]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d018      	beq.n	80081c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	441a      	add	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68da      	ldr	r2, [r3, #12]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d303      	bcc.n	80081b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68d9      	ldr	r1, [r3, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b8:	461a      	mov	r2, r3
 80081ba:	6838      	ldr	r0, [r7, #0]
 80081bc:	f01a f8d5 	bl	802236a <memcpy>
	}
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081d0:	f001 fe22 	bl	8009e18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081dc:	e011      	b.n	8008202 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d012      	beq.n	800820c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3324      	adds	r3, #36	@ 0x24
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 fdd2 	bl	8008d94 <xTaskRemoveFromEventList>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081f6:	f000 febb 	bl	8008f70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008206:	2b00      	cmp	r3, #0
 8008208:	dce9      	bgt.n	80081de <prvUnlockQueue+0x16>
 800820a:	e000      	b.n	800820e <prvUnlockQueue+0x46>
					break;
 800820c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	22ff      	movs	r2, #255	@ 0xff
 8008212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008216:	f001 fe31 	bl	8009e7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800821a:	f001 fdfd 	bl	8009e18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008224:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008226:	e011      	b.n	800824c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d012      	beq.n	8008256 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	3310      	adds	r3, #16
 8008234:	4618      	mov	r0, r3
 8008236:	f000 fdad 	bl	8008d94 <xTaskRemoveFromEventList>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008240:	f000 fe96 	bl	8008f70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	3b01      	subs	r3, #1
 8008248:	b2db      	uxtb	r3, r3
 800824a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800824c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008250:	2b00      	cmp	r3, #0
 8008252:	dce9      	bgt.n	8008228 <prvUnlockQueue+0x60>
 8008254:	e000      	b.n	8008258 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008256:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	22ff      	movs	r2, #255	@ 0xff
 800825c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008260:	f001 fe0c 	bl	8009e7c <vPortExitCritical>
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008274:	f001 fdd0 	bl	8009e18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e001      	b.n	800828a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800828a:	f001 fdf7 	bl	8009e7c <vPortExitCritical>

	return xReturn;
 800828e:	68fb      	ldr	r3, [r7, #12]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082a0:	f001 fdba 	bl	8009e18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d102      	bne.n	80082b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e001      	b.n	80082ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082b6:	2300      	movs	r3, #0
 80082b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082ba:	f001 fddf 	bl	8009e7c <vPortExitCritical>

	return xReturn;
 80082be:	68fb      	ldr	r3, [r7, #12]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082d2:	2300      	movs	r3, #0
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	e014      	b.n	8008302 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008318 <vQueueAddToRegistry+0x50>)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082e4:	490c      	ldr	r1, [pc, #48]	@ (8008318 <vQueueAddToRegistry+0x50>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008318 <vQueueAddToRegistry+0x50>)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4413      	add	r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082fa:	e006      	b.n	800830a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b07      	cmp	r3, #7
 8008306:	d9e7      	bls.n	80082d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20000e7c 	.word	0x20000e7c

0800831c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800832c:	f001 fd74 	bl	8009e18 <vPortEnterCritical>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008336:	b25b      	sxtb	r3, r3
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800833c:	d103      	bne.n	8008346 <vQueueWaitForMessageRestricted+0x2a>
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800834c:	b25b      	sxtb	r3, r3
 800834e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008352:	d103      	bne.n	800835c <vQueueWaitForMessageRestricted+0x40>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800835c:	f001 fd8e 	bl	8009e7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	3324      	adds	r3, #36	@ 0x24
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fce3 	bl	8008d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008376:	6978      	ldr	r0, [r7, #20]
 8008378:	f7ff ff26 	bl	80081c8 <prvUnlockQueue>
	}
 800837c:	bf00      	nop
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08e      	sub	sp, #56	@ 0x38
 8008388:	af04      	add	r7, sp, #16
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	bf00      	nop
 80083ae:	e7fd      	b.n	80083ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	61fb      	str	r3, [r7, #28]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083ce:	235c      	movs	r3, #92	@ 0x5c
 80083d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80083d6:	d00b      	beq.n	80083f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	61bb      	str	r3, [r7, #24]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01e      	beq.n	8008436 <xTaskCreateStatic+0xb2>
 80083f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01b      	beq.n	8008436 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008406:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	2202      	movs	r2, #2
 800840c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008410:	2300      	movs	r3, #0
 8008412:	9303      	str	r3, [sp, #12]
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	9302      	str	r3, [sp, #8]
 8008418:	f107 0314 	add.w	r3, r7, #20
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f850 	bl	80084ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800842e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008430:	f000 f8e2 	bl	80085f8 <prvAddNewTaskToReadyList>
 8008434:	e001      	b.n	800843a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800843a:	697b      	ldr	r3, [r7, #20]
	}
 800843c:	4618      	mov	r0, r3
 800843e:	3728      	adds	r7, #40	@ 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08c      	sub	sp, #48	@ 0x30
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fdff 	bl	800a05c <pvPortMalloc>
 800845e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00e      	beq.n	8008484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008466:	205c      	movs	r0, #92	@ 0x5c
 8008468:	f001 fdf8 	bl	800a05c <pvPortMalloc>
 800846c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	631a      	str	r2, [r3, #48]	@ 0x30
 800847a:	e005      	b.n	8008488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	f001 fec1 	bl	800a204 <vPortFree>
 8008482:	e001      	b.n	8008488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d017      	beq.n	80084be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008496:	88fa      	ldrh	r2, [r7, #6]
 8008498:	2300      	movs	r3, #0
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f80e 	bl	80084ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084b2:	69f8      	ldr	r0, [r7, #28]
 80084b4:	f000 f8a0 	bl	80085f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084b8:	2301      	movs	r3, #1
 80084ba:	61bb      	str	r3, [r7, #24]
 80084bc:	e002      	b.n	80084c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084c4:	69bb      	ldr	r3, [r7, #24]
	}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b088      	sub	sp, #32
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
 80084da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	461a      	mov	r2, r3
 80084e6:	21a5      	movs	r1, #165	@ 0xa5
 80084e8:	f019 feb0 	bl	802224c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80084f6:	3b01      	subs	r3, #1
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f023 0307 	bic.w	r3, r3, #7
 8008504:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	617b      	str	r3, [r7, #20]
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d01f      	beq.n	800856e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800852e:	2300      	movs	r3, #0
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	e012      	b.n	800855a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	7819      	ldrb	r1, [r3, #0]
 800853c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	3334      	adds	r3, #52	@ 0x34
 8008544:	460a      	mov	r2, r1
 8008546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d006      	beq.n	8008562 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	3301      	adds	r3, #1
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2b0f      	cmp	r3, #15
 800855e:	d9e9      	bls.n	8008534 <prvInitialiseNewTask+0x66>
 8008560:	e000      	b.n	8008564 <prvInitialiseNewTask+0x96>
			{
				break;
 8008562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800856c:	e003      	b.n	8008576 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	2b37      	cmp	r3, #55	@ 0x37
 800857a:	d901      	bls.n	8008580 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800857c:	2337      	movs	r3, #55	@ 0x37
 800857e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008584:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800858a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	2200      	movs	r2, #0
 8008590:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	3304      	adds	r3, #4
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe ff72 	bl	8007480 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	3318      	adds	r3, #24
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe ff6d 	bl	8007480 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	2200      	movs	r2, #0
 80085c0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	68f9      	ldr	r1, [r7, #12]
 80085d6:	69b8      	ldr	r0, [r7, #24]
 80085d8:	f001 faf0 	bl	8009bbc <pxPortInitialiseStack>
 80085dc:	4602      	mov	r2, r0
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ee:	bf00      	nop
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
	...

080085f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008600:	f001 fc0a 	bl	8009e18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008604:	4b2d      	ldr	r3, [pc, #180]	@ (80086bc <prvAddNewTaskToReadyList+0xc4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3301      	adds	r3, #1
 800860a:	4a2c      	ldr	r2, [pc, #176]	@ (80086bc <prvAddNewTaskToReadyList+0xc4>)
 800860c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800860e:	4b2c      	ldr	r3, [pc, #176]	@ (80086c0 <prvAddNewTaskToReadyList+0xc8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d109      	bne.n	800862a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008616:	4a2a      	ldr	r2, [pc, #168]	@ (80086c0 <prvAddNewTaskToReadyList+0xc8>)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800861c:	4b27      	ldr	r3, [pc, #156]	@ (80086bc <prvAddNewTaskToReadyList+0xc4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d110      	bne.n	8008646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008624:	f000 fcca 	bl	8008fbc <prvInitialiseTaskLists>
 8008628:	e00d      	b.n	8008646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800862a:	4b26      	ldr	r3, [pc, #152]	@ (80086c4 <prvAddNewTaskToReadyList+0xcc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d109      	bne.n	8008646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008632:	4b23      	ldr	r3, [pc, #140]	@ (80086c0 <prvAddNewTaskToReadyList+0xc8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863c:	429a      	cmp	r2, r3
 800863e:	d802      	bhi.n	8008646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008640:	4a1f      	ldr	r2, [pc, #124]	@ (80086c0 <prvAddNewTaskToReadyList+0xc8>)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008646:	4b20      	ldr	r3, [pc, #128]	@ (80086c8 <prvAddNewTaskToReadyList+0xd0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3301      	adds	r3, #1
 800864c:	4a1e      	ldr	r2, [pc, #120]	@ (80086c8 <prvAddNewTaskToReadyList+0xd0>)
 800864e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008650:	4b1d      	ldr	r3, [pc, #116]	@ (80086c8 <prvAddNewTaskToReadyList+0xd0>)
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800865c:	4b1b      	ldr	r3, [pc, #108]	@ (80086cc <prvAddNewTaskToReadyList+0xd4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d903      	bls.n	800866c <prvAddNewTaskToReadyList+0x74>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008668:	4a18      	ldr	r2, [pc, #96]	@ (80086cc <prvAddNewTaskToReadyList+0xd4>)
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a15      	ldr	r2, [pc, #84]	@ (80086d0 <prvAddNewTaskToReadyList+0xd8>)
 800867a:	441a      	add	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7fe ff09 	bl	800749a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008688:	f001 fbf8 	bl	8009e7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800868c:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <prvAddNewTaskToReadyList+0xcc>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00e      	beq.n	80086b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008694:	4b0a      	ldr	r3, [pc, #40]	@ (80086c0 <prvAddNewTaskToReadyList+0xc8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869e:	429a      	cmp	r2, r3
 80086a0:	d207      	bcs.n	80086b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086a2:	4b0c      	ldr	r3, [pc, #48]	@ (80086d4 <prvAddNewTaskToReadyList+0xdc>)
 80086a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b2:	bf00      	nop
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20001390 	.word	0x20001390
 80086c0:	20000ebc 	.word	0x20000ebc
 80086c4:	2000139c 	.word	0x2000139c
 80086c8:	200013ac 	.word	0x200013ac
 80086cc:	20001398 	.word	0x20001398
 80086d0:	20000ec0 	.word	0x20000ec0
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80086e0:	f001 fb9a 	bl	8009e18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d102      	bne.n	80086f0 <vTaskDelete+0x18>
 80086ea:	4b2d      	ldr	r3, [pc, #180]	@ (80087a0 <vTaskDelete+0xc8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	e000      	b.n	80086f2 <vTaskDelete+0x1a>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3304      	adds	r3, #4
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe ff2b 	bl	8007554 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3318      	adds	r3, #24
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe ff22 	bl	8007554 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008710:	4b24      	ldr	r3, [pc, #144]	@ (80087a4 <vTaskDelete+0xcc>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	4a23      	ldr	r2, [pc, #140]	@ (80087a4 <vTaskDelete+0xcc>)
 8008718:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800871a:	4b21      	ldr	r3, [pc, #132]	@ (80087a0 <vTaskDelete+0xc8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	429a      	cmp	r2, r3
 8008722:	d10b      	bne.n	800873c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	481f      	ldr	r0, [pc, #124]	@ (80087a8 <vTaskDelete+0xd0>)
 800872c:	f7fe feb5 	bl	800749a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008730:	4b1e      	ldr	r3, [pc, #120]	@ (80087ac <vTaskDelete+0xd4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a1d      	ldr	r2, [pc, #116]	@ (80087ac <vTaskDelete+0xd4>)
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e009      	b.n	8008750 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800873c:	4b1c      	ldr	r3, [pc, #112]	@ (80087b0 <vTaskDelete+0xd8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3b01      	subs	r3, #1
 8008742:	4a1b      	ldr	r2, [pc, #108]	@ (80087b0 <vTaskDelete+0xd8>)
 8008744:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fca6 	bl	8009098 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800874c:	f000 fcd4 	bl	80090f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008750:	f001 fb94 	bl	8009e7c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008754:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <vTaskDelete+0xdc>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d01c      	beq.n	8008796 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800875c:	4b10      	ldr	r3, [pc, #64]	@ (80087a0 <vTaskDelete+0xc8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	429a      	cmp	r2, r3
 8008764:	d117      	bne.n	8008796 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008766:	4b14      	ldr	r3, [pc, #80]	@ (80087b8 <vTaskDelete+0xe0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00b      	beq.n	8008786 <vTaskDelete+0xae>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	60bb      	str	r3, [r7, #8]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008786:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <vTaskDelete+0xe4>)
 8008788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000ebc 	.word	0x20000ebc
 80087a4:	200013ac 	.word	0x200013ac
 80087a8:	20001364 	.word	0x20001364
 80087ac:	20001378 	.word	0x20001378
 80087b0:	20001390 	.word	0x20001390
 80087b4:	2000139c 	.word	0x2000139c
 80087b8:	200013b8 	.word	0x200013b8
 80087bc:	e000ed04 	.word	0xe000ed04

080087c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d018      	beq.n	8008804 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087d2:	4b14      	ldr	r3, [pc, #80]	@ (8008824 <vTaskDelay+0x64>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <vTaskDelay+0x32>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	60bb      	str	r3, [r7, #8]
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	e7fd      	b.n	80087ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087f2:	f000 f883 	bl	80088fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087f6:	2100      	movs	r1, #0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fe2b 	bl	8009454 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087fe:	f000 f88b 	bl	8008918 <xTaskResumeAll>
 8008802:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d107      	bne.n	800881a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800880a:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <vTaskDelay+0x68>)
 800880c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	200013b8 	.word	0x200013b8
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08a      	sub	sp, #40	@ 0x28
 8008830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008836:	2300      	movs	r3, #0
 8008838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800883a:	463a      	mov	r2, r7
 800883c:	1d39      	adds	r1, r7, #4
 800883e:	f107 0308 	add.w	r3, r7, #8
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fdc8 	bl	80073d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	9202      	str	r2, [sp, #8]
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	2300      	movs	r3, #0
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	2300      	movs	r3, #0
 8008858:	460a      	mov	r2, r1
 800885a:	4922      	ldr	r1, [pc, #136]	@ (80088e4 <vTaskStartScheduler+0xb8>)
 800885c:	4822      	ldr	r0, [pc, #136]	@ (80088e8 <vTaskStartScheduler+0xbc>)
 800885e:	f7ff fd91 	bl	8008384 <xTaskCreateStatic>
 8008862:	4603      	mov	r3, r0
 8008864:	4a21      	ldr	r2, [pc, #132]	@ (80088ec <vTaskStartScheduler+0xc0>)
 8008866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008868:	4b20      	ldr	r3, [pc, #128]	@ (80088ec <vTaskStartScheduler+0xc0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008870:	2301      	movs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	e001      	b.n	800887a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008876:	2300      	movs	r3, #0
 8008878:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d102      	bne.n	8008886 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008880:	f000 fe42 	bl	8009508 <xTimerCreateTimerTask>
 8008884:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d116      	bne.n	80088ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	613b      	str	r3, [r7, #16]
}
 800889e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088a0:	4b13      	ldr	r3, [pc, #76]	@ (80088f0 <vTaskStartScheduler+0xc4>)
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80088a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088a8:	4b12      	ldr	r3, [pc, #72]	@ (80088f4 <vTaskStartScheduler+0xc8>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088ae:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <vTaskStartScheduler+0xcc>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088b4:	f001 fa0c 	bl	8009cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088b8:	e00f      	b.n	80088da <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088c0:	d10b      	bne.n	80088da <vTaskStartScheduler+0xae>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <vTaskStartScheduler+0xaa>
}
 80088da:	bf00      	nop
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	08024954 	.word	0x08024954
 80088e8:	08008f89 	.word	0x08008f89
 80088ec:	200013b4 	.word	0x200013b4
 80088f0:	200013b0 	.word	0x200013b0
 80088f4:	2000139c 	.word	0x2000139c
 80088f8:	20001394 	.word	0x20001394

080088fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008900:	4b04      	ldr	r3, [pc, #16]	@ (8008914 <vTaskSuspendAll+0x18>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3301      	adds	r3, #1
 8008906:	4a03      	ldr	r2, [pc, #12]	@ (8008914 <vTaskSuspendAll+0x18>)
 8008908:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800890a:	bf00      	nop
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	200013b8 	.word	0x200013b8

08008918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008922:	2300      	movs	r3, #0
 8008924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008926:	4b42      	ldr	r3, [pc, #264]	@ (8008a30 <xTaskResumeAll+0x118>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10b      	bne.n	8008946 <xTaskResumeAll+0x2e>
	__asm volatile
 800892e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008932:	f383 8811 	msr	BASEPRI, r3
 8008936:	f3bf 8f6f 	isb	sy
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	603b      	str	r3, [r7, #0]
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	e7fd      	b.n	8008942 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008946:	f001 fa67 	bl	8009e18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800894a:	4b39      	ldr	r3, [pc, #228]	@ (8008a30 <xTaskResumeAll+0x118>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3b01      	subs	r3, #1
 8008950:	4a37      	ldr	r2, [pc, #220]	@ (8008a30 <xTaskResumeAll+0x118>)
 8008952:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008954:	4b36      	ldr	r3, [pc, #216]	@ (8008a30 <xTaskResumeAll+0x118>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d162      	bne.n	8008a22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800895c:	4b35      	ldr	r3, [pc, #212]	@ (8008a34 <xTaskResumeAll+0x11c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d05e      	beq.n	8008a22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008964:	e02f      	b.n	80089c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008966:	4b34      	ldr	r3, [pc, #208]	@ (8008a38 <xTaskResumeAll+0x120>)
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3318      	adds	r3, #24
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fdee 	bl	8007554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3304      	adds	r3, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fde9 	bl	8007554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008986:	4b2d      	ldr	r3, [pc, #180]	@ (8008a3c <xTaskResumeAll+0x124>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d903      	bls.n	8008996 <xTaskResumeAll+0x7e>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008992:	4a2a      	ldr	r2, [pc, #168]	@ (8008a3c <xTaskResumeAll+0x124>)
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4a27      	ldr	r2, [pc, #156]	@ (8008a40 <xTaskResumeAll+0x128>)
 80089a4:	441a      	add	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3304      	adds	r3, #4
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f7fe fd74 	bl	800749a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b6:	4b23      	ldr	r3, [pc, #140]	@ (8008a44 <xTaskResumeAll+0x12c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089bc:	429a      	cmp	r2, r3
 80089be:	d302      	bcc.n	80089c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80089c0:	4b21      	ldr	r3, [pc, #132]	@ (8008a48 <xTaskResumeAll+0x130>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089c6:	4b1c      	ldr	r3, [pc, #112]	@ (8008a38 <xTaskResumeAll+0x120>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1cb      	bne.n	8008966 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089d4:	f000 fb90 	bl	80090f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089d8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a4c <xTaskResumeAll+0x134>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d010      	beq.n	8008a06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089e4:	f000 f846 	bl	8008a74 <xTaskIncrementTick>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d002      	beq.n	80089f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089ee:	4b16      	ldr	r3, [pc, #88]	@ (8008a48 <xTaskResumeAll+0x130>)
 80089f0:	2201      	movs	r2, #1
 80089f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f1      	bne.n	80089e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008a00:	4b12      	ldr	r3, [pc, #72]	@ (8008a4c <xTaskResumeAll+0x134>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a06:	4b10      	ldr	r3, [pc, #64]	@ (8008a48 <xTaskResumeAll+0x130>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d009      	beq.n	8008a22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a12:	4b0f      	ldr	r3, [pc, #60]	@ (8008a50 <xTaskResumeAll+0x138>)
 8008a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a22:	f001 fa2b 	bl	8009e7c <vPortExitCritical>

	return xAlreadyYielded;
 8008a26:	68bb      	ldr	r3, [r7, #8]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	200013b8 	.word	0x200013b8
 8008a34:	20001390 	.word	0x20001390
 8008a38:	20001350 	.word	0x20001350
 8008a3c:	20001398 	.word	0x20001398
 8008a40:	20000ec0 	.word	0x20000ec0
 8008a44:	20000ebc 	.word	0x20000ebc
 8008a48:	200013a4 	.word	0x200013a4
 8008a4c:	200013a0 	.word	0x200013a0
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a5a:	4b05      	ldr	r3, [pc, #20]	@ (8008a70 <xTaskGetTickCount+0x1c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a60:	687b      	ldr	r3, [r7, #4]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20001394 	.word	0x20001394

08008a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8008bbc <xTaskIncrementTick+0x148>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f040 8090 	bne.w	8008ba8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a88:	4b4d      	ldr	r3, [pc, #308]	@ (8008bc0 <xTaskIncrementTick+0x14c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a90:	4a4b      	ldr	r2, [pc, #300]	@ (8008bc0 <xTaskIncrementTick+0x14c>)
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d121      	bne.n	8008ae0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a9c:	4b49      	ldr	r3, [pc, #292]	@ (8008bc4 <xTaskIncrementTick+0x150>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00b      	beq.n	8008abe <xTaskIncrementTick+0x4a>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	603b      	str	r3, [r7, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <xTaskIncrementTick+0x46>
 8008abe:	4b41      	ldr	r3, [pc, #260]	@ (8008bc4 <xTaskIncrementTick+0x150>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	4b40      	ldr	r3, [pc, #256]	@ (8008bc8 <xTaskIncrementTick+0x154>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8008bc4 <xTaskIncrementTick+0x150>)
 8008aca:	6013      	str	r3, [r2, #0]
 8008acc:	4a3e      	ldr	r2, [pc, #248]	@ (8008bc8 <xTaskIncrementTick+0x154>)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8008bcc <xTaskIncrementTick+0x158>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8008bcc <xTaskIncrementTick+0x158>)
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	f000 fb0c 	bl	80090f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8008bd0 <xTaskIncrementTick+0x15c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d349      	bcc.n	8008b7e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aea:	4b36      	ldr	r3, [pc, #216]	@ (8008bc4 <xTaskIncrementTick+0x150>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d104      	bne.n	8008afe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af4:	4b36      	ldr	r3, [pc, #216]	@ (8008bd0 <xTaskIncrementTick+0x15c>)
 8008af6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008afa:	601a      	str	r2, [r3, #0]
					break;
 8008afc:	e03f      	b.n	8008b7e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afe:	4b31      	ldr	r3, [pc, #196]	@ (8008bc4 <xTaskIncrementTick+0x150>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d203      	bcs.n	8008b1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b16:	4a2e      	ldr	r2, [pc, #184]	@ (8008bd0 <xTaskIncrementTick+0x15c>)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b1c:	e02f      	b.n	8008b7e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	3304      	adds	r3, #4
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe fd16 	bl	8007554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d004      	beq.n	8008b3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3318      	adds	r3, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fd0d 	bl	8007554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b3e:	4b25      	ldr	r3, [pc, #148]	@ (8008bd4 <xTaskIncrementTick+0x160>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d903      	bls.n	8008b4e <xTaskIncrementTick+0xda>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	4a22      	ldr	r2, [pc, #136]	@ (8008bd4 <xTaskIncrementTick+0x160>)
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8008bd8 <xTaskIncrementTick+0x164>)
 8008b5c:	441a      	add	r2, r3
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7fe fc98 	bl	800749a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bdc <xTaskIncrementTick+0x168>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d3b8      	bcc.n	8008aea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b7c:	e7b5      	b.n	8008aea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b7e:	4b17      	ldr	r3, [pc, #92]	@ (8008bdc <xTaskIncrementTick+0x168>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b84:	4914      	ldr	r1, [pc, #80]	@ (8008bd8 <xTaskIncrementTick+0x164>)
 8008b86:	4613      	mov	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	440b      	add	r3, r1
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d901      	bls.n	8008b9a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008b96:	2301      	movs	r3, #1
 8008b98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b9a:	4b11      	ldr	r3, [pc, #68]	@ (8008be0 <xTaskIncrementTick+0x16c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d007      	beq.n	8008bb2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e004      	b.n	8008bb2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8008be4 <xTaskIncrementTick+0x170>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3301      	adds	r3, #1
 8008bae:	4a0d      	ldr	r2, [pc, #52]	@ (8008be4 <xTaskIncrementTick+0x170>)
 8008bb0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bb2:	697b      	ldr	r3, [r7, #20]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	200013b8 	.word	0x200013b8
 8008bc0:	20001394 	.word	0x20001394
 8008bc4:	20001348 	.word	0x20001348
 8008bc8:	2000134c 	.word	0x2000134c
 8008bcc:	200013a8 	.word	0x200013a8
 8008bd0:	200013b0 	.word	0x200013b0
 8008bd4:	20001398 	.word	0x20001398
 8008bd8:	20000ec0 	.word	0x20000ec0
 8008bdc:	20000ebc 	.word	0x20000ebc
 8008be0:	200013a4 	.word	0x200013a4
 8008be4:	200013a0 	.word	0x200013a0

08008be8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008bee:	4b3b      	ldr	r3, [pc, #236]	@ (8008cdc <vTaskSwitchContext+0xf4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8008ce0 <vTaskSwitchContext+0xf8>)
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008bfc:	e069      	b.n	8008cd2 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8008bfe:	4b38      	ldr	r3, [pc, #224]	@ (8008ce0 <vTaskSwitchContext+0xf8>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008c04:	4b37      	ldr	r3, [pc, #220]	@ (8008ce4 <vTaskSwitchContext+0xfc>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d111      	bne.n	8008c40 <vTaskSwitchContext+0x58>
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d10b      	bne.n	8008c40 <vTaskSwitchContext+0x58>
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d105      	bne.n	8008c40 <vTaskSwitchContext+0x58>
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	330c      	adds	r3, #12
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d008      	beq.n	8008c52 <vTaskSwitchContext+0x6a>
 8008c40:	4b28      	ldr	r3, [pc, #160]	@ (8008ce4 <vTaskSwitchContext+0xfc>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	4b27      	ldr	r3, [pc, #156]	@ (8008ce4 <vTaskSwitchContext+0xfc>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3334      	adds	r3, #52	@ 0x34
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	f7f8 fba0 	bl	8001392 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c52:	4b25      	ldr	r3, [pc, #148]	@ (8008ce8 <vTaskSwitchContext+0x100>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e011      	b.n	8008c7e <vTaskSwitchContext+0x96>
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10b      	bne.n	8008c78 <vTaskSwitchContext+0x90>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	607b      	str	r3, [r7, #4]
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	e7fd      	b.n	8008c74 <vTaskSwitchContext+0x8c>
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	491b      	ldr	r1, [pc, #108]	@ (8008cec <vTaskSwitchContext+0x104>)
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d0e3      	beq.n	8008c5a <vTaskSwitchContext+0x72>
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4a13      	ldr	r2, [pc, #76]	@ (8008cec <vTaskSwitchContext+0x104>)
 8008c9e:	4413      	add	r3, r2
 8008ca0:	60bb      	str	r3, [r7, #8]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d104      	bne.n	8008cc2 <vTaskSwitchContext+0xda>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	4a06      	ldr	r2, [pc, #24]	@ (8008ce4 <vTaskSwitchContext+0xfc>)
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	4a06      	ldr	r2, [pc, #24]	@ (8008ce8 <vTaskSwitchContext+0x100>)
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	6013      	str	r3, [r2, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	200013b8 	.word	0x200013b8
 8008ce0:	200013a4 	.word	0x200013a4
 8008ce4:	20000ebc 	.word	0x20000ebc
 8008ce8:	20001398 	.word	0x20001398
 8008cec:	20000ec0 	.word	0x20000ec0

08008cf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10b      	bne.n	8008d18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	60fb      	str	r3, [r7, #12]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d18:	4b07      	ldr	r3, [pc, #28]	@ (8008d38 <vTaskPlaceOnEventList+0x48>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3318      	adds	r3, #24
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fe fbde 	bl	80074e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d26:	2101      	movs	r1, #1
 8008d28:	6838      	ldr	r0, [r7, #0]
 8008d2a:	f000 fb93 	bl	8009454 <prvAddCurrentTaskToDelayedList>
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20000ebc 	.word	0x20000ebc

08008d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	617b      	str	r3, [r7, #20]
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d66:	4b0a      	ldr	r3, [pc, #40]	@ (8008d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3318      	adds	r3, #24
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7fe fb93 	bl	800749a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d002      	beq.n	8008d80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	68b8      	ldr	r0, [r7, #8]
 8008d84:	f000 fb66 	bl	8009454 <prvAddCurrentTaskToDelayedList>
	}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20000ebc 	.word	0x20000ebc

08008d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10b      	bne.n	8008dc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	60fb      	str	r3, [r7, #12]
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	e7fd      	b.n	8008dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	3318      	adds	r3, #24
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fbc4 	bl	8007554 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8008e44 <xTaskRemoveFromEventList+0xb0>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11d      	bne.n	8008e10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fbbb 	bl	8007554 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de2:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <xTaskRemoveFromEventList+0xb4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d903      	bls.n	8008df2 <xTaskRemoveFromEventList+0x5e>
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	4a16      	ldr	r2, [pc, #88]	@ (8008e48 <xTaskRemoveFromEventList+0xb4>)
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4a13      	ldr	r2, [pc, #76]	@ (8008e4c <xTaskRemoveFromEventList+0xb8>)
 8008e00:	441a      	add	r2, r3
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4619      	mov	r1, r3
 8008e08:	4610      	mov	r0, r2
 8008e0a:	f7fe fb46 	bl	800749a <vListInsertEnd>
 8008e0e:	e005      	b.n	8008e1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3318      	adds	r3, #24
 8008e14:	4619      	mov	r1, r3
 8008e16:	480e      	ldr	r0, [pc, #56]	@ (8008e50 <xTaskRemoveFromEventList+0xbc>)
 8008e18:	f7fe fb3f 	bl	800749a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e20:	4b0c      	ldr	r3, [pc, #48]	@ (8008e54 <xTaskRemoveFromEventList+0xc0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d905      	bls.n	8008e36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e58 <xTaskRemoveFromEventList+0xc4>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e001      	b.n	8008e3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e3a:	697b      	ldr	r3, [r7, #20]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	200013b8 	.word	0x200013b8
 8008e48:	20001398 	.word	0x20001398
 8008e4c:	20000ec0 	.word	0x20000ec0
 8008e50:	20001350 	.word	0x20001350
 8008e54:	20000ebc 	.word	0x20000ebc
 8008e58:	200013a4 	.word	0x200013a4

08008e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e64:	4b06      	ldr	r3, [pc, #24]	@ (8008e80 <vTaskInternalSetTimeOutState+0x24>)
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e6c:	4b05      	ldr	r3, [pc, #20]	@ (8008e84 <vTaskInternalSetTimeOutState+0x28>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	605a      	str	r2, [r3, #4]
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	200013a8 	.word	0x200013a8
 8008e84:	20001394 	.word	0x20001394

08008e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10b      	bne.n	8008eb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	613b      	str	r3, [r7, #16]
}
 8008eaa:	bf00      	nop
 8008eac:	bf00      	nop
 8008eae:	e7fd      	b.n	8008eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10b      	bne.n	8008ece <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60fb      	str	r3, [r7, #12]
}
 8008ec8:	bf00      	nop
 8008eca:	bf00      	nop
 8008ecc:	e7fd      	b.n	8008eca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008ece:	f000 ffa3 	bl	8009e18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ed2:	4b24      	ldr	r3, [pc, #144]	@ (8008f64 <xTaskCheckForTimeOut+0xdc>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8008ee2:	4b21      	ldr	r3, [pc, #132]	@ (8008f68 <xTaskCheckForTimeOut+0xe0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d007      	beq.n	8008efe <xTaskCheckForTimeOut+0x76>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008eee:	4b1e      	ldr	r3, [pc, #120]	@ (8008f68 <xTaskCheckForTimeOut+0xe0>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
				xReturn = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	e02b      	b.n	8008f56 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f06:	d102      	bne.n	8008f0e <xTaskCheckForTimeOut+0x86>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61fb      	str	r3, [r7, #28]
 8008f0c:	e023      	b.n	8008f56 <xTaskCheckForTimeOut+0xce>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	4b16      	ldr	r3, [pc, #88]	@ (8008f6c <xTaskCheckForTimeOut+0xe4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d007      	beq.n	8008f2a <xTaskCheckForTimeOut+0xa2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d302      	bcc.n	8008f2a <xTaskCheckForTimeOut+0xa2>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f24:	2301      	movs	r3, #1
 8008f26:	61fb      	str	r3, [r7, #28]
 8008f28:	e015      	b.n	8008f56 <xTaskCheckForTimeOut+0xce>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d20b      	bcs.n	8008f4c <xTaskCheckForTimeOut+0xc4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff ff8b 	bl	8008e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	e004      	b.n	8008f56 <xTaskCheckForTimeOut+0xce>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f52:	2301      	movs	r3, #1
 8008f54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f56:	f000 ff91 	bl	8009e7c <vPortExitCritical>

	return xReturn;
 8008f5a:	69fb      	ldr	r3, [r7, #28]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20001394 	.word	0x20001394
 8008f68:	20000ebc 	.word	0x20000ebc
 8008f6c:	200013a8 	.word	0x200013a8

08008f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f74:	4b03      	ldr	r3, [pc, #12]	@ (8008f84 <vTaskMissedYield+0x14>)
 8008f76:	2201      	movs	r2, #1
 8008f78:	601a      	str	r2, [r3, #0]
}
 8008f7a:	bf00      	nop
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	200013a4 	.word	0x200013a4

08008f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f90:	f000 f854 	bl	800903c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f94:	4b07      	ldr	r3, [pc, #28]	@ (8008fb4 <prvIdleTask+0x2c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d907      	bls.n	8008fac <prvIdleTask+0x24>
			{
				taskYIELD();
 8008f9c:	4b06      	ldr	r3, [pc, #24]	@ (8008fb8 <prvIdleTask+0x30>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008fac:	f7f8 f9ea 	bl	8001384 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008fb0:	e7ee      	b.n	8008f90 <prvIdleTask+0x8>
 8008fb2:	bf00      	nop
 8008fb4:	20000ec0 	.word	0x20000ec0
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	607b      	str	r3, [r7, #4]
 8008fc6:	e00c      	b.n	8008fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4a12      	ldr	r2, [pc, #72]	@ (800901c <prvInitialiseTaskLists+0x60>)
 8008fd4:	4413      	add	r3, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fa32 	bl	8007440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b37      	cmp	r3, #55	@ 0x37
 8008fe6:	d9ef      	bls.n	8008fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fe8:	480d      	ldr	r0, [pc, #52]	@ (8009020 <prvInitialiseTaskLists+0x64>)
 8008fea:	f7fe fa29 	bl	8007440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fee:	480d      	ldr	r0, [pc, #52]	@ (8009024 <prvInitialiseTaskLists+0x68>)
 8008ff0:	f7fe fa26 	bl	8007440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ff4:	480c      	ldr	r0, [pc, #48]	@ (8009028 <prvInitialiseTaskLists+0x6c>)
 8008ff6:	f7fe fa23 	bl	8007440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ffa:	480c      	ldr	r0, [pc, #48]	@ (800902c <prvInitialiseTaskLists+0x70>)
 8008ffc:	f7fe fa20 	bl	8007440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009000:	480b      	ldr	r0, [pc, #44]	@ (8009030 <prvInitialiseTaskLists+0x74>)
 8009002:	f7fe fa1d 	bl	8007440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009006:	4b0b      	ldr	r3, [pc, #44]	@ (8009034 <prvInitialiseTaskLists+0x78>)
 8009008:	4a05      	ldr	r2, [pc, #20]	@ (8009020 <prvInitialiseTaskLists+0x64>)
 800900a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800900c:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <prvInitialiseTaskLists+0x7c>)
 800900e:	4a05      	ldr	r2, [pc, #20]	@ (8009024 <prvInitialiseTaskLists+0x68>)
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20000ec0 	.word	0x20000ec0
 8009020:	20001320 	.word	0x20001320
 8009024:	20001334 	.word	0x20001334
 8009028:	20001350 	.word	0x20001350
 800902c:	20001364 	.word	0x20001364
 8009030:	2000137c 	.word	0x2000137c
 8009034:	20001348 	.word	0x20001348
 8009038:	2000134c 	.word	0x2000134c

0800903c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009042:	e019      	b.n	8009078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009044:	f000 fee8 	bl	8009e18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009048:	4b10      	ldr	r3, [pc, #64]	@ (800908c <prvCheckTasksWaitingTermination+0x50>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3304      	adds	r3, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fa7d 	bl	8007554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800905a:	4b0d      	ldr	r3, [pc, #52]	@ (8009090 <prvCheckTasksWaitingTermination+0x54>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3b01      	subs	r3, #1
 8009060:	4a0b      	ldr	r2, [pc, #44]	@ (8009090 <prvCheckTasksWaitingTermination+0x54>)
 8009062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009064:	4b0b      	ldr	r3, [pc, #44]	@ (8009094 <prvCheckTasksWaitingTermination+0x58>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3b01      	subs	r3, #1
 800906a:	4a0a      	ldr	r2, [pc, #40]	@ (8009094 <prvCheckTasksWaitingTermination+0x58>)
 800906c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800906e:	f000 ff05 	bl	8009e7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f810 	bl	8009098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009078:	4b06      	ldr	r3, [pc, #24]	@ (8009094 <prvCheckTasksWaitingTermination+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e1      	bne.n	8009044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20001364 	.word	0x20001364
 8009090:	20001390 	.word	0x20001390
 8009094:	20001378 	.word	0x20001378

08009098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d108      	bne.n	80090bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 f8a8 	bl	800a204 <vPortFree>
				vPortFree( pxTCB );
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f001 f8a5 	bl	800a204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090ba:	e019      	b.n	80090f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d103      	bne.n	80090ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 f89c 	bl	800a204 <vPortFree>
	}
 80090cc:	e010      	b.n	80090f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d00b      	beq.n	80090f0 <prvDeleteTCB+0x58>
	__asm volatile
 80090d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	60fb      	str	r3, [r7, #12]
}
 80090ea:	bf00      	nop
 80090ec:	bf00      	nop
 80090ee:	e7fd      	b.n	80090ec <prvDeleteTCB+0x54>
	}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <prvResetNextTaskUnblockTime+0x38>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d104      	bne.n	8009112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009108:	4b0a      	ldr	r3, [pc, #40]	@ (8009134 <prvResetNextTaskUnblockTime+0x3c>)
 800910a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800910e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009110:	e008      	b.n	8009124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009112:	4b07      	ldr	r3, [pc, #28]	@ (8009130 <prvResetNextTaskUnblockTime+0x38>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	4a04      	ldr	r2, [pc, #16]	@ (8009134 <prvResetNextTaskUnblockTime+0x3c>)
 8009122:	6013      	str	r3, [r2, #0]
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	20001348 	.word	0x20001348
 8009134:	200013b0 	.word	0x200013b0

08009138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800913e:	4b0b      	ldr	r3, [pc, #44]	@ (800916c <xTaskGetSchedulerState+0x34>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009146:	2301      	movs	r3, #1
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	e008      	b.n	800915e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800914c:	4b08      	ldr	r3, [pc, #32]	@ (8009170 <xTaskGetSchedulerState+0x38>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009154:	2302      	movs	r3, #2
 8009156:	607b      	str	r3, [r7, #4]
 8009158:	e001      	b.n	800915e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800915a:	2300      	movs	r3, #0
 800915c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800915e:	687b      	ldr	r3, [r7, #4]
	}
 8009160:	4618      	mov	r0, r3
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	2000139c 	.word	0x2000139c
 8009170:	200013b8 	.word	0x200013b8

08009174 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009180:	2300      	movs	r3, #0
 8009182:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d051      	beq.n	800922e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800918e:	4b2a      	ldr	r3, [pc, #168]	@ (8009238 <xTaskPriorityInherit+0xc4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009194:	429a      	cmp	r2, r3
 8009196:	d241      	bcs.n	800921c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	db06      	blt.n	80091ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a0:	4b25      	ldr	r3, [pc, #148]	@ (8009238 <xTaskPriorityInherit+0xc4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6959      	ldr	r1, [r3, #20]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b6:	4613      	mov	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4a1f      	ldr	r2, [pc, #124]	@ (800923c <xTaskPriorityInherit+0xc8>)
 80091c0:	4413      	add	r3, r2
 80091c2:	4299      	cmp	r1, r3
 80091c4:	d122      	bne.n	800920c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe f9c2 	bl	8007554 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091d0:	4b19      	ldr	r3, [pc, #100]	@ (8009238 <xTaskPriorityInherit+0xc4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091de:	4b18      	ldr	r3, [pc, #96]	@ (8009240 <xTaskPriorityInherit+0xcc>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d903      	bls.n	80091ee <xTaskPriorityInherit+0x7a>
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ea:	4a15      	ldr	r2, [pc, #84]	@ (8009240 <xTaskPriorityInherit+0xcc>)
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4a10      	ldr	r2, [pc, #64]	@ (800923c <xTaskPriorityInherit+0xc8>)
 80091fc:	441a      	add	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	3304      	adds	r3, #4
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f7fe f948 	bl	800749a <vListInsertEnd>
 800920a:	e004      	b.n	8009216 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800920c:	4b0a      	ldr	r3, [pc, #40]	@ (8009238 <xTaskPriorityInherit+0xc4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009216:	2301      	movs	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	e008      	b.n	800922e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009220:	4b05      	ldr	r3, [pc, #20]	@ (8009238 <xTaskPriorityInherit+0xc4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009226:	429a      	cmp	r2, r3
 8009228:	d201      	bcs.n	800922e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800922a:	2301      	movs	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800922e:	68fb      	ldr	r3, [r7, #12]
	}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000ebc 	.word	0x20000ebc
 800923c:	20000ec0 	.word	0x20000ec0
 8009240:	20001398 	.word	0x20001398

08009244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d058      	beq.n	800930c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800925a:	4b2f      	ldr	r3, [pc, #188]	@ (8009318 <xTaskPriorityDisinherit+0xd4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	429a      	cmp	r2, r3
 8009262:	d00b      	beq.n	800927c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60fb      	str	r3, [r7, #12]
}
 8009276:	bf00      	nop
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	60bb      	str	r3, [r7, #8]
}
 8009296:	bf00      	nop
 8009298:	bf00      	nop
 800929a:	e7fd      	b.n	8009298 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a0:	1e5a      	subs	r2, r3, #1
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d02c      	beq.n	800930c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d128      	bne.n	800930c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe f948 	bl	8007554 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092dc:	4b0f      	ldr	r3, [pc, #60]	@ (800931c <xTaskPriorityDisinherit+0xd8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d903      	bls.n	80092ec <xTaskPriorityDisinherit+0xa8>
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	4a0c      	ldr	r2, [pc, #48]	@ (800931c <xTaskPriorityDisinherit+0xd8>)
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4a09      	ldr	r2, [pc, #36]	@ (8009320 <xTaskPriorityDisinherit+0xdc>)
 80092fa:	441a      	add	r2, r3
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	3304      	adds	r3, #4
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f7fe f8c9 	bl	800749a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009308:	2301      	movs	r3, #1
 800930a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800930c:	697b      	ldr	r3, [r7, #20]
	}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000ebc 	.word	0x20000ebc
 800931c:	20001398 	.word	0x20001398
 8009320:	20000ec0 	.word	0x20000ec0

08009324 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009332:	2301      	movs	r3, #1
 8009334:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d06c      	beq.n	8009416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60fb      	str	r3, [r7, #12]
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	e7fd      	b.n	8009358 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d902      	bls.n	800936c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	e002      	b.n	8009372 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009370:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009376:	69fa      	ldr	r2, [r7, #28]
 8009378:	429a      	cmp	r2, r3
 800937a:	d04c      	beq.n	8009416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	429a      	cmp	r2, r3
 8009384:	d147      	bne.n	8009416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009386:	4b26      	ldr	r3, [pc, #152]	@ (8009420 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	429a      	cmp	r2, r3
 800938e:	d10b      	bne.n	80093a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60bb      	str	r3, [r7, #8]
}
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	db04      	blt.n	80093c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	6959      	ldr	r1, [r3, #20]
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	4613      	mov	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4a13      	ldr	r2, [pc, #76]	@ (8009424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093d6:	4413      	add	r3, r2
 80093d8:	4299      	cmp	r1, r3
 80093da:	d11c      	bne.n	8009416 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	3304      	adds	r3, #4
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fe f8b7 	bl	8007554 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009428 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d903      	bls.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009428 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fe:	4613      	mov	r3, r2
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4a07      	ldr	r2, [pc, #28]	@ (8009424 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009408:	441a      	add	r2, r3
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	3304      	adds	r3, #4
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f7fe f842 	bl	800749a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009416:	bf00      	nop
 8009418:	3720      	adds	r7, #32
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000ebc 	.word	0x20000ebc
 8009424:	20000ec0 	.word	0x20000ec0
 8009428:	20001398 	.word	0x20001398

0800942c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009430:	4b07      	ldr	r3, [pc, #28]	@ (8009450 <pvTaskIncrementMutexHeldCount+0x24>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009438:	4b05      	ldr	r3, [pc, #20]	@ (8009450 <pvTaskIncrementMutexHeldCount+0x24>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800943e:	3201      	adds	r2, #1
 8009440:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009442:	4b03      	ldr	r3, [pc, #12]	@ (8009450 <pvTaskIncrementMutexHeldCount+0x24>)
 8009444:	681b      	ldr	r3, [r3, #0]
	}
 8009446:	4618      	mov	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	20000ebc 	.word	0x20000ebc

08009454 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800945e:	4b24      	ldr	r3, [pc, #144]	@ (80094f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8009464:	4b23      	ldr	r3, [pc, #140]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800946e:	4b21      	ldr	r3, [pc, #132]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3304      	adds	r3, #4
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe f86d 	bl	8007554 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009480:	d10a      	bne.n	8009498 <prvAddCurrentTaskToDelayedList+0x44>
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009488:	4b1a      	ldr	r3, [pc, #104]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3304      	adds	r3, #4
 800948e:	4619      	mov	r1, r3
 8009490:	4819      	ldr	r0, [pc, #100]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009492:	f7fe f802 	bl	800749a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009496:	e026      	b.n	80094e6 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4413      	add	r3, r2
 800949e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094a0:	4b14      	ldr	r3, [pc, #80]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d209      	bcs.n	80094c4 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b0:	4b12      	ldr	r3, [pc, #72]	@ (80094fc <prvAddCurrentTaskToDelayedList+0xa8>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	4b0f      	ldr	r3, [pc, #60]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3304      	adds	r3, #4
 80094ba:	4619      	mov	r1, r3
 80094bc:	4610      	mov	r0, r2
 80094be:	f7fe f810 	bl	80074e2 <vListInsert>
}
 80094c2:	e010      	b.n	80094e6 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009500 <prvAddCurrentTaskToDelayedList+0xac>)
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3304      	adds	r3, #4
 80094ce:	4619      	mov	r1, r3
 80094d0:	4610      	mov	r0, r2
 80094d2:	f7fe f806 	bl	80074e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009504 <prvAddCurrentTaskToDelayedList+0xb0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d202      	bcs.n	80094e6 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80094e0:	4a08      	ldr	r2, [pc, #32]	@ (8009504 <prvAddCurrentTaskToDelayedList+0xb0>)
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6013      	str	r3, [r2, #0]
}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	20001394 	.word	0x20001394
 80094f4:	20000ebc 	.word	0x20000ebc
 80094f8:	2000137c 	.word	0x2000137c
 80094fc:	2000134c 	.word	0x2000134c
 8009500:	20001348 	.word	0x20001348
 8009504:	200013b0 	.word	0x200013b0

08009508 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	@ 0x28
 800950c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009512:	f000 fb13 	bl	8009b3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009516:	4b1d      	ldr	r3, [pc, #116]	@ (800958c <xTimerCreateTimerTask+0x84>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d021      	beq.n	8009562 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800951e:	2300      	movs	r3, #0
 8009520:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009526:	1d3a      	adds	r2, r7, #4
 8009528:	f107 0108 	add.w	r1, r7, #8
 800952c:	f107 030c 	add.w	r3, r7, #12
 8009530:	4618      	mov	r0, r3
 8009532:	f7fd ff6b 	bl	800740c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	9202      	str	r2, [sp, #8]
 800953e:	9301      	str	r3, [sp, #4]
 8009540:	2302      	movs	r3, #2
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	2300      	movs	r3, #0
 8009546:	460a      	mov	r2, r1
 8009548:	4911      	ldr	r1, [pc, #68]	@ (8009590 <xTimerCreateTimerTask+0x88>)
 800954a:	4812      	ldr	r0, [pc, #72]	@ (8009594 <xTimerCreateTimerTask+0x8c>)
 800954c:	f7fe ff1a 	bl	8008384 <xTaskCreateStatic>
 8009550:	4603      	mov	r3, r0
 8009552:	4a11      	ldr	r2, [pc, #68]	@ (8009598 <xTimerCreateTimerTask+0x90>)
 8009554:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009556:	4b10      	ldr	r3, [pc, #64]	@ (8009598 <xTimerCreateTimerTask+0x90>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800955e:	2301      	movs	r3, #1
 8009560:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10b      	bne.n	8009580 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	613b      	str	r3, [r7, #16]
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009580:	697b      	ldr	r3, [r7, #20]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	200013ec 	.word	0x200013ec
 8009590:	0802495c 	.word	0x0802495c
 8009594:	080096d5 	.word	0x080096d5
 8009598:	200013f0 	.word	0x200013f0

0800959c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08a      	sub	sp, #40	@ 0x28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10b      	bne.n	80095cc <xTimerGenericCommand+0x30>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	623b      	str	r3, [r7, #32]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095cc:	4b19      	ldr	r3, [pc, #100]	@ (8009634 <xTimerGenericCommand+0x98>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d02a      	beq.n	800962a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	dc18      	bgt.n	8009618 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095e6:	f7ff fda7 	bl	8009138 <xTaskGetSchedulerState>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d109      	bne.n	8009604 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095f0:	4b10      	ldr	r3, [pc, #64]	@ (8009634 <xTimerGenericCommand+0x98>)
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	f107 0110 	add.w	r1, r7, #16
 80095f8:	2300      	movs	r3, #0
 80095fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095fc:	f7fe f91a 	bl	8007834 <xQueueGenericSend>
 8009600:	6278      	str	r0, [r7, #36]	@ 0x24
 8009602:	e012      	b.n	800962a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009604:	4b0b      	ldr	r3, [pc, #44]	@ (8009634 <xTimerGenericCommand+0x98>)
 8009606:	6818      	ldr	r0, [r3, #0]
 8009608:	f107 0110 	add.w	r1, r7, #16
 800960c:	2300      	movs	r3, #0
 800960e:	2200      	movs	r2, #0
 8009610:	f7fe f910 	bl	8007834 <xQueueGenericSend>
 8009614:	6278      	str	r0, [r7, #36]	@ 0x24
 8009616:	e008      	b.n	800962a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009618:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <xTimerGenericCommand+0x98>)
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	f107 0110 	add.w	r1, r7, #16
 8009620:	2300      	movs	r3, #0
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	f7fe fa08 	bl	8007a38 <xQueueGenericSendFromISR>
 8009628:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800962a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800962c:	4618      	mov	r0, r3
 800962e:	3728      	adds	r7, #40	@ 0x28
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	200013ec 	.word	0x200013ec

08009638 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af02      	add	r7, sp, #8
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009642:	4b23      	ldr	r3, [pc, #140]	@ (80096d0 <prvProcessExpiredTimer+0x98>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	3304      	adds	r3, #4
 8009650:	4618      	mov	r0, r3
 8009652:	f7fd ff7f 	bl	8007554 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d023      	beq.n	80096ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	699a      	ldr	r2, [r3, #24]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	18d1      	adds	r1, r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	6978      	ldr	r0, [r7, #20]
 8009672:	f000 f8d5 	bl	8009820 <prvInsertTimerInActiveList>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d020      	beq.n	80096be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800967c:	2300      	movs	r3, #0
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2300      	movs	r3, #0
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	2100      	movs	r1, #0
 8009686:	6978      	ldr	r0, [r7, #20]
 8009688:	f7ff ff88 	bl	800959c <xTimerGenericCommand>
 800968c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d114      	bne.n	80096be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	60fb      	str	r3, [r7, #12]
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	e7fd      	b.n	80096a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096b2:	f023 0301 	bic.w	r3, r3, #1
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	6978      	ldr	r0, [r7, #20]
 80096c4:	4798      	blx	r3
}
 80096c6:	bf00      	nop
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	200013e4 	.word	0x200013e4

080096d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096dc:	f107 0308 	add.w	r3, r7, #8
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f859 	bl	8009798 <prvGetNextExpireTime>
 80096e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4619      	mov	r1, r3
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 f805 	bl	80096fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096f2:	f000 f8d7 	bl	80098a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096f6:	bf00      	nop
 80096f8:	e7f0      	b.n	80096dc <prvTimerTask+0x8>
	...

080096fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009706:	f7ff f8f9 	bl	80088fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800970a:	f107 0308 	add.w	r3, r7, #8
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f866 	bl	80097e0 <prvSampleTimeNow>
 8009714:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d130      	bne.n	800977e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <prvProcessTimerOrBlockTask+0x3c>
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	429a      	cmp	r2, r3
 8009728:	d806      	bhi.n	8009738 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800972a:	f7ff f8f5 	bl	8008918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f7ff ff81 	bl	8009638 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009736:	e024      	b.n	8009782 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d008      	beq.n	8009750 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800973e:	4b13      	ldr	r3, [pc, #76]	@ (800978c <prvProcessTimerOrBlockTask+0x90>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <prvProcessTimerOrBlockTask+0x50>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <prvProcessTimerOrBlockTask+0x52>
 800974c:	2300      	movs	r3, #0
 800974e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009750:	4b0f      	ldr	r3, [pc, #60]	@ (8009790 <prvProcessTimerOrBlockTask+0x94>)
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	4619      	mov	r1, r3
 800975e:	f7fe fddd 	bl	800831c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009762:	f7ff f8d9 	bl	8008918 <xTaskResumeAll>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d10a      	bne.n	8009782 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800976c:	4b09      	ldr	r3, [pc, #36]	@ (8009794 <prvProcessTimerOrBlockTask+0x98>)
 800976e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	f3bf 8f6f 	isb	sy
}
 800977c:	e001      	b.n	8009782 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800977e:	f7ff f8cb 	bl	8008918 <xTaskResumeAll>
}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	200013e8 	.word	0x200013e8
 8009790:	200013ec 	.word	0x200013ec
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097a0:	4b0e      	ldr	r3, [pc, #56]	@ (80097dc <prvGetNextExpireTime+0x44>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <prvGetNextExpireTime+0x16>
 80097aa:	2201      	movs	r2, #1
 80097ac:	e000      	b.n	80097b0 <prvGetNextExpireTime+0x18>
 80097ae:	2200      	movs	r2, #0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d105      	bne.n	80097c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097bc:	4b07      	ldr	r3, [pc, #28]	@ (80097dc <prvGetNextExpireTime+0x44>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	e001      	b.n	80097cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097cc:	68fb      	ldr	r3, [r7, #12]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3714      	adds	r7, #20
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	200013e4 	.word	0x200013e4

080097e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097e8:	f7ff f934 	bl	8008a54 <xTaskGetTickCount>
 80097ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097ee:	4b0b      	ldr	r3, [pc, #44]	@ (800981c <prvSampleTimeNow+0x3c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d205      	bcs.n	8009804 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097f8:	f000 f93a 	bl	8009a70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e002      	b.n	800980a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800980a:	4a04      	ldr	r2, [pc, #16]	@ (800981c <prvSampleTimeNow+0x3c>)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009810:	68fb      	ldr	r3, [r7, #12]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200013f4 	.word	0x200013f4

08009820 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	429a      	cmp	r2, r3
 8009844:	d812      	bhi.n	800986c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	1ad2      	subs	r2, r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e01b      	b.n	8009892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800985a:	4b10      	ldr	r3, [pc, #64]	@ (800989c <prvInsertTimerInActiveList+0x7c>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fd fe3c 	bl	80074e2 <vListInsert>
 800986a:	e012      	b.n	8009892 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d206      	bcs.n	8009882 <prvInsertTimerInActiveList+0x62>
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	429a      	cmp	r2, r3
 800987a:	d302      	bcc.n	8009882 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800987c:	2301      	movs	r3, #1
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	e007      	b.n	8009892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009882:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <prvInsertTimerInActiveList+0x80>)
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3304      	adds	r3, #4
 800988a:	4619      	mov	r1, r3
 800988c:	4610      	mov	r0, r2
 800988e:	f7fd fe28 	bl	80074e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009892:	697b      	ldr	r3, [r7, #20]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	200013e8 	.word	0x200013e8
 80098a0:	200013e4 	.word	0x200013e4

080098a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08e      	sub	sp, #56	@ 0x38
 80098a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098aa:	e0ce      	b.n	8009a4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da19      	bge.n	80098e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098b2:	1d3b      	adds	r3, r7, #4
 80098b4:	3304      	adds	r3, #4
 80098b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10b      	bne.n	80098d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	61fb      	str	r3, [r7, #28]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098dc:	6850      	ldr	r0, [r2, #4]
 80098de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e0:	6892      	ldr	r2, [r2, #8]
 80098e2:	4611      	mov	r1, r2
 80098e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f2c0 80ae 	blt.w	8009a4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	3304      	adds	r3, #4
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fd fe28 	bl	8007554 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009904:	463b      	mov	r3, r7
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff ff6a 	bl	80097e0 <prvSampleTimeNow>
 800990c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2b09      	cmp	r3, #9
 8009912:	f200 8097 	bhi.w	8009a44 <prvProcessReceivedCommands+0x1a0>
 8009916:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <prvProcessReceivedCommands+0x78>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	08009945 	.word	0x08009945
 8009920:	08009945 	.word	0x08009945
 8009924:	08009945 	.word	0x08009945
 8009928:	080099bb 	.word	0x080099bb
 800992c:	080099cf 	.word	0x080099cf
 8009930:	08009a1b 	.word	0x08009a1b
 8009934:	08009945 	.word	0x08009945
 8009938:	08009945 	.word	0x08009945
 800993c:	080099bb 	.word	0x080099bb
 8009940:	080099cf 	.word	0x080099cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009946:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800994a:	f043 0301 	orr.w	r3, r3, #1
 800994e:	b2da      	uxtb	r2, r3
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	18d1      	adds	r1, r2, r3
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009964:	f7ff ff5c 	bl	8009820 <prvInsertTimerInActiveList>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d06c      	beq.n	8009a48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009974:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d061      	beq.n	8009a48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009984:	68ba      	ldr	r2, [r7, #8]
 8009986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	441a      	add	r2, r3
 800998c:	2300      	movs	r3, #0
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2300      	movs	r3, #0
 8009992:	2100      	movs	r1, #0
 8009994:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009996:	f7ff fe01 	bl	800959c <xTimerGenericCommand>
 800999a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d152      	bne.n	8009a48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	61bb      	str	r3, [r7, #24]
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop
 80099b8:	e7fd      	b.n	80099b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c0:	f023 0301 	bic.w	r3, r3, #1
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099cc:	e03d      	b.n	8009a4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d4:	f043 0301 	orr.w	r3, r3, #1
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	617b      	str	r3, [r7, #20]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	18d1      	adds	r1, r2, r3
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a14:	f7ff ff04 	bl	8009820 <prvInsertTimerInActiveList>
					break;
 8009a18:	e017      	b.n	8009a4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d103      	bne.n	8009a30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a2a:	f000 fbeb 	bl	800a204 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a2e:	e00c      	b.n	8009a4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a36:	f023 0301 	bic.w	r3, r3, #1
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a42:	e002      	b.n	8009a4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <prvProcessReceivedCommands+0x1a6>
					break;
 8009a48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a4a:	4b08      	ldr	r3, [pc, #32]	@ (8009a6c <prvProcessReceivedCommands+0x1c8>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	1d39      	adds	r1, r7, #4
 8009a50:	2200      	movs	r2, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe f91e 	bl	8007c94 <xQueueReceive>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f47f af26 	bne.w	80098ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	3730      	adds	r7, #48	@ 0x30
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200013ec 	.word	0x200013ec

08009a70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a76:	e049      	b.n	8009b0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a78:	4b2e      	ldr	r3, [pc, #184]	@ (8009b34 <prvSwitchTimerLists+0xc4>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a82:	4b2c      	ldr	r3, [pc, #176]	@ (8009b34 <prvSwitchTimerLists+0xc4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fd fd5f 	bl	8007554 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aa4:	f003 0304 	and.w	r3, r3, #4
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d02f      	beq.n	8009b0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d90e      	bls.n	8009adc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aca:	4b1a      	ldr	r3, [pc, #104]	@ (8009b34 <prvSwitchTimerLists+0xc4>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	f7fd fd04 	bl	80074e2 <vListInsert>
 8009ada:	e017      	b.n	8009b0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009adc:	2300      	movs	r3, #0
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7ff fd58 	bl	800959c <xTimerGenericCommand>
 8009aec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10b      	bne.n	8009b0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	603b      	str	r3, [r7, #0]
}
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	e7fd      	b.n	8009b08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b0c:	4b09      	ldr	r3, [pc, #36]	@ (8009b34 <prvSwitchTimerLists+0xc4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1b0      	bne.n	8009a78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b16:	4b07      	ldr	r3, [pc, #28]	@ (8009b34 <prvSwitchTimerLists+0xc4>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b1c:	4b06      	ldr	r3, [pc, #24]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a04      	ldr	r2, [pc, #16]	@ (8009b34 <prvSwitchTimerLists+0xc4>)
 8009b22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b24:	4a04      	ldr	r2, [pc, #16]	@ (8009b38 <prvSwitchTimerLists+0xc8>)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	6013      	str	r3, [r2, #0]
}
 8009b2a:	bf00      	nop
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200013e4 	.word	0x200013e4
 8009b38:	200013e8 	.word	0x200013e8

08009b3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b42:	f000 f969 	bl	8009e18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b46:	4b15      	ldr	r3, [pc, #84]	@ (8009b9c <prvCheckForValidListAndQueue+0x60>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d120      	bne.n	8009b90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b4e:	4814      	ldr	r0, [pc, #80]	@ (8009ba0 <prvCheckForValidListAndQueue+0x64>)
 8009b50:	f7fd fc76 	bl	8007440 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b54:	4813      	ldr	r0, [pc, #76]	@ (8009ba4 <prvCheckForValidListAndQueue+0x68>)
 8009b56:	f7fd fc73 	bl	8007440 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b5a:	4b13      	ldr	r3, [pc, #76]	@ (8009ba8 <prvCheckForValidListAndQueue+0x6c>)
 8009b5c:	4a10      	ldr	r2, [pc, #64]	@ (8009ba0 <prvCheckForValidListAndQueue+0x64>)
 8009b5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b60:	4b12      	ldr	r3, [pc, #72]	@ (8009bac <prvCheckForValidListAndQueue+0x70>)
 8009b62:	4a10      	ldr	r2, [pc, #64]	@ (8009ba4 <prvCheckForValidListAndQueue+0x68>)
 8009b64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b66:	2300      	movs	r3, #0
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	4b11      	ldr	r3, [pc, #68]	@ (8009bb0 <prvCheckForValidListAndQueue+0x74>)
 8009b6c:	4a11      	ldr	r2, [pc, #68]	@ (8009bb4 <prvCheckForValidListAndQueue+0x78>)
 8009b6e:	2110      	movs	r1, #16
 8009b70:	200a      	movs	r0, #10
 8009b72:	f7fd fd83 	bl	800767c <xQueueGenericCreateStatic>
 8009b76:	4603      	mov	r3, r0
 8009b78:	4a08      	ldr	r2, [pc, #32]	@ (8009b9c <prvCheckForValidListAndQueue+0x60>)
 8009b7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b7c:	4b07      	ldr	r3, [pc, #28]	@ (8009b9c <prvCheckForValidListAndQueue+0x60>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b84:	4b05      	ldr	r3, [pc, #20]	@ (8009b9c <prvCheckForValidListAndQueue+0x60>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	490b      	ldr	r1, [pc, #44]	@ (8009bb8 <prvCheckForValidListAndQueue+0x7c>)
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fb9c 	bl	80082c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b90:	f000 f974 	bl	8009e7c <vPortExitCritical>
}
 8009b94:	bf00      	nop
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200013ec 	.word	0x200013ec
 8009ba0:	200013bc 	.word	0x200013bc
 8009ba4:	200013d0 	.word	0x200013d0
 8009ba8:	200013e4 	.word	0x200013e4
 8009bac:	200013e8 	.word	0x200013e8
 8009bb0:	20001498 	.word	0x20001498
 8009bb4:	200013f8 	.word	0x200013f8
 8009bb8:	08024964 	.word	0x08024964

08009bbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3b04      	subs	r3, #4
 8009bcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3b04      	subs	r3, #4
 8009bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f023 0201 	bic.w	r2, r3, #1
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	3b04      	subs	r3, #4
 8009bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bec:	4a0c      	ldr	r2, [pc, #48]	@ (8009c20 <pxPortInitialiseStack+0x64>)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3b14      	subs	r3, #20
 8009bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3b04      	subs	r3, #4
 8009c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f06f 0202 	mvn.w	r2, #2
 8009c0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3b20      	subs	r3, #32
 8009c10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c12:	68fb      	ldr	r3, [r7, #12]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3714      	adds	r7, #20
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	08009c25 	.word	0x08009c25

08009c24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c2e:	4b13      	ldr	r3, [pc, #76]	@ (8009c7c <prvTaskExitError+0x58>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c36:	d00b      	beq.n	8009c50 <prvTaskExitError+0x2c>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	60fb      	str	r3, [r7, #12]
}
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <prvTaskExitError+0x28>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	60bb      	str	r3, [r7, #8]
}
 8009c62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c64:	bf00      	nop
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0fc      	beq.n	8009c66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	3714      	adds	r7, #20
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	20000068 	.word	0x20000068

08009c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c80:	4b07      	ldr	r3, [pc, #28]	@ (8009ca0 <pxCurrentTCBConst2>)
 8009c82:	6819      	ldr	r1, [r3, #0]
 8009c84:	6808      	ldr	r0, [r1, #0]
 8009c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8a:	f380 8809 	msr	PSP, r0
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f04f 0000 	mov.w	r0, #0
 8009c96:	f380 8811 	msr	BASEPRI, r0
 8009c9a:	4770      	bx	lr
 8009c9c:	f3af 8000 	nop.w

08009ca0 <pxCurrentTCBConst2>:
 8009ca0:	20000ebc 	.word	0x20000ebc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop

08009ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ca8:	4808      	ldr	r0, [pc, #32]	@ (8009ccc <prvPortStartFirstTask+0x24>)
 8009caa:	6800      	ldr	r0, [r0, #0]
 8009cac:	6800      	ldr	r0, [r0, #0]
 8009cae:	f380 8808 	msr	MSP, r0
 8009cb2:	f04f 0000 	mov.w	r0, #0
 8009cb6:	f380 8814 	msr	CONTROL, r0
 8009cba:	b662      	cpsie	i
 8009cbc:	b661      	cpsie	f
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	df00      	svc	0
 8009cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cca:	bf00      	nop
 8009ccc:	e000ed08 	.word	0xe000ed08

08009cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009cd6:	4b47      	ldr	r3, [pc, #284]	@ (8009df4 <xPortStartScheduler+0x124>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a47      	ldr	r2, [pc, #284]	@ (8009df8 <xPortStartScheduler+0x128>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d10b      	bne.n	8009cf8 <xPortStartScheduler+0x28>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	613b      	str	r3, [r7, #16]
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	e7fd      	b.n	8009cf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8009df4 <xPortStartScheduler+0x124>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a3f      	ldr	r2, [pc, #252]	@ (8009dfc <xPortStartScheduler+0x12c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d10b      	bne.n	8009d1a <xPortStartScheduler+0x4a>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	60fb      	str	r3, [r7, #12]
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	e7fd      	b.n	8009d16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d1a:	4b39      	ldr	r3, [pc, #228]	@ (8009e00 <xPortStartScheduler+0x130>)
 8009d1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	22ff      	movs	r2, #255	@ 0xff
 8009d2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	4b31      	ldr	r3, [pc, #196]	@ (8009e04 <xPortStartScheduler+0x134>)
 8009d40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d42:	4b31      	ldr	r3, [pc, #196]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d44:	2207      	movs	r2, #7
 8009d46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d48:	e009      	b.n	8009d5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	4a2d      	ldr	r2, [pc, #180]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	005b      	lsls	r3, r3, #1
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d5e:	78fb      	ldrb	r3, [r7, #3]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d66:	2b80      	cmp	r3, #128	@ 0x80
 8009d68:	d0ef      	beq.n	8009d4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d6a:	4b27      	ldr	r3, [pc, #156]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f1c3 0307 	rsb	r3, r3, #7
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d00b      	beq.n	8009d8e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60bb      	str	r3, [r7, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	bf00      	nop
 8009d8c:	e7fd      	b.n	8009d8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	021b      	lsls	r3, r3, #8
 8009d94:	4a1c      	ldr	r2, [pc, #112]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d98:	4b1b      	ldr	r3, [pc, #108]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009da0:	4a19      	ldr	r2, [pc, #100]	@ (8009e08 <xPortStartScheduler+0x138>)
 8009da2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dac:	4b17      	ldr	r3, [pc, #92]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a16      	ldr	r2, [pc, #88]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009db2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009db6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009db8:	4b14      	ldr	r3, [pc, #80]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a13      	ldr	r2, [pc, #76]	@ (8009e0c <xPortStartScheduler+0x13c>)
 8009dbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009dc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dc4:	f000 f8da 	bl	8009f7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dc8:	4b11      	ldr	r3, [pc, #68]	@ (8009e10 <xPortStartScheduler+0x140>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dce:	f000 f8f9 	bl	8009fc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dd2:	4b10      	ldr	r3, [pc, #64]	@ (8009e14 <xPortStartScheduler+0x144>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8009e14 <xPortStartScheduler+0x144>)
 8009dd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ddc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dde:	f7ff ff63 	bl	8009ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009de2:	f7fe ff01 	bl	8008be8 <vTaskSwitchContext>
	prvTaskExitError();
 8009de6:	f7ff ff1d 	bl	8009c24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	e000ed00 	.word	0xe000ed00
 8009df8:	410fc271 	.word	0x410fc271
 8009dfc:	410fc270 	.word	0x410fc270
 8009e00:	e000e400 	.word	0xe000e400
 8009e04:	200014e8 	.word	0x200014e8
 8009e08:	200014ec 	.word	0x200014ec
 8009e0c:	e000ed20 	.word	0xe000ed20
 8009e10:	20000068 	.word	0x20000068
 8009e14:	e000ef34 	.word	0xe000ef34

08009e18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	607b      	str	r3, [r7, #4]
}
 8009e30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <vPortEnterCritical+0x5c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	4a0e      	ldr	r2, [pc, #56]	@ (8009e74 <vPortEnterCritical+0x5c>)
 8009e3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e74 <vPortEnterCritical+0x5c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d110      	bne.n	8009e66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e44:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <vPortEnterCritical+0x60>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00b      	beq.n	8009e66 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	603b      	str	r3, [r7, #0]
}
 8009e60:	bf00      	nop
 8009e62:	bf00      	nop
 8009e64:	e7fd      	b.n	8009e62 <vPortEnterCritical+0x4a>
	}
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20000068 	.word	0x20000068
 8009e78:	e000ed04 	.word	0xe000ed04

08009e7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e82:	4b12      	ldr	r3, [pc, #72]	@ (8009ecc <vPortExitCritical+0x50>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10b      	bne.n	8009ea2 <vPortExitCritical+0x26>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	607b      	str	r3, [r7, #4]
}
 8009e9c:	bf00      	nop
 8009e9e:	bf00      	nop
 8009ea0:	e7fd      	b.n	8009e9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8009ecc <vPortExitCritical+0x50>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	4a08      	ldr	r2, [pc, #32]	@ (8009ecc <vPortExitCritical+0x50>)
 8009eaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009eac:	4b07      	ldr	r3, [pc, #28]	@ (8009ecc <vPortExitCritical+0x50>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d105      	bne.n	8009ec0 <vPortExitCritical+0x44>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	f383 8811 	msr	BASEPRI, r3
}
 8009ebe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	20000068 	.word	0x20000068

08009ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ed0:	f3ef 8009 	mrs	r0, PSP
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4b15      	ldr	r3, [pc, #84]	@ (8009f30 <pxCurrentTCBConst>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	f01e 0f10 	tst.w	lr, #16
 8009ee0:	bf08      	it	eq
 8009ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	6010      	str	r0, [r2, #0]
 8009eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ef0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ef4:	f380 8811 	msr	BASEPRI, r0
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f7fe fe72 	bl	8008be8 <vTaskSwitchContext>
 8009f04:	f04f 0000 	mov.w	r0, #0
 8009f08:	f380 8811 	msr	BASEPRI, r0
 8009f0c:	bc09      	pop	{r0, r3}
 8009f0e:	6819      	ldr	r1, [r3, #0]
 8009f10:	6808      	ldr	r0, [r1, #0]
 8009f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f16:	f01e 0f10 	tst.w	lr, #16
 8009f1a:	bf08      	it	eq
 8009f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f20:	f380 8809 	msr	PSP, r0
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	f3af 8000 	nop.w

08009f30 <pxCurrentTCBConst>:
 8009f30:	20000ebc 	.word	0x20000ebc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	607b      	str	r3, [r7, #4]
}
 8009f50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f52:	f7fe fd8f 	bl	8008a74 <xTaskIncrementTick>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f5c:	4b06      	ldr	r3, [pc, #24]	@ (8009f78 <xPortSysTickHandler+0x40>)
 8009f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f62:	601a      	str	r2, [r3, #0]
 8009f64:	2300      	movs	r3, #0
 8009f66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f383 8811 	msr	BASEPRI, r3
}
 8009f6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	e000ed04 	.word	0xe000ed04

08009f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f80:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb0 <vPortSetupTimerInterrupt+0x34>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f86:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb4 <vPortSetupTimerInterrupt+0x38>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb8 <vPortSetupTimerInterrupt+0x3c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a0a      	ldr	r2, [pc, #40]	@ (8009fbc <vPortSetupTimerInterrupt+0x40>)
 8009f92:	fba2 2303 	umull	r2, r3, r2, r3
 8009f96:	099b      	lsrs	r3, r3, #6
 8009f98:	4a09      	ldr	r2, [pc, #36]	@ (8009fc0 <vPortSetupTimerInterrupt+0x44>)
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f9e:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <vPortSetupTimerInterrupt+0x34>)
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	601a      	str	r2, [r3, #0]
}
 8009fa4:	bf00      	nop
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	e000e010 	.word	0xe000e010
 8009fb4:	e000e018 	.word	0xe000e018
 8009fb8:	2000005c 	.word	0x2000005c
 8009fbc:	10624dd3 	.word	0x10624dd3
 8009fc0:	e000e014 	.word	0xe000e014

08009fc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fd4 <vPortEnableVFP+0x10>
 8009fc8:	6801      	ldr	r1, [r0, #0]
 8009fca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fce:	6001      	str	r1, [r0, #0]
 8009fd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fd2:	bf00      	nop
 8009fd4:	e000ed88 	.word	0xe000ed88

08009fd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fde:	f3ef 8305 	mrs	r3, IPSR
 8009fe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2b0f      	cmp	r3, #15
 8009fe8:	d915      	bls.n	800a016 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fea:	4a18      	ldr	r2, [pc, #96]	@ (800a04c <vPortValidateInterruptPriority+0x74>)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ff4:	4b16      	ldr	r3, [pc, #88]	@ (800a050 <vPortValidateInterruptPriority+0x78>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	7afa      	ldrb	r2, [r7, #11]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d20b      	bcs.n	800a016 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
 800a012:	bf00      	nop
 800a014:	e7fd      	b.n	800a012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a016:	4b0f      	ldr	r3, [pc, #60]	@ (800a054 <vPortValidateInterruptPriority+0x7c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a01e:	4b0e      	ldr	r3, [pc, #56]	@ (800a058 <vPortValidateInterruptPriority+0x80>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d90b      	bls.n	800a03e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	603b      	str	r3, [r7, #0]
}
 800a038:	bf00      	nop
 800a03a:	bf00      	nop
 800a03c:	e7fd      	b.n	800a03a <vPortValidateInterruptPriority+0x62>
	}
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	e000e3f0 	.word	0xe000e3f0
 800a050:	200014e8 	.word	0x200014e8
 800a054:	e000ed0c 	.word	0xe000ed0c
 800a058:	200014ec 	.word	0x200014ec

0800a05c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b08a      	sub	sp, #40	@ 0x28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a064:	2300      	movs	r3, #0
 800a066:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a068:	f7fe fc48 	bl	80088fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a06c:	4b5f      	ldr	r3, [pc, #380]	@ (800a1ec <pvPortMalloc+0x190>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a074:	f000 f92a 	bl	800a2cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a078:	4b5d      	ldr	r3, [pc, #372]	@ (800a1f0 <pvPortMalloc+0x194>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4013      	ands	r3, r2
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 8095 	bne.w	800a1b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01e      	beq.n	800a0ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a08c:	2208      	movs	r2, #8
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4413      	add	r3, r2
 800a092:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d015      	beq.n	800a0ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f023 0307 	bic.w	r3, r3, #7
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f003 0307 	and.w	r3, r3, #7
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00b      	beq.n	800a0ca <pvPortMalloc+0x6e>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	617b      	str	r3, [r7, #20]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d06f      	beq.n	800a1b0 <pvPortMalloc+0x154>
 800a0d0:	4b48      	ldr	r3, [pc, #288]	@ (800a1f4 <pvPortMalloc+0x198>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d86a      	bhi.n	800a1b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0da:	4b47      	ldr	r3, [pc, #284]	@ (800a1f8 <pvPortMalloc+0x19c>)
 800a0dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0de:	4b46      	ldr	r3, [pc, #280]	@ (800a1f8 <pvPortMalloc+0x19c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0e4:	e004      	b.n	800a0f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d903      	bls.n	800a102 <pvPortMalloc+0xa6>
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1f1      	bne.n	800a0e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a102:	4b3a      	ldr	r3, [pc, #232]	@ (800a1ec <pvPortMalloc+0x190>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a108:	429a      	cmp	r2, r3
 800a10a:	d051      	beq.n	800a1b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2208      	movs	r2, #8
 800a112:	4413      	add	r3, r2
 800a114:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	1ad2      	subs	r2, r2, r3
 800a126:	2308      	movs	r3, #8
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d920      	bls.n	800a170 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a12e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4413      	add	r3, r2
 800a134:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	f003 0307 	and.w	r3, r3, #7
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00b      	beq.n	800a158 <pvPortMalloc+0xfc>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	613b      	str	r3, [r7, #16]
}
 800a152:	bf00      	nop
 800a154:	bf00      	nop
 800a156:	e7fd      	b.n	800a154 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a16a:	69b8      	ldr	r0, [r7, #24]
 800a16c:	f000 f910 	bl	800a390 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a170:	4b20      	ldr	r3, [pc, #128]	@ (800a1f4 <pvPortMalloc+0x198>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	4a1e      	ldr	r2, [pc, #120]	@ (800a1f4 <pvPortMalloc+0x198>)
 800a17c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a17e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f4 <pvPortMalloc+0x198>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b1e      	ldr	r3, [pc, #120]	@ (800a1fc <pvPortMalloc+0x1a0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d203      	bcs.n	800a192 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a18a:	4b1a      	ldr	r3, [pc, #104]	@ (800a1f4 <pvPortMalloc+0x198>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1fc <pvPortMalloc+0x1a0>)
 800a190:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	685a      	ldr	r2, [r3, #4]
 800a196:	4b16      	ldr	r3, [pc, #88]	@ (800a1f0 <pvPortMalloc+0x194>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	431a      	orrs	r2, r3
 800a19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1a6:	4b16      	ldr	r3, [pc, #88]	@ (800a200 <pvPortMalloc+0x1a4>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	4a14      	ldr	r2, [pc, #80]	@ (800a200 <pvPortMalloc+0x1a4>)
 800a1ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1b0:	f7fe fbb2 	bl	8008918 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a1ba:	f7f7 f8f5 	bl	80013a8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00b      	beq.n	800a1e0 <pvPortMalloc+0x184>
	__asm volatile
 800a1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1cc:	f383 8811 	msr	BASEPRI, r3
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	60fb      	str	r3, [r7, #12]
}
 800a1da:	bf00      	nop
 800a1dc:	bf00      	nop
 800a1de:	e7fd      	b.n	800a1dc <pvPortMalloc+0x180>
	return pvReturn;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3728      	adds	r7, #40	@ 0x28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	200064f8 	.word	0x200064f8
 800a1f0:	2000650c 	.word	0x2000650c
 800a1f4:	200064fc 	.word	0x200064fc
 800a1f8:	200064f0 	.word	0x200064f0
 800a1fc:	20006500 	.word	0x20006500
 800a200:	20006504 	.word	0x20006504

0800a204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d04f      	beq.n	800a2b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a216:	2308      	movs	r3, #8
 800a218:	425b      	negs	r3, r3
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4413      	add	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	4b25      	ldr	r3, [pc, #148]	@ (800a2c0 <vPortFree+0xbc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10b      	bne.n	800a24a <vPortFree+0x46>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	60fb      	str	r3, [r7, #12]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00b      	beq.n	800a26a <vPortFree+0x66>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	60bb      	str	r3, [r7, #8]
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	e7fd      	b.n	800a266 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	4b14      	ldr	r3, [pc, #80]	@ (800a2c0 <vPortFree+0xbc>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4013      	ands	r3, r2
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01e      	beq.n	800a2b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d11a      	bne.n	800a2b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c0 <vPortFree+0xbc>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	43db      	mvns	r3, r3
 800a28a:	401a      	ands	r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a290:	f7fe fb34 	bl	80088fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c4 <vPortFree+0xc0>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4413      	add	r3, r2
 800a29e:	4a09      	ldr	r2, [pc, #36]	@ (800a2c4 <vPortFree+0xc0>)
 800a2a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2a2:	6938      	ldr	r0, [r7, #16]
 800a2a4:	f000 f874 	bl	800a390 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2a8:	4b07      	ldr	r3, [pc, #28]	@ (800a2c8 <vPortFree+0xc4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	4a06      	ldr	r2, [pc, #24]	@ (800a2c8 <vPortFree+0xc4>)
 800a2b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2b2:	f7fe fb31 	bl	8008918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000650c 	.word	0x2000650c
 800a2c4:	200064fc 	.word	0x200064fc
 800a2c8:	20006508 	.word	0x20006508

0800a2cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2d2:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800a2d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2d8:	4b27      	ldr	r3, [pc, #156]	@ (800a378 <prvHeapInit+0xac>)
 800a2da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f003 0307 	and.w	r3, r3, #7
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00c      	beq.n	800a300 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3307      	adds	r3, #7
 800a2ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 0307 	bic.w	r3, r3, #7
 800a2f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	4a1f      	ldr	r2, [pc, #124]	@ (800a378 <prvHeapInit+0xac>)
 800a2fc:	4413      	add	r3, r2
 800a2fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a304:	4a1d      	ldr	r2, [pc, #116]	@ (800a37c <prvHeapInit+0xb0>)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a30a:	4b1c      	ldr	r3, [pc, #112]	@ (800a37c <prvHeapInit+0xb0>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	4413      	add	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a318:	2208      	movs	r2, #8
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	1a9b      	subs	r3, r3, r2
 800a31e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f023 0307 	bic.w	r3, r3, #7
 800a326:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4a15      	ldr	r2, [pc, #84]	@ (800a380 <prvHeapInit+0xb4>)
 800a32c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a32e:	4b14      	ldr	r3, [pc, #80]	@ (800a380 <prvHeapInit+0xb4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2200      	movs	r2, #0
 800a334:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a336:	4b12      	ldr	r3, [pc, #72]	@ (800a380 <prvHeapInit+0xb4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	1ad2      	subs	r2, r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a34c:	4b0c      	ldr	r3, [pc, #48]	@ (800a380 <prvHeapInit+0xb4>)
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	4a0a      	ldr	r2, [pc, #40]	@ (800a384 <prvHeapInit+0xb8>)
 800a35a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	4a09      	ldr	r2, [pc, #36]	@ (800a388 <prvHeapInit+0xbc>)
 800a362:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a364:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <prvHeapInit+0xc0>)
 800a366:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a36a:	601a      	str	r2, [r3, #0]
}
 800a36c:	bf00      	nop
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	200014f0 	.word	0x200014f0
 800a37c:	200064f0 	.word	0x200064f0
 800a380:	200064f8 	.word	0x200064f8
 800a384:	20006500 	.word	0x20006500
 800a388:	200064fc 	.word	0x200064fc
 800a38c:	2000650c 	.word	0x2000650c

0800a390 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a398:	4b28      	ldr	r3, [pc, #160]	@ (800a43c <prvInsertBlockIntoFreeList+0xac>)
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	e002      	b.n	800a3a4 <prvInsertBlockIntoFreeList+0x14>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d8f7      	bhi.n	800a39e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d108      	bne.n	800a3d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	441a      	add	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	441a      	add	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d118      	bne.n	800a418 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	4b15      	ldr	r3, [pc, #84]	@ (800a440 <prvInsertBlockIntoFreeList+0xb0>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d00d      	beq.n	800a40e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	441a      	add	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	e008      	b.n	800a420 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a40e:	4b0c      	ldr	r3, [pc, #48]	@ (800a440 <prvInsertBlockIntoFreeList+0xb0>)
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	e003      	b.n	800a420 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	429a      	cmp	r2, r3
 800a426:	d002      	beq.n	800a42e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a42e:	bf00      	nop
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	200064f0 	.word	0x200064f0
 800a440:	200064f8 	.word	0x200064f8

0800a444 <copy_block>:
#else
#define block_copy_nn(d, s, l) copy_block_nn(d, s, l)
#define block_copy(d, s) copy_block(d, s)
#endif

static void copy_block(void *d, const void *s) {
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
#if defined(HAVE_UINT_32T)
	((uint32_t*) d)[0] = ((uint32_t*) s)[0];
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[1] = ((uint32_t*) s)[1];
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3304      	adds	r3, #4
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	6852      	ldr	r2, [r2, #4]
 800a45e:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[2] = ((uint32_t*) s)[2];
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3308      	adds	r3, #8
 800a464:	683a      	ldr	r2, [r7, #0]
 800a466:	6892      	ldr	r2, [r2, #8]
 800a468:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[3] = ((uint32_t*) s)[3];
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	330c      	adds	r3, #12
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	68d2      	ldr	r2, [r2, #12]
 800a472:	601a      	str	r2, [r3, #0]
	((uint8_t *)d)[12] = ((uint8_t *)s)[12];
	((uint8_t *)d)[13] = ((uint8_t *)s)[13];
	((uint8_t *)d)[14] = ((uint8_t *)s)[14];
	((uint8_t *)d)[15] = ((uint8_t *)s)[15];
#endif
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <copy_block_nn>:

static void copy_block_nn(uint8_t *d, const uint8_t *s, uint8_t nn) {
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	4613      	mov	r3, r2
 800a48c:	71fb      	strb	r3, [r7, #7]
	while (nn--)
 800a48e:	e007      	b.n	800a4a0 <copy_block_nn+0x20>
		//*((uint8_t*)d)++ = *((uint8_t*)s)++;
		*d++ = *s++;
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	1c53      	adds	r3, r2, #1
 800a494:	60bb      	str	r3, [r7, #8]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	1c59      	adds	r1, r3, #1
 800a49a:	60f9      	str	r1, [r7, #12]
 800a49c:	7812      	ldrb	r2, [r2, #0]
 800a49e:	701a      	strb	r2, [r3, #0]
	while (nn--)
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	1e5a      	subs	r2, r3, #1
 800a4a4:	71fa      	strb	r2, [r7, #7]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1f2      	bne.n	800a490 <copy_block_nn+0x10>
}
 800a4aa:	bf00      	nop
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <xor_block>:

static void xor_block(void *d, const void *s) {
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
#if defined(HAVE_UINT_32T)
	((uint32_t*) d)[0] ^= ((uint32_t*) s)[0];
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	405a      	eors	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[1] ^= ((uint32_t*) s)[1];
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	3304      	adds	r3, #4
 800a4d4:	6819      	ldr	r1, [r3, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	404a      	eors	r2, r1
 800a4e2:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[2] ^= ((uint32_t*) s)[2];
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3308      	adds	r3, #8
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	3308      	adds	r3, #8
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	404a      	eors	r2, r1
 800a4f6:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[3] ^= ((uint32_t*) s)[3];
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	330c      	adds	r3, #12
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	330c      	adds	r3, #12
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	330c      	adds	r3, #12
 800a508:	404a      	eors	r2, r1
 800a50a:	601a      	str	r2, [r3, #0]
	((uint8_t *)d)[12] ^= ((uint8_t *)s)[12];
	((uint8_t *)d)[13] ^= ((uint8_t *)s)[13];
	((uint8_t *)d)[14] ^= ((uint8_t *)s)[14];
	((uint8_t *)d)[15] ^= ((uint8_t *)s)[15];
#endif
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <copy_and_key>:

static void copy_and_key(void *d, const void *s, const void *k) {
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
#if defined(HAVE_UINT_32T)
	((uint32_t*) d)[0] = ((uint32_t*) s)[0] ^ ((uint32_t*) k)[0];
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	405a      	eors	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[1] = ((uint32_t*) s)[1] ^ ((uint32_t*) k)[1];
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3304      	adds	r3, #4
 800a536:	6819      	ldr	r1, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3304      	adds	r3, #4
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3304      	adds	r3, #4
 800a542:	404a      	eors	r2, r1
 800a544:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[2] = ((uint32_t*) s)[2] ^ ((uint32_t*) k)[2];
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3308      	adds	r3, #8
 800a54a:	6819      	ldr	r1, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3308      	adds	r3, #8
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3308      	adds	r3, #8
 800a556:	404a      	eors	r2, r1
 800a558:	601a      	str	r2, [r3, #0]
	((uint32_t*) d)[3] = ((uint32_t*) s)[3] ^ ((uint32_t*) k)[3];
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	330c      	adds	r3, #12
 800a55e:	6819      	ldr	r1, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	330c      	adds	r3, #12
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	330c      	adds	r3, #12
 800a56a:	404a      	eors	r2, r1
 800a56c:	601a      	str	r2, [r3, #0]
	((uint8_t *)d)[15] = ((uint8_t *)s)[15] ^ ((uint8_t *)k)[15];
#else
	block_copy(d, s);
	xor_block(d, k);
#endif
}
 800a56e:	bf00      	nop
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <add_round_key>:

static void add_round_key(uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK]) {
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b082      	sub	sp, #8
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
	xor_block(d, k);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff ff96 	bl	800a4b8 <xor_block>
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <shift_sub_rows>:

static void shift_sub_rows(uint8_t st[N_BLOCK]) {
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	uint8_t tt;

	st[0] = s_box(st[0]);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4b48      	ldr	r3, [pc, #288]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a5a4:	5c9a      	ldrb	r2, [r3, r2]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	701a      	strb	r2, [r3, #0]
	st[4] = s_box(st[4]);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3304      	adds	r3, #4
 800a5b6:	4a43      	ldr	r2, [pc, #268]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a5b8:	5c52      	ldrb	r2, [r2, r1]
 800a5ba:	701a      	strb	r2, [r3, #0]
	st[8] = s_box(st[8]);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	4a3e      	ldr	r2, [pc, #248]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a5ca:	5c52      	ldrb	r2, [r2, r1]
 800a5cc:	701a      	strb	r2, [r3, #0]
	st[12] = s_box(st[12]);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	330c      	adds	r3, #12
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	330c      	adds	r3, #12
 800a5da:	4a3a      	ldr	r2, [pc, #232]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a5dc:	5c52      	ldrb	r2, [r2, r1]
 800a5de:	701a      	strb	r2, [r3, #0]

	tt = st[1];
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	73fb      	strb	r3, [r7, #15]
	st[1] = s_box(st[5]);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3305      	adds	r3, #5
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	4a34      	ldr	r2, [pc, #208]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a5f4:	5c52      	ldrb	r2, [r2, r1]
 800a5f6:	701a      	strb	r2, [r3, #0]
	st[5] = s_box(st[9]);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	3309      	adds	r3, #9
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	4619      	mov	r1, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3305      	adds	r3, #5
 800a604:	4a2f      	ldr	r2, [pc, #188]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a606:	5c52      	ldrb	r2, [r2, r1]
 800a608:	701a      	strb	r2, [r3, #0]
	st[9] = s_box(st[13]);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	330d      	adds	r3, #13
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	4619      	mov	r1, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3309      	adds	r3, #9
 800a616:	4a2b      	ldr	r2, [pc, #172]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a618:	5c52      	ldrb	r2, [r2, r1]
 800a61a:	701a      	strb	r2, [r3, #0]
	st[13] = s_box(tt);
 800a61c:	7bfa      	ldrb	r2, [r7, #15]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	330d      	adds	r3, #13
 800a622:	4928      	ldr	r1, [pc, #160]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a624:	5c8a      	ldrb	r2, [r1, r2]
 800a626:	701a      	strb	r2, [r3, #0]

	tt = st[2];
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	789b      	ldrb	r3, [r3, #2]
 800a62c:	73fb      	strb	r3, [r7, #15]
	st[2] = s_box(st[10]);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	330a      	adds	r3, #10
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	4619      	mov	r1, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3302      	adds	r3, #2
 800a63a:	4a22      	ldr	r2, [pc, #136]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a63c:	5c52      	ldrb	r2, [r2, r1]
 800a63e:	701a      	strb	r2, [r3, #0]
	st[10] = s_box(tt);
 800a640:	7bfa      	ldrb	r2, [r7, #15]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	330a      	adds	r3, #10
 800a646:	491f      	ldr	r1, [pc, #124]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a648:	5c8a      	ldrb	r2, [r1, r2]
 800a64a:	701a      	strb	r2, [r3, #0]
	tt = st[6];
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	799b      	ldrb	r3, [r3, #6]
 800a650:	73fb      	strb	r3, [r7, #15]
	st[6] = s_box(st[14]);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	330e      	adds	r3, #14
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	4619      	mov	r1, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3306      	adds	r3, #6
 800a65e:	4a19      	ldr	r2, [pc, #100]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a660:	5c52      	ldrb	r2, [r2, r1]
 800a662:	701a      	strb	r2, [r3, #0]
	st[14] = s_box(tt);
 800a664:	7bfa      	ldrb	r2, [r7, #15]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	330e      	adds	r3, #14
 800a66a:	4916      	ldr	r1, [pc, #88]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a66c:	5c8a      	ldrb	r2, [r1, r2]
 800a66e:	701a      	strb	r2, [r3, #0]

	tt = st[15];
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	7bdb      	ldrb	r3, [r3, #15]
 800a674:	73fb      	strb	r3, [r7, #15]
	st[15] = s_box(st[11]);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	330b      	adds	r3, #11
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	4619      	mov	r1, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	330f      	adds	r3, #15
 800a682:	4a10      	ldr	r2, [pc, #64]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a684:	5c52      	ldrb	r2, [r2, r1]
 800a686:	701a      	strb	r2, [r3, #0]
	st[11] = s_box(st[7]);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3307      	adds	r3, #7
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	4619      	mov	r1, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	330b      	adds	r3, #11
 800a694:	4a0b      	ldr	r2, [pc, #44]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a696:	5c52      	ldrb	r2, [r2, r1]
 800a698:	701a      	strb	r2, [r3, #0]
	st[7] = s_box(st[3]);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	3303      	adds	r3, #3
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3307      	adds	r3, #7
 800a6a6:	4a07      	ldr	r2, [pc, #28]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a6a8:	5c52      	ldrb	r2, [r2, r1]
 800a6aa:	701a      	strb	r2, [r3, #0]
	st[3] = s_box(tt);
 800a6ac:	7bfa      	ldrb	r2, [r7, #15]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3303      	adds	r3, #3
 800a6b2:	4904      	ldr	r1, [pc, #16]	@ (800a6c4 <shift_sub_rows+0x130>)
 800a6b4:	5c8a      	ldrb	r2, [r1, r2]
 800a6b6:	701a      	strb	r2, [r3, #0]
}
 800a6b8:	bf00      	nop
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr
 800a6c4:	08024e58 	.word	0x08024e58

0800a6c8 <mix_sub_columns>:
}

#endif

#if defined(VERSION_1)
static void mix_sub_columns(uint8_t dt[N_BLOCK]) {
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	uint8_t st[N_BLOCK];
	block_copy(st, dt);
 800a6d0:	f107 0308 	add.w	r3, r7, #8
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7ff feb4 	bl	800a444 <copy_block>
#else
static void mix_sub_columns(uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK])
{
#endif
	dt[0] = gfm2_sb(st[0])^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a6dc:	7a3b      	ldrb	r3, [r7, #8]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	4b9a      	ldr	r3, [pc, #616]	@ (800a94c <mix_sub_columns+0x284>)
 800a6e2:	5c9a      	ldrb	r2, [r3, r2]
 800a6e4:	7b7b      	ldrb	r3, [r7, #13]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4b99      	ldr	r3, [pc, #612]	@ (800a950 <mix_sub_columns+0x288>)
 800a6ea:	5c5b      	ldrb	r3, [r3, r1]
 800a6ec:	4053      	eors	r3, r2
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	7cbb      	ldrb	r3, [r7, #18]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4b97      	ldr	r3, [pc, #604]	@ (800a954 <mix_sub_columns+0x28c>)
 800a6f6:	5c5b      	ldrb	r3, [r3, r1]
 800a6f8:	4053      	eors	r3, r2
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4b94      	ldr	r3, [pc, #592]	@ (800a954 <mix_sub_columns+0x28c>)
 800a702:	5c5b      	ldrb	r3, [r3, r1]
 800a704:	4053      	eors	r3, r2
 800a706:	b2da      	uxtb	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	701a      	strb	r2, [r3, #0]
	dt[1] = s_box(st[0])^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a70c:	7a3b      	ldrb	r3, [r7, #8]
 800a70e:	461a      	mov	r2, r3
 800a710:	4b90      	ldr	r3, [pc, #576]	@ (800a954 <mix_sub_columns+0x28c>)
 800a712:	5c9a      	ldrb	r2, [r3, r2]
 800a714:	7b7b      	ldrb	r3, [r7, #13]
 800a716:	4619      	mov	r1, r3
 800a718:	4b8c      	ldr	r3, [pc, #560]	@ (800a94c <mix_sub_columns+0x284>)
 800a71a:	5c5b      	ldrb	r3, [r3, r1]
 800a71c:	4053      	eors	r3, r2
 800a71e:	b2da      	uxtb	r2, r3
 800a720:	7cbb      	ldrb	r3, [r7, #18]
 800a722:	4619      	mov	r1, r3
 800a724:	4b8a      	ldr	r3, [pc, #552]	@ (800a950 <mix_sub_columns+0x288>)
 800a726:	5c5b      	ldrb	r3, [r3, r1]
 800a728:	4053      	eors	r3, r2
 800a72a:	b2d9      	uxtb	r1, r3
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
 800a72e:	461a      	mov	r2, r3
 800a730:	4b88      	ldr	r3, [pc, #544]	@ (800a954 <mix_sub_columns+0x28c>)
 800a732:	5c9a      	ldrb	r2, [r3, r2]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3301      	adds	r3, #1
 800a738:	404a      	eors	r2, r1
 800a73a:	b2d2      	uxtb	r2, r2
 800a73c:	701a      	strb	r2, [r3, #0]
	dt[2] = s_box(st[0])^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a73e:	7a3b      	ldrb	r3, [r7, #8]
 800a740:	461a      	mov	r2, r3
 800a742:	4b84      	ldr	r3, [pc, #528]	@ (800a954 <mix_sub_columns+0x28c>)
 800a744:	5c9a      	ldrb	r2, [r3, r2]
 800a746:	7b7b      	ldrb	r3, [r7, #13]
 800a748:	4619      	mov	r1, r3
 800a74a:	4b82      	ldr	r3, [pc, #520]	@ (800a954 <mix_sub_columns+0x28c>)
 800a74c:	5c5b      	ldrb	r3, [r3, r1]
 800a74e:	4053      	eors	r3, r2
 800a750:	b2da      	uxtb	r2, r3
 800a752:	7cbb      	ldrb	r3, [r7, #18]
 800a754:	4619      	mov	r1, r3
 800a756:	4b7d      	ldr	r3, [pc, #500]	@ (800a94c <mix_sub_columns+0x284>)
 800a758:	5c5b      	ldrb	r3, [r3, r1]
 800a75a:	4053      	eors	r3, r2
 800a75c:	b2d9      	uxtb	r1, r3
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	461a      	mov	r2, r3
 800a762:	4b7b      	ldr	r3, [pc, #492]	@ (800a950 <mix_sub_columns+0x288>)
 800a764:	5c9a      	ldrb	r2, [r3, r2]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3302      	adds	r3, #2
 800a76a:	404a      	eors	r2, r1
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	701a      	strb	r2, [r3, #0]
	dt[3] = gfm3_sb(st[0])^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800a770:	7a3b      	ldrb	r3, [r7, #8]
 800a772:	461a      	mov	r2, r3
 800a774:	4b76      	ldr	r3, [pc, #472]	@ (800a950 <mix_sub_columns+0x288>)
 800a776:	5c9a      	ldrb	r2, [r3, r2]
 800a778:	7b7b      	ldrb	r3, [r7, #13]
 800a77a:	4619      	mov	r1, r3
 800a77c:	4b75      	ldr	r3, [pc, #468]	@ (800a954 <mix_sub_columns+0x28c>)
 800a77e:	5c5b      	ldrb	r3, [r3, r1]
 800a780:	4053      	eors	r3, r2
 800a782:	b2da      	uxtb	r2, r3
 800a784:	7cbb      	ldrb	r3, [r7, #18]
 800a786:	4619      	mov	r1, r3
 800a788:	4b72      	ldr	r3, [pc, #456]	@ (800a954 <mix_sub_columns+0x28c>)
 800a78a:	5c5b      	ldrb	r3, [r3, r1]
 800a78c:	4053      	eors	r3, r2
 800a78e:	b2d9      	uxtb	r1, r3
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	461a      	mov	r2, r3
 800a794:	4b6d      	ldr	r3, [pc, #436]	@ (800a94c <mix_sub_columns+0x284>)
 800a796:	5c9a      	ldrb	r2, [r3, r2]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3303      	adds	r3, #3
 800a79c:	404a      	eors	r2, r1
 800a79e:	b2d2      	uxtb	r2, r2
 800a7a0:	701a      	strb	r2, [r3, #0]

	dt[4] = gfm2_sb(st[4])^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800a7a2:	7b3b      	ldrb	r3, [r7, #12]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4b69      	ldr	r3, [pc, #420]	@ (800a94c <mix_sub_columns+0x284>)
 800a7a8:	5c9a      	ldrb	r2, [r3, r2]
 800a7aa:	7c7b      	ldrb	r3, [r7, #17]
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4b68      	ldr	r3, [pc, #416]	@ (800a950 <mix_sub_columns+0x288>)
 800a7b0:	5c5b      	ldrb	r3, [r3, r1]
 800a7b2:	4053      	eors	r3, r2
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	7dbb      	ldrb	r3, [r7, #22]
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4b66      	ldr	r3, [pc, #408]	@ (800a954 <mix_sub_columns+0x28c>)
 800a7bc:	5c5b      	ldrb	r3, [r3, r1]
 800a7be:	4053      	eors	r3, r2
 800a7c0:	b2d9      	uxtb	r1, r3
 800a7c2:	7afb      	ldrb	r3, [r7, #11]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4b63      	ldr	r3, [pc, #396]	@ (800a954 <mix_sub_columns+0x28c>)
 800a7c8:	5c9a      	ldrb	r2, [r3, r2]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	404a      	eors	r2, r1
 800a7d0:	b2d2      	uxtb	r2, r2
 800a7d2:	701a      	strb	r2, [r3, #0]
	dt[5] = s_box(st[4])^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800a7d4:	7b3b      	ldrb	r3, [r7, #12]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4b5e      	ldr	r3, [pc, #376]	@ (800a954 <mix_sub_columns+0x28c>)
 800a7da:	5c9a      	ldrb	r2, [r3, r2]
 800a7dc:	7c7b      	ldrb	r3, [r7, #17]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	4b5a      	ldr	r3, [pc, #360]	@ (800a94c <mix_sub_columns+0x284>)
 800a7e2:	5c5b      	ldrb	r3, [r3, r1]
 800a7e4:	4053      	eors	r3, r2
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	7dbb      	ldrb	r3, [r7, #22]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	4b58      	ldr	r3, [pc, #352]	@ (800a950 <mix_sub_columns+0x288>)
 800a7ee:	5c5b      	ldrb	r3, [r3, r1]
 800a7f0:	4053      	eors	r3, r2
 800a7f2:	b2d9      	uxtb	r1, r3
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	4b56      	ldr	r3, [pc, #344]	@ (800a954 <mix_sub_columns+0x28c>)
 800a7fa:	5c9a      	ldrb	r2, [r3, r2]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3305      	adds	r3, #5
 800a800:	404a      	eors	r2, r1
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	701a      	strb	r2, [r3, #0]
	dt[6] = s_box(st[4])^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800a806:	7b3b      	ldrb	r3, [r7, #12]
 800a808:	461a      	mov	r2, r3
 800a80a:	4b52      	ldr	r3, [pc, #328]	@ (800a954 <mix_sub_columns+0x28c>)
 800a80c:	5c9a      	ldrb	r2, [r3, r2]
 800a80e:	7c7b      	ldrb	r3, [r7, #17]
 800a810:	4619      	mov	r1, r3
 800a812:	4b50      	ldr	r3, [pc, #320]	@ (800a954 <mix_sub_columns+0x28c>)
 800a814:	5c5b      	ldrb	r3, [r3, r1]
 800a816:	4053      	eors	r3, r2
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	7dbb      	ldrb	r3, [r7, #22]
 800a81c:	4619      	mov	r1, r3
 800a81e:	4b4b      	ldr	r3, [pc, #300]	@ (800a94c <mix_sub_columns+0x284>)
 800a820:	5c5b      	ldrb	r3, [r3, r1]
 800a822:	4053      	eors	r3, r2
 800a824:	b2d9      	uxtb	r1, r3
 800a826:	7afb      	ldrb	r3, [r7, #11]
 800a828:	461a      	mov	r2, r3
 800a82a:	4b49      	ldr	r3, [pc, #292]	@ (800a950 <mix_sub_columns+0x288>)
 800a82c:	5c9a      	ldrb	r2, [r3, r2]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	3306      	adds	r3, #6
 800a832:	404a      	eors	r2, r1
 800a834:	b2d2      	uxtb	r2, r2
 800a836:	701a      	strb	r2, [r3, #0]
	dt[7] = gfm3_sb(st[4])^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800a838:	7b3b      	ldrb	r3, [r7, #12]
 800a83a:	461a      	mov	r2, r3
 800a83c:	4b44      	ldr	r3, [pc, #272]	@ (800a950 <mix_sub_columns+0x288>)
 800a83e:	5c9a      	ldrb	r2, [r3, r2]
 800a840:	7c7b      	ldrb	r3, [r7, #17]
 800a842:	4619      	mov	r1, r3
 800a844:	4b43      	ldr	r3, [pc, #268]	@ (800a954 <mix_sub_columns+0x28c>)
 800a846:	5c5b      	ldrb	r3, [r3, r1]
 800a848:	4053      	eors	r3, r2
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	7dbb      	ldrb	r3, [r7, #22]
 800a84e:	4619      	mov	r1, r3
 800a850:	4b40      	ldr	r3, [pc, #256]	@ (800a954 <mix_sub_columns+0x28c>)
 800a852:	5c5b      	ldrb	r3, [r3, r1]
 800a854:	4053      	eors	r3, r2
 800a856:	b2d9      	uxtb	r1, r3
 800a858:	7afb      	ldrb	r3, [r7, #11]
 800a85a:	461a      	mov	r2, r3
 800a85c:	4b3b      	ldr	r3, [pc, #236]	@ (800a94c <mix_sub_columns+0x284>)
 800a85e:	5c9a      	ldrb	r2, [r3, r2]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3307      	adds	r3, #7
 800a864:	404a      	eors	r2, r1
 800a866:	b2d2      	uxtb	r2, r2
 800a868:	701a      	strb	r2, [r3, #0]

	dt[8] = gfm2_sb(st[8])^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800a86a:	7c3b      	ldrb	r3, [r7, #16]
 800a86c:	461a      	mov	r2, r3
 800a86e:	4b37      	ldr	r3, [pc, #220]	@ (800a94c <mix_sub_columns+0x284>)
 800a870:	5c9a      	ldrb	r2, [r3, r2]
 800a872:	7d7b      	ldrb	r3, [r7, #21]
 800a874:	4619      	mov	r1, r3
 800a876:	4b36      	ldr	r3, [pc, #216]	@ (800a950 <mix_sub_columns+0x288>)
 800a878:	5c5b      	ldrb	r3, [r3, r1]
 800a87a:	4053      	eors	r3, r2
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	7abb      	ldrb	r3, [r7, #10]
 800a880:	4619      	mov	r1, r3
 800a882:	4b34      	ldr	r3, [pc, #208]	@ (800a954 <mix_sub_columns+0x28c>)
 800a884:	5c5b      	ldrb	r3, [r3, r1]
 800a886:	4053      	eors	r3, r2
 800a888:	b2d9      	uxtb	r1, r3
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	461a      	mov	r2, r3
 800a88e:	4b31      	ldr	r3, [pc, #196]	@ (800a954 <mix_sub_columns+0x28c>)
 800a890:	5c9a      	ldrb	r2, [r3, r2]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	3308      	adds	r3, #8
 800a896:	404a      	eors	r2, r1
 800a898:	b2d2      	uxtb	r2, r2
 800a89a:	701a      	strb	r2, [r3, #0]
	dt[9] = s_box(st[8])^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800a89c:	7c3b      	ldrb	r3, [r7, #16]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	4b2c      	ldr	r3, [pc, #176]	@ (800a954 <mix_sub_columns+0x28c>)
 800a8a2:	5c9a      	ldrb	r2, [r3, r2]
 800a8a4:	7d7b      	ldrb	r3, [r7, #21]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4b28      	ldr	r3, [pc, #160]	@ (800a94c <mix_sub_columns+0x284>)
 800a8aa:	5c5b      	ldrb	r3, [r3, r1]
 800a8ac:	4053      	eors	r3, r2
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	7abb      	ldrb	r3, [r7, #10]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4b26      	ldr	r3, [pc, #152]	@ (800a950 <mix_sub_columns+0x288>)
 800a8b6:	5c5b      	ldrb	r3, [r3, r1]
 800a8b8:	4053      	eors	r3, r2
 800a8ba:	b2d9      	uxtb	r1, r3
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	4b24      	ldr	r3, [pc, #144]	@ (800a954 <mix_sub_columns+0x28c>)
 800a8c2:	5c9a      	ldrb	r2, [r3, r2]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3309      	adds	r3, #9
 800a8c8:	404a      	eors	r2, r1
 800a8ca:	b2d2      	uxtb	r2, r2
 800a8cc:	701a      	strb	r2, [r3, #0]
	dt[10] = s_box(st[8])^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800a8ce:	7c3b      	ldrb	r3, [r7, #16]
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4b20      	ldr	r3, [pc, #128]	@ (800a954 <mix_sub_columns+0x28c>)
 800a8d4:	5c9a      	ldrb	r2, [r3, r2]
 800a8d6:	7d7b      	ldrb	r3, [r7, #21]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4b1e      	ldr	r3, [pc, #120]	@ (800a954 <mix_sub_columns+0x28c>)
 800a8dc:	5c5b      	ldrb	r3, [r3, r1]
 800a8de:	4053      	eors	r3, r2
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	7abb      	ldrb	r3, [r7, #10]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4b19      	ldr	r3, [pc, #100]	@ (800a94c <mix_sub_columns+0x284>)
 800a8e8:	5c5b      	ldrb	r3, [r3, r1]
 800a8ea:	4053      	eors	r3, r2
 800a8ec:	b2d9      	uxtb	r1, r3
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4b17      	ldr	r3, [pc, #92]	@ (800a950 <mix_sub_columns+0x288>)
 800a8f4:	5c9a      	ldrb	r2, [r3, r2]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	330a      	adds	r3, #10
 800a8fa:	404a      	eors	r2, r1
 800a8fc:	b2d2      	uxtb	r2, r2
 800a8fe:	701a      	strb	r2, [r3, #0]
	dt[11] = gfm3_sb(st[8])^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800a900:	7c3b      	ldrb	r3, [r7, #16]
 800a902:	461a      	mov	r2, r3
 800a904:	4b12      	ldr	r3, [pc, #72]	@ (800a950 <mix_sub_columns+0x288>)
 800a906:	5c9a      	ldrb	r2, [r3, r2]
 800a908:	7d7b      	ldrb	r3, [r7, #21]
 800a90a:	4619      	mov	r1, r3
 800a90c:	4b11      	ldr	r3, [pc, #68]	@ (800a954 <mix_sub_columns+0x28c>)
 800a90e:	5c5b      	ldrb	r3, [r3, r1]
 800a910:	4053      	eors	r3, r2
 800a912:	b2da      	uxtb	r2, r3
 800a914:	7abb      	ldrb	r3, [r7, #10]
 800a916:	4619      	mov	r1, r3
 800a918:	4b0e      	ldr	r3, [pc, #56]	@ (800a954 <mix_sub_columns+0x28c>)
 800a91a:	5c5b      	ldrb	r3, [r3, r1]
 800a91c:	4053      	eors	r3, r2
 800a91e:	b2d9      	uxtb	r1, r3
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	461a      	mov	r2, r3
 800a924:	4b09      	ldr	r3, [pc, #36]	@ (800a94c <mix_sub_columns+0x284>)
 800a926:	5c9a      	ldrb	r2, [r3, r2]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	330b      	adds	r3, #11
 800a92c:	404a      	eors	r2, r1
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]

	dt[12] = gfm2_sb(st[12])^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800a932:	7d3b      	ldrb	r3, [r7, #20]
 800a934:	461a      	mov	r2, r3
 800a936:	4b05      	ldr	r3, [pc, #20]	@ (800a94c <mix_sub_columns+0x284>)
 800a938:	5c9a      	ldrb	r2, [r3, r2]
 800a93a:	7a7b      	ldrb	r3, [r7, #9]
 800a93c:	4619      	mov	r1, r3
 800a93e:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <mix_sub_columns+0x288>)
 800a940:	5c5b      	ldrb	r3, [r3, r1]
 800a942:	4053      	eors	r3, r2
 800a944:	b2da      	uxtb	r2, r3
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	4619      	mov	r1, r3
 800a94a:	e005      	b.n	800a958 <mix_sub_columns+0x290>
 800a94c:	08024f58 	.word	0x08024f58
 800a950:	08025058 	.word	0x08025058
 800a954:	08024e58 	.word	0x08024e58
 800a958:	4b2d      	ldr	r3, [pc, #180]	@ (800aa10 <mix_sub_columns+0x348>)
 800a95a:	5c5b      	ldrb	r3, [r3, r1]
 800a95c:	4053      	eors	r3, r2
 800a95e:	b2d9      	uxtb	r1, r3
 800a960:	7cfb      	ldrb	r3, [r7, #19]
 800a962:	461a      	mov	r2, r3
 800a964:	4b2a      	ldr	r3, [pc, #168]	@ (800aa10 <mix_sub_columns+0x348>)
 800a966:	5c9a      	ldrb	r2, [r3, r2]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	330c      	adds	r3, #12
 800a96c:	404a      	eors	r2, r1
 800a96e:	b2d2      	uxtb	r2, r2
 800a970:	701a      	strb	r2, [r3, #0]
	dt[13] = s_box(st[12])^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800a972:	7d3b      	ldrb	r3, [r7, #20]
 800a974:	461a      	mov	r2, r3
 800a976:	4b26      	ldr	r3, [pc, #152]	@ (800aa10 <mix_sub_columns+0x348>)
 800a978:	5c9a      	ldrb	r2, [r3, r2]
 800a97a:	7a7b      	ldrb	r3, [r7, #9]
 800a97c:	4619      	mov	r1, r3
 800a97e:	4b25      	ldr	r3, [pc, #148]	@ (800aa14 <mix_sub_columns+0x34c>)
 800a980:	5c5b      	ldrb	r3, [r3, r1]
 800a982:	4053      	eors	r3, r2
 800a984:	b2da      	uxtb	r2, r3
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	4619      	mov	r1, r3
 800a98a:	4b23      	ldr	r3, [pc, #140]	@ (800aa18 <mix_sub_columns+0x350>)
 800a98c:	5c5b      	ldrb	r3, [r3, r1]
 800a98e:	4053      	eors	r3, r2
 800a990:	b2d9      	uxtb	r1, r3
 800a992:	7cfb      	ldrb	r3, [r7, #19]
 800a994:	461a      	mov	r2, r3
 800a996:	4b1e      	ldr	r3, [pc, #120]	@ (800aa10 <mix_sub_columns+0x348>)
 800a998:	5c9a      	ldrb	r2, [r3, r2]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	330d      	adds	r3, #13
 800a99e:	404a      	eors	r2, r1
 800a9a0:	b2d2      	uxtb	r2, r2
 800a9a2:	701a      	strb	r2, [r3, #0]
	dt[14] = s_box(st[12])^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800a9a4:	7d3b      	ldrb	r3, [r7, #20]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4b19      	ldr	r3, [pc, #100]	@ (800aa10 <mix_sub_columns+0x348>)
 800a9aa:	5c9a      	ldrb	r2, [r3, r2]
 800a9ac:	7a7b      	ldrb	r3, [r7, #9]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4b17      	ldr	r3, [pc, #92]	@ (800aa10 <mix_sub_columns+0x348>)
 800a9b2:	5c5b      	ldrb	r3, [r3, r1]
 800a9b4:	4053      	eors	r3, r2
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4b15      	ldr	r3, [pc, #84]	@ (800aa14 <mix_sub_columns+0x34c>)
 800a9be:	5c5b      	ldrb	r3, [r3, r1]
 800a9c0:	4053      	eors	r3, r2
 800a9c2:	b2d9      	uxtb	r1, r3
 800a9c4:	7cfb      	ldrb	r3, [r7, #19]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	4b13      	ldr	r3, [pc, #76]	@ (800aa18 <mix_sub_columns+0x350>)
 800a9ca:	5c9a      	ldrb	r2, [r3, r2]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	330e      	adds	r3, #14
 800a9d0:	404a      	eors	r2, r1
 800a9d2:	b2d2      	uxtb	r2, r2
 800a9d4:	701a      	strb	r2, [r3, #0]
	dt[15] = gfm3_sb(st[12])^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800a9d6:	7d3b      	ldrb	r3, [r7, #20]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4b0f      	ldr	r3, [pc, #60]	@ (800aa18 <mix_sub_columns+0x350>)
 800a9dc:	5c9a      	ldrb	r2, [r3, r2]
 800a9de:	7a7b      	ldrb	r3, [r7, #9]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4b0b      	ldr	r3, [pc, #44]	@ (800aa10 <mix_sub_columns+0x348>)
 800a9e4:	5c5b      	ldrb	r3, [r3, r1]
 800a9e6:	4053      	eors	r3, r2
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4b08      	ldr	r3, [pc, #32]	@ (800aa10 <mix_sub_columns+0x348>)
 800a9f0:	5c5b      	ldrb	r3, [r3, r1]
 800a9f2:	4053      	eors	r3, r2
 800a9f4:	b2d9      	uxtb	r1, r3
 800a9f6:	7cfb      	ldrb	r3, [r7, #19]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4b06      	ldr	r3, [pc, #24]	@ (800aa14 <mix_sub_columns+0x34c>)
 800a9fc:	5c9a      	ldrb	r2, [r3, r2]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	330f      	adds	r3, #15
 800aa02:	404a      	eors	r2, r1
 800aa04:	b2d2      	uxtb	r2, r2
 800aa06:	701a      	strb	r2, [r3, #0]
}
 800aa08:	bf00      	nop
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	08024e58 	.word	0x08024e58
 800aa14:	08024f58 	.word	0x08024f58
 800aa18:	08025058 	.word	0x08025058

0800aa1c <lora_aes_set_key>:
#if defined(AES_ENC_PREKEYED) || defined(AES_DEC_PREKEYED)

	/*  Set the cipher key for the pre-keyed version */

return_type lora_aes_set_key(const uint8_t key[], length_type keylen,
		lora_aes_context ctx[1]) {
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	460b      	mov	r3, r1
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	72fb      	strb	r3, [r7, #11]
	uint8_t cc, rc, hi;

	switch (keylen) {
 800aa2a:	7afb      	ldrb	r3, [r7, #11]
 800aa2c:	3b10      	subs	r3, #16
 800aa2e:	2b10      	cmp	r3, #16
 800aa30:	bf8c      	ite	hi
 800aa32:	2201      	movhi	r2, #1
 800aa34:	2200      	movls	r2, #0
 800aa36:	b2d2      	uxtb	r2, r2
 800aa38:	2a00      	cmp	r2, #0
 800aa3a:	d10b      	bne.n	800aa54 <lora_aes_set_key+0x38>
 800aa3c:	4a64      	ldr	r2, [pc, #400]	@ (800abd0 <lora_aes_set_key+0x1b4>)
 800aa3e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	2300      	moveq	r3, #0
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <lora_aes_set_key+0x44>
		case 16:
		case 24:
		case 32:
		break;
		default:
			ctx->rnd = 0;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
			return (uint8_t) -1;
 800aa5c:	23ff      	movs	r3, #255	@ 0xff
 800aa5e:	e0b2      	b.n	800abc6 <lora_aes_set_key+0x1aa>
		break;
 800aa60:	bf00      	nop
	}
	block_copy_nn(ctx->ksch, key, keylen);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	7afa      	ldrb	r2, [r7, #11]
 800aa66:	68f9      	ldr	r1, [r7, #12]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7ff fd09 	bl	800a480 <copy_block_nn>
	hi = (keylen + 28) << 2;
 800aa6e:	7afb      	ldrb	r3, [r7, #11]
 800aa70:	331c      	adds	r3, #28
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	747b      	strb	r3, [r7, #17]
	ctx->rnd = (hi >> 4) - 1;
 800aa78:	7c7b      	ldrb	r3, [r7, #17]
 800aa7a:	091b      	lsrs	r3, r3, #4
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	for (cc = keylen, rc = 1; cc < hi; cc += 4) {
 800aa88:	7afb      	ldrb	r3, [r7, #11]
 800aa8a:	75fb      	strb	r3, [r7, #23]
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	75bb      	strb	r3, [r7, #22]
 800aa90:	e093      	b.n	800abba <lora_aes_set_key+0x19e>
		uint8_t tt, t0, t1, t2, t3;

		t0 = ctx->ksch[cc - 4];
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	3b04      	subs	r3, #4
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	5cd3      	ldrb	r3, [r2, r3]
 800aa9a:	757b      	strb	r3, [r7, #21]
		t1 = ctx->ksch[cc - 3];
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	3b03      	subs	r3, #3
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	5cd3      	ldrb	r3, [r2, r3]
 800aaa4:	753b      	strb	r3, [r7, #20]
		t2 = ctx->ksch[cc - 2];
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	3b02      	subs	r3, #2
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	5cd3      	ldrb	r3, [r2, r3]
 800aaae:	74fb      	strb	r3, [r7, #19]
		t3 = ctx->ksch[cc - 1];
 800aab0:	7dfb      	ldrb	r3, [r7, #23]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	5cd3      	ldrb	r3, [r2, r3]
 800aab8:	74bb      	strb	r3, [r7, #18]
		if (cc % keylen == 0) {
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	7afa      	ldrb	r2, [r7, #11]
 800aabe:	fbb3 f1f2 	udiv	r1, r3, r2
 800aac2:	fb01 f202 	mul.w	r2, r1, r2
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d127      	bne.n	800ab1e <lora_aes_set_key+0x102>
			tt = t0;
 800aace:	7d7b      	ldrb	r3, [r7, #21]
 800aad0:	743b      	strb	r3, [r7, #16]
			t0 = s_box(t1)^ rc;
 800aad2:	7d3b      	ldrb	r3, [r7, #20]
 800aad4:	4a3f      	ldr	r2, [pc, #252]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800aad6:	5cd2      	ldrb	r2, [r2, r3]
 800aad8:	7dbb      	ldrb	r3, [r7, #22]
 800aada:	4053      	eors	r3, r2
 800aadc:	757b      	strb	r3, [r7, #21]
			t1 = s_box(t2);
 800aade:	7cfb      	ldrb	r3, [r7, #19]
 800aae0:	4a3c      	ldr	r2, [pc, #240]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800aae2:	5cd3      	ldrb	r3, [r2, r3]
 800aae4:	753b      	strb	r3, [r7, #20]
			t2 = s_box(t3);
 800aae6:	7cbb      	ldrb	r3, [r7, #18]
 800aae8:	4a3a      	ldr	r2, [pc, #232]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800aaea:	5cd3      	ldrb	r3, [r2, r3]
 800aaec:	74fb      	strb	r3, [r7, #19]
			t3 = s_box(tt);
 800aaee:	7c3b      	ldrb	r3, [r7, #16]
 800aaf0:	4a38      	ldr	r2, [pc, #224]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800aaf2:	5cd3      	ldrb	r3, [r2, r3]
 800aaf4:	74bb      	strb	r3, [r7, #18]
			rc = f2(rc);
 800aaf6:	7dbb      	ldrb	r3, [r7, #22]
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	b25a      	sxtb	r2, r3
 800aafc:	7dbb      	ldrb	r3, [r7, #22]
 800aafe:	09db      	lsrs	r3, r3, #7
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	4619      	mov	r1, r3
 800ab04:	0049      	lsls	r1, r1, #1
 800ab06:	440b      	add	r3, r1
 800ab08:	4619      	mov	r1, r3
 800ab0a:	00c8      	lsls	r0, r1, #3
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	440b      	add	r3, r1
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	b25b      	sxtb	r3, r3
 800ab16:	4053      	eors	r3, r2
 800ab18:	b25b      	sxtb	r3, r3
 800ab1a:	75bb      	strb	r3, [r7, #22]
 800ab1c:	e01c      	b.n	800ab58 <lora_aes_set_key+0x13c>
		}
		else if (keylen > 24 && cc % keylen == 16) {
 800ab1e:	7afb      	ldrb	r3, [r7, #11]
 800ab20:	2b18      	cmp	r3, #24
 800ab22:	d919      	bls.n	800ab58 <lora_aes_set_key+0x13c>
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	7afa      	ldrb	r2, [r7, #11]
 800ab28:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab2c:	fb01 f202 	mul.w	r2, r1, r2
 800ab30:	1a9b      	subs	r3, r3, r2
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d10f      	bne.n	800ab58 <lora_aes_set_key+0x13c>
			t0 = s_box(t0);
 800ab38:	7d7b      	ldrb	r3, [r7, #21]
 800ab3a:	4a26      	ldr	r2, [pc, #152]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800ab3c:	5cd3      	ldrb	r3, [r2, r3]
 800ab3e:	757b      	strb	r3, [r7, #21]
			t1 = s_box(t1);
 800ab40:	7d3b      	ldrb	r3, [r7, #20]
 800ab42:	4a24      	ldr	r2, [pc, #144]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800ab44:	5cd3      	ldrb	r3, [r2, r3]
 800ab46:	753b      	strb	r3, [r7, #20]
			t2 = s_box(t2);
 800ab48:	7cfb      	ldrb	r3, [r7, #19]
 800ab4a:	4a22      	ldr	r2, [pc, #136]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800ab4c:	5cd3      	ldrb	r3, [r2, r3]
 800ab4e:	74fb      	strb	r3, [r7, #19]
			t3 = s_box(t3);
 800ab50:	7cbb      	ldrb	r3, [r7, #18]
 800ab52:	4a20      	ldr	r2, [pc, #128]	@ (800abd4 <lora_aes_set_key+0x1b8>)
 800ab54:	5cd3      	ldrb	r3, [r2, r3]
 800ab56:	74bb      	strb	r3, [r7, #18]
		}
		tt = cc - keylen;
 800ab58:	7dfa      	ldrb	r2, [r7, #23]
 800ab5a:	7afb      	ldrb	r3, [r7, #11]
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	743b      	strb	r3, [r7, #16]
		ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ab60:	7c3b      	ldrb	r3, [r7, #16]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	5cd1      	ldrb	r1, [r2, r3]
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
 800ab68:	7d7a      	ldrb	r2, [r7, #21]
 800ab6a:	404a      	eors	r2, r1
 800ab6c:	b2d1      	uxtb	r1, r2
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	54d1      	strb	r1, [r2, r3]
		ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ab72:	7c3b      	ldrb	r3, [r7, #16]
 800ab74:	3301      	adds	r3, #1
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	5cd1      	ldrb	r1, [r2, r3]
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	7d3a      	ldrb	r2, [r7, #20]
 800ab80:	404a      	eors	r2, r1
 800ab82:	b2d1      	uxtb	r1, r2
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	54d1      	strb	r1, [r2, r3]
		ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ab88:	7c3b      	ldrb	r3, [r7, #16]
 800ab8a:	3302      	adds	r3, #2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	5cd1      	ldrb	r1, [r2, r3]
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
 800ab92:	3302      	adds	r3, #2
 800ab94:	7cfa      	ldrb	r2, [r7, #19]
 800ab96:	404a      	eors	r2, r1
 800ab98:	b2d1      	uxtb	r1, r2
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	54d1      	strb	r1, [r2, r3]
		ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ab9e:	7c3b      	ldrb	r3, [r7, #16]
 800aba0:	3303      	adds	r3, #3
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	5cd1      	ldrb	r1, [r2, r3]
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	3303      	adds	r3, #3
 800abaa:	7cba      	ldrb	r2, [r7, #18]
 800abac:	404a      	eors	r2, r1
 800abae:	b2d1      	uxtb	r1, r2
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	54d1      	strb	r1, [r2, r3]
	for (cc = keylen, rc = 1; cc < hi; cc += 4) {
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
 800abb6:	3304      	adds	r3, #4
 800abb8:	75fb      	strb	r3, [r7, #23]
 800abba:	7dfa      	ldrb	r2, [r7, #23]
 800abbc:	7c7b      	ldrb	r3, [r7, #17]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	f4ff af67 	bcc.w	800aa92 <lora_aes_set_key+0x76>
	}
	return 0;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	00010101 	.word	0x00010101
 800abd4:	08024e58 	.word	0x08024e58

0800abd8 <lora_aes_encrypt>:
#if defined(AES_ENC_PREKEYED)

/*  Encrypt a single block of 16 bytes */

return_type lora_aes_encrypt(const uint8_t in[N_BLOCK], uint8_t out[N_BLOCK],
		const lora_aes_context ctx[1]) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b08a      	sub	sp, #40	@ 0x28
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
	if (ctx->rnd) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d038      	beq.n	800ac60 <lora_aes_encrypt+0x88>
		uint8_t s1[N_BLOCK], r;
		copy_and_key(s1, in, ctx->ksch);
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	f107 0314 	add.w	r3, r7, #20
 800abf4:	68f9      	ldr	r1, [r7, #12]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff fc8e 	bl	800a518 <copy_and_key>

		for (r = 1; r < ctx->rnd; ++r)
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac02:	e014      	b.n	800ac2e <lora_aes_encrypt+0x56>
#if defined(VERSION_1)
				{
			mix_sub_columns(s1);
 800ac04:	f107 0314 	add.w	r3, r7, #20
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff fd5d 	bl	800a6c8 <mix_sub_columns>
			add_round_key(s1, ctx->ksch + r * N_BLOCK);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac14:	0112      	lsls	r2, r2, #4
 800ac16:	441a      	add	r2, r3
 800ac18:	f107 0314 	add.w	r3, r7, #20
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fcab 	bl	800a57a <add_round_key>
		for (r = 1; r < ctx->rnd; ++r)
 800ac24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac28:	3301      	adds	r3, #1
 800ac2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac34:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d3e3      	bcc.n	800ac04 <lora_aes_encrypt+0x2c>
			uint8_t s2[N_BLOCK];
			mix_sub_columns(s2, s1);
			copy_and_key(s1, s2, ctx->ksch + r * N_BLOCK);
		}
#endif
		shift_sub_rows(s1);
 800ac3c:	f107 0314 	add.w	r3, r7, #20
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff fca7 	bl	800a594 <shift_sub_rows>
		copy_and_key(out, s1, ctx->ksch + r * N_BLOCK);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac4c:	0112      	lsls	r2, r2, #4
 800ac4e:	441a      	add	r2, r3
 800ac50:	f107 0314 	add.w	r3, r7, #20
 800ac54:	4619      	mov	r1, r3
 800ac56:	68b8      	ldr	r0, [r7, #8]
 800ac58:	f7ff fc5e 	bl	800a518 <copy_and_key>
	}
	else
		return (uint8_t) -1;
	return 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	e000      	b.n	800ac62 <lora_aes_encrypt+0x8a>
		return (uint8_t) -1;
 800ac60:	23ff      	movs	r3, #255	@ 0xff
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3728      	adds	r7, #40	@ 0x28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <AES_CMAC_Init>:
		}                             \
	} while (0)

#define T_MIN(a, b) ((a) < (b) ? (a) : (b))

void AES_CMAC_Init(AES_CMAC_CTX *ctx) {
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
	memset1(ctx->X, 0, sizeof ctx->X);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	33f1      	adds	r3, #241	@ 0xf1
 800ac76:	2210      	movs	r2, #16
 800ac78:	2100      	movs	r1, #0
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f015 ffce 	bl	8020c1c <memset1>
	ctx->M_n = 0;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
	memset1(ctx->rijndael.ksch, '\0', 240);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	22f0      	movs	r2, #240	@ 0xf0
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f015 ffc4 	bl	8020c1c <memset1>
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <AES_CMAC_SetKey>:

void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH]) {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
	//rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
	lora_aes_set_key(key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	461a      	mov	r2, r3
 800acaa:	2110      	movs	r1, #16
 800acac:	6838      	ldr	r0, [r7, #0]
 800acae:	f7ff feb5 	bl	800aa1c <lora_aes_set_key>
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <AES_CMAC_Update>:

void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len) {
 800acba:	b580      	push	{r7, lr}
 800acbc:	b08c      	sub	sp, #48	@ 0x30
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	607a      	str	r2, [r7, #4]
	uint32_t mlen;
	uint8_t in[16];

	if (ctx->M_n > 0) {
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800accc:	2b00      	cmp	r3, #0
 800acce:	f000 808f 	beq.w	800adf0 <AES_CMAC_Update+0x136>
		mlen = T_MIN(16 - ctx->M_n, len);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800acd8:	f1c3 0310 	rsb	r3, r3, #16
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	4293      	cmp	r3, r2
 800ace0:	bf28      	it	cs
 800ace2:	4613      	movcs	r3, r2
 800ace4:	627b      	str	r3, [r7, #36]	@ 0x24
		memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800acf2:	4413      	add	r3, r2
 800acf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acf6:	b292      	uxth	r2, r2
 800acf8:	68b9      	ldr	r1, [r7, #8]
 800acfa:	4618      	mov	r0, r3
 800acfc:	f015 ff51 	bl	8020ba2 <memcpy1>
		ctx->M_n += mlen;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	441a      	add	r2, r3
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
		if (ctx->M_n < 16 || len == mlen)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ad16:	2b0f      	cmp	r3, #15
 800ad18:	d97b      	bls.n	800ae12 <AES_CMAC_Update+0x158>
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d077      	beq.n	800ae12 <AES_CMAC_Update+0x158>
			return;
		XOR(ctx->M_last, ctx->X);
 800ad22:	2300      	movs	r3, #0
 800ad24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad26:	e015      	b.n	800ad54 <AES_CMAC_Update+0x9a>
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2c:	4413      	add	r3, r2
 800ad2e:	33f1      	adds	r3, #241	@ 0xf1
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad36:	440b      	add	r3, r1
 800ad38:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	4053      	eors	r3, r2
 800ad40:	b2d9      	uxtb	r1, r3
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad46:	4413      	add	r3, r2
 800ad48:	33f1      	adds	r3, #241	@ 0xf1
 800ad4a:	460a      	mov	r2, r1
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad50:	3301      	adds	r3, #1
 800ad52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad56:	2b0f      	cmp	r3, #15
 800ad58:	dde6      	ble.n	800ad28 <AES_CMAC_Update+0x6e>
		//rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
		lora_aes_encrypt(ctx->X, ctx->X, &ctx->rijndael);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f103 00f1 	add.w	r0, r3, #241	@ 0xf1
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	33f1      	adds	r3, #241	@ 0xf1
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4619      	mov	r1, r3
 800ad68:	f7ff ff36 	bl	800abd8 <lora_aes_encrypt>
		data += mlen;
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad70:	4413      	add	r3, r2
 800ad72:	60bb      	str	r3, [r7, #8]
		len -= mlen;
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	607b      	str	r3, [r7, #4]
	}
	while (len > 16) { /* not last block */
 800ad7c:	e038      	b.n	800adf0 <AES_CMAC_Update+0x136>

		XOR(data, ctx->X);
 800ad7e:	2300      	movs	r3, #0
 800ad80:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad82:	e013      	b.n	800adac <AES_CMAC_Update+0xf2>
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	4413      	add	r3, r2
 800ad8a:	33f1      	adds	r3, #241	@ 0xf1
 800ad8c:	781a      	ldrb	r2, [r3, #0]
 800ad8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad90:	68b9      	ldr	r1, [r7, #8]
 800ad92:	440b      	add	r3, r1
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	4053      	eors	r3, r2
 800ad98:	b2d9      	uxtb	r1, r3
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9e:	4413      	add	r3, r2
 800ada0:	33f1      	adds	r3, #241	@ 0xf1
 800ada2:	460a      	mov	r2, r1
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada8:	3301      	adds	r3, #1
 800adaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	2b0f      	cmp	r3, #15
 800adb0:	dde8      	ble.n	800ad84 <AES_CMAC_Update+0xca>
		//rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

		memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800adb8:	f107 0314 	add.w	r3, r7, #20
 800adbc:	2210      	movs	r2, #16
 800adbe:	4618      	mov	r0, r3
 800adc0:	f015 feef 	bl	8020ba2 <memcpy1>
		lora_aes_encrypt(in, in, &ctx->rijndael);
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	f107 0114 	add.w	r1, r7, #20
 800adca:	f107 0314 	add.w	r3, r7, #20
 800adce:	4618      	mov	r0, r3
 800add0:	f7ff ff02 	bl	800abd8 <lora_aes_encrypt>
		memcpy1(&ctx->X[0], in, 16);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	33f1      	adds	r3, #241	@ 0xf1
 800add8:	f107 0114 	add.w	r1, r7, #20
 800addc:	2210      	movs	r2, #16
 800adde:	4618      	mov	r0, r3
 800ade0:	f015 fedf 	bl	8020ba2 <memcpy1>

		data += 16;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	3310      	adds	r3, #16
 800ade8:	60bb      	str	r3, [r7, #8]
		len -= 16;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3b10      	subs	r3, #16
 800adee:	607b      	str	r3, [r7, #4]
	while (len > 16) { /* not last block */
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2b10      	cmp	r3, #16
 800adf4:	d8c3      	bhi.n	800ad7e <AES_CMAC_Update+0xc4>
	}
	/* potential last block, save it */
	memcpy1(ctx->M_last, data, len);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	b292      	uxth	r2, r2
 800ae00:	68b9      	ldr	r1, [r7, #8]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f015 fecd 	bl	8020ba2 <memcpy1>
	ctx->M_n = len;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800ae10:	e000      	b.n	800ae14 <AES_CMAC_Update+0x15a>
			return;
 800ae12:	bf00      	nop
}
 800ae14:	3730      	adds	r7, #48	@ 0x30
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <AES_CMAC_Final>:

void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx) {
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b092      	sub	sp, #72	@ 0x48
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
	uint8_t K[16];
	uint8_t in[16];
	/* generate subkey K1 */
	memset1(K, '\0', 16);
 800ae24:	f107 031c 	add.w	r3, r7, #28
 800ae28:	2210      	movs	r2, #16
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f015 fef5 	bl	8020c1c <memset1>

	//rijndael_encrypt(&ctx->rijndael, K, K);

	lora_aes_encrypt(K, K, &ctx->rijndael);
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	f107 011c 	add.w	r1, r7, #28
 800ae38:	f107 031c 	add.w	r3, r7, #28
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fecb 	bl	800abd8 <lora_aes_encrypt>

	if (K[0] & 0x80) {
 800ae42:	7f3b      	ldrb	r3, [r7, #28]
 800ae44:	b25b      	sxtb	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	da30      	bge.n	800aeac <AES_CMAC_Final+0x92>
		LSHIFT(K, K);
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae4e:	e01b      	b.n	800ae88 <AES_CMAC_Final+0x6e>
 800ae50:	f107 021c 	add.w	r2, r7, #28
 800ae54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae56:	4413      	add	r3, r2
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	b25a      	sxtb	r2, r3
 800ae5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae60:	3301      	adds	r3, #1
 800ae62:	3348      	adds	r3, #72	@ 0x48
 800ae64:	443b      	add	r3, r7
 800ae66:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ae6a:	09db      	lsrs	r3, r3, #7
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	b25b      	sxtb	r3, r3
 800ae70:	4313      	orrs	r3, r2
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	b2d9      	uxtb	r1, r3
 800ae76:	f107 021c 	add.w	r2, r7, #28
 800ae7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae7c:	4413      	add	r3, r2
 800ae7e:	460a      	mov	r2, r1
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae84:	3301      	adds	r3, #1
 800ae86:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae8a:	2b0e      	cmp	r3, #14
 800ae8c:	dde0      	ble.n	800ae50 <AES_CMAC_Final+0x36>
 800ae8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		K[15] ^= 0x87;
 800ae9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae9e:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800aea2:	43db      	mvns	r3, r3
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeaa:	e027      	b.n	800aefc <AES_CMAC_Final+0xe2>
	}
	else
		LSHIFT(K, K);
 800aeac:	2300      	movs	r3, #0
 800aeae:	643b      	str	r3, [r7, #64]	@ 0x40
 800aeb0:	e01b      	b.n	800aeea <AES_CMAC_Final+0xd0>
 800aeb2:	f107 021c 	add.w	r2, r7, #28
 800aeb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeb8:	4413      	add	r3, r2
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	b25a      	sxtb	r2, r3
 800aec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec2:	3301      	adds	r3, #1
 800aec4:	3348      	adds	r3, #72	@ 0x48
 800aec6:	443b      	add	r3, r7
 800aec8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aecc:	09db      	lsrs	r3, r3, #7
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	4313      	orrs	r3, r2
 800aed4:	b25b      	sxtb	r3, r3
 800aed6:	b2d9      	uxtb	r1, r3
 800aed8:	f107 021c 	add.w	r2, r7, #28
 800aedc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aede:	4413      	add	r3, r2
 800aee0:	460a      	mov	r2, r1
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aee6:	3301      	adds	r3, #1
 800aee8:	643b      	str	r3, [r7, #64]	@ 0x40
 800aeea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeec:	2b0e      	cmp	r3, #14
 800aeee:	dde0      	ble.n	800aeb2 <AES_CMAC_Final+0x98>
 800aef0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	if (ctx->M_n == 16) {
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800af02:	2b10      	cmp	r3, #16
 800af04:	d11d      	bne.n	800af42 <AES_CMAC_Final+0x128>
		/* last block was a complete block */
		XOR(K, ctx->M_last);
 800af06:	2300      	movs	r3, #0
 800af08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af0a:	e016      	b.n	800af3a <AES_CMAC_Final+0x120>
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af10:	4413      	add	r3, r2
 800af12:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af16:	781a      	ldrb	r2, [r3, #0]
 800af18:	f107 011c 	add.w	r1, r7, #28
 800af1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af1e:	440b      	add	r3, r1
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	4053      	eors	r3, r2
 800af24:	b2d9      	uxtb	r1, r3
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af2a:	4413      	add	r3, r2
 800af2c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800af30:	460a      	mov	r2, r1
 800af32:	701a      	strb	r2, [r3, #0]
 800af34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af36:	3301      	adds	r3, #1
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af3c:	2b0f      	cmp	r3, #15
 800af3e:	dde5      	ble.n	800af0c <AES_CMAC_Final+0xf2>
 800af40:	e096      	b.n	800b070 <AES_CMAC_Final+0x256>
	}
	else {
		/* generate subkey K2 */
		if (K[0] & 0x80) {
 800af42:	7f3b      	ldrb	r3, [r7, #28]
 800af44:	b25b      	sxtb	r3, r3
 800af46:	2b00      	cmp	r3, #0
 800af48:	da30      	bge.n	800afac <AES_CMAC_Final+0x192>
			LSHIFT(K, K);
 800af4a:	2300      	movs	r3, #0
 800af4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af4e:	e01b      	b.n	800af88 <AES_CMAC_Final+0x16e>
 800af50:	f107 021c 	add.w	r2, r7, #28
 800af54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af56:	4413      	add	r3, r2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	b25a      	sxtb	r2, r3
 800af5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af60:	3301      	adds	r3, #1
 800af62:	3348      	adds	r3, #72	@ 0x48
 800af64:	443b      	add	r3, r7
 800af66:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800af6a:	09db      	lsrs	r3, r3, #7
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	b25b      	sxtb	r3, r3
 800af70:	4313      	orrs	r3, r2
 800af72:	b25b      	sxtb	r3, r3
 800af74:	b2d9      	uxtb	r1, r3
 800af76:	f107 021c 	add.w	r2, r7, #28
 800af7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7c:	4413      	add	r3, r2
 800af7e:	460a      	mov	r2, r1
 800af80:	701a      	strb	r2, [r3, #0]
 800af82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af84:	3301      	adds	r3, #1
 800af86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	2b0e      	cmp	r3, #14
 800af8c:	dde0      	ble.n	800af50 <AES_CMAC_Final+0x136>
 800af8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			K[15] ^= 0x87;
 800af9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af9e:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800afa2:	43db      	mvns	r3, r3
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800afaa:	e027      	b.n	800affc <AES_CMAC_Final+0x1e2>
		}
		else
			LSHIFT(K, K);
 800afac:	2300      	movs	r3, #0
 800afae:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb0:	e01b      	b.n	800afea <AES_CMAC_Final+0x1d0>
 800afb2:	f107 021c 	add.w	r2, r7, #28
 800afb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb8:	4413      	add	r3, r2
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	b25a      	sxtb	r2, r3
 800afc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc2:	3301      	adds	r3, #1
 800afc4:	3348      	adds	r3, #72	@ 0x48
 800afc6:	443b      	add	r3, r7
 800afc8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800afcc:	09db      	lsrs	r3, r3, #7
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	b25b      	sxtb	r3, r3
 800afd2:	4313      	orrs	r3, r2
 800afd4:	b25b      	sxtb	r3, r3
 800afd6:	b2d9      	uxtb	r1, r3
 800afd8:	f107 021c 	add.w	r2, r7, #28
 800afdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afde:	4413      	add	r3, r2
 800afe0:	460a      	mov	r2, r1
 800afe2:	701a      	strb	r2, [r3, #0]
 800afe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe6:	3301      	adds	r3, #1
 800afe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afec:	2b0e      	cmp	r3, #14
 800afee:	dde0      	ble.n	800afb2 <AES_CMAC_Final+0x198>
 800aff0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

		/* padding(M_last) */
		ctx->M_last[ctx->M_n] = 0x80;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	4413      	add	r3, r2
 800b006:	2280      	movs	r2, #128	@ 0x80
 800b008:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
		while (++ctx->M_n < 16)
 800b00c:	e007      	b.n	800b01e <AES_CMAC_Final+0x204>
			ctx->M_last[ctx->M_n] = 0;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	4413      	add	r3, r2
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
		while (++ctx->M_n < 16)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b032:	2b0f      	cmp	r3, #15
 800b034:	d9eb      	bls.n	800b00e <AES_CMAC_Final+0x1f4>

		XOR(K, ctx->M_last);
 800b036:	2300      	movs	r3, #0
 800b038:	633b      	str	r3, [r7, #48]	@ 0x30
 800b03a:	e016      	b.n	800b06a <AES_CMAC_Final+0x250>
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b040:	4413      	add	r3, r2
 800b042:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b046:	781a      	ldrb	r2, [r3, #0]
 800b048:	f107 011c 	add.w	r1, r7, #28
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	440b      	add	r3, r1
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	4053      	eors	r3, r2
 800b054:	b2d9      	uxtb	r1, r3
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05a:	4413      	add	r3, r2
 800b05c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b060:	460a      	mov	r2, r1
 800b062:	701a      	strb	r2, [r3, #0]
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	3301      	adds	r3, #1
 800b068:	633b      	str	r3, [r7, #48]	@ 0x30
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	2b0f      	cmp	r3, #15
 800b06e:	dde5      	ble.n	800b03c <AES_CMAC_Final+0x222>
	}
	XOR(ctx->M_last, ctx->X);
 800b070:	2300      	movs	r3, #0
 800b072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b074:	e015      	b.n	800b0a2 <AES_CMAC_Final+0x288>
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07a:	4413      	add	r3, r2
 800b07c:	33f1      	adds	r3, #241	@ 0xf1
 800b07e:	781a      	ldrb	r2, [r3, #0]
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b084:	440b      	add	r3, r1
 800b086:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	4053      	eors	r3, r2
 800b08e:	b2d9      	uxtb	r1, r3
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b094:	4413      	add	r3, r2
 800b096:	33f1      	adds	r3, #241	@ 0xf1
 800b098:	460a      	mov	r2, r1
 800b09a:	701a      	strb	r2, [r3, #0]
 800b09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09e:	3301      	adds	r3, #1
 800b0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a4:	2b0f      	cmp	r3, #15
 800b0a6:	dde6      	ble.n	800b076 <AES_CMAC_Final+0x25c>

	//rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

	memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	2210      	movs	r2, #16
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f015 fd74 	bl	8020ba2 <memcpy1>
	lora_aes_encrypt(in, digest, &ctx->rijndael);
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	f107 030c 	add.w	r3, r7, #12
 800b0c0:	6879      	ldr	r1, [r7, #4]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff fd88 	bl	800abd8 <lora_aes_encrypt>
	memset1(K, 0, sizeof K);
 800b0c8:	f107 031c 	add.w	r3, r7, #28
 800b0cc:	2210      	movs	r2, #16
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f015 fda3 	bl	8020c1c <memset1>
}
 800b0d6:	bf00      	nop
 800b0d8:	3748      	adds	r7, #72	@ 0x48
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <OnRadioTxDone>:
 * \brief Resets MAC specific parameters to default
 */
static void ResetMacParameters(void);

static void OnRadioTxDone(void)
{
 800b0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0e4:	b088      	sub	sp, #32
 800b0e6:	af00      	add	r7, sp, #0
	LOG_LIB("LM", "OnRadioTxDone");

	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	SetBandTxDoneParams_t txDone;
	TimerTime_t curTime = TimerGetCurrentTime();
 800b0e8:	f015 ffac 	bl	8021044 <util_timer_get_currenttime>
 800b0ec:	e9c7 0106 	strd	r0, r1, [r7, #24]

	if (LoRaMacDeviceClass != CLASS_C)
 800b0f0:	4b51      	ldr	r3, [pc, #324]	@ (800b238 <OnRadioTxDone+0x158>)
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d002      	beq.n	800b0fe <OnRadioTxDone+0x1e>
	{
		Radio.Sleep();
 800b0f8:	4b50      	ldr	r3, [pc, #320]	@ (800b23c <OnRadioTxDone+0x15c>)
 800b0fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0fc:	4798      	blx	r3
	}

	// Setup timers
	if (IsRxWindowsEnabled == true)
 800b0fe:	4b50      	ldr	r3, [pc, #320]	@ (800b240 <OnRadioTxDone+0x160>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d03d      	beq.n	800b182 <OnRadioTxDone+0xa2>
	{
		LOG_LIB("LM", "OnRadioTxDone => RX Windows #1 %d #2 %d", RxWindow1Delay, RxWindow2Delay);

		TimerSetValue(&RxWindowTimer1, RxWindow1Delay);
 800b106:	4b4f      	ldr	r3, [pc, #316]	@ (800b244 <OnRadioTxDone+0x164>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2200      	movs	r2, #0
 800b10c:	469a      	mov	sl, r3
 800b10e:	4693      	mov	fp, r2
 800b110:	4652      	mov	r2, sl
 800b112:	465b      	mov	r3, fp
 800b114:	484c      	ldr	r0, [pc, #304]	@ (800b248 <OnRadioTxDone+0x168>)
 800b116:	f015 ff6f 	bl	8020ff8 <util_timer_set_period>
		TimerStart(&RxWindowTimer1);
 800b11a:	484b      	ldr	r0, [pc, #300]	@ (800b248 <OnRadioTxDone+0x168>)
 800b11c:	f015 fe88 	bl	8020e30 <util_timer_start>
		TimerSetValue(&RxWindowTimer2, RxWindow2Delay);
 800b120:	4b4a      	ldr	r3, [pc, #296]	@ (800b24c <OnRadioTxDone+0x16c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2200      	movs	r2, #0
 800b126:	4698      	mov	r8, r3
 800b128:	4691      	mov	r9, r2
 800b12a:	4642      	mov	r2, r8
 800b12c:	464b      	mov	r3, r9
 800b12e:	4848      	ldr	r0, [pc, #288]	@ (800b250 <OnRadioTxDone+0x170>)
 800b130:	f015 ff62 	bl	8020ff8 <util_timer_set_period>
		TimerStart(&RxWindowTimer2);
 800b134:	4846      	ldr	r0, [pc, #280]	@ (800b250 <OnRadioTxDone+0x170>)
 800b136:	f015 fe7b 	bl	8020e30 <util_timer_start>
		if ((LoRaMacDeviceClass == CLASS_C) || (NodeAckRequested == true))
 800b13a:	4b3f      	ldr	r3, [pc, #252]	@ (800b238 <OnRadioTxDone+0x158>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d003      	beq.n	800b14a <OnRadioTxDone+0x6a>
 800b142:	4b44      	ldr	r3, [pc, #272]	@ (800b254 <OnRadioTxDone+0x174>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d02f      	beq.n	800b1aa <OnRadioTxDone+0xca>
		{
			getPhy.Attribute = PHY_ACK_TIMEOUT;
 800b14a:	2312      	movs	r3, #18
 800b14c:	753b      	strb	r3, [r7, #20]
			phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800b14e:	4b42      	ldr	r3, [pc, #264]	@ (800b258 <OnRadioTxDone+0x178>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	f107 0214 	add.w	r2, r7, #20
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f005 f85b 	bl	8010214 <RegionGetPhyParam>
 800b15e:	4603      	mov	r3, r0
 800b160:	613b      	str	r3, [r7, #16]
			TimerSetValue(&AckTimeoutTimer, RxWindow2Delay + phyParam.Value);
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	4b39      	ldr	r3, [pc, #228]	@ (800b24c <OnRadioTxDone+0x16c>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4413      	add	r3, r2
 800b16a:	2200      	movs	r2, #0
 800b16c:	461c      	mov	r4, r3
 800b16e:	4615      	mov	r5, r2
 800b170:	4622      	mov	r2, r4
 800b172:	462b      	mov	r3, r5
 800b174:	4839      	ldr	r0, [pc, #228]	@ (800b25c <OnRadioTxDone+0x17c>)
 800b176:	f015 ff3f 	bl	8020ff8 <util_timer_set_period>
			TimerStart(&AckTimeoutTimer);
 800b17a:	4838      	ldr	r0, [pc, #224]	@ (800b25c <OnRadioTxDone+0x17c>)
 800b17c:	f015 fe58 	bl	8020e30 <util_timer_start>
 800b180:	e013      	b.n	800b1aa <OnRadioTxDone+0xca>
		}
	}
	else
	{
		McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b182:	4b37      	ldr	r3, [pc, #220]	@ (800b260 <OnRadioTxDone+0x180>)
 800b184:	2200      	movs	r2, #0
 800b186:	705a      	strb	r2, [r3, #1]
		MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 800b188:	4b36      	ldr	r3, [pc, #216]	@ (800b264 <OnRadioTxDone+0x184>)
 800b18a:	2204      	movs	r2, #4
 800b18c:	705a      	strb	r2, [r3, #1]

		if (LoRaMacFlags.Value == 0)
 800b18e:	4b36      	ldr	r3, [pc, #216]	@ (800b268 <OnRadioTxDone+0x188>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d104      	bne.n	800b1a0 <OnRadioTxDone+0xc0>
		{
			LoRaMacFlags.Bits.McpsReq = 1;
 800b196:	4a34      	ldr	r2, [pc, #208]	@ (800b268 <OnRadioTxDone+0x188>)
 800b198:	7813      	ldrb	r3, [r2, #0]
 800b19a:	f043 0301 	orr.w	r3, r3, #1
 800b19e:	7013      	strb	r3, [r2, #0]
		}
		LoRaMacFlags.Bits.MacDone = 1;
 800b1a0:	4a31      	ldr	r2, [pc, #196]	@ (800b268 <OnRadioTxDone+0x188>)
 800b1a2:	7813      	ldrb	r3, [r2, #0]
 800b1a4:	f043 0310 	orr.w	r3, r3, #16
 800b1a8:	7013      	strb	r3, [r2, #0]
	}

	// Verify if the last uplink was a join request
	if ((LoRaMacFlags.Bits.MlmeReq == 1) && (MlmeConfirm.MlmeRequest == MLME_JOIN))
 800b1aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b268 <OnRadioTxDone+0x188>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	f003 0308 	and.w	r3, r3, #8
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d007      	beq.n	800b1c8 <OnRadioTxDone+0xe8>
 800b1b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b264 <OnRadioTxDone+0x184>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d103      	bne.n	800b1c8 <OnRadioTxDone+0xe8>
	{
		LOG_LIB("LM", "OnRadioTxDone => TX was Join Request");

		LastTxIsJoinRequest = true;
 800b1c0:	4b2a      	ldr	r3, [pc, #168]	@ (800b26c <OnRadioTxDone+0x18c>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e002      	b.n	800b1ce <OnRadioTxDone+0xee>
	}
	else
	{
		LastTxIsJoinRequest = false;
 800b1c8:	4b28      	ldr	r3, [pc, #160]	@ (800b26c <OnRadioTxDone+0x18c>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]
	}

	// Store last Tx channel
	LastTxChannel = Channel;
 800b1ce:	4b28      	ldr	r3, [pc, #160]	@ (800b270 <OnRadioTxDone+0x190>)
 800b1d0:	781a      	ldrb	r2, [r3, #0]
 800b1d2:	4b28      	ldr	r3, [pc, #160]	@ (800b274 <OnRadioTxDone+0x194>)
 800b1d4:	701a      	strb	r2, [r3, #0]
	// Update last tx done time for the current channel
	txDone.Channel = Channel;
 800b1d6:	4b26      	ldr	r3, [pc, #152]	@ (800b270 <OnRadioTxDone+0x190>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	703b      	strb	r3, [r7, #0]
	//		txDone.Joined = IsLoRaMacNetworkJoined;
	txDone.Joined = (IsLoRaMacNetworkJoined == JOIN_OK);
 800b1dc:	4b26      	ldr	r3, [pc, #152]	@ (800b278 <OnRadioTxDone+0x198>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	bf0c      	ite	eq
 800b1e4:	2301      	moveq	r3, #1
 800b1e6:	2300      	movne	r3, #0
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	707b      	strb	r3, [r7, #1]
	txDone.LastTxDoneTime = curTime;
 800b1ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	RegionSetBandTxDone(LoRaMacRegion, &txDone);
 800b1f4:	4b18      	ldr	r3, [pc, #96]	@ (800b258 <OnRadioTxDone+0x178>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	463a      	mov	r2, r7
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f005 f877 	bl	80102f0 <RegionSetBandTxDone>
	// Update Aggregated last tx done time
	AggregatedLastTxDoneTime = curTime;
 800b202:	491e      	ldr	r1, [pc, #120]	@ (800b27c <OnRadioTxDone+0x19c>)
 800b204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b208:	e9c1 2300 	strd	r2, r3, [r1]

	if (NodeAckRequested == false)
 800b20c:	4b11      	ldr	r3, [pc, #68]	@ (800b254 <OnRadioTxDone+0x174>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	f083 0301 	eor.w	r3, r3, #1
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d008      	beq.n	800b22c <OnRadioTxDone+0x14c>
	{
		McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b21a:	4b11      	ldr	r3, [pc, #68]	@ (800b260 <OnRadioTxDone+0x180>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	705a      	strb	r2, [r3, #1]
		ChannelsNbRepCounter++;
 800b220:	4b17      	ldr	r3, [pc, #92]	@ (800b280 <OnRadioTxDone+0x1a0>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	3301      	adds	r3, #1
 800b226:	b2da      	uxtb	r2, r3
 800b228:	4b15      	ldr	r3, [pc, #84]	@ (800b280 <OnRadioTxDone+0x1a0>)
 800b22a:	701a      	strb	r2, [r3, #0]
	}
}
 800b22c:	bf00      	nop
 800b22e:	3720      	adds	r7, #32
 800b230:	46bd      	mov	sp, r7
 800b232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b236:	bf00      	nop
 800b238:	20006550 	.word	0x20006550
 800b23c:	08025450 	.word	0x08025450
 800b240:	2000006c 	.word	0x2000006c
 800b244:	200069b8 	.word	0x200069b8
 800b248:	20006978 	.word	0x20006978
 800b24c:	200069bc 	.word	0x200069bc
 800b250:	20006998 	.word	0x20006998
 800b254:	20006768 	.word	0x20006768
 800b258:	20006510 	.word	0x20006510
 800b25c:	200069e8 	.word	0x200069e8
 800b260:	20006a38 	.word	0x20006a38
 800b264:	20006a50 	.word	0x20006a50
 800b268:	20006a6c 	.word	0x20006a6c
 800b26c:	200068fb 	.word	0x200068fb
 800b270:	200068f9 	.word	0x200068f9
 800b274:	200068fa 	.word	0x200068fa
 800b278:	20006761 	.word	0x20006761
 800b27c:	200068e8 	.word	0x200068e8
 800b280:	200068e0 	.word	0x200068e0

0800b284 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	af00      	add	r7, sp, #0
	LoRaMacState |= LORAMAC_RX_ABORT;
 800b288:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c8 <PrepareRxDoneAbort+0x44>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b290:	4a0d      	ldr	r2, [pc, #52]	@ (800b2c8 <PrepareRxDoneAbort+0x44>)
 800b292:	6013      	str	r3, [r2, #0]

	if (NodeAckRequested)
 800b294:	4b0d      	ldr	r3, [pc, #52]	@ (800b2cc <PrepareRxDoneAbort+0x48>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <PrepareRxDoneAbort+0x1e>
	{
		OnAckTimeoutTimerEvent(NULL);
 800b29c:	2000      	movs	r0, #0
 800b29e:	f001 f929 	bl	800c4f4 <OnAckTimeoutTimerEvent>
	}

	LoRaMacFlags.Bits.McpsInd = 1;
 800b2a2:	4a0b      	ldr	r2, [pc, #44]	@ (800b2d0 <PrepareRxDoneAbort+0x4c>)
 800b2a4:	7813      	ldrb	r3, [r2, #0]
 800b2a6:	f043 0302 	orr.w	r3, r3, #2
 800b2aa:	7013      	strb	r3, [r2, #0]
	LoRaMacFlags.Bits.MacDone = 1;
 800b2ac:	4a08      	ldr	r2, [pc, #32]	@ (800b2d0 <PrepareRxDoneAbort+0x4c>)
 800b2ae:	7813      	ldrb	r3, [r2, #0]
 800b2b0:	f043 0310 	orr.w	r3, r3, #16
 800b2b4:	7013      	strb	r3, [r2, #0]

	// Trig OnMacCheckTimerEvent call as soon as possible
	// TimerSetValue(&MacStateCheckTimer, 100);
	// TimerStart(&MacStateCheckTimer);
	TimerStop(&MacStateCheckTimer);
 800b2b6:	4807      	ldr	r0, [pc, #28]	@ (800b2d4 <PrepareRxDoneAbort+0x50>)
 800b2b8:	f015 fe36 	bl	8020f28 <util_timer_stop>
	OnMacStateCheckTimerEvent(NULL);
 800b2bc:	2000      	movs	r0, #0
 800b2be:	f000 fd63 	bl	800bd88 <OnMacStateCheckTimerEvent>
}
 800b2c2:	bf00      	nop
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20006908 	.word	0x20006908
 800b2cc:	20006768 	.word	0x20006768
 800b2d0:	20006a6c 	.word	0x20006a6c
 800b2d4:	20006910 	.word	0x20006910

0800b2d8 <OnRadioRxDone>:

static void OnRadioRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b09c      	sub	sp, #112	@ 0x70
 800b2dc:	af04      	add	r7, sp, #16
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	817b      	strh	r3, [r7, #10]
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	813b      	strh	r3, [r7, #8]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	71fb      	strb	r3, [r7, #7]
	LoRaMacHeader_t macHdr;
	LoRaMacFrameCtrl_t fCtrl;
	ApplyCFListParams_t applyCFList;
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	bool skipIndication = false;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	uint8_t pktHeaderLen = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	uint32_t address = 0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t appPayloadStartIndex = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t port = 0xFF;
 800b308:	23ff      	movs	r3, #255	@ 0xff
 800b30a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	uint8_t frameLen = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	uint32_t mic = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	617b      	str	r3, [r7, #20]
	uint32_t micRx = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint16_t sequenceCounter = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t sequenceCounterPrev = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint16_t sequenceCounterDiff = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint32_t downLinkCounter = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	65bb      	str	r3, [r7, #88]	@ 0x58

	MulticastParams_t *curMulticastParams = NULL;
 800b32c:	2300      	movs	r3, #0
 800b32e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint8_t *nwkSKey = LoRaMacNwkSKey;
 800b330:	4b98      	ldr	r3, [pc, #608]	@ (800b594 <OnRadioRxDone+0x2bc>)
 800b332:	653b      	str	r3, [r7, #80]	@ 0x50
	uint8_t *appSKey = LoRaMacAppSKey;
 800b334:	4b98      	ldr	r3, [pc, #608]	@ (800b598 <OnRadioRxDone+0x2c0>)
 800b336:	64fb      	str	r3, [r7, #76]	@ 0x4c

	uint8_t multicast = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	bool isMicOk = false;
 800b33e:	2300      	movs	r3, #0
 800b340:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

	McpsConfirm.AckReceived = false;
 800b344:	4b95      	ldr	r3, [pc, #596]	@ (800b59c <OnRadioRxDone+0x2c4>)
 800b346:	2200      	movs	r2, #0
 800b348:	711a      	strb	r2, [r3, #4]
	McpsIndication.Rssi = rssi;
 800b34a:	4a95      	ldr	r2, [pc, #596]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b34c:	893b      	ldrh	r3, [r7, #8]
 800b34e:	81d3      	strh	r3, [r2, #14]
	McpsIndication.Snr = snr;
 800b350:	79fa      	ldrb	r2, [r7, #7]
 800b352:	4b93      	ldr	r3, [pc, #588]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b354:	741a      	strb	r2, [r3, #16]
	McpsIndication.RxSlot = RxSlot;
 800b356:	4b93      	ldr	r3, [pc, #588]	@ (800b5a4 <OnRadioRxDone+0x2cc>)
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	4b91      	ldr	r3, [pc, #580]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b35c:	745a      	strb	r2, [r3, #17]
	McpsIndication.Port = 0;
 800b35e:	4b90      	ldr	r3, [pc, #576]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b360:	2200      	movs	r2, #0
 800b362:	70da      	strb	r2, [r3, #3]
	McpsIndication.Multicast = 0;
 800b364:	4b8e      	ldr	r3, [pc, #568]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b366:	2200      	movs	r2, #0
 800b368:	709a      	strb	r2, [r3, #2]
	McpsIndication.FramePending = 0;
 800b36a:	4b8d      	ldr	r3, [pc, #564]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	715a      	strb	r2, [r3, #5]
	McpsIndication.Buffer = NULL;
 800b370:	4b8b      	ldr	r3, [pc, #556]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b372:	2200      	movs	r2, #0
 800b374:	609a      	str	r2, [r3, #8]
	McpsIndication.BufferSize = 0;
 800b376:	4b8a      	ldr	r3, [pc, #552]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b378:	2200      	movs	r2, #0
 800b37a:	731a      	strb	r2, [r3, #12]
	McpsIndication.RxData = false;
 800b37c:	4b88      	ldr	r3, [pc, #544]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b37e:	2200      	movs	r2, #0
 800b380:	735a      	strb	r2, [r3, #13]
	McpsIndication.AckReceived = false;
 800b382:	4b87      	ldr	r3, [pc, #540]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b384:	2200      	movs	r2, #0
 800b386:	749a      	strb	r2, [r3, #18]
	McpsIndication.DownLinkCounter = 0;
 800b388:	4b85      	ldr	r3, [pc, #532]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	615a      	str	r2, [r3, #20]
	McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b38e:	4b84      	ldr	r3, [pc, #528]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b390:	2200      	movs	r2, #0
 800b392:	701a      	strb	r2, [r3, #0]

	Radio.Sleep();
 800b394:	4b84      	ldr	r3, [pc, #528]	@ (800b5a8 <OnRadioRxDone+0x2d0>)
 800b396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b398:	4798      	blx	r3
	TimerStop(&RxWindowTimer2);
 800b39a:	4884      	ldr	r0, [pc, #528]	@ (800b5ac <OnRadioRxDone+0x2d4>)
 800b39c:	f015 fdc4 	bl	8020f28 <util_timer_stop>

	macHdr.Value = payload[pktHeaderLen++];
 800b3a0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	switch (macHdr.Bits.MType)
 800b3b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b3ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	2b06      	cmp	r3, #6
 800b3c4:	f200 83e4 	bhi.w	800bb90 <OnRadioRxDone+0x8b8>
 800b3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d0 <OnRadioRxDone+0xf8>)
 800b3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ce:	bf00      	nop
 800b3d0:	0800b3ed 	.word	0x0800b3ed
 800b3d4:	0800bb91 	.word	0x0800bb91
 800b3d8:	0800b5e1 	.word	0x0800b5e1
 800b3dc:	0800bb91 	.word	0x0800bb91
 800b3e0:	0800b5e1 	.word	0x0800b5e1
 800b3e4:	0800bb91 	.word	0x0800bb91
 800b3e8:	0800bb51 	.word	0x0800bb51
	{
	case FRAME_TYPE_JOIN_ACCEPT:
		LOG_LIB("LM", "OnRadioRxDone => FRAME_TYPE_JOIN_ACCEPT");

		if (IsLoRaMacNetworkJoined == JOIN_OK)
 800b3ec:	4b70      	ldr	r3, [pc, #448]	@ (800b5b0 <OnRadioRxDone+0x2d8>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d105      	bne.n	800b400 <OnRadioRxDone+0x128>
		{
			McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b3f4:	4b6a      	ldr	r3, [pc, #424]	@ (800b5a0 <OnRadioRxDone+0x2c8>)
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	705a      	strb	r2, [r3, #1]
			PrepareRxDoneAbort();
 800b3fa:	f7ff ff43 	bl	800b284 <PrepareRxDoneAbort>
			return;
 800b3fe:	e3d8      	b.n	800bbb2 <OnRadioRxDone+0x8da>
		}
		LoRaMacJoinDecrypt(payload + 1, size - 1, LoRaMacAppKey, LoRaMacRxPayload + 1);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	1c58      	adds	r0, r3, #1
 800b404:	897b      	ldrh	r3, [r7, #10]
 800b406:	3b01      	subs	r3, #1
 800b408:	b299      	uxth	r1, r3
 800b40a:	4b6a      	ldr	r3, [pc, #424]	@ (800b5b4 <OnRadioRxDone+0x2dc>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4b6a      	ldr	r3, [pc, #424]	@ (800b5b8 <OnRadioRxDone+0x2e0>)
 800b410:	f003 fdda 	bl	800efc8 <LoRaMacJoinDecrypt>

		LoRaMacRxPayload[0] = macHdr.Value;
 800b414:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800b418:	4b68      	ldr	r3, [pc, #416]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b41a:	701a      	strb	r2, [r3, #0]

		LoRaMacJoinComputeMic(LoRaMacRxPayload, size - LORAMAC_MFR_LEN, LoRaMacAppKey, &mic);
 800b41c:	897b      	ldrh	r3, [r7, #10]
 800b41e:	3b04      	subs	r3, #4
 800b420:	b299      	uxth	r1, r3
 800b422:	4b64      	ldr	r3, [pc, #400]	@ (800b5b4 <OnRadioRxDone+0x2dc>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	f107 0314 	add.w	r3, r7, #20
 800b42a:	4864      	ldr	r0, [pc, #400]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b42c:	f003 fd9a 	bl	800ef64 <LoRaMacJoinComputeMic>

		micRx |= (uint32_t)LoRaMacRxPayload[size - LORAMAC_MFR_LEN];
 800b430:	897b      	ldrh	r3, [r7, #10]
 800b432:	3b04      	subs	r3, #4
 800b434:	4a61      	ldr	r2, [pc, #388]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b436:	5cd3      	ldrb	r3, [r2, r3]
 800b438:	461a      	mov	r2, r3
 800b43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43c:	4313      	orrs	r3, r2
 800b43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		micRx |= ((uint32_t)LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 1] << 8);
 800b440:	897b      	ldrh	r3, [r7, #10]
 800b442:	3b03      	subs	r3, #3
 800b444:	4a5d      	ldr	r2, [pc, #372]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b446:	5cd3      	ldrb	r3, [r2, r3]
 800b448:	021b      	lsls	r3, r3, #8
 800b44a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b44c:	4313      	orrs	r3, r2
 800b44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		micRx |= ((uint32_t)LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 2] << 16);
 800b450:	897b      	ldrh	r3, [r7, #10]
 800b452:	3b02      	subs	r3, #2
 800b454:	4a59      	ldr	r2, [pc, #356]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b456:	5cd3      	ldrb	r3, [r2, r3]
 800b458:	041b      	lsls	r3, r3, #16
 800b45a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b45c:	4313      	orrs	r3, r2
 800b45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		micRx |= ((uint32_t)LoRaMacRxPayload[size - LORAMAC_MFR_LEN + 3] << 24);
 800b460:	897b      	ldrh	r3, [r7, #10]
 800b462:	3b01      	subs	r3, #1
 800b464:	4a55      	ldr	r2, [pc, #340]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b466:	5cd3      	ldrb	r3, [r2, r3]
 800b468:	061b      	lsls	r3, r3, #24
 800b46a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b46c:	4313      	orrs	r3, r2
 800b46e:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (micRx == mic)
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b474:	429a      	cmp	r2, r3
 800b476:	f040 8085 	bne.w	800b584 <OnRadioRxDone+0x2ac>
		{
			LoRaMacJoinComputeSKeys(LoRaMacAppKey, LoRaMacRxPayload + 1, LoRaMacDevNonce, LoRaMacNwkSKey, LoRaMacAppSKey);
 800b47a:	4b4e      	ldr	r3, [pc, #312]	@ (800b5b4 <OnRadioRxDone+0x2dc>)
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	494e      	ldr	r1, [pc, #312]	@ (800b5b8 <OnRadioRxDone+0x2e0>)
 800b480:	4b4f      	ldr	r3, [pc, #316]	@ (800b5c0 <OnRadioRxDone+0x2e8>)
 800b482:	881a      	ldrh	r2, [r3, #0]
 800b484:	4b44      	ldr	r3, [pc, #272]	@ (800b598 <OnRadioRxDone+0x2c0>)
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	4b42      	ldr	r3, [pc, #264]	@ (800b594 <OnRadioRxDone+0x2bc>)
 800b48a:	f003 fdc7 	bl	800f01c <LoRaMacJoinComputeSKeys>

			LoRaMacNetID = (uint32_t)LoRaMacRxPayload[4];
 800b48e:	4b4b      	ldr	r3, [pc, #300]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b490:	791b      	ldrb	r3, [r3, #4]
 800b492:	461a      	mov	r2, r3
 800b494:	4b4b      	ldr	r3, [pc, #300]	@ (800b5c4 <OnRadioRxDone+0x2ec>)
 800b496:	601a      	str	r2, [r3, #0]
			LoRaMacNetID |= ((uint32_t)LoRaMacRxPayload[5] << 8);
 800b498:	4b48      	ldr	r3, [pc, #288]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b49a:	795b      	ldrb	r3, [r3, #5]
 800b49c:	021a      	lsls	r2, r3, #8
 800b49e:	4b49      	ldr	r3, [pc, #292]	@ (800b5c4 <OnRadioRxDone+0x2ec>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	4a47      	ldr	r2, [pc, #284]	@ (800b5c4 <OnRadioRxDone+0x2ec>)
 800b4a6:	6013      	str	r3, [r2, #0]
			LoRaMacNetID |= ((uint32_t)LoRaMacRxPayload[6] << 16);
 800b4a8:	4b44      	ldr	r3, [pc, #272]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b4aa:	799b      	ldrb	r3, [r3, #6]
 800b4ac:	041a      	lsls	r2, r3, #16
 800b4ae:	4b45      	ldr	r3, [pc, #276]	@ (800b5c4 <OnRadioRxDone+0x2ec>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	4a43      	ldr	r2, [pc, #268]	@ (800b5c4 <OnRadioRxDone+0x2ec>)
 800b4b6:	6013      	str	r3, [r2, #0]

			LoRaMacDevAddr = (uint32_t)LoRaMacRxPayload[7];
 800b4b8:	4b40      	ldr	r3, [pc, #256]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b4ba:	79db      	ldrb	r3, [r3, #7]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4b42      	ldr	r3, [pc, #264]	@ (800b5c8 <OnRadioRxDone+0x2f0>)
 800b4c0:	601a      	str	r2, [r3, #0]
			LoRaMacDevAddr |= ((uint32_t)LoRaMacRxPayload[8] << 8);
 800b4c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b4c4:	7a1b      	ldrb	r3, [r3, #8]
 800b4c6:	021a      	lsls	r2, r3, #8
 800b4c8:	4b3f      	ldr	r3, [pc, #252]	@ (800b5c8 <OnRadioRxDone+0x2f0>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	4a3e      	ldr	r2, [pc, #248]	@ (800b5c8 <OnRadioRxDone+0x2f0>)
 800b4d0:	6013      	str	r3, [r2, #0]
			LoRaMacDevAddr |= ((uint32_t)LoRaMacRxPayload[9] << 16);
 800b4d2:	4b3a      	ldr	r3, [pc, #232]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b4d4:	7a5b      	ldrb	r3, [r3, #9]
 800b4d6:	041a      	lsls	r2, r3, #16
 800b4d8:	4b3b      	ldr	r3, [pc, #236]	@ (800b5c8 <OnRadioRxDone+0x2f0>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	4a3a      	ldr	r2, [pc, #232]	@ (800b5c8 <OnRadioRxDone+0x2f0>)
 800b4e0:	6013      	str	r3, [r2, #0]
			LoRaMacDevAddr |= ((uint32_t)LoRaMacRxPayload[10] << 24);
 800b4e2:	4b36      	ldr	r3, [pc, #216]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b4e4:	7a9b      	ldrb	r3, [r3, #10]
 800b4e6:	061a      	lsls	r2, r3, #24
 800b4e8:	4b37      	ldr	r3, [pc, #220]	@ (800b5c8 <OnRadioRxDone+0x2f0>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	4a36      	ldr	r2, [pc, #216]	@ (800b5c8 <OnRadioRxDone+0x2f0>)
 800b4f0:	6013      	str	r3, [r2, #0]

			// DLSettings
			LoRaMacParams.Rx1DrOffset = (LoRaMacRxPayload[11] >> 4) & 0x07;
 800b4f2:	4b32      	ldr	r3, [pc, #200]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b4f4:	7adb      	ldrb	r3, [r3, #11]
 800b4f6:	091b      	lsrs	r3, r3, #4
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	f003 0307 	and.w	r3, r3, #7
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	4b32      	ldr	r3, [pc, #200]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b502:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			LoRaMacParams.Rx2Channel.Datarate = LoRaMacRxPayload[11] & 0x0F;
 800b506:	4b2d      	ldr	r3, [pc, #180]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b508:	7adb      	ldrb	r3, [r3, #11]
 800b50a:	f003 030f 	and.w	r3, r3, #15
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	4b2e      	ldr	r3, [pc, #184]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b512:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			// RxDelay
			LoRaMacParams.ReceiveDelay1 = (LoRaMacRxPayload[12] & 0x0F);
 800b516:	4b29      	ldr	r3, [pc, #164]	@ (800b5bc <OnRadioRxDone+0x2e4>)
 800b518:	7b1b      	ldrb	r3, [r3, #12]
 800b51a:	f003 030f 	and.w	r3, r3, #15
 800b51e:	4a2b      	ldr	r2, [pc, #172]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b520:	6113      	str	r3, [r2, #16]
			if (LoRaMacParams.ReceiveDelay1 == 0)
 800b522:	4b2a      	ldr	r3, [pc, #168]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d102      	bne.n	800b530 <OnRadioRxDone+0x258>
			{
				LoRaMacParams.ReceiveDelay1 = 1;
 800b52a:	4b28      	ldr	r3, [pc, #160]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	611a      	str	r2, [r3, #16]
			}
			LoRaMacParams.ReceiveDelay1 *= 1000;
 800b530:	4b26      	ldr	r3, [pc, #152]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b538:	fb02 f303 	mul.w	r3, r2, r3
 800b53c:	4a23      	ldr	r2, [pc, #140]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b53e:	6113      	str	r3, [r2, #16]
			LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 800b540:	4b22      	ldr	r3, [pc, #136]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800b548:	4a20      	ldr	r2, [pc, #128]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b54a:	6153      	str	r3, [r2, #20]

			// Apply CF list
			applyCFList.Payload = &LoRaMacRxPayload[13];
 800b54c:	4b20      	ldr	r3, [pc, #128]	@ (800b5d0 <OnRadioRxDone+0x2f8>)
 800b54e:	623b      	str	r3, [r7, #32]
			// Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
			applyCFList.Size = size - 17;
 800b550:	897b      	ldrh	r3, [r7, #10]
 800b552:	b2db      	uxtb	r3, r3
 800b554:	3b11      	subs	r3, #17
 800b556:	b2db      	uxtb	r3, r3
 800b558:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

			RegionApplyCFList(LoRaMacRegion, &applyCFList);
 800b55c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d4 <OnRadioRxDone+0x2fc>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f107 0220 	add.w	r2, r7, #32
 800b564:	4611      	mov	r1, r2
 800b566:	4618      	mov	r0, r3
 800b568:	f005 f816 	bl	8010598 <RegionApplyCFList>

			MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b56c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d8 <OnRadioRxDone+0x300>)
 800b56e:	2200      	movs	r2, #0
 800b570:	705a      	strb	r2, [r3, #1]
			IsLoRaMacNetworkJoined = JOIN_OK;
 800b572:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b0 <OnRadioRxDone+0x2d8>)
 800b574:	2201      	movs	r2, #1
 800b576:	701a      	strb	r2, [r3, #0]
			LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800b578:	4b18      	ldr	r3, [pc, #96]	@ (800b5dc <OnRadioRxDone+0x304>)
 800b57a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800b57e:	4b13      	ldr	r3, [pc, #76]	@ (800b5cc <OnRadioRxDone+0x2f4>)
 800b580:	705a      	strb	r2, [r3, #1]
		else
		{
			IsLoRaMacNetworkJoined = JOIN_FAILED;
			MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
		}
		break;
 800b582:	e30b      	b.n	800bb9c <OnRadioRxDone+0x8c4>
			IsLoRaMacNetworkJoined = JOIN_FAILED;
 800b584:	4b0a      	ldr	r3, [pc, #40]	@ (800b5b0 <OnRadioRxDone+0x2d8>)
 800b586:	2203      	movs	r2, #3
 800b588:	701a      	strb	r2, [r3, #0]
			MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b58a:	4b13      	ldr	r3, [pc, #76]	@ (800b5d8 <OnRadioRxDone+0x300>)
 800b58c:	2207      	movs	r2, #7
 800b58e:	705a      	strb	r2, [r3, #1]
		break;
 800b590:	e304      	b.n	800bb9c <OnRadioRxDone+0x8c4>
 800b592:	bf00      	nop
 800b594:	20006520 	.word	0x20006520
 800b598:	20006530 	.word	0x20006530
 800b59c:	20006a38 	.word	0x20006a38
 800b5a0:	20006a1c 	.word	0x20006a1c
 800b5a4:	20006a68 	.word	0x20006a68
 800b5a8:	08025450 	.word	0x08025450
 800b5ac:	20006998 	.word	0x20006998
 800b5b0:	20006761 	.word	0x20006761
 800b5b4:	2000651c 	.word	0x2000651c
 800b5b8:	20006659 	.word	0x20006659
 800b5bc:	20006658 	.word	0x20006658
 800b5c0:	20006540 	.word	0x20006540
 800b5c4:	20006544 	.word	0x20006544
 800b5c8:	20006548 	.word	0x20006548
 800b5cc:	20006870 	.word	0x20006870
 800b5d0:	20006665 	.word	0x20006665
 800b5d4:	20006510 	.word	0x20006510
 800b5d8:	20006a50 	.word	0x20006a50
 800b5dc:	200068a8 	.word	0x200068a8
		{
			LOG_LIB("LM", "OnRadioRxDone => FRAME_TYPE_DATA_UNCONFIRMED_DOWN");
		}

		// Check if the received payload size is valid
		getPhy.UplinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800b5e0:	4ba1      	ldr	r3, [pc, #644]	@ (800b868 <OnRadioRxDone+0x590>)
 800b5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5e6:	77bb      	strb	r3, [r7, #30]
		getPhy.Datarate = McpsIndication.RxDatarate;
 800b5e8:	4ba0      	ldr	r3, [pc, #640]	@ (800b86c <OnRadioRxDone+0x594>)
 800b5ea:	791b      	ldrb	r3, [r3, #4]
 800b5ec:	b25b      	sxtb	r3, r3
 800b5ee:	777b      	strb	r3, [r7, #29]
		getPhy.Attribute = PHY_MAX_PAYLOAD;
 800b5f0:	2309      	movs	r3, #9
 800b5f2:	773b      	strb	r3, [r7, #28]

		// Get the maximum payload length
		if (RepeaterSupport == true)
 800b5f4:	4b9e      	ldr	r3, [pc, #632]	@ (800b870 <OnRadioRxDone+0x598>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <OnRadioRxDone+0x328>
		{
			getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800b5fc:	230a      	movs	r3, #10
 800b5fe:	773b      	strb	r3, [r7, #28]
		}
		phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800b600:	4b9c      	ldr	r3, [pc, #624]	@ (800b874 <OnRadioRxDone+0x59c>)
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	f107 021c 	add.w	r2, r7, #28
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f004 fe02 	bl	8010214 <RegionGetPhyParam>
 800b610:	4603      	mov	r3, r0
 800b612:	61bb      	str	r3, [r7, #24]
		// if (T_MAX(0, (uint16_t)((int16_t)size - (int16_t)LORA_MAC_FRMPAYLOAD_OVERHEAD)) > phyParam.Value)
		if ((T_MAX(0, (int16_t)((int16_t)size - (int16_t)LORA_MAC_FRMPAYLOAD_OVERHEAD)) > (int16_t)phyParam.Value) ||
 800b614:	897b      	ldrh	r3, [r7, #10]
 800b616:	3b0d      	subs	r3, #13
 800b618:	b29b      	uxth	r3, r3
 800b61a:	b21b      	sxth	r3, r3
 800b61c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b620:	b21a      	sxth	r2, r3
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	b21b      	sxth	r3, r3
 800b626:	429a      	cmp	r2, r3
 800b628:	dc02      	bgt.n	800b630 <OnRadioRxDone+0x358>
 800b62a:	897b      	ldrh	r3, [r7, #10]
 800b62c:	2b0b      	cmp	r3, #11
 800b62e:	d805      	bhi.n	800b63c <OnRadioRxDone+0x364>
			(size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE))
		{
			McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b630:	4b8e      	ldr	r3, [pc, #568]	@ (800b86c <OnRadioRxDone+0x594>)
 800b632:	2201      	movs	r2, #1
 800b634:	705a      	strb	r2, [r3, #1]
			PrepareRxDoneAbort();
 800b636:	f7ff fe25 	bl	800b284 <PrepareRxDoneAbort>
			return;
 800b63a:	e2ba      	b.n	800bbb2 <OnRadioRxDone+0x8da>
		}

		address = payload[pktHeaderLen++];
 800b63c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b646:	461a      	mov	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4413      	add	r3, r2
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	647b      	str	r3, [r7, #68]	@ 0x44
		address |= ((uint32_t)payload[pktHeaderLen++] << 8);
 800b650:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b65a:	461a      	mov	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	021b      	lsls	r3, r3, #8
 800b664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b666:	4313      	orrs	r3, r2
 800b668:	647b      	str	r3, [r7, #68]	@ 0x44
		address |= ((uint32_t)payload[pktHeaderLen++] << 16);
 800b66a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b674:	461a      	mov	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	4413      	add	r3, r2
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	041b      	lsls	r3, r3, #16
 800b67e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b680:	4313      	orrs	r3, r2
 800b682:	647b      	str	r3, [r7, #68]	@ 0x44
		address |= ((uint32_t)payload[pktHeaderLen++] << 24);
 800b684:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b68e:	461a      	mov	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	4413      	add	r3, r2
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	061b      	lsls	r3, r3, #24
 800b698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b69a:	4313      	orrs	r3, r2
 800b69c:	647b      	str	r3, [r7, #68]	@ 0x44

		if (address != LoRaMacDevAddr)
 800b69e:	4b76      	ldr	r3, [pc, #472]	@ (800b878 <OnRadioRxDone+0x5a0>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d025      	beq.n	800b6f4 <OnRadioRxDone+0x41c>
		{
			curMulticastParams = MulticastChannels;
 800b6a8:	4b74      	ldr	r3, [pc, #464]	@ (800b87c <OnRadioRxDone+0x5a4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	657b      	str	r3, [r7, #84]	@ 0x54
			while (curMulticastParams != NULL)
 800b6ae:	e014      	b.n	800b6da <OnRadioRxDone+0x402>
			{
				if (address == curMulticastParams->Address)
 800b6b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d10c      	bne.n	800b6d4 <OnRadioRxDone+0x3fc>
				{
					multicast = 1;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					nwkSKey = curMulticastParams->NwkSKey;
 800b6c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	653b      	str	r3, [r7, #80]	@ 0x50
					appSKey = curMulticastParams->AppSKey;
 800b6c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6c8:	3314      	adds	r3, #20
 800b6ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
					downLinkCounter = curMulticastParams->DownLinkCounter;
 800b6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6d0:	65bb      	str	r3, [r7, #88]	@ 0x58
					break;
 800b6d2:	e005      	b.n	800b6e0 <OnRadioRxDone+0x408>
				}
				curMulticastParams = curMulticastParams->Next;
 800b6d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d8:	657b      	str	r3, [r7, #84]	@ 0x54
			while (curMulticastParams != NULL)
 800b6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1e7      	bne.n	800b6b0 <OnRadioRxDone+0x3d8>
			}
			if (multicast == 0)
 800b6e0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10f      	bne.n	800b708 <OnRadioRxDone+0x430>
			{
				// We are not the destination of this frame.
				McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800b6e8:	4b60      	ldr	r3, [pc, #384]	@ (800b86c <OnRadioRxDone+0x594>)
 800b6ea:	220b      	movs	r2, #11
 800b6ec:	705a      	strb	r2, [r3, #1]
				PrepareRxDoneAbort();
 800b6ee:	f7ff fdc9 	bl	800b284 <PrepareRxDoneAbort>
				return;
 800b6f2:	e25e      	b.n	800bbb2 <OnRadioRxDone+0x8da>
			}
		}
		else
		{
			multicast = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			nwkSKey = LoRaMacNwkSKey;
 800b6fa:	4b61      	ldr	r3, [pc, #388]	@ (800b880 <OnRadioRxDone+0x5a8>)
 800b6fc:	653b      	str	r3, [r7, #80]	@ 0x50
			appSKey = LoRaMacAppSKey;
 800b6fe:	4b61      	ldr	r3, [pc, #388]	@ (800b884 <OnRadioRxDone+0x5ac>)
 800b700:	64fb      	str	r3, [r7, #76]	@ 0x4c
			downLinkCounter = DownLinkCounter;
 800b702:	4b61      	ldr	r3, [pc, #388]	@ (800b888 <OnRadioRxDone+0x5b0>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	65bb      	str	r3, [r7, #88]	@ 0x58
		}

		fCtrl.Value = payload[pktHeaderLen++];
 800b708:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b70c:	1c5a      	adds	r2, r3, #1
 800b70e:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b712:	461a      	mov	r2, r3
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		sequenceCounter = (uint16_t)payload[pktHeaderLen++];
 800b71e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b728:	461a      	mov	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	4413      	add	r3, r2
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	877b      	strh	r3, [r7, #58]	@ 0x3a
		sequenceCounter |= (uint16_t)payload[pktHeaderLen++] << 8;
 800b732:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800b736:	1c5a      	adds	r2, r3, #1
 800b738:	f887 2049 	strb.w	r2, [r7, #73]	@ 0x49
 800b73c:	461a      	mov	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	4413      	add	r3, r2
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	b21a      	sxth	r2, r3
 800b748:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800b74c:	4313      	orrs	r3, r2
 800b74e:	b21b      	sxth	r3, r3
 800b750:	877b      	strh	r3, [r7, #58]	@ 0x3a

		appPayloadStartIndex = 8 + fCtrl.Bits.FOptsLen;
 800b752:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b756:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	3308      	adds	r3, #8
 800b75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		micRx |= (uint32_t)payload[size - LORAMAC_MFR_LEN];
 800b762:	897b      	ldrh	r3, [r7, #10]
 800b764:	3b04      	subs	r3, #4
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	4413      	add	r3, r2
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b770:	4313      	orrs	r3, r2
 800b772:	63fb      	str	r3, [r7, #60]	@ 0x3c
		micRx |= ((uint32_t)payload[size - LORAMAC_MFR_LEN + 1] << 8);
 800b774:	897b      	ldrh	r3, [r7, #10]
 800b776:	3b03      	subs	r3, #3
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4413      	add	r3, r2
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b782:	4313      	orrs	r3, r2
 800b784:	63fb      	str	r3, [r7, #60]	@ 0x3c
		micRx |= ((uint32_t)payload[size - LORAMAC_MFR_LEN + 2] << 16);
 800b786:	897b      	ldrh	r3, [r7, #10]
 800b788:	3b02      	subs	r3, #2
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	041b      	lsls	r3, r3, #16
 800b792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b794:	4313      	orrs	r3, r2
 800b796:	63fb      	str	r3, [r7, #60]	@ 0x3c
		micRx |= ((uint32_t)payload[size - LORAMAC_MFR_LEN + 3] << 24);
 800b798:	897b      	ldrh	r3, [r7, #10]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4413      	add	r3, r2
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	061b      	lsls	r3, r3, #24
 800b7a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		sequenceCounterPrev = (uint16_t)downLinkCounter;
 800b7aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7ac:	873b      	strh	r3, [r7, #56]	@ 0x38
		sequenceCounterDiff = (sequenceCounter - sequenceCounterPrev);
 800b7ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b7b0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	86fb      	strh	r3, [r7, #54]	@ 0x36

		if (sequenceCounterDiff < (1 << 15))
 800b7b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	db1a      	blt.n	800b7f4 <OnRadioRxDone+0x51c>
		{
			downLinkCounter += sequenceCounterDiff;
 800b7be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7c2:	4413      	add	r3, r2
 800b7c4:	65bb      	str	r3, [r7, #88]	@ 0x58
			LoRaMacComputeMic(payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounter, &mic);
 800b7c6:	897b      	ldrh	r3, [r7, #10]
 800b7c8:	3b04      	subs	r3, #4
 800b7ca:	b299      	uxth	r1, r3
 800b7cc:	f107 0314 	add.w	r3, r7, #20
 800b7d0:	9302      	str	r3, [sp, #8]
 800b7d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f003 fa9c 	bl	800ed1c <LoRaMacComputeMic>
			if (micRx == mic)
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d123      	bne.n	800b834 <OnRadioRxDone+0x55c>
			{
				isMicOk = true;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800b7f2:	e01f      	b.n	800b834 <OnRadioRxDone+0x55c>
			}
		}
		else
		{
			// check for sequence roll-over
			uint32_t downLinkCounterTmp = downLinkCounter + 0x10000 + (int16_t)sequenceCounterDiff;
 800b7f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800b802:	633b      	str	r3, [r7, #48]	@ 0x30
			LoRaMacComputeMic(payload, size - LORAMAC_MFR_LEN, nwkSKey, address, DOWN_LINK, downLinkCounterTmp, &mic);
 800b804:	897b      	ldrh	r3, [r7, #10]
 800b806:	3b04      	subs	r3, #4
 800b808:	b299      	uxth	r1, r3
 800b80a:	f107 0314 	add.w	r3, r7, #20
 800b80e:	9302      	str	r3, [sp, #8]
 800b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b812:	9301      	str	r3, [sp, #4]
 800b814:	2301      	movs	r3, #1
 800b816:	9300      	str	r3, [sp, #0]
 800b818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b81a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f003 fa7d 	bl	800ed1c <LoRaMacComputeMic>
			if (micRx == mic)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b826:	429a      	cmp	r2, r3
 800b828:	d104      	bne.n	800b834 <OnRadioRxDone+0x55c>
			{
				isMicOk = true;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
				downLinkCounter = downLinkCounterTmp;
 800b830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b832:	65bb      	str	r3, [r7, #88]	@ 0x58
			}
		}

		// Check for a the maximum allowed counter difference
		getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800b834:	2311      	movs	r3, #17
 800b836:	773b      	strb	r3, [r7, #28]
		phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800b838:	4b0e      	ldr	r3, [pc, #56]	@ (800b874 <OnRadioRxDone+0x59c>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	f107 021c 	add.w	r2, r7, #28
 800b840:	4611      	mov	r1, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f004 fce6 	bl	8010214 <RegionGetPhyParam>
 800b848:	4603      	mov	r3, r0
 800b84a:	61bb      	str	r3, [r7, #24]
		if (sequenceCounterDiff >= phyParam.Value)
 800b84c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	d31b      	bcc.n	800b88c <OnRadioRxDone+0x5b4>
		{
			McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800b854:	4b05      	ldr	r3, [pc, #20]	@ (800b86c <OnRadioRxDone+0x594>)
 800b856:	220a      	movs	r2, #10
 800b858:	705a      	strb	r2, [r3, #1]
			McpsIndication.DownLinkCounter = downLinkCounter;
 800b85a:	4a04      	ldr	r2, [pc, #16]	@ (800b86c <OnRadioRxDone+0x594>)
 800b85c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b85e:	6153      	str	r3, [r2, #20]
			PrepareRxDoneAbort();
 800b860:	f7ff fd10 	bl	800b284 <PrepareRxDoneAbort>
			return;
 800b864:	e1a5      	b.n	800bbb2 <OnRadioRxDone+0x8da>
 800b866:	bf00      	nop
 800b868:	20006870 	.word	0x20006870
 800b86c:	20006a1c 	.word	0x20006a1c
 800b870:	20006552 	.word	0x20006552
 800b874:	20006510 	.word	0x20006510
 800b878:	20006548 	.word	0x20006548
 800b87c:	2000654c 	.word	0x2000654c
 800b880:	20006520 	.word	0x20006520
 800b884:	20006530 	.word	0x20006530
 800b888:	2000675c 	.word	0x2000675c
		}

		if (isMicOk == true)
 800b88c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 813e 	beq.w	800bb12 <OnRadioRxDone+0x83a>
		{
			McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b896:	4ba2      	ldr	r3, [pc, #648]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b898:	2200      	movs	r2, #0
 800b89a:	705a      	strb	r2, [r3, #1]
			McpsIndication.Multicast = multicast;
 800b89c:	4aa0      	ldr	r2, [pc, #640]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b89e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b8a2:	7093      	strb	r3, [r2, #2]
			McpsIndication.FramePending = fCtrl.Bits.FPending;
 800b8a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b8a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	4b9b      	ldr	r3, [pc, #620]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b8b2:	715a      	strb	r2, [r3, #5]
			McpsIndication.Buffer = NULL;
 800b8b4:	4b9a      	ldr	r3, [pc, #616]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	609a      	str	r2, [r3, #8]
			McpsIndication.BufferSize = 0;
 800b8ba:	4b99      	ldr	r3, [pc, #612]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b8bc:	2200      	movs	r2, #0
 800b8be:	731a      	strb	r2, [r3, #12]
			McpsIndication.DownLinkCounter = downLinkCounter;
 800b8c0:	4a97      	ldr	r2, [pc, #604]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b8c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8c4:	6153      	str	r3, [r2, #20]

			McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b8c6:	4b97      	ldr	r3, [pc, #604]	@ (800bb24 <OnRadioRxDone+0x84c>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	705a      	strb	r2, [r3, #1]

			AdrAckCounter = 0;
 800b8cc:	4b96      	ldr	r3, [pc, #600]	@ (800bb28 <OnRadioRxDone+0x850>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]
			MacCommandsBufferToRepeatIndex = 0;
 800b8d2:	4b96      	ldr	r3, [pc, #600]	@ (800bb2c <OnRadioRxDone+0x854>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	701a      	strb	r2, [r3, #0]

			// Update 32 bits downlink counter
			if (multicast == 1)
 800b8d8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d118      	bne.n	800b912 <OnRadioRxDone+0x63a>
			{
				McpsIndication.McpsIndication = MCPS_MULTICAST;
 800b8e0:	4b8f      	ldr	r3, [pc, #572]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	701a      	strb	r2, [r3, #0]

				if ((curMulticastParams->DownLinkCounter == downLinkCounter) &&
 800b8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d10c      	bne.n	800b90a <OnRadioRxDone+0x632>
					(curMulticastParams->DownLinkCounter != 0))
 800b8f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				if ((curMulticastParams->DownLinkCounter == downLinkCounter) &&
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d008      	beq.n	800b90a <OnRadioRxDone+0x632>
				{
					McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800b8f8:	4b89      	ldr	r3, [pc, #548]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b8fa:	2208      	movs	r2, #8
 800b8fc:	705a      	strb	r2, [r3, #1]
					McpsIndication.DownLinkCounter = downLinkCounter;
 800b8fe:	4a88      	ldr	r2, [pc, #544]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b900:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b902:	6153      	str	r3, [r2, #20]
					PrepareRxDoneAbort();
 800b904:	f7ff fcbe 	bl	800b284 <PrepareRxDoneAbort>
					return;
 800b908:	e153      	b.n	800bbb2 <OnRadioRxDone+0x8da>
				}
				curMulticastParams->DownLinkCounter = downLinkCounter;
 800b90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b90c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b90e:	625a      	str	r2, [r3, #36]	@ 0x24
 800b910:	e034      	b.n	800b97c <OnRadioRxDone+0x6a4>
			}
			else
			{
				if (macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 800b912:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b916:	f023 031f 	bic.w	r3, r3, #31
 800b91a:	b2db      	uxtb	r3, r3
 800b91c:	2ba0      	cmp	r3, #160	@ 0xa0
 800b91e:	d112      	bne.n	800b946 <OnRadioRxDone+0x66e>
				{
					SrvAckRequested = true;
 800b920:	4b83      	ldr	r3, [pc, #524]	@ (800bb30 <OnRadioRxDone+0x858>)
 800b922:	2201      	movs	r2, #1
 800b924:	701a      	strb	r2, [r3, #0]
					McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800b926:	4b7e      	ldr	r3, [pc, #504]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b928:	2201      	movs	r2, #1
 800b92a:	701a      	strb	r2, [r3, #0]

					if ((DownLinkCounter == downLinkCounter) &&
 800b92c:	4b81      	ldr	r3, [pc, #516]	@ (800bb34 <OnRadioRxDone+0x85c>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b932:	429a      	cmp	r2, r3
 800b934:	d11f      	bne.n	800b976 <OnRadioRxDone+0x69e>
						(DownLinkCounter != 0))
 800b936:	4b7f      	ldr	r3, [pc, #508]	@ (800bb34 <OnRadioRxDone+0x85c>)
 800b938:	681b      	ldr	r3, [r3, #0]
					if ((DownLinkCounter == downLinkCounter) &&
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d01b      	beq.n	800b976 <OnRadioRxDone+0x69e>
						// Duplicated confirmed downlink. Skip indication.
						// In this case, the MAC layer shall accept the MAC commands
						// which are included in the downlink retransmission.
						// It should not provide the same frame to the application
						// layer again.
						skipIndication = true;
 800b93e:	2301      	movs	r3, #1
 800b940:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b944:	e017      	b.n	800b976 <OnRadioRxDone+0x69e>
					}
				}
				else
				{
					SrvAckRequested = false;
 800b946:	4b7a      	ldr	r3, [pc, #488]	@ (800bb30 <OnRadioRxDone+0x858>)
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
					McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b94c:	4b74      	ldr	r3, [pc, #464]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b94e:	2200      	movs	r2, #0
 800b950:	701a      	strb	r2, [r3, #0]

					if ((DownLinkCounter == downLinkCounter) &&
 800b952:	4b78      	ldr	r3, [pc, #480]	@ (800bb34 <OnRadioRxDone+0x85c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b958:	429a      	cmp	r2, r3
 800b95a:	d10c      	bne.n	800b976 <OnRadioRxDone+0x69e>
						(DownLinkCounter != 0))
 800b95c:	4b75      	ldr	r3, [pc, #468]	@ (800bb34 <OnRadioRxDone+0x85c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
					if ((DownLinkCounter == downLinkCounter) &&
 800b960:	2b00      	cmp	r3, #0
 800b962:	d008      	beq.n	800b976 <OnRadioRxDone+0x69e>
					{
						McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800b964:	4b6e      	ldr	r3, [pc, #440]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b966:	2208      	movs	r2, #8
 800b968:	705a      	strb	r2, [r3, #1]
						McpsIndication.DownLinkCounter = downLinkCounter;
 800b96a:	4a6d      	ldr	r2, [pc, #436]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b96c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b96e:	6153      	str	r3, [r2, #20]
						PrepareRxDoneAbort();
 800b970:	f7ff fc88 	bl	800b284 <PrepareRxDoneAbort>
						return;
 800b974:	e11d      	b.n	800bbb2 <OnRadioRxDone+0x8da>
					}
				}
				DownLinkCounter = downLinkCounter;
 800b976:	4a6f      	ldr	r2, [pc, #444]	@ (800bb34 <OnRadioRxDone+0x85c>)
 800b978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b97a:	6013      	str	r3, [r2, #0]

			// This must be done before parsing the payload and the MAC commands.
			// We need to reset the MacCommandsBufferIndex here, since we need
			// to take retransmissions and repetitions into account. Error cases
			// will be handled in function OnMacStateCheckTimerEvent.
			if (McpsConfirm.McpsRequest == MCPS_CONFIRMED)
 800b97c:	4b69      	ldr	r3, [pc, #420]	@ (800bb24 <OnRadioRxDone+0x84c>)
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d10a      	bne.n	800b99a <OnRadioRxDone+0x6c2>
			{
				if (fCtrl.Bits.Ack == 1)
 800b984:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b988:	f003 0320 	and.w	r3, r3, #32
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d006      	beq.n	800b9a0 <OnRadioRxDone+0x6c8>
				{ // Reset MacCommandsBufferIndex when we have received an ACK.
					MacCommandsBufferIndex = 0;
 800b992:	4b69      	ldr	r3, [pc, #420]	@ (800bb38 <OnRadioRxDone+0x860>)
 800b994:	2200      	movs	r2, #0
 800b996:	701a      	strb	r2, [r3, #0]
 800b998:	e002      	b.n	800b9a0 <OnRadioRxDone+0x6c8>
				}
			}
			else
			{ // Reset the variable if we have received any valid frame.
				MacCommandsBufferIndex = 0;
 800b99a:	4b67      	ldr	r3, [pc, #412]	@ (800bb38 <OnRadioRxDone+0x860>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	701a      	strb	r2, [r3, #0]
			}

			// Process payload and MAC commands
			if (((size - 4) - appPayloadStartIndex) > 0)
 800b9a0:	897b      	ldrh	r3, [r7, #10]
 800b9a2:	1f1a      	subs	r2, r3, #4
 800b9a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	dd72      	ble.n	800ba94 <OnRadioRxDone+0x7bc>
			{
				port = payload[appPayloadStartIndex++];
 800b9ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9b2:	1c5a      	adds	r2, r3, #1
 800b9b4:	f887 2043 	strb.w	r2, [r7, #67]	@ 0x43
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4413      	add	r3, r2
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
				frameLen = (size - 4) - appPayloadStartIndex;
 800b9c4:	897b      	ldrh	r3, [r7, #10]
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	3b04      	subs	r3, #4
 800b9d2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

				McpsIndication.Port = port;
 800b9d6:	4a52      	ldr	r2, [pc, #328]	@ (800bb20 <OnRadioRxDone+0x848>)
 800b9d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800b9dc:	70d3      	strb	r3, [r2, #3]

				if (port == 0)
 800b9de:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d123      	bne.n	800ba2e <OnRadioRxDone+0x756>
				{
					// Only allow frames which do not have fOpts
					if (fCtrl.Bits.FOptsLen == 0)
 800b9e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b9ea:	f003 030f 	and.w	r3, r3, #15
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d118      	bne.n	800ba26 <OnRadioRxDone+0x74e>
					{
						LoRaMacPayloadDecrypt(payload + appPayloadStartIndex,
 800b9f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	18d0      	adds	r0, r2, r3
 800b9fc:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800ba00:	b299      	uxth	r1, r3
 800ba02:	4b4e      	ldr	r3, [pc, #312]	@ (800bb3c <OnRadioRxDone+0x864>)
 800ba04:	9302      	str	r3, [sp, #8]
 800ba06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ba12:	f003 fa8f 	bl	800ef34 <LoRaMacPayloadDecrypt>
											  DOWN_LINK,
											  downLinkCounter,
											  LoRaMacRxPayload);

						// Decode frame payload MAC commands
						ProcessMacCommands(LoRaMacRxPayload, 0, frameLen, snr);
 800ba16:	79fb      	ldrb	r3, [r7, #7]
 800ba18:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4847      	ldr	r0, [pc, #284]	@ (800bb3c <OnRadioRxDone+0x864>)
 800ba20:	f000 ffb2 	bl	800c988 <ProcessMacCommands>
 800ba24:	e044      	b.n	800bab0 <OnRadioRxDone+0x7d8>
					}
					else
					{
						skipIndication = true;
 800ba26:	2301      	movs	r3, #1
 800ba28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ba2c:	e040      	b.n	800bab0 <OnRadioRxDone+0x7d8>
					}
				}
				else
				{
					if (fCtrl.Bits.FOptsLen > 0)
 800ba2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d008      	beq.n	800ba4e <OnRadioRxDone+0x776>
					{
						// Decode Options field MAC commands. Omit the fPort.
						ProcessMacCommands(payload, 8, appPayloadStartIndex - 1, snr);
 800ba3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba40:	3b01      	subs	r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	2108      	movs	r1, #8
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 ff9d 	bl	800c988 <ProcessMacCommands>
					}

					LoRaMacPayloadDecrypt(payload + appPayloadStartIndex,
 800ba4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	18d0      	adds	r0, r2, r3
 800ba56:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800ba5a:	b299      	uxth	r1, r3
 800ba5c:	4b37      	ldr	r3, [pc, #220]	@ (800bb3c <OnRadioRxDone+0x864>)
 800ba5e:	9302      	str	r3, [sp, #8]
 800ba60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba62:	9301      	str	r3, [sp, #4]
 800ba64:	2301      	movs	r3, #1
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba6c:	f003 fa62 	bl	800ef34 <LoRaMacPayloadDecrypt>
										  address,
										  DOWN_LINK,
										  downLinkCounter,
										  LoRaMacRxPayload);

					if (skipIndication == false)
 800ba70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba74:	f083 0301 	eor.w	r3, r3, #1
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d018      	beq.n	800bab0 <OnRadioRxDone+0x7d8>
					{
						McpsIndication.Buffer = LoRaMacRxPayload;
 800ba7e:	4b28      	ldr	r3, [pc, #160]	@ (800bb20 <OnRadioRxDone+0x848>)
 800ba80:	4a2e      	ldr	r2, [pc, #184]	@ (800bb3c <OnRadioRxDone+0x864>)
 800ba82:	609a      	str	r2, [r3, #8]
						McpsIndication.BufferSize = frameLen;
 800ba84:	4a26      	ldr	r2, [pc, #152]	@ (800bb20 <OnRadioRxDone+0x848>)
 800ba86:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800ba8a:	7313      	strb	r3, [r2, #12]
						McpsIndication.RxData = true;
 800ba8c:	4b24      	ldr	r3, [pc, #144]	@ (800bb20 <OnRadioRxDone+0x848>)
 800ba8e:	2201      	movs	r2, #1
 800ba90:	735a      	strb	r2, [r3, #13]
 800ba92:	e00d      	b.n	800bab0 <OnRadioRxDone+0x7d8>
					}
				}
			}
			else
			{
				if (fCtrl.Bits.FOptsLen > 0)
 800ba94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d006      	beq.n	800bab0 <OnRadioRxDone+0x7d8>
				{
					// Decode Options field MAC commands
					ProcessMacCommands(payload, 8, appPayloadStartIndex, snr);
 800baa2:	79fb      	ldrb	r3, [r7, #7]
 800baa4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800baa8:	2108      	movs	r1, #8
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f000 ff6c 	bl	800c988 <ProcessMacCommands>
				}
			}

			if (skipIndication == false)
 800bab0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bab4:	f083 0301 	eor.w	r3, r3, #1
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d01c      	beq.n	800baf8 <OnRadioRxDone+0x820>
			{
				// Check if the frame is an acknowledgement
				if (fCtrl.Bits.Ack == 1)
 800babe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d009      	beq.n	800bae0 <OnRadioRxDone+0x808>
				{
					McpsConfirm.AckReceived = true;
 800bacc:	4b15      	ldr	r3, [pc, #84]	@ (800bb24 <OnRadioRxDone+0x84c>)
 800bace:	2201      	movs	r2, #1
 800bad0:	711a      	strb	r2, [r3, #4]
					McpsIndication.AckReceived = true;
 800bad2:	4b13      	ldr	r3, [pc, #76]	@ (800bb20 <OnRadioRxDone+0x848>)
 800bad4:	2201      	movs	r2, #1
 800bad6:	749a      	strb	r2, [r3, #18]

					// Stop the AckTimeout timer as no more retransmissions
					// are needed.
					TimerStop(&AckTimeoutTimer);
 800bad8:	4819      	ldr	r0, [pc, #100]	@ (800bb40 <OnRadioRxDone+0x868>)
 800bada:	f015 fa25 	bl	8020f28 <util_timer_stop>
 800bade:	e00b      	b.n	800baf8 <OnRadioRxDone+0x820>
				}
				else
				{
					McpsConfirm.AckReceived = false;
 800bae0:	4b10      	ldr	r3, [pc, #64]	@ (800bb24 <OnRadioRxDone+0x84c>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	711a      	strb	r2, [r3, #4]

					if (AckTimeoutRetriesCounter > AckTimeoutRetries)
 800bae6:	4b17      	ldr	r3, [pc, #92]	@ (800bb44 <OnRadioRxDone+0x86c>)
 800bae8:	781a      	ldrb	r2, [r3, #0]
 800baea:	4b17      	ldr	r3, [pc, #92]	@ (800bb48 <OnRadioRxDone+0x870>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d902      	bls.n	800baf8 <OnRadioRxDone+0x820>
					{
						// Stop the AckTimeout timer as no more retransmissions
						// are needed.
						TimerStop(&AckTimeoutTimer);
 800baf2:	4813      	ldr	r0, [pc, #76]	@ (800bb40 <OnRadioRxDone+0x868>)
 800baf4:	f015 fa18 	bl	8020f28 <util_timer_stop>
					}
				}
			}
			// Provide always an indication, skip the callback to the user application,
			// in case of a confirmed downlink retransmission.
			LoRaMacFlags.Bits.McpsInd = 1;
 800baf8:	4a14      	ldr	r2, [pc, #80]	@ (800bb4c <OnRadioRxDone+0x874>)
 800bafa:	7813      	ldrb	r3, [r2, #0]
 800bafc:	f043 0302 	orr.w	r3, r3, #2
 800bb00:	7013      	strb	r3, [r2, #0]
			LoRaMacFlags.Bits.McpsIndSkip = skipIndication;
 800bb02:	4a12      	ldr	r2, [pc, #72]	@ (800bb4c <OnRadioRxDone+0x874>)
 800bb04:	7813      	ldrb	r3, [r2, #0]
 800bb06:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 800bb0a:	f361 0382 	bfi	r3, r1, #2, #1
 800bb0e:	7013      	strb	r3, [r2, #0]

			PrepareRxDoneAbort();
			return;
		}
	}
	break;
 800bb10:	e044      	b.n	800bb9c <OnRadioRxDone+0x8c4>
			McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800bb12:	4b03      	ldr	r3, [pc, #12]	@ (800bb20 <OnRadioRxDone+0x848>)
 800bb14:	220c      	movs	r2, #12
 800bb16:	705a      	strb	r2, [r3, #1]
			PrepareRxDoneAbort();
 800bb18:	f7ff fbb4 	bl	800b284 <PrepareRxDoneAbort>
			return;
 800bb1c:	e049      	b.n	800bbb2 <OnRadioRxDone+0x8da>
 800bb1e:	bf00      	nop
 800bb20:	20006a1c 	.word	0x20006a1c
 800bb24:	20006a38 	.word	0x20006a38
 800bb28:	20006764 	.word	0x20006764
 800bb2c:	2000676c 	.word	0x2000676c
 800bb30:	20006769 	.word	0x20006769
 800bb34:	2000675c 	.word	0x2000675c
 800bb38:	2000676b 	.word	0x2000676b
 800bb3c:	20006658 	.word	0x20006658
 800bb40:	200069e8 	.word	0x200069e8
 800bb44:	2000006f 	.word	0x2000006f
 800bb48:	2000006e 	.word	0x2000006e
 800bb4c:	20006a6c 	.word	0x20006a6c
	case FRAME_TYPE_PROPRIETARY:
	{
		LOG_LIB("LM", "OnRadioRxDone => FRAME_TYPE_PROPRIETARY");

		memcpy1(LoRaMacRxPayload, &payload[pktHeaderLen], size);
 800bb50:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	897a      	ldrh	r2, [r7, #10]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	4816      	ldr	r0, [pc, #88]	@ (800bbb8 <OnRadioRxDone+0x8e0>)
 800bb5e:	f015 f820 	bl	8020ba2 <memcpy1>

		McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800bb62:	4b16      	ldr	r3, [pc, #88]	@ (800bbbc <OnRadioRxDone+0x8e4>)
 800bb64:	2203      	movs	r2, #3
 800bb66:	701a      	strb	r2, [r3, #0]
		McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bb68:	4b14      	ldr	r3, [pc, #80]	@ (800bbbc <OnRadioRxDone+0x8e4>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	705a      	strb	r2, [r3, #1]
		McpsIndication.Buffer = LoRaMacRxPayload;
 800bb6e:	4b13      	ldr	r3, [pc, #76]	@ (800bbbc <OnRadioRxDone+0x8e4>)
 800bb70:	4a11      	ldr	r2, [pc, #68]	@ (800bbb8 <OnRadioRxDone+0x8e0>)
 800bb72:	609a      	str	r2, [r3, #8]
		McpsIndication.BufferSize = size - pktHeaderLen;
 800bb74:	897b      	ldrh	r3, [r7, #10]
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	4b0e      	ldr	r3, [pc, #56]	@ (800bbbc <OnRadioRxDone+0x8e4>)
 800bb82:	731a      	strb	r2, [r3, #12]

		LoRaMacFlags.Bits.McpsInd = 1;
 800bb84:	4a0e      	ldr	r2, [pc, #56]	@ (800bbc0 <OnRadioRxDone+0x8e8>)
 800bb86:	7813      	ldrb	r3, [r2, #0]
 800bb88:	f043 0302 	orr.w	r3, r3, #2
 800bb8c:	7013      	strb	r3, [r2, #0]
		break;
 800bb8e:	e005      	b.n	800bb9c <OnRadioRxDone+0x8c4>
	}
	default:
		LOG_LIB("LM", "OnRadioRxDone => UNKNOWN FRAME TYPE");

		McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb90:	4b0a      	ldr	r3, [pc, #40]	@ (800bbbc <OnRadioRxDone+0x8e4>)
 800bb92:	2201      	movs	r2, #1
 800bb94:	705a      	strb	r2, [r3, #1]
		PrepareRxDoneAbort();
 800bb96:	f7ff fb75 	bl	800b284 <PrepareRxDoneAbort>
		break;
 800bb9a:	bf00      	nop
	}
	LoRaMacFlags.Bits.MacDone = 1;
 800bb9c:	4a08      	ldr	r2, [pc, #32]	@ (800bbc0 <OnRadioRxDone+0x8e8>)
 800bb9e:	7813      	ldrb	r3, [r2, #0]
 800bba0:	f043 0310 	orr.w	r3, r3, #16
 800bba4:	7013      	strb	r3, [r2, #0]

	// Trig OnMacCheckTimerEvent call as soon as possible
	// TimerSetValue(&MacStateCheckTimer, 100);
	// TimerStart(&MacStateCheckTimer);
	TimerStop(&MacStateCheckTimer);
 800bba6:	4807      	ldr	r0, [pc, #28]	@ (800bbc4 <OnRadioRxDone+0x8ec>)
 800bba8:	f015 f9be 	bl	8020f28 <util_timer_stop>
	OnMacStateCheckTimerEvent(NULL);
 800bbac:	2000      	movs	r0, #0
 800bbae:	f000 f8eb 	bl	800bd88 <OnMacStateCheckTimerEvent>
}
 800bbb2:	3760      	adds	r7, #96	@ 0x60
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	20006658 	.word	0x20006658
 800bbbc:	20006a1c 	.word	0x20006a1c
 800bbc0:	20006a6c 	.word	0x20006a6c
 800bbc4:	20006910 	.word	0x20006910

0800bbc8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	af00      	add	r7, sp, #0
	LOG_LIB("LM", "OnRadioTxTimeout");

	if (LoRaMacDeviceClass != CLASS_C)
 800bbcc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbfc <OnRadioTxTimeout+0x34>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d003      	beq.n	800bbdc <OnRadioTxTimeout+0x14>
	{
		Radio.Sleep();
 800bbd4:	4b0a      	ldr	r3, [pc, #40]	@ (800bc00 <OnRadioTxTimeout+0x38>)
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd8:	4798      	blx	r3
 800bbda:	e002      	b.n	800bbe2 <OnRadioTxTimeout+0x1a>
	}
	else
	{
		OnRxWindow2TimerEvent(NULL);
 800bbdc:	2000      	movs	r0, #0
 800bbde:	f000 fbfb 	bl	800c3d8 <OnRxWindow2TimerEvent>
	}

	McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800bbe2:	4b08      	ldr	r3, [pc, #32]	@ (800bc04 <OnRadioTxTimeout+0x3c>)
 800bbe4:	2202      	movs	r2, #2
 800bbe6:	705a      	strb	r2, [r3, #1]
	MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800bbe8:	4b07      	ldr	r3, [pc, #28]	@ (800bc08 <OnRadioTxTimeout+0x40>)
 800bbea:	2202      	movs	r2, #2
 800bbec:	705a      	strb	r2, [r3, #1]
	LoRaMacFlags.Bits.MacDone = 1;
 800bbee:	4a07      	ldr	r2, [pc, #28]	@ (800bc0c <OnRadioTxTimeout+0x44>)
 800bbf0:	7813      	ldrb	r3, [r2, #0]
 800bbf2:	f043 0310 	orr.w	r3, r3, #16
 800bbf6:	7013      	strb	r3, [r2, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20006550 	.word	0x20006550
 800bc00:	08025450 	.word	0x08025450
 800bc04:	20006a38 	.word	0x20006a38
 800bc08:	20006a50 	.word	0x20006a50
 800bc0c:	20006a6c 	.word	0x20006a6c

0800bc10 <OnRadioRxError>:

static void OnRadioRxError(void)
{
 800bc10:	b5b0      	push	{r4, r5, r7, lr}
 800bc12:	af00      	add	r7, sp, #0
	LOG_LIB("LM", "OnRadioRxError");

	if (LoRaMacDeviceClass != CLASS_C)
 800bc14:	4b20      	ldr	r3, [pc, #128]	@ (800bc98 <OnRadioRxError+0x88>)
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d003      	beq.n	800bc24 <OnRadioRxError+0x14>
	{
		Radio.Sleep();
 800bc1c:	4b1f      	ldr	r3, [pc, #124]	@ (800bc9c <OnRadioRxError+0x8c>)
 800bc1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc20:	4798      	blx	r3
 800bc22:	e002      	b.n	800bc2a <OnRadioRxError+0x1a>
	}
	else
	{
		OnRxWindow2TimerEvent(NULL);
 800bc24:	2000      	movs	r0, #0
 800bc26:	f000 fbd7 	bl	800c3d8 <OnRxWindow2TimerEvent>
	}

	if (RxSlot == 0)
 800bc2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bca0 <OnRadioRxError+0x90>)
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d120      	bne.n	800bc74 <OnRadioRxError+0x64>
	{
		if (NodeAckRequested == true)
 800bc32:	4b1c      	ldr	r3, [pc, #112]	@ (800bca4 <OnRadioRxError+0x94>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d002      	beq.n	800bc40 <OnRadioRxError+0x30>
		{
			McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 800bc3a:	4b1b      	ldr	r3, [pc, #108]	@ (800bca8 <OnRadioRxError+0x98>)
 800bc3c:	2205      	movs	r2, #5
 800bc3e:	705a      	strb	r2, [r3, #1]
		}
		MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_ERROR;
 800bc40:	4b1a      	ldr	r3, [pc, #104]	@ (800bcac <OnRadioRxError+0x9c>)
 800bc42:	2205      	movs	r2, #5
 800bc44:	705a      	strb	r2, [r3, #1]

		if (TimerGetElapsedTime(AggregatedLastTxDoneTime) >= RxWindow2Delay)
 800bc46:	4b1a      	ldr	r3, [pc, #104]	@ (800bcb0 <OnRadioRxError+0xa0>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	4610      	mov	r0, r2
 800bc4e:	4619      	mov	r1, r3
 800bc50:	f015 fa04 	bl	802105c <util_timer_get_elapsedtime>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4916      	ldr	r1, [pc, #88]	@ (800bcb4 <OnRadioRxError+0xa4>)
 800bc5a:	6809      	ldr	r1, [r1, #0]
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	4605      	mov	r5, r0
 800bc62:	42a2      	cmp	r2, r4
 800bc64:	41ab      	sbcs	r3, r5
 800bc66:	d314      	bcc.n	800bc92 <OnRadioRxError+0x82>
		{
			LoRaMacFlags.Bits.MacDone = 1;
 800bc68:	4a13      	ldr	r2, [pc, #76]	@ (800bcb8 <OnRadioRxError+0xa8>)
 800bc6a:	7813      	ldrb	r3, [r2, #0]
 800bc6c:	f043 0310 	orr.w	r3, r3, #16
 800bc70:	7013      	strb	r3, [r2, #0]
			McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
		}
		MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
		LoRaMacFlags.Bits.MacDone = 1;
	}
}
 800bc72:	e00e      	b.n	800bc92 <OnRadioRxError+0x82>
		if (NodeAckRequested == true)
 800bc74:	4b0b      	ldr	r3, [pc, #44]	@ (800bca4 <OnRadioRxError+0x94>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <OnRadioRxError+0x72>
			McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 800bc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bca8 <OnRadioRxError+0x98>)
 800bc7e:	2206      	movs	r2, #6
 800bc80:	705a      	strb	r2, [r3, #1]
		MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_ERROR;
 800bc82:	4b0a      	ldr	r3, [pc, #40]	@ (800bcac <OnRadioRxError+0x9c>)
 800bc84:	2206      	movs	r2, #6
 800bc86:	705a      	strb	r2, [r3, #1]
		LoRaMacFlags.Bits.MacDone = 1;
 800bc88:	4a0b      	ldr	r2, [pc, #44]	@ (800bcb8 <OnRadioRxError+0xa8>)
 800bc8a:	7813      	ldrb	r3, [r2, #0]
 800bc8c:	f043 0310 	orr.w	r3, r3, #16
 800bc90:	7013      	strb	r3, [r2, #0]
}
 800bc92:	bf00      	nop
 800bc94:	bdb0      	pop	{r4, r5, r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20006550 	.word	0x20006550
 800bc9c:	08025450 	.word	0x08025450
 800bca0:	20006a68 	.word	0x20006a68
 800bca4:	20006768 	.word	0x20006768
 800bca8:	20006a38 	.word	0x20006a38
 800bcac:	20006a50 	.word	0x20006a50
 800bcb0:	200068e8 	.word	0x200068e8
 800bcb4:	200069bc 	.word	0x200069bc
 800bcb8:	20006a6c 	.word	0x20006a6c

0800bcbc <OnRadioRxTimeout>:

static void OnRadioRxTimeout(void)
{
 800bcbc:	b5b0      	push	{r4, r5, r7, lr}
 800bcbe:	af00      	add	r7, sp, #0
	LOG_LIB("LM", "OnRadioRxTimeout");

	if (LoRaMacDeviceClass != CLASS_C)
 800bcc0:	4b27      	ldr	r3, [pc, #156]	@ (800bd60 <OnRadioRxTimeout+0xa4>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d003      	beq.n	800bcd0 <OnRadioRxTimeout+0x14>
	{
		Radio.Sleep();
 800bcc8:	4b26      	ldr	r3, [pc, #152]	@ (800bd64 <OnRadioRxTimeout+0xa8>)
 800bcca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bccc:	4798      	blx	r3
 800bcce:	e002      	b.n	800bcd6 <OnRadioRxTimeout+0x1a>
	}
	else
	{
		OnRxWindow2TimerEvent(NULL);
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f000 fb81 	bl	800c3d8 <OnRxWindow2TimerEvent>
	}

	if (RxSlot == 0)
 800bcd6:	4b24      	ldr	r3, [pc, #144]	@ (800bd68 <OnRadioRxTimeout+0xac>)
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d120      	bne.n	800bd20 <OnRadioRxTimeout+0x64>
	{
		if (NodeAckRequested == true)
 800bcde:	4b23      	ldr	r3, [pc, #140]	@ (800bd6c <OnRadioRxTimeout+0xb0>)
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <OnRadioRxTimeout+0x30>
		{
			McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 800bce6:	4b22      	ldr	r3, [pc, #136]	@ (800bd70 <OnRadioRxTimeout+0xb4>)
 800bce8:	2203      	movs	r2, #3
 800bcea:	705a      	strb	r2, [r3, #1]
		}
		MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT;
 800bcec:	4b21      	ldr	r3, [pc, #132]	@ (800bd74 <OnRadioRxTimeout+0xb8>)
 800bcee:	2203      	movs	r2, #3
 800bcf0:	705a      	strb	r2, [r3, #1]

		if (TimerGetElapsedTime(AggregatedLastTxDoneTime) >= RxWindow2Delay)
 800bcf2:	4b21      	ldr	r3, [pc, #132]	@ (800bd78 <OnRadioRxTimeout+0xbc>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	f015 f9ae 	bl	802105c <util_timer_get_elapsedtime>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	491d      	ldr	r1, [pc, #116]	@ (800bd7c <OnRadioRxTimeout+0xc0>)
 800bd06:	6809      	ldr	r1, [r1, #0]
 800bd08:	2000      	movs	r0, #0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	42a2      	cmp	r2, r4
 800bd10:	41ab      	sbcs	r3, r5
 800bd12:	d318      	bcc.n	800bd46 <OnRadioRxTimeout+0x8a>
		{
			LoRaMacFlags.Bits.MacDone = 1;
 800bd14:	4a1a      	ldr	r2, [pc, #104]	@ (800bd80 <OnRadioRxTimeout+0xc4>)
 800bd16:	7813      	ldrb	r3, [r2, #0]
 800bd18:	f043 0310 	orr.w	r3, r3, #16
 800bd1c:	7013      	strb	r3, [r2, #0]
 800bd1e:	e012      	b.n	800bd46 <OnRadioRxTimeout+0x8a>
		}
	}
	else
	{
		if (NodeAckRequested == true)
 800bd20:	4b12      	ldr	r3, [pc, #72]	@ (800bd6c <OnRadioRxTimeout+0xb0>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <OnRadioRxTimeout+0x72>
		{
			McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 800bd28:	4b11      	ldr	r3, [pc, #68]	@ (800bd70 <OnRadioRxTimeout+0xb4>)
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	705a      	strb	r2, [r3, #1]
		}
		MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
 800bd2e:	4b11      	ldr	r3, [pc, #68]	@ (800bd74 <OnRadioRxTimeout+0xb8>)
 800bd30:	2204      	movs	r2, #4
 800bd32:	705a      	strb	r2, [r3, #1]

		if (LoRaMacDeviceClass != CLASS_C)
 800bd34:	4b0a      	ldr	r3, [pc, #40]	@ (800bd60 <OnRadioRxTimeout+0xa4>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d004      	beq.n	800bd46 <OnRadioRxTimeout+0x8a>
		{
			LoRaMacFlags.Bits.MacDone = 1;
 800bd3c:	4a10      	ldr	r2, [pc, #64]	@ (800bd80 <OnRadioRxTimeout+0xc4>)
 800bd3e:	7813      	ldrb	r3, [r2, #0]
 800bd40:	f043 0310 	orr.w	r3, r3, #16
 800bd44:	7013      	strb	r3, [r2, #0]
		}
	}
	TimerSetValue(&MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT);
 800bd46:	f04f 02fa 	mov.w	r2, #250	@ 0xfa
 800bd4a:	f04f 0300 	mov.w	r3, #0
 800bd4e:	480d      	ldr	r0, [pc, #52]	@ (800bd84 <OnRadioRxTimeout+0xc8>)
 800bd50:	f015 f952 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&MacStateCheckTimer);
 800bd54:	480b      	ldr	r0, [pc, #44]	@ (800bd84 <OnRadioRxTimeout+0xc8>)
 800bd56:	f015 f86b 	bl	8020e30 <util_timer_start>
}
 800bd5a:	bf00      	nop
 800bd5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20006550 	.word	0x20006550
 800bd64:	08025450 	.word	0x08025450
 800bd68:	20006a68 	.word	0x20006a68
 800bd6c:	20006768 	.word	0x20006768
 800bd70:	20006a38 	.word	0x20006a38
 800bd74:	20006a50 	.word	0x20006a50
 800bd78:	200068e8 	.word	0x200068e8
 800bd7c:	200069bc 	.word	0x200069bc
 800bd80:	20006a6c 	.word	0x20006a6c
 800bd84:	20006910 	.word	0x20006910

0800bd88 <OnMacStateCheckTimerEvent>:

static void OnMacStateCheckTimerEvent(void *arg)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b086      	sub	sp, #24
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	bool txTimeout = false;
 800bd90:	2300      	movs	r3, #0
 800bd92:	75fb      	strb	r3, [r7, #23]

	TimerStop(&MacStateCheckTimer);
 800bd94:	486c      	ldr	r0, [pc, #432]	@ (800bf48 <OnMacStateCheckTimerEvent+0x1c0>)
 800bd96:	f015 f8c7 	bl	8020f28 <util_timer_stop>

	// LOG_LIB("LM", "OnMacStateCheckTimerEvent");
	if (LoRaMacFlags.Bits.MacDone == 1)
 800bd9a:	4b6c      	ldr	r3, [pc, #432]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	f003 0310 	and.w	r3, r3, #16
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 81bf 	beq.w	800c128 <OnMacStateCheckTimerEvent+0x3a0>
	{
		if ((LoRaMacState & LORAMAC_RX_ABORT) == LORAMAC_RX_ABORT)
 800bdaa:	4b69      	ldr	r3, [pc, #420]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00b      	beq.n	800bdce <OnMacStateCheckTimerEvent+0x46>
		{
			LoRaMacState &= ~LORAMAC_RX_ABORT;
 800bdb6:	4b66      	ldr	r3, [pc, #408]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdbe:	4a64      	ldr	r2, [pc, #400]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bdc0:	6013      	str	r3, [r2, #0]
			LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800bdc2:	4b63      	ldr	r3, [pc, #396]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f023 0301 	bic.w	r3, r3, #1
 800bdca:	4a61      	ldr	r2, [pc, #388]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bdcc:	6013      	str	r3, [r2, #0]
		}

		if ((LoRaMacFlags.Bits.MlmeReq == 1) || ((LoRaMacFlags.Bits.McpsReq == 1)))
 800bdce:	4b5f      	ldr	r3, [pc, #380]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	f003 0308 	and.w	r3, r3, #8
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d106      	bne.n	800bdea <OnMacStateCheckTimerEvent+0x62>
 800bddc:	4b5b      	ldr	r3, [pc, #364]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	f003 0301 	and.w	r3, r3, #1
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d020      	beq.n	800be2c <OnMacStateCheckTimerEvent+0xa4>
		{
			if ((McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT) ||
 800bdea:	4b5a      	ldr	r3, [pc, #360]	@ (800bf54 <OnMacStateCheckTimerEvent+0x1cc>)
 800bdec:	785b      	ldrb	r3, [r3, #1]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d003      	beq.n	800bdfa <OnMacStateCheckTimerEvent+0x72>
				(MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT))
 800bdf2:	4b59      	ldr	r3, [pc, #356]	@ (800bf58 <OnMacStateCheckTimerEvent+0x1d0>)
 800bdf4:	785b      	ldrb	r3, [r3, #1]
			if ((McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT) ||
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d118      	bne.n	800be2c <OnMacStateCheckTimerEvent+0xa4>
			{
				// Stop transmit cycle due to tx timeout.
				LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800bdfa:	4b55      	ldr	r3, [pc, #340]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f023 0301 	bic.w	r3, r3, #1
 800be02:	4a53      	ldr	r2, [pc, #332]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800be04:	6013      	str	r3, [r2, #0]
				MacCommandsBufferIndex = 0;
 800be06:	4b55      	ldr	r3, [pc, #340]	@ (800bf5c <OnMacStateCheckTimerEvent+0x1d4>)
 800be08:	2200      	movs	r2, #0
 800be0a:	701a      	strb	r2, [r3, #0]
				McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 800be0c:	4b54      	ldr	r3, [pc, #336]	@ (800bf60 <OnMacStateCheckTimerEvent+0x1d8>)
 800be0e:	781a      	ldrb	r2, [r3, #0]
 800be10:	4b50      	ldr	r3, [pc, #320]	@ (800bf54 <OnMacStateCheckTimerEvent+0x1cc>)
 800be12:	715a      	strb	r2, [r3, #5]
				McpsConfirm.AckReceived = false;
 800be14:	4b4f      	ldr	r3, [pc, #316]	@ (800bf54 <OnMacStateCheckTimerEvent+0x1cc>)
 800be16:	2200      	movs	r2, #0
 800be18:	711a      	strb	r2, [r3, #4]
				McpsConfirm.TxTimeOnAir = 0;
 800be1a:	494e      	ldr	r1, [pc, #312]	@ (800bf54 <OnMacStateCheckTimerEvent+0x1cc>)
 800be1c:	f04f 0200 	mov.w	r2, #0
 800be20:	f04f 0300 	mov.w	r3, #0
 800be24:	e9c1 2302 	strd	r2, r3, [r1, #8]
				txTimeout = true;
 800be28:	2301      	movs	r3, #1
 800be2a:	75fb      	strb	r3, [r7, #23]
			}
		}

		if ((NodeAckRequested == false) && (txTimeout == false))
 800be2c:	4b4d      	ldr	r3, [pc, #308]	@ (800bf64 <OnMacStateCheckTimerEvent+0x1dc>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	f083 0301 	eor.w	r3, r3, #1
 800be34:	b2db      	uxtb	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	f000 80ae 	beq.w	800bf98 <OnMacStateCheckTimerEvent+0x210>
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	f083 0301 	eor.w	r3, r3, #1
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 80a7 	beq.w	800bf98 <OnMacStateCheckTimerEvent+0x210>
		{
			if ((LoRaMacFlags.Bits.MlmeReq == 1) || ((LoRaMacFlags.Bits.McpsReq == 1)))
 800be4a:	4b40      	ldr	r3, [pc, #256]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	f003 0308 	and.w	r3, r3, #8
 800be52:	b2db      	uxtb	r3, r3
 800be54:	2b00      	cmp	r3, #0
 800be56:	d107      	bne.n	800be68 <OnMacStateCheckTimerEvent+0xe0>
 800be58:	4b3c      	ldr	r3, [pc, #240]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b00      	cmp	r3, #0
 800be64:	f000 8098 	beq.w	800bf98 <OnMacStateCheckTimerEvent+0x210>
			{
				if ((LoRaMacFlags.Bits.MlmeReq == 1) && (MlmeConfirm.MlmeRequest == MLME_JOIN))
 800be68:	4b38      	ldr	r3, [pc, #224]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 0308 	and.w	r3, r3, #8
 800be70:	b2db      	uxtb	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	d034      	beq.n	800bee0 <OnMacStateCheckTimerEvent+0x158>
 800be76:	4b38      	ldr	r3, [pc, #224]	@ (800bf58 <OnMacStateCheckTimerEvent+0x1d0>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d130      	bne.n	800bee0 <OnMacStateCheckTimerEvent+0x158>
				{ // Procedure for the join request
					MlmeConfirm.NbRetries = JoinRequestTrials;
 800be7e:	4b3a      	ldr	r3, [pc, #232]	@ (800bf68 <OnMacStateCheckTimerEvent+0x1e0>)
 800be80:	781a      	ldrb	r2, [r3, #0]
 800be82:	4b35      	ldr	r3, [pc, #212]	@ (800bf58 <OnMacStateCheckTimerEvent+0x1d0>)
 800be84:	749a      	strb	r2, [r3, #18]

					if (MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800be86:	4b34      	ldr	r3, [pc, #208]	@ (800bf58 <OnMacStateCheckTimerEvent+0x1d0>)
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10c      	bne.n	800bea8 <OnMacStateCheckTimerEvent+0x120>
					{ // Node joined successfully
						UpLinkCounter = 0;
 800be8e:	4b37      	ldr	r3, [pc, #220]	@ (800bf6c <OnMacStateCheckTimerEvent+0x1e4>)
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
						ChannelsNbRepCounter = 0;
 800be94:	4b36      	ldr	r3, [pc, #216]	@ (800bf70 <OnMacStateCheckTimerEvent+0x1e8>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
						LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800be9a:	4b2d      	ldr	r3, [pc, #180]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f023 0301 	bic.w	r3, r3, #1
 800bea2:	4a2b      	ldr	r2, [pc, #172]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bea4:	6013      	str	r3, [r2, #0]
					if (MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800bea6:	e077      	b.n	800bf98 <OnMacStateCheckTimerEvent+0x210>
					}
					else
					{
						LOG_LIB("LM", "Join network failed %d time(s)\n", JoinRequestTrials);

						IsLoRaMacNetworkJoined = JOIN_FAILED;
 800bea8:	4b32      	ldr	r3, [pc, #200]	@ (800bf74 <OnMacStateCheckTimerEvent+0x1ec>)
 800beaa:	2203      	movs	r2, #3
 800beac:	701a      	strb	r2, [r3, #0]
						if (JoinRequestTrials >= MaxJoinRequestTrials)
 800beae:	4b2e      	ldr	r3, [pc, #184]	@ (800bf68 <OnMacStateCheckTimerEvent+0x1e0>)
 800beb0:	781a      	ldrb	r2, [r3, #0]
 800beb2:	4b31      	ldr	r3, [pc, #196]	@ (800bf78 <OnMacStateCheckTimerEvent+0x1f0>)
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d306      	bcc.n	800bec8 <OnMacStateCheckTimerEvent+0x140>
						{
							LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800beba:	4b25      	ldr	r3, [pc, #148]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f023 0301 	bic.w	r3, r3, #1
 800bec2:	4a23      	ldr	r2, [pc, #140]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bec4:	6013      	str	r3, [r2, #0]
					if (MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800bec6:	e067      	b.n	800bf98 <OnMacStateCheckTimerEvent+0x210>
						}
						else
						{
							IsLoRaMacNetworkJoined = JOIN_ONGOING;
 800bec8:	4b2a      	ldr	r3, [pc, #168]	@ (800bf74 <OnMacStateCheckTimerEvent+0x1ec>)
 800beca:	2202      	movs	r2, #2
 800becc:	701a      	strb	r2, [r3, #0]
							LoRaMacFlags.Bits.MacDone = 0;
 800bece:	4a1f      	ldr	r2, [pc, #124]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800bed0:	7813      	ldrb	r3, [r2, #0]
 800bed2:	f36f 1304 	bfc	r3, #4, #1
 800bed6:	7013      	strb	r3, [r2, #0]
							// Sends the same frame again
							OnTxDelayedTimerEvent(NULL);
 800bed8:	2000      	movs	r0, #0
 800beda:	f000 f9cd 	bl	800c278 <OnTxDelayedTimerEvent>
					if (MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800bede:	e05b      	b.n	800bf98 <OnMacStateCheckTimerEvent+0x210>
						}
					}
				}
				else
				{ // Procedure for all other frames
					if ((ChannelsNbRepCounter >= LoRaMacParams.ChannelsNbRep) || (LoRaMacFlags.Bits.McpsInd == 1))
 800bee0:	4b26      	ldr	r3, [pc, #152]	@ (800bf7c <OnMacStateCheckTimerEvent+0x1f4>)
 800bee2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800bee6:	4b22      	ldr	r3, [pc, #136]	@ (800bf70 <OnMacStateCheckTimerEvent+0x1e8>)
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	429a      	cmp	r2, r3
 800beec:	d906      	bls.n	800befc <OnMacStateCheckTimerEvent+0x174>
 800beee:	4b17      	ldr	r3, [pc, #92]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d045      	beq.n	800bf88 <OnMacStateCheckTimerEvent+0x200>
					{
						if (LoRaMacFlags.Bits.McpsInd == 0)
 800befc:	4b13      	ldr	r3, [pc, #76]	@ (800bf4c <OnMacStateCheckTimerEvent+0x1c4>)
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	f003 0302 	and.w	r3, r3, #2
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d107      	bne.n	800bf1a <OnMacStateCheckTimerEvent+0x192>
						{ // Maximum repetitions without downlink. Reset MacCommandsBufferIndex. Increase ADR Ack counter.
							// Only process the case when the MAC did not receive a downlink.
							MacCommandsBufferIndex = 0;
 800bf0a:	4b14      	ldr	r3, [pc, #80]	@ (800bf5c <OnMacStateCheckTimerEvent+0x1d4>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]
							AdrAckCounter++;
 800bf10:	4b1b      	ldr	r3, [pc, #108]	@ (800bf80 <OnMacStateCheckTimerEvent+0x1f8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3301      	adds	r3, #1
 800bf16:	4a1a      	ldr	r2, [pc, #104]	@ (800bf80 <OnMacStateCheckTimerEvent+0x1f8>)
 800bf18:	6013      	str	r3, [r2, #0]
						}

						ChannelsNbRepCounter = 0;
 800bf1a:	4b15      	ldr	r3, [pc, #84]	@ (800bf70 <OnMacStateCheckTimerEvent+0x1e8>)
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	701a      	strb	r2, [r3, #0]

						if (IsUpLinkCounterFixed == false)
 800bf20:	4b18      	ldr	r3, [pc, #96]	@ (800bf84 <OnMacStateCheckTimerEvent+0x1fc>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	f083 0301 	eor.w	r3, r3, #1
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d004      	beq.n	800bf38 <OnMacStateCheckTimerEvent+0x1b0>
						{
							UpLinkCounter++;
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf6c <OnMacStateCheckTimerEvent+0x1e4>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3301      	adds	r3, #1
 800bf34:	4a0d      	ldr	r2, [pc, #52]	@ (800bf6c <OnMacStateCheckTimerEvent+0x1e4>)
 800bf36:	6013      	str	r3, [r2, #0]
						}

						LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800bf38:	4b05      	ldr	r3, [pc, #20]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f023 0301 	bic.w	r3, r3, #1
 800bf40:	4a03      	ldr	r2, [pc, #12]	@ (800bf50 <OnMacStateCheckTimerEvent+0x1c8>)
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	e028      	b.n	800bf98 <OnMacStateCheckTimerEvent+0x210>
 800bf46:	bf00      	nop
 800bf48:	20006910 	.word	0x20006910
 800bf4c:	20006a6c 	.word	0x20006a6c
 800bf50:	20006908 	.word	0x20006908
 800bf54:	20006a38 	.word	0x20006a38
 800bf58:	20006a50 	.word	0x20006a50
 800bf5c:	2000676b 	.word	0x2000676b
 800bf60:	2000006f 	.word	0x2000006f
 800bf64:	20006768 	.word	0x20006768
 800bf68:	20006a18 	.word	0x20006a18
 800bf6c:	20006758 	.word	0x20006758
 800bf70:	200068e0 	.word	0x200068e0
 800bf74:	20006761 	.word	0x20006761
 800bf78:	20006a19 	.word	0x20006a19
 800bf7c:	20006870 	.word	0x20006870
 800bf80:	20006764 	.word	0x20006764
 800bf84:	20006760 	.word	0x20006760
					}
					else
					{
						LoRaMacFlags.Bits.MacDone = 0;
 800bf88:	4a8c      	ldr	r2, [pc, #560]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800bf8a:	7813      	ldrb	r3, [r2, #0]
 800bf8c:	f36f 1304 	bfc	r3, #4, #1
 800bf90:	7013      	strb	r3, [r2, #0]
						// Sends the same frame again
						OnTxDelayedTimerEvent(NULL);
 800bf92:	2000      	movs	r0, #0
 800bf94:	f000 f970 	bl	800c278 <OnTxDelayedTimerEvent>
					}
				}
			}
		}

		if (LoRaMacFlags.Bits.McpsInd == 1)
 800bf98:	4b88      	ldr	r3, [pc, #544]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d025      	beq.n	800bff2 <OnMacStateCheckTimerEvent+0x26a>
		{ // Procedure if we received a frame
			if ((McpsConfirm.AckReceived == true) || (AckTimeoutRetriesCounter > AckTimeoutRetries))
 800bfa6:	4b86      	ldr	r3, [pc, #536]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800bfa8:	791b      	ldrb	r3, [r3, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d105      	bne.n	800bfba <OnMacStateCheckTimerEvent+0x232>
 800bfae:	4b85      	ldr	r3, [pc, #532]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800bfb0:	781a      	ldrb	r2, [r3, #0]
 800bfb2:	4b85      	ldr	r3, [pc, #532]	@ (800c1c8 <OnMacStateCheckTimerEvent+0x440>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d91b      	bls.n	800bff2 <OnMacStateCheckTimerEvent+0x26a>
			{
				AckTimeoutRetry = false;
 800bfba:	4b84      	ldr	r3, [pc, #528]	@ (800c1cc <OnMacStateCheckTimerEvent+0x444>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	701a      	strb	r2, [r3, #0]
				NodeAckRequested = false;
 800bfc0:	4b83      	ldr	r3, [pc, #524]	@ (800c1d0 <OnMacStateCheckTimerEvent+0x448>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	701a      	strb	r2, [r3, #0]
				if (IsUpLinkCounterFixed == false)
 800bfc6:	4b83      	ldr	r3, [pc, #524]	@ (800c1d4 <OnMacStateCheckTimerEvent+0x44c>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	f083 0301 	eor.w	r3, r3, #1
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <OnMacStateCheckTimerEvent+0x256>
				{
					UpLinkCounter++;
 800bfd4:	4b80      	ldr	r3, [pc, #512]	@ (800c1d8 <OnMacStateCheckTimerEvent+0x450>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	4a7f      	ldr	r2, [pc, #508]	@ (800c1d8 <OnMacStateCheckTimerEvent+0x450>)
 800bfdc:	6013      	str	r3, [r2, #0]
				}
				McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 800bfde:	4b79      	ldr	r3, [pc, #484]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800bfe0:	781a      	ldrb	r2, [r3, #0]
 800bfe2:	4b77      	ldr	r3, [pc, #476]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800bfe4:	715a      	strb	r2, [r3, #5]

				LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800bfe6:	4b7d      	ldr	r3, [pc, #500]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f023 0301 	bic.w	r3, r3, #1
 800bfee:	4a7b      	ldr	r2, [pc, #492]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800bff0:	6013      	str	r3, [r2, #0]
			}
		}

		if ((AckTimeoutRetry == true) && ((LoRaMacState & LORAMAC_TX_DELAYED) == 0))
 800bff2:	4b76      	ldr	r3, [pc, #472]	@ (800c1cc <OnMacStateCheckTimerEvent+0x444>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 8096 	beq.w	800c128 <OnMacStateCheckTimerEvent+0x3a0>
 800bffc:	4b77      	ldr	r3, [pc, #476]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0310 	and.w	r3, r3, #16
 800c004:	2b00      	cmp	r3, #0
 800c006:	f040 808f 	bne.w	800c128 <OnMacStateCheckTimerEvent+0x3a0>
		{ // Retransmissions procedure for confirmed uplinks
			AckTimeoutRetry = false;
 800c00a:	4b70      	ldr	r3, [pc, #448]	@ (800c1cc <OnMacStateCheckTimerEvent+0x444>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	701a      	strb	r2, [r3, #0]
			if ((AckTimeoutRetriesCounter < AckTimeoutRetries) && (AckTimeoutRetriesCounter <= max_ack_retries))
 800c010:	4b6c      	ldr	r3, [pc, #432]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800c012:	781a      	ldrb	r2, [r3, #0]
 800c014:	4b6c      	ldr	r3, [pc, #432]	@ (800c1c8 <OnMacStateCheckTimerEvent+0x440>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d25e      	bcs.n	800c0da <OnMacStateCheckTimerEvent+0x352>
 800c01c:	4b69      	ldr	r3, [pc, #420]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800c01e:	781a      	ldrb	r2, [r3, #0]
 800c020:	4b6f      	ldr	r3, [pc, #444]	@ (800c1e0 <OnMacStateCheckTimerEvent+0x458>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d858      	bhi.n	800c0da <OnMacStateCheckTimerEvent+0x352>
			{
				AckTimeoutRetriesCounter++;
 800c028:	4b66      	ldr	r3, [pc, #408]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	3301      	adds	r3, #1
 800c02e:	b2da      	uxtb	r2, r3
 800c030:	4b64      	ldr	r3, [pc, #400]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800c032:	701a      	strb	r2, [r3, #0]

				if ((AckTimeoutRetriesCounter % 2) == 1)
 800c034:	4b63      	ldr	r3, [pc, #396]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d017      	beq.n	800c072 <OnMacStateCheckTimerEvent+0x2ea>
				{
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c042:	2320      	movs	r3, #32
 800c044:	743b      	strb	r3, [r7, #16]
					getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800c046:	4b67      	ldr	r3, [pc, #412]	@ (800c1e4 <OnMacStateCheckTimerEvent+0x45c>)
 800c048:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c04c:	74bb      	strb	r3, [r7, #18]
					getPhy.Datarate = LoRaMacParams.ChannelsDatarate;
 800c04e:	4b65      	ldr	r3, [pc, #404]	@ (800c1e4 <OnMacStateCheckTimerEvent+0x45c>)
 800c050:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c054:	747b      	strb	r3, [r7, #17]
					phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800c056:	4b64      	ldr	r3, [pc, #400]	@ (800c1e8 <OnMacStateCheckTimerEvent+0x460>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	f107 0210 	add.w	r2, r7, #16
 800c05e:	4611      	mov	r1, r2
 800c060:	4618      	mov	r0, r3
 800c062:	f004 f8d7 	bl	8010214 <RegionGetPhyParam>
 800c066:	4603      	mov	r3, r0
 800c068:	60fb      	str	r3, [r7, #12]
					LoRaMacParams.ChannelsDatarate = phyParam.Value;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	b25a      	sxtb	r2, r3
 800c06e:	4b5d      	ldr	r3, [pc, #372]	@ (800c1e4 <OnMacStateCheckTimerEvent+0x45c>)
 800c070:	705a      	strb	r2, [r3, #1]
				}
				// Try to send the frame again
				if (ScheduleTx() == LORAMAC_STATUS_OK)
 800c072:	f000 ff57 	bl	800cf24 <ScheduleTx>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d105      	bne.n	800c088 <OnMacStateCheckTimerEvent+0x300>
				{
					LoRaMacFlags.Bits.MacDone = 0;
 800c07c:	4a4f      	ldr	r2, [pc, #316]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800c07e:	7813      	ldrb	r3, [r2, #0]
 800c080:	f36f 1304 	bfc	r3, #4, #1
 800c084:	7013      	strb	r3, [r2, #0]
				if (ScheduleTx() == LORAMAC_STATUS_OK)
 800c086:	e04e      	b.n	800c126 <OnMacStateCheckTimerEvent+0x39e>
				}
				else
				{
					// The DR is not applicable for the payload size
					McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800c088:	4b4d      	ldr	r3, [pc, #308]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800c08a:	2209      	movs	r2, #9
 800c08c:	705a      	strb	r2, [r3, #1]

					MacCommandsBufferIndex = 0;
 800c08e:	4b57      	ldr	r3, [pc, #348]	@ (800c1ec <OnMacStateCheckTimerEvent+0x464>)
 800c090:	2200      	movs	r2, #0
 800c092:	701a      	strb	r2, [r3, #0]
					LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800c094:	4b51      	ldr	r3, [pc, #324]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f023 0301 	bic.w	r3, r3, #1
 800c09c:	4a4f      	ldr	r2, [pc, #316]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c09e:	6013      	str	r3, [r2, #0]
					NodeAckRequested = false;
 800c0a0:	4b4b      	ldr	r3, [pc, #300]	@ (800c1d0 <OnMacStateCheckTimerEvent+0x448>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	701a      	strb	r2, [r3, #0]
					McpsConfirm.AckReceived = false;
 800c0a6:	4b46      	ldr	r3, [pc, #280]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	711a      	strb	r2, [r3, #4]
					McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 800c0ac:	4b45      	ldr	r3, [pc, #276]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	4b43      	ldr	r3, [pc, #268]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800c0b2:	715a      	strb	r2, [r3, #5]
					McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 800c0b4:	4b4b      	ldr	r3, [pc, #300]	@ (800c1e4 <OnMacStateCheckTimerEvent+0x45c>)
 800c0b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	4b40      	ldr	r3, [pc, #256]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800c0be:	709a      	strb	r2, [r3, #2]
					if (IsUpLinkCounterFixed == false)
 800c0c0:	4b44      	ldr	r3, [pc, #272]	@ (800c1d4 <OnMacStateCheckTimerEvent+0x44c>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	f083 0301 	eor.w	r3, r3, #1
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d02b      	beq.n	800c126 <OnMacStateCheckTimerEvent+0x39e>
					{
						UpLinkCounter++;
 800c0ce:	4b42      	ldr	r3, [pc, #264]	@ (800c1d8 <OnMacStateCheckTimerEvent+0x450>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	4a40      	ldr	r2, [pc, #256]	@ (800c1d8 <OnMacStateCheckTimerEvent+0x450>)
 800c0d6:	6013      	str	r3, [r2, #0]
				if (ScheduleTx() == LORAMAC_STATUS_OK)
 800c0d8:	e025      	b.n	800c126 <OnMacStateCheckTimerEvent+0x39e>
					}
				}
			}
			else
			{
				RegionInitDefaults(LoRaMacRegion, INIT_TYPE_RESTORE);
 800c0da:	4b43      	ldr	r3, [pc, #268]	@ (800c1e8 <OnMacStateCheckTimerEvent+0x460>)
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2101      	movs	r1, #1
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f004 f963 	bl	80103ac <RegionInitDefaults>

				LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800c0e6:	4b3d      	ldr	r3, [pc, #244]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f023 0301 	bic.w	r3, r3, #1
 800c0ee:	4a3b      	ldr	r2, [pc, #236]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c0f0:	6013      	str	r3, [r2, #0]

				MacCommandsBufferIndex = 0;
 800c0f2:	4b3e      	ldr	r3, [pc, #248]	@ (800c1ec <OnMacStateCheckTimerEvent+0x464>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	701a      	strb	r2, [r3, #0]
				NodeAckRequested = false;
 800c0f8:	4b35      	ldr	r3, [pc, #212]	@ (800c1d0 <OnMacStateCheckTimerEvent+0x448>)
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	701a      	strb	r2, [r3, #0]
				McpsConfirm.AckReceived = false;
 800c0fe:	4b30      	ldr	r3, [pc, #192]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800c100:	2200      	movs	r2, #0
 800c102:	711a      	strb	r2, [r3, #4]
				McpsConfirm.NbRetries = AckTimeoutRetriesCounter;
 800c104:	4b2f      	ldr	r3, [pc, #188]	@ (800c1c4 <OnMacStateCheckTimerEvent+0x43c>)
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	4b2d      	ldr	r3, [pc, #180]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800c10a:	715a      	strb	r2, [r3, #5]
				if (IsUpLinkCounterFixed == false)
 800c10c:	4b31      	ldr	r3, [pc, #196]	@ (800c1d4 <OnMacStateCheckTimerEvent+0x44c>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	f083 0301 	eor.w	r3, r3, #1
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d006      	beq.n	800c128 <OnMacStateCheckTimerEvent+0x3a0>
				{
					UpLinkCounter++;
 800c11a:	4b2f      	ldr	r3, [pc, #188]	@ (800c1d8 <OnMacStateCheckTimerEvent+0x450>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3301      	adds	r3, #1
 800c120:	4a2d      	ldr	r2, [pc, #180]	@ (800c1d8 <OnMacStateCheckTimerEvent+0x450>)
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	e000      	b.n	800c128 <OnMacStateCheckTimerEvent+0x3a0>
				if (ScheduleTx() == LORAMAC_STATUS_OK)
 800c126:	bf00      	nop
				}
			}
		}
	}
	// Handle reception for Class B and Class C
	if ((LoRaMacState & LORAMAC_RX) == LORAMAC_RX)
 800c128:	4b2c      	ldr	r3, [pc, #176]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d005      	beq.n	800c140 <OnMacStateCheckTimerEvent+0x3b8>
	{
		LoRaMacState &= ~LORAMAC_RX;
 800c134:	4b29      	ldr	r3, [pc, #164]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f023 0302 	bic.w	r3, r3, #2
 800c13c:	4a27      	ldr	r2, [pc, #156]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c13e:	6013      	str	r3, [r2, #0]
	}
	if (LoRaMacState == LORAMAC_IDLE)
 800c140:	4b26      	ldr	r3, [pc, #152]	@ (800c1dc <OnMacStateCheckTimerEvent+0x454>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d15b      	bne.n	800c200 <OnMacStateCheckTimerEvent+0x478>
	{
		LOG_LIB("LM", "LoRaMacState = idle");
		lmh_mac_is_busy = false;
 800c148:	4b29      	ldr	r3, [pc, #164]	@ (800c1f0 <OnMacStateCheckTimerEvent+0x468>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	701a      	strb	r2, [r3, #0]
		if (LoRaMacFlags.Bits.McpsReq == 1)
 800c14e:	4b1b      	ldr	r3, [pc, #108]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d009      	beq.n	800c170 <OnMacStateCheckTimerEvent+0x3e8>
		{
			LoRaMacPrimitives->MacMcpsConfirm(&McpsConfirm);
 800c15c:	4b25      	ldr	r3, [pc, #148]	@ (800c1f4 <OnMacStateCheckTimerEvent+0x46c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4817      	ldr	r0, [pc, #92]	@ (800c1c0 <OnMacStateCheckTimerEvent+0x438>)
 800c164:	4798      	blx	r3
			LoRaMacFlags.Bits.McpsReq = 0;
 800c166:	4a15      	ldr	r2, [pc, #84]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800c168:	7813      	ldrb	r3, [r2, #0]
 800c16a:	f36f 0300 	bfc	r3, #0, #1
 800c16e:	7013      	strb	r3, [r2, #0]
		}

		if (LoRaMacFlags.Bits.MlmeReq == 1)
 800c170:	4b12      	ldr	r3, [pc, #72]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	f003 0308 	and.w	r3, r3, #8
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d017      	beq.n	800c1ae <OnMacStateCheckTimerEvent+0x426>
		{
			LoRaMacPrimitives->MacMlmeConfirm(&MlmeConfirm);
 800c17e:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f4 <OnMacStateCheckTimerEvent+0x46c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	481c      	ldr	r0, [pc, #112]	@ (800c1f8 <OnMacStateCheckTimerEvent+0x470>)
 800c186:	4798      	blx	r3
			if (MlmeConfirm.MlmeRequest == MLME_JOIN && IsLoRaMacNetworkJoined != JOIN_OK)
 800c188:	4b1b      	ldr	r3, [pc, #108]	@ (800c1f8 <OnMacStateCheckTimerEvent+0x470>)
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <OnMacStateCheckTimerEvent+0x41c>
 800c190:	4b1a      	ldr	r3, [pc, #104]	@ (800c1fc <OnMacStateCheckTimerEvent+0x474>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d005      	beq.n	800c1a4 <OnMacStateCheckTimerEvent+0x41c>
			{
				// fix the bug: When the number of join times is used up, if call lmh_join() in callback function again cannot work
				LoRaMacFlags.Bits.MlmeReq = 1;
 800c198:	4a08      	ldr	r2, [pc, #32]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800c19a:	7813      	ldrb	r3, [r2, #0]
 800c19c:	f043 0308 	orr.w	r3, r3, #8
 800c1a0:	7013      	strb	r3, [r2, #0]
 800c1a2:	e004      	b.n	800c1ae <OnMacStateCheckTimerEvent+0x426>
			}
			else
			{
				LoRaMacFlags.Bits.MlmeReq = 0;
 800c1a4:	4a05      	ldr	r2, [pc, #20]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800c1a6:	7813      	ldrb	r3, [r2, #0]
 800c1a8:	f36f 03c3 	bfc	r3, #3, #1
 800c1ac:	7013      	strb	r3, [r2, #0]
			}
		}

		// Procedure done. Reset variables.
		LoRaMacFlags.Bits.MacDone = 0;
 800c1ae:	4a03      	ldr	r2, [pc, #12]	@ (800c1bc <OnMacStateCheckTimerEvent+0x434>)
 800c1b0:	7813      	ldrb	r3, [r2, #0]
 800c1b2:	f36f 1304 	bfc	r3, #4, #1
 800c1b6:	7013      	strb	r3, [r2, #0]
 800c1b8:	e02c      	b.n	800c214 <OnMacStateCheckTimerEvent+0x48c>
 800c1ba:	bf00      	nop
 800c1bc:	20006a6c 	.word	0x20006a6c
 800c1c0:	20006a38 	.word	0x20006a38
 800c1c4:	2000006f 	.word	0x2000006f
 800c1c8:	2000006e 	.word	0x2000006e
 800c1cc:	20006a08 	.word	0x20006a08
 800c1d0:	20006768 	.word	0x20006768
 800c1d4:	20006760 	.word	0x20006760
 800c1d8:	20006758 	.word	0x20006758
 800c1dc:	20006908 	.word	0x20006908
 800c1e0:	2000006d 	.word	0x2000006d
 800c1e4:	20006870 	.word	0x20006870
 800c1e8:	20006510 	.word	0x20006510
 800c1ec:	2000676b 	.word	0x2000676b
 800c1f0:	20006cc3 	.word	0x20006cc3
 800c1f4:	20006930 	.word	0x20006930
 800c1f8:	20006a50 	.word	0x20006a50
 800c1fc:	20006761 	.word	0x20006761
	}
	else
	{
		// Operation not finished restart timer
		TimerSetValue(&MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT);
 800c200:	f04f 02fa 	mov.w	r2, #250	@ 0xfa
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	4816      	ldr	r0, [pc, #88]	@ (800c264 <OnMacStateCheckTimerEvent+0x4dc>)
 800c20a:	f014 fef5 	bl	8020ff8 <util_timer_set_period>
		TimerStart(&MacStateCheckTimer);
 800c20e:	4815      	ldr	r0, [pc, #84]	@ (800c264 <OnMacStateCheckTimerEvent+0x4dc>)
 800c210:	f014 fe0e 	bl	8020e30 <util_timer_start>
	}

	if (LoRaMacFlags.Bits.McpsInd == 1)
 800c214:	4b14      	ldr	r3, [pc, #80]	@ (800c268 <OnMacStateCheckTimerEvent+0x4e0>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	f003 0302 	and.w	r3, r3, #2
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d01c      	beq.n	800c25c <OnMacStateCheckTimerEvent+0x4d4>
	{
		if (LoRaMacDeviceClass == CLASS_C)
 800c222:	4b12      	ldr	r3, [pc, #72]	@ (800c26c <OnMacStateCheckTimerEvent+0x4e4>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d102      	bne.n	800c230 <OnMacStateCheckTimerEvent+0x4a8>
		{ // Activate RX2 window for Class C
			OnRxWindow2TimerEvent(NULL);
 800c22a:	2000      	movs	r0, #0
 800c22c:	f000 f8d4 	bl	800c3d8 <OnRxWindow2TimerEvent>
		}
		if (LoRaMacFlags.Bits.McpsIndSkip == 0)
 800c230:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <OnMacStateCheckTimerEvent+0x4e0>)
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d104      	bne.n	800c248 <OnMacStateCheckTimerEvent+0x4c0>
		{
			LOG_LIB("LM", "Calling MacMcpsIndication");
			LoRaMacPrimitives->MacMcpsIndication(&McpsIndication);
 800c23e:	4b0c      	ldr	r3, [pc, #48]	@ (800c270 <OnMacStateCheckTimerEvent+0x4e8>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	480b      	ldr	r0, [pc, #44]	@ (800c274 <OnMacStateCheckTimerEvent+0x4ec>)
 800c246:	4798      	blx	r3
		}
		else
		{
			LOG_LIB("LM", "Skipped MacMcpsIndication");
		}
		LoRaMacFlags.Bits.McpsIndSkip = 0;
 800c248:	4a07      	ldr	r2, [pc, #28]	@ (800c268 <OnMacStateCheckTimerEvent+0x4e0>)
 800c24a:	7813      	ldrb	r3, [r2, #0]
 800c24c:	f36f 0382 	bfc	r3, #2, #1
 800c250:	7013      	strb	r3, [r2, #0]
		LoRaMacFlags.Bits.McpsInd = 0;
 800c252:	4a05      	ldr	r2, [pc, #20]	@ (800c268 <OnMacStateCheckTimerEvent+0x4e0>)
 800c254:	7813      	ldrb	r3, [r2, #0]
 800c256:	f36f 0341 	bfc	r3, #1, #1
 800c25a:	7013      	strb	r3, [r2, #0]
	}
}
 800c25c:	bf00      	nop
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20006910 	.word	0x20006910
 800c268:	20006a6c 	.word	0x20006a6c
 800c26c:	20006550 	.word	0x20006550
 800c270:	20006930 	.word	0x20006930
 800c274:	20006a1c 	.word	0x20006a1c

0800c278 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent(void *arg)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af02      	add	r7, sp, #8
 800c27e:	6078      	str	r0, [r7, #4]
	LoRaMacHeader_t macHdr;
	LoRaMacFrameCtrl_t fCtrl;
	AlternateDrParams_t altDr;

	TimerStop(&TxDelayedTimer);
 800c280:	4821      	ldr	r0, [pc, #132]	@ (800c308 <OnTxDelayedTimerEvent+0x90>)
 800c282:	f014 fe51 	bl	8020f28 <util_timer_stop>
	LoRaMacState &= ~LORAMAC_TX_DELAYED;
 800c286:	4b21      	ldr	r3, [pc, #132]	@ (800c30c <OnTxDelayedTimerEvent+0x94>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f023 0310 	bic.w	r3, r3, #16
 800c28e:	4a1f      	ldr	r2, [pc, #124]	@ (800c30c <OnTxDelayedTimerEvent+0x94>)
 800c290:	6013      	str	r3, [r2, #0]

	if ((LoRaMacFlags.Bits.MlmeReq == 1) && (MlmeConfirm.MlmeRequest == MLME_JOIN))
 800c292:	4b1f      	ldr	r3, [pc, #124]	@ (800c310 <OnTxDelayedTimerEvent+0x98>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	f003 0308 	and.w	r3, r3, #8
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d02c      	beq.n	800c2fa <OnTxDelayedTimerEvent+0x82>
 800c2a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c314 <OnTxDelayedTimerEvent+0x9c>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d128      	bne.n	800c2fa <OnTxDelayedTimerEvent+0x82>
	{
		altDr.NbTrials = JoinRequestTrials + 1;
 800c2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c318 <OnTxDelayedTimerEvent+0xa0>)
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	81bb      	strh	r3, [r7, #12]
		LoRaMacParams.ChannelsDatarate = RegionAlternateDr(LoRaMacRegion, &altDr);
 800c2b2:	4b1a      	ldr	r3, [pc, #104]	@ (800c31c <OnTxDelayedTimerEvent+0xa4>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	f107 020c 	add.w	r2, r7, #12
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f004 fecf 	bl	8011060 <RegionAlternateDr>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	4b16      	ldr	r3, [pc, #88]	@ (800c320 <OnTxDelayedTimerEvent+0xa8>)
 800c2c8:	705a      	strb	r2, [r3, #1]

		macHdr.Value = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	753b      	strb	r3, [r7, #20]
		macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800c2ce:	7d3b      	ldrb	r3, [r7, #20]
 800c2d0:	f36f 1347 	bfc	r3, #5, #3
 800c2d4:	753b      	strb	r3, [r7, #20]

		fCtrl.Value = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	743b      	strb	r3, [r7, #16]
		fCtrl.Bits.Adr = AdrCtrlOn;
 800c2da:	4b12      	ldr	r3, [pc, #72]	@ (800c324 <OnTxDelayedTimerEvent+0xac>)
 800c2dc:	781a      	ldrb	r2, [r3, #0]
 800c2de:	7c3b      	ldrb	r3, [r7, #16]
 800c2e0:	f362 13c7 	bfi	r3, r2, #7, #1
 800c2e4:	743b      	strb	r3, [r7, #16]

		/* In case of join request retransmissions, the stack must prepare
		 * the frame again, because the network server keeps track of the random
		 * LoRaMacDevNonce values to prevent reply attacks. */
		PrepareFrame(&macHdr, &fCtrl, 0, NULL, 0);
 800c2e6:	f107 0110 	add.w	r1, r7, #16
 800c2ea:	f107 0014 	add.w	r0, r7, #20
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f001 f8c7 	bl	800d488 <PrepareFrame>
	}

	ScheduleTx();
 800c2fa:	f000 fe13 	bl	800cf24 <ScheduleTx>
}
 800c2fe:	bf00      	nop
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20006958 	.word	0x20006958
 800c30c:	20006908 	.word	0x20006908
 800c310:	20006a6c 	.word	0x20006a6c
 800c314:	20006a50 	.word	0x20006a50
 800c318:	20006a18 	.word	0x20006a18
 800c31c:	20006510 	.word	0x20006510
 800c320:	20006870 	.word	0x20006870
 800c324:	20006762 	.word	0x20006762

0800c328 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent(void *arg)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
	TimerStop(&RxWindowTimer1);
 800c330:	481f      	ldr	r0, [pc, #124]	@ (800c3b0 <OnRxWindow1TimerEvent+0x88>)
 800c332:	f014 fdf9 	bl	8020f28 <util_timer_stop>
	RxSlot = 0;
 800c336:	4b1f      	ldr	r3, [pc, #124]	@ (800c3b4 <OnRxWindow1TimerEvent+0x8c>)
 800c338:	2200      	movs	r2, #0
 800c33a:	701a      	strb	r2, [r3, #0]

	RxWindow1Config.Channel = Channel;
 800c33c:	4b1e      	ldr	r3, [pc, #120]	@ (800c3b8 <OnRxWindow1TimerEvent+0x90>)
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	4b1e      	ldr	r3, [pc, #120]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c342:	701a      	strb	r2, [r3, #0]
	RxWindow1Config.DrOffset = LoRaMacParams.Rx1DrOffset;
 800c344:	4b1e      	ldr	r3, [pc, #120]	@ (800c3c0 <OnRxWindow1TimerEvent+0x98>)
 800c346:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c34a:	b25a      	sxtb	r2, r3
 800c34c:	4b1b      	ldr	r3, [pc, #108]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c34e:	70da      	strb	r2, [r3, #3]
	RxWindow1Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800c350:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c0 <OnRxWindow1TimerEvent+0x98>)
 800c352:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800c356:	4b19      	ldr	r3, [pc, #100]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c358:	741a      	strb	r2, [r3, #16]
	RxWindow1Config.RepeaterSupport = RepeaterSupport;
 800c35a:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c4 <OnRxWindow1TimerEvent+0x9c>)
 800c35c:	781a      	ldrb	r2, [r3, #0]
 800c35e:	4b17      	ldr	r3, [pc, #92]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c360:	745a      	strb	r2, [r3, #17]
	RxWindow1Config.RxContinuous = false;
 800c362:	4b16      	ldr	r3, [pc, #88]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c364:	2200      	movs	r2, #0
 800c366:	749a      	strb	r2, [r3, #18]
	RxWindow1Config.Window = RxSlot;
 800c368:	4b12      	ldr	r3, [pc, #72]	@ (800c3b4 <OnRxWindow1TimerEvent+0x8c>)
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	bf14      	ite	ne
 800c370:	2301      	movne	r3, #1
 800c372:	2300      	moveq	r3, #0
 800c374:	b2da      	uxtb	r2, r3
 800c376:	4b11      	ldr	r3, [pc, #68]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c378:	74da      	strb	r2, [r3, #19]

	if (LoRaMacDeviceClass == CLASS_C)
 800c37a:	4b13      	ldr	r3, [pc, #76]	@ (800c3c8 <OnRxWindow1TimerEvent+0xa0>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d102      	bne.n	800c388 <OnRxWindow1TimerEvent+0x60>
	{
		Radio.Standby();
 800c382:	4b12      	ldr	r3, [pc, #72]	@ (800c3cc <OnRxWindow1TimerEvent+0xa4>)
 800c384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c386:	4798      	blx	r3
	}

	RegionRxConfig(LoRaMacRegion, &RxWindow1Config, (int8_t *)&McpsIndication.RxDatarate);
 800c388:	4b11      	ldr	r3, [pc, #68]	@ (800c3d0 <OnRxWindow1TimerEvent+0xa8>)
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	4a11      	ldr	r2, [pc, #68]	@ (800c3d4 <OnRxWindow1TimerEvent+0xac>)
 800c38e:	490b      	ldr	r1, [pc, #44]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c390:	4618      	mov	r0, r3
 800c392:	f004 faff 	bl	8010994 <RegionRxConfig>
	RxWindowSetup(RxWindow1Config.RxContinuous, LoRaMacParams.MaxRxWindow);
 800c396:	4b09      	ldr	r3, [pc, #36]	@ (800c3bc <OnRxWindow1TimerEvent+0x94>)
 800c398:	7c9b      	ldrb	r3, [r3, #18]
 800c39a:	4a09      	ldr	r2, [pc, #36]	@ (800c3c0 <OnRxWindow1TimerEvent+0x98>)
 800c39c:	68d2      	ldr	r2, [r2, #12]
 800c39e:	4611      	mov	r1, r2
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 f8e3 	bl	800c56c <RxWindowSetup>
}
 800c3a6:	bf00      	nop
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	20006978 	.word	0x20006978
 800c3b4:	20006a68 	.word	0x20006a68
 800c3b8:	200068f9 	.word	0x200068f9
 800c3bc:	200069c0 	.word	0x200069c0
 800c3c0:	20006870 	.word	0x20006870
 800c3c4:	20006552 	.word	0x20006552
 800c3c8:	20006550 	.word	0x20006550
 800c3cc:	08025450 	.word	0x08025450
 800c3d0:	20006510 	.word	0x20006510
 800c3d4:	20006a20 	.word	0x20006a20

0800c3d8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent(void *arg)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
	TimerStop(&RxWindowTimer2);
 800c3e0:	483b      	ldr	r0, [pc, #236]	@ (800c4d0 <OnRxWindow2TimerEvent+0xf8>)
 800c3e2:	f014 fda1 	bl	8020f28 <util_timer_stop>

	RxWindow2Config.Channel = Channel;
 800c3e6:	4b3b      	ldr	r3, [pc, #236]	@ (800c4d4 <OnRxWindow2TimerEvent+0xfc>)
 800c3e8:	781a      	ldrb	r2, [r3, #0]
 800c3ea:	4b3b      	ldr	r3, [pc, #236]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c3ec:	701a      	strb	r2, [r3, #0]
	RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 800c3ee:	4b3b      	ldr	r3, [pc, #236]	@ (800c4dc <OnRxWindow2TimerEvent+0x104>)
 800c3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f2:	4a39      	ldr	r2, [pc, #228]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c3f4:	6053      	str	r3, [r2, #4]
	RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800c3f6:	4b39      	ldr	r3, [pc, #228]	@ (800c4dc <OnRxWindow2TimerEvent+0x104>)
 800c3f8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800c3fc:	4b36      	ldr	r3, [pc, #216]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c3fe:	741a      	strb	r2, [r3, #16]
	RxWindow2Config.RepeaterSupport = RepeaterSupport;
 800c400:	4b37      	ldr	r3, [pc, #220]	@ (800c4e0 <OnRxWindow2TimerEvent+0x108>)
 800c402:	781a      	ldrb	r2, [r3, #0]
 800c404:	4b34      	ldr	r3, [pc, #208]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c406:	745a      	strb	r2, [r3, #17]
	RxWindow2Config.Window = 1;
 800c408:	4b33      	ldr	r3, [pc, #204]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c40a:	2201      	movs	r2, #1
 800c40c:	74da      	strb	r2, [r3, #19]

	// Make channel shifts for AS923-2, AS923-3 and AS923-4
	switch (LoRaMacRegion)
 800c40e:	4b35      	ldr	r3, [pc, #212]	@ (800c4e4 <OnRxWindow2TimerEvent+0x10c>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b0b      	cmp	r3, #11
 800c414:	d835      	bhi.n	800c482 <OnRxWindow2TimerEvent+0xaa>
 800c416:	a201      	add	r2, pc, #4	@ (adr r2, 800c41c <OnRxWindow2TimerEvent+0x44>)
 800c418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41c:	0800c483 	.word	0x0800c483
 800c420:	0800c483 	.word	0x0800c483
 800c424:	0800c483 	.word	0x0800c483
 800c428:	0800c483 	.word	0x0800c483
 800c42c:	0800c483 	.word	0x0800c483
 800c430:	0800c483 	.word	0x0800c483
 800c434:	0800c483 	.word	0x0800c483
 800c438:	0800c483 	.word	0x0800c483
 800c43c:	0800c483 	.word	0x0800c483
 800c440:	0800c44d 	.word	0x0800c44d
 800c444:	0800c45f 	.word	0x0800c45f
 800c448:	0800c471 	.word	0x0800c471
	{
	case LORAMAC_REGION_AS923:
		LOG_LIB("LM", "Using AS923-1");
		break;
	case LORAMAC_REGION_AS923_2:
		RxWindow2Config.Frequency = RxWindow2Config.Frequency - 1800000;
 800c44c:	4b22      	ldr	r3, [pc, #136]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	f5a3 13db 	sub.w	r3, r3, #1794048	@ 0x1b6000
 800c454:	f5a3 53ba 	sub.w	r3, r3, #5952	@ 0x1740
 800c458:	4a1f      	ldr	r2, [pc, #124]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c45a:	6053      	str	r3, [r2, #4]
		LOG_LIB("LM", "Using AS923-2");
		break;
 800c45c:	e012      	b.n	800c484 <OnRxWindow2TimerEvent+0xac>
	case LORAMAC_REGION_AS923_3:
		RxWindow2Config.Frequency = RxWindow2Config.Frequency - 6600000;
 800c45e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f5a3 03c9 	sub.w	r3, r3, #6586368	@ 0x648000
 800c466:	f5a3 5355 	sub.w	r3, r3, #13632	@ 0x3540
 800c46a:	4a1b      	ldr	r2, [pc, #108]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c46c:	6053      	str	r3, [r2, #4]
		LOG_LIB("LM", "Using AS923-3");
		break;
 800c46e:	e009      	b.n	800c484 <OnRxWindow2TimerEvent+0xac>
	case LORAMAC_REGION_AS923_4:
		RxWindow2Config.Frequency = RxWindow2Config.Frequency - 5900000;
 800c470:	4b19      	ldr	r3, [pc, #100]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	f5a3 03b4 	sub.w	r3, r3, #5898240	@ 0x5a0000
 800c478:	f5a3 63dc 	sub.w	r3, r3, #1760	@ 0x6e0
 800c47c:	4a16      	ldr	r2, [pc, #88]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c47e:	6053      	str	r3, [r2, #4]
		LOG_LIB("LM", "Using AS923-4");
		break;
 800c480:	e000      	b.n	800c484 <OnRxWindow2TimerEvent+0xac>
	default:
		break;
 800c482:	bf00      	nop
	}

	if (LoRaMacDeviceClass != CLASS_C)
 800c484:	4b18      	ldr	r3, [pc, #96]	@ (800c4e8 <OnRxWindow2TimerEvent+0x110>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d003      	beq.n	800c494 <OnRxWindow2TimerEvent+0xbc>
	{
		RxWindow2Config.RxContinuous = false;
 800c48c:	4b12      	ldr	r3, [pc, #72]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c48e:	2200      	movs	r2, #0
 800c490:	749a      	strb	r2, [r3, #18]
 800c492:	e002      	b.n	800c49a <OnRxWindow2TimerEvent+0xc2>
	}
	else
	{
		RxWindow2Config.RxContinuous = true;
 800c494:	4b10      	ldr	r3, [pc, #64]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c496:	2201      	movs	r2, #1
 800c498:	749a      	strb	r2, [r3, #18]
	}

	if (RegionRxConfig(LoRaMacRegion, &RxWindow2Config, (int8_t *)&McpsIndication.RxDatarate) == true)
 800c49a:	4b12      	ldr	r3, [pc, #72]	@ (800c4e4 <OnRxWindow2TimerEvent+0x10c>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	4a13      	ldr	r2, [pc, #76]	@ (800c4ec <OnRxWindow2TimerEvent+0x114>)
 800c4a0:	490d      	ldr	r1, [pc, #52]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f004 fa76 	bl	8010994 <RegionRxConfig>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00c      	beq.n	800c4c8 <OnRxWindow2TimerEvent+0xf0>
	{
		RxWindowSetup(RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow);
 800c4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c4b0:	7c9b      	ldrb	r3, [r3, #18]
 800c4b2:	4a0a      	ldr	r2, [pc, #40]	@ (800c4dc <OnRxWindow2TimerEvent+0x104>)
 800c4b4:	68d2      	ldr	r2, [r2, #12]
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 f857 	bl	800c56c <RxWindowSetup>
		RxSlot = RxWindow2Config.Window;
 800c4be:	4b06      	ldr	r3, [pc, #24]	@ (800c4d8 <OnRxWindow2TimerEvent+0x100>)
 800c4c0:	7cdb      	ldrb	r3, [r3, #19]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f0 <OnRxWindow2TimerEvent+0x118>)
 800c4c6:	701a      	strb	r2, [r3, #0]
	}
}
 800c4c8:	bf00      	nop
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20006998 	.word	0x20006998
 800c4d4:	200068f9 	.word	0x200068f9
 800c4d8:	200069d4 	.word	0x200069d4
 800c4dc:	20006870 	.word	0x20006870
 800c4e0:	20006552 	.word	0x20006552
 800c4e4:	20006510 	.word	0x20006510
 800c4e8:	20006550 	.word	0x20006550
 800c4ec:	20006a20 	.word	0x20006a20
 800c4f0:	20006a68 	.word	0x20006a68

0800c4f4 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent(void *arg)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	TimerStop(&AckTimeoutTimer);
 800c4fc:	4814      	ldr	r0, [pc, #80]	@ (800c550 <OnAckTimeoutTimerEvent+0x5c>)
 800c4fe:	f014 fd13 	bl	8020f28 <util_timer_stop>

	if (NodeAckRequested == true)
 800c502:	4b14      	ldr	r3, [pc, #80]	@ (800c554 <OnAckTimeoutTimerEvent+0x60>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00e      	beq.n	800c528 <OnAckTimeoutTimerEvent+0x34>
	{
		AckTimeoutRetry = true;
 800c50a:	4b13      	ldr	r3, [pc, #76]	@ (800c558 <OnAckTimeoutTimerEvent+0x64>)
 800c50c:	2201      	movs	r2, #1
 800c50e:	701a      	strb	r2, [r3, #0]
		LoRaMacState &= ~LORAMAC_ACK_REQ;
 800c510:	4b12      	ldr	r3, [pc, #72]	@ (800c55c <OnAckTimeoutTimerEvent+0x68>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f023 0304 	bic.w	r3, r3, #4
 800c518:	4a10      	ldr	r2, [pc, #64]	@ (800c55c <OnAckTimeoutTimerEvent+0x68>)
 800c51a:	6013      	str	r3, [r2, #0]
		LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800c51c:	4b0f      	ldr	r3, [pc, #60]	@ (800c55c <OnAckTimeoutTimerEvent+0x68>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f023 0301 	bic.w	r3, r3, #1
 800c524:	4a0d      	ldr	r2, [pc, #52]	@ (800c55c <OnAckTimeoutTimerEvent+0x68>)
 800c526:	6013      	str	r3, [r2, #0]
	}
	if (LoRaMacDeviceClass == CLASS_C)
 800c528:	4b0d      	ldr	r3, [pc, #52]	@ (800c560 <OnAckTimeoutTimerEvent+0x6c>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d104      	bne.n	800c53a <OnAckTimeoutTimerEvent+0x46>
	{
		LoRaMacFlags.Bits.MacDone = 1;
 800c530:	4a0c      	ldr	r2, [pc, #48]	@ (800c564 <OnAckTimeoutTimerEvent+0x70>)
 800c532:	7813      	ldrb	r3, [r2, #0]
 800c534:	f043 0310 	orr.w	r3, r3, #16
 800c538:	7013      	strb	r3, [r2, #0]
	}
	TimerStop(&MacStateCheckTimer);
 800c53a:	480b      	ldr	r0, [pc, #44]	@ (800c568 <OnAckTimeoutTimerEvent+0x74>)
 800c53c:	f014 fcf4 	bl	8020f28 <util_timer_stop>
	OnMacStateCheckTimerEvent(NULL);
 800c540:	2000      	movs	r0, #0
 800c542:	f7ff fc21 	bl	800bd88 <OnMacStateCheckTimerEvent>
}
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	200069e8 	.word	0x200069e8
 800c554:	20006768 	.word	0x20006768
 800c558:	20006a08 	.word	0x20006a08
 800c55c:	20006908 	.word	0x20006908
 800c560:	20006550 	.word	0x20006550
 800c564:	20006a6c 	.word	0x20006a6c
 800c568:	20006910 	.word	0x20006910

0800c56c <RxWindowSetup>:

static void RxWindowSetup(bool rxContinuous, uint32_t maxRxWindow)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	4603      	mov	r3, r0
 800c574:	6039      	str	r1, [r7, #0]
 800c576:	71fb      	strb	r3, [r7, #7]
	LOG_LIB("Radio.Rx", "Radio.Rx");
	if (rxContinuous == false)
 800c578:	79fb      	ldrb	r3, [r7, #7]
 800c57a:	f083 0301 	eor.w	r3, r3, #1
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d004      	beq.n	800c58e <RxWindowSetup+0x22>
	{
		Radio.Rx(maxRxWindow);
 800c584:	4b06      	ldr	r3, [pc, #24]	@ (800c5a0 <RxWindowSetup+0x34>)
 800c586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c588:	6838      	ldr	r0, [r7, #0]
 800c58a:	4798      	blx	r3
	}
	else
	{
		Radio.Rx(0); // Continuous mode
	}
}
 800c58c:	e003      	b.n	800c596 <RxWindowSetup+0x2a>
		Radio.Rx(0); // Continuous mode
 800c58e:	4b04      	ldr	r3, [pc, #16]	@ (800c5a0 <RxWindowSetup+0x34>)
 800c590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c592:	2000      	movs	r0, #0
 800c594:	4798      	blx	r3
}
 800c596:	bf00      	nop
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	08025450 	.word	0x08025450

0800c5a4 <ValidatePayloadLength>:

static bool ValidatePayloadLength(uint8_t lenN, int8_t datarate, uint8_t fOptsLen)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	71fb      	strb	r3, [r7, #7]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	71bb      	strb	r3, [r7, #6]
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	717b      	strb	r3, [r7, #5]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	uint16_t maxN = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	82fb      	strh	r3, [r7, #22]
	uint16_t payloadSize = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	82bb      	strh	r3, [r7, #20]

	// Setup PHY request
	getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800c5be:	4b17      	ldr	r3, [pc, #92]	@ (800c61c <ValidatePayloadLength+0x78>)
 800c5c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c5c4:	74bb      	strb	r3, [r7, #18]
	getPhy.Datarate = datarate;
 800c5c6:	79bb      	ldrb	r3, [r7, #6]
 800c5c8:	747b      	strb	r3, [r7, #17]
	getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c5ca:	2309      	movs	r3, #9
 800c5cc:	743b      	strb	r3, [r7, #16]

	// Get the maximum payload length
	if (RepeaterSupport == true)
 800c5ce:	4b14      	ldr	r3, [pc, #80]	@ (800c620 <ValidatePayloadLength+0x7c>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <ValidatePayloadLength+0x36>
	{
		getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c5d6:	230a      	movs	r3, #10
 800c5d8:	743b      	strb	r3, [r7, #16]
	}
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800c5da:	4b12      	ldr	r3, [pc, #72]	@ (800c624 <ValidatePayloadLength+0x80>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	f107 0210 	add.w	r2, r7, #16
 800c5e2:	4611      	mov	r1, r2
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f003 fe15 	bl	8010214 <RegionGetPhyParam>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	60fb      	str	r3, [r7, #12]
	maxN = phyParam.Value;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	82fb      	strh	r3, [r7, #22]

	// Calculate the resulting payload size
	payloadSize = (lenN + fOptsLen);
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	797b      	ldrb	r3, [r7, #5]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	4413      	add	r3, r2
 800c5fc:	82bb      	strh	r3, [r7, #20]

	// Validation of the application payload size
	if ((payloadSize <= maxN) && (payloadSize <= LORAMAC_PHY_MAXPAYLOAD))
 800c5fe:	8aba      	ldrh	r2, [r7, #20]
 800c600:	8afb      	ldrh	r3, [r7, #22]
 800c602:	429a      	cmp	r2, r3
 800c604:	d804      	bhi.n	800c610 <ValidatePayloadLength+0x6c>
 800c606:	8abb      	ldrh	r3, [r7, #20]
 800c608:	2bff      	cmp	r3, #255	@ 0xff
 800c60a:	d801      	bhi.n	800c610 <ValidatePayloadLength+0x6c>
	{
		return true;
 800c60c:	2301      	movs	r3, #1
 800c60e:	e000      	b.n	800c612 <ValidatePayloadLength+0x6e>
	}
	return false;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3718      	adds	r7, #24
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20006870 	.word	0x20006870
 800c620:	20006552 	.word	0x20006552
 800c624:	20006510 	.word	0x20006510

0800c628 <AddMacCommand>:

static LoRaMacStatus_t AddMacCommand(uint8_t cmd, uint8_t p1, uint8_t p2)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	71fb      	strb	r3, [r7, #7]
 800c632:	460b      	mov	r3, r1
 800c634:	71bb      	strb	r3, [r7, #6]
 800c636:	4613      	mov	r3, r2
 800c638:	717b      	strb	r3, [r7, #5]
	LoRaMacStatus_t status = LORAMAC_STATUS_BUSY;
 800c63a:	2301      	movs	r3, #1
 800c63c:	73fb      	strb	r3, [r7, #15]
	// The maximum buffer length must take MAC commands to re-send into account.
	uint8_t bufLen = LORA_MAC_COMMAND_MAX_LENGTH - MacCommandsBufferToRepeatIndex;
 800c63e:	4b96      	ldr	r3, [pc, #600]	@ (800c898 <AddMacCommand+0x270>)
 800c640:	781a      	ldrb	r2, [r3, #0]
 800c642:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800c646:	1a9b      	subs	r3, r3, r2
 800c648:	73bb      	strb	r3, [r7, #14]

	switch (cmd)
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	3b02      	subs	r3, #2
 800c64e:	2b08      	cmp	r3, #8
 800c650:	f200 8101 	bhi.w	800c856 <AddMacCommand+0x22e>
 800c654:	a201      	add	r2, pc, #4	@ (adr r2, 800c65c <AddMacCommand+0x34>)
 800c656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65a:	bf00      	nop
 800c65c:	0800c681 	.word	0x0800c681
 800c660:	0800c6a7 	.word	0x0800c6a7
 800c664:	0800c6e5 	.word	0x0800c6e5
 800c668:	0800c70b 	.word	0x0800c70b
 800c66c:	0800c749 	.word	0x0800c749
 800c670:	0800c79b 	.word	0x0800c79b
 800c674:	0800c7d7 	.word	0x0800c7d7
 800c678:	0800c7fb 	.word	0x0800c7fb
 800c67c:	0800c81f 	.word	0x0800c81f
	{
	case MOTE_MAC_LINK_CHECK_REQ:
		if (MacCommandsBufferIndex < bufLen)
 800c680:	4b86      	ldr	r3, [pc, #536]	@ (800c89c <AddMacCommand+0x274>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	7bba      	ldrb	r2, [r7, #14]
 800c686:	429a      	cmp	r2, r3
 800c688:	f240 80e7 	bls.w	800c85a <AddMacCommand+0x232>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c68c:	4b83      	ldr	r3, [pc, #524]	@ (800c89c <AddMacCommand+0x274>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	1c5a      	adds	r2, r3, #1
 800c692:	b2d1      	uxtb	r1, r2
 800c694:	4a81      	ldr	r2, [pc, #516]	@ (800c89c <AddMacCommand+0x274>)
 800c696:	7011      	strb	r1, [r2, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	4a81      	ldr	r2, [pc, #516]	@ (800c8a0 <AddMacCommand+0x278>)
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	5453      	strb	r3, [r2, r1]
			// No payload for this command
			status = LORAMAC_STATUS_OK;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c6a4:	e0d9      	b.n	800c85a <AddMacCommand+0x232>
	case MOTE_MAC_LINK_ADR_ANS:
		if (MacCommandsBufferIndex < (bufLen - 1))
 800c6a6:	4b7d      	ldr	r3, [pc, #500]	@ (800c89c <AddMacCommand+0x274>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	7bbb      	ldrb	r3, [r7, #14]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	f280 80d4 	bge.w	800c85e <AddMacCommand+0x236>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c6b6:	4b79      	ldr	r3, [pc, #484]	@ (800c89c <AddMacCommand+0x274>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	b2d1      	uxtb	r1, r2
 800c6be:	4a77      	ldr	r2, [pc, #476]	@ (800c89c <AddMacCommand+0x274>)
 800c6c0:	7011      	strb	r1, [r2, #0]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4a76      	ldr	r2, [pc, #472]	@ (800c8a0 <AddMacCommand+0x278>)
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	5453      	strb	r3, [r2, r1]
			// Margin
			MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800c6ca:	4b74      	ldr	r3, [pc, #464]	@ (800c89c <AddMacCommand+0x274>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	b2d1      	uxtb	r1, r2
 800c6d2:	4a72      	ldr	r2, [pc, #456]	@ (800c89c <AddMacCommand+0x274>)
 800c6d4:	7011      	strb	r1, [r2, #0]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	4a71      	ldr	r2, [pc, #452]	@ (800c8a0 <AddMacCommand+0x278>)
 800c6da:	79bb      	ldrb	r3, [r7, #6]
 800c6dc:	5453      	strb	r3, [r2, r1]
			status = LORAMAC_STATUS_OK;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c6e2:	e0bc      	b.n	800c85e <AddMacCommand+0x236>
	case MOTE_MAC_DUTY_CYCLE_ANS:
		if (MacCommandsBufferIndex < bufLen)
 800c6e4:	4b6d      	ldr	r3, [pc, #436]	@ (800c89c <AddMacCommand+0x274>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	7bba      	ldrb	r2, [r7, #14]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	f240 80b9 	bls.w	800c862 <AddMacCommand+0x23a>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c6f0:	4b6a      	ldr	r3, [pc, #424]	@ (800c89c <AddMacCommand+0x274>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	b2d1      	uxtb	r1, r2
 800c6f8:	4a68      	ldr	r2, [pc, #416]	@ (800c89c <AddMacCommand+0x274>)
 800c6fa:	7011      	strb	r1, [r2, #0]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	4a68      	ldr	r2, [pc, #416]	@ (800c8a0 <AddMacCommand+0x278>)
 800c700:	79fb      	ldrb	r3, [r7, #7]
 800c702:	5453      	strb	r3, [r2, r1]
			// No payload for this answer
			status = LORAMAC_STATUS_OK;
 800c704:	2300      	movs	r3, #0
 800c706:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c708:	e0ab      	b.n	800c862 <AddMacCommand+0x23a>
	case MOTE_MAC_RX_PARAM_SETUP_ANS:
		if (MacCommandsBufferIndex < (bufLen - 1))
 800c70a:	4b64      	ldr	r3, [pc, #400]	@ (800c89c <AddMacCommand+0x274>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	461a      	mov	r2, r3
 800c710:	7bbb      	ldrb	r3, [r7, #14]
 800c712:	3b01      	subs	r3, #1
 800c714:	429a      	cmp	r2, r3
 800c716:	f280 80a6 	bge.w	800c866 <AddMacCommand+0x23e>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c71a:	4b60      	ldr	r3, [pc, #384]	@ (800c89c <AddMacCommand+0x274>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	b2d1      	uxtb	r1, r2
 800c722:	4a5e      	ldr	r2, [pc, #376]	@ (800c89c <AddMacCommand+0x274>)
 800c724:	7011      	strb	r1, [r2, #0]
 800c726:	4619      	mov	r1, r3
 800c728:	4a5d      	ldr	r2, [pc, #372]	@ (800c8a0 <AddMacCommand+0x278>)
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	5453      	strb	r3, [r2, r1]
			// Status: Datarate ACK, Channel ACK
			MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800c72e:	4b5b      	ldr	r3, [pc, #364]	@ (800c89c <AddMacCommand+0x274>)
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	b2d1      	uxtb	r1, r2
 800c736:	4a59      	ldr	r2, [pc, #356]	@ (800c89c <AddMacCommand+0x274>)
 800c738:	7011      	strb	r1, [r2, #0]
 800c73a:	4619      	mov	r1, r3
 800c73c:	4a58      	ldr	r2, [pc, #352]	@ (800c8a0 <AddMacCommand+0x278>)
 800c73e:	79bb      	ldrb	r3, [r7, #6]
 800c740:	5453      	strb	r3, [r2, r1]
			status = LORAMAC_STATUS_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c746:	e08e      	b.n	800c866 <AddMacCommand+0x23e>
	case MOTE_MAC_DEV_STATUS_ANS:
		if (MacCommandsBufferIndex < (bufLen - 2))
 800c748:	4b54      	ldr	r3, [pc, #336]	@ (800c89c <AddMacCommand+0x274>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	3b02      	subs	r3, #2
 800c752:	429a      	cmp	r2, r3
 800c754:	f280 8089 	bge.w	800c86a <AddMacCommand+0x242>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c758:	4b50      	ldr	r3, [pc, #320]	@ (800c89c <AddMacCommand+0x274>)
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	1c5a      	adds	r2, r3, #1
 800c75e:	b2d1      	uxtb	r1, r2
 800c760:	4a4e      	ldr	r2, [pc, #312]	@ (800c89c <AddMacCommand+0x274>)
 800c762:	7011      	strb	r1, [r2, #0]
 800c764:	4619      	mov	r1, r3
 800c766:	4a4e      	ldr	r2, [pc, #312]	@ (800c8a0 <AddMacCommand+0x278>)
 800c768:	79fb      	ldrb	r3, [r7, #7]
 800c76a:	5453      	strb	r3, [r2, r1]
			// 1st byte Battery
			// 2nd byte Margin
			MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800c76c:	4b4b      	ldr	r3, [pc, #300]	@ (800c89c <AddMacCommand+0x274>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	1c5a      	adds	r2, r3, #1
 800c772:	b2d1      	uxtb	r1, r2
 800c774:	4a49      	ldr	r2, [pc, #292]	@ (800c89c <AddMacCommand+0x274>)
 800c776:	7011      	strb	r1, [r2, #0]
 800c778:	4619      	mov	r1, r3
 800c77a:	4a49      	ldr	r2, [pc, #292]	@ (800c8a0 <AddMacCommand+0x278>)
 800c77c:	79bb      	ldrb	r3, [r7, #6]
 800c77e:	5453      	strb	r3, [r2, r1]
			MacCommandsBuffer[MacCommandsBufferIndex++] = p2;
 800c780:	4b46      	ldr	r3, [pc, #280]	@ (800c89c <AddMacCommand+0x274>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	b2d1      	uxtb	r1, r2
 800c788:	4a44      	ldr	r2, [pc, #272]	@ (800c89c <AddMacCommand+0x274>)
 800c78a:	7011      	strb	r1, [r2, #0]
 800c78c:	4619      	mov	r1, r3
 800c78e:	4a44      	ldr	r2, [pc, #272]	@ (800c8a0 <AddMacCommand+0x278>)
 800c790:	797b      	ldrb	r3, [r7, #5]
 800c792:	5453      	strb	r3, [r2, r1]
			status = LORAMAC_STATUS_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c798:	e067      	b.n	800c86a <AddMacCommand+0x242>
	case MOTE_MAC_NEW_CHANNEL_ANS:
		if (MacCommandsBufferIndex < (bufLen - 1))
 800c79a:	4b40      	ldr	r3, [pc, #256]	@ (800c89c <AddMacCommand+0x274>)
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	7bbb      	ldrb	r3, [r7, #14]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	da62      	bge.n	800c86e <AddMacCommand+0x246>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c7a8:	4b3c      	ldr	r3, [pc, #240]	@ (800c89c <AddMacCommand+0x274>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	b2d1      	uxtb	r1, r2
 800c7b0:	4a3a      	ldr	r2, [pc, #232]	@ (800c89c <AddMacCommand+0x274>)
 800c7b2:	7011      	strb	r1, [r2, #0]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	4a3a      	ldr	r2, [pc, #232]	@ (800c8a0 <AddMacCommand+0x278>)
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	5453      	strb	r3, [r2, r1]
			// Status: Datarate range OK, Channel frequency OK
			MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800c7bc:	4b37      	ldr	r3, [pc, #220]	@ (800c89c <AddMacCommand+0x274>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	1c5a      	adds	r2, r3, #1
 800c7c2:	b2d1      	uxtb	r1, r2
 800c7c4:	4a35      	ldr	r2, [pc, #212]	@ (800c89c <AddMacCommand+0x274>)
 800c7c6:	7011      	strb	r1, [r2, #0]
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4a35      	ldr	r2, [pc, #212]	@ (800c8a0 <AddMacCommand+0x278>)
 800c7cc:	79bb      	ldrb	r3, [r7, #6]
 800c7ce:	5453      	strb	r3, [r2, r1]
			status = LORAMAC_STATUS_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c7d4:	e04b      	b.n	800c86e <AddMacCommand+0x246>
	case MOTE_MAC_RX_TIMING_SETUP_ANS:
		if (MacCommandsBufferIndex < bufLen)
 800c7d6:	4b31      	ldr	r3, [pc, #196]	@ (800c89c <AddMacCommand+0x274>)
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	7bba      	ldrb	r2, [r7, #14]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d948      	bls.n	800c872 <AddMacCommand+0x24a>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c7e0:	4b2e      	ldr	r3, [pc, #184]	@ (800c89c <AddMacCommand+0x274>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	1c5a      	adds	r2, r3, #1
 800c7e6:	b2d1      	uxtb	r1, r2
 800c7e8:	4a2c      	ldr	r2, [pc, #176]	@ (800c89c <AddMacCommand+0x274>)
 800c7ea:	7011      	strb	r1, [r2, #0]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	4a2c      	ldr	r2, [pc, #176]	@ (800c8a0 <AddMacCommand+0x278>)
 800c7f0:	79fb      	ldrb	r3, [r7, #7]
 800c7f2:	5453      	strb	r3, [r2, r1]
			// No payload for this answer
			status = LORAMAC_STATUS_OK;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c7f8:	e03b      	b.n	800c872 <AddMacCommand+0x24a>
	case MOTE_MAC_TX_PARAM_SETUP_ANS:
		if (MacCommandsBufferIndex < bufLen)
 800c7fa:	4b28      	ldr	r3, [pc, #160]	@ (800c89c <AddMacCommand+0x274>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	7bba      	ldrb	r2, [r7, #14]
 800c800:	429a      	cmp	r2, r3
 800c802:	d938      	bls.n	800c876 <AddMacCommand+0x24e>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c804:	4b25      	ldr	r3, [pc, #148]	@ (800c89c <AddMacCommand+0x274>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	1c5a      	adds	r2, r3, #1
 800c80a:	b2d1      	uxtb	r1, r2
 800c80c:	4a23      	ldr	r2, [pc, #140]	@ (800c89c <AddMacCommand+0x274>)
 800c80e:	7011      	strb	r1, [r2, #0]
 800c810:	4619      	mov	r1, r3
 800c812:	4a23      	ldr	r2, [pc, #140]	@ (800c8a0 <AddMacCommand+0x278>)
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	5453      	strb	r3, [r2, r1]
			// No payload for this answer
			status = LORAMAC_STATUS_OK;
 800c818:	2300      	movs	r3, #0
 800c81a:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c81c:	e02b      	b.n	800c876 <AddMacCommand+0x24e>
	case MOTE_MAC_DL_CHANNEL_ANS:
		if (MacCommandsBufferIndex < bufLen)
 800c81e:	4b1f      	ldr	r3, [pc, #124]	@ (800c89c <AddMacCommand+0x274>)
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	7bba      	ldrb	r2, [r7, #14]
 800c824:	429a      	cmp	r2, r3
 800c826:	d928      	bls.n	800c87a <AddMacCommand+0x252>
		{
			MacCommandsBuffer[MacCommandsBufferIndex++] = cmd;
 800c828:	4b1c      	ldr	r3, [pc, #112]	@ (800c89c <AddMacCommand+0x274>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	b2d1      	uxtb	r1, r2
 800c830:	4a1a      	ldr	r2, [pc, #104]	@ (800c89c <AddMacCommand+0x274>)
 800c832:	7011      	strb	r1, [r2, #0]
 800c834:	4619      	mov	r1, r3
 800c836:	4a1a      	ldr	r2, [pc, #104]	@ (800c8a0 <AddMacCommand+0x278>)
 800c838:	79fb      	ldrb	r3, [r7, #7]
 800c83a:	5453      	strb	r3, [r2, r1]
			// Status: Uplink frequency exists, Channel frequency OK
			MacCommandsBuffer[MacCommandsBufferIndex++] = p1;
 800c83c:	4b17      	ldr	r3, [pc, #92]	@ (800c89c <AddMacCommand+0x274>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	1c5a      	adds	r2, r3, #1
 800c842:	b2d1      	uxtb	r1, r2
 800c844:	4a15      	ldr	r2, [pc, #84]	@ (800c89c <AddMacCommand+0x274>)
 800c846:	7011      	strb	r1, [r2, #0]
 800c848:	4619      	mov	r1, r3
 800c84a:	4a15      	ldr	r2, [pc, #84]	@ (800c8a0 <AddMacCommand+0x278>)
 800c84c:	79bb      	ldrb	r3, [r7, #6]
 800c84e:	5453      	strb	r3, [r2, r1]
			status = LORAMAC_STATUS_OK;
 800c850:	2300      	movs	r3, #0
 800c852:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800c854:	e011      	b.n	800c87a <AddMacCommand+0x252>
	default:
		return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c856:	2302      	movs	r3, #2
 800c858:	e017      	b.n	800c88a <AddMacCommand+0x262>
		break;
 800c85a:	bf00      	nop
 800c85c:	e00e      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c85e:	bf00      	nop
 800c860:	e00c      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c862:	bf00      	nop
 800c864:	e00a      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c866:	bf00      	nop
 800c868:	e008      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c86a:	bf00      	nop
 800c86c:	e006      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c86e:	bf00      	nop
 800c870:	e004      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c872:	bf00      	nop
 800c874:	e002      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c876:	bf00      	nop
 800c878:	e000      	b.n	800c87c <AddMacCommand+0x254>
		break;
 800c87a:	bf00      	nop
	}
	if (status == LORAMAC_STATUS_OK)
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d102      	bne.n	800c888 <AddMacCommand+0x260>
	{
		MacCommandsInNextTx = true;
 800c882:	4b08      	ldr	r3, [pc, #32]	@ (800c8a4 <AddMacCommand+0x27c>)
 800c884:	2201      	movs	r2, #1
 800c886:	701a      	strb	r2, [r3, #0]
	}
	return status;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3714      	adds	r7, #20
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	2000676c 	.word	0x2000676c
 800c89c:	2000676b 	.word	0x2000676b
 800c8a0:	20006770 	.word	0x20006770
 800c8a4:	2000676a 	.word	0x2000676a

0800c8a8 <ParseMacCommandsToRepeat>:

static uint8_t ParseMacCommandsToRepeat(uint8_t *cmdBufIn, uint8_t length, uint8_t *cmdBufOut)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b087      	sub	sp, #28
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	72fb      	strb	r3, [r7, #11]
	uint8_t i = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	75fb      	strb	r3, [r7, #23]
	uint8_t cmdCount = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	75bb      	strb	r3, [r7, #22]

	if ((cmdBufIn == NULL) || (cmdBufOut == NULL))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <ParseMacCommandsToRepeat+0x22>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <ParseMacCommandsToRepeat+0x26>
	{
		return 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	e055      	b.n	800c97a <ParseMacCommandsToRepeat+0xd2>
	}

	for (i = 0; i < length; i++)
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]
 800c8d2:	e04d      	b.n	800c970 <ParseMacCommandsToRepeat+0xc8>
	{
		switch (cmdBufIn[i])
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	4413      	add	r3, r2
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	3b02      	subs	r3, #2
 800c8de:	2b08      	cmp	r3, #8
 800c8e0:	d842      	bhi.n	800c968 <ParseMacCommandsToRepeat+0xc0>
 800c8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8e8 <ParseMacCommandsToRepeat+0x40>)
 800c8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e8:	0800c969 	.word	0x0800c969
 800c8ec:	0800c961 	.word	0x0800c961
 800c8f0:	0800c969 	.word	0x0800c969
 800c8f4:	0800c90d 	.word	0x0800c90d
 800c8f8:	0800c959 	.word	0x0800c959
 800c8fc:	0800c961 	.word	0x0800c961
 800c900:	0800c941 	.word	0x0800c941
 800c904:	0800c969 	.word	0x0800c969
 800c908:	0800c90d 	.word	0x0800c90d
		{
		// STICKY
		case MOTE_MAC_DL_CHANNEL_ANS:
		case MOTE_MAC_RX_PARAM_SETUP_ANS:
		{ // 1 byte payload
			cmdBufOut[cmdCount++] = cmdBufIn[i++];
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	75fa      	strb	r2, [r7, #23]
 800c912:	461a      	mov	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	441a      	add	r2, r3
 800c918:	7dbb      	ldrb	r3, [r7, #22]
 800c91a:	1c59      	adds	r1, r3, #1
 800c91c:	75b9      	strb	r1, [r7, #22]
 800c91e:	4619      	mov	r1, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	440b      	add	r3, r1
 800c924:	7812      	ldrb	r2, [r2, #0]
 800c926:	701a      	strb	r2, [r3, #0]
			cmdBufOut[cmdCount++] = cmdBufIn[i];
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	441a      	add	r2, r3
 800c92e:	7dbb      	ldrb	r3, [r7, #22]
 800c930:	1c59      	adds	r1, r3, #1
 800c932:	75b9      	strb	r1, [r7, #22]
 800c934:	4619      	mov	r1, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	440b      	add	r3, r1
 800c93a:	7812      	ldrb	r2, [r2, #0]
 800c93c:	701a      	strb	r2, [r3, #0]
			break;
 800c93e:	e014      	b.n	800c96a <ParseMacCommandsToRepeat+0xc2>
		}
		case MOTE_MAC_RX_TIMING_SETUP_ANS:
		{ // 0 byte payload
			cmdBufOut[cmdCount++] = cmdBufIn[i];
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	441a      	add	r2, r3
 800c946:	7dbb      	ldrb	r3, [r7, #22]
 800c948:	1c59      	adds	r1, r3, #1
 800c94a:	75b9      	strb	r1, [r7, #22]
 800c94c:	4619      	mov	r1, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	440b      	add	r3, r1
 800c952:	7812      	ldrb	r2, [r2, #0]
 800c954:	701a      	strb	r2, [r3, #0]
			break;
 800c956:	e008      	b.n	800c96a <ParseMacCommandsToRepeat+0xc2>
		}
		// NON-STICKY
		case MOTE_MAC_DEV_STATUS_ANS:
		{ // 2 bytes payload
			i += 2;
 800c958:	7dfb      	ldrb	r3, [r7, #23]
 800c95a:	3302      	adds	r3, #2
 800c95c:	75fb      	strb	r3, [r7, #23]
			break;
 800c95e:	e004      	b.n	800c96a <ParseMacCommandsToRepeat+0xc2>
		}
		case MOTE_MAC_LINK_ADR_ANS:
		case MOTE_MAC_NEW_CHANNEL_ANS:
		{ // 1 byte payload
			i++;
 800c960:	7dfb      	ldrb	r3, [r7, #23]
 800c962:	3301      	adds	r3, #1
 800c964:	75fb      	strb	r3, [r7, #23]
			break;
 800c966:	e000      	b.n	800c96a <ParseMacCommandsToRepeat+0xc2>
		case MOTE_MAC_LINK_CHECK_REQ:
		{ // 0 byte payload
			break;
		}
		default:
			break;
 800c968:	bf00      	nop
	for (i = 0; i < length; i++)
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	3301      	adds	r3, #1
 800c96e:	75fb      	strb	r3, [r7, #23]
 800c970:	7dfa      	ldrb	r2, [r7, #23]
 800c972:	7afb      	ldrb	r3, [r7, #11]
 800c974:	429a      	cmp	r2, r3
 800c976:	d3ad      	bcc.n	800c8d4 <ParseMacCommandsToRepeat+0x2c>
		}
	}

	return cmdCount;
 800c978:	7dbb      	ldrb	r3, [r7, #22]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
 800c986:	bf00      	nop

0800c988 <ProcessMacCommands>:

static void ProcessMacCommands(uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, uint8_t snr)
{
 800c988:	b590      	push	{r4, r7, lr}
 800c98a:	b095      	sub	sp, #84	@ 0x54
 800c98c:	af02      	add	r7, sp, #8
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	4608      	mov	r0, r1
 800c992:	4611      	mov	r1, r2
 800c994:	461a      	mov	r2, r3
 800c996:	4603      	mov	r3, r0
 800c998:	70fb      	strb	r3, [r7, #3]
 800c99a:	460b      	mov	r3, r1
 800c99c:	70bb      	strb	r3, [r7, #2]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	707b      	strb	r3, [r7, #1]
	uint8_t status = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

	while (macIndex < commandsSize)
 800c9a8:	e25e      	b.n	800ce68 <ProcessMacCommands+0x4e0>
	{
		// Decode Frame MAC commands
		switch (payload[macIndex++])
 800c9aa:	78fb      	ldrb	r3, [r7, #3]
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	70fa      	strb	r2, [r7, #3]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	4413      	add	r3, r2
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	3b02      	subs	r3, #2
 800c9ba:	2b08      	cmp	r3, #8
 800c9bc:	f200 825a 	bhi.w	800ce74 <ProcessMacCommands+0x4ec>
 800c9c0:	a201      	add	r2, pc, #4	@ (adr r2, 800c9c8 <ProcessMacCommands+0x40>)
 800c9c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c6:	bf00      	nop
 800c9c8:	0800c9ed 	.word	0x0800c9ed
 800c9cc:	0800ca19 	.word	0x0800ca19
 800c9d0:	0800cb0f 	.word	0x0800cb0f
 800c9d4:	0800cb3d 	.word	0x0800cb3d
 800c9d8:	0800cc0b 	.word	0x0800cc0b
 800c9dc:	0800cc61 	.word	0x0800cc61
 800c9e0:	0800cd03 	.word	0x0800cd03
 800c9e4:	0800cd55 	.word	0x0800cd55
 800c9e8:	0800cde5 	.word	0x0800cde5
		{
		case SRV_MAC_LINK_CHECK_ANS:
			MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c9ec:	4b94      	ldr	r3, [pc, #592]	@ (800cc40 <ProcessMacCommands+0x2b8>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	705a      	strb	r2, [r3, #1]
			MlmeConfirm.DemodMargin = payload[macIndex++];
 800c9f2:	78fb      	ldrb	r3, [r7, #3]
 800c9f4:	1c5a      	adds	r2, r3, #1
 800c9f6:	70fa      	strb	r2, [r7, #3]
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	781a      	ldrb	r2, [r3, #0]
 800ca00:	4b8f      	ldr	r3, [pc, #572]	@ (800cc40 <ProcessMacCommands+0x2b8>)
 800ca02:	741a      	strb	r2, [r3, #16]
			MlmeConfirm.NbGateways = payload[macIndex++];
 800ca04:	78fb      	ldrb	r3, [r7, #3]
 800ca06:	1c5a      	adds	r2, r3, #1
 800ca08:	70fa      	strb	r2, [r7, #3]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4413      	add	r3, r2
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	4b8b      	ldr	r3, [pc, #556]	@ (800cc40 <ProcessMacCommands+0x2b8>)
 800ca14:	745a      	strb	r2, [r3, #17]
			break;
 800ca16:	e227      	b.n	800ce68 <ProcessMacCommands+0x4e0>
		case SRV_MAC_LINK_ADR_REQ:
		{
			LinkAdrReqParams_t linkAdrReq;
			int8_t linkAdrDatarate = DR_0;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			int8_t linkAdrTxPower = TX_POWER_0;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
			uint8_t linkAdrNbRep = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
			uint8_t linkAdrNbBytesParsed = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

			// Fill parameter structure
			linkAdrReq.Payload = &payload[macIndex - 1];
 800ca30:	78fb      	ldrb	r3, [r7, #3]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	4413      	add	r3, r2
 800ca38:	637b      	str	r3, [r7, #52]	@ 0x34
			linkAdrReq.PayloadSize = commandsSize - (macIndex - 1);
 800ca3a:	78ba      	ldrb	r2, [r7, #2]
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	3301      	adds	r3, #1
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
			linkAdrReq.AdrEnabled = AdrCtrlOn;
 800ca4a:	4b7e      	ldr	r3, [pc, #504]	@ (800cc44 <ProcessMacCommands+0x2bc>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
			linkAdrReq.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800ca52:	4b7d      	ldr	r3, [pc, #500]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800ca54:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ca58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
			linkAdrReq.CurrentDatarate = LoRaMacParams.ChannelsDatarate;
 800ca5c:	4b7a      	ldr	r3, [pc, #488]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800ca5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ca62:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			linkAdrReq.CurrentTxPower = LoRaMacParams.ChannelsTxPower;
 800ca66:	4b78      	ldr	r3, [pc, #480]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800ca68:	f993 3000 	ldrsb.w	r3, [r3]
 800ca6c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			linkAdrReq.CurrentNbRep = LoRaMacParams.ChannelsNbRep;
 800ca70:	4b75      	ldr	r3, [pc, #468]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800ca72:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca76:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

			// Process the ADR requests
			status = RegionLinkAdrReq(LoRaMacRegion, &linkAdrReq, &linkAdrDatarate,
 800ca7a:	4b74      	ldr	r3, [pc, #464]	@ (800cc4c <ProcessMacCommands+0x2c4>)
 800ca7c:	7818      	ldrb	r0, [r3, #0]
 800ca7e:	f107 0432 	add.w	r4, r7, #50	@ 0x32
 800ca82:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 800ca86:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800ca8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ca8e:	9301      	str	r3, [sp, #4]
 800ca90:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	4623      	mov	r3, r4
 800ca98:	f004 f880 	bl	8010b9c <RegionLinkAdrReq>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
									  &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed);

			if ((status & 0x07) == 0x07)
 800caa2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	2b07      	cmp	r3, #7
 800caac:	d10c      	bne.n	800cac8 <ProcessMacCommands+0x140>
			{
				LoRaMacParams.ChannelsDatarate = linkAdrDatarate;
 800caae:	f997 2033 	ldrsb.w	r2, [r7, #51]	@ 0x33
 800cab2:	4b65      	ldr	r3, [pc, #404]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800cab4:	705a      	strb	r2, [r3, #1]
				LoRaMacParams.ChannelsTxPower = linkAdrTxPower;
 800cab6:	f997 2032 	ldrsb.w	r2, [r7, #50]	@ 0x32
 800caba:	4b63      	ldr	r3, [pc, #396]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800cabc:	701a      	strb	r2, [r3, #0]
				LoRaMacParams.ChannelsNbRep = linkAdrNbRep;
 800cabe:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800cac2:	4b61      	ldr	r3, [pc, #388]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800cac4:	f883 2020 	strb.w	r2, [r3, #32]
			}

			// Add the answers to the buffer
			for (uint8_t i = 0; i < (linkAdrNbBytesParsed / 5); i++)
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cace:	e00b      	b.n	800cae8 <ProcessMacCommands+0x160>
			{
				AddMacCommand(MOTE_MAC_LINK_ADR_ANS, status, 0);
 800cad0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800cad4:	2200      	movs	r2, #0
 800cad6:	4619      	mov	r1, r3
 800cad8:	2003      	movs	r0, #3
 800cada:	f7ff fda5 	bl	800c628 <AddMacCommand>
			for (uint8_t i = 0; i < (linkAdrNbBytesParsed / 5); i++)
 800cade:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cae2:	3301      	adds	r3, #1
 800cae4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cae8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800caec:	4a58      	ldr	r2, [pc, #352]	@ (800cc50 <ProcessMacCommands+0x2c8>)
 800caee:	fba2 2303 	umull	r2, r3, r2, r3
 800caf2:	089b      	lsrs	r3, r3, #2
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d3e8      	bcc.n	800cad0 <ProcessMacCommands+0x148>
			}
			// Update MAC index
			macIndex += linkAdrNbBytesParsed - 1;
 800cafe:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800cb02:	78fb      	ldrb	r3, [r7, #3]
 800cb04:	4413      	add	r3, r2
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	70fb      	strb	r3, [r7, #3]
		}
		break;
 800cb0c:	e1ac      	b.n	800ce68 <ProcessMacCommands+0x4e0>
		case SRV_MAC_DUTY_CYCLE_REQ:
			MaxDCycle = payload[macIndex++];
 800cb0e:	78fb      	ldrb	r3, [r7, #3]
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	70fa      	strb	r2, [r7, #3]
 800cb14:	461a      	mov	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4413      	add	r3, r2
 800cb1a:	781a      	ldrb	r2, [r3, #0]
 800cb1c:	4b4d      	ldr	r3, [pc, #308]	@ (800cc54 <ProcessMacCommands+0x2cc>)
 800cb1e:	701a      	strb	r2, [r3, #0]
			AggregatedDCycle = 1 << MaxDCycle;
 800cb20:	4b4c      	ldr	r3, [pc, #304]	@ (800cc54 <ProcessMacCommands+0x2cc>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	461a      	mov	r2, r3
 800cb26:	2301      	movs	r3, #1
 800cb28:	4093      	lsls	r3, r2
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	4b4a      	ldr	r3, [pc, #296]	@ (800cc58 <ProcessMacCommands+0x2d0>)
 800cb2e:	801a      	strh	r2, [r3, #0]
			AddMacCommand(MOTE_MAC_DUTY_CYCLE_ANS, 0, 0);
 800cb30:	2200      	movs	r2, #0
 800cb32:	2100      	movs	r1, #0
 800cb34:	2004      	movs	r0, #4
 800cb36:	f7ff fd77 	bl	800c628 <AddMacCommand>
			break;
 800cb3a:	e195      	b.n	800ce68 <ProcessMacCommands+0x4e0>
		case SRV_MAC_RX_PARAM_SETUP_REQ:
		{
			RxParamSetupReqParams_t rxParamSetupReq;
			status = 0x07;
 800cb3c:	2307      	movs	r3, #7
 800cb3e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

			rxParamSetupReq.DrOffset = (payload[macIndex] >> 4) & 0x07;
 800cb42:	78fb      	ldrb	r3, [r7, #3]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	4413      	add	r3, r2
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	091b      	lsrs	r3, r3, #4
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	b25b      	sxtb	r3, r3
 800cb50:	f003 0307 	and.w	r3, r3, #7
 800cb54:	b25b      	sxtb	r3, r3
 800cb56:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800cb5a:	78fb      	ldrb	r3, [r7, #3]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	4413      	add	r3, r2
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	b25b      	sxtb	r3, r3
 800cb64:	f003 030f 	and.w	r3, r3, #15
 800cb68:	b25b      	sxtb	r3, r3
 800cb6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			macIndex++;
 800cb6e:	78fb      	ldrb	r3, [r7, #3]
 800cb70:	3301      	adds	r3, #1
 800cb72:	70fb      	strb	r3, [r7, #3]

			rxParamSetupReq.Frequency = (uint32_t)payload[macIndex++];
 800cb74:	78fb      	ldrb	r3, [r7, #3]
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	70fa      	strb	r2, [r7, #3]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4413      	add	r3, r2
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
			rxParamSetupReq.Frequency |= (uint32_t)payload[macIndex++] << 8;
 800cb84:	78fb      	ldrb	r3, [r7, #3]
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	70fa      	strb	r2, [r7, #3]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4413      	add	r3, r2
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	021a      	lsls	r2, r3, #8
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	4313      	orrs	r3, r2
 800cb98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			rxParamSetupReq.Frequency |= (uint32_t)payload[macIndex++] << 16;
 800cb9a:	78fb      	ldrb	r3, [r7, #3]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	70fa      	strb	r2, [r7, #3]
 800cba0:	461a      	mov	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4413      	add	r3, r2
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	041a      	lsls	r2, r3, #16
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	4313      	orrs	r3, r2
 800cbae:	62fb      	str	r3, [r7, #44]	@ 0x2c
			rxParamSetupReq.Frequency *= 100;
 800cbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb2:	2264      	movs	r2, #100	@ 0x64
 800cbb4:	fb02 f303 	mul.w	r3, r2, r3
 800cbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			// Perform request on region
			status = RegionRxParamSetupReq(LoRaMacRegion, &rxParamSetupReq);
 800cbba:	4b24      	ldr	r3, [pc, #144]	@ (800cc4c <ProcessMacCommands+0x2c4>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f004 f89b 	bl	8010d00 <RegionRxParamSetupReq>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

			if ((status & 0x07) == 0x07)
 800cbd0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800cbd4:	f003 0307 	and.w	r3, r3, #7
 800cbd8:	2b07      	cmp	r3, #7
 800cbda:	d10e      	bne.n	800cbfa <ProcessMacCommands+0x272>
			{
				LoRaMacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800cbdc:	f997 3028 	ldrsb.w	r3, [r7, #40]	@ 0x28
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	4b19      	ldr	r3, [pc, #100]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800cbe4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LoRaMacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	4a17      	ldr	r2, [pc, #92]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800cbec:	6253      	str	r3, [r2, #36]	@ 0x24
				LoRaMacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800cbee:	f997 3029 	ldrsb.w	r3, [r7, #41]	@ 0x29
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	4b14      	ldr	r3, [pc, #80]	@ (800cc48 <ProcessMacCommands+0x2c0>)
 800cbf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			}
			AddMacCommand(MOTE_MAC_RX_PARAM_SETUP_ANS, status, 0);
 800cbfa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800cbfe:	2200      	movs	r2, #0
 800cc00:	4619      	mov	r1, r3
 800cc02:	2005      	movs	r0, #5
 800cc04:	f7ff fd10 	bl	800c628 <AddMacCommand>
		}
		break;
 800cc08:	e12e      	b.n	800ce68 <ProcessMacCommands+0x4e0>
		case SRV_MAC_DEV_STATUS_REQ:
		{
			uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800cc0a:	23ff      	movs	r3, #255	@ 0xff
 800cc0c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			if ((LoRaMacCallbacks != NULL) && (LoRaMacCallbacks->GetBatteryLevel != NULL))
 800cc10:	4b12      	ldr	r3, [pc, #72]	@ (800cc5c <ProcessMacCommands+0x2d4>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00b      	beq.n	800cc30 <ProcessMacCommands+0x2a8>
 800cc18:	4b10      	ldr	r3, [pc, #64]	@ (800cc5c <ProcessMacCommands+0x2d4>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d006      	beq.n	800cc30 <ProcessMacCommands+0x2a8>
			{
				batteryLevel = LoRaMacCallbacks->GetBatteryLevel();
 800cc22:	4b0e      	ldr	r3, [pc, #56]	@ (800cc5c <ProcessMacCommands+0x2d4>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4798      	blx	r3
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			}
			AddMacCommand(MOTE_MAC_DEV_STATUS_ANS, batteryLevel, snr);
 800cc30:	787a      	ldrb	r2, [r7, #1]
 800cc32:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800cc36:	4619      	mov	r1, r3
 800cc38:	2006      	movs	r0, #6
 800cc3a:	f7ff fcf5 	bl	800c628 <AddMacCommand>
			break;
 800cc3e:	e113      	b.n	800ce68 <ProcessMacCommands+0x4e0>
 800cc40:	20006a50 	.word	0x20006a50
 800cc44:	20006762 	.word	0x20006762
 800cc48:	20006870 	.word	0x20006870
 800cc4c:	20006510 	.word	0x20006510
 800cc50:	cccccccd 	.word	0xcccccccd
 800cc54:	200068e1 	.word	0x200068e1
 800cc58:	200068e2 	.word	0x200068e2
 800cc5c:	20006934 	.word	0x20006934
		}
		case SRV_MAC_NEW_CHANNEL_REQ:
		{
			NewChannelReqParams_t newChannelReq;
			ChannelParams_t chParam;
			status = 0x03;
 800cc60:	2303      	movs	r3, #3
 800cc62:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

			newChannelReq.ChannelId = payload[macIndex++];
 800cc66:	78fb      	ldrb	r3, [r7, #3]
 800cc68:	1c5a      	adds	r2, r3, #1
 800cc6a:	70fa      	strb	r2, [r7, #3]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4413      	add	r3, r2
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	b25b      	sxtb	r3, r3
 800cc76:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			newChannelReq.NewChannel = &chParam;
 800cc7a:	f107 0314 	add.w	r3, r7, #20
 800cc7e:	623b      	str	r3, [r7, #32]

			chParam.Frequency = (uint32_t)payload[macIndex++];
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	1c5a      	adds	r2, r3, #1
 800cc84:	70fa      	strb	r2, [r7, #3]
 800cc86:	461a      	mov	r2, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	617b      	str	r3, [r7, #20]
			chParam.Frequency |= (uint32_t)payload[macIndex++] << 8;
 800cc90:	78fb      	ldrb	r3, [r7, #3]
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	70fa      	strb	r2, [r7, #3]
 800cc96:	461a      	mov	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	021a      	lsls	r2, r3, #8
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	617b      	str	r3, [r7, #20]
			chParam.Frequency |= (uint32_t)payload[macIndex++] << 16;
 800cca6:	78fb      	ldrb	r3, [r7, #3]
 800cca8:	1c5a      	adds	r2, r3, #1
 800ccaa:	70fa      	strb	r2, [r7, #3]
 800ccac:	461a      	mov	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	041a      	lsls	r2, r3, #16
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]
			chParam.Frequency *= 100;
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2264      	movs	r2, #100	@ 0x64
 800ccc0:	fb02 f303 	mul.w	r3, r2, r3
 800ccc4:	617b      	str	r3, [r7, #20]
			chParam.Rx1Frequency = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	61bb      	str	r3, [r7, #24]
			chParam.DrRange.Value = payload[macIndex++];
 800ccca:	78fb      	ldrb	r3, [r7, #3]
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	70fa      	strb	r2, [r7, #3]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	b25b      	sxtb	r3, r3
 800ccda:	773b      	strb	r3, [r7, #28]

			status = RegionNewChannelReq(LoRaMacRegion, &newChannelReq);
 800ccdc:	4b67      	ldr	r3, [pc, #412]	@ (800ce7c <ProcessMacCommands+0x4f4>)
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	f107 0220 	add.w	r2, r7, #32
 800cce4:	4611      	mov	r1, r2
 800cce6:	4618      	mov	r0, r3
 800cce8:	f004 f876 	bl	8010dd8 <RegionNewChannelReq>
 800ccec:	4603      	mov	r3, r0
 800ccee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

			AddMacCommand(MOTE_MAC_NEW_CHANNEL_ANS, status, 0);
 800ccf2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	2007      	movs	r0, #7
 800ccfc:	f7ff fc94 	bl	800c628 <AddMacCommand>
		}
		break;
 800cd00:	e0b2      	b.n	800ce68 <ProcessMacCommands+0x4e0>
		case SRV_MAC_RX_TIMING_SETUP_REQ:
		{
			uint8_t delay = payload[macIndex++] & 0x0F;
 800cd02:	78fb      	ldrb	r3, [r7, #3]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	70fa      	strb	r2, [r7, #3]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	f003 030f 	and.w	r3, r3, #15
 800cd14:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

			if (delay == 0)
 800cd18:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <ProcessMacCommands+0x3a2>
			{
				delay++;
 800cd20:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800cd24:	3301      	adds	r3, #1
 800cd26:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
			}
			LoRaMacParams.ReceiveDelay1 = delay * 1000;
 800cd2a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800cd2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cd32:	fb02 f303 	mul.w	r3, r2, r3
 800cd36:	461a      	mov	r2, r3
 800cd38:	4b51      	ldr	r3, [pc, #324]	@ (800ce80 <ProcessMacCommands+0x4f8>)
 800cd3a:	611a      	str	r2, [r3, #16]
			LoRaMacParams.ReceiveDelay2 = LoRaMacParams.ReceiveDelay1 + 1000;
 800cd3c:	4b50      	ldr	r3, [pc, #320]	@ (800ce80 <ProcessMacCommands+0x4f8>)
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cd44:	4a4e      	ldr	r2, [pc, #312]	@ (800ce80 <ProcessMacCommands+0x4f8>)
 800cd46:	6153      	str	r3, [r2, #20]
			AddMacCommand(MOTE_MAC_RX_TIMING_SETUP_ANS, 0, 0);
 800cd48:	2200      	movs	r2, #0
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	2008      	movs	r0, #8
 800cd4e:	f7ff fc6b 	bl	800c628 <AddMacCommand>
		}
		break;
 800cd52:	e089      	b.n	800ce68 <ProcessMacCommands+0x4e0>
		case SRV_MAC_TX_PARAM_SETUP_REQ:
		{
			TxParamSetupReqParams_t txParamSetupReq;
			uint8_t eirpDwellTime = payload[macIndex++];
 800cd54:	78fb      	ldrb	r3, [r7, #3]
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	70fa      	strb	r2, [r7, #3]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4413      	add	r3, r2
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

			txParamSetupReq.UplinkDwellTime = 0;
 800cd66:	2300      	movs	r3, #0
 800cd68:	743b      	strb	r3, [r7, #16]
			txParamSetupReq.DownlinkDwellTime = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	747b      	strb	r3, [r7, #17]

			if ((eirpDwellTime & 0x20) == 0x20)
 800cd6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd72:	f003 0320 	and.w	r3, r3, #32
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <ProcessMacCommands+0x3f6>
			{
				txParamSetupReq.DownlinkDwellTime = 1;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	747b      	strb	r3, [r7, #17]
			}
			if ((eirpDwellTime & 0x10) == 0x10)
 800cd7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd82:	f003 0310 	and.w	r3, r3, #16
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <ProcessMacCommands+0x406>
			{
				txParamSetupReq.UplinkDwellTime = 1;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	743b      	strb	r3, [r7, #16]
			}
			txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800cd8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cd92:	f003 030f 	and.w	r3, r3, #15
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	74bb      	strb	r3, [r7, #18]

			// Check the status for correctness
			if (RegionTxParamSetupReq(LoRaMacRegion, &txParamSetupReq) != -1)
 800cd9a:	4b38      	ldr	r3, [pc, #224]	@ (800ce7c <ProcessMacCommands+0x4f4>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	f107 0210 	add.w	r2, r7, #16
 800cda2:	4611      	mov	r1, r2
 800cda4:	4618      	mov	r0, r3
 800cda6:	f004 f883 	bl	8010eb0 <RegionTxParamSetupReq>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdb0:	d059      	beq.n	800ce66 <ProcessMacCommands+0x4de>
			{
				// Accept command
				LoRaMacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800cdb2:	7c3a      	ldrb	r2, [r7, #16]
 800cdb4:	4b32      	ldr	r3, [pc, #200]	@ (800ce80 <ProcessMacCommands+0x4f8>)
 800cdb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
				LoRaMacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800cdba:	7c7a      	ldrb	r2, [r7, #17]
 800cdbc:	4b30      	ldr	r3, [pc, #192]	@ (800ce80 <ProcessMacCommands+0x4f8>)
 800cdbe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
				LoRaMacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800cdc2:	7cbb      	ldrb	r3, [r7, #18]
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	4b2f      	ldr	r3, [pc, #188]	@ (800ce84 <ProcessMacCommands+0x4fc>)
 800cdc8:	5c9b      	ldrb	r3, [r3, r2]
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd2:	4b2b      	ldr	r3, [pc, #172]	@ (800ce80 <ProcessMacCommands+0x4f8>)
 800cdd4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				// Add command response
				AddMacCommand(MOTE_MAC_TX_PARAM_SETUP_ANS, 0, 0);
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2100      	movs	r1, #0
 800cddc:	2009      	movs	r0, #9
 800cdde:	f7ff fc23 	bl	800c628 <AddMacCommand>
			}
		}
		break;
 800cde2:	e040      	b.n	800ce66 <ProcessMacCommands+0x4de>
		case SRV_MAC_DL_CHANNEL_REQ:
		{
			DlChannelReqParams_t dlChannelReq;
			status = 0x03;
 800cde4:	2303      	movs	r3, #3
 800cde6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

			dlChannelReq.ChannelId = payload[macIndex++];
 800cdea:	78fb      	ldrb	r3, [r7, #3]
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	70fa      	strb	r2, [r7, #3]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	723b      	strb	r3, [r7, #8]
			dlChannelReq.Rx1Frequency = (uint32_t)payload[macIndex++];
 800cdfa:	78fb      	ldrb	r3, [r7, #3]
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	70fa      	strb	r2, [r7, #3]
 800ce00:	461a      	mov	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4413      	add	r3, r2
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	60fb      	str	r3, [r7, #12]
			dlChannelReq.Rx1Frequency |= (uint32_t)payload[macIndex++] << 8;
 800ce0a:	78fb      	ldrb	r3, [r7, #3]
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	70fa      	strb	r2, [r7, #3]
 800ce10:	461a      	mov	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4413      	add	r3, r2
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	021a      	lsls	r2, r3, #8
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	60fb      	str	r3, [r7, #12]
			dlChannelReq.Rx1Frequency |= (uint32_t)payload[macIndex++] << 16;
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	1c5a      	adds	r2, r3, #1
 800ce24:	70fa      	strb	r2, [r7, #3]
 800ce26:	461a      	mov	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	041a      	lsls	r2, r3, #16
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	60fb      	str	r3, [r7, #12]
			dlChannelReq.Rx1Frequency *= 100;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2264      	movs	r2, #100	@ 0x64
 800ce3a:	fb02 f303 	mul.w	r3, r2, r3
 800ce3e:	60fb      	str	r3, [r7, #12]

			status = RegionDlChannelReq(LoRaMacRegion, &dlChannelReq);
 800ce40:	4b0e      	ldr	r3, [pc, #56]	@ (800ce7c <ProcessMacCommands+0x4f4>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	f107 0208 	add.w	r2, r7, #8
 800ce48:	4611      	mov	r1, r2
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f004 f89c 	bl	8010f88 <RegionDlChannelReq>
 800ce50:	4603      	mov	r3, r0
 800ce52:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

			AddMacCommand(MOTE_MAC_DL_CHANNEL_ANS, status, 0);
 800ce56:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	200a      	movs	r0, #10
 800ce60:	f7ff fbe2 	bl	800c628 <AddMacCommand>
		}
		break;
 800ce64:	e000      	b.n	800ce68 <ProcessMacCommands+0x4e0>
		break;
 800ce66:	bf00      	nop
	while (macIndex < commandsSize)
 800ce68:	78fa      	ldrb	r2, [r7, #3]
 800ce6a:	78bb      	ldrb	r3, [r7, #2]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	f4ff ad9c 	bcc.w	800c9aa <ProcessMacCommands+0x22>
 800ce72:	e000      	b.n	800ce76 <ProcessMacCommands+0x4ee>
		default:
			// Unknown command. ABORT MAC commands processing
			return;
 800ce74:	bf00      	nop
		}
	}
}
 800ce76:	374c      	adds	r7, #76	@ 0x4c
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd90      	pop	{r4, r7, pc}
 800ce7c:	20006510 	.word	0x20006510
 800ce80:	20006870 	.word	0x20006870
 800ce84:	08025158 	.word	0x08025158

0800ce88 <Send>:

LoRaMacStatus_t Send(LoRaMacHeader_t *macHdr, uint8_t fPort, void *fBuffer, uint16_t fBufferSize)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b088      	sub	sp, #32
 800ce8c:	af02      	add	r7, sp, #8
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	607a      	str	r2, [r7, #4]
 800ce92:	461a      	mov	r2, r3
 800ce94:	460b      	mov	r3, r1
 800ce96:	72fb      	strb	r3, [r7, #11]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	813b      	strh	r3, [r7, #8]
	LoRaMacFrameCtrl_t fCtrl;
	LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	75fb      	strb	r3, [r7, #23]

	fCtrl.Value = 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	753b      	strb	r3, [r7, #20]
	fCtrl.Bits.FOptsLen = 0;
 800cea4:	7d3b      	ldrb	r3, [r7, #20]
 800cea6:	f36f 0303 	bfc	r3, #0, #4
 800ceaa:	753b      	strb	r3, [r7, #20]
	fCtrl.Bits.FPending = 0;
 800ceac:	7d3b      	ldrb	r3, [r7, #20]
 800ceae:	f36f 1304 	bfc	r3, #4, #1
 800ceb2:	753b      	strb	r3, [r7, #20]
	fCtrl.Bits.Ack = false;
 800ceb4:	7d3b      	ldrb	r3, [r7, #20]
 800ceb6:	f36f 1345 	bfc	r3, #5, #1
 800ceba:	753b      	strb	r3, [r7, #20]
	fCtrl.Bits.AdrAckReq = false;
 800cebc:	7d3b      	ldrb	r3, [r7, #20]
 800cebe:	f36f 1386 	bfc	r3, #6, #1
 800cec2:	753b      	strb	r3, [r7, #20]
	fCtrl.Bits.Adr = AdrCtrlOn;
 800cec4:	4b14      	ldr	r3, [pc, #80]	@ (800cf18 <Send+0x90>)
 800cec6:	781a      	ldrb	r2, [r3, #0]
 800cec8:	7d3b      	ldrb	r3, [r7, #20]
 800ceca:	f362 13c7 	bfi	r3, r2, #7, #1
 800cece:	753b      	strb	r3, [r7, #20]

	// Prepare the frame
	status = PrepareFrame(macHdr, &fCtrl, fPort, fBuffer, fBufferSize);
 800ced0:	7afa      	ldrb	r2, [r7, #11]
 800ced2:	f107 0114 	add.w	r1, r7, #20
 800ced6:	893b      	ldrh	r3, [r7, #8]
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f000 fad3 	bl	800d488 <PrepareFrame>
 800cee2:	4603      	mov	r3, r0
 800cee4:	75fb      	strb	r3, [r7, #23]

	// Validate status
	if (status != LORAMAC_STATUS_OK)
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <Send+0x68>
	{
		return status;
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	e00e      	b.n	800cf0e <Send+0x86>
	}

	// Reset confirm parameters
	McpsConfirm.NbRetries = 0;
 800cef0:	4b0a      	ldr	r3, [pc, #40]	@ (800cf1c <Send+0x94>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	715a      	strb	r2, [r3, #5]
	McpsConfirm.AckReceived = false;
 800cef6:	4b09      	ldr	r3, [pc, #36]	@ (800cf1c <Send+0x94>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	711a      	strb	r2, [r3, #4]
	McpsConfirm.UpLinkCounter = UpLinkCounter;
 800cefc:	4b08      	ldr	r3, [pc, #32]	@ (800cf20 <Send+0x98>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a06      	ldr	r2, [pc, #24]	@ (800cf1c <Send+0x94>)
 800cf02:	6113      	str	r3, [r2, #16]

	status = ScheduleTx();
 800cf04:	f000 f80e 	bl	800cf24 <ScheduleTx>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	75fb      	strb	r3, [r7, #23]

	return status;
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20006762 	.word	0x20006762
 800cf1c:	20006a38 	.word	0x20006a38
 800cf20:	20006758 	.word	0x20006758

0800cf24 <ScheduleTx>:

bool send_join_now = true;

static LoRaMacStatus_t ScheduleTx(void)
{
 800cf24:	b590      	push	{r4, r7, lr}
 800cf26:	b08b      	sub	sp, #44	@ 0x2c
 800cf28:	af02      	add	r7, sp, #8
	TimerTime_t dutyCycleTimeOff = 0;
 800cf2a:	f04f 0200 	mov.w	r2, #0
 800cf2e:	f04f 0300 	mov.w	r3, #0
 800cf32:	e9c7 2306 	strd	r2, r3, [r7, #24]
	NextChanParams_t nextChan;

	// Check if the device is off
	if (MaxDCycle == 255)
 800cf36:	4b6f      	ldr	r3, [pc, #444]	@ (800d0f4 <ScheduleTx+0x1d0>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2bff      	cmp	r3, #255	@ 0xff
 800cf3c:	d101      	bne.n	800cf42 <ScheduleTx+0x1e>
	{
		return LORAMAC_STATUS_DEVICE_OFF;
 800cf3e:	2309      	movs	r3, #9
 800cf40:	e0d4      	b.n	800d0ec <ScheduleTx+0x1c8>
	}
	if (MaxDCycle == 0)
 800cf42:	4b6c      	ldr	r3, [pc, #432]	@ (800d0f4 <ScheduleTx+0x1d0>)
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d106      	bne.n	800cf58 <ScheduleTx+0x34>
	{
		AggregatedTimeOff = 0;
 800cf4a:	496b      	ldr	r1, [pc, #428]	@ (800d0f8 <ScheduleTx+0x1d4>)
 800cf4c:	f04f 0200 	mov.w	r2, #0
 800cf50:	f04f 0300 	mov.w	r3, #0
 800cf54:	e9c1 2300 	strd	r2, r3, [r1]
	}

	// Update Backoff
	CalculateBackOff(LastTxChannel);
 800cf58:	4b68      	ldr	r3, [pc, #416]	@ (800d0fc <ScheduleTx+0x1d8>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f000 f8ef 	bl	800d140 <CalculateBackOff>

	nextChan.AggrTimeOff = AggregatedTimeOff;
 800cf62:	4b65      	ldr	r3, [pc, #404]	@ (800d0f8 <ScheduleTx+0x1d4>)
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	e9c7 2300 	strd	r2, r3, [r7]
	nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 800cf6c:	4b64      	ldr	r3, [pc, #400]	@ (800d100 <ScheduleTx+0x1dc>)
 800cf6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800cf72:	743b      	strb	r3, [r7, #16]
	nextChan.DutyCycleEnabled = DutyCycleOn;
 800cf74:	4b63      	ldr	r3, [pc, #396]	@ (800d104 <ScheduleTx+0x1e0>)
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	74bb      	strb	r3, [r7, #18]
	//		nextChan.Joined = IsLoRaMacNetworkJoined;
	nextChan.Joined = (IsLoRaMacNetworkJoined == JOIN_OK);
 800cf7a:	4b63      	ldr	r3, [pc, #396]	@ (800d108 <ScheduleTx+0x1e4>)
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	bf0c      	ite	eq
 800cf82:	2301      	moveq	r3, #1
 800cf84:	2300      	movne	r3, #0
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	747b      	strb	r3, [r7, #17]
	nextChan.LastAggrTx = AggregatedLastTxDoneTime;
 800cf8a:	4b60      	ldr	r3, [pc, #384]	@ (800d10c <ScheduleTx+0x1e8>)
 800cf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf90:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// Select channel
	while (RegionNextChannel(LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff) == false)
 800cf94:	e008      	b.n	800cfa8 <ScheduleTx+0x84>
	{
		// Set the default datarate
		LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800cf96:	4b5e      	ldr	r3, [pc, #376]	@ (800d110 <ScheduleTx+0x1ec>)
 800cf98:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800cf9c:	4b58      	ldr	r3, [pc, #352]	@ (800d100 <ScheduleTx+0x1dc>)
 800cf9e:	705a      	strb	r2, [r3, #1]
		// Update datarate in the function parameters
		nextChan.Datarate = LoRaMacParams.ChannelsDatarate;
 800cfa0:	4b57      	ldr	r3, [pc, #348]	@ (800d100 <ScheduleTx+0x1dc>)
 800cfa2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800cfa6:	743b      	strb	r3, [r7, #16]
	while (RegionNextChannel(LoRaMacRegion, &nextChan, &Channel, &dutyCycleTimeOff, &AggregatedTimeOff) == false)
 800cfa8:	4b5a      	ldr	r3, [pc, #360]	@ (800d114 <ScheduleTx+0x1f0>)
 800cfaa:	7818      	ldrb	r0, [r3, #0]
 800cfac:	f107 0318 	add.w	r3, r7, #24
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	4a51      	ldr	r2, [pc, #324]	@ (800d0f8 <ScheduleTx+0x1d4>)
 800cfb4:	9200      	str	r2, [sp, #0]
 800cfb6:	4a58      	ldr	r2, [pc, #352]	@ (800d118 <ScheduleTx+0x1f4>)
 800cfb8:	f004 f91e 	bl	80111f8 <RegionNextChannel>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	f083 0301 	eor.w	r3, r3, #1
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1e6      	bne.n	800cf96 <ScheduleTx+0x72>
	}

	// Compute Rx1 windows parameters
	RegionComputeRxWindowParameters(LoRaMacRegion,
 800cfc8:	4b52      	ldr	r3, [pc, #328]	@ (800d114 <ScheduleTx+0x1f0>)
 800cfca:	781c      	ldrb	r4, [r3, #0]
									RegionApplyDrOffset(LoRaMacRegion, LoRaMacParams.DownlinkDwellTime, LoRaMacParams.ChannelsDatarate, LoRaMacParams.Rx1DrOffset),
 800cfcc:	4b51      	ldr	r3, [pc, #324]	@ (800d114 <ScheduleTx+0x1f0>)
 800cfce:	7818      	ldrb	r0, [r3, #0]
 800cfd0:	4b4b      	ldr	r3, [pc, #300]	@ (800d100 <ScheduleTx+0x1dc>)
 800cfd2:	f893 102d 	ldrb.w	r1, [r3, #45]	@ 0x2d
 800cfd6:	4b4a      	ldr	r3, [pc, #296]	@ (800d100 <ScheduleTx+0x1dc>)
 800cfd8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800cfdc:	4b48      	ldr	r3, [pc, #288]	@ (800d100 <ScheduleTx+0x1dc>)
 800cfde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cfe2:	b25b      	sxtb	r3, r3
 800cfe4:	f004 fa00 	bl	80113e8 <RegionApplyDrOffset>
 800cfe8:	4603      	mov	r3, r0
	RegionComputeRxWindowParameters(LoRaMacRegion,
 800cfea:	b259      	sxtb	r1, r3
 800cfec:	4b44      	ldr	r3, [pc, #272]	@ (800d100 <ScheduleTx+0x1dc>)
 800cfee:	7a1a      	ldrb	r2, [r3, #8]
 800cff0:	4b43      	ldr	r3, [pc, #268]	@ (800d100 <ScheduleTx+0x1dc>)
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	4849      	ldr	r0, [pc, #292]	@ (800d11c <ScheduleTx+0x1f8>)
 800cff6:	9000      	str	r0, [sp, #0]
 800cff8:	4620      	mov	r0, r4
 800cffa:	f003 fc31 	bl	8010860 <RegionComputeRxWindowParameters>
									LoRaMacParams.MinRxSymbols,
									LoRaMacParams.SystemMaxRxError,
									&RxWindow1Config);
	// Compute Rx2 windows parameters
	RegionComputeRxWindowParameters(LoRaMacRegion,
 800cffe:	4b45      	ldr	r3, [pc, #276]	@ (800d114 <ScheduleTx+0x1f0>)
 800d000:	7818      	ldrb	r0, [r3, #0]
									LoRaMacParams.Rx2Channel.Datarate,
 800d002:	4b3f      	ldr	r3, [pc, #252]	@ (800d100 <ScheduleTx+0x1dc>)
 800d004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	RegionComputeRxWindowParameters(LoRaMacRegion,
 800d008:	b259      	sxtb	r1, r3
 800d00a:	4b3d      	ldr	r3, [pc, #244]	@ (800d100 <ScheduleTx+0x1dc>)
 800d00c:	7a1a      	ldrb	r2, [r3, #8]
 800d00e:	4b3c      	ldr	r3, [pc, #240]	@ (800d100 <ScheduleTx+0x1dc>)
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	4c43      	ldr	r4, [pc, #268]	@ (800d120 <ScheduleTx+0x1fc>)
 800d014:	9400      	str	r4, [sp, #0]
 800d016:	f003 fc23 	bl	8010860 <RegionComputeRxWindowParameters>
									LoRaMacParams.MinRxSymbols,
									LoRaMacParams.SystemMaxRxError,
									&RxWindow2Config);

	if (IsLoRaMacNetworkJoined != JOIN_OK)
 800d01a:	4b3b      	ldr	r3, [pc, #236]	@ (800d108 <ScheduleTx+0x1e4>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d00e      	beq.n	800d040 <ScheduleTx+0x11c>
	{
		RxWindow1Delay = LoRaMacParams.JoinAcceptDelay1 + RxWindow1Config.WindowOffset;
 800d022:	4b37      	ldr	r3, [pc, #220]	@ (800d100 <ScheduleTx+0x1dc>)
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	4a3d      	ldr	r2, [pc, #244]	@ (800d11c <ScheduleTx+0x1f8>)
 800d028:	68d2      	ldr	r2, [r2, #12]
 800d02a:	4413      	add	r3, r2
 800d02c:	4a3d      	ldr	r2, [pc, #244]	@ (800d124 <ScheduleTx+0x200>)
 800d02e:	6013      	str	r3, [r2, #0]
		RxWindow2Delay = LoRaMacParams.JoinAcceptDelay2 + RxWindow2Config.WindowOffset;
 800d030:	4b33      	ldr	r3, [pc, #204]	@ (800d100 <ScheduleTx+0x1dc>)
 800d032:	69db      	ldr	r3, [r3, #28]
 800d034:	4a3a      	ldr	r2, [pc, #232]	@ (800d120 <ScheduleTx+0x1fc>)
 800d036:	68d2      	ldr	r2, [r2, #12]
 800d038:	4413      	add	r3, r2
 800d03a:	4a3b      	ldr	r2, [pc, #236]	@ (800d128 <ScheduleTx+0x204>)
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	e01f      	b.n	800d080 <ScheduleTx+0x15c>
	}
	else
	{
		if (ValidatePayloadLength(LoRaMacTxPayloadLen, LoRaMacParams.ChannelsDatarate, MacCommandsBufferIndex) == false)
 800d040:	4b3a      	ldr	r3, [pc, #232]	@ (800d12c <ScheduleTx+0x208>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	4a2e      	ldr	r2, [pc, #184]	@ (800d100 <ScheduleTx+0x1dc>)
 800d046:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800d04a:	4a39      	ldr	r2, [pc, #228]	@ (800d130 <ScheduleTx+0x20c>)
 800d04c:	7812      	ldrb	r2, [r2, #0]
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff faa8 	bl	800c5a4 <ValidatePayloadLength>
 800d054:	4603      	mov	r3, r0
 800d056:	f083 0301 	eor.w	r3, r3, #1
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d001      	beq.n	800d064 <ScheduleTx+0x140>
		{
			return LORAMAC_STATUS_LENGTH_ERROR;
 800d060:	2308      	movs	r3, #8
 800d062:	e043      	b.n	800d0ec <ScheduleTx+0x1c8>
		}
		RxWindow1Delay = LoRaMacParams.ReceiveDelay1 + RxWindow1Config.WindowOffset;
 800d064:	4b26      	ldr	r3, [pc, #152]	@ (800d100 <ScheduleTx+0x1dc>)
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	4a2c      	ldr	r2, [pc, #176]	@ (800d11c <ScheduleTx+0x1f8>)
 800d06a:	68d2      	ldr	r2, [r2, #12]
 800d06c:	4413      	add	r3, r2
 800d06e:	4a2d      	ldr	r2, [pc, #180]	@ (800d124 <ScheduleTx+0x200>)
 800d070:	6013      	str	r3, [r2, #0]
		RxWindow2Delay = LoRaMacParams.ReceiveDelay2 + RxWindow2Config.WindowOffset;
 800d072:	4b23      	ldr	r3, [pc, #140]	@ (800d100 <ScheduleTx+0x1dc>)
 800d074:	695b      	ldr	r3, [r3, #20]
 800d076:	4a2a      	ldr	r2, [pc, #168]	@ (800d120 <ScheduleTx+0x1fc>)
 800d078:	68d2      	ldr	r2, [r2, #12]
 800d07a:	4413      	add	r3, r2
 800d07c:	4a2a      	ldr	r2, [pc, #168]	@ (800d128 <ScheduleTx+0x204>)
 800d07e:	6013      	str	r3, [r2, #0]
	}

	/*******************************************/
	/// \todo weak fix for delayed join on EU868
	if (LoRaMacRegion == LORAMAC_REGION_EU868)
 800d080:	4b24      	ldr	r3, [pc, #144]	@ (800d114 <ScheduleTx+0x1f0>)
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	2b05      	cmp	r3, #5
 800d086:	d117      	bne.n	800d0b8 <ScheduleTx+0x194>
	{
		if (IsLoRaMacNetworkJoined == JOIN_OK)
 800d088:	4b1f      	ldr	r3, [pc, #124]	@ (800d108 <ScheduleTx+0x1e4>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d102      	bne.n	800d096 <ScheduleTx+0x172>
		{
			LOG_LIB("LM", "Reset send_join_now to true");
			send_join_now = true;
 800d090:	4b28      	ldr	r3, [pc, #160]	@ (800d134 <ScheduleTx+0x210>)
 800d092:	2201      	movs	r2, #1
 800d094:	701a      	strb	r2, [r3, #0]
		}

		if ((IsLoRaMacNetworkJoined == JOIN_ONGOING) && (send_join_now))
 800d096:	4b1c      	ldr	r3, [pc, #112]	@ (800d108 <ScheduleTx+0x1e4>)
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d10c      	bne.n	800d0b8 <ScheduleTx+0x194>
 800d09e:	4b25      	ldr	r3, [pc, #148]	@ (800d134 <ScheduleTx+0x210>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d008      	beq.n	800d0b8 <ScheduleTx+0x194>
		{
			LOG_LIB("LM", "dutyCycleTimeOff was = %d", dutyCycleTimeOff);
			dutyCycleTimeOff = 0;
 800d0a6:	f04f 0200 	mov.w	r2, #0
 800d0aa:	f04f 0300 	mov.w	r3, #0
 800d0ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
			send_join_now = false;
 800d0b2:	4b20      	ldr	r3, [pc, #128]	@ (800d134 <ScheduleTx+0x210>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	701a      	strb	r2, [r3, #0]
		}
	}
	/*******************************************/

	// Schedule transmission of frame
	if (dutyCycleTimeOff == 0)
 800d0b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	d106      	bne.n	800d0ce <ScheduleTx+0x1aa>
	{
		// Try to send now
		return SendFrameOnChannel(Channel);
 800d0c0:	4b15      	ldr	r3, [pc, #84]	@ (800d118 <ScheduleTx+0x1f4>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 fca5 	bl	800da14 <SendFrameOnChannel>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	e00e      	b.n	800d0ec <ScheduleTx+0x1c8>
	}
	else
	{
		// Send later - prepare timer
		LoRaMacState |= LORAMAC_TX_DELAYED;
 800d0ce:	4b1a      	ldr	r3, [pc, #104]	@ (800d138 <ScheduleTx+0x214>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f043 0310 	orr.w	r3, r3, #16
 800d0d6:	4a18      	ldr	r2, [pc, #96]	@ (800d138 <ScheduleTx+0x214>)
 800d0d8:	6013      	str	r3, [r2, #0]
		TimerSetValue(&TxDelayedTimer, dutyCycleTimeOff);
 800d0da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0de:	4817      	ldr	r0, [pc, #92]	@ (800d13c <ScheduleTx+0x218>)
 800d0e0:	f013 ff8a 	bl	8020ff8 <util_timer_set_period>
		TimerStart(&TxDelayedTimer);
 800d0e4:	4815      	ldr	r0, [pc, #84]	@ (800d13c <ScheduleTx+0x218>)
 800d0e6:	f013 fea3 	bl	8020e30 <util_timer_start>

		return LORAMAC_STATUS_OK;
 800d0ea:	2300      	movs	r3, #0
	}
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3724      	adds	r7, #36	@ 0x24
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd90      	pop	{r4, r7, pc}
 800d0f4:	200068e1 	.word	0x200068e1
 800d0f8:	200068f0 	.word	0x200068f0
 800d0fc:	200068fa 	.word	0x200068fa
 800d100:	20006870 	.word	0x20006870
 800d104:	200068f8 	.word	0x200068f8
 800d108:	20006761 	.word	0x20006761
 800d10c:	200068e8 	.word	0x200068e8
 800d110:	200068a8 	.word	0x200068a8
 800d114:	20006510 	.word	0x20006510
 800d118:	200068f9 	.word	0x200068f9
 800d11c:	200069c0 	.word	0x200069c0
 800d120:	200069d4 	.word	0x200069d4
 800d124:	200069b8 	.word	0x200069b8
 800d128:	200069bc 	.word	0x200069bc
 800d12c:	20006656 	.word	0x20006656
 800d130:	2000676b 	.word	0x2000676b
 800d134:	20000070 	.word	0x20000070
 800d138:	20006908 	.word	0x20006908
 800d13c:	20006958 	.word	0x20006958

0800d140 <CalculateBackOff>:

static void CalculateBackOff(uint8_t channel)
{
 800d140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d144:	b08a      	sub	sp, #40	@ 0x28
 800d146:	af00      	add	r7, sp, #0
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
	CalcBackOffParams_t calcBackOff;

	//		calcBackOff.Joined = IsLoRaMacNetworkJoined;
	calcBackOff.Joined = (IsLoRaMacNetworkJoined == JOIN_OK);
 800d14c:	4b27      	ldr	r3, [pc, #156]	@ (800d1ec <CalculateBackOff+0xac>)
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	2b01      	cmp	r3, #1
 800d152:	bf0c      	ite	eq
 800d154:	2301      	moveq	r3, #1
 800d156:	2300      	movne	r3, #0
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	743b      	strb	r3, [r7, #16]
	calcBackOff.DutyCycleEnabled = DutyCycleOn;
 800d15c:	4b24      	ldr	r3, [pc, #144]	@ (800d1f0 <CalculateBackOff+0xb0>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	74bb      	strb	r3, [r7, #18]
	calcBackOff.Channel = channel;
 800d162:	7bfb      	ldrb	r3, [r7, #15]
 800d164:	74fb      	strb	r3, [r7, #19]
	calcBackOff.ElapsedTime = TimerGetElapsedTime(LoRaMacInitializationTime);
 800d166:	4b23      	ldr	r3, [pc, #140]	@ (800d1f4 <CalculateBackOff+0xb4>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	4610      	mov	r0, r2
 800d16e:	4619      	mov	r1, r3
 800d170:	f013 ff74 	bl	802105c <util_timer_get_elapsedtime>
 800d174:	4602      	mov	r2, r0
 800d176:	460b      	mov	r3, r1
 800d178:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOff.TxTimeOnAir = TxTimeOnAir;
 800d17c:	4b1e      	ldr	r3, [pc, #120]	@ (800d1f8 <CalculateBackOff+0xb8>)
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	e9c7 2308 	strd	r2, r3, [r7, #32]
	calcBackOff.LastTxIsJoinRequest = LastTxIsJoinRequest;
 800d186:	4b1d      	ldr	r3, [pc, #116]	@ (800d1fc <CalculateBackOff+0xbc>)
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	747b      	strb	r3, [r7, #17]

	// Update regional back-off
	RegionCalcBackOff(LoRaMacRegion, &calcBackOff);
 800d18c:	4b1c      	ldr	r3, [pc, #112]	@ (800d200 <CalculateBackOff+0xc0>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	f107 0210 	add.w	r2, r7, #16
 800d194:	4611      	mov	r1, r2
 800d196:	4618      	mov	r0, r3
 800d198:	f003 ffce 	bl	8011138 <RegionCalcBackOff>

	// Update aggregated time-off
	AggregatedTimeOff = AggregatedTimeOff + (TxTimeOnAir * AggregatedDCycle - TxTimeOnAir);
 800d19c:	4b19      	ldr	r3, [pc, #100]	@ (800d204 <CalculateBackOff+0xc4>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	469a      	mov	sl, r3
 800d1a6:	4693      	mov	fp, r2
 800d1a8:	f11a 38ff 	adds.w	r8, sl, #4294967295	@ 0xffffffff
 800d1ac:	f14b 39ff 	adc.w	r9, fp, #4294967295	@ 0xffffffff
 800d1b0:	4b11      	ldr	r3, [pc, #68]	@ (800d1f8 <CalculateBackOff+0xb8>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	fb02 f009 	mul.w	r0, r2, r9
 800d1ba:	fb08 f103 	mul.w	r1, r8, r3
 800d1be:	4401      	add	r1, r0
 800d1c0:	fba8 4502 	umull	r4, r5, r8, r2
 800d1c4:	194b      	adds	r3, r1, r5
 800d1c6:	461d      	mov	r5, r3
 800d1c8:	4b0f      	ldr	r3, [pc, #60]	@ (800d208 <CalculateBackOff+0xc8>)
 800d1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ce:	18a1      	adds	r1, r4, r2
 800d1d0:	6039      	str	r1, [r7, #0]
 800d1d2:	eb45 0303 	adc.w	r3, r5, r3
 800d1d6:	607b      	str	r3, [r7, #4]
 800d1d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d208 <CalculateBackOff+0xc8>)
 800d1da:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d1de:	e9c3 1200 	strd	r1, r2, [r3]
}
 800d1e2:	bf00      	nop
 800d1e4:	3728      	adds	r7, #40	@ 0x28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1ec:	20006761 	.word	0x20006761
 800d1f0:	200068f8 	.word	0x200068f8
 800d1f4:	20006900 	.word	0x20006900
 800d1f8:	20006a10 	.word	0x20006a10
 800d1fc:	200068fb 	.word	0x200068fb
 800d200:	20006510 	.word	0x20006510
 800d204:	200068e2 	.word	0x200068e2
 800d208:	200068f0 	.word	0x200068f0

0800d20c <ResetMacCounters>:

void ResetMacCounters(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b082      	sub	sp, #8
 800d210:	af00      	add	r7, sp, #0

	// Counters
	// UpLinkCounter = 0;
	// DownLinkCounter = 0;
	AdrAckCounter = 0;
 800d212:	4b38      	ldr	r3, [pc, #224]	@ (800d2f4 <ResetMacCounters+0xe8>)
 800d214:	2200      	movs	r2, #0
 800d216:	601a      	str	r2, [r3, #0]

	ChannelsNbRepCounter = 0;
 800d218:	4b37      	ldr	r3, [pc, #220]	@ (800d2f8 <ResetMacCounters+0xec>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	701a      	strb	r2, [r3, #0]

	AckTimeoutRetries = 1;
 800d21e:	4b37      	ldr	r3, [pc, #220]	@ (800d2fc <ResetMacCounters+0xf0>)
 800d220:	2201      	movs	r2, #1
 800d222:	701a      	strb	r2, [r3, #0]
	AckTimeoutRetriesCounter = 1;
 800d224:	4b36      	ldr	r3, [pc, #216]	@ (800d300 <ResetMacCounters+0xf4>)
 800d226:	2201      	movs	r2, #1
 800d228:	701a      	strb	r2, [r3, #0]
	AckTimeoutRetry = false;
 800d22a:	4b36      	ldr	r3, [pc, #216]	@ (800d304 <ResetMacCounters+0xf8>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	701a      	strb	r2, [r3, #0]

	MaxDCycle = 0;
 800d230:	4b35      	ldr	r3, [pc, #212]	@ (800d308 <ResetMacCounters+0xfc>)
 800d232:	2200      	movs	r2, #0
 800d234:	701a      	strb	r2, [r3, #0]
	AggregatedDCycle = 1;
 800d236:	4b35      	ldr	r3, [pc, #212]	@ (800d30c <ResetMacCounters+0x100>)
 800d238:	2201      	movs	r2, #1
 800d23a:	801a      	strh	r2, [r3, #0]

	MacCommandsBufferIndex = 0;
 800d23c:	4b34      	ldr	r3, [pc, #208]	@ (800d310 <ResetMacCounters+0x104>)
 800d23e:	2200      	movs	r2, #0
 800d240:	701a      	strb	r2, [r3, #0]
	MacCommandsBufferToRepeatIndex = 0;
 800d242:	4b34      	ldr	r3, [pc, #208]	@ (800d314 <ResetMacCounters+0x108>)
 800d244:	2200      	movs	r2, #0
 800d246:	701a      	strb	r2, [r3, #0]

	IsRxWindowsEnabled = true;
 800d248:	4b33      	ldr	r3, [pc, #204]	@ (800d318 <ResetMacCounters+0x10c>)
 800d24a:	2201      	movs	r2, #1
 800d24c:	701a      	strb	r2, [r3, #0]

	LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 800d24e:	4b33      	ldr	r3, [pc, #204]	@ (800d31c <ResetMacCounters+0x110>)
 800d250:	f993 2000 	ldrsb.w	r2, [r3]
 800d254:	4b32      	ldr	r3, [pc, #200]	@ (800d320 <ResetMacCounters+0x114>)
 800d256:	701a      	strb	r2, [r3, #0]
	LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800d258:	4b30      	ldr	r3, [pc, #192]	@ (800d31c <ResetMacCounters+0x110>)
 800d25a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800d25e:	4b30      	ldr	r3, [pc, #192]	@ (800d320 <ResetMacCounters+0x114>)
 800d260:	705a      	strb	r2, [r3, #1]
	LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 800d262:	4b2e      	ldr	r3, [pc, #184]	@ (800d31c <ResetMacCounters+0x110>)
 800d264:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800d268:	4b2d      	ldr	r3, [pc, #180]	@ (800d320 <ResetMacCounters+0x114>)
 800d26a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	LoRaMacParams.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 800d26e:	4b2c      	ldr	r3, [pc, #176]	@ (800d320 <ResetMacCounters+0x114>)
 800d270:	4a2a      	ldr	r2, [pc, #168]	@ (800d31c <ResetMacCounters+0x110>)
 800d272:	3324      	adds	r3, #36	@ 0x24
 800d274:	3224      	adds	r2, #36	@ 0x24
 800d276:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d27a:	e883 0003 	stmia.w	r3, {r0, r1}
	LoRaMacParams.UplinkDwellTime = LoRaMacParamsDefaults.UplinkDwellTime;
 800d27e:	4b27      	ldr	r3, [pc, #156]	@ (800d31c <ResetMacCounters+0x110>)
 800d280:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800d284:	4b26      	ldr	r3, [pc, #152]	@ (800d320 <ResetMacCounters+0x114>)
 800d286:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	LoRaMacParams.DownlinkDwellTime = LoRaMacParamsDefaults.DownlinkDwellTime;
 800d28a:	4b24      	ldr	r3, [pc, #144]	@ (800d31c <ResetMacCounters+0x110>)
 800d28c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800d290:	4b23      	ldr	r3, [pc, #140]	@ (800d320 <ResetMacCounters+0x114>)
 800d292:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	LoRaMacParams.MaxEirp = LoRaMacParamsDefaults.MaxEirp;
 800d296:	4b21      	ldr	r3, [pc, #132]	@ (800d31c <ResetMacCounters+0x110>)
 800d298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d29a:	4a21      	ldr	r2, [pc, #132]	@ (800d320 <ResetMacCounters+0x114>)
 800d29c:	6313      	str	r3, [r2, #48]	@ 0x30
	LoRaMacParams.AntennaGain = LoRaMacParamsDefaults.AntennaGain;
 800d29e:	4b1f      	ldr	r3, [pc, #124]	@ (800d31c <ResetMacCounters+0x110>)
 800d2a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a2:	4a1f      	ldr	r2, [pc, #124]	@ (800d320 <ResetMacCounters+0x114>)
 800d2a4:	6353      	str	r3, [r2, #52]	@ 0x34

	// Reset to application defaults
	RegionInitDefaults(LoRaMacRegion, INIT_TYPE_APP_DEFAULTS);
 800d2a6:	4b1f      	ldr	r3, [pc, #124]	@ (800d324 <ResetMacCounters+0x118>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	2102      	movs	r1, #2
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f003 f87d 	bl	80103ac <RegionInitDefaults>

	NodeAckRequested = false;
 800d2b2:	4b1d      	ldr	r3, [pc, #116]	@ (800d328 <ResetMacCounters+0x11c>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	701a      	strb	r2, [r3, #0]
	SrvAckRequested = false;
 800d2b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d32c <ResetMacCounters+0x120>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	701a      	strb	r2, [r3, #0]
	MacCommandsInNextTx = false;
 800d2be:	4b1c      	ldr	r3, [pc, #112]	@ (800d330 <ResetMacCounters+0x124>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]

	// Reset Multicast downlink counters
	MulticastParams_t *cur = MulticastChannels;
 800d2c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d334 <ResetMacCounters+0x128>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	607b      	str	r3, [r7, #4]
	while (cur != NULL)
 800d2ca:	e005      	b.n	800d2d8 <ResetMacCounters+0xcc>
	{
		cur->DownLinkCounter = 0;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	625a      	str	r2, [r3, #36]	@ 0x24
		cur = cur->Next;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d6:	607b      	str	r3, [r7, #4]
	while (cur != NULL)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1f6      	bne.n	800d2cc <ResetMacCounters+0xc0>
	}

	// Initialize channel index.
	Channel = 0;
 800d2de:	4b16      	ldr	r3, [pc, #88]	@ (800d338 <ResetMacCounters+0x12c>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	701a      	strb	r2, [r3, #0]
	LastTxChannel = Channel;
 800d2e4:	4b14      	ldr	r3, [pc, #80]	@ (800d338 <ResetMacCounters+0x12c>)
 800d2e6:	781a      	ldrb	r2, [r3, #0]
 800d2e8:	4b14      	ldr	r3, [pc, #80]	@ (800d33c <ResetMacCounters+0x130>)
 800d2ea:	701a      	strb	r2, [r3, #0]
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	20006764 	.word	0x20006764
 800d2f8:	200068e0 	.word	0x200068e0
 800d2fc:	2000006e 	.word	0x2000006e
 800d300:	2000006f 	.word	0x2000006f
 800d304:	20006a08 	.word	0x20006a08
 800d308:	200068e1 	.word	0x200068e1
 800d30c:	200068e2 	.word	0x200068e2
 800d310:	2000676b 	.word	0x2000676b
 800d314:	2000676c 	.word	0x2000676c
 800d318:	2000006c 	.word	0x2000006c
 800d31c:	200068a8 	.word	0x200068a8
 800d320:	20006870 	.word	0x20006870
 800d324:	20006510 	.word	0x20006510
 800d328:	20006768 	.word	0x20006768
 800d32c:	20006769 	.word	0x20006769
 800d330:	2000676a 	.word	0x2000676a
 800d334:	2000654c 	.word	0x2000654c
 800d338:	200068f9 	.word	0x200068f9
 800d33c:	200068fa 	.word	0x200068fa

0800d340 <ResetMacParameters>:

static void ResetMacParameters(void)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
	// Counters
	UpLinkCounter = 0;
 800d346:	4b3b      	ldr	r3, [pc, #236]	@ (800d434 <ResetMacParameters+0xf4>)
 800d348:	2200      	movs	r2, #0
 800d34a:	601a      	str	r2, [r3, #0]
	DownLinkCounter = 0;
 800d34c:	4b3a      	ldr	r3, [pc, #232]	@ (800d438 <ResetMacParameters+0xf8>)
 800d34e:	2200      	movs	r2, #0
 800d350:	601a      	str	r2, [r3, #0]
	AdrAckCounter = 0;
 800d352:	4b3a      	ldr	r3, [pc, #232]	@ (800d43c <ResetMacParameters+0xfc>)
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]

	ChannelsNbRepCounter = 0;
 800d358:	4b39      	ldr	r3, [pc, #228]	@ (800d440 <ResetMacParameters+0x100>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	701a      	strb	r2, [r3, #0]

	AckTimeoutRetries = 1;
 800d35e:	4b39      	ldr	r3, [pc, #228]	@ (800d444 <ResetMacParameters+0x104>)
 800d360:	2201      	movs	r2, #1
 800d362:	701a      	strb	r2, [r3, #0]
	AckTimeoutRetriesCounter = 1;
 800d364:	4b38      	ldr	r3, [pc, #224]	@ (800d448 <ResetMacParameters+0x108>)
 800d366:	2201      	movs	r2, #1
 800d368:	701a      	strb	r2, [r3, #0]
	AckTimeoutRetry = false;
 800d36a:	4b38      	ldr	r3, [pc, #224]	@ (800d44c <ResetMacParameters+0x10c>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	701a      	strb	r2, [r3, #0]

	MaxDCycle = 0;
 800d370:	4b37      	ldr	r3, [pc, #220]	@ (800d450 <ResetMacParameters+0x110>)
 800d372:	2200      	movs	r2, #0
 800d374:	701a      	strb	r2, [r3, #0]
	AggregatedDCycle = 1;
 800d376:	4b37      	ldr	r3, [pc, #220]	@ (800d454 <ResetMacParameters+0x114>)
 800d378:	2201      	movs	r2, #1
 800d37a:	801a      	strh	r2, [r3, #0]

	MacCommandsBufferIndex = 0;
 800d37c:	4b36      	ldr	r3, [pc, #216]	@ (800d458 <ResetMacParameters+0x118>)
 800d37e:	2200      	movs	r2, #0
 800d380:	701a      	strb	r2, [r3, #0]
	MacCommandsBufferToRepeatIndex = 0;
 800d382:	4b36      	ldr	r3, [pc, #216]	@ (800d45c <ResetMacParameters+0x11c>)
 800d384:	2200      	movs	r2, #0
 800d386:	701a      	strb	r2, [r3, #0]

	IsRxWindowsEnabled = true;
 800d388:	4b35      	ldr	r3, [pc, #212]	@ (800d460 <ResetMacParameters+0x120>)
 800d38a:	2201      	movs	r2, #1
 800d38c:	701a      	strb	r2, [r3, #0]

	LoRaMacParams.ChannelsTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 800d38e:	4b35      	ldr	r3, [pc, #212]	@ (800d464 <ResetMacParameters+0x124>)
 800d390:	f993 2000 	ldrsb.w	r2, [r3]
 800d394:	4b34      	ldr	r3, [pc, #208]	@ (800d468 <ResetMacParameters+0x128>)
 800d396:	701a      	strb	r2, [r3, #0]
	LoRaMacParams.ChannelsDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800d398:	4b32      	ldr	r3, [pc, #200]	@ (800d464 <ResetMacParameters+0x124>)
 800d39a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800d39e:	4b32      	ldr	r3, [pc, #200]	@ (800d468 <ResetMacParameters+0x128>)
 800d3a0:	705a      	strb	r2, [r3, #1]
	LoRaMacParams.Rx1DrOffset = LoRaMacParamsDefaults.Rx1DrOffset;
 800d3a2:	4b30      	ldr	r3, [pc, #192]	@ (800d464 <ResetMacParameters+0x124>)
 800d3a4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800d3a8:	4b2f      	ldr	r3, [pc, #188]	@ (800d468 <ResetMacParameters+0x128>)
 800d3aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	LoRaMacParams.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 800d3ae:	4b2e      	ldr	r3, [pc, #184]	@ (800d468 <ResetMacParameters+0x128>)
 800d3b0:	4a2c      	ldr	r2, [pc, #176]	@ (800d464 <ResetMacParameters+0x124>)
 800d3b2:	3324      	adds	r3, #36	@ 0x24
 800d3b4:	3224      	adds	r2, #36	@ 0x24
 800d3b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3ba:	e883 0003 	stmia.w	r3, {r0, r1}
	LoRaMacParams.UplinkDwellTime = LoRaMacParamsDefaults.UplinkDwellTime;
 800d3be:	4b29      	ldr	r3, [pc, #164]	@ (800d464 <ResetMacParameters+0x124>)
 800d3c0:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800d3c4:	4b28      	ldr	r3, [pc, #160]	@ (800d468 <ResetMacParameters+0x128>)
 800d3c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	LoRaMacParams.DownlinkDwellTime = LoRaMacParamsDefaults.DownlinkDwellTime;
 800d3ca:	4b26      	ldr	r3, [pc, #152]	@ (800d464 <ResetMacParameters+0x124>)
 800d3cc:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800d3d0:	4b25      	ldr	r3, [pc, #148]	@ (800d468 <ResetMacParameters+0x128>)
 800d3d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	LoRaMacParams.MaxEirp = LoRaMacParamsDefaults.MaxEirp;
 800d3d6:	4b23      	ldr	r3, [pc, #140]	@ (800d464 <ResetMacParameters+0x124>)
 800d3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3da:	4a23      	ldr	r2, [pc, #140]	@ (800d468 <ResetMacParameters+0x128>)
 800d3dc:	6313      	str	r3, [r2, #48]	@ 0x30
	LoRaMacParams.AntennaGain = LoRaMacParamsDefaults.AntennaGain;
 800d3de:	4b21      	ldr	r3, [pc, #132]	@ (800d464 <ResetMacParameters+0x124>)
 800d3e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e2:	4a21      	ldr	r2, [pc, #132]	@ (800d468 <ResetMacParameters+0x128>)
 800d3e4:	6353      	str	r3, [r2, #52]	@ 0x34

	// Reset to application defaults
	RegionInitDefaults(LoRaMacRegion, INIT_TYPE_APP_DEFAULTS);
 800d3e6:	4b21      	ldr	r3, [pc, #132]	@ (800d46c <ResetMacParameters+0x12c>)
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	2102      	movs	r1, #2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f002 ffdd 	bl	80103ac <RegionInitDefaults>

	NodeAckRequested = false;
 800d3f2:	4b1f      	ldr	r3, [pc, #124]	@ (800d470 <ResetMacParameters+0x130>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	701a      	strb	r2, [r3, #0]
	SrvAckRequested = false;
 800d3f8:	4b1e      	ldr	r3, [pc, #120]	@ (800d474 <ResetMacParameters+0x134>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	701a      	strb	r2, [r3, #0]
	MacCommandsInNextTx = false;
 800d3fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d478 <ResetMacParameters+0x138>)
 800d400:	2200      	movs	r2, #0
 800d402:	701a      	strb	r2, [r3, #0]

	// Reset Multicast downlink counters
	MulticastParams_t *cur = MulticastChannels;
 800d404:	4b1d      	ldr	r3, [pc, #116]	@ (800d47c <ResetMacParameters+0x13c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	607b      	str	r3, [r7, #4]
	while (cur != NULL)
 800d40a:	e005      	b.n	800d418 <ResetMacParameters+0xd8>
	{
		cur->DownLinkCounter = 0;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	625a      	str	r2, [r3, #36]	@ 0x24
		cur = cur->Next;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d416:	607b      	str	r3, [r7, #4]
	while (cur != NULL)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1f6      	bne.n	800d40c <ResetMacParameters+0xcc>
	}

	// Initialize channel index.
	Channel = 0;
 800d41e:	4b18      	ldr	r3, [pc, #96]	@ (800d480 <ResetMacParameters+0x140>)
 800d420:	2200      	movs	r2, #0
 800d422:	701a      	strb	r2, [r3, #0]
	LastTxChannel = Channel;
 800d424:	4b16      	ldr	r3, [pc, #88]	@ (800d480 <ResetMacParameters+0x140>)
 800d426:	781a      	ldrb	r2, [r3, #0]
 800d428:	4b16      	ldr	r3, [pc, #88]	@ (800d484 <ResetMacParameters+0x144>)
 800d42a:	701a      	strb	r2, [r3, #0]
}
 800d42c:	bf00      	nop
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	20006758 	.word	0x20006758
 800d438:	2000675c 	.word	0x2000675c
 800d43c:	20006764 	.word	0x20006764
 800d440:	200068e0 	.word	0x200068e0
 800d444:	2000006e 	.word	0x2000006e
 800d448:	2000006f 	.word	0x2000006f
 800d44c:	20006a08 	.word	0x20006a08
 800d450:	200068e1 	.word	0x200068e1
 800d454:	200068e2 	.word	0x200068e2
 800d458:	2000676b 	.word	0x2000676b
 800d45c:	2000676c 	.word	0x2000676c
 800d460:	2000006c 	.word	0x2000006c
 800d464:	200068a8 	.word	0x200068a8
 800d468:	20006870 	.word	0x20006870
 800d46c:	20006510 	.word	0x20006510
 800d470:	20006768 	.word	0x20006768
 800d474:	20006769 	.word	0x20006769
 800d478:	2000676a 	.word	0x2000676a
 800d47c:	2000654c 	.word	0x2000654c
 800d480:	200068f9 	.word	0x200068f9
 800d484:	200068fa 	.word	0x200068fa

0800d488 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame(LoRaMacHeader_t *macHdr, LoRaMacFrameCtrl_t *fCtrl, uint8_t fPort, void *fBuffer, uint16_t fBufferSize)
{
 800d488:	b590      	push	{r4, r7, lr}
 800d48a:	b091      	sub	sp, #68	@ 0x44
 800d48c:	af04      	add	r7, sp, #16
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	603b      	str	r3, [r7, #0]
 800d494:	4613      	mov	r3, r2
 800d496:	71fb      	strb	r3, [r7, #7]
	AdrNextParams_t adrNext;
	uint16_t i;
	uint8_t pktHeaderLen = 0;
 800d498:	2300      	movs	r3, #0
 800d49a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint32_t mic = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	617b      	str	r3, [r7, #20]
	const void *payload = fBuffer;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t framePort = fPort;
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	LoRaMacBufferPktLen = 0;
 800d4ac:	4b60      	ldr	r3, [pc, #384]	@ (800d630 <PrepareFrame+0x1a8>)
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	801a      	strh	r2, [r3, #0]

	NodeAckRequested = false;
 800d4b2:	4b60      	ldr	r3, [pc, #384]	@ (800d634 <PrepareFrame+0x1ac>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	701a      	strb	r2, [r3, #0]

	if (fBuffer == NULL)
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d102      	bne.n	800d4c4 <PrepareFrame+0x3c>
	{
		fBufferSize = 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	}

	LoRaMacTxPayloadLen = fBufferSize;
 800d4c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d4c8:	b2da      	uxtb	r2, r3
 800d4ca:	4b5b      	ldr	r3, [pc, #364]	@ (800d638 <PrepareFrame+0x1b0>)
 800d4cc:	701a      	strb	r2, [r3, #0]

	LoRaMacBuffer[pktHeaderLen++] = macHdr->Value;
 800d4ce:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d4d8:	461a      	mov	r2, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	7819      	ldrb	r1, [r3, #0]
 800d4de:	4b57      	ldr	r3, [pc, #348]	@ (800d63c <PrepareFrame+0x1b4>)
 800d4e0:	5499      	strb	r1, [r3, r2]

	switch (macHdr->Bits.MType)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b07      	cmp	r3, #7
 800d4ee:	f200 827b 	bhi.w	800d9e8 <PrepareFrame+0x560>
 800d4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f8 <PrepareFrame+0x70>)
 800d4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f8:	0800d519 	.word	0x0800d519
 800d4fc:	0800d9e9 	.word	0x0800d9e9
 800d500:	0800d625 	.word	0x0800d625
 800d504:	0800d9e9 	.word	0x0800d9e9
 800d508:	0800d61f 	.word	0x0800d61f
 800d50c:	0800d9e9 	.word	0x0800d9e9
 800d510:	0800d9e9 	.word	0x0800d9e9
 800d514:	0800d9b3 	.word	0x0800d9b3
	{
	case FRAME_TYPE_JOIN_REQ:
		LoRaMacBufferPktLen = pktHeaderLen;
 800d518:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	4b44      	ldr	r3, [pc, #272]	@ (800d630 <PrepareFrame+0x1a8>)
 800d520:	801a      	strh	r2, [r3, #0]

		memcpyr(LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacAppEui, 8);
 800d522:	4b43      	ldr	r3, [pc, #268]	@ (800d630 <PrepareFrame+0x1a8>)
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	4b44      	ldr	r3, [pc, #272]	@ (800d63c <PrepareFrame+0x1b4>)
 800d52a:	4413      	add	r3, r2
 800d52c:	4a44      	ldr	r2, [pc, #272]	@ (800d640 <PrepareFrame+0x1b8>)
 800d52e:	6811      	ldr	r1, [r2, #0]
 800d530:	2208      	movs	r2, #8
 800d532:	4618      	mov	r0, r3
 800d534:	f013 fb51 	bl	8020bda <memcpyr>
		LoRaMacBufferPktLen += 8;
 800d538:	4b3d      	ldr	r3, [pc, #244]	@ (800d630 <PrepareFrame+0x1a8>)
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	3308      	adds	r3, #8
 800d53e:	b29a      	uxth	r2, r3
 800d540:	4b3b      	ldr	r3, [pc, #236]	@ (800d630 <PrepareFrame+0x1a8>)
 800d542:	801a      	strh	r2, [r3, #0]
		memcpyr(LoRaMacBuffer + LoRaMacBufferPktLen, LoRaMacDevEui, 8);
 800d544:	4b3a      	ldr	r3, [pc, #232]	@ (800d630 <PrepareFrame+0x1a8>)
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	461a      	mov	r2, r3
 800d54a:	4b3c      	ldr	r3, [pc, #240]	@ (800d63c <PrepareFrame+0x1b4>)
 800d54c:	4413      	add	r3, r2
 800d54e:	4a3d      	ldr	r2, [pc, #244]	@ (800d644 <PrepareFrame+0x1bc>)
 800d550:	6811      	ldr	r1, [r2, #0]
 800d552:	2208      	movs	r2, #8
 800d554:	4618      	mov	r0, r3
 800d556:	f013 fb40 	bl	8020bda <memcpyr>
		LoRaMacBufferPktLen += 8;
 800d55a:	4b35      	ldr	r3, [pc, #212]	@ (800d630 <PrepareFrame+0x1a8>)
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	3308      	adds	r3, #8
 800d560:	b29a      	uxth	r2, r3
 800d562:	4b33      	ldr	r3, [pc, #204]	@ (800d630 <PrepareFrame+0x1a8>)
 800d564:	801a      	strh	r2, [r3, #0]

		LoRaMacDevNonce = Radio.Random();
 800d566:	4b38      	ldr	r3, [pc, #224]	@ (800d648 <PrepareFrame+0x1c0>)
 800d568:	699b      	ldr	r3, [r3, #24]
 800d56a:	4798      	blx	r3
 800d56c:	4603      	mov	r3, r0
 800d56e:	b29a      	uxth	r2, r3
 800d570:	4b36      	ldr	r3, [pc, #216]	@ (800d64c <PrepareFrame+0x1c4>)
 800d572:	801a      	strh	r2, [r3, #0]

		LoRaMacBuffer[LoRaMacBufferPktLen++] = LoRaMacDevNonce & 0xFF;
 800d574:	4b35      	ldr	r3, [pc, #212]	@ (800d64c <PrepareFrame+0x1c4>)
 800d576:	8819      	ldrh	r1, [r3, #0]
 800d578:	4b2d      	ldr	r3, [pc, #180]	@ (800d630 <PrepareFrame+0x1a8>)
 800d57a:	881b      	ldrh	r3, [r3, #0]
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	b290      	uxth	r0, r2
 800d580:	4a2b      	ldr	r2, [pc, #172]	@ (800d630 <PrepareFrame+0x1a8>)
 800d582:	8010      	strh	r0, [r2, #0]
 800d584:	461a      	mov	r2, r3
 800d586:	b2c9      	uxtb	r1, r1
 800d588:	4b2c      	ldr	r3, [pc, #176]	@ (800d63c <PrepareFrame+0x1b4>)
 800d58a:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[LoRaMacBufferPktLen++] = (LoRaMacDevNonce >> 8) & 0xFF;
 800d58c:	4b2f      	ldr	r3, [pc, #188]	@ (800d64c <PrepareFrame+0x1c4>)
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	0a1b      	lsrs	r3, r3, #8
 800d592:	b299      	uxth	r1, r3
 800d594:	4b26      	ldr	r3, [pc, #152]	@ (800d630 <PrepareFrame+0x1a8>)
 800d596:	881b      	ldrh	r3, [r3, #0]
 800d598:	1c5a      	adds	r2, r3, #1
 800d59a:	b290      	uxth	r0, r2
 800d59c:	4a24      	ldr	r2, [pc, #144]	@ (800d630 <PrepareFrame+0x1a8>)
 800d59e:	8010      	strh	r0, [r2, #0]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	b2c9      	uxtb	r1, r1
 800d5a4:	4b25      	ldr	r3, [pc, #148]	@ (800d63c <PrepareFrame+0x1b4>)
 800d5a6:	5499      	strb	r1, [r3, r2]

		LoRaMacJoinComputeMic(LoRaMacBuffer, LoRaMacBufferPktLen & 0xFF, LoRaMacAppKey, &mic);
 800d5a8:	4b21      	ldr	r3, [pc, #132]	@ (800d630 <PrepareFrame+0x1a8>)
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	b299      	uxth	r1, r3
 800d5b0:	4b27      	ldr	r3, [pc, #156]	@ (800d650 <PrepareFrame+0x1c8>)
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	f107 0314 	add.w	r3, r7, #20
 800d5b8:	4820      	ldr	r0, [pc, #128]	@ (800d63c <PrepareFrame+0x1b4>)
 800d5ba:	f001 fcd3 	bl	800ef64 <LoRaMacJoinComputeMic>

		LoRaMacBuffer[LoRaMacBufferPktLen++] = mic & 0xFF;
 800d5be:	6979      	ldr	r1, [r7, #20]
 800d5c0:	4b1b      	ldr	r3, [pc, #108]	@ (800d630 <PrepareFrame+0x1a8>)
 800d5c2:	881b      	ldrh	r3, [r3, #0]
 800d5c4:	1c5a      	adds	r2, r3, #1
 800d5c6:	b290      	uxth	r0, r2
 800d5c8:	4a19      	ldr	r2, [pc, #100]	@ (800d630 <PrepareFrame+0x1a8>)
 800d5ca:	8010      	strh	r0, [r2, #0]
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	b2c9      	uxtb	r1, r1
 800d5d0:	4b1a      	ldr	r3, [pc, #104]	@ (800d63c <PrepareFrame+0x1b4>)
 800d5d2:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[LoRaMacBufferPktLen++] = (mic >> 8) & 0xFF;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	0a19      	lsrs	r1, r3, #8
 800d5d8:	4b15      	ldr	r3, [pc, #84]	@ (800d630 <PrepareFrame+0x1a8>)
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	1c5a      	adds	r2, r3, #1
 800d5de:	b290      	uxth	r0, r2
 800d5e0:	4a13      	ldr	r2, [pc, #76]	@ (800d630 <PrepareFrame+0x1a8>)
 800d5e2:	8010      	strh	r0, [r2, #0]
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	b2c9      	uxtb	r1, r1
 800d5e8:	4b14      	ldr	r3, [pc, #80]	@ (800d63c <PrepareFrame+0x1b4>)
 800d5ea:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[LoRaMacBufferPktLen++] = (mic >> 16) & 0xFF;
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	0c19      	lsrs	r1, r3, #16
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d630 <PrepareFrame+0x1a8>)
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	b290      	uxth	r0, r2
 800d5f8:	4a0d      	ldr	r2, [pc, #52]	@ (800d630 <PrepareFrame+0x1a8>)
 800d5fa:	8010      	strh	r0, [r2, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	b2c9      	uxtb	r1, r1
 800d600:	4b0e      	ldr	r3, [pc, #56]	@ (800d63c <PrepareFrame+0x1b4>)
 800d602:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[LoRaMacBufferPktLen++] = (mic >> 24) & 0xFF;
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	0e19      	lsrs	r1, r3, #24
 800d608:	4b09      	ldr	r3, [pc, #36]	@ (800d630 <PrepareFrame+0x1a8>)
 800d60a:	881b      	ldrh	r3, [r3, #0]
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	b290      	uxth	r0, r2
 800d610:	4a07      	ldr	r2, [pc, #28]	@ (800d630 <PrepareFrame+0x1a8>)
 800d612:	8010      	strh	r0, [r2, #0]
 800d614:	461a      	mov	r2, r3
 800d616:	b2c9      	uxtb	r1, r1
 800d618:	4b08      	ldr	r3, [pc, #32]	@ (800d63c <PrepareFrame+0x1b4>)
 800d61a:	5499      	strb	r1, [r3, r2]

		break;
 800d61c:	e1e7      	b.n	800d9ee <PrepareFrame+0x566>
	case FRAME_TYPE_DATA_CONFIRMED_UP:
		NodeAckRequested = true;
 800d61e:	4b05      	ldr	r3, [pc, #20]	@ (800d634 <PrepareFrame+0x1ac>)
 800d620:	2201      	movs	r2, #1
 800d622:	701a      	strb	r2, [r3, #0]
		// Intentional fallthrough
	case FRAME_TYPE_DATA_UNCONFIRMED_UP:
		if (IsLoRaMacNetworkJoined != JOIN_OK)
 800d624:	4b0b      	ldr	r3, [pc, #44]	@ (800d654 <PrepareFrame+0x1cc>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d015      	beq.n	800d658 <PrepareFrame+0x1d0>
		{
			return LORAMAC_STATUS_NO_NETWORK_JOINED; // No network has been joined yet
 800d62c:	2307      	movs	r3, #7
 800d62e:	e1df      	b.n	800d9f0 <PrepareFrame+0x568>
 800d630:	20006654 	.word	0x20006654
 800d634:	20006768 	.word	0x20006768
 800d638:	20006656 	.word	0x20006656
 800d63c:	20006554 	.word	0x20006554
 800d640:	20006518 	.word	0x20006518
 800d644:	20006514 	.word	0x20006514
 800d648:	08025450 	.word	0x08025450
 800d64c:	20006540 	.word	0x20006540
 800d650:	2000651c 	.word	0x2000651c
 800d654:	20006761 	.word	0x20006761
		}

		// Adr next request
		adrNext.UpdateChanMask = true;
 800d658:	2301      	movs	r3, #1
 800d65a:	763b      	strb	r3, [r7, #24]
		adrNext.AdrEnabled = fCtrl->Bits.Adr;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b00      	cmp	r3, #0
 800d668:	bf14      	ite	ne
 800d66a:	2301      	movne	r3, #1
 800d66c:	2300      	moveq	r3, #0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	767b      	strb	r3, [r7, #25]
		adrNext.AdrAckCounter = AdrAckCounter;
 800d672:	4b96      	ldr	r3, [pc, #600]	@ (800d8cc <PrepareFrame+0x444>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	61fb      	str	r3, [r7, #28]
		adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 800d678:	4b95      	ldr	r3, [pc, #596]	@ (800d8d0 <PrepareFrame+0x448>)
 800d67a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d67e:	f887 3020 	strb.w	r3, [r7, #32]
		adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 800d682:	4b93      	ldr	r3, [pc, #588]	@ (800d8d0 <PrepareFrame+0x448>)
 800d684:	f993 3000 	ldrsb.w	r3, [r3]
 800d688:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800d68c:	4b90      	ldr	r3, [pc, #576]	@ (800d8d0 <PrepareFrame+0x448>)
 800d68e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d692:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		fCtrl->Bits.AdrAckReq = RegionAdrNext(LoRaMacRegion, &adrNext,
 800d696:	4b8f      	ldr	r3, [pc, #572]	@ (800d8d4 <PrepareFrame+0x44c>)
 800d698:	7818      	ldrb	r0, [r3, #0]
 800d69a:	f107 0118 	add.w	r1, r7, #24
 800d69e:	4b8b      	ldr	r3, [pc, #556]	@ (800d8cc <PrepareFrame+0x444>)
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	4b8b      	ldr	r3, [pc, #556]	@ (800d8d0 <PrepareFrame+0x448>)
 800d6a4:	4a8c      	ldr	r2, [pc, #560]	@ (800d8d8 <PrepareFrame+0x450>)
 800d6a6:	f003 f843 	bl	8010730 <RegionAdrNext>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	7813      	ldrb	r3, [r2, #0]
 800d6b2:	f361 1386 	bfi	r3, r1, #6, #1
 800d6b6:	7013      	strb	r3, [r2, #0]
											  &LoRaMacParams.ChannelsDatarate, &LoRaMacParams.ChannelsTxPower, &AdrAckCounter);

		if (SrvAckRequested == true)
 800d6b8:	4b88      	ldr	r3, [pc, #544]	@ (800d8dc <PrepareFrame+0x454>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d007      	beq.n	800d6d0 <PrepareFrame+0x248>
		{
			SrvAckRequested = false;
 800d6c0:	4b86      	ldr	r3, [pc, #536]	@ (800d8dc <PrepareFrame+0x454>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	701a      	strb	r2, [r3, #0]
			fCtrl->Bits.Ack = 1;
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	7813      	ldrb	r3, [r2, #0]
 800d6ca:	f043 0320 	orr.w	r3, r3, #32
 800d6ce:	7013      	strb	r3, [r2, #0]
		}

		LoRaMacBuffer[pktHeaderLen++] = (LoRaMacDevAddr) & 0xFF;
 800d6d0:	4b83      	ldr	r3, [pc, #524]	@ (800d8e0 <PrepareFrame+0x458>)
 800d6d2:	6819      	ldr	r1, [r3, #0]
 800d6d4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d6d8:	1c5a      	adds	r2, r3, #1
 800d6da:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d6de:	461a      	mov	r2, r3
 800d6e0:	b2c9      	uxtb	r1, r1
 800d6e2:	4b80      	ldr	r3, [pc, #512]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d6e4:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[pktHeaderLen++] = (LoRaMacDevAddr >> 8) & 0xFF;
 800d6e6:	4b7e      	ldr	r3, [pc, #504]	@ (800d8e0 <PrepareFrame+0x458>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	0a19      	lsrs	r1, r3, #8
 800d6ec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	b2c9      	uxtb	r1, r1
 800d6fa:	4b7a      	ldr	r3, [pc, #488]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d6fc:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[pktHeaderLen++] = (LoRaMacDevAddr >> 16) & 0xFF;
 800d6fe:	4b78      	ldr	r3, [pc, #480]	@ (800d8e0 <PrepareFrame+0x458>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	0c19      	lsrs	r1, r3, #16
 800d704:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d708:	1c5a      	adds	r2, r3, #1
 800d70a:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d70e:	461a      	mov	r2, r3
 800d710:	b2c9      	uxtb	r1, r1
 800d712:	4b74      	ldr	r3, [pc, #464]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d714:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[pktHeaderLen++] = (LoRaMacDevAddr >> 24) & 0xFF;
 800d716:	4b72      	ldr	r3, [pc, #456]	@ (800d8e0 <PrepareFrame+0x458>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	0e19      	lsrs	r1, r3, #24
 800d71c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d720:	1c5a      	adds	r2, r3, #1
 800d722:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d726:	461a      	mov	r2, r3
 800d728:	b2c9      	uxtb	r1, r1
 800d72a:	4b6e      	ldr	r3, [pc, #440]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d72c:	5499      	strb	r1, [r3, r2]

		LoRaMacBuffer[pktHeaderLen++] = fCtrl->Value;
 800d72e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d738:	461a      	mov	r2, r3
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	7819      	ldrb	r1, [r3, #0]
 800d73e:	4b69      	ldr	r3, [pc, #420]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d740:	5499      	strb	r1, [r3, r2]

		LoRaMacBuffer[pktHeaderLen++] = UpLinkCounter & 0xFF;
 800d742:	4b69      	ldr	r3, [pc, #420]	@ (800d8e8 <PrepareFrame+0x460>)
 800d744:	6819      	ldr	r1, [r3, #0]
 800d746:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d750:	461a      	mov	r2, r3
 800d752:	b2c9      	uxtb	r1, r1
 800d754:	4b63      	ldr	r3, [pc, #396]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d756:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[pktHeaderLen++] = (UpLinkCounter >> 8) & 0xFF;
 800d758:	4b63      	ldr	r3, [pc, #396]	@ (800d8e8 <PrepareFrame+0x460>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	0a19      	lsrs	r1, r3, #8
 800d75e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d768:	461a      	mov	r2, r3
 800d76a:	b2c9      	uxtb	r1, r1
 800d76c:	4b5d      	ldr	r3, [pc, #372]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d76e:	5499      	strb	r1, [r3, r2]

		// Copy the MAC commands which must be re-send into the MAC command buffer
		memcpy1(&MacCommandsBuffer[MacCommandsBufferIndex], MacCommandsBufferToRepeat, MacCommandsBufferToRepeatIndex);
 800d770:	4b5e      	ldr	r3, [pc, #376]	@ (800d8ec <PrepareFrame+0x464>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	461a      	mov	r2, r3
 800d776:	4b5e      	ldr	r3, [pc, #376]	@ (800d8f0 <PrepareFrame+0x468>)
 800d778:	4413      	add	r3, r2
 800d77a:	4a5e      	ldr	r2, [pc, #376]	@ (800d8f4 <PrepareFrame+0x46c>)
 800d77c:	7812      	ldrb	r2, [r2, #0]
 800d77e:	495e      	ldr	r1, [pc, #376]	@ (800d8f8 <PrepareFrame+0x470>)
 800d780:	4618      	mov	r0, r3
 800d782:	f013 fa0e 	bl	8020ba2 <memcpy1>
		MacCommandsBufferIndex += MacCommandsBufferToRepeatIndex;
 800d786:	4b59      	ldr	r3, [pc, #356]	@ (800d8ec <PrepareFrame+0x464>)
 800d788:	781a      	ldrb	r2, [r3, #0]
 800d78a:	4b5a      	ldr	r3, [pc, #360]	@ (800d8f4 <PrepareFrame+0x46c>)
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	4413      	add	r3, r2
 800d790:	b2da      	uxtb	r2, r3
 800d792:	4b56      	ldr	r3, [pc, #344]	@ (800d8ec <PrepareFrame+0x464>)
 800d794:	701a      	strb	r2, [r3, #0]

		if ((payload != NULL) && (LoRaMacTxPayloadLen > 0))
 800d796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d043      	beq.n	800d824 <PrepareFrame+0x39c>
 800d79c:	4b57      	ldr	r3, [pc, #348]	@ (800d8fc <PrepareFrame+0x474>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d03f      	beq.n	800d824 <PrepareFrame+0x39c>
		{
			if (MacCommandsInNextTx == true)
 800d7a4:	4b56      	ldr	r3, [pc, #344]	@ (800d900 <PrepareFrame+0x478>)
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d04c      	beq.n	800d846 <PrepareFrame+0x3be>
			{
				if (MacCommandsBufferIndex <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH)
 800d7ac:	4b4f      	ldr	r3, [pc, #316]	@ (800d8ec <PrepareFrame+0x464>)
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b0f      	cmp	r3, #15
 800d7b2:	d82d      	bhi.n	800d810 <PrepareFrame+0x388>
				{
					fCtrl->Bits.FOptsLen += MacCommandsBufferIndex;
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	461a      	mov	r2, r3
 800d7c0:	4b4a      	ldr	r3, [pc, #296]	@ (800d8ec <PrepareFrame+0x464>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	f003 030f 	and.w	r3, r3, #15
 800d7cc:	b2d9      	uxtb	r1, r3
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	7813      	ldrb	r3, [r2, #0]
 800d7d2:	f361 0303 	bfi	r3, r1, #0, #4
 800d7d6:	7013      	strb	r3, [r2, #0]

					// Update FCtrl field with new value of OptionsLength
					LoRaMacBuffer[0x05] = fCtrl->Value;
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	781a      	ldrb	r2, [r3, #0]
 800d7dc:	4b41      	ldr	r3, [pc, #260]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d7de:	715a      	strb	r2, [r3, #5]
					for (i = 0; i < MacCommandsBufferIndex; i++)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d7e4:	e00d      	b.n	800d802 <PrepareFrame+0x37a>
					{
						LoRaMacBuffer[pktHeaderLen++] = MacCommandsBuffer[i];
 800d7e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d7e8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d7ec:	1c59      	adds	r1, r3, #1
 800d7ee:	f887 102d 	strb.w	r1, [r7, #45]	@ 0x2d
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	4b3e      	ldr	r3, [pc, #248]	@ (800d8f0 <PrepareFrame+0x468>)
 800d7f6:	5c9a      	ldrb	r2, [r3, r2]
 800d7f8:	4b3a      	ldr	r3, [pc, #232]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d7fa:	545a      	strb	r2, [r3, r1]
					for (i = 0; i < MacCommandsBufferIndex; i++)
 800d7fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d7fe:	3301      	adds	r3, #1
 800d800:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d802:	4b3a      	ldr	r3, [pc, #232]	@ (800d8ec <PrepareFrame+0x464>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	461a      	mov	r2, r3
 800d808:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d3eb      	bcc.n	800d7e6 <PrepareFrame+0x35e>
			if (MacCommandsInNextTx == true)
 800d80e:	e01a      	b.n	800d846 <PrepareFrame+0x3be>
					}
				}
				else
				{
					LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 800d810:	4b36      	ldr	r3, [pc, #216]	@ (800d8ec <PrepareFrame+0x464>)
 800d812:	781a      	ldrb	r2, [r3, #0]
 800d814:	4b39      	ldr	r3, [pc, #228]	@ (800d8fc <PrepareFrame+0x474>)
 800d816:	701a      	strb	r2, [r3, #0]
					payload = MacCommandsBuffer;
 800d818:	4b35      	ldr	r3, [pc, #212]	@ (800d8f0 <PrepareFrame+0x468>)
 800d81a:	62bb      	str	r3, [r7, #40]	@ 0x28
					framePort = 0;
 800d81c:	2300      	movs	r3, #0
 800d81e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (MacCommandsInNextTx == true)
 800d822:	e010      	b.n	800d846 <PrepareFrame+0x3be>
				}
			}
		}
		else
		{
			if ((MacCommandsBufferIndex > 0) && (MacCommandsInNextTx == true))
 800d824:	4b31      	ldr	r3, [pc, #196]	@ (800d8ec <PrepareFrame+0x464>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00c      	beq.n	800d846 <PrepareFrame+0x3be>
 800d82c:	4b34      	ldr	r3, [pc, #208]	@ (800d900 <PrepareFrame+0x478>)
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d008      	beq.n	800d846 <PrepareFrame+0x3be>
			{
				LoRaMacTxPayloadLen = MacCommandsBufferIndex;
 800d834:	4b2d      	ldr	r3, [pc, #180]	@ (800d8ec <PrepareFrame+0x464>)
 800d836:	781a      	ldrb	r2, [r3, #0]
 800d838:	4b30      	ldr	r3, [pc, #192]	@ (800d8fc <PrepareFrame+0x474>)
 800d83a:	701a      	strb	r2, [r3, #0]
				payload = MacCommandsBuffer;
 800d83c:	4b2c      	ldr	r3, [pc, #176]	@ (800d8f0 <PrepareFrame+0x468>)
 800d83e:	62bb      	str	r3, [r7, #40]	@ 0x28
				framePort = 0;
 800d840:	2300      	movs	r3, #0
 800d842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		}
		MacCommandsInNextTx = false;
 800d846:	4b2e      	ldr	r3, [pc, #184]	@ (800d900 <PrepareFrame+0x478>)
 800d848:	2200      	movs	r2, #0
 800d84a:	701a      	strb	r2, [r3, #0]
		// Store MAC commands which must be re-send in case the device does not receive a downlink anymore
		MacCommandsBufferToRepeatIndex = ParseMacCommandsToRepeat(MacCommandsBuffer, MacCommandsBufferIndex, MacCommandsBufferToRepeat);
 800d84c:	4b27      	ldr	r3, [pc, #156]	@ (800d8ec <PrepareFrame+0x464>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	4a29      	ldr	r2, [pc, #164]	@ (800d8f8 <PrepareFrame+0x470>)
 800d852:	4619      	mov	r1, r3
 800d854:	4826      	ldr	r0, [pc, #152]	@ (800d8f0 <PrepareFrame+0x468>)
 800d856:	f7ff f827 	bl	800c8a8 <ParseMacCommandsToRepeat>
 800d85a:	4603      	mov	r3, r0
 800d85c:	461a      	mov	r2, r3
 800d85e:	4b25      	ldr	r3, [pc, #148]	@ (800d8f4 <PrepareFrame+0x46c>)
 800d860:	701a      	strb	r2, [r3, #0]
		if (MacCommandsBufferToRepeatIndex > 0)
 800d862:	4b24      	ldr	r3, [pc, #144]	@ (800d8f4 <PrepareFrame+0x46c>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d002      	beq.n	800d870 <PrepareFrame+0x3e8>
		{
			MacCommandsInNextTx = true;
 800d86a:	4b25      	ldr	r3, [pc, #148]	@ (800d900 <PrepareFrame+0x478>)
 800d86c:	2201      	movs	r2, #1
 800d86e:	701a      	strb	r2, [r3, #0]
		}

		if ((payload != NULL) && (LoRaMacTxPayloadLen > 0))
 800d870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d872:	2b00      	cmp	r3, #0
 800d874:	d05d      	beq.n	800d932 <PrepareFrame+0x4aa>
 800d876:	4b21      	ldr	r3, [pc, #132]	@ (800d8fc <PrepareFrame+0x474>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d059      	beq.n	800d932 <PrepareFrame+0x4aa>
		{
			LoRaMacBuffer[pktHeaderLen++] = framePort;
 800d87e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	f887 202d 	strb.w	r2, [r7, #45]	@ 0x2d
 800d888:	4619      	mov	r1, r3
 800d88a:	4a16      	ldr	r2, [pc, #88]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d88c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d890:	5453      	strb	r3, [r2, r1]

			if (framePort == 0)
 800d892:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d896:	2b00      	cmp	r3, #0
 800d898:	d136      	bne.n	800d908 <PrepareFrame+0x480>
			{
				// Reset buffer index as the mac commands are being sent on port 0
				MacCommandsBufferIndex = 0;
 800d89a:	4b14      	ldr	r3, [pc, #80]	@ (800d8ec <PrepareFrame+0x464>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	701a      	strb	r2, [r3, #0]
				LoRaMacPayloadEncrypt((uint8_t *)payload, LoRaMacTxPayloadLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &LoRaMacBuffer[pktHeaderLen]);
 800d8a0:	4b16      	ldr	r3, [pc, #88]	@ (800d8fc <PrepareFrame+0x474>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	461c      	mov	r4, r3
 800d8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d8e0 <PrepareFrame+0x458>)
 800d8a8:	6819      	ldr	r1, [r3, #0]
 800d8aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d8e8 <PrepareFrame+0x460>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800d8b2:	480c      	ldr	r0, [pc, #48]	@ (800d8e4 <PrepareFrame+0x45c>)
 800d8b4:	4402      	add	r2, r0
 800d8b6:	9202      	str	r2, [sp, #8]
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	9300      	str	r3, [sp, #0]
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4a10      	ldr	r2, [pc, #64]	@ (800d904 <PrepareFrame+0x47c>)
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8c6:	f001 fa8f 	bl	800ede8 <LoRaMacPayloadEncrypt>
 800d8ca:	e032      	b.n	800d932 <PrepareFrame+0x4aa>
 800d8cc:	20006764 	.word	0x20006764
 800d8d0:	20006870 	.word	0x20006870
 800d8d4:	20006510 	.word	0x20006510
 800d8d8:	20006871 	.word	0x20006871
 800d8dc:	20006769 	.word	0x20006769
 800d8e0:	20006548 	.word	0x20006548
 800d8e4:	20006554 	.word	0x20006554
 800d8e8:	20006758 	.word	0x20006758
 800d8ec:	2000676b 	.word	0x2000676b
 800d8f0:	20006770 	.word	0x20006770
 800d8f4:	2000676c 	.word	0x2000676c
 800d8f8:	200067f0 	.word	0x200067f0
 800d8fc:	20006656 	.word	0x20006656
 800d900:	2000676a 	.word	0x2000676a
 800d904:	20006520 	.word	0x20006520
			}
			else
			{
				LoRaMacPayloadEncrypt((uint8_t *)payload, LoRaMacTxPayloadLen, LoRaMacAppSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &LoRaMacBuffer[pktHeaderLen]);
 800d908:	4b3b      	ldr	r3, [pc, #236]	@ (800d9f8 <PrepareFrame+0x570>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	461c      	mov	r4, r3
 800d90e:	4b3b      	ldr	r3, [pc, #236]	@ (800d9fc <PrepareFrame+0x574>)
 800d910:	6819      	ldr	r1, [r3, #0]
 800d912:	4b3b      	ldr	r3, [pc, #236]	@ (800da00 <PrepareFrame+0x578>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800d91a:	483a      	ldr	r0, [pc, #232]	@ (800da04 <PrepareFrame+0x57c>)
 800d91c:	4402      	add	r2, r0
 800d91e:	9202      	str	r2, [sp, #8]
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	2300      	movs	r3, #0
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	460b      	mov	r3, r1
 800d928:	4a37      	ldr	r2, [pc, #220]	@ (800da08 <PrepareFrame+0x580>)
 800d92a:	4621      	mov	r1, r4
 800d92c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d92e:	f001 fa5b 	bl	800ede8 <LoRaMacPayloadEncrypt>
			}
		}
		LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 800d932:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d936:	b29b      	uxth	r3, r3
 800d938:	4a2f      	ldr	r2, [pc, #188]	@ (800d9f8 <PrepareFrame+0x570>)
 800d93a:	7812      	ldrb	r2, [r2, #0]
 800d93c:	4413      	add	r3, r2
 800d93e:	b29a      	uxth	r2, r3
 800d940:	4b32      	ldr	r3, [pc, #200]	@ (800da0c <PrepareFrame+0x584>)
 800d942:	801a      	strh	r2, [r3, #0]

		LoRaMacComputeMic(LoRaMacBuffer, LoRaMacBufferPktLen, LoRaMacNwkSKey, LoRaMacDevAddr, UP_LINK, UpLinkCounter, &mic);
 800d944:	4b31      	ldr	r3, [pc, #196]	@ (800da0c <PrepareFrame+0x584>)
 800d946:	8819      	ldrh	r1, [r3, #0]
 800d948:	4b2c      	ldr	r3, [pc, #176]	@ (800d9fc <PrepareFrame+0x574>)
 800d94a:	6818      	ldr	r0, [r3, #0]
 800d94c:	4b2c      	ldr	r3, [pc, #176]	@ (800da00 <PrepareFrame+0x578>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f107 0214 	add.w	r2, r7, #20
 800d954:	9202      	str	r2, [sp, #8]
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	2300      	movs	r3, #0
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	4603      	mov	r3, r0
 800d95e:	4a2c      	ldr	r2, [pc, #176]	@ (800da10 <PrepareFrame+0x588>)
 800d960:	4828      	ldr	r0, [pc, #160]	@ (800da04 <PrepareFrame+0x57c>)
 800d962:	f001 f9db 	bl	800ed1c <LoRaMacComputeMic>

		LoRaMacBuffer[LoRaMacBufferPktLen + 0] = mic & 0xFF;
 800d966:	6979      	ldr	r1, [r7, #20]
 800d968:	4b28      	ldr	r3, [pc, #160]	@ (800da0c <PrepareFrame+0x584>)
 800d96a:	881b      	ldrh	r3, [r3, #0]
 800d96c:	461a      	mov	r2, r3
 800d96e:	b2c9      	uxtb	r1, r1
 800d970:	4b24      	ldr	r3, [pc, #144]	@ (800da04 <PrepareFrame+0x57c>)
 800d972:	5499      	strb	r1, [r3, r2]
		LoRaMacBuffer[LoRaMacBufferPktLen + 1] = (mic >> 8) & 0xFF;
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	0a1a      	lsrs	r2, r3, #8
 800d978:	4b24      	ldr	r3, [pc, #144]	@ (800da0c <PrepareFrame+0x584>)
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	b2d1      	uxtb	r1, r2
 800d980:	4a20      	ldr	r2, [pc, #128]	@ (800da04 <PrepareFrame+0x57c>)
 800d982:	54d1      	strb	r1, [r2, r3]
		LoRaMacBuffer[LoRaMacBufferPktLen + 2] = (mic >> 16) & 0xFF;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	0c1a      	lsrs	r2, r3, #16
 800d988:	4b20      	ldr	r3, [pc, #128]	@ (800da0c <PrepareFrame+0x584>)
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	3302      	adds	r3, #2
 800d98e:	b2d1      	uxtb	r1, r2
 800d990:	4a1c      	ldr	r2, [pc, #112]	@ (800da04 <PrepareFrame+0x57c>)
 800d992:	54d1      	strb	r1, [r2, r3]
		LoRaMacBuffer[LoRaMacBufferPktLen + 3] = (mic >> 24) & 0xFF;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	0e1a      	lsrs	r2, r3, #24
 800d998:	4b1c      	ldr	r3, [pc, #112]	@ (800da0c <PrepareFrame+0x584>)
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	3303      	adds	r3, #3
 800d99e:	b2d1      	uxtb	r1, r2
 800d9a0:	4a18      	ldr	r2, [pc, #96]	@ (800da04 <PrepareFrame+0x57c>)
 800d9a2:	54d1      	strb	r1, [r2, r3]

		LoRaMacBufferPktLen += LORAMAC_MFR_LEN;
 800d9a4:	4b19      	ldr	r3, [pc, #100]	@ (800da0c <PrepareFrame+0x584>)
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	4b17      	ldr	r3, [pc, #92]	@ (800da0c <PrepareFrame+0x584>)
 800d9ae:	801a      	strh	r2, [r3, #0]

		break;
 800d9b0:	e01d      	b.n	800d9ee <PrepareFrame+0x566>
	case FRAME_TYPE_PROPRIETARY:
		if ((fBuffer != NULL) && (LoRaMacTxPayloadLen > 0))
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d019      	beq.n	800d9ec <PrepareFrame+0x564>
 800d9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d9f8 <PrepareFrame+0x570>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d015      	beq.n	800d9ec <PrepareFrame+0x564>
		{
			memcpy1(LoRaMacBuffer + pktHeaderLen, (uint8_t *)fBuffer, LoRaMacTxPayloadLen);
 800d9c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d9c4:	4a0f      	ldr	r2, [pc, #60]	@ (800da04 <PrepareFrame+0x57c>)
 800d9c6:	4413      	add	r3, r2
 800d9c8:	4a0b      	ldr	r2, [pc, #44]	@ (800d9f8 <PrepareFrame+0x570>)
 800d9ca:	7812      	ldrb	r2, [r2, #0]
 800d9cc:	6839      	ldr	r1, [r7, #0]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f013 f8e7 	bl	8020ba2 <memcpy1>
			LoRaMacBufferPktLen = pktHeaderLen + LoRaMacTxPayloadLen;
 800d9d4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	4a07      	ldr	r2, [pc, #28]	@ (800d9f8 <PrepareFrame+0x570>)
 800d9dc:	7812      	ldrb	r2, [r2, #0]
 800d9de:	4413      	add	r3, r2
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800da0c <PrepareFrame+0x584>)
 800d9e4:	801a      	strh	r2, [r3, #0]
		}
		break;
 800d9e6:	e001      	b.n	800d9ec <PrepareFrame+0x564>
	default:
		return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	e001      	b.n	800d9f0 <PrepareFrame+0x568>
		break;
 800d9ec:	bf00      	nop
	}

	return LORAMAC_STATUS_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3734      	adds	r7, #52	@ 0x34
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd90      	pop	{r4, r7, pc}
 800d9f8:	20006656 	.word	0x20006656
 800d9fc:	20006548 	.word	0x20006548
 800da00:	20006758 	.word	0x20006758
 800da04:	20006554 	.word	0x20006554
 800da08:	20006530 	.word	0x20006530
 800da0c:	20006654 	.word	0x20006654
 800da10:	20006520 	.word	0x20006520

0800da14 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel(uint8_t channel)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	4603      	mov	r3, r0
 800da1c:	71fb      	strb	r3, [r7, #7]
	TxConfigParams_t txConfig;
	int8_t txPower = 0;
 800da1e:	2300      	movs	r3, #0
 800da20:	73fb      	strb	r3, [r7, #15]

	txConfig.Channel = channel;
 800da22:	79fb      	ldrb	r3, [r7, #7]
 800da24:	743b      	strb	r3, [r7, #16]
	txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 800da26:	4b34      	ldr	r3, [pc, #208]	@ (800daf8 <SendFrameOnChannel+0xe4>)
 800da28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800da2c:	747b      	strb	r3, [r7, #17]
	txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
 800da2e:	4b32      	ldr	r3, [pc, #200]	@ (800daf8 <SendFrameOnChannel+0xe4>)
 800da30:	f993 3000 	ldrsb.w	r3, [r3]
 800da34:	74bb      	strb	r3, [r7, #18]
	txConfig.MaxEirp = LoRaMacParams.MaxEirp;
 800da36:	4b30      	ldr	r3, [pc, #192]	@ (800daf8 <SendFrameOnChannel+0xe4>)
 800da38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da3a:	617b      	str	r3, [r7, #20]
	txConfig.AntennaGain = LoRaMacParams.AntennaGain;
 800da3c:	4b2e      	ldr	r3, [pc, #184]	@ (800daf8 <SendFrameOnChannel+0xe4>)
 800da3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da40:	61bb      	str	r3, [r7, #24]
	txConfig.PktLen = LoRaMacBufferPktLen;
 800da42:	4b2e      	ldr	r3, [pc, #184]	@ (800dafc <SendFrameOnChannel+0xe8>)
 800da44:	881b      	ldrh	r3, [r3, #0]
 800da46:	83bb      	strh	r3, [r7, #28]

	// If we are connecting to a single channel gateway we use always the same predefined channel and datarate
	if (singleChannelGateway)
 800da48:	4b2d      	ldr	r3, [pc, #180]	@ (800db00 <SendFrameOnChannel+0xec>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d006      	beq.n	800da5e <SendFrameOnChannel+0x4a>
	{
		txConfig.Channel = singleChannelSelected;
 800da50:	4b2c      	ldr	r3, [pc, #176]	@ (800db04 <SendFrameOnChannel+0xf0>)
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	743b      	strb	r3, [r7, #16]
		txConfig.Datarate = singleChannelDatarate;
 800da56:	4b2c      	ldr	r3, [pc, #176]	@ (800db08 <SendFrameOnChannel+0xf4>)
 800da58:	f993 3000 	ldrsb.w	r3, [r3]
 800da5c:	747b      	strb	r3, [r7, #17]
	}

	RegionTxConfig(LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir);
 800da5e:	4b2b      	ldr	r3, [pc, #172]	@ (800db0c <SendFrameOnChannel+0xf8>)
 800da60:	7818      	ldrb	r0, [r3, #0]
 800da62:	f107 020f 	add.w	r2, r7, #15
 800da66:	f107 0110 	add.w	r1, r7, #16
 800da6a:	4b29      	ldr	r3, [pc, #164]	@ (800db10 <SendFrameOnChannel+0xfc>)
 800da6c:	f003 f80e 	bl	8010a8c <RegionTxConfig>

	MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da70:	4b28      	ldr	r3, [pc, #160]	@ (800db14 <SendFrameOnChannel+0x100>)
 800da72:	2201      	movs	r2, #1
 800da74:	705a      	strb	r2, [r3, #1]
	McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800da76:	4b28      	ldr	r3, [pc, #160]	@ (800db18 <SendFrameOnChannel+0x104>)
 800da78:	2201      	movs	r2, #1
 800da7a:	705a      	strb	r2, [r3, #1]
	McpsConfirm.Datarate = LoRaMacParams.ChannelsDatarate;
 800da7c:	4b1e      	ldr	r3, [pc, #120]	@ (800daf8 <SendFrameOnChannel+0xe4>)
 800da7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800da82:	b2da      	uxtb	r2, r3
 800da84:	4b24      	ldr	r3, [pc, #144]	@ (800db18 <SendFrameOnChannel+0x104>)
 800da86:	709a      	strb	r2, [r3, #2]
	McpsConfirm.TxPower = txPower;
 800da88:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800da8c:	4b22      	ldr	r3, [pc, #136]	@ (800db18 <SendFrameOnChannel+0x104>)
 800da8e:	70da      	strb	r2, [r3, #3]

	// Store the time on air
	McpsConfirm.TxTimeOnAir = TxTimeOnAir;
 800da90:	4b1f      	ldr	r3, [pc, #124]	@ (800db10 <SendFrameOnChannel+0xfc>)
 800da92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da96:	4920      	ldr	r1, [pc, #128]	@ (800db18 <SendFrameOnChannel+0x104>)
 800da98:	e9c1 2302 	strd	r2, r3, [r1, #8]
	MlmeConfirm.TxTimeOnAir = TxTimeOnAir;
 800da9c:	4b1c      	ldr	r3, [pc, #112]	@ (800db10 <SendFrameOnChannel+0xfc>)
 800da9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa2:	491c      	ldr	r1, [pc, #112]	@ (800db14 <SendFrameOnChannel+0x100>)
 800daa4:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Starts the MAC layer status check timer
	TimerSetValue(&MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT);
 800daa8:	f04f 02fa 	mov.w	r2, #250	@ 0xfa
 800daac:	f04f 0300 	mov.w	r3, #0
 800dab0:	481a      	ldr	r0, [pc, #104]	@ (800db1c <SendFrameOnChannel+0x108>)
 800dab2:	f013 faa1 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&MacStateCheckTimer);
 800dab6:	4819      	ldr	r0, [pc, #100]	@ (800db1c <SendFrameOnChannel+0x108>)
 800dab8:	f013 f9ba 	bl	8020e30 <util_timer_start>

	if (IsLoRaMacNetworkJoined != JOIN_OK)
 800dabc:	4b18      	ldr	r3, [pc, #96]	@ (800db20 <SendFrameOnChannel+0x10c>)
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d005      	beq.n	800dad0 <SendFrameOnChannel+0xbc>
	{
		JoinRequestTrials++;
 800dac4:	4b17      	ldr	r3, [pc, #92]	@ (800db24 <SendFrameOnChannel+0x110>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	3301      	adds	r3, #1
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	4b15      	ldr	r3, [pc, #84]	@ (800db24 <SendFrameOnChannel+0x110>)
 800dace:	701a      	strb	r2, [r3, #0]
	}

	// Send now
	Radio.Send(LoRaMacBuffer, LoRaMacBufferPktLen);
 800dad0:	4b15      	ldr	r3, [pc, #84]	@ (800db28 <SendFrameOnChannel+0x114>)
 800dad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dad4:	4a09      	ldr	r2, [pc, #36]	@ (800dafc <SendFrameOnChannel+0xe8>)
 800dad6:	8812      	ldrh	r2, [r2, #0]
 800dad8:	b2d2      	uxtb	r2, r2
 800dada:	4611      	mov	r1, r2
 800dadc:	4813      	ldr	r0, [pc, #76]	@ (800db2c <SendFrameOnChannel+0x118>)
 800dade:	4798      	blx	r3

	LoRaMacState |= LORAMAC_TX_RUNNING;
 800dae0:	4b13      	ldr	r3, [pc, #76]	@ (800db30 <SendFrameOnChannel+0x11c>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f043 0301 	orr.w	r3, r3, #1
 800dae8:	4a11      	ldr	r2, [pc, #68]	@ (800db30 <SendFrameOnChannel+0x11c>)
 800daea:	6013      	str	r3, [r2, #0]

	return LORAMAC_STATUS_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3720      	adds	r7, #32
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20006870 	.word	0x20006870
 800dafc:	20006654 	.word	0x20006654
 800db00:	20006ce8 	.word	0x20006ce8
 800db04:	20006ce9 	.word	0x20006ce9
 800db08:	200000c4 	.word	0x200000c4
 800db0c:	20006510 	.word	0x20006510
 800db10:	20006a10 	.word	0x20006a10
 800db14:	20006a50 	.word	0x20006a50
 800db18:	20006a38 	.word	0x20006a38
 800db1c:	20006910 	.word	0x20006910
 800db20:	20006761 	.word	0x20006761
 800db24:	20006a18 	.word	0x20006a18
 800db28:	08025450 	.word	0x08025450
 800db2c:	20006554 	.word	0x20006554
 800db30:	20006908 	.word	0x20006908

0800db34 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave(uint16_t timeout)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	80fb      	strh	r3, [r7, #6]
	ContinuousWaveParams_t continuousWave;

	continuousWave.Channel = Channel;
 800db3e:	4b18      	ldr	r3, [pc, #96]	@ (800dba0 <SetTxContinuousWave+0x6c>)
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	723b      	strb	r3, [r7, #8]
	continuousWave.Datarate = LoRaMacParams.ChannelsDatarate;
 800db44:	4b17      	ldr	r3, [pc, #92]	@ (800dba4 <SetTxContinuousWave+0x70>)
 800db46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800db4a:	727b      	strb	r3, [r7, #9]
	continuousWave.TxPower = LoRaMacParams.ChannelsTxPower;
 800db4c:	4b15      	ldr	r3, [pc, #84]	@ (800dba4 <SetTxContinuousWave+0x70>)
 800db4e:	f993 3000 	ldrsb.w	r3, [r3]
 800db52:	72bb      	strb	r3, [r7, #10]
	continuousWave.MaxEirp = LoRaMacParams.MaxEirp;
 800db54:	4b13      	ldr	r3, [pc, #76]	@ (800dba4 <SetTxContinuousWave+0x70>)
 800db56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db58:	60fb      	str	r3, [r7, #12]
	continuousWave.AntennaGain = LoRaMacParams.AntennaGain;
 800db5a:	4b12      	ldr	r3, [pc, #72]	@ (800dba4 <SetTxContinuousWave+0x70>)
 800db5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db5e:	613b      	str	r3, [r7, #16]
	continuousWave.Timeout = timeout;
 800db60:	88fb      	ldrh	r3, [r7, #6]
 800db62:	82bb      	strh	r3, [r7, #20]

	RegionSetContinuousWave(LoRaMacRegion, &continuousWave);
 800db64:	4b10      	ldr	r3, [pc, #64]	@ (800dba8 <SetTxContinuousWave+0x74>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f107 0208 	add.w	r2, r7, #8
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f003 fbda 	bl	8011328 <RegionSetContinuousWave>

	// Starts the MAC layer status check timer
	TimerSetValue(&MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT);
 800db74:	f04f 02fa 	mov.w	r2, #250	@ 0xfa
 800db78:	f04f 0300 	mov.w	r3, #0
 800db7c:	480b      	ldr	r0, [pc, #44]	@ (800dbac <SetTxContinuousWave+0x78>)
 800db7e:	f013 fa3b 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&MacStateCheckTimer);
 800db82:	480a      	ldr	r0, [pc, #40]	@ (800dbac <SetTxContinuousWave+0x78>)
 800db84:	f013 f954 	bl	8020e30 <util_timer_start>

	LoRaMacState |= LORAMAC_TX_RUNNING;
 800db88:	4b09      	ldr	r3, [pc, #36]	@ (800dbb0 <SetTxContinuousWave+0x7c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f043 0301 	orr.w	r3, r3, #1
 800db90:	4a07      	ldr	r2, [pc, #28]	@ (800dbb0 <SetTxContinuousWave+0x7c>)
 800db92:	6013      	str	r3, [r2, #0]

	return LORAMAC_STATUS_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3718      	adds	r7, #24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	200068f9 	.word	0x200068f9
 800dba4:	20006870 	.word	0x20006870
 800dba8:	20006510 	.word	0x20006510
 800dbac:	20006910 	.word	0x20006910
 800dbb0:	20006908 	.word	0x20006908

0800dbb4 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1(uint16_t timeout, uint32_t frequency, uint8_t power)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	4603      	mov	r3, r0
 800dbbc:	6039      	str	r1, [r7, #0]
 800dbbe:	80fb      	strh	r3, [r7, #6]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	717b      	strb	r3, [r7, #5]
	Radio.SetTxContinuousWave(frequency, power, timeout);
 800dbc4:	4b0d      	ldr	r3, [pc, #52]	@ (800dbfc <SetTxContinuousWave1+0x48>)
 800dbc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbc8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800dbcc:	88fa      	ldrh	r2, [r7, #6]
 800dbce:	6838      	ldr	r0, [r7, #0]
 800dbd0:	4798      	blx	r3

	// Starts the MAC layer status check timer
	TimerSetValue(&MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT);
 800dbd2:	f04f 02fa 	mov.w	r2, #250	@ 0xfa
 800dbd6:	f04f 0300 	mov.w	r3, #0
 800dbda:	4809      	ldr	r0, [pc, #36]	@ (800dc00 <SetTxContinuousWave1+0x4c>)
 800dbdc:	f013 fa0c 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&MacStateCheckTimer);
 800dbe0:	4807      	ldr	r0, [pc, #28]	@ (800dc00 <SetTxContinuousWave1+0x4c>)
 800dbe2:	f013 f925 	bl	8020e30 <util_timer_start>

	LoRaMacState |= LORAMAC_TX_RUNNING;
 800dbe6:	4b07      	ldr	r3, [pc, #28]	@ (800dc04 <SetTxContinuousWave1+0x50>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f043 0301 	orr.w	r3, r3, #1
 800dbee:	4a05      	ldr	r2, [pc, #20]	@ (800dc04 <SetTxContinuousWave1+0x50>)
 800dbf0:	6013      	str	r3, [r2, #0]

	return LORAMAC_STATUS_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}
 800dbfc:	08025450 	.word	0x08025450
 800dc00:	20006910 	.word	0x20006910
 800dc04:	20006908 	.word	0x20006908

0800dc08 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization(LoRaMacPrimitives_t *primitives, LoRaMacCallback_t *callbacks, LoRaMacRegion_t region, DeviceClass_t nodeClass, bool region_change)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b090      	sub	sp, #64	@ 0x40
 800dc0c:	af04      	add	r7, sp, #16
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	4611      	mov	r1, r2
 800dc14:	461a      	mov	r2, r3
 800dc16:	460b      	mov	r3, r1
 800dc18:	71fb      	strb	r3, [r7, #7]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	71bb      	strb	r3, [r7, #6]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	if (primitives == NULL)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <LoRaMacInitialization+0x20>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e22a      	b.n	800e07e <LoRaMacInitialization+0x476>
	}

	if ((primitives->MacMcpsConfirm == NULL) ||
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d007      	beq.n	800dc40 <LoRaMacInitialization+0x38>
		(primitives->MacMcpsIndication == NULL) ||
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	685b      	ldr	r3, [r3, #4]
	if ((primitives->MacMcpsConfirm == NULL) ||
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d003      	beq.n	800dc40 <LoRaMacInitialization+0x38>
		(primitives->MacMlmeConfirm == NULL))
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	689b      	ldr	r3, [r3, #8]
		(primitives->MacMcpsIndication == NULL) ||
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <LoRaMacInitialization+0x3c>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc40:	2303      	movs	r3, #3
 800dc42:	e21c      	b.n	800e07e <LoRaMacInitialization+0x476>
	}
	// Verify if the region is supported
	if (RegionIsActive(region) == false)
 800dc44:	79fb      	ldrb	r3, [r7, #7]
 800dc46:	4618      	mov	r0, r3
 800dc48:	f002 fa9c 	bl	8010184 <RegionIsActive>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	f083 0301 	eor.w	r3, r3, #1
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <LoRaMacInitialization+0x54>
	{
		return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800dc58:	230a      	movs	r3, #10
 800dc5a:	e210      	b.n	800e07e <LoRaMacInitialization+0x476>
	}

	LoRaMacPrimitives = primitives;
 800dc5c:	4ab1      	ldr	r2, [pc, #708]	@ (800df24 <LoRaMacInitialization+0x31c>)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6013      	str	r3, [r2, #0]
	LoRaMacCallbacks = callbacks;
 800dc62:	4ab1      	ldr	r2, [pc, #708]	@ (800df28 <LoRaMacInitialization+0x320>)
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	6013      	str	r3, [r2, #0]
	LoRaMacRegion = region;
 800dc68:	4ab0      	ldr	r2, [pc, #704]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dc6a:	79fb      	ldrb	r3, [r7, #7]
 800dc6c:	7013      	strb	r3, [r2, #0]

	LoRaMacFlags.Value = 0;
 800dc6e:	4bb0      	ldr	r3, [pc, #704]	@ (800df30 <LoRaMacInitialization+0x328>)
 800dc70:	2200      	movs	r2, #0
 800dc72:	701a      	strb	r2, [r3, #0]

	LoRaMacDeviceClass = nodeClass;
 800dc74:	4aaf      	ldr	r2, [pc, #700]	@ (800df34 <LoRaMacInitialization+0x32c>)
 800dc76:	79bb      	ldrb	r3, [r7, #6]
 800dc78:	7013      	strb	r3, [r2, #0]
	LoRaMacState = LORAMAC_IDLE;
 800dc7a:	4baf      	ldr	r3, [pc, #700]	@ (800df38 <LoRaMacInitialization+0x330>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	601a      	str	r2, [r3, #0]

	JoinRequestTrials = 0;
 800dc80:	4bae      	ldr	r3, [pc, #696]	@ (800df3c <LoRaMacInitialization+0x334>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	701a      	strb	r2, [r3, #0]
	MaxJoinRequestTrials = 1;
 800dc86:	4bae      	ldr	r3, [pc, #696]	@ (800df40 <LoRaMacInitialization+0x338>)
 800dc88:	2201      	movs	r2, #1
 800dc8a:	701a      	strb	r2, [r3, #0]
	RepeaterSupport = false;
 800dc8c:	4bad      	ldr	r3, [pc, #692]	@ (800df44 <LoRaMacInitialization+0x33c>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	701a      	strb	r2, [r3, #0]

	// Reset duty cycle times
	AggregatedLastTxDoneTime = 0;
 800dc92:	49ad      	ldr	r1, [pc, #692]	@ (800df48 <LoRaMacInitialization+0x340>)
 800dc94:	f04f 0200 	mov.w	r2, #0
 800dc98:	f04f 0300 	mov.w	r3, #0
 800dc9c:	e9c1 2300 	strd	r2, r3, [r1]
	AggregatedTimeOff = 0;
 800dca0:	49aa      	ldr	r1, [pc, #680]	@ (800df4c <LoRaMacInitialization+0x344>)
 800dca2:	f04f 0200 	mov.w	r2, #0
 800dca6:	f04f 0300 	mov.w	r3, #0
 800dcaa:	e9c1 2300 	strd	r2, r3, [r1]

	// Reset to defaults
	getPhy.Attribute = PHY_DUTY_CYCLE;
 800dcae:	230b      	movs	r3, #11
 800dcb0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dcb4:	4b9d      	ldr	r3, [pc, #628]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f002 faa8 	bl	8010214 <RegionGetPhyParam>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	DutyCycleOn = (bool)phyParam.Value;
 800dcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	bf14      	ite	ne
 800dcce:	2301      	movne	r3, #1
 800dcd0:	2300      	moveq	r3, #0
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	4b9e      	ldr	r3, [pc, #632]	@ (800df50 <LoRaMacInitialization+0x348>)
 800dcd6:	701a      	strb	r2, [r3, #0]

	getPhy.Attribute = PHY_DEF_TX_POWER;
 800dcd8:	2308      	movs	r3, #8
 800dcda:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dcde:	4b93      	ldr	r3, [pc, #588]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dce6:	4611      	mov	r1, r2
 800dce8:	4618      	mov	r0, r3
 800dcea:	f002 fa93 	bl	8010214 <RegionGetPhyParam>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800dcf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf4:	b25a      	sxtb	r2, r3
 800dcf6:	4b97      	ldr	r3, [pc, #604]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dcf8:	701a      	strb	r2, [r3, #0]

	getPhy.Attribute = PHY_DEF_TX_DR;
 800dcfa:	2305      	movs	r3, #5
 800dcfc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dd00:	4b8a      	ldr	r3, [pc, #552]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dd02:	781b      	ldrb	r3, [r3, #0]
 800dd04:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dd08:	4611      	mov	r1, r2
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f002 fa82 	bl	8010214 <RegionGetPhyParam>
 800dd10:	4603      	mov	r3, r0
 800dd12:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800dd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd16:	b25a      	sxtb	r2, r3
 800dd18:	4b8e      	ldr	r3, [pc, #568]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dd1a:	705a      	strb	r2, [r3, #1]

	getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800dd1c:	230c      	movs	r3, #12
 800dd1e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dd22:	4b82      	ldr	r3, [pc, #520]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f002 fa71 	bl	8010214 <RegionGetPhyParam>
 800dd32:	4603      	mov	r3, r0
 800dd34:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.MaxRxWindow = phyParam.Value;
 800dd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd38:	4a86      	ldr	r2, [pc, #536]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dd3a:	60d3      	str	r3, [r2, #12]

	getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800dd3c:	230d      	movs	r3, #13
 800dd3e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dd42:	4b7a      	ldr	r3, [pc, #488]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f002 fa61 	bl	8010214 <RegionGetPhyParam>
 800dd52:	4603      	mov	r3, r0
 800dd54:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800dd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd58:	4a7e      	ldr	r2, [pc, #504]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dd5a:	6113      	str	r3, [r2, #16]

	getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800dd5c:	230e      	movs	r3, #14
 800dd5e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dd62:	4b72      	ldr	r3, [pc, #456]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f002 fa51 	bl	8010214 <RegionGetPhyParam>
 800dd72:	4603      	mov	r3, r0
 800dd74:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800dd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd78:	4a76      	ldr	r2, [pc, #472]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dd7a:	6153      	str	r3, [r2, #20]

	getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800dd7c:	230f      	movs	r3, #15
 800dd7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dd82:	4b6a      	ldr	r3, [pc, #424]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f002 fa41 	bl	8010214 <RegionGetPhyParam>
 800dd92:	4603      	mov	r3, r0
 800dd94:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800dd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd98:	4a6e      	ldr	r2, [pc, #440]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dd9a:	6193      	str	r3, [r2, #24]

	getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800dd9c:	2310      	movs	r3, #16
 800dd9e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dda2:	4b62      	ldr	r3, [pc, #392]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ddaa:	4611      	mov	r1, r2
 800ddac:	4618      	mov	r0, r3
 800ddae:	f002 fa31 	bl	8010214 <RegionGetPhyParam>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ddb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb8:	4a66      	ldr	r2, [pc, #408]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800ddba:	61d3      	str	r3, [r2, #28]

	getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ddbc:	2313      	movs	r3, #19
 800ddbe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800ddc2:	4b5a      	ldr	r3, [pc, #360]	@ (800df2c <LoRaMacInitialization+0x324>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ddca:	4611      	mov	r1, r2
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f002 fa21 	bl	8010214 <RegionGetPhyParam>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ddd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	4b5e      	ldr	r3, [pc, #376]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dddc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800dde0:	2314      	movs	r3, #20
 800dde2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800dde6:	4b51      	ldr	r3, [pc, #324]	@ (800df2c <LoRaMacInitialization+0x324>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ddee:	4611      	mov	r1, r2
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f002 fa0f 	bl	8010214 <RegionGetPhyParam>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ddfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfc:	4a55      	ldr	r2, [pc, #340]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800ddfe:	6253      	str	r3, [r2, #36]	@ 0x24

	getPhy.Attribute = PHY_DEF_RX2_DR;
 800de00:	2315      	movs	r3, #21
 800de02:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800de06:	4b49      	ldr	r3, [pc, #292]	@ (800df2c <LoRaMacInitialization+0x324>)
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800de0e:	4611      	mov	r1, r2
 800de10:	4618      	mov	r0, r3
 800de12:	f002 f9ff 	bl	8010214 <RegionGetPhyParam>
 800de16:	4603      	mov	r3, r0
 800de18:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800de1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	4b4d      	ldr	r3, [pc, #308]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800de20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800de24:	231a      	movs	r3, #26
 800de26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800de2a:	4b40      	ldr	r3, [pc, #256]	@ (800df2c <LoRaMacInitialization+0x324>)
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800de32:	4611      	mov	r1, r2
 800de34:	4618      	mov	r0, r3
 800de36:	f002 f9ed 	bl	8010214 <RegionGetPhyParam>
 800de3a:	4603      	mov	r3, r0
 800de3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	b2da      	uxtb	r2, r3
 800de42:	4b44      	ldr	r3, [pc, #272]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800de44:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800de48:	231b      	movs	r3, #27
 800de4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800de4e:	4b37      	ldr	r3, [pc, #220]	@ (800df2c <LoRaMacInitialization+0x324>)
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800de56:	4611      	mov	r1, r2
 800de58:	4618      	mov	r0, r3
 800de5a:	f002 f9db 	bl	8010214 <RegionGetPhyParam>
 800de5e:	4603      	mov	r3, r0
 800de60:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800de62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de64:	b2da      	uxtb	r2, r3
 800de66:	4b3b      	ldr	r3, [pc, #236]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800de68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

	getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800de6c:	231c      	movs	r3, #28
 800de6e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800de72:	4b2e      	ldr	r3, [pc, #184]	@ (800df2c <LoRaMacInitialization+0x324>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800de7a:	4611      	mov	r1, r2
 800de7c:	4618      	mov	r0, r3
 800de7e:	f002 f9c9 	bl	8010214 <RegionGetPhyParam>
 800de82:	4603      	mov	r3, r0
 800de84:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.MaxEirp = phyParam.fValue;
 800de86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de88:	4a32      	ldr	r2, [pc, #200]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800de8a:	6313      	str	r3, [r2, #48]	@ 0x30

	getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800de8c:	231d      	movs	r3, #29
 800de8e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800de92:	4b26      	ldr	r3, [pc, #152]	@ (800df2c <LoRaMacInitialization+0x324>)
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800de9a:	4611      	mov	r1, r2
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 f9b9 	bl	8010214 <RegionGetPhyParam>
 800dea2:	4603      	mov	r3, r0
 800dea4:	62bb      	str	r3, [r7, #40]	@ 0x28
	LoRaMacParamsDefaults.AntennaGain = phyParam.fValue;
 800dea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea8:	4a2a      	ldr	r2, [pc, #168]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800deaa:	6353      	str	r3, [r2, #52]	@ 0x34

	RegionInitDefaults(LoRaMacRegion, INIT_TYPE_INIT);
 800deac:	4b1f      	ldr	r3, [pc, #124]	@ (800df2c <LoRaMacInitialization+0x324>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	2100      	movs	r1, #0
 800deb2:	4618      	mov	r0, r3
 800deb4:	f002 fa7a 	bl	80103ac <RegionInitDefaults>

	// Init parameters which are not set in function ResetMacParameters
	LoRaMacParamsDefaults.ChannelsNbRep = 1;
 800deb8:	4b26      	ldr	r3, [pc, #152]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2020 	strb.w	r2, [r3, #32]
	LoRaMacParamsDefaults.SystemMaxRxError = 10;
 800dec0:	4b24      	ldr	r3, [pc, #144]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dec2:	220a      	movs	r2, #10
 800dec4:	605a      	str	r2, [r3, #4]
	LoRaMacParamsDefaults.MinRxSymbols = 6;
 800dec6:	4b23      	ldr	r3, [pc, #140]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dec8:	2206      	movs	r2, #6
 800deca:	721a      	strb	r2, [r3, #8]

	LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError;
 800decc:	4b21      	ldr	r3, [pc, #132]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	4a21      	ldr	r2, [pc, #132]	@ (800df58 <LoRaMacInitialization+0x350>)
 800ded2:	6053      	str	r3, [r2, #4]
	LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols;
 800ded4:	4b1f      	ldr	r3, [pc, #124]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800ded6:	7a1a      	ldrb	r2, [r3, #8]
 800ded8:	4b1f      	ldr	r3, [pc, #124]	@ (800df58 <LoRaMacInitialization+0x350>)
 800deda:	721a      	strb	r2, [r3, #8]
	LoRaMacParams.MaxRxWindow = LoRaMacParamsDefaults.MaxRxWindow;
 800dedc:	4b1d      	ldr	r3, [pc, #116]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	4a1d      	ldr	r2, [pc, #116]	@ (800df58 <LoRaMacInitialization+0x350>)
 800dee2:	60d3      	str	r3, [r2, #12]
	LoRaMacParams.ReceiveDelay1 = LoRaMacParamsDefaults.ReceiveDelay1;
 800dee4:	4b1b      	ldr	r3, [pc, #108]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	4a1b      	ldr	r2, [pc, #108]	@ (800df58 <LoRaMacInitialization+0x350>)
 800deea:	6113      	str	r3, [r2, #16]
	LoRaMacParams.ReceiveDelay2 = LoRaMacParamsDefaults.ReceiveDelay2;
 800deec:	4b19      	ldr	r3, [pc, #100]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800deee:	695b      	ldr	r3, [r3, #20]
 800def0:	4a19      	ldr	r2, [pc, #100]	@ (800df58 <LoRaMacInitialization+0x350>)
 800def2:	6153      	str	r3, [r2, #20]
	LoRaMacParams.JoinAcceptDelay1 = LoRaMacParamsDefaults.JoinAcceptDelay1;
 800def4:	4b17      	ldr	r3, [pc, #92]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	4a17      	ldr	r2, [pc, #92]	@ (800df58 <LoRaMacInitialization+0x350>)
 800defa:	6193      	str	r3, [r2, #24]
	LoRaMacParams.JoinAcceptDelay2 = LoRaMacParamsDefaults.JoinAcceptDelay2;
 800defc:	4b15      	ldr	r3, [pc, #84]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800defe:	69db      	ldr	r3, [r3, #28]
 800df00:	4a15      	ldr	r2, [pc, #84]	@ (800df58 <LoRaMacInitialization+0x350>)
 800df02:	61d3      	str	r3, [r2, #28]
	LoRaMacParams.ChannelsNbRep = LoRaMacParamsDefaults.ChannelsNbRep;
 800df04:	4b13      	ldr	r3, [pc, #76]	@ (800df54 <LoRaMacInitialization+0x34c>)
 800df06:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df0a:	4b13      	ldr	r3, [pc, #76]	@ (800df58 <LoRaMacInitialization+0x350>)
 800df0c:	f883 2020 	strb.w	r2, [r3, #32]

	ResetMacParameters();
 800df10:	f7ff fa16 	bl	800d340 <ResetMacParameters>

	if (!region_change)
 800df14:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800df18:	f083 0301 	eor.w	r3, r3, #1
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d06b      	beq.n	800dffa <LoRaMacInitialization+0x3f2>
 800df22:	e01b      	b.n	800df5c <LoRaMacInitialization+0x354>
 800df24:	20006930 	.word	0x20006930
 800df28:	20006934 	.word	0x20006934
 800df2c:	20006510 	.word	0x20006510
 800df30:	20006a6c 	.word	0x20006a6c
 800df34:	20006550 	.word	0x20006550
 800df38:	20006908 	.word	0x20006908
 800df3c:	20006a18 	.word	0x20006a18
 800df40:	20006a19 	.word	0x20006a19
 800df44:	20006552 	.word	0x20006552
 800df48:	200068e8 	.word	0x200068e8
 800df4c:	200068f0 	.word	0x200068f0
 800df50:	200068f8 	.word	0x200068f8
 800df54:	200068a8 	.word	0x200068a8
 800df58:	20006870 	.word	0x20006870
	{
		// Initialize timers
		TimerInit(&MacStateCheckTimer, OnMacStateCheckTimerEvent);
 800df5c:	2300      	movs	r3, #0
 800df5e:	9302      	str	r3, [sp, #8]
 800df60:	4b49      	ldr	r3, [pc, #292]	@ (800e088 <LoRaMacInitialization+0x480>)
 800df62:	9301      	str	r3, [sp, #4]
 800df64:	2300      	movs	r3, #0
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df6c:	f04f 0300 	mov.w	r3, #0
 800df70:	4846      	ldr	r0, [pc, #280]	@ (800e08c <LoRaMacInitialization+0x484>)
 800df72:	f012 ff27 	bl	8020dc4 <util_timer_create>
		TimerSetValue(&MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT);
 800df76:	f04f 02fa 	mov.w	r2, #250	@ 0xfa
 800df7a:	f04f 0300 	mov.w	r3, #0
 800df7e:	4843      	ldr	r0, [pc, #268]	@ (800e08c <LoRaMacInitialization+0x484>)
 800df80:	f013 f83a 	bl	8020ff8 <util_timer_set_period>

		TimerInit(&TxDelayedTimer, OnTxDelayedTimerEvent);
 800df84:	2300      	movs	r3, #0
 800df86:	9302      	str	r3, [sp, #8]
 800df88:	4b41      	ldr	r3, [pc, #260]	@ (800e090 <LoRaMacInitialization+0x488>)
 800df8a:	9301      	str	r3, [sp, #4]
 800df8c:	2300      	movs	r3, #0
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df94:	f04f 0300 	mov.w	r3, #0
 800df98:	483e      	ldr	r0, [pc, #248]	@ (800e094 <LoRaMacInitialization+0x48c>)
 800df9a:	f012 ff13 	bl	8020dc4 <util_timer_create>
		TimerInit(&RxWindowTimer1, OnRxWindow1TimerEvent);
 800df9e:	2300      	movs	r3, #0
 800dfa0:	9302      	str	r3, [sp, #8]
 800dfa2:	4b3d      	ldr	r3, [pc, #244]	@ (800e098 <LoRaMacInitialization+0x490>)
 800dfa4:	9301      	str	r3, [sp, #4]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	483a      	ldr	r0, [pc, #232]	@ (800e09c <LoRaMacInitialization+0x494>)
 800dfb4:	f012 ff06 	bl	8020dc4 <util_timer_create>
		TimerInit(&RxWindowTimer2, OnRxWindow2TimerEvent);
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9302      	str	r3, [sp, #8]
 800dfbc:	4b38      	ldr	r3, [pc, #224]	@ (800e0a0 <LoRaMacInitialization+0x498>)
 800dfbe:	9301      	str	r3, [sp, #4]
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfc8:	f04f 0300 	mov.w	r3, #0
 800dfcc:	4835      	ldr	r0, [pc, #212]	@ (800e0a4 <LoRaMacInitialization+0x49c>)
 800dfce:	f012 fef9 	bl	8020dc4 <util_timer_create>
		TimerInit(&AckTimeoutTimer, OnAckTimeoutTimerEvent);
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	9302      	str	r3, [sp, #8]
 800dfd6:	4b34      	ldr	r3, [pc, #208]	@ (800e0a8 <LoRaMacInitialization+0x4a0>)
 800dfd8:	9301      	str	r3, [sp, #4]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfe2:	f04f 0300 	mov.w	r3, #0
 800dfe6:	4831      	ldr	r0, [pc, #196]	@ (800e0ac <LoRaMacInitialization+0x4a4>)
 800dfe8:	f012 feec 	bl	8020dc4 <util_timer_create>

		// Store the current initialization time
		LoRaMacInitializationTime = TimerGetCurrentTime();
 800dfec:	f013 f82a 	bl	8021044 <util_timer_get_currenttime>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	492e      	ldr	r1, [pc, #184]	@ (800e0b0 <LoRaMacInitialization+0x4a8>)
 800dff6:	e9c1 2300 	strd	r2, r3, [r1]
	}

	// Initialize Radio driver
	RadioEvents.TxDone = OnRadioTxDone;
 800dffa:	4b2e      	ldr	r3, [pc, #184]	@ (800e0b4 <LoRaMacInitialization+0x4ac>)
 800dffc:	4a2e      	ldr	r2, [pc, #184]	@ (800e0b8 <LoRaMacInitialization+0x4b0>)
 800dffe:	601a      	str	r2, [r3, #0]
	RadioEvents.RxDone = OnRadioRxDone;
 800e000:	4b2c      	ldr	r3, [pc, #176]	@ (800e0b4 <LoRaMacInitialization+0x4ac>)
 800e002:	4a2e      	ldr	r2, [pc, #184]	@ (800e0bc <LoRaMacInitialization+0x4b4>)
 800e004:	609a      	str	r2, [r3, #8]
	RadioEvents.RxError = OnRadioRxError;
 800e006:	4b2b      	ldr	r3, [pc, #172]	@ (800e0b4 <LoRaMacInitialization+0x4ac>)
 800e008:	4a2d      	ldr	r2, [pc, #180]	@ (800e0c0 <LoRaMacInitialization+0x4b8>)
 800e00a:	611a      	str	r2, [r3, #16]
	RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e00c:	4b29      	ldr	r3, [pc, #164]	@ (800e0b4 <LoRaMacInitialization+0x4ac>)
 800e00e:	4a2d      	ldr	r2, [pc, #180]	@ (800e0c4 <LoRaMacInitialization+0x4bc>)
 800e010:	605a      	str	r2, [r3, #4]
	RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e012:	4b28      	ldr	r3, [pc, #160]	@ (800e0b4 <LoRaMacInitialization+0x4ac>)
 800e014:	4a2c      	ldr	r2, [pc, #176]	@ (800e0c8 <LoRaMacInitialization+0x4c0>)
 800e016:	60da      	str	r2, [r3, #12]
	Radio.Init(&RadioEvents);
 800e018:	4b2c      	ldr	r3, [pc, #176]	@ (800e0cc <LoRaMacInitialization+0x4c4>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4825      	ldr	r0, [pc, #148]	@ (800e0b4 <LoRaMacInitialization+0x4ac>)
 800e01e:	4798      	blx	r3

	// Random seed initialization
	srand1(Radio.Random());
 800e020:	4b2a      	ldr	r3, [pc, #168]	@ (800e0cc <LoRaMacInitialization+0x4c4>)
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	4798      	blx	r3
 800e026:	4603      	mov	r3, r0
 800e028:	4618      	mov	r0, r3
 800e02a:	f012 fd93 	bl	8020b54 <srand1>

	// PublicNetwork = true;
	Radio.SetPublicNetwork(PublicNetwork);
 800e02e:	4b27      	ldr	r3, [pc, #156]	@ (800e0cc <LoRaMacInitialization+0x4c4>)
 800e030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e032:	4a27      	ldr	r2, [pc, #156]	@ (800e0d0 <LoRaMacInitialization+0x4c8>)
 800e034:	7812      	ldrb	r2, [r2, #0]
 800e036:	4610      	mov	r0, r2
 800e038:	4798      	blx	r3

	// Putting the RegionTxConfig here makes the OTAA join more stable
	TxConfigParams_t txConfig;
	int8_t txPower = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	75fb      	strb	r3, [r7, #23]

	txConfig.Channel = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	763b      	strb	r3, [r7, #24]
	txConfig.Datarate = LoRaMacParams.ChannelsDatarate;
 800e042:	4b24      	ldr	r3, [pc, #144]	@ (800e0d4 <LoRaMacInitialization+0x4cc>)
 800e044:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e048:	767b      	strb	r3, [r7, #25]
	txConfig.TxPower = LoRaMacParams.ChannelsTxPower;
 800e04a:	4b22      	ldr	r3, [pc, #136]	@ (800e0d4 <LoRaMacInitialization+0x4cc>)
 800e04c:	f993 3000 	ldrsb.w	r3, [r3]
 800e050:	76bb      	strb	r3, [r7, #26]
	txConfig.MaxEirp = LoRaMacParams.MaxEirp;
 800e052:	4b20      	ldr	r3, [pc, #128]	@ (800e0d4 <LoRaMacInitialization+0x4cc>)
 800e054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e056:	61fb      	str	r3, [r7, #28]
	txConfig.AntennaGain = LoRaMacParams.AntennaGain;
 800e058:	4b1e      	ldr	r3, [pc, #120]	@ (800e0d4 <LoRaMacInitialization+0x4cc>)
 800e05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e05c:	623b      	str	r3, [r7, #32]
	txConfig.PktLen = LoRaMacBufferPktLen;
 800e05e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0d8 <LoRaMacInitialization+0x4d0>)
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	84bb      	strh	r3, [r7, #36]	@ 0x24

	RegionTxConfig(LoRaMacRegion, &txConfig, &txPower, &TxTimeOnAir);
 800e064:	4b1d      	ldr	r3, [pc, #116]	@ (800e0dc <LoRaMacInitialization+0x4d4>)
 800e066:	7818      	ldrb	r0, [r3, #0]
 800e068:	f107 0217 	add.w	r2, r7, #23
 800e06c:	f107 0118 	add.w	r1, r7, #24
 800e070:	4b1b      	ldr	r3, [pc, #108]	@ (800e0e0 <LoRaMacInitialization+0x4d8>)
 800e072:	f002 fd0b 	bl	8010a8c <RegionTxConfig>

	Radio.Sleep();
 800e076:	4b15      	ldr	r3, [pc, #84]	@ (800e0cc <LoRaMacInitialization+0x4c4>)
 800e078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e07a:	4798      	blx	r3

	return LORAMAC_STATUS_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3730      	adds	r7, #48	@ 0x30
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	0800bd89 	.word	0x0800bd89
 800e08c:	20006910 	.word	0x20006910
 800e090:	0800c279 	.word	0x0800c279
 800e094:	20006958 	.word	0x20006958
 800e098:	0800c329 	.word	0x0800c329
 800e09c:	20006978 	.word	0x20006978
 800e0a0:	0800c3d9 	.word	0x0800c3d9
 800e0a4:	20006998 	.word	0x20006998
 800e0a8:	0800c4f5 	.word	0x0800c4f5
 800e0ac:	200069e8 	.word	0x200069e8
 800e0b0:	20006900 	.word	0x20006900
 800e0b4:	20006938 	.word	0x20006938
 800e0b8:	0800b0e1 	.word	0x0800b0e1
 800e0bc:	0800b2d9 	.word	0x0800b2d9
 800e0c0:	0800bc11 	.word	0x0800bc11
 800e0c4:	0800bbc9 	.word	0x0800bbc9
 800e0c8:	0800bcbd 	.word	0x0800bcbd
 800e0cc:	08025450 	.word	0x08025450
 800e0d0:	20006551 	.word	0x20006551
 800e0d4:	20006870 	.word	0x20006870
 800e0d8:	20006654 	.word	0x20006654
 800e0dc:	20006510 	.word	0x20006510
 800e0e0:	20006a10 	.word	0x20006a10

0800e0e4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible(uint8_t size, LoRaMacTxInfo_t *txInfo)
{
 800e0e4:	b590      	push	{r4, r7, lr}
 800e0e6:	b08d      	sub	sp, #52	@ 0x34
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	6039      	str	r1, [r7, #0]
 800e0ee:	71fb      	strb	r3, [r7, #7]
	AdrNextParams_t adrNext;
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	int8_t datarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800e0f0:	4b43      	ldr	r3, [pc, #268]	@ (800e200 <LoRaMacQueryTxPossible+0x11c>)
 800e0f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e0f6:	73fb      	strb	r3, [r7, #15]
	int8_t txPower = LoRaMacParamsDefaults.ChannelsTxPower;
 800e0f8:	4b41      	ldr	r3, [pc, #260]	@ (800e200 <LoRaMacQueryTxPossible+0x11c>)
 800e0fa:	f993 3000 	ldrsb.w	r3, [r3]
 800e0fe:	73bb      	strb	r3, [r7, #14]
	uint8_t fOptLen = MacCommandsBufferIndex + MacCommandsBufferToRepeatIndex;
 800e100:	4b40      	ldr	r3, [pc, #256]	@ (800e204 <LoRaMacQueryTxPossible+0x120>)
 800e102:	781a      	ldrb	r2, [r3, #0]
 800e104:	4b40      	ldr	r3, [pc, #256]	@ (800e208 <LoRaMacQueryTxPossible+0x124>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	4413      	add	r3, r2
 800e10a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (txInfo == NULL)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <LoRaMacQueryTxPossible+0x34>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 800e114:	2303      	movs	r3, #3
 800e116:	e06f      	b.n	800e1f8 <LoRaMacQueryTxPossible+0x114>
	}

	// Setup ADR request
	adrNext.UpdateChanMask = false;
 800e118:	2300      	movs	r3, #0
 800e11a:	763b      	strb	r3, [r7, #24]
	adrNext.AdrEnabled = AdrCtrlOn;
 800e11c:	4b3b      	ldr	r3, [pc, #236]	@ (800e20c <LoRaMacQueryTxPossible+0x128>)
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	767b      	strb	r3, [r7, #25]
	adrNext.AdrAckCounter = AdrAckCounter;
 800e122:	4b3b      	ldr	r3, [pc, #236]	@ (800e210 <LoRaMacQueryTxPossible+0x12c>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	61fb      	str	r3, [r7, #28]
	adrNext.Datarate = LoRaMacParams.ChannelsDatarate;
 800e128:	4b3a      	ldr	r3, [pc, #232]	@ (800e214 <LoRaMacQueryTxPossible+0x130>)
 800e12a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800e12e:	f887 3020 	strb.w	r3, [r7, #32]
	adrNext.TxPower = LoRaMacParams.ChannelsTxPower;
 800e132:	4b38      	ldr	r3, [pc, #224]	@ (800e214 <LoRaMacQueryTxPossible+0x130>)
 800e134:	f993 3000 	ldrsb.w	r3, [r3]
 800e138:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	adrNext.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800e13c:	4b35      	ldr	r3, [pc, #212]	@ (800e214 <LoRaMacQueryTxPossible+0x130>)
 800e13e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e142:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	// We call the function for information purposes only. We don't want to
	// apply the datarate, the tx power and the ADR ack counter.
	RegionAdrNext(LoRaMacRegion, &adrNext, &datarate, &txPower, &AdrAckCounter);
 800e146:	4b34      	ldr	r3, [pc, #208]	@ (800e218 <LoRaMacQueryTxPossible+0x134>)
 800e148:	7818      	ldrb	r0, [r3, #0]
 800e14a:	f107 030e 	add.w	r3, r7, #14
 800e14e:	f107 020f 	add.w	r2, r7, #15
 800e152:	f107 0118 	add.w	r1, r7, #24
 800e156:	4c2e      	ldr	r4, [pc, #184]	@ (800e210 <LoRaMacQueryTxPossible+0x12c>)
 800e158:	9400      	str	r4, [sp, #0]
 800e15a:	f002 fae9 	bl	8010730 <RegionAdrNext>

	// Setup PHY request
	getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800e15e:	4b2d      	ldr	r3, [pc, #180]	@ (800e214 <LoRaMacQueryTxPossible+0x130>)
 800e160:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e164:	75bb      	strb	r3, [r7, #22]
	getPhy.Datarate = datarate;
 800e166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e16a:	757b      	strb	r3, [r7, #21]
	getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e16c:	2309      	movs	r3, #9
 800e16e:	753b      	strb	r3, [r7, #20]

	// Change request in case repeater is supported
	if (RepeaterSupport == true)
 800e170:	4b2a      	ldr	r3, [pc, #168]	@ (800e21c <LoRaMacQueryTxPossible+0x138>)
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <LoRaMacQueryTxPossible+0x98>
	{
		getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e178:	230a      	movs	r3, #10
 800e17a:	753b      	strb	r3, [r7, #20]
	}
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800e17c:	4b26      	ldr	r3, [pc, #152]	@ (800e218 <LoRaMacQueryTxPossible+0x134>)
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	f107 0214 	add.w	r2, r7, #20
 800e184:	4611      	mov	r1, r2
 800e186:	4618      	mov	r0, r3
 800e188:	f002 f844 	bl	8010214 <RegionGetPhyParam>
 800e18c:	4603      	mov	r3, r0
 800e18e:	613b      	str	r3, [r7, #16]
	txInfo->CurrentPayloadSize = phyParam.Value;
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	b2da      	uxtb	r2, r3
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	705a      	strb	r2, [r3, #1]

	// Verify if the fOpts fit into the maximum payload
	if (txInfo->CurrentPayloadSize >= fOptLen)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	785b      	ldrb	r3, [r3, #1]
 800e19c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d80b      	bhi.n	800e1bc <LoRaMacQueryTxPossible+0xd8>
	{
		txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize - fOptLen;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	785a      	ldrb	r2, [r3, #1]
 800e1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	701a      	strb	r2, [r3, #0]
		fOptLen = 0;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1ba:	e00c      	b.n	800e1d6 <LoRaMacQueryTxPossible+0xf2>
	}
	else
	{
		txInfo->MaxPossiblePayload = txInfo->CurrentPayloadSize;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	785a      	ldrb	r2, [r3, #1]
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	701a      	strb	r2, [r3, #0]
		// The fOpts don't fit into the maximum payload. Omit the MAC commands to
		// ensure that another uplink is possible.
		fOptLen = 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		MacCommandsBufferIndex = 0;
 800e1ca:	4b0e      	ldr	r3, [pc, #56]	@ (800e204 <LoRaMacQueryTxPossible+0x120>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	701a      	strb	r2, [r3, #0]
		MacCommandsBufferToRepeatIndex = 0;
 800e1d0:	4b0d      	ldr	r3, [pc, #52]	@ (800e208 <LoRaMacQueryTxPossible+0x124>)
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	701a      	strb	r2, [r3, #0]
	}

	// Verify if the fOpts and the payload fit into the maximum payload
	if (ValidatePayloadLength(size, datarate, fOptLen) == false)
 800e1d6:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800e1da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e1de:	79fb      	ldrb	r3, [r7, #7]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe f9df 	bl	800c5a4 <ValidatePayloadLength>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	f083 0301 	eor.w	r3, r3, #1
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d001      	beq.n	800e1f6 <LoRaMacQueryTxPossible+0x112>
	{
		LOG_LIB("LM", "LoRaMacQueryTxPossible -> ValidatePayloadLength failed size = %d DR = %d", size, datarate);

		return LORAMAC_STATUS_LENGTH_ERROR;
 800e1f2:	2308      	movs	r3, #8
 800e1f4:	e000      	b.n	800e1f8 <LoRaMacQueryTxPossible+0x114>
	}
	return LORAMAC_STATUS_OK;
 800e1f6:	2300      	movs	r3, #0
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	372c      	adds	r7, #44	@ 0x2c
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd90      	pop	{r4, r7, pc}
 800e200:	200068a8 	.word	0x200068a8
 800e204:	2000676b 	.word	0x2000676b
 800e208:	2000676c 	.word	0x2000676c
 800e20c:	20006762 	.word	0x20006762
 800e210:	20006764 	.word	0x20006764
 800e214:	20006870 	.word	0x20006870
 800e218:	20006510 	.word	0x20006510
 800e21c:	20006552 	.word	0x20006552

0800e220 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm(MibRequestConfirm_t *mibGet)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
	LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e228:	2300      	movs	r3, #0
 800e22a:	75fb      	strb	r3, [r7, #23]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	if (mibGet == NULL)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d101      	bne.n	800e236 <LoRaMacMibGetRequestConfirm+0x16>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 800e232:	2303      	movs	r3, #3
 800e234:	e10a      	b.n	800e44c <LoRaMacMibGetRequestConfirm+0x22c>
	}

	switch (mibGet->Type)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b1d      	cmp	r3, #29
 800e23c:	f200 8102 	bhi.w	800e444 <LoRaMacMibGetRequestConfirm+0x224>
 800e240:	a201      	add	r2, pc, #4	@ (adr r2, 800e248 <LoRaMacMibGetRequestConfirm+0x28>)
 800e242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e246:	bf00      	nop
 800e248:	0800e2c1 	.word	0x0800e2c1
 800e24c:	0800e2cb 	.word	0x0800e2cb
 800e250:	0800e2d5 	.word	0x0800e2d5
 800e254:	0800e2df 	.word	0x0800e2df
 800e258:	0800e2e9 	.word	0x0800e2e9
 800e25c:	0800e2f3 	.word	0x0800e2f3
 800e260:	0800e2fb 	.word	0x0800e2fb
 800e264:	0800e303 	.word	0x0800e303
 800e268:	0800e30d 	.word	0x0800e30d
 800e26c:	0800e317 	.word	0x0800e317
 800e270:	0800e337 	.word	0x0800e337
 800e274:	0800e349 	.word	0x0800e349
 800e278:	0800e37b 	.word	0x0800e37b
 800e27c:	0800e35b 	.word	0x0800e35b
 800e280:	0800e39b 	.word	0x0800e39b
 800e284:	0800e3a7 	.word	0x0800e3a7
 800e288:	0800e3b1 	.word	0x0800e3b1
 800e28c:	0800e3bb 	.word	0x0800e3bb
 800e290:	0800e3c5 	.word	0x0800e3c5
 800e294:	0800e3cf 	.word	0x0800e3cf
 800e298:	0800e3d9 	.word	0x0800e3d9
 800e29c:	0800e3e5 	.word	0x0800e3e5
 800e2a0:	0800e3fd 	.word	0x0800e3fd
 800e2a4:	0800e3f1 	.word	0x0800e3f1
 800e2a8:	0800e409 	.word	0x0800e409
 800e2ac:	0800e413 	.word	0x0800e413
 800e2b0:	0800e41d 	.word	0x0800e41d
 800e2b4:	0800e427 	.word	0x0800e427
 800e2b8:	0800e431 	.word	0x0800e431
 800e2bc:	0800e43b 	.word	0x0800e43b
	{
	case MIB_DEVICE_CLASS:
	{
		mibGet->Param.Class = LoRaMacDeviceClass;
 800e2c0:	4b64      	ldr	r3, [pc, #400]	@ (800e454 <LoRaMacMibGetRequestConfirm+0x234>)
 800e2c2:	781a      	ldrb	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	711a      	strb	r2, [r3, #4]
		break;
 800e2c8:	e0bf      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_NETWORK_JOINED:
	{
		mibGet->Param.IsNetworkJoined = IsLoRaMacNetworkJoined;
 800e2ca:	4b63      	ldr	r3, [pc, #396]	@ (800e458 <LoRaMacMibGetRequestConfirm+0x238>)
 800e2cc:	781a      	ldrb	r2, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	711a      	strb	r2, [r3, #4]
		break;
 800e2d2:	e0ba      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_ADR:
	{
		mibGet->Param.AdrEnable = AdrCtrlOn;
 800e2d4:	4b61      	ldr	r3, [pc, #388]	@ (800e45c <LoRaMacMibGetRequestConfirm+0x23c>)
 800e2d6:	781a      	ldrb	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	711a      	strb	r2, [r3, #4]
		break;
 800e2dc:	e0b5      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_NET_ID:
	{
		mibGet->Param.NetID = LoRaMacNetID;
 800e2de:	4b60      	ldr	r3, [pc, #384]	@ (800e460 <LoRaMacMibGetRequestConfirm+0x240>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	605a      	str	r2, [r3, #4]
		break;
 800e2e6:	e0b0      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_DEV_ADDR:
	{
		mibGet->Param.DevAddr = LoRaMacDevAddr;
 800e2e8:	4b5e      	ldr	r3, [pc, #376]	@ (800e464 <LoRaMacMibGetRequestConfirm+0x244>)
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	605a      	str	r2, [r3, #4]
		break;
 800e2f0:	e0ab      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_NWK_SKEY:
	{
		mibGet->Param.NwkSKey = LoRaMacNwkSKey;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a5c      	ldr	r2, [pc, #368]	@ (800e468 <LoRaMacMibGetRequestConfirm+0x248>)
 800e2f6:	605a      	str	r2, [r3, #4]
		break;
 800e2f8:	e0a7      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_APP_SKEY:
	{
		mibGet->Param.AppSKey = LoRaMacAppSKey;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4a5b      	ldr	r2, [pc, #364]	@ (800e46c <LoRaMacMibGetRequestConfirm+0x24c>)
 800e2fe:	605a      	str	r2, [r3, #4]
		break;
 800e300:	e0a3      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_PUBLIC_NETWORK:
	{
		mibGet->Param.EnablePublicNetwork = PublicNetwork;
 800e302:	4b5b      	ldr	r3, [pc, #364]	@ (800e470 <LoRaMacMibGetRequestConfirm+0x250>)
 800e304:	781a      	ldrb	r2, [r3, #0]
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	711a      	strb	r2, [r3, #4]
		break;
 800e30a:	e09e      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_REPEATER_SUPPORT:
	{
		mibGet->Param.EnableRepeaterSupport = RepeaterSupport;
 800e30c:	4b59      	ldr	r3, [pc, #356]	@ (800e474 <LoRaMacMibGetRequestConfirm+0x254>)
 800e30e:	781a      	ldrb	r2, [r3, #0]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	711a      	strb	r2, [r3, #4]
		break;
 800e314:	e099      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS:
	{
		getPhy.Attribute = PHY_CHANNELS;
 800e316:	2319      	movs	r3, #25
 800e318:	743b      	strb	r3, [r7, #16]
		phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800e31a:	4b57      	ldr	r3, [pc, #348]	@ (800e478 <LoRaMacMibGetRequestConfirm+0x258>)
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	f107 0210 	add.w	r2, r7, #16
 800e322:	4611      	mov	r1, r2
 800e324:	4618      	mov	r0, r3
 800e326:	f001 ff75 	bl	8010214 <RegionGetPhyParam>
 800e32a:	4603      	mov	r3, r0
 800e32c:	60fb      	str	r3, [r7, #12]

		mibGet->Param.ChannelList = phyParam.Channels;
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	605a      	str	r2, [r3, #4]
		break;
 800e334:	e089      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_RX2_CHANNEL:
	{
		mibGet->Param.Rx2Channel = LoRaMacParams.Rx2Channel;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a50      	ldr	r2, [pc, #320]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e33a:	3304      	adds	r3, #4
 800e33c:	3224      	adds	r2, #36	@ 0x24
 800e33e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e342:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 800e346:	e080      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_RX2_DEFAULT_CHANNEL:
	{
		mibGet->Param.Rx2Channel = LoRaMacParamsDefaults.Rx2Channel;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4a4d      	ldr	r2, [pc, #308]	@ (800e480 <LoRaMacMibGetRequestConfirm+0x260>)
 800e34c:	3304      	adds	r3, #4
 800e34e:	3224      	adds	r2, #36	@ 0x24
 800e350:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e354:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
 800e358:	e077      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS_DEFAULT_MASK:
	{
		getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e35a:	2317      	movs	r3, #23
 800e35c:	743b      	strb	r3, [r7, #16]
		phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800e35e:	4b46      	ldr	r3, [pc, #280]	@ (800e478 <LoRaMacMibGetRequestConfirm+0x258>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	f107 0210 	add.w	r2, r7, #16
 800e366:	4611      	mov	r1, r2
 800e368:	4618      	mov	r0, r3
 800e36a:	f001 ff53 	bl	8010214 <RegionGetPhyParam>
 800e36e:	4603      	mov	r3, r0
 800e370:	60fb      	str	r3, [r7, #12]

		mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e372:	68fa      	ldr	r2, [r7, #12]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	605a      	str	r2, [r3, #4]
		break;
 800e378:	e067      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS_MASK:
	{
		getPhy.Attribute = PHY_CHANNELS_MASK;
 800e37a:	2316      	movs	r3, #22
 800e37c:	743b      	strb	r3, [r7, #16]
		phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800e37e:	4b3e      	ldr	r3, [pc, #248]	@ (800e478 <LoRaMacMibGetRequestConfirm+0x258>)
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	f107 0210 	add.w	r2, r7, #16
 800e386:	4611      	mov	r1, r2
 800e388:	4618      	mov	r0, r3
 800e38a:	f001 ff43 	bl	8010214 <RegionGetPhyParam>
 800e38e:	4603      	mov	r3, r0
 800e390:	60fb      	str	r3, [r7, #12]

		mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e392:	68fa      	ldr	r2, [r7, #12]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	605a      	str	r2, [r3, #4]
		break;
 800e398:	e057      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS_NB_REP:
	{
		mibGet->Param.ChannelNbRep = LoRaMacParams.ChannelsNbRep;
 800e39a:	4b38      	ldr	r3, [pc, #224]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e39c:	f893 2020 	ldrb.w	r2, [r3, #32]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	711a      	strb	r2, [r3, #4]
		break;
 800e3a4:	e051      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_MAX_RX_WINDOW_DURATION:
	{
		mibGet->Param.MaxRxWindow = LoRaMacParams.MaxRxWindow;
 800e3a6:	4b35      	ldr	r3, [pc, #212]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e3a8:	68da      	ldr	r2, [r3, #12]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	605a      	str	r2, [r3, #4]
		break;
 800e3ae:	e04c      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_RECEIVE_DELAY_1:
	{
		mibGet->Param.ReceiveDelay1 = LoRaMacParams.ReceiveDelay1;
 800e3b0:	4b32      	ldr	r3, [pc, #200]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e3b2:	691a      	ldr	r2, [r3, #16]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	605a      	str	r2, [r3, #4]
		break;
 800e3b8:	e047      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_RECEIVE_DELAY_2:
	{
		mibGet->Param.ReceiveDelay2 = LoRaMacParams.ReceiveDelay2;
 800e3ba:	4b30      	ldr	r3, [pc, #192]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e3bc:	695a      	ldr	r2, [r3, #20]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	605a      	str	r2, [r3, #4]
		break;
 800e3c2:	e042      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_JOIN_ACCEPT_DELAY_1:
	{
		mibGet->Param.JoinAcceptDelay1 = LoRaMacParams.JoinAcceptDelay1;
 800e3c4:	4b2d      	ldr	r3, [pc, #180]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e3c6:	699a      	ldr	r2, [r3, #24]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	605a      	str	r2, [r3, #4]
		break;
 800e3cc:	e03d      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_JOIN_ACCEPT_DELAY_2:
	{
		mibGet->Param.JoinAcceptDelay2 = LoRaMacParams.JoinAcceptDelay2;
 800e3ce:	4b2b      	ldr	r3, [pc, #172]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e3d0:	69da      	ldr	r2, [r3, #28]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	605a      	str	r2, [r3, #4]
		break;
 800e3d6:	e038      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS_DEFAULT_DATARATE:
	{
		mibGet->Param.ChannelsDefaultDatarate = LoRaMacParamsDefaults.ChannelsDatarate;
 800e3d8:	4b29      	ldr	r3, [pc, #164]	@ (800e480 <LoRaMacMibGetRequestConfirm+0x260>)
 800e3da:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	711a      	strb	r2, [r3, #4]
		break;
 800e3e2:	e032      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS_DATARATE:
	{
		mibGet->Param.ChannelsDatarate = LoRaMacParams.ChannelsDatarate;
 800e3e4:	4b25      	ldr	r3, [pc, #148]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e3e6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	711a      	strb	r2, [r3, #4]
		break;
 800e3ee:	e02c      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS_DEFAULT_TX_POWER:
	{
		mibGet->Param.ChannelsDefaultTxPower = LoRaMacParamsDefaults.ChannelsTxPower;
 800e3f0:	4b23      	ldr	r3, [pc, #140]	@ (800e480 <LoRaMacMibGetRequestConfirm+0x260>)
 800e3f2:	f993 2000 	ldrsb.w	r2, [r3]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	711a      	strb	r2, [r3, #4]
		break;
 800e3fa:	e026      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_CHANNELS_TX_POWER:
	{
		mibGet->Param.ChannelsTxPower = LoRaMacParams.ChannelsTxPower;
 800e3fc:	4b1f      	ldr	r3, [pc, #124]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e3fe:	f993 2000 	ldrsb.w	r2, [r3]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	711a      	strb	r2, [r3, #4]
		break;
 800e406:	e020      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_UPLINK_COUNTER:
	{
		mibGet->Param.UpLinkCounter = UpLinkCounter;
 800e408:	4b1e      	ldr	r3, [pc, #120]	@ (800e484 <LoRaMacMibGetRequestConfirm+0x264>)
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	605a      	str	r2, [r3, #4]
		break;
 800e410:	e01b      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_DOWNLINK_COUNTER:
	{
		mibGet->Param.DownLinkCounter = DownLinkCounter;
 800e412:	4b1d      	ldr	r3, [pc, #116]	@ (800e488 <LoRaMacMibGetRequestConfirm+0x268>)
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	605a      	str	r2, [r3, #4]
		break;
 800e41a:	e016      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_MULTICAST_CHANNEL:
	{
		mibGet->Param.MulticastList = MulticastChannels;
 800e41c:	4b1b      	ldr	r3, [pc, #108]	@ (800e48c <LoRaMacMibGetRequestConfirm+0x26c>)
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	605a      	str	r2, [r3, #4]
		break;
 800e424:	e011      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_SYSTEM_MAX_RX_ERROR:
	{
		mibGet->Param.SystemMaxRxError = LoRaMacParams.SystemMaxRxError;
 800e426:	4b15      	ldr	r3, [pc, #84]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e428:	685a      	ldr	r2, [r3, #4]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	605a      	str	r2, [r3, #4]
		break;
 800e42e:	e00c      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_MIN_RX_SYMBOLS:
	{
		mibGet->Param.MinRxSymbols = LoRaMacParams.MinRxSymbols;
 800e430:	4b12      	ldr	r3, [pc, #72]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e432:	7a1a      	ldrb	r2, [r3, #8]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	711a      	strb	r2, [r3, #4]
		break;
 800e438:	e007      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	case MIB_ANTENNA_GAIN:
	{
		mibGet->Param.AntennaGain = LoRaMacParams.AntennaGain;
 800e43a:	4b10      	ldr	r3, [pc, #64]	@ (800e47c <LoRaMacMibGetRequestConfirm+0x25c>)
 800e43c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	605a      	str	r2, [r3, #4]
		break;
 800e442:	e002      	b.n	800e44a <LoRaMacMibGetRequestConfirm+0x22a>
	}
	default:
		status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e444:	2302      	movs	r3, #2
 800e446:	75fb      	strb	r3, [r7, #23]
		break;
 800e448:	bf00      	nop
	}

	return status;
 800e44a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3718      	adds	r7, #24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20006550 	.word	0x20006550
 800e458:	20006761 	.word	0x20006761
 800e45c:	20006762 	.word	0x20006762
 800e460:	20006544 	.word	0x20006544
 800e464:	20006548 	.word	0x20006548
 800e468:	20006520 	.word	0x20006520
 800e46c:	20006530 	.word	0x20006530
 800e470:	20006551 	.word	0x20006551
 800e474:	20006552 	.word	0x20006552
 800e478:	20006510 	.word	0x20006510
 800e47c:	20006870 	.word	0x20006870
 800e480:	200068a8 	.word	0x200068a8
 800e484:	20006758 	.word	0x20006758
 800e488:	2000675c 	.word	0x2000675c
 800e48c:	2000654c 	.word	0x2000654c

0800e490 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm(MibRequestConfirm_t *mibSet)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b089      	sub	sp, #36	@ 0x24
 800e494:	af02      	add	r7, sp, #8
 800e496:	6078      	str	r0, [r7, #4]
	LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	75fb      	strb	r3, [r7, #23]
	ChanMaskSetParams_t chanMaskSet;
	VerifyParams_t verify;

	if (mibSet == NULL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d101      	bne.n	800e4a6 <LoRaMacMibSetRequestConfirm+0x16>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 800e4a2:	2303      	movs	r3, #3
 800e4a4:	e23b      	b.n	800e91e <LoRaMacMibSetRequestConfirm+0x48e>
	}
	if ((LoRaMacState & LORAMAC_TX_RUNNING) == LORAMAC_TX_RUNNING)
 800e4a6:	4ba6      	ldr	r3, [pc, #664]	@ (800e740 <LoRaMacMibSetRequestConfirm+0x2b0>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f003 0301 	and.w	r3, r3, #1
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d001      	beq.n	800e4b6 <LoRaMacMibSetRequestConfirm+0x26>
	{
		return LORAMAC_STATUS_BUSY;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e233      	b.n	800e91e <LoRaMacMibSetRequestConfirm+0x48e>
	}

	switch (mibSet->Type)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b1d      	cmp	r3, #29
 800e4bc:	f200 8224 	bhi.w	800e908 <LoRaMacMibSetRequestConfirm+0x478>
 800e4c0:	a201      	add	r2, pc, #4	@ (adr r2, 800e4c8 <LoRaMacMibSetRequestConfirm+0x38>)
 800e4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c6:	bf00      	nop
 800e4c8:	0800e541 	.word	0x0800e541
 800e4cc:	0800e581 	.word	0x0800e581
 800e4d0:	0800e58b 	.word	0x0800e58b
 800e4d4:	0800e595 	.word	0x0800e595
 800e4d8:	0800e59f 	.word	0x0800e59f
 800e4dc:	0800e5a9 	.word	0x0800e5a9
 800e4e0:	0800e5c7 	.word	0x0800e5c7
 800e4e4:	0800e5e5 	.word	0x0800e5e5
 800e4e8:	0800e5fb 	.word	0x0800e5fb
 800e4ec:	0800e909 	.word	0x0800e909
 800e4f0:	0800e605 	.word	0x0800e605
 800e4f4:	0800e6d5 	.word	0x0800e6d5
 800e4f8:	0800e78d 	.word	0x0800e78d
 800e4fc:	0800e713 	.word	0x0800e713
 800e500:	0800e7bb 	.word	0x0800e7bb
 800e504:	0800e7dd 	.word	0x0800e7dd
 800e508:	0800e7e7 	.word	0x0800e7e7
 800e50c:	0800e7f1 	.word	0x0800e7f1
 800e510:	0800e7fb 	.word	0x0800e7fb
 800e514:	0800e805 	.word	0x0800e805
 800e518:	0800e80f 	.word	0x0800e80f
 800e51c:	0800e83d 	.word	0x0800e83d
 800e520:	0800e899 	.word	0x0800e899
 800e524:	0800e86b 	.word	0x0800e86b
 800e528:	0800e8c7 	.word	0x0800e8c7
 800e52c:	0800e8d1 	.word	0x0800e8d1
 800e530:	0800e909 	.word	0x0800e909
 800e534:	0800e8db 	.word	0x0800e8db
 800e538:	0800e8ed 	.word	0x0800e8ed
 800e53c:	0800e8ff 	.word	0x0800e8ff
	{
	case MIB_DEVICE_CLASS:
	{
		LoRaMacDeviceClass = mibSet->Param.Class;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	791a      	ldrb	r2, [r3, #4]
 800e544:	4b7f      	ldr	r3, [pc, #508]	@ (800e744 <LoRaMacMibSetRequestConfirm+0x2b4>)
 800e546:	701a      	strb	r2, [r3, #0]
		switch (LoRaMacDeviceClass)
 800e548:	4b7e      	ldr	r3, [pc, #504]	@ (800e744 <LoRaMacMibSetRequestConfirm+0x2b4>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d00f      	beq.n	800e570 <LoRaMacMibSetRequestConfirm+0xe0>
 800e550:	2b02      	cmp	r3, #2
 800e552:	f300 81dc 	bgt.w	800e90e <LoRaMacMibSetRequestConfirm+0x47e>
 800e556:	2b00      	cmp	r3, #0
 800e558:	d002      	beq.n	800e560 <LoRaMacMibSetRequestConfirm+0xd0>
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d004      	beq.n	800e568 <LoRaMacMibSetRequestConfirm+0xd8>
			NodeAckRequested = false;
			OnRxWindow2TimerEvent(NULL);
			break;
		}
		}
		break;
 800e55e:	e1d6      	b.n	800e90e <LoRaMacMibSetRequestConfirm+0x47e>
			Radio.Sleep();
 800e560:	4b79      	ldr	r3, [pc, #484]	@ (800e748 <LoRaMacMibSetRequestConfirm+0x2b8>)
 800e562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e564:	4798      	blx	r3
			break;
 800e566:	e00a      	b.n	800e57e <LoRaMacMibSetRequestConfirm+0xee>
			Radio.Sleep();
 800e568:	4b77      	ldr	r3, [pc, #476]	@ (800e748 <LoRaMacMibSetRequestConfirm+0x2b8>)
 800e56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e56c:	4798      	blx	r3
			break;
 800e56e:	e006      	b.n	800e57e <LoRaMacMibSetRequestConfirm+0xee>
			NodeAckRequested = false;
 800e570:	4b76      	ldr	r3, [pc, #472]	@ (800e74c <LoRaMacMibSetRequestConfirm+0x2bc>)
 800e572:	2200      	movs	r2, #0
 800e574:	701a      	strb	r2, [r3, #0]
			OnRxWindow2TimerEvent(NULL);
 800e576:	2000      	movs	r0, #0
 800e578:	f7fd ff2e 	bl	800c3d8 <OnRxWindow2TimerEvent>
			break;
 800e57c:	bf00      	nop
		break;
 800e57e:	e1c6      	b.n	800e90e <LoRaMacMibSetRequestConfirm+0x47e>
	}
	case MIB_NETWORK_JOINED:
	{
		IsLoRaMacNetworkJoined = mibSet->Param.IsNetworkJoined;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	791a      	ldrb	r2, [r3, #4]
 800e584:	4b72      	ldr	r3, [pc, #456]	@ (800e750 <LoRaMacMibSetRequestConfirm+0x2c0>)
 800e586:	701a      	strb	r2, [r3, #0]
		break;
 800e588:	e1c8      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_ADR:
	{
		AdrCtrlOn = mibSet->Param.AdrEnable;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	791a      	ldrb	r2, [r3, #4]
 800e58e:	4b71      	ldr	r3, [pc, #452]	@ (800e754 <LoRaMacMibSetRequestConfirm+0x2c4>)
 800e590:	701a      	strb	r2, [r3, #0]
		break;
 800e592:	e1c3      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_NET_ID:
	{
		LoRaMacNetID = mibSet->Param.NetID;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	4a6f      	ldr	r2, [pc, #444]	@ (800e758 <LoRaMacMibSetRequestConfirm+0x2c8>)
 800e59a:	6013      	str	r3, [r2, #0]
		break;
 800e59c:	e1be      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_DEV_ADDR:
	{
		LoRaMacDevAddr = mibSet->Param.DevAddr;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	4a6e      	ldr	r2, [pc, #440]	@ (800e75c <LoRaMacMibSetRequestConfirm+0x2cc>)
 800e5a4:	6013      	str	r3, [r2, #0]
		break;
 800e5a6:	e1b9      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_NWK_SKEY:
	{
		if (mibSet->Param.NwkSKey != NULL)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d007      	beq.n	800e5c0 <LoRaMacMibSetRequestConfirm+0x130>
		{
			memcpy1(LoRaMacNwkSKey, mibSet->Param.NwkSKey,
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	2210      	movs	r2, #16
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	4869      	ldr	r0, [pc, #420]	@ (800e760 <LoRaMacMibSetRequestConfirm+0x2d0>)
 800e5ba:	f012 faf2 	bl	8020ba2 <memcpy1>
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e5be:	e1ad      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	75fb      	strb	r3, [r7, #23]
		break;
 800e5c4:	e1aa      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_APP_SKEY:
	{
		if (mibSet->Param.AppSKey != NULL)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d007      	beq.n	800e5de <LoRaMacMibSetRequestConfirm+0x14e>
		{
			memcpy1(LoRaMacAppSKey, mibSet->Param.AppSKey,
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	2210      	movs	r2, #16
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4863      	ldr	r0, [pc, #396]	@ (800e764 <LoRaMacMibSetRequestConfirm+0x2d4>)
 800e5d8:	f012 fae3 	bl	8020ba2 <memcpy1>
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e5dc:	e19e      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	75fb      	strb	r3, [r7, #23]
		break;
 800e5e2:	e19b      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_PUBLIC_NETWORK:
	{
		PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	791a      	ldrb	r2, [r3, #4]
 800e5e8:	4b5f      	ldr	r3, [pc, #380]	@ (800e768 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800e5ea:	701a      	strb	r2, [r3, #0]
		Radio.SetPublicNetwork(PublicNetwork);
 800e5ec:	4b56      	ldr	r3, [pc, #344]	@ (800e748 <LoRaMacMibSetRequestConfirm+0x2b8>)
 800e5ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5f0:	4a5d      	ldr	r2, [pc, #372]	@ (800e768 <LoRaMacMibSetRequestConfirm+0x2d8>)
 800e5f2:	7812      	ldrb	r2, [r2, #0]
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	4798      	blx	r3
		break;
 800e5f8:	e190      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_REPEATER_SUPPORT:
	{
		RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	791a      	ldrb	r2, [r3, #4]
 800e5fe:	4b5b      	ldr	r3, [pc, #364]	@ (800e76c <LoRaMacMibSetRequestConfirm+0x2dc>)
 800e600:	701a      	strb	r2, [r3, #0]
		break;
 800e602:	e18b      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_RX2_CHANNEL:
	{
		verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	7a1b      	ldrb	r3, [r3, #8]
 800e608:	b25b      	sxtb	r3, r3
 800e60a:	723b      	strb	r3, [r7, #8]
		verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800e60c:	4b58      	ldr	r3, [pc, #352]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e60e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e612:	727b      	strb	r3, [r7, #9]

		if (RegionVerify(LoRaMacRegion, &verify, PHY_RX_DR) == true)
 800e614:	4b57      	ldr	r3, [pc, #348]	@ (800e774 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	f107 0108 	add.w	r1, r7, #8
 800e61c:	2206      	movs	r2, #6
 800e61e:	4618      	mov	r0, r3
 800e620:	f001 ff32 	bl	8010488 <RegionVerify>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d051      	beq.n	800e6ce <LoRaMacMibSetRequestConfirm+0x23e>
		{
			LoRaMacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800e62a:	4b51      	ldr	r3, [pc, #324]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	3324      	adds	r3, #36	@ 0x24
 800e630:	3204      	adds	r2, #4
 800e632:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e636:	e883 0003 	stmia.w	r3, {r0, r1}

			if ((LoRaMacDeviceClass == CLASS_C) && (IsLoRaMacNetworkJoined == JOIN_OK))
 800e63a:	4b42      	ldr	r3, [pc, #264]	@ (800e744 <LoRaMacMibSetRequestConfirm+0x2b4>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b02      	cmp	r3, #2
 800e640:	f040 8167 	bne.w	800e912 <LoRaMacMibSetRequestConfirm+0x482>
 800e644:	4b42      	ldr	r3, [pc, #264]	@ (800e750 <LoRaMacMibSetRequestConfirm+0x2c0>)
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	f040 8162 	bne.w	800e912 <LoRaMacMibSetRequestConfirm+0x482>
			{
				// Compute Rx2 windows parameters
				RegionComputeRxWindowParameters(LoRaMacRegion,
 800e64e:	4b49      	ldr	r3, [pc, #292]	@ (800e774 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800e650:	7818      	ldrb	r0, [r3, #0]
												LoRaMacParams.Rx2Channel.Datarate,
 800e652:	4b47      	ldr	r3, [pc, #284]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
				RegionComputeRxWindowParameters(LoRaMacRegion,
 800e658:	b259      	sxtb	r1, r3
 800e65a:	4b45      	ldr	r3, [pc, #276]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e65c:	7a1a      	ldrb	r2, [r3, #8]
 800e65e:	4b44      	ldr	r3, [pc, #272]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	4c45      	ldr	r4, [pc, #276]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e664:	9400      	str	r4, [sp, #0]
 800e666:	f002 f8fb 	bl	8010860 <RegionComputeRxWindowParameters>
												LoRaMacParams.MinRxSymbols,
												LoRaMacParams.SystemMaxRxError,
												&RxWindow2Config);

				RxWindow2Config.Channel = Channel;
 800e66a:	4b44      	ldr	r3, [pc, #272]	@ (800e77c <LoRaMacMibSetRequestConfirm+0x2ec>)
 800e66c:	781a      	ldrb	r2, [r3, #0]
 800e66e:	4b42      	ldr	r3, [pc, #264]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e670:	701a      	strb	r2, [r3, #0]
				RxWindow2Config.Frequency = LoRaMacParams.Rx2Channel.Frequency;
 800e672:	4b3f      	ldr	r3, [pc, #252]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e676:	4a40      	ldr	r2, [pc, #256]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e678:	6053      	str	r3, [r2, #4]
				RxWindow2Config.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800e67a:	4b3d      	ldr	r3, [pc, #244]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e67c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 800e680:	4b3d      	ldr	r3, [pc, #244]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e682:	741a      	strb	r2, [r3, #16]
				RxWindow2Config.RepeaterSupport = RepeaterSupport;
 800e684:	4b39      	ldr	r3, [pc, #228]	@ (800e76c <LoRaMacMibSetRequestConfirm+0x2dc>)
 800e686:	781a      	ldrb	r2, [r3, #0]
 800e688:	4b3b      	ldr	r3, [pc, #236]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e68a:	745a      	strb	r2, [r3, #17]
				RxWindow2Config.Window = 1;
 800e68c:	4b3a      	ldr	r3, [pc, #232]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e68e:	2201      	movs	r2, #1
 800e690:	74da      	strb	r2, [r3, #19]
				RxWindow2Config.RxContinuous = true;
 800e692:	4b39      	ldr	r3, [pc, #228]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e694:	2201      	movs	r2, #1
 800e696:	749a      	strb	r2, [r3, #18]

				if (RegionRxConfig(LoRaMacRegion, &RxWindow2Config, (int8_t *)&McpsIndication.RxDatarate) == true)
 800e698:	4b36      	ldr	r3, [pc, #216]	@ (800e774 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	4a38      	ldr	r2, [pc, #224]	@ (800e780 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800e69e:	4936      	ldr	r1, [pc, #216]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f002 f977 	bl	8010994 <RegionRxConfig>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00d      	beq.n	800e6c8 <LoRaMacMibSetRequestConfirm+0x238>
				{
					RxWindowSetup(RxWindow2Config.RxContinuous, LoRaMacParams.MaxRxWindow);
 800e6ac:	4b32      	ldr	r3, [pc, #200]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e6ae:	7c9b      	ldrb	r3, [r3, #18]
 800e6b0:	4a2f      	ldr	r2, [pc, #188]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e6b2:	68d2      	ldr	r2, [r2, #12]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fd ff58 	bl	800c56c <RxWindowSetup>
					RxSlot = RxWindow2Config.Window;
 800e6bc:	4b2e      	ldr	r3, [pc, #184]	@ (800e778 <LoRaMacMibSetRequestConfirm+0x2e8>)
 800e6be:	7cdb      	ldrb	r3, [r3, #19]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4b30      	ldr	r3, [pc, #192]	@ (800e784 <LoRaMacMibSetRequestConfirm+0x2f4>)
 800e6c4:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e6c6:	e124      	b.n	800e912 <LoRaMacMibSetRequestConfirm+0x482>
					status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	75fb      	strb	r3, [r7, #23]
		break;
 800e6cc:	e121      	b.n	800e912 <LoRaMacMibSetRequestConfirm+0x482>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	75fb      	strb	r3, [r7, #23]
		break;
 800e6d2:	e11e      	b.n	800e912 <LoRaMacMibSetRequestConfirm+0x482>
	}
	case MIB_RX2_DEFAULT_CHANNEL:
	{
		verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	7a1b      	ldrb	r3, [r3, #8]
 800e6d8:	b25b      	sxtb	r3, r3
 800e6da:	723b      	strb	r3, [r7, #8]
		verify.DatarateParams.DownlinkDwellTime = LoRaMacParams.DownlinkDwellTime;
 800e6dc:	4b24      	ldr	r3, [pc, #144]	@ (800e770 <LoRaMacMibSetRequestConfirm+0x2e0>)
 800e6de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e6e2:	727b      	strb	r3, [r7, #9]

		if (RegionVerify(LoRaMacRegion, &verify, PHY_RX_DR) == true)
 800e6e4:	4b23      	ldr	r3, [pc, #140]	@ (800e774 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	f107 0108 	add.w	r1, r7, #8
 800e6ec:	2206      	movs	r2, #6
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f001 feca 	bl	8010488 <RegionVerify>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d008      	beq.n	800e70c <LoRaMacMibSetRequestConfirm+0x27c>
		{
			LoRaMacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800e6fa:	4b23      	ldr	r3, [pc, #140]	@ (800e788 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	3324      	adds	r3, #36	@ 0x24
 800e700:	3204      	adds	r2, #4
 800e702:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e706:	e883 0003 	stmia.w	r3, {r0, r1}
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e70a:	e107      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e70c:	2303      	movs	r3, #3
 800e70e:	75fb      	strb	r3, [r7, #23]
		break;
 800e710:	e104      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_CHANNELS_DEFAULT_MASK:
	{
		chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	60fb      	str	r3, [r7, #12]
		chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800e718:	2301      	movs	r3, #1
 800e71a:	743b      	strb	r3, [r7, #16]

		if (RegionChanMaskSet(LoRaMacRegion, &chanMaskSet) == false)
 800e71c:	4b15      	ldr	r3, [pc, #84]	@ (800e774 <LoRaMacMibSetRequestConfirm+0x2e4>)
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	f107 020c 	add.w	r2, r7, #12
 800e724:	4611      	mov	r1, r2
 800e726:	4618      	mov	r0, r3
 800e728:	f001 ff96 	bl	8010658 <RegionChanMaskSet>
 800e72c:	4603      	mov	r3, r0
 800e72e:	f083 0301 	eor.w	r3, r3, #1
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 80ee 	beq.w	800e916 <LoRaMacMibSetRequestConfirm+0x486>
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e73a:	2303      	movs	r3, #3
 800e73c:	75fb      	strb	r3, [r7, #23]
		}
		break;
 800e73e:	e0ea      	b.n	800e916 <LoRaMacMibSetRequestConfirm+0x486>
 800e740:	20006908 	.word	0x20006908
 800e744:	20006550 	.word	0x20006550
 800e748:	08025450 	.word	0x08025450
 800e74c:	20006768 	.word	0x20006768
 800e750:	20006761 	.word	0x20006761
 800e754:	20006762 	.word	0x20006762
 800e758:	20006544 	.word	0x20006544
 800e75c:	20006548 	.word	0x20006548
 800e760:	20006520 	.word	0x20006520
 800e764:	20006530 	.word	0x20006530
 800e768:	20006551 	.word	0x20006551
 800e76c:	20006552 	.word	0x20006552
 800e770:	20006870 	.word	0x20006870
 800e774:	20006510 	.word	0x20006510
 800e778:	200069d4 	.word	0x200069d4
 800e77c:	200068f9 	.word	0x200068f9
 800e780:	20006a20 	.word	0x20006a20
 800e784:	20006a68 	.word	0x20006a68
 800e788:	200068a8 	.word	0x200068a8
	}
	case MIB_CHANNELS_MASK:
	{
		chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	60fb      	str	r3, [r7, #12]
		chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800e792:	2300      	movs	r3, #0
 800e794:	743b      	strb	r3, [r7, #16]

		if (RegionChanMaskSet(LoRaMacRegion, &chanMaskSet) == false)
 800e796:	4b64      	ldr	r3, [pc, #400]	@ (800e928 <LoRaMacMibSetRequestConfirm+0x498>)
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	f107 020c 	add.w	r2, r7, #12
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 ff59 	bl	8010658 <RegionChanMaskSet>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	f083 0301 	eor.w	r3, r3, #1
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f000 80b3 	beq.w	800e91a <LoRaMacMibSetRequestConfirm+0x48a>
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	75fb      	strb	r3, [r7, #23]
		}
		break;
 800e7b8:	e0af      	b.n	800e91a <LoRaMacMibSetRequestConfirm+0x48a>
	}
	case MIB_CHANNELS_NB_REP:
	{
		if ((mibSet->Param.ChannelNbRep >= 1) &&
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	791b      	ldrb	r3, [r3, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d009      	beq.n	800e7d6 <LoRaMacMibSetRequestConfirm+0x346>
			(mibSet->Param.ChannelNbRep <= 15))
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	791b      	ldrb	r3, [r3, #4]
		if ((mibSet->Param.ChannelNbRep >= 1) &&
 800e7c6:	2b0f      	cmp	r3, #15
 800e7c8:	d805      	bhi.n	800e7d6 <LoRaMacMibSetRequestConfirm+0x346>
		{
			LoRaMacParams.ChannelsNbRep = mibSet->Param.ChannelNbRep;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	791a      	ldrb	r2, [r3, #4]
 800e7ce:	4b57      	ldr	r3, [pc, #348]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e7d0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e7d4:	e0a2      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	75fb      	strb	r3, [r7, #23]
		break;
 800e7da:	e09f      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_MAX_RX_WINDOW_DURATION:
	{
		LoRaMacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	4a52      	ldr	r2, [pc, #328]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e7e2:	60d3      	str	r3, [r2, #12]
		break;
 800e7e4:	e09a      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_RECEIVE_DELAY_1:
	{
		LoRaMacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	4a50      	ldr	r2, [pc, #320]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e7ec:	6113      	str	r3, [r2, #16]
		break;
 800e7ee:	e095      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_RECEIVE_DELAY_2:
	{
		LoRaMacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	4a4d      	ldr	r2, [pc, #308]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e7f6:	6153      	str	r3, [r2, #20]
		break;
 800e7f8:	e090      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_JOIN_ACCEPT_DELAY_1:
	{
		LoRaMacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	4a4b      	ldr	r2, [pc, #300]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e800:	6193      	str	r3, [r2, #24]
		break;
 800e802:	e08b      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_JOIN_ACCEPT_DELAY_2:
	{
		LoRaMacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	4a48      	ldr	r2, [pc, #288]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e80a:	61d3      	str	r3, [r2, #28]
		break;
 800e80c:	e086      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_CHANNELS_DEFAULT_DATARATE:
	{
		verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e814:	723b      	strb	r3, [r7, #8]

		if (RegionVerify(LoRaMacRegion, &verify, PHY_DEF_TX_DR) == true)
 800e816:	4b44      	ldr	r3, [pc, #272]	@ (800e928 <LoRaMacMibSetRequestConfirm+0x498>)
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	f107 0108 	add.w	r1, r7, #8
 800e81e:	2205      	movs	r2, #5
 800e820:	4618      	mov	r0, r3
 800e822:	f001 fe31 	bl	8010488 <RegionVerify>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d004      	beq.n	800e836 <LoRaMacMibSetRequestConfirm+0x3a6>
		{
			LoRaMacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e82c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e830:	4b3f      	ldr	r3, [pc, #252]	@ (800e930 <LoRaMacMibSetRequestConfirm+0x4a0>)
 800e832:	705a      	strb	r2, [r3, #1]
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e834:	e072      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e836:	2303      	movs	r3, #3
 800e838:	75fb      	strb	r3, [r7, #23]
		break;
 800e83a:	e06f      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_CHANNELS_DATARATE:
	{
		verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e842:	723b      	strb	r3, [r7, #8]

		if (RegionVerify(LoRaMacRegion, &verify, PHY_TX_DR) == true)
 800e844:	4b38      	ldr	r3, [pc, #224]	@ (800e928 <LoRaMacMibSetRequestConfirm+0x498>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	f107 0108 	add.w	r1, r7, #8
 800e84c:	2204      	movs	r2, #4
 800e84e:	4618      	mov	r0, r3
 800e850:	f001 fe1a 	bl	8010488 <RegionVerify>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d004      	beq.n	800e864 <LoRaMacMibSetRequestConfirm+0x3d4>
		{
			LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800e85a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e85e:	4b33      	ldr	r3, [pc, #204]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e860:	705a      	strb	r2, [r3, #1]
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e862:	e05b      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e864:	2303      	movs	r3, #3
 800e866:	75fb      	strb	r3, [r7, #23]
		break;
 800e868:	e058      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_CHANNELS_DEFAULT_TX_POWER:
	{
		verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e870:	723b      	strb	r3, [r7, #8]

		if (RegionVerify(LoRaMacRegion, &verify, PHY_DEF_TX_POWER) == true)
 800e872:	4b2d      	ldr	r3, [pc, #180]	@ (800e928 <LoRaMacMibSetRequestConfirm+0x498>)
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	f107 0108 	add.w	r1, r7, #8
 800e87a:	2208      	movs	r2, #8
 800e87c:	4618      	mov	r0, r3
 800e87e:	f001 fe03 	bl	8010488 <RegionVerify>
 800e882:	4603      	mov	r3, r0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d004      	beq.n	800e892 <LoRaMacMibSetRequestConfirm+0x402>
		{
			LoRaMacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800e888:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e88c:	4b28      	ldr	r3, [pc, #160]	@ (800e930 <LoRaMacMibSetRequestConfirm+0x4a0>)
 800e88e:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e890:	e044      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e892:	2303      	movs	r3, #3
 800e894:	75fb      	strb	r3, [r7, #23]
		break;
 800e896:	e041      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_CHANNELS_TX_POWER:
	{
		verify.TxPower = mibSet->Param.ChannelsTxPower;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e89e:	723b      	strb	r3, [r7, #8]

		if (RegionVerify(LoRaMacRegion, &verify, PHY_TX_POWER) == true)
 800e8a0:	4b21      	ldr	r3, [pc, #132]	@ (800e928 <LoRaMacMibSetRequestConfirm+0x498>)
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	f107 0108 	add.w	r1, r7, #8
 800e8a8:	2207      	movs	r2, #7
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f001 fdec 	bl	8010488 <RegionVerify>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d004      	beq.n	800e8c0 <LoRaMacMibSetRequestConfirm+0x430>
		{
			LoRaMacParams.ChannelsTxPower = verify.TxPower;
 800e8b6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800e8ba:	4b1c      	ldr	r3, [pc, #112]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e8bc:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			status = LORAMAC_STATUS_PARAMETER_INVALID;
		}
		break;
 800e8be:	e02d      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
			status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	75fb      	strb	r3, [r7, #23]
		break;
 800e8c4:	e02a      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_UPLINK_COUNTER:
	{
		UpLinkCounter = mibSet->Param.UpLinkCounter;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	4a1a      	ldr	r2, [pc, #104]	@ (800e934 <LoRaMacMibSetRequestConfirm+0x4a4>)
 800e8cc:	6013      	str	r3, [r2, #0]
		break;
 800e8ce:	e025      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_DOWNLINK_COUNTER:
	{
		DownLinkCounter = mibSet->Param.DownLinkCounter;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	4a18      	ldr	r2, [pc, #96]	@ (800e938 <LoRaMacMibSetRequestConfirm+0x4a8>)
 800e8d6:	6013      	str	r3, [r2, #0]
		break;
 800e8d8:	e020      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_SYSTEM_MAX_RX_ERROR:
	{
		LoRaMacParams.SystemMaxRxError = LoRaMacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	4a14      	ldr	r2, [pc, #80]	@ (800e930 <LoRaMacMibSetRequestConfirm+0x4a0>)
 800e8e0:	6053      	str	r3, [r2, #4]
 800e8e2:	4b13      	ldr	r3, [pc, #76]	@ (800e930 <LoRaMacMibSetRequestConfirm+0x4a0>)
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	4a11      	ldr	r2, [pc, #68]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e8e8:	6053      	str	r3, [r2, #4]
		break;
 800e8ea:	e017      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_MIN_RX_SYMBOLS:
	{
		LoRaMacParams.MinRxSymbols = LoRaMacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	791a      	ldrb	r2, [r3, #4]
 800e8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800e930 <LoRaMacMibSetRequestConfirm+0x4a0>)
 800e8f2:	721a      	strb	r2, [r3, #8]
 800e8f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e930 <LoRaMacMibSetRequestConfirm+0x4a0>)
 800e8f6:	7a1a      	ldrb	r2, [r3, #8]
 800e8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e8fa:	721a      	strb	r2, [r3, #8]
		break;
 800e8fc:	e00e      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	case MIB_ANTENNA_GAIN:
	{
		LoRaMacParams.AntennaGain = mibSet->Param.AntennaGain;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	4a0a      	ldr	r2, [pc, #40]	@ (800e92c <LoRaMacMibSetRequestConfirm+0x49c>)
 800e904:	6353      	str	r3, [r2, #52]	@ 0x34
		break;
 800e906:	e009      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
	}
	default:
		status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e908:	2302      	movs	r3, #2
 800e90a:	75fb      	strb	r3, [r7, #23]
		break;
 800e90c:	e006      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
		break;
 800e90e:	bf00      	nop
 800e910:	e004      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
		break;
 800e912:	bf00      	nop
 800e914:	e002      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
		break;
 800e916:	bf00      	nop
 800e918:	e000      	b.n	800e91c <LoRaMacMibSetRequestConfirm+0x48c>
		break;
 800e91a:	bf00      	nop
	}

	return status;
 800e91c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	371c      	adds	r7, #28
 800e922:	46bd      	mov	sp, r7
 800e924:	bd90      	pop	{r4, r7, pc}
 800e926:	bf00      	nop
 800e928:	20006510 	.word	0x20006510
 800e92c:	20006870 	.word	0x20006870
 800e930:	200068a8 	.word	0x200068a8
 800e934:	20006758 	.word	0x20006758
 800e938:	2000675c 	.word	0x2000675c

0800e93c <LoRaMacMlmeRequest>:

	return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest(MlmeReq_t *mlmeRequest)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
	LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e944:	2302      	movs	r3, #2
 800e946:	73fb      	strb	r3, [r7, #15]
	LoRaMacHeader_t macHdr;
	AlternateDrParams_t altDr;

	if (mlmeRequest == NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d101      	bne.n	800e952 <LoRaMacMlmeRequest+0x16>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 800e94e:	2303      	movs	r3, #3
 800e950:	e0c0      	b.n	800ead4 <LoRaMacMlmeRequest+0x198>
	}
	if ((LoRaMacState & LORAMAC_TX_RUNNING) == LORAMAC_TX_RUNNING)
 800e952:	4b62      	ldr	r3, [pc, #392]	@ (800eadc <LoRaMacMlmeRequest+0x1a0>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f003 0301 	and.w	r3, r3, #1
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <LoRaMacMlmeRequest+0x26>
	{
		return LORAMAC_STATUS_BUSY;
 800e95e:	2301      	movs	r3, #1
 800e960:	e0b8      	b.n	800ead4 <LoRaMacMlmeRequest+0x198>
	}

	memset1((uint8_t *)&MlmeConfirm, 0, sizeof(MlmeConfirm));
 800e962:	2218      	movs	r2, #24
 800e964:	2100      	movs	r1, #0
 800e966:	485e      	ldr	r0, [pc, #376]	@ (800eae0 <LoRaMacMlmeRequest+0x1a4>)
 800e968:	f012 f958 	bl	8020c1c <memset1>

	MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e96c:	4b5c      	ldr	r3, [pc, #368]	@ (800eae0 <LoRaMacMlmeRequest+0x1a4>)
 800e96e:	2201      	movs	r2, #1
 800e970:	705a      	strb	r2, [r3, #1]

	switch (mlmeRequest->Type)
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	2b03      	cmp	r3, #3
 800e978:	f200 809f 	bhi.w	800eaba <LoRaMacMlmeRequest+0x17e>
 800e97c:	a201      	add	r2, pc, #4	@ (adr r2, 800e984 <LoRaMacMlmeRequest+0x48>)
 800e97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e982:	bf00      	nop
 800e984:	0800e995 	.word	0x0800e995
 800e988:	0800ea4d 	.word	0x0800ea4d
 800e98c:	0800ea6f 	.word	0x0800ea6f
 800e990:	0800ea91 	.word	0x0800ea91
	{
	case MLME_JOIN:
	{
		if ((LoRaMacState & LORAMAC_TX_DELAYED) == LORAMAC_TX_DELAYED)
 800e994:	4b51      	ldr	r3, [pc, #324]	@ (800eadc <LoRaMacMlmeRequest+0x1a0>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f003 0310 	and.w	r3, r3, #16
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <LoRaMacMlmeRequest+0x68>
		{
			return LORAMAC_STATUS_BUSY;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e097      	b.n	800ead4 <LoRaMacMlmeRequest+0x198>
		}

		if ((mlmeRequest->Req.Join.DevEui == NULL) ||
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00b      	beq.n	800e9c4 <LoRaMacMlmeRequest+0x88>
			(mlmeRequest->Req.Join.AppEui == NULL) ||
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	689b      	ldr	r3, [r3, #8]
		if ((mlmeRequest->Req.Join.DevEui == NULL) ||
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d007      	beq.n	800e9c4 <LoRaMacMlmeRequest+0x88>
			(mlmeRequest->Req.Join.AppKey == NULL) ||
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	68db      	ldr	r3, [r3, #12]
			(mlmeRequest->Req.Join.AppEui == NULL) ||
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <LoRaMacMlmeRequest+0x88>
			(mlmeRequest->Req.Join.NbTrials == 0))
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	7c1b      	ldrb	r3, [r3, #16]
			(mlmeRequest->Req.Join.AppKey == NULL) ||
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d101      	bne.n	800e9c8 <LoRaMacMlmeRequest+0x8c>
		{
			return LORAMAC_STATUS_PARAMETER_INVALID;
 800e9c4:	2303      	movs	r3, #3
 800e9c6:	e085      	b.n	800ead4 <LoRaMacMlmeRequest+0x198>
		// 	getPhy.Attribute = PHY_DEF_NB_JOIN_TRIALS;
		// 	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
		// 	mlmeRequest->Req.Join.NbTrials = (uint8_t)phyParam.Value;
		// }

		LoRaMacFlags.Bits.MlmeReq = 1;
 800e9c8:	4a46      	ldr	r2, [pc, #280]	@ (800eae4 <LoRaMacMlmeRequest+0x1a8>)
 800e9ca:	7813      	ldrb	r3, [r2, #0]
 800e9cc:	f043 0308 	orr.w	r3, r3, #8
 800e9d0:	7013      	strb	r3, [r2, #0]
		MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	781a      	ldrb	r2, [r3, #0]
 800e9d6:	4b42      	ldr	r3, [pc, #264]	@ (800eae0 <LoRaMacMlmeRequest+0x1a4>)
 800e9d8:	701a      	strb	r2, [r3, #0]

		LoRaMacDevEui = mlmeRequest->Req.Join.DevEui;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	4a42      	ldr	r2, [pc, #264]	@ (800eae8 <LoRaMacMlmeRequest+0x1ac>)
 800e9e0:	6013      	str	r3, [r2, #0]
		LoRaMacAppEui = mlmeRequest->Req.Join.AppEui;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	4a41      	ldr	r2, [pc, #260]	@ (800eaec <LoRaMacMlmeRequest+0x1b0>)
 800e9e8:	6013      	str	r3, [r2, #0]
		LoRaMacAppKey = mlmeRequest->Req.Join.AppKey;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	4a40      	ldr	r2, [pc, #256]	@ (800eaf0 <LoRaMacMlmeRequest+0x1b4>)
 800e9f0:	6013      	str	r3, [r2, #0]
		MaxJoinRequestTrials = mlmeRequest->Req.Join.NbTrials;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	7c1a      	ldrb	r2, [r3, #16]
 800e9f6:	4b3f      	ldr	r3, [pc, #252]	@ (800eaf4 <LoRaMacMlmeRequest+0x1b8>)
 800e9f8:	701a      	strb	r2, [r3, #0]

		// Reset variable JoinRequestTrials
		JoinRequestTrials = 0;
 800e9fa:	4b3f      	ldr	r3, [pc, #252]	@ (800eaf8 <LoRaMacMlmeRequest+0x1bc>)
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	701a      	strb	r2, [r3, #0]

		// Setup header information
		macHdr.Value = 0;
 800ea00:	2300      	movs	r3, #0
 800ea02:	733b      	strb	r3, [r7, #12]
		macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800ea04:	7b3b      	ldrb	r3, [r7, #12]
 800ea06:	f36f 1347 	bfc	r3, #5, #3
 800ea0a:	733b      	strb	r3, [r7, #12]

		ResetMacParameters();
 800ea0c:	f7fe fc98 	bl	800d340 <ResetMacParameters>

		altDr.NbTrials = JoinRequestTrials + 1;
 800ea10:	4b39      	ldr	r3, [pc, #228]	@ (800eaf8 <LoRaMacMlmeRequest+0x1bc>)
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	3301      	adds	r3, #1
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	813b      	strh	r3, [r7, #8]

		LoRaMacParams.ChannelsDatarate = RegionAlternateDr(LoRaMacRegion, &altDr);
 800ea1a:	4b38      	ldr	r3, [pc, #224]	@ (800eafc <LoRaMacMlmeRequest+0x1c0>)
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	f107 0208 	add.w	r2, r7, #8
 800ea22:	4611      	mov	r1, r2
 800ea24:	4618      	mov	r0, r3
 800ea26:	f002 fb1b 	bl	8011060 <RegionAlternateDr>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	4b34      	ldr	r3, [pc, #208]	@ (800eb00 <LoRaMacMlmeRequest+0x1c4>)
 800ea30:	705a      	strb	r2, [r3, #1]

		IsLoRaMacNetworkJoined = JOIN_ONGOING;
 800ea32:	4b34      	ldr	r3, [pc, #208]	@ (800eb04 <LoRaMacMlmeRequest+0x1c8>)
 800ea34:	2202      	movs	r2, #2
 800ea36:	701a      	strb	r2, [r3, #0]

		status = Send(&macHdr, 0, NULL, 0);
 800ea38:	f107 000c 	add.w	r0, r7, #12
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	2200      	movs	r2, #0
 800ea40:	2100      	movs	r1, #0
 800ea42:	f7fe fa21 	bl	800ce88 <Send>
 800ea46:	4603      	mov	r3, r0
 800ea48:	73fb      	strb	r3, [r7, #15]
		break;
 800ea4a:	e037      	b.n	800eabc <LoRaMacMlmeRequest+0x180>
	}
	case MLME_LINK_CHECK:
	{
		LoRaMacFlags.Bits.MlmeReq = 1;
 800ea4c:	4a25      	ldr	r2, [pc, #148]	@ (800eae4 <LoRaMacMlmeRequest+0x1a8>)
 800ea4e:	7813      	ldrb	r3, [r2, #0]
 800ea50:	f043 0308 	orr.w	r3, r3, #8
 800ea54:	7013      	strb	r3, [r2, #0]
		// LoRaMac will send this command piggy-pack
		MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	781a      	ldrb	r2, [r3, #0]
 800ea5a:	4b21      	ldr	r3, [pc, #132]	@ (800eae0 <LoRaMacMlmeRequest+0x1a4>)
 800ea5c:	701a      	strb	r2, [r3, #0]

		status = AddMacCommand(MOTE_MAC_LINK_CHECK_REQ, 0, 0);
 800ea5e:	2200      	movs	r2, #0
 800ea60:	2100      	movs	r1, #0
 800ea62:	2002      	movs	r0, #2
 800ea64:	f7fd fde0 	bl	800c628 <AddMacCommand>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	73fb      	strb	r3, [r7, #15]
		break;
 800ea6c:	e026      	b.n	800eabc <LoRaMacMlmeRequest+0x180>
	}
	case MLME_TXCW:
	{
		MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	781a      	ldrb	r2, [r3, #0]
 800ea72:	4b1b      	ldr	r3, [pc, #108]	@ (800eae0 <LoRaMacMlmeRequest+0x1a4>)
 800ea74:	701a      	strb	r2, [r3, #0]
		LoRaMacFlags.Bits.MlmeReq = 1;
 800ea76:	4a1b      	ldr	r2, [pc, #108]	@ (800eae4 <LoRaMacMlmeRequest+0x1a8>)
 800ea78:	7813      	ldrb	r3, [r2, #0]
 800ea7a:	f043 0308 	orr.w	r3, r3, #8
 800ea7e:	7013      	strb	r3, [r2, #0]
		status = SetTxContinuousWave(mlmeRequest->Req.TxCw.Timeout);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	889b      	ldrh	r3, [r3, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff f855 	bl	800db34 <SetTxContinuousWave>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	73fb      	strb	r3, [r7, #15]
		break;
 800ea8e:	e015      	b.n	800eabc <LoRaMacMlmeRequest+0x180>
	}
	case MLME_TXCW_1:
	{
		MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	781a      	ldrb	r2, [r3, #0]
 800ea94:	4b12      	ldr	r3, [pc, #72]	@ (800eae0 <LoRaMacMlmeRequest+0x1a4>)
 800ea96:	701a      	strb	r2, [r3, #0]
		LoRaMacFlags.Bits.MlmeReq = 1;
 800ea98:	4a12      	ldr	r2, [pc, #72]	@ (800eae4 <LoRaMacMlmeRequest+0x1a8>)
 800ea9a:	7813      	ldrb	r3, [r2, #0]
 800ea9c:	f043 0308 	orr.w	r3, r3, #8
 800eaa0:	7013      	strb	r3, [r2, #0]
		status = SetTxContinuousWave1(mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	8898      	ldrh	r0, [r3, #4]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6899      	ldr	r1, [r3, #8]
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	7b1b      	ldrb	r3, [r3, #12]
 800eaae:	461a      	mov	r2, r3
 800eab0:	f7ff f880 	bl	800dbb4 <SetTxContinuousWave1>
 800eab4:	4603      	mov	r3, r0
 800eab6:	73fb      	strb	r3, [r7, #15]
		break;
 800eab8:	e000      	b.n	800eabc <LoRaMacMlmeRequest+0x180>
	}
	default:
		break;
 800eaba:	bf00      	nop
	}

	if (status != LORAMAC_STATUS_OK)
 800eabc:	7bfb      	ldrb	r3, [r7, #15]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d007      	beq.n	800ead2 <LoRaMacMlmeRequest+0x196>
	{
		NodeAckRequested = false;
 800eac2:	4b11      	ldr	r3, [pc, #68]	@ (800eb08 <LoRaMacMlmeRequest+0x1cc>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	701a      	strb	r2, [r3, #0]
		LoRaMacFlags.Bits.MlmeReq = 0;
 800eac8:	4a06      	ldr	r2, [pc, #24]	@ (800eae4 <LoRaMacMlmeRequest+0x1a8>)
 800eaca:	7813      	ldrb	r3, [r2, #0]
 800eacc:	f36f 03c3 	bfc	r3, #3, #1
 800ead0:	7013      	strb	r3, [r2, #0]
	}

	return status;
 800ead2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3710      	adds	r7, #16
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	20006908 	.word	0x20006908
 800eae0:	20006a50 	.word	0x20006a50
 800eae4:	20006a6c 	.word	0x20006a6c
 800eae8:	20006514 	.word	0x20006514
 800eaec:	20006518 	.word	0x20006518
 800eaf0:	2000651c 	.word	0x2000651c
 800eaf4:	20006a19 	.word	0x20006a19
 800eaf8:	20006a18 	.word	0x20006a18
 800eafc:	20006510 	.word	0x20006510
 800eb00:	20006870 	.word	0x20006870
 800eb04:	20006761 	.word	0x20006761
 800eb08:	20006768 	.word	0x20006768

0800eb0c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest(McpsReq_t *mcpsRequest)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	@ 0x28
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800eb14:	2302      	movs	r3, #2
 800eb16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	LoRaMacHeader_t macHdr;
	VerifyParams_t verify;
	uint8_t fPort = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	void *fBuffer;
	uint16_t fBufferSize;
	int8_t datarate;
	bool readyToSend = false;
 800eb20:	2300      	movs	r3, #0
 800eb22:	773b      	strb	r3, [r7, #28]

	if (mcpsRequest == NULL)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d101      	bne.n	800eb2e <LoRaMacMcpsRequest+0x22>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 800eb2a:	2303      	movs	r3, #3
 800eb2c:	e0c1      	b.n	800ecb2 <LoRaMacMcpsRequest+0x1a6>
	}
	if (((LoRaMacState & LORAMAC_TX_RUNNING) == LORAMAC_TX_RUNNING) ||
 800eb2e:	4b63      	ldr	r3, [pc, #396]	@ (800ecbc <LoRaMacMcpsRequest+0x1b0>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d105      	bne.n	800eb46 <LoRaMacMcpsRequest+0x3a>
		((LoRaMacState & LORAMAC_TX_DELAYED) == LORAMAC_TX_DELAYED))
 800eb3a:	4b60      	ldr	r3, [pc, #384]	@ (800ecbc <LoRaMacMcpsRequest+0x1b0>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f003 0310 	and.w	r3, r3, #16
	if (((LoRaMacState & LORAMAC_TX_RUNNING) == LORAMAC_TX_RUNNING) ||
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <LoRaMacMcpsRequest+0x3e>
	{
		LOG_LIB("LM", "LoRaMacMcpsRequest LORAMAC_STATUS_BUSY");

		return LORAMAC_STATUS_BUSY;
 800eb46:	2301      	movs	r3, #1
 800eb48:	e0b3      	b.n	800ecb2 <LoRaMacMcpsRequest+0x1a6>
	}

	macHdr.Value = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	743b      	strb	r3, [r7, #16]
	memset1((uint8_t *)&McpsConfirm, 0, sizeof(McpsConfirm));
 800eb4e:	2218      	movs	r2, #24
 800eb50:	2100      	movs	r1, #0
 800eb52:	485b      	ldr	r0, [pc, #364]	@ (800ecc0 <LoRaMacMcpsRequest+0x1b4>)
 800eb54:	f012 f862 	bl	8020c1c <memset1>
	McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb58:	4b59      	ldr	r3, [pc, #356]	@ (800ecc0 <LoRaMacMcpsRequest+0x1b4>)
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	705a      	strb	r2, [r3, #1]

	// AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
	AckTimeoutRetriesCounter = 1;
 800eb5e:	4b59      	ldr	r3, [pc, #356]	@ (800ecc4 <LoRaMacMcpsRequest+0x1b8>)
 800eb60:	2201      	movs	r2, #1
 800eb62:	701a      	strb	r2, [r3, #0]

	switch (mcpsRequest->Type)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d037      	beq.n	800ebdc <LoRaMacMcpsRequest+0xd0>
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	dc48      	bgt.n	800ec02 <LoRaMacMcpsRequest+0xf6>
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <LoRaMacMcpsRequest+0x6e>
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d018      	beq.n	800ebaa <LoRaMacMcpsRequest+0x9e>
		fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
		datarate = mcpsRequest->Req.Proprietary.Datarate;
		break;
	}
	default:
		break;
 800eb78:	e043      	b.n	800ec02 <LoRaMacMcpsRequest+0xf6>
		readyToSend = true;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	773b      	strb	r3, [r7, #28]
		AckTimeoutRetries = 1;
 800eb7e:	4b52      	ldr	r3, [pc, #328]	@ (800ecc8 <LoRaMacMcpsRequest+0x1bc>)
 800eb80:	2201      	movs	r2, #1
 800eb82:	701a      	strb	r2, [r3, #0]
		macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800eb84:	7c3b      	ldrb	r3, [r7, #16]
 800eb86:	2202      	movs	r2, #2
 800eb88:	f362 1347 	bfi	r3, r2, #5, #3
 800eb8c:	743b      	strb	r3, [r7, #16]
		fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	791b      	ldrb	r3, [r3, #4]
 800eb92:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	623b      	str	r3, [r7, #32]
		fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	899b      	ldrh	r3, [r3, #12]
 800eba0:	83fb      	strh	r3, [r7, #30]
		datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	7b9b      	ldrb	r3, [r3, #14]
 800eba6:	777b      	strb	r3, [r7, #29]
		break;
 800eba8:	e02c      	b.n	800ec04 <LoRaMacMcpsRequest+0xf8>
		readyToSend = true;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	773b      	strb	r3, [r7, #28]
		AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	7bda      	ldrb	r2, [r3, #15]
 800ebb2:	4b45      	ldr	r3, [pc, #276]	@ (800ecc8 <LoRaMacMcpsRequest+0x1bc>)
 800ebb4:	701a      	strb	r2, [r3, #0]
		macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800ebb6:	7c3b      	ldrb	r3, [r7, #16]
 800ebb8:	2204      	movs	r2, #4
 800ebba:	f362 1347 	bfi	r3, r2, #5, #3
 800ebbe:	743b      	strb	r3, [r7, #16]
		fPort = mcpsRequest->Req.Confirmed.fPort;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	791b      	ldrb	r3, [r3, #4]
 800ebc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	623b      	str	r3, [r7, #32]
		fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	899b      	ldrh	r3, [r3, #12]
 800ebd2:	83fb      	strh	r3, [r7, #30]
		datarate = mcpsRequest->Req.Confirmed.Datarate;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	7b9b      	ldrb	r3, [r3, #14]
 800ebd8:	777b      	strb	r3, [r7, #29]
		break;
 800ebda:	e013      	b.n	800ec04 <LoRaMacMcpsRequest+0xf8>
		readyToSend = true;
 800ebdc:	2301      	movs	r3, #1
 800ebde:	773b      	strb	r3, [r7, #28]
		AckTimeoutRetries = 1;
 800ebe0:	4b39      	ldr	r3, [pc, #228]	@ (800ecc8 <LoRaMacMcpsRequest+0x1bc>)
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	701a      	strb	r2, [r3, #0]
		macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800ebe6:	7c3b      	ldrb	r3, [r7, #16]
 800ebe8:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800ebec:	743b      	strb	r3, [r7, #16]
		fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	623b      	str	r3, [r7, #32]
		fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	891b      	ldrh	r3, [r3, #8]
 800ebf8:	83fb      	strh	r3, [r7, #30]
		datarate = mcpsRequest->Req.Proprietary.Datarate;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	7a9b      	ldrb	r3, [r3, #10]
 800ebfe:	777b      	strb	r3, [r7, #29]
		break;
 800ec00:	e000      	b.n	800ec04 <LoRaMacMcpsRequest+0xf8>
		break;
 800ec02:	bf00      	nop
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	763b      	strb	r3, [r7, #24]
	getPhy.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800ec08:	4b30      	ldr	r3, [pc, #192]	@ (800eccc <LoRaMacMcpsRequest+0x1c0>)
 800ec0a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ec0e:	76bb      	strb	r3, [r7, #26]
	phyParam = RegionGetPhyParam(LoRaMacRegion, &getPhy);
 800ec10:	4b2f      	ldr	r3, [pc, #188]	@ (800ecd0 <LoRaMacMcpsRequest+0x1c4>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	f107 0218 	add.w	r2, r7, #24
 800ec18:	4611      	mov	r1, r2
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f001 fafa 	bl	8010214 <RegionGetPhyParam>
 800ec20:	4603      	mov	r3, r0
 800ec22:	617b      	str	r3, [r7, #20]
	// Apply the minimum possible datarate.
	// Some regions have limitations for the minimum datarate.
	datarate = T_MAX((uint8_t)datarate, phyParam.Value);
 800ec24:	7f7b      	ldrb	r3, [r7, #29]
 800ec26:	461a      	mov	r2, r3
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	bf38      	it	cc
 800ec2e:	4613      	movcc	r3, r2
 800ec30:	777b      	strb	r3, [r7, #29]

	if (readyToSend == true)
 800ec32:	7f3b      	ldrb	r3, [r7, #28]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d03a      	beq.n	800ecae <LoRaMacMcpsRequest+0x1a2>
	{
		if (AdrCtrlOn == false)
 800ec38:	4b26      	ldr	r3, [pc, #152]	@ (800ecd4 <LoRaMacMcpsRequest+0x1c8>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	f083 0301 	eor.w	r3, r3, #1
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d017      	beq.n	800ec76 <LoRaMacMcpsRequest+0x16a>
		{
			verify.DatarateParams.Datarate = datarate;
 800ec46:	7f7b      	ldrb	r3, [r7, #29]
 800ec48:	733b      	strb	r3, [r7, #12]
			verify.DatarateParams.UplinkDwellTime = LoRaMacParams.UplinkDwellTime;
 800ec4a:	4b20      	ldr	r3, [pc, #128]	@ (800eccc <LoRaMacMcpsRequest+0x1c0>)
 800ec4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ec50:	73bb      	strb	r3, [r7, #14]

			if (RegionVerify(LoRaMacRegion, &verify, PHY_TX_DR) == true)
 800ec52:	4b1f      	ldr	r3, [pc, #124]	@ (800ecd0 <LoRaMacMcpsRequest+0x1c4>)
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	f107 010c 	add.w	r1, r7, #12
 800ec5a:	2204      	movs	r2, #4
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f001 fc13 	bl	8010488 <RegionVerify>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d004      	beq.n	800ec72 <LoRaMacMcpsRequest+0x166>
			{
				LoRaMacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ec68:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ec6c:	4b17      	ldr	r3, [pc, #92]	@ (800eccc <LoRaMacMcpsRequest+0x1c0>)
 800ec6e:	705a      	strb	r2, [r3, #1]
 800ec70:	e001      	b.n	800ec76 <LoRaMacMcpsRequest+0x16a>
			}
			else
			{
				return LORAMAC_STATUS_PARAMETER_INVALID;
 800ec72:	2303      	movs	r3, #3
 800ec74:	e01d      	b.n	800ecb2 <LoRaMacMcpsRequest+0x1a6>
			}
		}

		status = Send(&macHdr, fPort, fBuffer, fBufferSize);
 800ec76:	8bfb      	ldrh	r3, [r7, #30]
 800ec78:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800ec7c:	f107 0010 	add.w	r0, r7, #16
 800ec80:	6a3a      	ldr	r2, [r7, #32]
 800ec82:	f7fe f901 	bl	800ce88 <Send>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (status == LORAMAC_STATUS_OK)
 800ec8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d109      	bne.n	800eca8 <LoRaMacMcpsRequest+0x19c>
		{
			McpsConfirm.McpsRequest = mcpsRequest->Type;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	781a      	ldrb	r2, [r3, #0]
 800ec98:	4b09      	ldr	r3, [pc, #36]	@ (800ecc0 <LoRaMacMcpsRequest+0x1b4>)
 800ec9a:	701a      	strb	r2, [r3, #0]
			LoRaMacFlags.Bits.McpsReq = 1;
 800ec9c:	4a0e      	ldr	r2, [pc, #56]	@ (800ecd8 <LoRaMacMcpsRequest+0x1cc>)
 800ec9e:	7813      	ldrb	r3, [r2, #0]
 800eca0:	f043 0301 	orr.w	r3, r3, #1
 800eca4:	7013      	strb	r3, [r2, #0]
 800eca6:	e002      	b.n	800ecae <LoRaMacMcpsRequest+0x1a2>
		}
		else
		{
			NodeAckRequested = false;
 800eca8:	4b0c      	ldr	r3, [pc, #48]	@ (800ecdc <LoRaMacMcpsRequest+0x1d0>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	701a      	strb	r2, [r3, #0]
		}
	}

	return status;
 800ecae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3728      	adds	r7, #40	@ 0x28
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	20006908 	.word	0x20006908
 800ecc0:	20006a38 	.word	0x20006a38
 800ecc4:	2000006f 	.word	0x2000006f
 800ecc8:	2000006e 	.word	0x2000006e
 800eccc:	20006870 	.word	0x20006870
 800ecd0:	20006510 	.word	0x20006510
 800ecd4:	20006762 	.word	0x20006762
 800ecd8:	20006a6c 	.word	0x20006a6c
 800ecdc:	20006768 	.word	0x20006768

0800ece0 <LoRaMacTestSetDutyCycleOn>:
	UpLinkCounter = txPacketCounter;
	IsUpLinkCounterFixed = true;
}

void LoRaMacTestSetDutyCycleOn(bool enable)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	71fb      	strb	r3, [r7, #7]
	VerifyParams_t verify;

	verify.DutyCycle = enable;
 800ecea:	79fb      	ldrb	r3, [r7, #7]
 800ecec:	733b      	strb	r3, [r7, #12]

	if (RegionVerify(LoRaMacRegion, &verify, PHY_DUTY_CYCLE) == true)
 800ecee:	4b09      	ldr	r3, [pc, #36]	@ (800ed14 <LoRaMacTestSetDutyCycleOn+0x34>)
 800ecf0:	781b      	ldrb	r3, [r3, #0]
 800ecf2:	f107 010c 	add.w	r1, r7, #12
 800ecf6:	220b      	movs	r2, #11
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f001 fbc5 	bl	8010488 <RegionVerify>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d002      	beq.n	800ed0a <LoRaMacTestSetDutyCycleOn+0x2a>
	{
		DutyCycleOn = enable;
 800ed04:	4a04      	ldr	r2, [pc, #16]	@ (800ed18 <LoRaMacTestSetDutyCycleOn+0x38>)
 800ed06:	79fb      	ldrb	r3, [r7, #7]
 800ed08:	7013      	strb	r3, [r2, #0]
	}
}
 800ed0a:	bf00      	nop
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20006510 	.word	0x20006510
 800ed18:	200068f8 	.word	0x200068f8

0800ed1c <LoRaMacComputeMic>:
 * CMAC computation context variable
 */
static AES_CMAC_CTX AesCmacCtx[1];

void LoRaMacComputeMic(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint32_t *mic)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	607a      	str	r2, [r7, #4]
 800ed26:	603b      	str	r3, [r7, #0]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	817b      	strh	r3, [r7, #10]
	MicBlockB0[5] = dir;
 800ed2c:	4a2b      	ldr	r2, [pc, #172]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed2e:	7e3b      	ldrb	r3, [r7, #24]
 800ed30:	7153      	strb	r3, [r2, #5]

	MicBlockB0[6] = (address)&0xFF;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	4b29      	ldr	r3, [pc, #164]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed38:	719a      	strb	r2, [r3, #6]
	MicBlockB0[7] = (address >> 8) & 0xFF;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	0a1b      	lsrs	r3, r3, #8
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	4b26      	ldr	r3, [pc, #152]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed42:	71da      	strb	r2, [r3, #7]
	MicBlockB0[8] = (address >> 16) & 0xFF;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	0c1b      	lsrs	r3, r3, #16
 800ed48:	b2da      	uxtb	r2, r3
 800ed4a:	4b24      	ldr	r3, [pc, #144]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed4c:	721a      	strb	r2, [r3, #8]
	MicBlockB0[9] = (address >> 24) & 0xFF;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	0e1b      	lsrs	r3, r3, #24
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	4b21      	ldr	r3, [pc, #132]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed56:	725a      	strb	r2, [r3, #9]

	MicBlockB0[10] = (sequenceCounter)&0xFF;
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	4b1f      	ldr	r3, [pc, #124]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed5e:	729a      	strb	r2, [r3, #10]
	MicBlockB0[11] = (sequenceCounter >> 8) & 0xFF;
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	0a1b      	lsrs	r3, r3, #8
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	4b1d      	ldr	r3, [pc, #116]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed68:	72da      	strb	r2, [r3, #11]
	MicBlockB0[12] = (sequenceCounter >> 16) & 0xFF;
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	0c1b      	lsrs	r3, r3, #16
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	4b1a      	ldr	r3, [pc, #104]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed72:	731a      	strb	r2, [r3, #12]
	MicBlockB0[13] = (sequenceCounter >> 24) & 0xFF;
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	0e1b      	lsrs	r3, r3, #24
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	4b18      	ldr	r3, [pc, #96]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed7c:	735a      	strb	r2, [r3, #13]

	MicBlockB0[15] = size & 0xFF;
 800ed7e:	897b      	ldrh	r3, [r7, #10]
 800ed80:	b2da      	uxtb	r2, r3
 800ed82:	4b16      	ldr	r3, [pc, #88]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed84:	73da      	strb	r2, [r3, #15]

	AES_CMAC_Init(AesCmacCtx);
 800ed86:	4816      	ldr	r0, [pc, #88]	@ (800ede0 <LoRaMacComputeMic+0xc4>)
 800ed88:	f7fb ff6f 	bl	800ac6a <AES_CMAC_Init>

	AES_CMAC_SetKey(AesCmacCtx, key);
 800ed8c:	6879      	ldr	r1, [r7, #4]
 800ed8e:	4814      	ldr	r0, [pc, #80]	@ (800ede0 <LoRaMacComputeMic+0xc4>)
 800ed90:	f7fb ff84 	bl	800ac9c <AES_CMAC_SetKey>

	AES_CMAC_Update(AesCmacCtx, MicBlockB0, LORAMAC_MIC_BLOCK_B0_SIZE);
 800ed94:	2210      	movs	r2, #16
 800ed96:	4911      	ldr	r1, [pc, #68]	@ (800eddc <LoRaMacComputeMic+0xc0>)
 800ed98:	4811      	ldr	r0, [pc, #68]	@ (800ede0 <LoRaMacComputeMic+0xc4>)
 800ed9a:	f7fb ff8e 	bl	800acba <AES_CMAC_Update>

	AES_CMAC_Update(AesCmacCtx, buffer, size & 0xFF);
 800ed9e:	897b      	ldrh	r3, [r7, #10]
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	461a      	mov	r2, r3
 800eda4:	68f9      	ldr	r1, [r7, #12]
 800eda6:	480e      	ldr	r0, [pc, #56]	@ (800ede0 <LoRaMacComputeMic+0xc4>)
 800eda8:	f7fb ff87 	bl	800acba <AES_CMAC_Update>

	AES_CMAC_Final(Mic, AesCmacCtx);
 800edac:	490c      	ldr	r1, [pc, #48]	@ (800ede0 <LoRaMacComputeMic+0xc4>)
 800edae:	480d      	ldr	r0, [pc, #52]	@ (800ede4 <LoRaMacComputeMic+0xc8>)
 800edb0:	f7fc f833 	bl	800ae1a <AES_CMAC_Final>

	*mic = (uint32_t)((uint32_t)Mic[3] << 24 | (uint32_t)Mic[2] << 16 | (uint32_t)Mic[1] << 8 | (uint32_t)Mic[0]);
 800edb4:	4b0b      	ldr	r3, [pc, #44]	@ (800ede4 <LoRaMacComputeMic+0xc8>)
 800edb6:	78db      	ldrb	r3, [r3, #3]
 800edb8:	061a      	lsls	r2, r3, #24
 800edba:	4b0a      	ldr	r3, [pc, #40]	@ (800ede4 <LoRaMacComputeMic+0xc8>)
 800edbc:	789b      	ldrb	r3, [r3, #2]
 800edbe:	041b      	lsls	r3, r3, #16
 800edc0:	431a      	orrs	r2, r3
 800edc2:	4b08      	ldr	r3, [pc, #32]	@ (800ede4 <LoRaMacComputeMic+0xc8>)
 800edc4:	785b      	ldrb	r3, [r3, #1]
 800edc6:	021b      	lsls	r3, r3, #8
 800edc8:	4313      	orrs	r3, r2
 800edca:	4a06      	ldr	r2, [pc, #24]	@ (800ede4 <LoRaMacComputeMic+0xc8>)
 800edcc:	7812      	ldrb	r2, [r2, #0]
 800edce:	431a      	orrs	r2, r3
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	601a      	str	r2, [r3, #0]
}
 800edd4:	bf00      	nop
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20000074 	.word	0x20000074
 800ede0:	20006b84 	.word	0x20006b84
 800ede4:	20006a70 	.word	0x20006a70

0800ede8 <LoRaMacPayloadEncrypt>:

void LoRaMacPayloadEncrypt(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *encBuffer)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b086      	sub	sp, #24
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	607a      	str	r2, [r7, #4]
 800edf2:	603b      	str	r3, [r7, #0]
 800edf4:	460b      	mov	r3, r1
 800edf6:	817b      	strh	r3, [r7, #10]
	uint16_t i;
	uint8_t bufferIndex = 0;
 800edf8:	2300      	movs	r3, #0
 800edfa:	757b      	strb	r3, [r7, #21]
	uint16_t ctr = 1;
 800edfc:	2301      	movs	r3, #1
 800edfe:	827b      	strh	r3, [r7, #18]

	memset1(AesContext.ksch, '\0', 240);
 800ee00:	22f0      	movs	r2, #240	@ 0xf0
 800ee02:	2100      	movs	r1, #0
 800ee04:	4848      	ldr	r0, [pc, #288]	@ (800ef28 <LoRaMacPayloadEncrypt+0x140>)
 800ee06:	f011 ff09 	bl	8020c1c <memset1>
	lora_aes_set_key(key, 16, &AesContext);
 800ee0a:	4a47      	ldr	r2, [pc, #284]	@ (800ef28 <LoRaMacPayloadEncrypt+0x140>)
 800ee0c:	2110      	movs	r1, #16
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7fb fe04 	bl	800aa1c <lora_aes_set_key>

	aBlock[5] = dir;
 800ee14:	4a45      	ldr	r2, [pc, #276]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ee1a:	7153      	strb	r3, [r2, #5]

	aBlock[6] = (address)&0xFF;
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	4b42      	ldr	r3, [pc, #264]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee22:	719a      	strb	r2, [r3, #6]
	aBlock[7] = (address >> 8) & 0xFF;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	0a1b      	lsrs	r3, r3, #8
 800ee28:	b2da      	uxtb	r2, r3
 800ee2a:	4b40      	ldr	r3, [pc, #256]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee2c:	71da      	strb	r2, [r3, #7]
	aBlock[8] = (address >> 16) & 0xFF;
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	0c1b      	lsrs	r3, r3, #16
 800ee32:	b2da      	uxtb	r2, r3
 800ee34:	4b3d      	ldr	r3, [pc, #244]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee36:	721a      	strb	r2, [r3, #8]
	aBlock[9] = (address >> 24) & 0xFF;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	0e1b      	lsrs	r3, r3, #24
 800ee3c:	b2da      	uxtb	r2, r3
 800ee3e:	4b3b      	ldr	r3, [pc, #236]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee40:	725a      	strb	r2, [r3, #9]

	aBlock[10] = (sequenceCounter)&0xFF;
 800ee42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee44:	b2da      	uxtb	r2, r3
 800ee46:	4b39      	ldr	r3, [pc, #228]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee48:	729a      	strb	r2, [r3, #10]
	aBlock[11] = (sequenceCounter >> 8) & 0xFF;
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4c:	0a1b      	lsrs	r3, r3, #8
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	4b36      	ldr	r3, [pc, #216]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee52:	72da      	strb	r2, [r3, #11]
	aBlock[12] = (sequenceCounter >> 16) & 0xFF;
 800ee54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee56:	0c1b      	lsrs	r3, r3, #16
 800ee58:	b2da      	uxtb	r2, r3
 800ee5a:	4b34      	ldr	r3, [pc, #208]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee5c:	731a      	strb	r2, [r3, #12]
	aBlock[13] = (sequenceCounter >> 24) & 0xFF;
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee60:	0e1b      	lsrs	r3, r3, #24
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	4b31      	ldr	r3, [pc, #196]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee66:	735a      	strb	r2, [r3, #13]

	while (size >= 16)
 800ee68:	e02d      	b.n	800eec6 <LoRaMacPayloadEncrypt+0xde>
	{
		aBlock[15] = ((ctr)&0xFF);
 800ee6a:	8a7b      	ldrh	r3, [r7, #18]
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	4b2f      	ldr	r3, [pc, #188]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee70:	73da      	strb	r2, [r3, #15]
		ctr++;
 800ee72:	8a7b      	ldrh	r3, [r7, #18]
 800ee74:	3301      	adds	r3, #1
 800ee76:	827b      	strh	r3, [r7, #18]
		lora_aes_encrypt(aBlock, sBlock, &AesContext);
 800ee78:	4a2b      	ldr	r2, [pc, #172]	@ (800ef28 <LoRaMacPayloadEncrypt+0x140>)
 800ee7a:	492d      	ldr	r1, [pc, #180]	@ (800ef30 <LoRaMacPayloadEncrypt+0x148>)
 800ee7c:	482b      	ldr	r0, [pc, #172]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800ee7e:	f7fb feab 	bl	800abd8 <lora_aes_encrypt>
		for (i = 0; i < 16; i++)
 800ee82:	2300      	movs	r3, #0
 800ee84:	82fb      	strh	r3, [r7, #22]
 800ee86:	e015      	b.n	800eeb4 <LoRaMacPayloadEncrypt+0xcc>
		{
			encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800ee88:	7d7a      	ldrb	r2, [r7, #21]
 800ee8a:	8afb      	ldrh	r3, [r7, #22]
 800ee8c:	4413      	add	r3, r2
 800ee8e:	461a      	mov	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4413      	add	r3, r2
 800ee94:	7819      	ldrb	r1, [r3, #0]
 800ee96:	8afb      	ldrh	r3, [r7, #22]
 800ee98:	4a25      	ldr	r2, [pc, #148]	@ (800ef30 <LoRaMacPayloadEncrypt+0x148>)
 800ee9a:	5cd2      	ldrb	r2, [r2, r3]
 800ee9c:	7d78      	ldrb	r0, [r7, #21]
 800ee9e:	8afb      	ldrh	r3, [r7, #22]
 800eea0:	4403      	add	r3, r0
 800eea2:	4618      	mov	r0, r3
 800eea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eea6:	4403      	add	r3, r0
 800eea8:	404a      	eors	r2, r1
 800eeaa:	b2d2      	uxtb	r2, r2
 800eeac:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 16; i++)
 800eeae:	8afb      	ldrh	r3, [r7, #22]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	82fb      	strh	r3, [r7, #22]
 800eeb4:	8afb      	ldrh	r3, [r7, #22]
 800eeb6:	2b0f      	cmp	r3, #15
 800eeb8:	d9e6      	bls.n	800ee88 <LoRaMacPayloadEncrypt+0xa0>
		}
		size -= 16;
 800eeba:	897b      	ldrh	r3, [r7, #10]
 800eebc:	3b10      	subs	r3, #16
 800eebe:	817b      	strh	r3, [r7, #10]
		bufferIndex += 16;
 800eec0:	7d7b      	ldrb	r3, [r7, #21]
 800eec2:	3310      	adds	r3, #16
 800eec4:	757b      	strb	r3, [r7, #21]
	while (size >= 16)
 800eec6:	897b      	ldrh	r3, [r7, #10]
 800eec8:	2b0f      	cmp	r3, #15
 800eeca:	d8ce      	bhi.n	800ee6a <LoRaMacPayloadEncrypt+0x82>
	}

	if (size > 0)
 800eecc:	897b      	ldrh	r3, [r7, #10]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d025      	beq.n	800ef1e <LoRaMacPayloadEncrypt+0x136>
	{
		aBlock[15] = ((ctr)&0xFF);
 800eed2:	8a7b      	ldrh	r3, [r7, #18]
 800eed4:	b2da      	uxtb	r2, r3
 800eed6:	4b15      	ldr	r3, [pc, #84]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800eed8:	73da      	strb	r2, [r3, #15]
		lora_aes_encrypt(aBlock, sBlock, &AesContext);
 800eeda:	4a13      	ldr	r2, [pc, #76]	@ (800ef28 <LoRaMacPayloadEncrypt+0x140>)
 800eedc:	4914      	ldr	r1, [pc, #80]	@ (800ef30 <LoRaMacPayloadEncrypt+0x148>)
 800eede:	4813      	ldr	r0, [pc, #76]	@ (800ef2c <LoRaMacPayloadEncrypt+0x144>)
 800eee0:	f7fb fe7a 	bl	800abd8 <lora_aes_encrypt>
		for (i = 0; i < size; i++)
 800eee4:	2300      	movs	r3, #0
 800eee6:	82fb      	strh	r3, [r7, #22]
 800eee8:	e015      	b.n	800ef16 <LoRaMacPayloadEncrypt+0x12e>
		{
			encBuffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800eeea:	7d7a      	ldrb	r2, [r7, #21]
 800eeec:	8afb      	ldrh	r3, [r7, #22]
 800eeee:	4413      	add	r3, r2
 800eef0:	461a      	mov	r2, r3
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	4413      	add	r3, r2
 800eef6:	7819      	ldrb	r1, [r3, #0]
 800eef8:	8afb      	ldrh	r3, [r7, #22]
 800eefa:	4a0d      	ldr	r2, [pc, #52]	@ (800ef30 <LoRaMacPayloadEncrypt+0x148>)
 800eefc:	5cd2      	ldrb	r2, [r2, r3]
 800eefe:	7d78      	ldrb	r0, [r7, #21]
 800ef00:	8afb      	ldrh	r3, [r7, #22]
 800ef02:	4403      	add	r3, r0
 800ef04:	4618      	mov	r0, r3
 800ef06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef08:	4403      	add	r3, r0
 800ef0a:	404a      	eors	r2, r1
 800ef0c:	b2d2      	uxtb	r2, r2
 800ef0e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; i++)
 800ef10:	8afb      	ldrh	r3, [r7, #22]
 800ef12:	3301      	adds	r3, #1
 800ef14:	82fb      	strh	r3, [r7, #22]
 800ef16:	8afa      	ldrh	r2, [r7, #22]
 800ef18:	897b      	ldrh	r3, [r7, #10]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d3e5      	bcc.n	800eeea <LoRaMacPayloadEncrypt+0x102>
		}
	}
}
 800ef1e:	bf00      	nop
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	20006a90 	.word	0x20006a90
 800ef2c:	20000084 	.word	0x20000084
 800ef30:	20006a80 	.word	0x20006a80

0800ef34 <LoRaMacPayloadDecrypt>:

void LoRaMacPayloadDecrypt(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t address, uint8_t dir, uint32_t sequenceCounter, uint8_t *decBuffer)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af04      	add	r7, sp, #16
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	607a      	str	r2, [r7, #4]
 800ef3e:	603b      	str	r3, [r7, #0]
 800ef40:	460b      	mov	r3, r1
 800ef42:	817b      	strh	r3, [r7, #10]
	LoRaMacPayloadEncrypt(buffer, size, key, address, dir, sequenceCounter, decBuffer);
 800ef44:	8979      	ldrh	r1, [r7, #10]
 800ef46:	6a3b      	ldr	r3, [r7, #32]
 800ef48:	9302      	str	r3, [sp, #8]
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	9301      	str	r3, [sp, #4]
 800ef4e:	7e3b      	ldrb	r3, [r7, #24]
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	f7ff ff46 	bl	800ede8 <LoRaMacPayloadEncrypt>
}
 800ef5c:	bf00      	nop
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <LoRaMacJoinComputeMic>:

void LoRaMacJoinComputeMic(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint32_t *mic)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	607a      	str	r2, [r7, #4]
 800ef6e:	603b      	str	r3, [r7, #0]
 800ef70:	460b      	mov	r3, r1
 800ef72:	817b      	strh	r3, [r7, #10]
	AES_CMAC_Init(AesCmacCtx);
 800ef74:	4812      	ldr	r0, [pc, #72]	@ (800efc0 <LoRaMacJoinComputeMic+0x5c>)
 800ef76:	f7fb fe78 	bl	800ac6a <AES_CMAC_Init>

	AES_CMAC_SetKey(AesCmacCtx, key);
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	4810      	ldr	r0, [pc, #64]	@ (800efc0 <LoRaMacJoinComputeMic+0x5c>)
 800ef7e:	f7fb fe8d 	bl	800ac9c <AES_CMAC_SetKey>

	AES_CMAC_Update(AesCmacCtx, buffer, size & 0xFF);
 800ef82:	897b      	ldrh	r3, [r7, #10]
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	461a      	mov	r2, r3
 800ef88:	68f9      	ldr	r1, [r7, #12]
 800ef8a:	480d      	ldr	r0, [pc, #52]	@ (800efc0 <LoRaMacJoinComputeMic+0x5c>)
 800ef8c:	f7fb fe95 	bl	800acba <AES_CMAC_Update>

	AES_CMAC_Final(Mic, AesCmacCtx);
 800ef90:	490b      	ldr	r1, [pc, #44]	@ (800efc0 <LoRaMacJoinComputeMic+0x5c>)
 800ef92:	480c      	ldr	r0, [pc, #48]	@ (800efc4 <LoRaMacJoinComputeMic+0x60>)
 800ef94:	f7fb ff41 	bl	800ae1a <AES_CMAC_Final>

	*mic = (uint32_t)((uint32_t)Mic[3] << 24 | (uint32_t)Mic[2] << 16 | (uint32_t)Mic[1] << 8 | (uint32_t)Mic[0]);
 800ef98:	4b0a      	ldr	r3, [pc, #40]	@ (800efc4 <LoRaMacJoinComputeMic+0x60>)
 800ef9a:	78db      	ldrb	r3, [r3, #3]
 800ef9c:	061a      	lsls	r2, r3, #24
 800ef9e:	4b09      	ldr	r3, [pc, #36]	@ (800efc4 <LoRaMacJoinComputeMic+0x60>)
 800efa0:	789b      	ldrb	r3, [r3, #2]
 800efa2:	041b      	lsls	r3, r3, #16
 800efa4:	431a      	orrs	r2, r3
 800efa6:	4b07      	ldr	r3, [pc, #28]	@ (800efc4 <LoRaMacJoinComputeMic+0x60>)
 800efa8:	785b      	ldrb	r3, [r3, #1]
 800efaa:	021b      	lsls	r3, r3, #8
 800efac:	4313      	orrs	r3, r2
 800efae:	4a05      	ldr	r2, [pc, #20]	@ (800efc4 <LoRaMacJoinComputeMic+0x60>)
 800efb0:	7812      	ldrb	r2, [r2, #0]
 800efb2:	431a      	orrs	r2, r3
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	601a      	str	r2, [r3, #0]
}
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20006b84 	.word	0x20006b84
 800efc4:	20006a70 	.word	0x20006a70

0800efc8 <LoRaMacJoinDecrypt>:

void LoRaMacJoinDecrypt(const uint8_t *buffer, uint16_t size, const uint8_t *key, uint8_t *decBuffer)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	607a      	str	r2, [r7, #4]
 800efd2:	603b      	str	r3, [r7, #0]
 800efd4:	460b      	mov	r3, r1
 800efd6:	817b      	strh	r3, [r7, #10]
	memset1(AesContext.ksch, '\0', 240);
 800efd8:	22f0      	movs	r2, #240	@ 0xf0
 800efda:	2100      	movs	r1, #0
 800efdc:	480e      	ldr	r0, [pc, #56]	@ (800f018 <LoRaMacJoinDecrypt+0x50>)
 800efde:	f011 fe1d 	bl	8020c1c <memset1>
	lora_aes_set_key(key, 16, &AesContext);
 800efe2:	4a0d      	ldr	r2, [pc, #52]	@ (800f018 <LoRaMacJoinDecrypt+0x50>)
 800efe4:	2110      	movs	r1, #16
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7fb fd18 	bl	800aa1c <lora_aes_set_key>
	lora_aes_encrypt(buffer, decBuffer, &AesContext);
 800efec:	4a0a      	ldr	r2, [pc, #40]	@ (800f018 <LoRaMacJoinDecrypt+0x50>)
 800efee:	6839      	ldr	r1, [r7, #0]
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f7fb fdf1 	bl	800abd8 <lora_aes_encrypt>
	// Check if optional CFList is included
	if (size >= 16)
 800eff6:	897b      	ldrh	r3, [r7, #10]
 800eff8:	2b0f      	cmp	r3, #15
 800effa:	d908      	bls.n	800f00e <LoRaMacJoinDecrypt+0x46>
	{
		lora_aes_encrypt(buffer + 16, decBuffer + 16, &AesContext);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f103 0010 	add.w	r0, r3, #16
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	3310      	adds	r3, #16
 800f006:	4a04      	ldr	r2, [pc, #16]	@ (800f018 <LoRaMacJoinDecrypt+0x50>)
 800f008:	4619      	mov	r1, r3
 800f00a:	f7fb fde5 	bl	800abd8 <lora_aes_encrypt>
	}
}
 800f00e:	bf00      	nop
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20006a90 	.word	0x20006a90

0800f01c <LoRaMacJoinComputeSKeys>:

void LoRaMacJoinComputeSKeys(const uint8_t *key, const uint8_t *appNonce, uint16_t devNonce, uint8_t *nwkSKey, uint8_t *appSKey)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b08a      	sub	sp, #40	@ 0x28
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	603b      	str	r3, [r7, #0]
 800f028:	4613      	mov	r3, r2
 800f02a:	80fb      	strh	r3, [r7, #6]
	uint8_t nonce[16];
	uint8_t *pDevNonce = (uint8_t *)&devNonce;
 800f02c:	1dbb      	adds	r3, r7, #6
 800f02e:	627b      	str	r3, [r7, #36]	@ 0x24

	memset1(AesContext.ksch, '\0', 240);
 800f030:	22f0      	movs	r2, #240	@ 0xf0
 800f032:	2100      	movs	r1, #0
 800f034:	4825      	ldr	r0, [pc, #148]	@ (800f0cc <LoRaMacJoinComputeSKeys+0xb0>)
 800f036:	f011 fdf1 	bl	8020c1c <memset1>
	lora_aes_set_key(key, 16, &AesContext);
 800f03a:	4a24      	ldr	r2, [pc, #144]	@ (800f0cc <LoRaMacJoinComputeSKeys+0xb0>)
 800f03c:	2110      	movs	r1, #16
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f7fb fcec 	bl	800aa1c <lora_aes_set_key>

	memset1(nonce, 0, sizeof(nonce));
 800f044:	f107 0314 	add.w	r3, r7, #20
 800f048:	2210      	movs	r2, #16
 800f04a:	2100      	movs	r1, #0
 800f04c:	4618      	mov	r0, r3
 800f04e:	f011 fde5 	bl	8020c1c <memset1>
	nonce[0] = 0x01;
 800f052:	2301      	movs	r3, #1
 800f054:	753b      	strb	r3, [r7, #20]
	memcpy1(nonce + 1, appNonce, 6);
 800f056:	f107 0314 	add.w	r3, r7, #20
 800f05a:	3301      	adds	r3, #1
 800f05c:	2206      	movs	r2, #6
 800f05e:	68b9      	ldr	r1, [r7, #8]
 800f060:	4618      	mov	r0, r3
 800f062:	f011 fd9e 	bl	8020ba2 <memcpy1>
	memcpy1(nonce + 7, pDevNonce, 2);
 800f066:	f107 0314 	add.w	r3, r7, #20
 800f06a:	3307      	adds	r3, #7
 800f06c:	2202      	movs	r2, #2
 800f06e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f070:	4618      	mov	r0, r3
 800f072:	f011 fd96 	bl	8020ba2 <memcpy1>
	lora_aes_encrypt(nonce, nwkSKey, &AesContext);
 800f076:	f107 0314 	add.w	r3, r7, #20
 800f07a:	4a14      	ldr	r2, [pc, #80]	@ (800f0cc <LoRaMacJoinComputeSKeys+0xb0>)
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fb fdaa 	bl	800abd8 <lora_aes_encrypt>

	memset1(nonce, 0, sizeof(nonce));
 800f084:	f107 0314 	add.w	r3, r7, #20
 800f088:	2210      	movs	r2, #16
 800f08a:	2100      	movs	r1, #0
 800f08c:	4618      	mov	r0, r3
 800f08e:	f011 fdc5 	bl	8020c1c <memset1>
	nonce[0] = 0x02;
 800f092:	2302      	movs	r3, #2
 800f094:	753b      	strb	r3, [r7, #20]
	memcpy1(nonce + 1, appNonce, 6);
 800f096:	f107 0314 	add.w	r3, r7, #20
 800f09a:	3301      	adds	r3, #1
 800f09c:	2206      	movs	r2, #6
 800f09e:	68b9      	ldr	r1, [r7, #8]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f011 fd7e 	bl	8020ba2 <memcpy1>
	memcpy1(nonce + 7, pDevNonce, 2);
 800f0a6:	f107 0314 	add.w	r3, r7, #20
 800f0aa:	3307      	adds	r3, #7
 800f0ac:	2202      	movs	r2, #2
 800f0ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f011 fd76 	bl	8020ba2 <memcpy1>
	lora_aes_encrypt(nonce, appSKey, &AesContext);
 800f0b6:	f107 0314 	add.w	r3, r7, #20
 800f0ba:	4a04      	ldr	r2, [pc, #16]	@ (800f0cc <LoRaMacJoinComputeSKeys+0xb0>)
 800f0bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fb fd8a 	bl	800abd8 <lora_aes_encrypt>
}
 800f0c4:	bf00      	nop
 800f0c6:	3728      	adds	r7, #40	@ 0x28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	20006a90 	.word	0x20006a90

0800f0d0 <lmh_setDevEui>:

static bool m_adr_enable_init;
static TimerEvent_t ComplianceTestTxNextPacketTimer;

void lmh_setDevEui(uint8_t userDevEui[])
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
	memcpy(DevEui, userDevEui, 8);
 800f0d8:	4b05      	ldr	r3, [pc, #20]	@ (800f0f0 <lmh_setDevEui+0x20>)
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	6810      	ldr	r0, [r2, #0]
 800f0de:	6851      	ldr	r1, [r2, #4]
 800f0e0:	c303      	stmia	r3!, {r0, r1}
}
 800f0e2:	bf00      	nop
 800f0e4:	370c      	adds	r7, #12
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	20006cc4 	.word	0x20006cc4

0800f0f4 <lmh_setAppEui>:

void lmh_setAppEui(uint8_t *userAppEui)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
	memcpy(AppEui, userAppEui, 8);
 800f0fc:	4b05      	ldr	r3, [pc, #20]	@ (800f114 <lmh_setAppEui+0x20>)
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	6810      	ldr	r0, [r2, #0]
 800f102:	6851      	ldr	r1, [r2, #4]
 800f104:	c303      	stmia	r3!, {r0, r1}
}
 800f106:	bf00      	nop
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	20006ccc 	.word	0x20006ccc

0800f118 <lmh_setAppKey>:

void lmh_setAppKey(uint8_t *userAppKey)
{
 800f118:	b490      	push	{r4, r7}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
	memcpy(AppKey, userAppKey, 16);
 800f120:	4a06      	ldr	r2, [pc, #24]	@ (800f13c <lmh_setAppKey+0x24>)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4614      	mov	r4, r2
 800f126:	6818      	ldr	r0, [r3, #0]
 800f128:	6859      	ldr	r1, [r3, #4]
 800f12a:	689a      	ldr	r2, [r3, #8]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
}
 800f130:	bf00      	nop
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bc90      	pop	{r4, r7}
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop
 800f13c:	20000094 	.word	0x20000094

0800f140 <lmh_setSubBandChannels>:
	singleChannelSelected = userSingleChannel;
	singleChannelDatarate = userDatarate;
}

bool lmh_setSubBandChannels(uint8_t subBand)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b088      	sub	sp, #32
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	71fb      	strb	r3, [r7, #7]
	uint16_t subBandChannelMask[6] = {0, 0, 0, 0, 0, 0};
 800f14a:	f107 030c 	add.w	r3, r7, #12
 800f14e:	2200      	movs	r2, #0
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	605a      	str	r2, [r3, #4]
 800f154:	609a      	str	r2, [r3, #8]
	uint8_t maxBand = 1;
 800f156:	2301      	movs	r3, #1
 800f158:	77fb      	strb	r3, [r7, #31]
	switch (region)
 800f15a:	4b7e      	ldr	r3, [pc, #504]	@ (800f354 <lmh_setSubBandChannels+0x214>)
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b0c      	cmp	r3, #12
 800f160:	d83a      	bhi.n	800f1d8 <lmh_setSubBandChannels+0x98>
 800f162:	a201      	add	r2, pc, #4	@ (adr r2, 800f168 <lmh_setSubBandChannels+0x28>)
 800f164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f168:	0800f19d 	.word	0x0800f19d
 800f16c:	0800f1a3 	.word	0x0800f1a3
 800f170:	0800f1a9 	.word	0x0800f1a9
 800f174:	0800f1af 	.word	0x0800f1af
 800f178:	0800f1b5 	.word	0x0800f1b5
 800f17c:	0800f1c1 	.word	0x0800f1c1
 800f180:	0800f1c7 	.word	0x0800f1c7
 800f184:	0800f1bb 	.word	0x0800f1bb
 800f188:	0800f1cd 	.word	0x0800f1cd
 800f18c:	0800f19d 	.word	0x0800f19d
 800f190:	0800f19d 	.word	0x0800f19d
 800f194:	0800f19d 	.word	0x0800f19d
 800f198:	0800f1d3 	.word	0x0800f1d3
	{
	case LORAMAC_REGION_AS923:
	case LORAMAC_REGION_AS923_2:
	case LORAMAC_REGION_AS923_3:
	case LORAMAC_REGION_AS923_4:
		maxBand = 1;
 800f19c:	2301      	movs	r3, #1
 800f19e:	77fb      	strb	r3, [r7, #31]
		break;
 800f1a0:	e01a      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_AU915:
		maxBand = 9;
 800f1a2:	2309      	movs	r3, #9
 800f1a4:	77fb      	strb	r3, [r7, #31]
		break;
 800f1a6:	e017      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_CN470:

		maxBand = 12;
 800f1a8:	230c      	movs	r3, #12
 800f1aa:	77fb      	strb	r3, [r7, #31]
		break;
 800f1ac:	e014      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_CN779:
		maxBand = 2;
 800f1ae:	2302      	movs	r3, #2
 800f1b0:	77fb      	strb	r3, [r7, #31]
		break;
 800f1b2:	e011      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_EU433:
		maxBand = 2;
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	77fb      	strb	r3, [r7, #31]
		break;
 800f1b8:	e00e      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_IN865:
		maxBand = 2;
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	77fb      	strb	r3, [r7, #31]
		break;
 800f1be:	e00b      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_EU868:
		maxBand = 2;
 800f1c0:	2302      	movs	r3, #2
 800f1c2:	77fb      	strb	r3, [r7, #31]
		break;
 800f1c4:	e008      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_KR920:
		maxBand = 2;
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	77fb      	strb	r3, [r7, #31]
		break;
 800f1ca:	e005      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_US915:
		maxBand = 9;
 800f1cc:	2309      	movs	r3, #9
 800f1ce:	77fb      	strb	r3, [r7, #31]
		break;
 800f1d0:	e002      	b.n	800f1d8 <lmh_setSubBandChannels+0x98>
	case LORAMAC_REGION_RU864:
		maxBand = 1;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	77fb      	strb	r3, [r7, #31]
		break;
 800f1d6:	bf00      	nop
	}
	uint16_t upperMask = 0xFF00;
 800f1d8:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800f1dc:	83bb      	strh	r3, [r7, #28]
	uint16_t lowerMask = 0x00FF;
 800f1de:	23ff      	movs	r3, #255	@ 0xff
 800f1e0:	837b      	strh	r3, [r7, #26]

	// Check for valid sub band
	if ((subBand == 0) || (subBand > maxBand))
 800f1e2:	79fb      	ldrb	r3, [r7, #7]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d003      	beq.n	800f1f0 <lmh_setSubBandChannels+0xb0>
 800f1e8:	79fa      	ldrb	r2, [r7, #7]
 800f1ea:	7ffb      	ldrb	r3, [r7, #31]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d901      	bls.n	800f1f4 <lmh_setSubBandChannels+0xb4>
	{
		LOG_LIB("LMH", "Invalid subband");

		// Invalid sub band requested
		return false;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	e0aa      	b.n	800f34a <lmh_setSubBandChannels+0x20a>
	}

	switch (subBand)
 800f1f4:	79fb      	ldrb	r3, [r7, #7]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	2b0b      	cmp	r3, #11
 800f1fa:	d860      	bhi.n	800f2be <lmh_setSubBandChannels+0x17e>
 800f1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800f204 <lmh_setSubBandChannels+0xc4>)
 800f1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f202:	bf00      	nop
 800f204:	0800f235 	.word	0x0800f235
 800f208:	0800f23b 	.word	0x0800f23b
 800f20c:	0800f247 	.word	0x0800f247
 800f210:	0800f253 	.word	0x0800f253
 800f214:	0800f25f 	.word	0x0800f25f
 800f218:	0800f26b 	.word	0x0800f26b
 800f21c:	0800f277 	.word	0x0800f277
 800f220:	0800f283 	.word	0x0800f283
 800f224:	0800f28f 	.word	0x0800f28f
 800f228:	0800f29b 	.word	0x0800f29b
 800f22c:	0800f2a7 	.word	0x0800f2a7
 800f230:	0800f2b3 	.word	0x0800f2b3
	{
	case 1:
		subBandChannelMask[0] = lowerMask;
 800f234:	8b7b      	ldrh	r3, [r7, #26]
 800f236:	81bb      	strh	r3, [r7, #12]
		break;
 800f238:	e058      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
	case 2:
		if (maxBand >= 2)
 800f23a:	7ffb      	ldrb	r3, [r7, #31]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d940      	bls.n	800f2c2 <lmh_setSubBandChannels+0x182>
		{
			subBandChannelMask[0] = upperMask;
 800f240:	8bbb      	ldrh	r3, [r7, #28]
 800f242:	81bb      	strh	r3, [r7, #12]
		}
		break;
 800f244:	e03d      	b.n	800f2c2 <lmh_setSubBandChannels+0x182>
	case 3:
		if (maxBand >= 3)
 800f246:	7ffb      	ldrb	r3, [r7, #31]
 800f248:	2b02      	cmp	r3, #2
 800f24a:	d93c      	bls.n	800f2c6 <lmh_setSubBandChannels+0x186>
		{
			subBandChannelMask[1] = lowerMask;
 800f24c:	8b7b      	ldrh	r3, [r7, #26]
 800f24e:	81fb      	strh	r3, [r7, #14]
		}
		break;
 800f250:	e039      	b.n	800f2c6 <lmh_setSubBandChannels+0x186>
	case 4:
		if (maxBand >= 4)
 800f252:	7ffb      	ldrb	r3, [r7, #31]
 800f254:	2b03      	cmp	r3, #3
 800f256:	d938      	bls.n	800f2ca <lmh_setSubBandChannels+0x18a>
		{
			subBandChannelMask[1] = upperMask;
 800f258:	8bbb      	ldrh	r3, [r7, #28]
 800f25a:	81fb      	strh	r3, [r7, #14]
		}
		break;
 800f25c:	e035      	b.n	800f2ca <lmh_setSubBandChannels+0x18a>
	case 5:
		if (maxBand >= 5)
 800f25e:	7ffb      	ldrb	r3, [r7, #31]
 800f260:	2b04      	cmp	r3, #4
 800f262:	d934      	bls.n	800f2ce <lmh_setSubBandChannels+0x18e>
		{
			subBandChannelMask[2] = lowerMask;
 800f264:	8b7b      	ldrh	r3, [r7, #26]
 800f266:	823b      	strh	r3, [r7, #16]
		}
		break;
 800f268:	e031      	b.n	800f2ce <lmh_setSubBandChannels+0x18e>
	case 6:
		if (maxBand >= 6)
 800f26a:	7ffb      	ldrb	r3, [r7, #31]
 800f26c:	2b05      	cmp	r3, #5
 800f26e:	d930      	bls.n	800f2d2 <lmh_setSubBandChannels+0x192>
		{
			subBandChannelMask[2] = upperMask;
 800f270:	8bbb      	ldrh	r3, [r7, #28]
 800f272:	823b      	strh	r3, [r7, #16]
		}
		break;
 800f274:	e02d      	b.n	800f2d2 <lmh_setSubBandChannels+0x192>
	case 7:
		if (maxBand >= 7)
 800f276:	7ffb      	ldrb	r3, [r7, #31]
 800f278:	2b06      	cmp	r3, #6
 800f27a:	d92c      	bls.n	800f2d6 <lmh_setSubBandChannels+0x196>
		{
			subBandChannelMask[3] = lowerMask;
 800f27c:	8b7b      	ldrh	r3, [r7, #26]
 800f27e:	827b      	strh	r3, [r7, #18]
		}
		break;
 800f280:	e029      	b.n	800f2d6 <lmh_setSubBandChannels+0x196>
	case 8:
		if (maxBand >= 8)
 800f282:	7ffb      	ldrb	r3, [r7, #31]
 800f284:	2b07      	cmp	r3, #7
 800f286:	d928      	bls.n	800f2da <lmh_setSubBandChannels+0x19a>
		{
			subBandChannelMask[3] = upperMask;
 800f288:	8bbb      	ldrh	r3, [r7, #28]
 800f28a:	827b      	strh	r3, [r7, #18]
		}
		break;
 800f28c:	e025      	b.n	800f2da <lmh_setSubBandChannels+0x19a>
	case 9:
		if (maxBand >= 9)
 800f28e:	7ffb      	ldrb	r3, [r7, #31]
 800f290:	2b08      	cmp	r3, #8
 800f292:	d924      	bls.n	800f2de <lmh_setSubBandChannels+0x19e>
		{
			subBandChannelMask[4] = lowerMask;
 800f294:	8b7b      	ldrh	r3, [r7, #26]
 800f296:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800f298:	e021      	b.n	800f2de <lmh_setSubBandChannels+0x19e>
	case 10:
		if (maxBand >= 10)
 800f29a:	7ffb      	ldrb	r3, [r7, #31]
 800f29c:	2b09      	cmp	r3, #9
 800f29e:	d920      	bls.n	800f2e2 <lmh_setSubBandChannels+0x1a2>
		{
			subBandChannelMask[4] = upperMask;
 800f2a0:	8bbb      	ldrh	r3, [r7, #28]
 800f2a2:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800f2a4:	e01d      	b.n	800f2e2 <lmh_setSubBandChannels+0x1a2>
	case 11:
		if (maxBand >= 11)
 800f2a6:	7ffb      	ldrb	r3, [r7, #31]
 800f2a8:	2b0a      	cmp	r3, #10
 800f2aa:	d91c      	bls.n	800f2e6 <lmh_setSubBandChannels+0x1a6>
		{
			subBandChannelMask[5] = lowerMask;
 800f2ac:	8b7b      	ldrh	r3, [r7, #26]
 800f2ae:	82fb      	strh	r3, [r7, #22]
		}
		break;
 800f2b0:	e019      	b.n	800f2e6 <lmh_setSubBandChannels+0x1a6>
	case 12:
		if (maxBand >= 12)
 800f2b2:	7ffb      	ldrb	r3, [r7, #31]
 800f2b4:	2b0b      	cmp	r3, #11
 800f2b6:	d918      	bls.n	800f2ea <lmh_setSubBandChannels+0x1aa>
		{
			subBandChannelMask[5] = upperMask;
 800f2b8:	8bbb      	ldrh	r3, [r7, #28]
 800f2ba:	82fb      	strh	r3, [r7, #22]
		}
		break;
 800f2bc:	e015      	b.n	800f2ea <lmh_setSubBandChannels+0x1aa>
	default:
		LOG_LIB("LMH", "Invalid subband");

		return false;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	e043      	b.n	800f34a <lmh_setSubBandChannels+0x20a>
		break;
 800f2c2:	bf00      	nop
 800f2c4:	e012      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2c6:	bf00      	nop
 800f2c8:	e010      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2ca:	bf00      	nop
 800f2cc:	e00e      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2ce:	bf00      	nop
 800f2d0:	e00c      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2d2:	bf00      	nop
 800f2d4:	e00a      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2d6:	bf00      	nop
 800f2d8:	e008      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2da:	bf00      	nop
 800f2dc:	e006      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2de:	bf00      	nop
 800f2e0:	e004      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2e2:	bf00      	nop
 800f2e4:	e002      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2e6:	bf00      	nop
 800f2e8:	e000      	b.n	800f2ec <lmh_setSubBandChannels+0x1ac>
		break;
 800f2ea:	bf00      	nop
	}
	if (maxBand > 2)
 800f2ec:	7ffb      	ldrb	r3, [r7, #31]
 800f2ee:	2b02      	cmp	r3, #2
 800f2f0:	d915      	bls.n	800f31e <lmh_setSubBandChannels+0x1de>
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, subBandChannelMask, 6);
 800f2f2:	f107 030c 	add.w	r3, r7, #12
 800f2f6:	2206      	movs	r2, #6
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4817      	ldr	r0, [pc, #92]	@ (800f358 <lmh_setSubBandChannels+0x218>)
 800f2fc:	f007 f8b3 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMask, subBandChannelMask, 6);
 800f300:	f107 030c 	add.w	r3, r7, #12
 800f304:	2206      	movs	r2, #6
 800f306:	4619      	mov	r1, r3
 800f308:	4814      	ldr	r0, [pc, #80]	@ (800f35c <lmh_setSubBandChannels+0x21c>)
 800f30a:	f007 f8ac 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, subBandChannelMask, 6);
 800f30e:	f107 030c 	add.w	r3, r7, #12
 800f312:	2206      	movs	r2, #6
 800f314:	4619      	mov	r1, r3
 800f316:	4812      	ldr	r0, [pc, #72]	@ (800f360 <lmh_setSubBandChannels+0x220>)
 800f318:	f007 f8a5 	bl	8016466 <RegionCommonChanMaskCopy>
 800f31c:	e014      	b.n	800f348 <lmh_setSubBandChannels+0x208>
	}
	else
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, subBandChannelMask, 1);
 800f31e:	f107 030c 	add.w	r3, r7, #12
 800f322:	2201      	movs	r2, #1
 800f324:	4619      	mov	r1, r3
 800f326:	480c      	ldr	r0, [pc, #48]	@ (800f358 <lmh_setSubBandChannels+0x218>)
 800f328:	f007 f89d 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMask, subBandChannelMask, 1);
 800f32c:	f107 030c 	add.w	r3, r7, #12
 800f330:	2201      	movs	r2, #1
 800f332:	4619      	mov	r1, r3
 800f334:	4809      	ldr	r0, [pc, #36]	@ (800f35c <lmh_setSubBandChannels+0x21c>)
 800f336:	f007 f896 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, subBandChannelMask, 1);
 800f33a:	f107 030c 	add.w	r3, r7, #12
 800f33e:	2201      	movs	r2, #1
 800f340:	4619      	mov	r1, r3
 800f342:	4807      	ldr	r0, [pc, #28]	@ (800f360 <lmh_setSubBandChannels+0x220>)
 800f344:	f007 f88f 	bl	8016466 <RegionCommonChanMaskCopy>
	}

	LOG_LIB("LMH", "Selected subband %d", subBand);

	return true;
 800f348:	2301      	movs	r3, #1
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3720      	adds	r7, #32
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	20006cc0 	.word	0x20006cc0
 800f358:	20006ca8 	.word	0x20006ca8
 800f35c:	20006c9c 	.word	0x20006c9c
 800f360:	20006cb4 	.word	0x20006cb4

0800f364 <compliance_test_tx>:

static bool compliance_test_tx(void)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
	McpsReq_t mcpsReq;
	LoRaMacTxInfo_t txInfo;

	if (m_compliance_test.link_check == true)
 800f36a:	4b3f      	ldr	r3, [pc, #252]	@ (800f468 <compliance_test_tx+0x104>)
 800f36c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f370:	2b00      	cmp	r3, #0
 800f372:	d017      	beq.n	800f3a4 <compliance_test_tx+0x40>
	{
		m_compliance_test.link_check = false;
 800f374:	4b3c      	ldr	r3, [pc, #240]	@ (800f468 <compliance_test_tx+0x104>)
 800f376:	2200      	movs	r2, #0
 800f378:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		m_compliance_test.data_buffer_size = 3;
 800f37c:	4b3a      	ldr	r3, [pc, #232]	@ (800f468 <compliance_test_tx+0x104>)
 800f37e:	2203      	movs	r2, #3
 800f380:	711a      	strb	r2, [r3, #4]
		m_compliance_test.data_buffer[0] = 5;
 800f382:	4b39      	ldr	r3, [pc, #228]	@ (800f468 <compliance_test_tx+0x104>)
 800f384:	2205      	movs	r2, #5
 800f386:	715a      	strb	r2, [r3, #5]
		m_compliance_test.data_buffer[1] = m_compliance_test.demod_margin;
 800f388:	4b37      	ldr	r3, [pc, #220]	@ (800f468 <compliance_test_tx+0x104>)
 800f38a:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 800f38e:	4b36      	ldr	r3, [pc, #216]	@ (800f468 <compliance_test_tx+0x104>)
 800f390:	719a      	strb	r2, [r3, #6]
		m_compliance_test.data_buffer[2] = m_compliance_test.nb_gateways;
 800f392:	4b35      	ldr	r3, [pc, #212]	@ (800f468 <compliance_test_tx+0x104>)
 800f394:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 800f398:	4b33      	ldr	r3, [pc, #204]	@ (800f468 <compliance_test_tx+0x104>)
 800f39a:	71da      	strb	r2, [r3, #7]
		m_compliance_test.state = 1;
 800f39c:	4b32      	ldr	r3, [pc, #200]	@ (800f468 <compliance_test_tx+0x104>)
 800f39e:	2201      	movs	r2, #1
 800f3a0:	705a      	strb	r2, [r3, #1]
 800f3a2:	e01b      	b.n	800f3dc <compliance_test_tx+0x78>
	}
	else
	{
		switch (m_compliance_test.state)
 800f3a4:	4b30      	ldr	r3, [pc, #192]	@ (800f468 <compliance_test_tx+0x104>)
 800f3a6:	785b      	ldrb	r3, [r3, #1]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d005      	beq.n	800f3b8 <compliance_test_tx+0x54>
 800f3ac:	2b04      	cmp	r3, #4
 800f3ae:	d115      	bne.n	800f3dc <compliance_test_tx+0x78>
		{
		case 4:
			m_compliance_test.state = 1;
 800f3b0:	4b2d      	ldr	r3, [pc, #180]	@ (800f468 <compliance_test_tx+0x104>)
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	705a      	strb	r2, [r3, #1]
			break;
 800f3b6:	e011      	b.n	800f3dc <compliance_test_tx+0x78>

		case 1:
			m_compliance_test.data_buffer_size = 2;
 800f3b8:	4b2b      	ldr	r3, [pc, #172]	@ (800f468 <compliance_test_tx+0x104>)
 800f3ba:	2202      	movs	r2, #2
 800f3bc:	711a      	strb	r2, [r3, #4]
			m_compliance_test.data_buffer[0] = m_compliance_test.downlink_counter >> 8;
 800f3be:	4b2a      	ldr	r3, [pc, #168]	@ (800f468 <compliance_test_tx+0x104>)
 800f3c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f3c4:	0a1b      	lsrs	r3, r3, #8
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	b2da      	uxtb	r2, r3
 800f3ca:	4b27      	ldr	r3, [pc, #156]	@ (800f468 <compliance_test_tx+0x104>)
 800f3cc:	715a      	strb	r2, [r3, #5]
			m_compliance_test.data_buffer[1] = m_compliance_test.downlink_counter;
 800f3ce:	4b26      	ldr	r3, [pc, #152]	@ (800f468 <compliance_test_tx+0x104>)
 800f3d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	4b24      	ldr	r3, [pc, #144]	@ (800f468 <compliance_test_tx+0x104>)
 800f3d8:	719a      	strb	r2, [r3, #6]
			break;
 800f3da:	bf00      	nop
		}
	}

	if (LoRaMacQueryTxPossible(m_compliance_test.data_buffer_size, &txInfo) != LORAMAC_STATUS_OK)
 800f3dc:	4b22      	ldr	r3, [pc, #136]	@ (800f468 <compliance_test_tx+0x104>)
 800f3de:	791b      	ldrb	r3, [r3, #4]
 800f3e0:	1d3a      	adds	r2, r7, #4
 800f3e2:	4611      	mov	r1, r2
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe fe7d 	bl	800e0e4 <LoRaMacQueryTxPossible>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d008      	beq.n	800f402 <compliance_test_tx+0x9e>
	{
		// Send empty frame in order to flush MAC commands
		mcpsReq.Type = MCPS_UNCONFIRMED;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	723b      	strb	r3, [r7, #8]
		mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	613b      	str	r3, [r7, #16]
		mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	82bb      	strh	r3, [r7, #20]
		mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800f3fc:	2303      	movs	r3, #3
 800f3fe:	75bb      	strb	r3, [r7, #22]
 800f400:	e01f      	b.n	800f442 <compliance_test_tx+0xde>
	}
	else
	{
		if (m_compliance_test.is_tx_confirmed == LMH_UNCONFIRMED_MSG)
 800f402:	4b19      	ldr	r3, [pc, #100]	@ (800f468 <compliance_test_tx+0x104>)
 800f404:	789b      	ldrb	r3, [r3, #2]
 800f406:	f083 0301 	eor.w	r3, r3, #1
 800f40a:	b2db      	uxtb	r3, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00b      	beq.n	800f428 <compliance_test_tx+0xc4>
		{
			mcpsReq.Type = MCPS_UNCONFIRMED;
 800f410:	2300      	movs	r3, #0
 800f412:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Unconfirmed.fPort = LORAWAN_CERTIF_PORT;
 800f414:	23e0      	movs	r3, #224	@ 0xe0
 800f416:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Unconfirmed.fBufferSize = m_compliance_test.data_buffer_size;
 800f418:	4b13      	ldr	r3, [pc, #76]	@ (800f468 <compliance_test_tx+0x104>)
 800f41a:	791b      	ldrb	r3, [r3, #4]
 800f41c:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Unconfirmed.fBuffer = &(m_compliance_test.data_buffer);
 800f41e:	4b13      	ldr	r3, [pc, #76]	@ (800f46c <compliance_test_tx+0x108>)
 800f420:	613b      	str	r3, [r7, #16]
			mcpsReq.Req.Unconfirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800f422:	2303      	movs	r3, #3
 800f424:	75bb      	strb	r3, [r7, #22]
 800f426:	e00c      	b.n	800f442 <compliance_test_tx+0xde>
		}
		else
		{
			mcpsReq.Type = MCPS_CONFIRMED;
 800f428:	2301      	movs	r3, #1
 800f42a:	723b      	strb	r3, [r7, #8]
			mcpsReq.Req.Confirmed.fPort = LORAWAN_CERTIF_PORT;
 800f42c:	23e0      	movs	r3, #224	@ 0xe0
 800f42e:	733b      	strb	r3, [r7, #12]
			mcpsReq.Req.Confirmed.fBufferSize = m_compliance_test.data_buffer_size;
 800f430:	4b0d      	ldr	r3, [pc, #52]	@ (800f468 <compliance_test_tx+0x104>)
 800f432:	791b      	ldrb	r3, [r3, #4]
 800f434:	82bb      	strh	r3, [r7, #20]
			mcpsReq.Req.Confirmed.fBuffer = &(m_compliance_test.data_buffer);
 800f436:	4b0d      	ldr	r3, [pc, #52]	@ (800f46c <compliance_test_tx+0x108>)
 800f438:	613b      	str	r3, [r7, #16]
			/// \todo make nbTrials configurable
			mcpsReq.Req.Confirmed.NbTrials = 8;
 800f43a:	2308      	movs	r3, #8
 800f43c:	75fb      	strb	r3, [r7, #23]
			mcpsReq.Req.Confirmed.Datarate = LORAWAN_DEFAULT_DATARATE;
 800f43e:	2303      	movs	r3, #3
 800f440:	75bb      	strb	r3, [r7, #22]
		}
	}

	// certification test on-going
	TimerStart(&ComplianceTestTxNextPacketTimer);
 800f442:	480b      	ldr	r0, [pc, #44]	@ (800f470 <compliance_test_tx+0x10c>)
 800f444:	f011 fcf4 	bl	8020e30 <util_timer_start>

	if (LoRaMacMcpsRequest(&mcpsReq) == LORAMAC_STATUS_OK)
 800f448:	f107 0308 	add.w	r3, r7, #8
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7ff fb5d 	bl	800eb0c <LoRaMacMcpsRequest>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <compliance_test_tx+0xf8>
	{
		return false;
 800f458:	2300      	movs	r3, #0
 800f45a:	e000      	b.n	800f45e <compliance_test_tx+0xfa>
	}

	return true;
 800f45c:	2301      	movs	r3, #1
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	20006d14 	.word	0x20006d14
 800f46c:	20006d19 	.word	0x20006d19
 800f470:	20006d68 	.word	0x20006d68

0800f474 <OnComplianceTestTxNextPacketTimerEvent>:

/**@brief Function executed on TxNextPacket Timeout event
 */
static void OnComplianceTestTxNextPacketTimerEvent(void *arg)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
	compliance_test_tx();
 800f47c:	f7ff ff72 	bl	800f364 <compliance_test_tx>
}
 800f480:	bf00      	nop
 800f482:	3708      	adds	r7, #8
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <McpsConfirm>:
/**@brief MCPS-Confirm event function
 *
 * @param mcpsConfirm Pointer to the confirm structure, containing confirm attributes.
 */
static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
	bool statusOk = (mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	785b      	ldrb	r3, [r3, #1]
 800f494:	2b00      	cmp	r3, #0
 800f496:	bf0c      	ite	eq
 800f498:	2301      	moveq	r3, #1
 800f49a:	2300      	movne	r3, #0
 800f49c:	73fb      	strb	r3, [r7, #15]

	LoRaMacState &= ~LORAMAC_TX_RUNNING;
 800f49e:	4b1d      	ldr	r3, [pc, #116]	@ (800f514 <McpsConfirm+0x8c>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f023 0301 	bic.w	r3, r3, #1
 800f4a6:	4a1b      	ldr	r2, [pc, #108]	@ (800f514 <McpsConfirm+0x8c>)
 800f4a8:	6013      	str	r3, [r2, #0]
	switch (mcpsConfirm->McpsRequest)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	2b03      	cmp	r3, #3
 800f4b0:	d025      	beq.n	800f4fe <McpsConfirm+0x76>
 800f4b2:	2b03      	cmp	r3, #3
 800f4b4:	dc25      	bgt.n	800f502 <McpsConfirm+0x7a>
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d002      	beq.n	800f4c0 <McpsConfirm+0x38>
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d00a      	beq.n	800f4d4 <McpsConfirm+0x4c>
	{
		break;
	}

	default:
		break;
 800f4be:	e020      	b.n	800f502 <McpsConfirm+0x7a>
		if (m_callbacks->lmh_unconf_finished != 0)
 800f4c0:	4b15      	ldr	r3, [pc, #84]	@ (800f518 <McpsConfirm+0x90>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	69db      	ldr	r3, [r3, #28]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d01d      	beq.n	800f506 <McpsConfirm+0x7e>
			m_callbacks->lmh_unconf_finished();
 800f4ca:	4b13      	ldr	r3, [pc, #76]	@ (800f518 <McpsConfirm+0x90>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	69db      	ldr	r3, [r3, #28]
 800f4d0:	4798      	blx	r3
		break;
 800f4d2:	e018      	b.n	800f506 <McpsConfirm+0x7e>
		if (m_callbacks->lmh_conf_result != 0)
 800f4d4:	4b10      	ldr	r3, [pc, #64]	@ (800f518 <McpsConfirm+0x90>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d015      	beq.n	800f50a <McpsConfirm+0x82>
			m_callbacks->lmh_conf_result(mcpsConfirm->AckReceived);
 800f4de:	4b0e      	ldr	r3, [pc, #56]	@ (800f518 <McpsConfirm+0x90>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	6a1b      	ldr	r3, [r3, #32]
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	7912      	ldrb	r2, [r2, #4]
 800f4e8:	4610      	mov	r0, r2
 800f4ea:	4798      	blx	r3
			int8_t preserve_dr = LoRaMacParams.ChannelsDatarate;
 800f4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800f51c <McpsConfirm+0x94>)
 800f4ee:	785b      	ldrb	r3, [r3, #1]
 800f4f0:	73bb      	strb	r3, [r7, #14]
			lmh_reset_mac();
 800f4f2:	f000 fe41 	bl	8010178 <lmh_reset_mac>
			LoRaMacParams.ChannelsDatarate = preserve_dr;
 800f4f6:	4a09      	ldr	r2, [pc, #36]	@ (800f51c <McpsConfirm+0x94>)
 800f4f8:	7bbb      	ldrb	r3, [r7, #14]
 800f4fa:	7053      	strb	r3, [r2, #1]
		break;
 800f4fc:	e005      	b.n	800f50a <McpsConfirm+0x82>
		break;
 800f4fe:	bf00      	nop
 800f500:	e004      	b.n	800f50c <McpsConfirm+0x84>
		break;
 800f502:	bf00      	nop
 800f504:	e002      	b.n	800f50c <McpsConfirm+0x84>
		break;
 800f506:	bf00      	nop
 800f508:	e000      	b.n	800f50c <McpsConfirm+0x84>
		break;
 800f50a:	bf00      	nop
	}
}
 800f50c:	bf00      	nop
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	20006908 	.word	0x20006908
 800f518:	20006d10 	.word	0x20006d10
 800f51c:	20006870 	.word	0x20006870

0800f520 <McpsIndication>:
/**@brief MCPS-Indication event function
 *
 * @param mcpsIndication	Pointer to the indication structure, containing indication attributes.
 */
static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	b0a9      	sub	sp, #164	@ 0xa4
 800f524:	af04      	add	r7, sp, #16
 800f526:	6078      	str	r0, [r7, #4]
	lmh_app_data_t app_data;

	if (mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	785b      	ldrb	r3, [r3, #1]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f040 81ce 	bne.w	800f8ce <McpsIndication+0x3ae>
	{
		return;
	}

	switch (mcpsIndication->McpsIndication)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	2b03      	cmp	r3, #3
 800f538:	d80a      	bhi.n	800f550 <McpsIndication+0x30>
 800f53a:	a201      	add	r2, pc, #4	@ (adr r2, 800f540 <McpsIndication+0x20>)
 800f53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f540:	0800f551 	.word	0x0800f551
 800f544:	0800f551 	.word	0x0800f551
 800f548:	0800f551 	.word	0x0800f551
 800f54c:	0800f551 	.word	0x0800f551
	{
		break;
	}

	default:
		break;
 800f550:	bf00      	nop
	// Check Buffer
	// Check BufferSize
	// Check Rssi
	// Check Snr
	// Check RxSlot
	if (m_compliance_test.running == true)
 800f552:	4ba5      	ldr	r3, [pc, #660]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d007      	beq.n	800f56a <McpsIndication+0x4a>
	{
		m_compliance_test.downlink_counter++;
 800f55a:	4ba3      	ldr	r3, [pc, #652]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f55c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f560:	3301      	adds	r3, #1
 800f562:	b29a      	uxth	r2, r3
 800f564:	4ba0      	ldr	r3, [pc, #640]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f566:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	}

	if (mcpsIndication->RxData == true)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	7b5b      	ldrb	r3, [r3, #13]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f000 81b0 	beq.w	800f8d4 <McpsIndication+0x3b4>
	{
		switch (mcpsIndication->Port)
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	78db      	ldrb	r3, [r3, #3]
 800f578:	2be0      	cmp	r3, #224	@ 0xe0
 800f57a:	f040 8184 	bne.w	800f886 <McpsIndication+0x366>
		{
		case LORAWAN_CERTIF_PORT:
			// Compliance not started yet, start it
			if (m_compliance_test.running == false)
 800f57e:	4b9a      	ldr	r3, [pc, #616]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	f083 0301 	eor.w	r3, r3, #1
 800f586:	b2db      	uxtb	r3, r3
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d06c      	beq.n	800f666 <McpsIndication+0x146>
			{
				// Check compliance test enable command (i)
				if ((mcpsIndication->BufferSize == 4) &&
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	7b1b      	ldrb	r3, [r3, #12]
 800f590:	2b04      	cmp	r3, #4
 800f592:	f040 816d 	bne.w	800f870 <McpsIndication+0x350>
					(mcpsIndication->Buffer[0] == 0x01) &&
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	689b      	ldr	r3, [r3, #8]
 800f59a:	781b      	ldrb	r3, [r3, #0]
				if ((mcpsIndication->BufferSize == 4) &&
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	f040 8167 	bne.w	800f870 <McpsIndication+0x350>
					(mcpsIndication->Buffer[1] == 0x01) &&
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	781b      	ldrb	r3, [r3, #0]
					(mcpsIndication->Buffer[0] == 0x01) &&
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	f040 8160 	bne.w	800f870 <McpsIndication+0x350>
					(mcpsIndication->Buffer[2] == 0x01) &&
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	3302      	adds	r3, #2
 800f5b6:	781b      	ldrb	r3, [r3, #0]
					(mcpsIndication->Buffer[1] == 0x01) &&
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	f040 8159 	bne.w	800f870 <McpsIndication+0x350>
					(mcpsIndication->Buffer[3] == 0x01))
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	3303      	adds	r3, #3
 800f5c4:	781b      	ldrb	r3, [r3, #0]
					(mcpsIndication->Buffer[2] == 0x01) &&
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	f040 8152 	bne.w	800f870 <McpsIndication+0x350>
				{
					m_compliance_test.is_tx_confirmed = LMH_UNCONFIRMED_MSG;
 800f5cc:	4b86      	ldr	r3, [pc, #536]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	709a      	strb	r2, [r3, #2]
					m_compliance_test.data_buffer_size = 2;
 800f5d2:	4b85      	ldr	r3, [pc, #532]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f5d4:	2202      	movs	r2, #2
 800f5d6:	711a      	strb	r2, [r3, #4]
					m_compliance_test.downlink_counter = 0;
 800f5d8:	4b83      	ldr	r3, [pc, #524]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
					m_compliance_test.link_check = false;
 800f5e0:	4b81      	ldr	r3, [pc, #516]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
					m_compliance_test.demod_margin = 0;
 800f5e8:	4b7f      	ldr	r3, [pc, #508]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
					m_compliance_test.nb_gateways = 0;
 800f5f0:	4b7d      	ldr	r3, [pc, #500]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
					m_compliance_test.running = true;
 800f5f8:	4b7b      	ldr	r3, [pc, #492]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	701a      	strb	r2, [r3, #0]
					m_compliance_test.state = 1;
 800f5fe:	4b7a      	ldr	r3, [pc, #488]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f600:	2201      	movs	r2, #1
 800f602:	705a      	strb	r2, [r3, #1]

					MibRequestConfirm_t mibReq;
					mibReq.Type = MIB_ADR;
 800f604:	2302      	movs	r3, #2
 800f606:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
					LoRaMacMibGetRequestConfirm(&mibReq);
 800f60a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fe fe06 	bl	800e220 <LoRaMacMibGetRequestConfirm>
					m_adr_enable_init = mibReq.Param.AdrEnable;
 800f614:	f897 2078 	ldrb.w	r2, [r7, #120]	@ 0x78
 800f618:	4b74      	ldr	r3, [pc, #464]	@ (800f7ec <McpsIndication+0x2cc>)
 800f61a:	701a      	strb	r2, [r3, #0]

					mibReq.Type = MIB_ADR;
 800f61c:	2302      	movs	r3, #2
 800f61e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
					mibReq.Param.AdrEnable = true;
 800f622:	2301      	movs	r3, #1
 800f624:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
					LoRaMacMibSetRequestConfirm(&mibReq);
 800f628:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fe ff2f 	bl	800e490 <LoRaMacMibSetRequestConfirm>

					LoRaMacTestSetDutyCycleOn(false);
 800f632:	2000      	movs	r0, #0
 800f634:	f7ff fb54 	bl	800ece0 <LoRaMacTestSetDutyCycleOn>

					TimerInit(&ComplianceTestTxNextPacketTimer, OnComplianceTestTxNextPacketTimerEvent);
 800f638:	2300      	movs	r3, #0
 800f63a:	9302      	str	r3, [sp, #8]
 800f63c:	4b6c      	ldr	r3, [pc, #432]	@ (800f7f0 <McpsIndication+0x2d0>)
 800f63e:	9301      	str	r3, [sp, #4]
 800f640:	2300      	movs	r3, #0
 800f642:	9300      	str	r3, [sp, #0]
 800f644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f648:	f04f 0300 	mov.w	r3, #0
 800f64c:	4869      	ldr	r0, [pc, #420]	@ (800f7f4 <McpsIndication+0x2d4>)
 800f64e:	f011 fbb9 	bl	8020dc4 <util_timer_create>
					TimerSetValue(&ComplianceTestTxNextPacketTimer, 5000);
 800f652:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f656:	f04f 0300 	mov.w	r3, #0
 800f65a:	4866      	ldr	r0, [pc, #408]	@ (800f7f4 <McpsIndication+0x2d4>)
 800f65c:	f011 fccc 	bl	8020ff8 <util_timer_set_period>

					// confirm test mode activation
					compliance_test_tx();
 800f660:	f7ff fe80 	bl	800f364 <compliance_test_tx>
 800f664:	e104      	b.n	800f870 <McpsIndication+0x350>
				}
			}
			// Compliance is started, check which stage we are at and take action
			else
			{
				m_compliance_test.state = mcpsIndication->Buffer[0];
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	689b      	ldr	r3, [r3, #8]
 800f66a:	781a      	ldrb	r2, [r3, #0]
 800f66c:	4b5e      	ldr	r3, [pc, #376]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f66e:	705a      	strb	r2, [r3, #1]
				switch (m_compliance_test.state)
 800f670:	4b5d      	ldr	r3, [pc, #372]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f672:	785b      	ldrb	r3, [r3, #1]
 800f674:	2b07      	cmp	r3, #7
 800f676:	f200 80fa 	bhi.w	800f86e <McpsIndication+0x34e>
 800f67a:	a201      	add	r2, pc, #4	@ (adr r2, 800f680 <McpsIndication+0x160>)
 800f67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f680:	0800f6a1 	.word	0x0800f6a1
 800f684:	0800f6d3 	.word	0x0800f6d3
 800f688:	0800f6db 	.word	0x0800f6db
 800f68c:	0800f6e9 	.word	0x0800f6e9
 800f690:	0800f6f7 	.word	0x0800f6f7
 800f694:	0800f749 	.word	0x0800f749
 800f698:	0800f75b 	.word	0x0800f75b
 800f69c:	0800f7af 	.word	0x0800f7af
				{
				case 0: // Check compliance test disable command (ii)
				{
					m_compliance_test.downlink_counter = 0;
 800f6a0:	4b51      	ldr	r3, [pc, #324]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
					m_compliance_test.running = false;
 800f6a8:	4b4f      	ldr	r3, [pc, #316]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	701a      	strb	r2, [r3, #0]

					MibRequestConfirm_t mibReq;
					mibReq.Type = MIB_ADR;
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
					mibReq.Param.AdrEnable = m_adr_enable_init;
 800f6b4:	4b4d      	ldr	r3, [pc, #308]	@ (800f7ec <McpsIndication+0x2cc>)
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
					LoRaMacMibSetRequestConfirm(&mibReq);
 800f6bc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fe fee5 	bl	800e490 <LoRaMacMibSetRequestConfirm>

					LoRaMacTestSetDutyCycleOn(_dutyCycleEnabled);
 800f6c6:	4b4c      	ldr	r3, [pc, #304]	@ (800f7f8 <McpsIndication+0x2d8>)
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7ff fb08 	bl	800ece0 <LoRaMacTestSetDutyCycleOn>

					break;
 800f6d0:	e0ce      	b.n	800f870 <McpsIndication+0x350>
				}

				case 1: // (iii, iv)
				{
					m_compliance_test.data_buffer_size = 2;
 800f6d2:	4b45      	ldr	r3, [pc, #276]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6d4:	2202      	movs	r2, #2
 800f6d6:	711a      	strb	r2, [r3, #4]
					break;
 800f6d8:	e0ca      	b.n	800f870 <McpsIndication+0x350>
				}

				case 2: // Enable confirmed messages (v)
				{
					m_compliance_test.is_tx_confirmed = LMH_CONFIRMED_MSG;
 800f6da:	4b43      	ldr	r3, [pc, #268]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6dc:	2201      	movs	r2, #1
 800f6de:	709a      	strb	r2, [r3, #2]
					m_compliance_test.state = 1;
 800f6e0:	4b41      	ldr	r3, [pc, #260]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	705a      	strb	r2, [r3, #1]
					break;
 800f6e6:	e0c3      	b.n	800f870 <McpsIndication+0x350>
				}

				case 3: // Disable confirmed messages (vi)
				{
					m_compliance_test.is_tx_confirmed = LMH_UNCONFIRMED_MSG;
 800f6e8:	4b3f      	ldr	r3, [pc, #252]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	709a      	strb	r2, [r3, #2]
					m_compliance_test.state = 1;
 800f6ee:	4b3e      	ldr	r3, [pc, #248]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	705a      	strb	r2, [r3, #1]
					break;
 800f6f4:	e0bc      	b.n	800f870 <McpsIndication+0x350>
				}

				case 4: // (vii)
				{
					m_compliance_test.data_buffer_size = mcpsIndication->BufferSize;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	7b1a      	ldrb	r2, [r3, #12]
 800f6fa:	4b3b      	ldr	r3, [pc, #236]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f6fc:	711a      	strb	r2, [r3, #4]
					m_compliance_test.data_buffer[0] = 4;
 800f6fe:	4b3a      	ldr	r3, [pc, #232]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f700:	2204      	movs	r2, #4
 800f702:	715a      	strb	r2, [r3, #5]
					for (uint8_t i = 1; i < T_MIN(m_compliance_test.data_buffer_size, LORAWAN_APP_DATA_MAX_SIZE); i++)
 800f704:	2301      	movs	r3, #1
 800f706:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800f70a:	e012      	b.n	800f732 <McpsIndication+0x212>
					{
						m_compliance_test.data_buffer[i] = mcpsIndication->Buffer[i] + 1;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	689a      	ldr	r2, [r3, #8]
 800f710:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f714:	4413      	add	r3, r2
 800f716:	781a      	ldrb	r2, [r3, #0]
 800f718:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f71c:	3201      	adds	r2, #1
 800f71e:	b2d1      	uxtb	r1, r2
 800f720:	4a31      	ldr	r2, [pc, #196]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f722:	4413      	add	r3, r2
 800f724:	460a      	mov	r2, r1
 800f726:	715a      	strb	r2, [r3, #5]
					for (uint8_t i = 1; i < T_MIN(m_compliance_test.data_buffer_size, LORAWAN_APP_DATA_MAX_SIZE); i++)
 800f728:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800f72c:	3301      	adds	r3, #1
 800f72e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800f732:	4b2d      	ldr	r3, [pc, #180]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f734:	791b      	ldrb	r3, [r3, #4]
 800f736:	2bf2      	cmp	r3, #242	@ 0xf2
 800f738:	bf28      	it	cs
 800f73a:	23f2      	movcs	r3, #242	@ 0xf2
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800f742:	429a      	cmp	r2, r3
 800f744:	d3e2      	bcc.n	800f70c <McpsIndication+0x1ec>
					}
					break;
 800f746:	e093      	b.n	800f870 <McpsIndication+0x350>
				}

				case 5: // (viii)
				{
					MlmeReq_t mlmeReq;
					mlmeReq.Type = MLME_LINK_CHECK;
 800f748:	2301      	movs	r3, #1
 800f74a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
					LoRaMacMlmeRequest(&mlmeReq);
 800f74e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f752:	4618      	mov	r0, r3
 800f754:	f7ff f8f2 	bl	800e93c <LoRaMacMlmeRequest>
					break;
 800f758:	e08a      	b.n	800f870 <McpsIndication+0x350>
				case 6: // (ix)
				{
					MlmeReq_t mlmeReq;

					// Disable TestMode and revert back to normal operation
					m_compliance_test.is_tx_confirmed = LORAWAN_CONFIRMED_MSG_ON;
 800f75a:	4b23      	ldr	r3, [pc, #140]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f75c:	2200      	movs	r2, #0
 800f75e:	709a      	strb	r2, [r3, #2]
					m_compliance_test.downlink_counter = 0;
 800f760:	4b21      	ldr	r3, [pc, #132]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f762:	2200      	movs	r2, #0
 800f764:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
					m_compliance_test.running = false;
 800f768:	4b1f      	ldr	r3, [pc, #124]	@ (800f7e8 <McpsIndication+0x2c8>)
 800f76a:	2200      	movs	r2, #0
 800f76c:	701a      	strb	r2, [r3, #0]

					MibRequestConfirm_t mibReq;
					mibReq.Type = MIB_ADR;
 800f76e:	2302      	movs	r3, #2
 800f770:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
					mibReq.Param.AdrEnable = m_adr_enable_init;
 800f774:	4b1d      	ldr	r3, [pc, #116]	@ (800f7ec <McpsIndication+0x2cc>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
					LoRaMacMibSetRequestConfirm(&mibReq);
 800f77c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f780:	4618      	mov	r0, r3
 800f782:	f7fe fe85 	bl	800e490 <LoRaMacMibSetRequestConfirm>

					LoRaMacTestSetDutyCycleOn(_dutyCycleEnabled);
 800f786:	4b1c      	ldr	r3, [pc, #112]	@ (800f7f8 <McpsIndication+0x2d8>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7ff faa8 	bl	800ece0 <LoRaMacTestSetDutyCycleOn>

					mlmeReq.Type = MLME_JOIN;
 800f790:	2300      	movs	r3, #0
 800f792:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
					mlmeReq.Req.Join = JoinParameters;
 800f796:	4b19      	ldr	r3, [pc, #100]	@ (800f7fc <McpsIndication+0x2dc>)
 800f798:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800f79c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f79e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					LoRaMacMlmeRequest(&mlmeReq);
 800f7a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7ff f8c8 	bl	800e93c <LoRaMacMlmeRequest>
					break;
 800f7ac:	e060      	b.n	800f870 <McpsIndication+0x350>
				}

				case 7: // (x)
				{
					if (mcpsIndication->BufferSize == 3)
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	7b1b      	ldrb	r3, [r3, #12]
 800f7b2:	2b03      	cmp	r3, #3
 800f7b4:	d124      	bne.n	800f800 <McpsIndication+0x2e0>
					{
						MlmeReq_t mlmeReq;
						mlmeReq.Type = MLME_TXCW;
 800f7b6:	2302      	movs	r3, #2
 800f7b8:	f887 3020 	strb.w	r3, [r7, #32]
						mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	021b      	lsls	r3, r3, #8
 800f7c6:	b21a      	sxth	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	689b      	ldr	r3, [r3, #8]
 800f7cc:	3302      	adds	r3, #2
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	b21b      	sxth	r3, r3
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	b21b      	sxth	r3, r3
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
						LoRaMacMlmeRequest(&mlmeReq);
 800f7da:	f107 0320 	add.w	r3, r7, #32
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7ff f8ac 	bl	800e93c <LoRaMacMlmeRequest>
 800f7e4:	e03f      	b.n	800f866 <McpsIndication+0x346>
 800f7e6:	bf00      	nop
 800f7e8:	20006d14 	.word	0x20006d14
 800f7ec:	20006d60 	.word	0x20006d60
 800f7f0:	0800f475 	.word	0x0800f475
 800f7f4:	20006d68 	.word	0x20006d68
 800f7f8:	20006cc2 	.word	0x20006cc2
 800f7fc:	20006cd4 	.word	0x20006cd4
					}
					else if (mcpsIndication->BufferSize == 7)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	7b1b      	ldrb	r3, [r3, #12]
 800f804:	2b07      	cmp	r3, #7
 800f806:	d12e      	bne.n	800f866 <McpsIndication+0x346>
					{
						MlmeReq_t mlmeReq;
						mlmeReq.Type = MLME_TXCW_1;
 800f808:	2303      	movs	r3, #3
 800f80a:	733b      	strb	r3, [r7, #12]
						mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	3301      	adds	r3, #1
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	021b      	lsls	r3, r3, #8
 800f816:	b21a      	sxth	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	3302      	adds	r3, #2
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	b21b      	sxth	r3, r3
 800f822:	4313      	orrs	r3, r2
 800f824:	b21b      	sxth	r3, r3
 800f826:	b29b      	uxth	r3, r3
 800f828:	823b      	strh	r3, [r7, #16]
						mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	3303      	adds	r3, #3
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	041a      	lsls	r2, r3, #16
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	3304      	adds	r3, #4
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	021b      	lsls	r3, r3, #8
 800f83e:	4313      	orrs	r3, r2
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	6892      	ldr	r2, [r2, #8]
 800f844:	3205      	adds	r2, #5
 800f846:	7812      	ldrb	r2, [r2, #0]
 800f848:	4313      	orrs	r3, r2
 800f84a:	461a      	mov	r2, r3
 800f84c:	2364      	movs	r3, #100	@ 0x64
 800f84e:	fb02 f303 	mul.w	r3, r2, r3
 800f852:	617b      	str	r3, [r7, #20]
						mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	799b      	ldrb	r3, [r3, #6]
 800f85a:	763b      	strb	r3, [r7, #24]
						LoRaMacMlmeRequest(&mlmeReq);
 800f85c:	f107 030c 	add.w	r3, r7, #12
 800f860:	4618      	mov	r0, r3
 800f862:	f7ff f86b 	bl	800e93c <LoRaMacMlmeRequest>
					}
					m_compliance_test.state = 1;
 800f866:	4b1d      	ldr	r3, [pc, #116]	@ (800f8dc <McpsIndication+0x3bc>)
 800f868:	2201      	movs	r2, #1
 800f86a:	705a      	strb	r2, [r3, #1]
					break;
 800f86c:	e000      	b.n	800f870 <McpsIndication+0x350>
				}

				default:
					break;
 800f86e:	bf00      	nop
				}
			}

			if (m_compliance_test.running == false)
 800f870:	4b1a      	ldr	r3, [pc, #104]	@ (800f8dc <McpsIndication+0x3bc>)
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	f083 0301 	eor.w	r3, r3, #1
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d029      	beq.n	800f8d2 <McpsIndication+0x3b2>
			{
				// cerification test stops
				TimerStop(&ComplianceTestTxNextPacketTimer);
 800f87e:	4818      	ldr	r0, [pc, #96]	@ (800f8e0 <McpsIndication+0x3c0>)
 800f880:	f011 fb52 	bl	8020f28 <util_timer_stop>
			}
			break;
 800f884:	e025      	b.n	800f8d2 <McpsIndication+0x3b2>

		default:
			app_data.port = mcpsIndication->Port;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	78db      	ldrb	r3, [r3, #3]
 800f88a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
			app_data.buffsize = mcpsIndication->BufferSize;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	7b1b      	ldrb	r3, [r3, #12]
 800f892:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			mcpsIndication->Buffer[app_data.buffsize] = 0;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	f897 2084 	ldrb.w	r2, [r7, #132]	@ 0x84
 800f89e:	4413      	add	r3, r2
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	701a      	strb	r2, [r3, #0]
			app_data.buffer = mcpsIndication->Buffer;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			app_data.rssi = mcpsIndication->Rssi;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f8b2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
			app_data.snr = mcpsIndication->Snr;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	7c1b      	ldrb	r3, [r3, #16]
 800f8ba:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
			m_callbacks->lmh_RxData(&app_data);
 800f8be:	4b09      	ldr	r3, [pc, #36]	@ (800f8e4 <McpsIndication+0x3c4>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	4798      	blx	r3
			break;
 800f8cc:	e002      	b.n	800f8d4 <McpsIndication+0x3b4>
		return;
 800f8ce:	bf00      	nop
 800f8d0:	e000      	b.n	800f8d4 <McpsIndication+0x3b4>
			break;
 800f8d2:	bf00      	nop
		}
	}
}
 800f8d4:	3794      	adds	r7, #148	@ 0x94
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd90      	pop	{r4, r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20006d14 	.word	0x20006d14
 800f8e0:	20006d68 	.word	0x20006d68
 800f8e4:	20006d10 	.word	0x20006d10

0800f8e8 <MlmeConfirm>:
/**@brief MLME-Confirm event function
 *
 * @param mlmeConfirm	Pointer to the confirm structure, containing confirm attributes.
 */
static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
	switch (mlmeConfirm->MlmeRequest)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <MlmeConfirm+0x16>
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d01a      	beq.n	800f932 <MlmeConfirm+0x4a>
		}
		break;
	}

	default:
		break;
 800f8fc:	e033      	b.n	800f966 <MlmeConfirm+0x7e>
		if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	785b      	ldrb	r3, [r3, #1]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d109      	bne.n	800f91a <MlmeConfirm+0x32>
			if (m_callbacks->lmh_has_joined != NULL)
 800f906:	4b1a      	ldr	r3, [pc, #104]	@ (800f970 <MlmeConfirm+0x88>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	691b      	ldr	r3, [r3, #16]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d027      	beq.n	800f960 <MlmeConfirm+0x78>
				m_callbacks->lmh_has_joined();
 800f910:	4b17      	ldr	r3, [pc, #92]	@ (800f970 <MlmeConfirm+0x88>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	691b      	ldr	r3, [r3, #16]
 800f916:	4798      	blx	r3
		break;
 800f918:	e022      	b.n	800f960 <MlmeConfirm+0x78>
			if (m_callbacks->lmh_has_joined_failed != NULL)
 800f91a:	4b15      	ldr	r3, [pc, #84]	@ (800f970 <MlmeConfirm+0x88>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	699b      	ldr	r3, [r3, #24]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d01d      	beq.n	800f960 <MlmeConfirm+0x78>
				m_callbacks->lmh_has_joined_failed();
 800f924:	4b12      	ldr	r3, [pc, #72]	@ (800f970 <MlmeConfirm+0x88>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	699b      	ldr	r3, [r3, #24]
 800f92a:	4798      	blx	r3
				lmh_reset_mac();
 800f92c:	f000 fc24 	bl	8010178 <lmh_reset_mac>
		break;
 800f930:	e016      	b.n	800f960 <MlmeConfirm+0x78>
		if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	785b      	ldrb	r3, [r3, #1]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d114      	bne.n	800f964 <MlmeConfirm+0x7c>
			if (m_compliance_test.running == true)
 800f93a:	4b0e      	ldr	r3, [pc, #56]	@ (800f974 <MlmeConfirm+0x8c>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d010      	beq.n	800f964 <MlmeConfirm+0x7c>
				m_compliance_test.link_check = true;
 800f942:	4b0c      	ldr	r3, [pc, #48]	@ (800f974 <MlmeConfirm+0x8c>)
 800f944:	2201      	movs	r2, #1
 800f946:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
				m_compliance_test.demod_margin = mlmeConfirm->DemodMargin;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	7c1a      	ldrb	r2, [r3, #16]
 800f94e:	4b09      	ldr	r3, [pc, #36]	@ (800f974 <MlmeConfirm+0x8c>)
 800f950:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
				m_compliance_test.nb_gateways = mlmeConfirm->NbGateways;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	7c5a      	ldrb	r2, [r3, #17]
 800f958:	4b06      	ldr	r3, [pc, #24]	@ (800f974 <MlmeConfirm+0x8c>)
 800f95a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
		break;
 800f95e:	e001      	b.n	800f964 <MlmeConfirm+0x7c>
		break;
 800f960:	bf00      	nop
 800f962:	e000      	b.n	800f966 <MlmeConfirm+0x7e>
		break;
 800f964:	bf00      	nop
	}
}
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	20006d10 	.word	0x20006d10
 800f974:	20006d14 	.word	0x20006d14

0800f978 <lmh_init>:

lmh_error_status lmh_init(lmh_callback_t *callbacks, lmh_param_t lora_param, bool otaa,
		DeviceClass_t nodeClass, LoRaMacRegion_t user_region, bool region_change)
{
 800f978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97a:	b0cd      	sub	sp, #308	@ 0x134
 800f97c:	af0e      	add	r7, sp, #56	@ 0x38
 800f97e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800f980:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f984:	e880 0006 	stmia.w	r0, {r1, r2}
 800f988:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	region = (LoRaMacRegion_t)user_region;
 800f98c:	4a5a      	ldr	r2, [pc, #360]	@ (800faf8 <lmh_init+0x180>)
 800f98e:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 800f992:	7013      	strb	r3, [r2, #0]
	char strlog1[64];
	char strlog2[64];
	char strlog3[64];

	LoRaMacStatus_t error_status;
	m_param = lora_param;
 800f994:	4b59      	ldr	r3, [pc, #356]	@ (800fafc <lmh_init+0x184>)
 800f996:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f99a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f99e:	6018      	str	r0, [r3, #0]
 800f9a0:	3304      	adds	r3, #4
 800f9a2:	8019      	strh	r1, [r3, #0]
	m_callbacks = callbacks;
 800f9a4:	4a56      	ldr	r2, [pc, #344]	@ (800fb00 <lmh_init+0x188>)
 800f9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a8:	6013      	str	r3, [r2, #0]

	_otaa = otaa;
 800f9aa:	4a56      	ldr	r2, [pc, #344]	@ (800fb04 <lmh_init+0x18c>)
 800f9ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f9b0:	7013      	strb	r3, [r2, #0]

	_dutyCycleEnabled = m_param.duty_cycle;
 800f9b2:	4b52      	ldr	r3, [pc, #328]	@ (800fafc <lmh_init+0x184>)
 800f9b4:	795a      	ldrb	r2, [r3, #5]
 800f9b6:	4b54      	ldr	r3, [pc, #336]	@ (800fb08 <lmh_init+0x190>)
 800f9b8:	701a      	strb	r2, [r3, #0]

	PublicNetwork = m_param.enable_public_network;
 800f9ba:	4b50      	ldr	r3, [pc, #320]	@ (800fafc <lmh_init+0x184>)
 800f9bc:	789a      	ldrb	r2, [r3, #2]
 800f9be:	4b53      	ldr	r3, [pc, #332]	@ (800fb0c <lmh_init+0x194>)
 800f9c0:	701a      	strb	r2, [r3, #0]

#if (STATIC_DEVICE_EUI != 1)
	m_callbacks->BoardGetUniqueId(DevEui);
#endif

	if (_otaa)
 800f9c2:	4b50      	ldr	r3, [pc, #320]	@ (800fb04 <lmh_init+0x18c>)
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f000 80ae 	beq.w	800fb28 <lmh_init+0x1b0>
	{
		sprintf(strlog2, "AppEui=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", AppEui[0], AppEui[1], AppEui[2], AppEui[3], AppEui[4], AppEui[5], AppEui[6], AppEui[7]);
 800f9cc:	4b50      	ldr	r3, [pc, #320]	@ (800fb10 <lmh_init+0x198>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	469c      	mov	ip, r3
 800f9d2:	4b4f      	ldr	r3, [pc, #316]	@ (800fb10 <lmh_init+0x198>)
 800f9d4:	785b      	ldrb	r3, [r3, #1]
 800f9d6:	469e      	mov	lr, r3
 800f9d8:	4b4d      	ldr	r3, [pc, #308]	@ (800fb10 <lmh_init+0x198>)
 800f9da:	789b      	ldrb	r3, [r3, #2]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	4b4c      	ldr	r3, [pc, #304]	@ (800fb10 <lmh_init+0x198>)
 800f9e0:	78db      	ldrb	r3, [r3, #3]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	4b4a      	ldr	r3, [pc, #296]	@ (800fb10 <lmh_init+0x198>)
 800f9e6:	791b      	ldrb	r3, [r3, #4]
 800f9e8:	461c      	mov	r4, r3
 800f9ea:	4b49      	ldr	r3, [pc, #292]	@ (800fb10 <lmh_init+0x198>)
 800f9ec:	795b      	ldrb	r3, [r3, #5]
 800f9ee:	461d      	mov	r5, r3
 800f9f0:	4b47      	ldr	r3, [pc, #284]	@ (800fb10 <lmh_init+0x198>)
 800f9f2:	799b      	ldrb	r3, [r3, #6]
 800f9f4:	461e      	mov	r6, r3
 800f9f6:	4b46      	ldr	r3, [pc, #280]	@ (800fb10 <lmh_init+0x198>)
 800f9f8:	79db      	ldrb	r3, [r3, #7]
 800f9fa:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800f9fe:	9305      	str	r3, [sp, #20]
 800fa00:	9604      	str	r6, [sp, #16]
 800fa02:	9503      	str	r5, [sp, #12]
 800fa04:	9402      	str	r4, [sp, #8]
 800fa06:	9101      	str	r1, [sp, #4]
 800fa08:	9200      	str	r2, [sp, #0]
 800fa0a:	4673      	mov	r3, lr
 800fa0c:	4662      	mov	r2, ip
 800fa0e:	4941      	ldr	r1, [pc, #260]	@ (800fb14 <lmh_init+0x19c>)
 800fa10:	f012 fb72 	bl	80220f8 <siprintf>
		sprintf(strlog1, "DevEui=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", DevEui[0], DevEui[1], DevEui[2], DevEui[3], DevEui[4], DevEui[5], DevEui[6], DevEui[7]);
 800fa14:	4b40      	ldr	r3, [pc, #256]	@ (800fb18 <lmh_init+0x1a0>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	469c      	mov	ip, r3
 800fa1a:	4b3f      	ldr	r3, [pc, #252]	@ (800fb18 <lmh_init+0x1a0>)
 800fa1c:	785b      	ldrb	r3, [r3, #1]
 800fa1e:	469e      	mov	lr, r3
 800fa20:	4b3d      	ldr	r3, [pc, #244]	@ (800fb18 <lmh_init+0x1a0>)
 800fa22:	789b      	ldrb	r3, [r3, #2]
 800fa24:	461a      	mov	r2, r3
 800fa26:	4b3c      	ldr	r3, [pc, #240]	@ (800fb18 <lmh_init+0x1a0>)
 800fa28:	78db      	ldrb	r3, [r3, #3]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	4b3a      	ldr	r3, [pc, #232]	@ (800fb18 <lmh_init+0x1a0>)
 800fa2e:	791b      	ldrb	r3, [r3, #4]
 800fa30:	461c      	mov	r4, r3
 800fa32:	4b39      	ldr	r3, [pc, #228]	@ (800fb18 <lmh_init+0x1a0>)
 800fa34:	795b      	ldrb	r3, [r3, #5]
 800fa36:	461d      	mov	r5, r3
 800fa38:	4b37      	ldr	r3, [pc, #220]	@ (800fb18 <lmh_init+0x1a0>)
 800fa3a:	799b      	ldrb	r3, [r3, #6]
 800fa3c:	461e      	mov	r6, r3
 800fa3e:	4b36      	ldr	r3, [pc, #216]	@ (800fb18 <lmh_init+0x1a0>)
 800fa40:	79db      	ldrb	r3, [r3, #7]
 800fa42:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800fa46:	9305      	str	r3, [sp, #20]
 800fa48:	9604      	str	r6, [sp, #16]
 800fa4a:	9503      	str	r5, [sp, #12]
 800fa4c:	9402      	str	r4, [sp, #8]
 800fa4e:	9101      	str	r1, [sp, #4]
 800fa50:	9200      	str	r2, [sp, #0]
 800fa52:	4673      	mov	r3, lr
 800fa54:	4662      	mov	r2, ip
 800fa56:	4931      	ldr	r1, [pc, #196]	@ (800fb1c <lmh_init+0x1a4>)
 800fa58:	f012 fb4e 	bl	80220f8 <siprintf>
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa5c:	4b30      	ldr	r3, [pc, #192]	@ (800fb20 <lmh_init+0x1a8>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa60:	469c      	mov	ip, r3
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa62:	4b2f      	ldr	r3, [pc, #188]	@ (800fb20 <lmh_init+0x1a8>)
 800fa64:	785b      	ldrb	r3, [r3, #1]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa66:	469e      	mov	lr, r3
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa68:	4b2d      	ldr	r3, [pc, #180]	@ (800fb20 <lmh_init+0x1a8>)
 800fa6a:	789b      	ldrb	r3, [r3, #2]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa6c:	461c      	mov	r4, r3
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa6e:	4b2c      	ldr	r3, [pc, #176]	@ (800fb20 <lmh_init+0x1a8>)
 800fa70:	78db      	ldrb	r3, [r3, #3]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa72:	461d      	mov	r5, r3
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa74:	4b2a      	ldr	r3, [pc, #168]	@ (800fb20 <lmh_init+0x1a8>)
 800fa76:	791b      	ldrb	r3, [r3, #4]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa78:	461e      	mov	r6, r3
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa7a:	4b29      	ldr	r3, [pc, #164]	@ (800fb20 <lmh_init+0x1a8>)
 800fa7c:	795b      	ldrb	r3, [r3, #5]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa7e:	61fb      	str	r3, [r7, #28]
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa80:	4b27      	ldr	r3, [pc, #156]	@ (800fb20 <lmh_init+0x1a8>)
 800fa82:	799b      	ldrb	r3, [r3, #6]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa84:	61bb      	str	r3, [r7, #24]
				AppKey[0], AppKey[1], AppKey[2], AppKey[3], AppKey[4], AppKey[5], AppKey[6], AppKey[7],
 800fa86:	4b26      	ldr	r3, [pc, #152]	@ (800fb20 <lmh_init+0x1a8>)
 800fa88:	79db      	ldrb	r3, [r3, #7]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa8a:	617b      	str	r3, [r7, #20]
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800fa8c:	4b24      	ldr	r3, [pc, #144]	@ (800fb20 <lmh_init+0x1a8>)
 800fa8e:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa90:	613b      	str	r3, [r7, #16]
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800fa92:	4b23      	ldr	r3, [pc, #140]	@ (800fb20 <lmh_init+0x1a8>)
 800fa94:	7a5b      	ldrb	r3, [r3, #9]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa96:	60fb      	str	r3, [r7, #12]
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800fa98:	4b21      	ldr	r3, [pc, #132]	@ (800fb20 <lmh_init+0x1a8>)
 800fa9a:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fa9c:	60bb      	str	r3, [r7, #8]
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800fa9e:	4b20      	ldr	r3, [pc, #128]	@ (800fb20 <lmh_init+0x1a8>)
 800faa0:	7adb      	ldrb	r3, [r3, #11]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800faa2:	607b      	str	r3, [r7, #4]
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800faa4:	4b1e      	ldr	r3, [pc, #120]	@ (800fb20 <lmh_init+0x1a8>)
 800faa6:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800faa8:	603b      	str	r3, [r7, #0]
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800faaa:	4b1d      	ldr	r3, [pc, #116]	@ (800fb20 <lmh_init+0x1a8>)
 800faac:	7b5b      	ldrb	r3, [r3, #13]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800faae:	4619      	mov	r1, r3
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800fab0:	4b1b      	ldr	r3, [pc, #108]	@ (800fb20 <lmh_init+0x1a8>)
 800fab2:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fab4:	461a      	mov	r2, r3
				AppKey[8], AppKey[9], AppKey[10], AppKey[11], AppKey[12], AppKey[13], AppKey[14], AppKey[15]);
 800fab6:	4b1a      	ldr	r3, [pc, #104]	@ (800fb20 <lmh_init+0x1a8>)
 800fab8:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(strlog3, "AppKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800faba:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800fabe:	930d      	str	r3, [sp, #52]	@ 0x34
 800fac0:	920c      	str	r2, [sp, #48]	@ 0x30
 800fac2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fac4:	683a      	ldr	r2, [r7, #0]
 800fac6:	920a      	str	r2, [sp, #40]	@ 0x28
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	9209      	str	r2, [sp, #36]	@ 0x24
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	9208      	str	r2, [sp, #32]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	9207      	str	r2, [sp, #28]
 800fad4:	693a      	ldr	r2, [r7, #16]
 800fad6:	9206      	str	r2, [sp, #24]
 800fad8:	697a      	ldr	r2, [r7, #20]
 800fada:	9205      	str	r2, [sp, #20]
 800fadc:	69ba      	ldr	r2, [r7, #24]
 800fade:	9204      	str	r2, [sp, #16]
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	9303      	str	r3, [sp, #12]
 800fae4:	9602      	str	r6, [sp, #8]
 800fae6:	9501      	str	r5, [sp, #4]
 800fae8:	9400      	str	r4, [sp, #0]
 800faea:	4673      	mov	r3, lr
 800faec:	4662      	mov	r2, ip
 800faee:	490d      	ldr	r1, [pc, #52]	@ (800fb24 <lmh_init+0x1ac>)
 800faf0:	f012 fb02 	bl	80220f8 <siprintf>
 800faf4:	e0d4      	b.n	800fca0 <lmh_init+0x328>
 800faf6:	bf00      	nop
 800faf8:	20006cc0 	.word	0x20006cc0
 800fafc:	20006d08 	.word	0x20006d08
 800fb00:	20006d10 	.word	0x20006d10
 800fb04:	20006cc1 	.word	0x20006cc1
 800fb08:	20006cc2 	.word	0x20006cc2
 800fb0c:	20006551 	.word	0x20006551
 800fb10:	20006ccc 	.word	0x20006ccc
 800fb14:	0802496c 	.word	0x0802496c
 800fb18:	20006cc4 	.word	0x20006cc4
 800fb1c:	0802499c 	.word	0x0802499c
 800fb20:	20000094 	.word	0x20000094
 800fb24:	080249cc 	.word	0x080249cc
		// Random seed initialization
		srand1(m_callbacks->BoardGetRandomSeed());
		// Choose a random device address
		DevAddr = randr(0, 0x01FFFFFF);
#endif
		sprintf(strlog1, "DevEui=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", DevEui[0], DevEui[1], DevEui[2], DevEui[3], DevEui[4], DevEui[5], DevEui[6], DevEui[7]);
 800fb28:	4b6f      	ldr	r3, [pc, #444]	@ (800fce8 <lmh_init+0x370>)
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	469c      	mov	ip, r3
 800fb2e:	4b6e      	ldr	r3, [pc, #440]	@ (800fce8 <lmh_init+0x370>)
 800fb30:	785b      	ldrb	r3, [r3, #1]
 800fb32:	469e      	mov	lr, r3
 800fb34:	4b6c      	ldr	r3, [pc, #432]	@ (800fce8 <lmh_init+0x370>)
 800fb36:	789b      	ldrb	r3, [r3, #2]
 800fb38:	461a      	mov	r2, r3
 800fb3a:	4b6b      	ldr	r3, [pc, #428]	@ (800fce8 <lmh_init+0x370>)
 800fb3c:	78db      	ldrb	r3, [r3, #3]
 800fb3e:	4619      	mov	r1, r3
 800fb40:	4b69      	ldr	r3, [pc, #420]	@ (800fce8 <lmh_init+0x370>)
 800fb42:	791b      	ldrb	r3, [r3, #4]
 800fb44:	461c      	mov	r4, r3
 800fb46:	4b68      	ldr	r3, [pc, #416]	@ (800fce8 <lmh_init+0x370>)
 800fb48:	795b      	ldrb	r3, [r3, #5]
 800fb4a:	461d      	mov	r5, r3
 800fb4c:	4b66      	ldr	r3, [pc, #408]	@ (800fce8 <lmh_init+0x370>)
 800fb4e:	799b      	ldrb	r3, [r3, #6]
 800fb50:	461e      	mov	r6, r3
 800fb52:	4b65      	ldr	r3, [pc, #404]	@ (800fce8 <lmh_init+0x370>)
 800fb54:	79db      	ldrb	r3, [r3, #7]
 800fb56:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800fb5a:	9305      	str	r3, [sp, #20]
 800fb5c:	9604      	str	r6, [sp, #16]
 800fb5e:	9503      	str	r5, [sp, #12]
 800fb60:	9402      	str	r4, [sp, #8]
 800fb62:	9101      	str	r1, [sp, #4]
 800fb64:	9200      	str	r2, [sp, #0]
 800fb66:	4673      	mov	r3, lr
 800fb68:	4662      	mov	r2, ip
 800fb6a:	4960      	ldr	r1, [pc, #384]	@ (800fcec <lmh_init+0x374>)
 800fb6c:	f012 fac4 	bl	80220f8 <siprintf>
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb70:	4b5f      	ldr	r3, [pc, #380]	@ (800fcf0 <lmh_init+0x378>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb74:	469c      	mov	ip, r3
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb76:	4b5e      	ldr	r3, [pc, #376]	@ (800fcf0 <lmh_init+0x378>)
 800fb78:	785b      	ldrb	r3, [r3, #1]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb7a:	469e      	mov	lr, r3
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb7c:	4b5c      	ldr	r3, [pc, #368]	@ (800fcf0 <lmh_init+0x378>)
 800fb7e:	789b      	ldrb	r3, [r3, #2]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb80:	461c      	mov	r4, r3
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb82:	4b5b      	ldr	r3, [pc, #364]	@ (800fcf0 <lmh_init+0x378>)
 800fb84:	78db      	ldrb	r3, [r3, #3]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb86:	461d      	mov	r5, r3
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb88:	4b59      	ldr	r3, [pc, #356]	@ (800fcf0 <lmh_init+0x378>)
 800fb8a:	791b      	ldrb	r3, [r3, #4]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb8c:	461e      	mov	r6, r3
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb8e:	4b58      	ldr	r3, [pc, #352]	@ (800fcf0 <lmh_init+0x378>)
 800fb90:	795b      	ldrb	r3, [r3, #5]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb92:	61fb      	str	r3, [r7, #28]
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb94:	4b56      	ldr	r3, [pc, #344]	@ (800fcf0 <lmh_init+0x378>)
 800fb96:	799b      	ldrb	r3, [r3, #6]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb98:	61bb      	str	r3, [r7, #24]
				NwkSKey[0], NwkSKey[1], NwkSKey[2], NwkSKey[3], NwkSKey[4], NwkSKey[5], NwkSKey[6], NwkSKey[7],
 800fb9a:	4b55      	ldr	r3, [pc, #340]	@ (800fcf0 <lmh_init+0x378>)
 800fb9c:	79db      	ldrb	r3, [r3, #7]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fb9e:	617b      	str	r3, [r7, #20]
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fba0:	4b53      	ldr	r3, [pc, #332]	@ (800fcf0 <lmh_init+0x378>)
 800fba2:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fba4:	613b      	str	r3, [r7, #16]
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fba6:	4b52      	ldr	r3, [pc, #328]	@ (800fcf0 <lmh_init+0x378>)
 800fba8:	7a5b      	ldrb	r3, [r3, #9]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fbaa:	60fb      	str	r3, [r7, #12]
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fbac:	4b50      	ldr	r3, [pc, #320]	@ (800fcf0 <lmh_init+0x378>)
 800fbae:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fbb0:	60bb      	str	r3, [r7, #8]
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fbb2:	4b4f      	ldr	r3, [pc, #316]	@ (800fcf0 <lmh_init+0x378>)
 800fbb4:	7adb      	ldrb	r3, [r3, #11]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fbb6:	607b      	str	r3, [r7, #4]
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fbb8:	4b4d      	ldr	r3, [pc, #308]	@ (800fcf0 <lmh_init+0x378>)
 800fbba:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fbbc:	603b      	str	r3, [r7, #0]
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fbbe:	4b4c      	ldr	r3, [pc, #304]	@ (800fcf0 <lmh_init+0x378>)
 800fbc0:	7b5b      	ldrb	r3, [r3, #13]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fbc2:	4619      	mov	r1, r3
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fbc4:	4b4a      	ldr	r3, [pc, #296]	@ (800fcf0 <lmh_init+0x378>)
 800fbc6:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fbc8:	461a      	mov	r2, r3
				NwkSKey[8], NwkSKey[9], NwkSKey[10], NwkSKey[11], NwkSKey[12], NwkSKey[13], NwkSKey[14], NwkSKey[15]);
 800fbca:	4b49      	ldr	r3, [pc, #292]	@ (800fcf0 <lmh_init+0x378>)
 800fbcc:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(strlog2, "NwkSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fbce:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800fbd2:	930d      	str	r3, [sp, #52]	@ 0x34
 800fbd4:	920c      	str	r2, [sp, #48]	@ 0x30
 800fbd6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	920a      	str	r2, [sp, #40]	@ 0x28
 800fbdc:	687a      	ldr	r2, [r7, #4]
 800fbde:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbe0:	68ba      	ldr	r2, [r7, #8]
 800fbe2:	9208      	str	r2, [sp, #32]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	9207      	str	r2, [sp, #28]
 800fbe8:	693a      	ldr	r2, [r7, #16]
 800fbea:	9206      	str	r2, [sp, #24]
 800fbec:	697a      	ldr	r2, [r7, #20]
 800fbee:	9205      	str	r2, [sp, #20]
 800fbf0:	69ba      	ldr	r2, [r7, #24]
 800fbf2:	9204      	str	r2, [sp, #16]
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	9303      	str	r3, [sp, #12]
 800fbf8:	9602      	str	r6, [sp, #8]
 800fbfa:	9501      	str	r5, [sp, #4]
 800fbfc:	9400      	str	r4, [sp, #0]
 800fbfe:	4673      	mov	r3, lr
 800fc00:	4662      	mov	r2, ip
 800fc02:	493c      	ldr	r1, [pc, #240]	@ (800fcf4 <lmh_init+0x37c>)
 800fc04:	f012 fa78 	bl	80220f8 <siprintf>
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc08:	4b3b      	ldr	r3, [pc, #236]	@ (800fcf8 <lmh_init+0x380>)
 800fc0a:	781b      	ldrb	r3, [r3, #0]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc0c:	469c      	mov	ip, r3
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc0e:	4b3a      	ldr	r3, [pc, #232]	@ (800fcf8 <lmh_init+0x380>)
 800fc10:	785b      	ldrb	r3, [r3, #1]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc12:	469e      	mov	lr, r3
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc14:	4b38      	ldr	r3, [pc, #224]	@ (800fcf8 <lmh_init+0x380>)
 800fc16:	789b      	ldrb	r3, [r3, #2]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc18:	461c      	mov	r4, r3
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc1a:	4b37      	ldr	r3, [pc, #220]	@ (800fcf8 <lmh_init+0x380>)
 800fc1c:	78db      	ldrb	r3, [r3, #3]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc1e:	461d      	mov	r5, r3
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc20:	4b35      	ldr	r3, [pc, #212]	@ (800fcf8 <lmh_init+0x380>)
 800fc22:	791b      	ldrb	r3, [r3, #4]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc24:	461e      	mov	r6, r3
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc26:	4b34      	ldr	r3, [pc, #208]	@ (800fcf8 <lmh_init+0x380>)
 800fc28:	795b      	ldrb	r3, [r3, #5]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc2a:	61fb      	str	r3, [r7, #28]
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc2c:	4b32      	ldr	r3, [pc, #200]	@ (800fcf8 <lmh_init+0x380>)
 800fc2e:	799b      	ldrb	r3, [r3, #6]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc30:	61bb      	str	r3, [r7, #24]
				AppSKey[0], AppSKey[1], AppSKey[2], AppSKey[3], AppSKey[4], AppSKey[5], AppSKey[6], AppSKey[7],
 800fc32:	4b31      	ldr	r3, [pc, #196]	@ (800fcf8 <lmh_init+0x380>)
 800fc34:	79db      	ldrb	r3, [r3, #7]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc36:	617b      	str	r3, [r7, #20]
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc38:	4b2f      	ldr	r3, [pc, #188]	@ (800fcf8 <lmh_init+0x380>)
 800fc3a:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc3c:	613b      	str	r3, [r7, #16]
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc3e:	4b2e      	ldr	r3, [pc, #184]	@ (800fcf8 <lmh_init+0x380>)
 800fc40:	7a5b      	ldrb	r3, [r3, #9]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc42:	60fb      	str	r3, [r7, #12]
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc44:	4b2c      	ldr	r3, [pc, #176]	@ (800fcf8 <lmh_init+0x380>)
 800fc46:	7a9b      	ldrb	r3, [r3, #10]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc48:	60bb      	str	r3, [r7, #8]
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc4a:	4b2b      	ldr	r3, [pc, #172]	@ (800fcf8 <lmh_init+0x380>)
 800fc4c:	7adb      	ldrb	r3, [r3, #11]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc4e:	607b      	str	r3, [r7, #4]
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc50:	4b29      	ldr	r3, [pc, #164]	@ (800fcf8 <lmh_init+0x380>)
 800fc52:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc54:	603b      	str	r3, [r7, #0]
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc56:	4b28      	ldr	r3, [pc, #160]	@ (800fcf8 <lmh_init+0x380>)
 800fc58:	7b5b      	ldrb	r3, [r3, #13]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc5a:	4619      	mov	r1, r3
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc5c:	4b26      	ldr	r3, [pc, #152]	@ (800fcf8 <lmh_init+0x380>)
 800fc5e:	7b9b      	ldrb	r3, [r3, #14]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc60:	461a      	mov	r2, r3
				AppSKey[8], AppSKey[9], AppSKey[10], AppSKey[11], AppSKey[12], AppSKey[13], AppSKey[14], AppSKey[15]);
 800fc62:	4b25      	ldr	r3, [pc, #148]	@ (800fcf8 <lmh_init+0x380>)
 800fc64:	7bdb      	ldrb	r3, [r3, #15]
		sprintf(strlog3, "AppSKey=%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X",
 800fc66:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800fc6a:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc6c:	920c      	str	r2, [sp, #48]	@ 0x30
 800fc6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	920a      	str	r2, [sp, #40]	@ 0x28
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc78:	68ba      	ldr	r2, [r7, #8]
 800fc7a:	9208      	str	r2, [sp, #32]
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	9207      	str	r2, [sp, #28]
 800fc80:	693a      	ldr	r2, [r7, #16]
 800fc82:	9206      	str	r2, [sp, #24]
 800fc84:	697a      	ldr	r2, [r7, #20]
 800fc86:	9205      	str	r2, [sp, #20]
 800fc88:	69ba      	ldr	r2, [r7, #24]
 800fc8a:	9204      	str	r2, [sp, #16]
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	9303      	str	r3, [sp, #12]
 800fc90:	9602      	str	r6, [sp, #8]
 800fc92:	9501      	str	r5, [sp, #4]
 800fc94:	9400      	str	r4, [sp, #0]
 800fc96:	4673      	mov	r3, lr
 800fc98:	4662      	mov	r2, ip
 800fc9a:	4918      	ldr	r1, [pc, #96]	@ (800fcfc <lmh_init+0x384>)
 800fc9c:	f012 fa2c 	bl	80220f8 <siprintf>
		LOG_LIB("LMH", "ABP \n%s\nDevAdd=%08X\n%s\n%s", strlog1, DevAddr, strlog2, strlog3);
	}

	LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800fca0:	4b17      	ldr	r3, [pc, #92]	@ (800fd00 <lmh_init+0x388>)
 800fca2:	4a18      	ldr	r2, [pc, #96]	@ (800fd04 <lmh_init+0x38c>)
 800fca4:	601a      	str	r2, [r3, #0]
	LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800fca6:	4b16      	ldr	r3, [pc, #88]	@ (800fd00 <lmh_init+0x388>)
 800fca8:	4a17      	ldr	r2, [pc, #92]	@ (800fd08 <lmh_init+0x390>)
 800fcaa:	605a      	str	r2, [r3, #4]
	LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800fcac:	4b14      	ldr	r3, [pc, #80]	@ (800fd00 <lmh_init+0x388>)
 800fcae:	4a17      	ldr	r2, [pc, #92]	@ (800fd0c <lmh_init+0x394>)
 800fcb0:	609a      	str	r2, [r3, #8]
	LoRaMacCallbacks.GetBatteryLevel = m_callbacks->BoardGetBatteryLevel;
 800fcb2:	4b17      	ldr	r3, [pc, #92]	@ (800fd10 <lmh_init+0x398>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a16      	ldr	r2, [pc, #88]	@ (800fd14 <lmh_init+0x39c>)
 800fcba:	6013      	str	r3, [r2, #0]

	error_status = LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, region, nodeClass, region_change);
 800fcbc:	4b16      	ldr	r3, [pc, #88]	@ (800fd18 <lmh_init+0x3a0>)
 800fcbe:	781a      	ldrb	r2, [r3, #0]
 800fcc0:	f897 1110 	ldrb.w	r1, [r7, #272]	@ 0x110
 800fcc4:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	460b      	mov	r3, r1
 800fccc:	4911      	ldr	r1, [pc, #68]	@ (800fd14 <lmh_init+0x39c>)
 800fcce:	480c      	ldr	r0, [pc, #48]	@ (800fd00 <lmh_init+0x388>)
 800fcd0:	f7fd ff9a 	bl	800dc08 <LoRaMacInitialization>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
	if (error_status != LORAMAC_STATUS_OK)
 800fcda:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d01c      	beq.n	800fd1c <lmh_init+0x3a4>
	{
		return LMH_ERROR;
 800fce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fce6:	e0d5      	b.n	800fe94 <lmh_init+0x51c>
 800fce8:	20006cc4 	.word	0x20006cc4
 800fcec:	0802499c 	.word	0x0802499c
 800fcf0:	200000a4 	.word	0x200000a4
 800fcf4:	08024a24 	.word	0x08024a24
 800fcf8:	200000b4 	.word	0x200000b4
 800fcfc:	08024a7c 	.word	0x08024a7c
 800fd00:	20006cec 	.word	0x20006cec
 800fd04:	0800f489 	.word	0x0800f489
 800fd08:	0800f521 	.word	0x0800f521
 800fd0c:	0800f8e9 	.word	0x0800f8e9
 800fd10:	20006d10 	.word	0x20006d10
 800fd14:	20006cf8 	.word	0x20006cf8
 800fd18:	20006cc0 	.word	0x20006cc0
	}

	mibReq.Type = MIB_ADR;
 800fd1c:	4b5f      	ldr	r3, [pc, #380]	@ (800fe9c <lmh_init+0x524>)
 800fd1e:	2202      	movs	r2, #2
 800fd20:	701a      	strb	r2, [r3, #0]
	mibReq.Param.AdrEnable = lora_param.adr_enable;
 800fd22:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800fd26:	4b5d      	ldr	r3, [pc, #372]	@ (800fe9c <lmh_init+0x524>)
 800fd28:	711a      	strb	r2, [r3, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 800fd2a:	485c      	ldr	r0, [pc, #368]	@ (800fe9c <lmh_init+0x524>)
 800fd2c:	f7fe fbb0 	bl	800e490 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800fd30:	4b5a      	ldr	r3, [pc, #360]	@ (800fe9c <lmh_init+0x524>)
 800fd32:	2214      	movs	r2, #20
 800fd34:	701a      	strb	r2, [r3, #0]
	mibReq.Param.ChannelsDefaultDatarate = lora_param.tx_data_rate;
 800fd36:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800fd3a:	4b58      	ldr	r3, [pc, #352]	@ (800fe9c <lmh_init+0x524>)
 800fd3c:	711a      	strb	r2, [r3, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 800fd3e:	4857      	ldr	r0, [pc, #348]	@ (800fe9c <lmh_init+0x524>)
 800fd40:	f7fe fba6 	bl	800e490 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_CHANNELS_DATARATE;
 800fd44:	4b55      	ldr	r3, [pc, #340]	@ (800fe9c <lmh_init+0x524>)
 800fd46:	2215      	movs	r2, #21
 800fd48:	701a      	strb	r2, [r3, #0]
	mibReq.Param.ChannelsDatarate = lora_param.tx_data_rate;
 800fd4a:	f997 2025 	ldrsb.w	r2, [r7, #37]	@ 0x25
 800fd4e:	4b53      	ldr	r3, [pc, #332]	@ (800fe9c <lmh_init+0x524>)
 800fd50:	711a      	strb	r2, [r3, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 800fd52:	4852      	ldr	r0, [pc, #328]	@ (800fe9c <lmh_init+0x524>)
 800fd54:	f7fe fb9c 	bl	800e490 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fd58:	4b50      	ldr	r3, [pc, #320]	@ (800fe9c <lmh_init+0x524>)
 800fd5a:	2216      	movs	r2, #22
 800fd5c:	701a      	strb	r2, [r3, #0]
	mibReq.Param.ChannelsTxPower = lora_param.tx_power;
 800fd5e:	f997 2028 	ldrsb.w	r2, [r7, #40]	@ 0x28
 800fd62:	4b4e      	ldr	r3, [pc, #312]	@ (800fe9c <lmh_init+0x524>)
 800fd64:	711a      	strb	r2, [r3, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 800fd66:	484d      	ldr	r0, [pc, #308]	@ (800fe9c <lmh_init+0x524>)
 800fd68:	f7fe fb92 	bl	800e490 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_PUBLIC_NETWORK;
 800fd6c:	4b4b      	ldr	r3, [pc, #300]	@ (800fe9c <lmh_init+0x524>)
 800fd6e:	2207      	movs	r2, #7
 800fd70:	701a      	strb	r2, [r3, #0]
	mibReq.Param.EnablePublicNetwork = lora_param.enable_public_network;
 800fd72:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fd76:	4b49      	ldr	r3, [pc, #292]	@ (800fe9c <lmh_init+0x524>)
 800fd78:	711a      	strb	r2, [r3, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 800fd7a:	4848      	ldr	r0, [pc, #288]	@ (800fe9c <lmh_init+0x524>)
 800fd7c:	f7fe fb88 	bl	800e490 <LoRaMacMibSetRequestConfirm>

	mibReq.Type = MIB_DEVICE_CLASS;
 800fd80:	4b46      	ldr	r3, [pc, #280]	@ (800fe9c <lmh_init+0x524>)
 800fd82:	2200      	movs	r2, #0
 800fd84:	701a      	strb	r2, [r3, #0]
	mibReq.Param.Class = nodeClass;
 800fd86:	4a45      	ldr	r2, [pc, #276]	@ (800fe9c <lmh_init+0x524>)
 800fd88:	f897 3110 	ldrb.w	r3, [r7, #272]	@ 0x110
 800fd8c:	7113      	strb	r3, [r2, #4]
	LoRaMacMibSetRequestConfirm(&mibReq);
 800fd8e:	4843      	ldr	r0, [pc, #268]	@ (800fe9c <lmh_init+0x524>)
 800fd90:	f7fe fb7e 	bl	800e490 <LoRaMacMibSetRequestConfirm>

	LoRaMacTestSetDutyCycleOn(_dutyCycleEnabled);
 800fd94:	4b42      	ldr	r3, [pc, #264]	@ (800fea0 <lmh_init+0x528>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fe ffa1 	bl	800ece0 <LoRaMacTestSetDutyCycleOn>
		LoRaMacMibSetRequestConfirm(&mibReq);
#endif
	}

	// Set default SubBandChannels matching with RAK definitions
	switch (region)
 800fd9e:	4b41      	ldr	r3, [pc, #260]	@ (800fea4 <lmh_init+0x52c>)
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	2b0c      	cmp	r3, #12
 800fda4:	d834      	bhi.n	800fe10 <lmh_init+0x498>
 800fda6:	a201      	add	r2, pc, #4	@ (adr r2, 800fdac <lmh_init+0x434>)
 800fda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdac:	0800fde1 	.word	0x0800fde1
 800fdb0:	0800fde9 	.word	0x0800fde9
 800fdb4:	0800fdf1 	.word	0x0800fdf1
 800fdb8:	0800fdf9 	.word	0x0800fdf9
 800fdbc:	0800fe01 	.word	0x0800fe01
 800fdc0:	0800fe11 	.word	0x0800fe11
 800fdc4:	0800fe19 	.word	0x0800fe19
 800fdc8:	0800fe09 	.word	0x0800fe09
 800fdcc:	0800fe21 	.word	0x0800fe21
 800fdd0:	0800fde1 	.word	0x0800fde1
 800fdd4:	0800fde1 	.word	0x0800fde1
 800fdd8:	0800fde1 	.word	0x0800fde1
 800fddc:	0800fe29 	.word	0x0800fe29
	{
	case LORAMAC_REGION_AS923:
	case LORAMAC_REGION_AS923_2:
	case LORAMAC_REGION_AS923_3:
	case LORAMAC_REGION_AS923_4:
		lmh_setSubBandChannels(1);
 800fde0:	2001      	movs	r0, #1
 800fde2:	f7ff f9ad 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fde6:	e023      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_AU915:
		lmh_setSubBandChannels(2);
 800fde8:	2002      	movs	r0, #2
 800fdea:	f7ff f9a9 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fdee:	e01f      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_CN470:
		lmh_setSubBandChannels(11);
 800fdf0:	200b      	movs	r0, #11
 800fdf2:	f7ff f9a5 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fdf6:	e01b      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_CN779:
		lmh_setSubBandChannels(1);
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	f7ff f9a1 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fdfe:	e017      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_EU433:
		lmh_setSubBandChannels(1);
 800fe00:	2001      	movs	r0, #1
 800fe02:	f7ff f99d 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fe06:	e013      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_IN865:
		lmh_setSubBandChannels(1);
 800fe08:	2001      	movs	r0, #1
 800fe0a:	f7ff f999 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fe0e:	e00f      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_EU868:
	default:
		lmh_setSubBandChannels(1);
 800fe10:	2001      	movs	r0, #1
 800fe12:	f7ff f995 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fe16:	e00b      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_KR920:
		lmh_setSubBandChannels(1);
 800fe18:	2001      	movs	r0, #1
 800fe1a:	f7ff f991 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fe1e:	e007      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_US915:
		lmh_setSubBandChannels(2);
 800fe20:	2002      	movs	r0, #2
 800fe22:	f7ff f98d 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fe26:	e003      	b.n	800fe30 <lmh_init+0x4b8>
	case LORAMAC_REGION_RU864:
		lmh_setSubBandChannels(1);
 800fe28:	2001      	movs	r0, #1
 800fe2a:	f7ff f989 	bl	800f140 <lmh_setSubBandChannels>
		break;
 800fe2e:	bf00      	nop
	}

	// Make channel shifts for AS923-2, AS923-3 and AS923-4
	switch (region)
 800fe30:	4b1c      	ldr	r3, [pc, #112]	@ (800fea4 <lmh_init+0x52c>)
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	2b0b      	cmp	r3, #11
 800fe36:	d82b      	bhi.n	800fe90 <lmh_init+0x518>
 800fe38:	a201      	add	r2, pc, #4	@ (adr r2, 800fe40 <lmh_init+0x4c8>)
 800fe3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3e:	bf00      	nop
 800fe40:	0800fe71 	.word	0x0800fe71
 800fe44:	0800fe91 	.word	0x0800fe91
 800fe48:	0800fe91 	.word	0x0800fe91
 800fe4c:	0800fe91 	.word	0x0800fe91
 800fe50:	0800fe91 	.word	0x0800fe91
 800fe54:	0800fe91 	.word	0x0800fe91
 800fe58:	0800fe91 	.word	0x0800fe91
 800fe5c:	0800fe91 	.word	0x0800fe91
 800fe60:	0800fe91 	.word	0x0800fe91
 800fe64:	0800fe79 	.word	0x0800fe79
 800fe68:	0800fe81 	.word	0x0800fe81
 800fe6c:	0800fe89 	.word	0x0800fe89
	{
	case LORAMAC_REGION_AS923:
		lmh_setAS923Version(1);
 800fe70:	2001      	movs	r0, #1
 800fe72:	f000 f973 	bl	801015c <lmh_setAS923Version>
		LOG_LIB("LMH", "Using AS923-1");
		break;
 800fe76:	e00c      	b.n	800fe92 <lmh_init+0x51a>
	case LORAMAC_REGION_AS923_2:
		lmh_setAS923Version(2);
 800fe78:	2002      	movs	r0, #2
 800fe7a:	f000 f96f 	bl	801015c <lmh_setAS923Version>
		LOG_LIB("LMH", "Using AS923-2");
		break;
 800fe7e:	e008      	b.n	800fe92 <lmh_init+0x51a>
	case LORAMAC_REGION_AS923_3:
		lmh_setAS923Version(3);
 800fe80:	2003      	movs	r0, #3
 800fe82:	f000 f96b 	bl	801015c <lmh_setAS923Version>
		LOG_LIB("LMH", "Using AS923-3");
		break;
 800fe86:	e004      	b.n	800fe92 <lmh_init+0x51a>
	case LORAMAC_REGION_AS923_4:
		lmh_setAS923Version(4);
 800fe88:	2004      	movs	r0, #4
 800fe8a:	f000 f967 	bl	801015c <lmh_setAS923Version>
		LOG_LIB("LMH", "Using AS923-4");
		break;
 800fe8e:	e000      	b.n	800fe92 <lmh_init+0x51a>
	default:
		break;
 800fe90:	bf00      	nop
	}
	return LMH_SUCCESS;
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	37fc      	adds	r7, #252	@ 0xfc
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe9c:	20006cfc 	.word	0x20006cfc
 800fea0:	20006cc2 	.word	0x20006cc2
 800fea4:	20006cc0 	.word	0x20006cc0

0800fea8 <lmh_join>:
	mibReq.Param.ChannelsTxPower = tx_power;
	LoRaMacMibSetRequestConfirm(&mibReq);
}

void lmh_join(void)
{
 800fea8:	b590      	push	{r4, r7, lr}
 800feaa:	b087      	sub	sp, #28
 800feac:	af00      	add	r7, sp, #0
	MlmeReq_t mlmeReq;

	mlmeReq.Type = MLME_JOIN;
 800feae:	2300      	movs	r3, #0
 800feb0:	713b      	strb	r3, [r7, #4]
	mlmeReq.Req.Join.DevEui = DevEui;
 800feb2:	4b27      	ldr	r3, [pc, #156]	@ (800ff50 <lmh_join+0xa8>)
 800feb4:	60bb      	str	r3, [r7, #8]
	mlmeReq.Req.Join.AppEui = AppEui;
 800feb6:	4b27      	ldr	r3, [pc, #156]	@ (800ff54 <lmh_join+0xac>)
 800feb8:	60fb      	str	r3, [r7, #12]
	mlmeReq.Req.Join.AppKey = AppKey;
 800feba:	4b27      	ldr	r3, [pc, #156]	@ (800ff58 <lmh_join+0xb0>)
 800febc:	613b      	str	r3, [r7, #16]
	mlmeReq.Req.Join.NbTrials = m_param.nb_trials;
 800febe:	4b27      	ldr	r3, [pc, #156]	@ (800ff5c <lmh_join+0xb4>)
 800fec0:	78db      	ldrb	r3, [r3, #3]
 800fec2:	753b      	strb	r3, [r7, #20]

	JoinParameters = mlmeReq.Req.Join;
 800fec4:	4b26      	ldr	r3, [pc, #152]	@ (800ff60 <lmh_join+0xb8>)
 800fec6:	461c      	mov	r4, r3
 800fec8:	f107 0308 	add.w	r3, r7, #8
 800fecc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if (_otaa)
 800fed2:	4b24      	ldr	r3, [pc, #144]	@ (800ff64 <lmh_join+0xbc>)
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d004      	beq.n	800fee4 <lmh_join+0x3c>
	{
		LoRaMacMlmeRequest(&mlmeReq);
 800feda:	1d3b      	adds	r3, r7, #4
 800fedc:	4618      	mov	r0, r3
 800fede:	f7fe fd2d 	bl	800e93c <LoRaMacMlmeRequest>
		mibReq.Param.IsNetworkJoined = JOIN_OK;
		LoRaMacMibSetRequestConfirm(&mibReq);

		m_callbacks->lmh_has_joined();
	}
}
 800fee2:	e031      	b.n	800ff48 <lmh_join+0xa0>
		mibReq.Type = MIB_NET_ID;
 800fee4:	4b20      	ldr	r3, [pc, #128]	@ (800ff68 <lmh_join+0xc0>)
 800fee6:	2203      	movs	r2, #3
 800fee8:	701a      	strb	r2, [r3, #0]
		mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800feea:	4b1f      	ldr	r3, [pc, #124]	@ (800ff68 <lmh_join+0xc0>)
 800feec:	2200      	movs	r2, #0
 800feee:	605a      	str	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm(&mibReq);
 800fef0:	481d      	ldr	r0, [pc, #116]	@ (800ff68 <lmh_join+0xc0>)
 800fef2:	f7fe facd 	bl	800e490 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_DEV_ADDR;
 800fef6:	4b1c      	ldr	r3, [pc, #112]	@ (800ff68 <lmh_join+0xc0>)
 800fef8:	2204      	movs	r2, #4
 800fefa:	701a      	strb	r2, [r3, #0]
		mibReq.Param.DevAddr = DevAddr;
 800fefc:	4b1b      	ldr	r3, [pc, #108]	@ (800ff6c <lmh_join+0xc4>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a19      	ldr	r2, [pc, #100]	@ (800ff68 <lmh_join+0xc0>)
 800ff02:	6053      	str	r3, [r2, #4]
		LoRaMacMibSetRequestConfirm(&mibReq);
 800ff04:	4818      	ldr	r0, [pc, #96]	@ (800ff68 <lmh_join+0xc0>)
 800ff06:	f7fe fac3 	bl	800e490 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NWK_SKEY;
 800ff0a:	4b17      	ldr	r3, [pc, #92]	@ (800ff68 <lmh_join+0xc0>)
 800ff0c:	2205      	movs	r2, #5
 800ff0e:	701a      	strb	r2, [r3, #0]
		mibReq.Param.NwkSKey = NwkSKey;
 800ff10:	4b15      	ldr	r3, [pc, #84]	@ (800ff68 <lmh_join+0xc0>)
 800ff12:	4a17      	ldr	r2, [pc, #92]	@ (800ff70 <lmh_join+0xc8>)
 800ff14:	605a      	str	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm(&mibReq);
 800ff16:	4814      	ldr	r0, [pc, #80]	@ (800ff68 <lmh_join+0xc0>)
 800ff18:	f7fe faba 	bl	800e490 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_APP_SKEY;
 800ff1c:	4b12      	ldr	r3, [pc, #72]	@ (800ff68 <lmh_join+0xc0>)
 800ff1e:	2206      	movs	r2, #6
 800ff20:	701a      	strb	r2, [r3, #0]
		mibReq.Param.AppSKey = AppSKey;
 800ff22:	4b11      	ldr	r3, [pc, #68]	@ (800ff68 <lmh_join+0xc0>)
 800ff24:	4a13      	ldr	r2, [pc, #76]	@ (800ff74 <lmh_join+0xcc>)
 800ff26:	605a      	str	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm(&mibReq);
 800ff28:	480f      	ldr	r0, [pc, #60]	@ (800ff68 <lmh_join+0xc0>)
 800ff2a:	f7fe fab1 	bl	800e490 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NETWORK_JOINED;
 800ff2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff68 <lmh_join+0xc0>)
 800ff30:	2201      	movs	r2, #1
 800ff32:	701a      	strb	r2, [r3, #0]
		mibReq.Param.IsNetworkJoined = JOIN_OK;
 800ff34:	4b0c      	ldr	r3, [pc, #48]	@ (800ff68 <lmh_join+0xc0>)
 800ff36:	2201      	movs	r2, #1
 800ff38:	711a      	strb	r2, [r3, #4]
		LoRaMacMibSetRequestConfirm(&mibReq);
 800ff3a:	480b      	ldr	r0, [pc, #44]	@ (800ff68 <lmh_join+0xc0>)
 800ff3c:	f7fe faa8 	bl	800e490 <LoRaMacMibSetRequestConfirm>
		m_callbacks->lmh_has_joined();
 800ff40:	4b0d      	ldr	r3, [pc, #52]	@ (800ff78 <lmh_join+0xd0>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	691b      	ldr	r3, [r3, #16]
 800ff46:	4798      	blx	r3
}
 800ff48:	bf00      	nop
 800ff4a:	371c      	adds	r7, #28
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd90      	pop	{r4, r7, pc}
 800ff50:	20006cc4 	.word	0x20006cc4
 800ff54:	20006ccc 	.word	0x20006ccc
 800ff58:	20000094 	.word	0x20000094
 800ff5c:	20006d08 	.word	0x20006d08
 800ff60:	20006cd4 	.word	0x20006cd4
 800ff64:	20006cc1 	.word	0x20006cc1
 800ff68:	20006cfc 	.word	0x20006cfc
 800ff6c:	20006ce4 	.word	0x20006ce4
 800ff70:	200000a4 	.word	0x200000a4
 800ff74:	200000b4 	.word	0x200000b4
 800ff78:	20006d10 	.word	0x20006d10

0800ff7c <lmh_join_status_get>:

lmh_join_status lmh_join_status_get(void)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
	MibRequestConfirm_t mibReq;
	mibReq.Type = MIB_NETWORK_JOINED;
 800ff82:	2301      	movs	r3, #1
 800ff84:	713b      	strb	r3, [r7, #4]
	LoRaMacMibGetRequestConfirm(&mibReq);
 800ff86:	1d3b      	adds	r3, r7, #4
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fe f949 	bl	800e220 <LoRaMacMibGetRequestConfirm>
	// else
	// {
	// 	return LMH_RESET;
	// }

	return (lmh_join_status)mibReq.Param.IsNetworkJoined;
 800ff8e:	7a3b      	ldrb	r3, [r7, #8]
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <lmh_send>:

lmh_error_status lmh_send(lmh_app_data_t *app_data, lmh_confirm is_tx_confirmed)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b088      	sub	sp, #32
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
	McpsReq_t mcpsReq;
	LoRaMacTxInfo_t txInfo;

	/*if certification test are on going, application data is not sent*/
	if (m_compliance_test.running == true)
 800ffa4:	4b31      	ldr	r3, [pc, #196]	@ (801006c <lmh_send+0xd4>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d002      	beq.n	800ffb2 <lmh_send+0x1a>
	{
		return LMH_ERROR;
 800ffac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ffb0:	e057      	b.n	8010062 <lmh_send+0xca>
	}

	if (lmh_mac_is_busy)
 800ffb2:	4b2f      	ldr	r3, [pc, #188]	@ (8010070 <lmh_send+0xd8>)
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <lmh_send+0x26>
	{
		return LMH_BUSY;
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e051      	b.n	8010062 <lmh_send+0xca>
	}

	if (LoRaMacQueryTxPossible(app_data->buffsize, &txInfo) != LORAMAC_STATUS_OK)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	791b      	ldrb	r3, [r3, #4]
 800ffc2:	f107 020c 	add.w	r2, r7, #12
 800ffc6:	4611      	mov	r1, r2
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fe f88b 	bl	800e0e4 <LoRaMacQueryTxPossible>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00c      	beq.n	800ffee <lmh_send+0x56>
	{
		LOG_LIB("LMH", "lmh_send -> LoRaMacQueryTxPossible failed");

		// Send empty frame in order to flush MAC commands
		mcpsReq.Type = MCPS_UNCONFIRMED;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	743b      	strb	r3, [r7, #16]
		mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	61bb      	str	r3, [r7, #24]
		mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	83bb      	strh	r3, [r7, #28]
		mcpsReq.Req.Unconfirmed.Datarate = m_param.tx_data_rate;
 800ffe0:	4b24      	ldr	r3, [pc, #144]	@ (8010074 <lmh_send+0xdc>)
 800ffe2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800ffe6:	77bb      	strb	r3, [r7, #30]
		// cannot send
		return LMH_ERROR;
 800ffe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ffec:	e039      	b.n	8010062 <lmh_send+0xca>
	}
	else
	{
		if (is_tx_confirmed == LMH_UNCONFIRMED_MSG)
 800ffee:	78fb      	ldrb	r3, [r7, #3]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10f      	bne.n	8010014 <lmh_send+0x7c>
		{
			mcpsReq.Type = MCPS_UNCONFIRMED;
 800fff4:	2300      	movs	r3, #0
 800fff6:	743b      	strb	r3, [r7, #16]
			mcpsReq.Req.Unconfirmed.fPort = app_data->port;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	795b      	ldrb	r3, [r3, #5]
 800fffc:	753b      	strb	r3, [r7, #20]
			mcpsReq.Req.Unconfirmed.fBufferSize = app_data->buffsize;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	791b      	ldrb	r3, [r3, #4]
 8010002:	83bb      	strh	r3, [r7, #28]
			mcpsReq.Req.Unconfirmed.fBuffer = app_data->buffer;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	61bb      	str	r3, [r7, #24]
			mcpsReq.Req.Unconfirmed.Datarate = m_param.tx_data_rate;
 801000a:	4b1a      	ldr	r3, [pc, #104]	@ (8010074 <lmh_send+0xdc>)
 801000c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010010:	77bb      	strb	r3, [r7, #30]
 8010012:	e017      	b.n	8010044 <lmh_send+0xac>
		}
		else
		{
			mcpsReq.Type = MCPS_CONFIRMED;
 8010014:	2301      	movs	r3, #1
 8010016:	743b      	strb	r3, [r7, #16]
			mcpsReq.Req.Confirmed.fPort = app_data->port;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	795b      	ldrb	r3, [r3, #5]
 801001c:	753b      	strb	r3, [r7, #20]
			mcpsReq.Req.Confirmed.fBufferSize = app_data->buffsize;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	791b      	ldrb	r3, [r3, #4]
 8010022:	83bb      	strh	r3, [r7, #28]
			mcpsReq.Req.Confirmed.fBuffer = app_data->buffer;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	61bb      	str	r3, [r7, #24]
			/// \todo make nbTrials configurable
			// if ((region == LORAMAC_REGION_AS923) ||
			// 	(region == LORAMAC_REGION_AS923_2) ||
			// 	(region == LORAMAC_REGION_AS923_3) ||
			// 	(region == LORAMAC_REGION_AS923_4))
			if (region == LORAMAC_REGION_AS923)
 801002a:	4b13      	ldr	r3, [pc, #76]	@ (8010078 <lmh_send+0xe0>)
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d102      	bne.n	8010038 <lmh_send+0xa0>
			{
				mcpsReq.Req.Confirmed.NbTrials = 1; // 8;
 8010032:	2301      	movs	r3, #1
 8010034:	77fb      	strb	r3, [r7, #31]
 8010036:	e001      	b.n	801003c <lmh_send+0xa4>
			}
			else
			{
				mcpsReq.Req.Confirmed.NbTrials = 8;
 8010038:	2308      	movs	r3, #8
 801003a:	77fb      	strb	r3, [r7, #31]
			}
			mcpsReq.Req.Confirmed.Datarate = m_param.tx_data_rate;
 801003c:	4b0d      	ldr	r3, [pc, #52]	@ (8010074 <lmh_send+0xdc>)
 801003e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8010042:	77bb      	strb	r3, [r7, #30]
		}

		if (LoRaMacMcpsRequest(&mcpsReq) == LORAMAC_STATUS_OK)
 8010044:	f107 0310 	add.w	r3, r7, #16
 8010048:	4618      	mov	r0, r3
 801004a:	f7fe fd5f 	bl	800eb0c <LoRaMacMcpsRequest>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d104      	bne.n	801005e <lmh_send+0xc6>
		{
			lmh_mac_is_busy = true;
 8010054:	4b06      	ldr	r3, [pc, #24]	@ (8010070 <lmh_send+0xd8>)
 8010056:	2201      	movs	r2, #1
 8010058:	701a      	strb	r2, [r3, #0]
			return LMH_SUCCESS;
 801005a:	2300      	movs	r3, #0
 801005c:	e001      	b.n	8010062 <lmh_send+0xca>
		}
		LOG_LIB("LMH", "lmh_send -> LoRaMacMcpsRequest failed");
	}

	return LMH_ERROR;
 801005e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8010062:	4618      	mov	r0, r3
 8010064:	3720      	adds	r7, #32
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	20006d14 	.word	0x20006d14
 8010070:	20006cc3 	.word	0x20006cc3
 8010074:	20006d08 	.word	0x20006d08
 8010078:	20006cc0 	.word	0x20006cc0

0801007c <lmh_class_request>:
	LOG_LIB("LMH", "lmh_send returned LMH_ERROR");
	return LMH_ERROR;
}

lmh_error_status lmh_class_request(DeviceClass_t newClass)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af00      	add	r7, sp, #0
 8010082:	4603      	mov	r3, r0
 8010084:	71fb      	strb	r3, [r7, #7]
	lmh_error_status Errorstatus = LMH_SUCCESS;
 8010086:	2300      	movs	r3, #0
 8010088:	75fb      	strb	r3, [r7, #23]
	MibRequestConfirm_t mibReq;
	DeviceClass_t currentClass;

	mibReq.Type = MIB_DEVICE_CLASS;
 801008a:	2300      	movs	r3, #0
 801008c:	723b      	strb	r3, [r7, #8]
	LoRaMacMibGetRequestConfirm(&mibReq);
 801008e:	f107 0308 	add.w	r3, r7, #8
 8010092:	4618      	mov	r0, r3
 8010094:	f7fe f8c4 	bl	800e220 <LoRaMacMibGetRequestConfirm>
	currentClass = mibReq.Param.Class;
 8010098:	7b3b      	ldrb	r3, [r7, #12]
 801009a:	75bb      	strb	r3, [r7, #22]

	// attempt to swicth only if class update
	if (currentClass != newClass)
 801009c:	7dba      	ldrb	r2, [r7, #22]
 801009e:	79fb      	ldrb	r3, [r7, #7]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d053      	beq.n	801014c <lmh_class_request+0xd0>
	{
		switch (newClass)
 80100a4:	79fb      	ldrb	r3, [r7, #7]
 80100a6:	2b02      	cmp	r3, #2
 80100a8:	d032      	beq.n	8010110 <lmh_class_request+0x94>
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	dc48      	bgt.n	8010140 <lmh_class_request+0xc4>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d002      	beq.n	80100b8 <lmh_class_request+0x3c>
 80100b2:	2b01      	cmp	r3, #1
 80100b4:	d016      	beq.n	80100e4 <lmh_class_request+0x68>
 80100b6:	e043      	b.n	8010140 <lmh_class_request+0xc4>
		{
		case CLASS_A:
		{
			if (currentClass != CLASS_A)
 80100b8:	7dbb      	ldrb	r3, [r7, #22]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d043      	beq.n	8010146 <lmh_class_request+0xca>
			{
				mibReq.Param.Class = CLASS_A;
 80100be:	2300      	movs	r3, #0
 80100c0:	733b      	strb	r3, [r7, #12]
				if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80100c2:	f107 0308 	add.w	r3, r7, #8
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fe f9e2 	bl	800e490 <LoRaMacMibSetRequestConfirm>
 80100cc:	4603      	mov	r3, r0
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d105      	bne.n	80100de <lmh_class_request+0x62>
				{
					// switch is instantanuous
					m_callbacks->lmh_ConfirmClass(CLASS_A);
 80100d2:	4b21      	ldr	r3, [pc, #132]	@ (8010158 <lmh_class_request+0xdc>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	695b      	ldr	r3, [r3, #20]
 80100d8:	2000      	movs	r0, #0
 80100da:	4798      	blx	r3
				else
				{
					Errorstatus = LMH_ERROR;
				}
			}
			break;
 80100dc:	e033      	b.n	8010146 <lmh_class_request+0xca>
					Errorstatus = LMH_ERROR;
 80100de:	23ff      	movs	r3, #255	@ 0xff
 80100e0:	75fb      	strb	r3, [r7, #23]
			break;
 80100e2:	e030      	b.n	8010146 <lmh_class_request+0xca>
		}

		case CLASS_B:
		{
			if (currentClass != CLASS_B)
 80100e4:	7dbb      	ldrb	r3, [r7, #22]
 80100e6:	2b01      	cmp	r3, #1
 80100e8:	d02f      	beq.n	801014a <lmh_class_request+0xce>
			{
				mibReq.Param.Class = CLASS_B;
 80100ea:	2301      	movs	r3, #1
 80100ec:	733b      	strb	r3, [r7, #12]
				if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80100ee:	f107 0308 	add.w	r3, r7, #8
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fe f9cc 	bl	800e490 <LoRaMacMibSetRequestConfirm>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d105      	bne.n	801010a <lmh_class_request+0x8e>
				{
					// switch is instantanuous
					m_callbacks->lmh_ConfirmClass(CLASS_B);
 80100fe:	4b16      	ldr	r3, [pc, #88]	@ (8010158 <lmh_class_request+0xdc>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	695b      	ldr	r3, [r3, #20]
 8010104:	2001      	movs	r0, #1
 8010106:	4798      	blx	r3
				else
				{
					Errorstatus = LMH_ERROR;
				}
			}
			break;
 8010108:	e01f      	b.n	801014a <lmh_class_request+0xce>
					Errorstatus = LMH_ERROR;
 801010a:	23ff      	movs	r3, #255	@ 0xff
 801010c:	75fb      	strb	r3, [r7, #23]
			break;
 801010e:	e01c      	b.n	801014a <lmh_class_request+0xce>
		}

		case CLASS_C:
		{
			if (currentClass != CLASS_A)
 8010110:	7dbb      	ldrb	r3, [r7, #22]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d001      	beq.n	801011a <lmh_class_request+0x9e>
			{
				Errorstatus = LMH_ERROR;
 8010116:	23ff      	movs	r3, #255	@ 0xff
 8010118:	75fb      	strb	r3, [r7, #23]
			}
			// switch is instantanuous
			mibReq.Param.Class = CLASS_C;
 801011a:	2302      	movs	r3, #2
 801011c:	733b      	strb	r3, [r7, #12]
			if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 801011e:	f107 0308 	add.w	r3, r7, #8
 8010122:	4618      	mov	r0, r3
 8010124:	f7fe f9b4 	bl	800e490 <LoRaMacMibSetRequestConfirm>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d105      	bne.n	801013a <lmh_class_request+0xbe>
			{
				m_callbacks->lmh_ConfirmClass(CLASS_C);
 801012e:	4b0a      	ldr	r3, [pc, #40]	@ (8010158 <lmh_class_request+0xdc>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	695b      	ldr	r3, [r3, #20]
 8010134:	2002      	movs	r0, #2
 8010136:	4798      	blx	r3
			}
			else
			{
				Errorstatus = LMH_ERROR;
			}
			break;
 8010138:	e008      	b.n	801014c <lmh_class_request+0xd0>
				Errorstatus = LMH_ERROR;
 801013a:	23ff      	movs	r3, #255	@ 0xff
 801013c:	75fb      	strb	r3, [r7, #23]
			break;
 801013e:	e005      	b.n	801014c <lmh_class_request+0xd0>
		}

		default:
			Errorstatus = LMH_ERROR;
 8010140:	23ff      	movs	r3, #255	@ 0xff
 8010142:	75fb      	strb	r3, [r7, #23]
			break;
 8010144:	e002      	b.n	801014c <lmh_class_request+0xd0>
			break;
 8010146:	bf00      	nop
 8010148:	e000      	b.n	801014c <lmh_class_request+0xd0>
			break;
 801014a:	bf00      	nop
		}
	}

	return Errorstatus;
 801014c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3718      	adds	r7, #24
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	20006d10 	.word	0x20006d10

0801015c <lmh_setAS923Version>:
 * @param version 1, 2, 3 or 4 for AS923-1 (default), AS923-2, AS923-3 or AS923-4
 * @return true
 * @return false
 */
bool lmh_setAS923Version(uint8_t version)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	4603      	mov	r3, r0
 8010164:	71fb      	strb	r3, [r7, #7]
	return RegionAS923SetVersion(version);
 8010166:	79fb      	ldrb	r3, [r7, #7]
 8010168:	4618      	mov	r0, r3
 801016a:	f002 fc6b 	bl	8012a44 <RegionAS923SetVersion>
 801016e:	4603      	mov	r3, r0
}
 8010170:	4618      	mov	r0, r3
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <lmh_reset_mac>:
/**
 * @brief Reset MAC parameters
 *
 */
void lmh_reset_mac(void)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	af00      	add	r7, sp, #0
	ResetMacCounters();
 801017c:	f7fd f846 	bl	800d20c <ResetMacCounters>
}
 8010180:	bf00      	nop
 8010182:	bd80      	pop	{r7, pc}

08010184 <RegionIsActive>:
#define RU864_SET_CONTINUOUS_WAVE()
#define RU864_APPLY_DR_OFFSET()
#endif

bool RegionIsActive(LoRaMacRegion_t region)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	4603      	mov	r3, r0
 801018c:	71fb      	strb	r3, [r7, #7]
	switch (region)
 801018e:	79fb      	ldrb	r3, [r7, #7]
 8010190:	2b0c      	cmp	r3, #12
 8010192:	d837      	bhi.n	8010204 <RegionIsActive+0x80>
 8010194:	a201      	add	r2, pc, #4	@ (adr r2, 801019c <RegionIsActive+0x18>)
 8010196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019a:	bf00      	nop
 801019c:	080101d1 	.word	0x080101d1
 80101a0:	080101d5 	.word	0x080101d5
 80101a4:	080101d9 	.word	0x080101d9
 80101a8:	080101dd 	.word	0x080101dd
 80101ac:	080101e1 	.word	0x080101e1
 80101b0:	080101e5 	.word	0x080101e5
 80101b4:	080101e9 	.word	0x080101e9
 80101b8:	080101ed 	.word	0x080101ed
 80101bc:	080101f1 	.word	0x080101f1
 80101c0:	080101f5 	.word	0x080101f5
 80101c4:	080101f9 	.word	0x080101f9
 80101c8:	080101fd 	.word	0x080101fd
 80101cc:	08010201 	.word	0x08010201
	{
		AS923_IS_ACTIVE();
 80101d0:	2301      	movs	r3, #1
 80101d2:	e018      	b.n	8010206 <RegionIsActive+0x82>
		AU915_IS_ACTIVE();
 80101d4:	2301      	movs	r3, #1
 80101d6:	e016      	b.n	8010206 <RegionIsActive+0x82>
		CN470_IS_ACTIVE();
 80101d8:	2301      	movs	r3, #1
 80101da:	e014      	b.n	8010206 <RegionIsActive+0x82>
		CN779_IS_ACTIVE();
 80101dc:	2301      	movs	r3, #1
 80101de:	e012      	b.n	8010206 <RegionIsActive+0x82>
		EU433_IS_ACTIVE();
 80101e0:	2301      	movs	r3, #1
 80101e2:	e010      	b.n	8010206 <RegionIsActive+0x82>
		EU868_IS_ACTIVE();
 80101e4:	2301      	movs	r3, #1
 80101e6:	e00e      	b.n	8010206 <RegionIsActive+0x82>
		KR920_IS_ACTIVE();
 80101e8:	2301      	movs	r3, #1
 80101ea:	e00c      	b.n	8010206 <RegionIsActive+0x82>
		IN865_IS_ACTIVE();
 80101ec:	2301      	movs	r3, #1
 80101ee:	e00a      	b.n	8010206 <RegionIsActive+0x82>
		US915_IS_ACTIVE();
 80101f0:	2301      	movs	r3, #1
 80101f2:	e008      	b.n	8010206 <RegionIsActive+0x82>
		AS923_2_IS_ACTIVE();
 80101f4:	2301      	movs	r3, #1
 80101f6:	e006      	b.n	8010206 <RegionIsActive+0x82>
		AS923_3_IS_ACTIVE();
 80101f8:	2301      	movs	r3, #1
 80101fa:	e004      	b.n	8010206 <RegionIsActive+0x82>
		AS923_4_IS_ACTIVE();
 80101fc:	2301      	movs	r3, #1
 80101fe:	e002      	b.n	8010206 <RegionIsActive+0x82>
		RU864_IS_ACTIVE();
 8010200:	2301      	movs	r3, #1
 8010202:	e000      	b.n	8010206 <RegionIsActive+0x82>
	default:
	{
		return false;
 8010204:	2300      	movs	r3, #0
	}
	}
}
 8010206:	4618      	mov	r0, r3
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop

08010214 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam(LoRaMacRegion_t region, GetPhyParams_t *getPhy)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	4603      	mov	r3, r0
 801021c:	6039      	str	r1, [r7, #0]
 801021e:	71fb      	strb	r3, [r7, #7]
	PhyParam_t phyParam = {0};
 8010220:	2300      	movs	r3, #0
 8010222:	60fb      	str	r3, [r7, #12]
	switch (region)
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	2b0c      	cmp	r3, #12
 8010228:	d85d      	bhi.n	80102e6 <RegionGetPhyParam+0xd2>
 801022a:	a201      	add	r2, pc, #4	@ (adr r2, 8010230 <RegionGetPhyParam+0x1c>)
 801022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010230:	08010265 	.word	0x08010265
 8010234:	0801026f 	.word	0x0801026f
 8010238:	08010279 	.word	0x08010279
 801023c:	08010283 	.word	0x08010283
 8010240:	0801028d 	.word	0x0801028d
 8010244:	08010297 	.word	0x08010297
 8010248:	080102a1 	.word	0x080102a1
 801024c:	080102ab 	.word	0x080102ab
 8010250:	080102b5 	.word	0x080102b5
 8010254:	080102bf 	.word	0x080102bf
 8010258:	080102c9 	.word	0x080102c9
 801025c:	080102d3 	.word	0x080102d3
 8010260:	080102dd 	.word	0x080102dd
	{
		AS923_GET_PHY_PARAM();
 8010264:	6838      	ldr	r0, [r7, #0]
 8010266:	f001 fa9d 	bl	80117a4 <RegionAS923GetPhyParam>
 801026a:	4603      	mov	r3, r0
 801026c:	e03c      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		AU915_GET_PHY_PARAM();
 801026e:	6838      	ldr	r0, [r7, #0]
 8010270:	f002 fd92 	bl	8012d98 <RegionAU915GetPhyParam>
 8010274:	4603      	mov	r3, r0
 8010276:	e037      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		CN470_GET_PHY_PARAM();
 8010278:	6838      	ldr	r0, [r7, #0]
 801027a:	f003 fe33 	bl	8013ee4 <RegionCN470GetPhyParam>
 801027e:	4603      	mov	r3, r0
 8010280:	e032      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		CN779_GET_PHY_PARAM();
 8010282:	6838      	ldr	r0, [r7, #0]
 8010284:	f004 fe80 	bl	8014f88 <RegionCN779GetPhyParam>
 8010288:	4603      	mov	r3, r0
 801028a:	e02d      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		EU433_GET_PHY_PARAM();
 801028c:	6838      	ldr	r0, [r7, #0]
 801028e:	f006 fe2f 	bl	8016ef0 <RegionEU433GetPhyParam>
 8010292:	4603      	mov	r3, r0
 8010294:	e028      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		EU868_GET_PHY_PARAM();
 8010296:	6838      	ldr	r0, [r7, #0]
 8010298:	f008 f8ca 	bl	8018430 <RegionEU868GetPhyParam>
 801029c:	4603      	mov	r3, r0
 801029e:	e023      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		KR920_GET_PHY_PARAM();
 80102a0:	6838      	ldr	r0, [r7, #0]
 80102a2:	f00a fdbf 	bl	801ae24 <RegionKR920GetPhyParam>
 80102a6:	4603      	mov	r3, r0
 80102a8:	e01e      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		IN865_GET_PHY_PARAM();
 80102aa:	6838      	ldr	r0, [r7, #0]
 80102ac:	f009 fb3c 	bl	8019928 <RegionIN865GetPhyParam>
 80102b0:	4603      	mov	r3, r0
 80102b2:	e019      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		US915_GET_PHY_PARAM();
 80102b4:	6838      	ldr	r0, [r7, #0]
 80102b6:	f00d fa25 	bl	801d704 <RegionUS915GetPhyParam>
 80102ba:	4603      	mov	r3, r0
 80102bc:	e014      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		AS923_2_GET_PHY_PARAM();
 80102be:	6838      	ldr	r0, [r7, #0]
 80102c0:	f001 fa70 	bl	80117a4 <RegionAS923GetPhyParam>
 80102c4:	4603      	mov	r3, r0
 80102c6:	e00f      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		AS923_3_GET_PHY_PARAM();
 80102c8:	6838      	ldr	r0, [r7, #0]
 80102ca:	f001 fa6b 	bl	80117a4 <RegionAS923GetPhyParam>
 80102ce:	4603      	mov	r3, r0
 80102d0:	e00a      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		AS923_4_GET_PHY_PARAM();
 80102d2:	6838      	ldr	r0, [r7, #0]
 80102d4:	f001 fa66 	bl	80117a4 <RegionAS923GetPhyParam>
 80102d8:	4603      	mov	r3, r0
 80102da:	e005      	b.n	80102e8 <RegionGetPhyParam+0xd4>
		RU864_GET_PHY_PARAM();
 80102dc:	6838      	ldr	r0, [r7, #0]
 80102de:	f00b ffad 	bl	801c23c <RegionRU864GetPhyParam>
 80102e2:	4603      	mov	r3, r0
 80102e4:	e000      	b.n	80102e8 <RegionGetPhyParam+0xd4>
	default:
	{
		return phyParam;
 80102e6:	68fb      	ldr	r3, [r7, #12]
	}
	}
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <RegionSetBandTxDone>:

void RegionSetBandTxDone(LoRaMacRegion_t region, SetBandTxDoneParams_t *txDone)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	4603      	mov	r3, r0
 80102f8:	6039      	str	r1, [r7, #0]
 80102fa:	71fb      	strb	r3, [r7, #7]
	switch (region)
 80102fc:	79fb      	ldrb	r3, [r7, #7]
 80102fe:	2b0c      	cmp	r3, #12
 8010300:	d850      	bhi.n	80103a4 <RegionSetBandTxDone+0xb4>
 8010302:	a201      	add	r2, pc, #4	@ (adr r2, 8010308 <RegionSetBandTxDone+0x18>)
 8010304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010308:	0801033d 	.word	0x0801033d
 801030c:	08010345 	.word	0x08010345
 8010310:	0801034d 	.word	0x0801034d
 8010314:	08010355 	.word	0x08010355
 8010318:	0801035d 	.word	0x0801035d
 801031c:	08010365 	.word	0x08010365
 8010320:	0801036d 	.word	0x0801036d
 8010324:	08010375 	.word	0x08010375
 8010328:	0801037d 	.word	0x0801037d
 801032c:	08010385 	.word	0x08010385
 8010330:	0801038d 	.word	0x0801038d
 8010334:	08010395 	.word	0x08010395
 8010338:	0801039d 	.word	0x0801039d
	{
		AS923_SET_BAND_TX_DONE();
 801033c:	6838      	ldr	r0, [r7, #0]
 801033e:	f001 fb3f 	bl	80119c0 <RegionAS923SetBandTxDone>
 8010342:	e030      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		AU915_SET_BAND_TX_DONE();
 8010344:	6838      	ldr	r0, [r7, #0]
 8010346:	f002 fdfb 	bl	8012f40 <RegionAU915SetBandTxDone>
 801034a:	e02c      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		CN470_SET_BAND_TX_DONE();
 801034c:	6838      	ldr	r0, [r7, #0]
 801034e:	f003 fe9d 	bl	801408c <RegionCN470SetBandTxDone>
 8010352:	e028      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		CN779_SET_BAND_TX_DONE();
 8010354:	6838      	ldr	r0, [r7, #0]
 8010356:	f004 feeb 	bl	8015130 <RegionCN779SetBandTxDone>
 801035a:	e024      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		EU433_SET_BAND_TX_DONE();
 801035c:	6838      	ldr	r0, [r7, #0]
 801035e:	f006 fe9b 	bl	8017098 <RegionEU433SetBandTxDone>
 8010362:	e020      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		EU868_SET_BAND_TX_DONE();
 8010364:	6838      	ldr	r0, [r7, #0]
 8010366:	f008 f937 	bl	80185d8 <RegionEU868SetBandTxDone>
 801036a:	e01c      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		KR920_SET_BAND_TX_DONE();
 801036c:	6838      	ldr	r0, [r7, #0]
 801036e:	f00a fe2d 	bl	801afcc <RegionKR920SetBandTxDone>
 8010372:	e018      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		IN865_SET_BAND_TX_DONE();
 8010374:	6838      	ldr	r0, [r7, #0]
 8010376:	f009 fbab 	bl	8019ad0 <RegionIN865SetBandTxDone>
 801037a:	e014      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		US915_SET_BAND_TX_DONE();
 801037c:	6838      	ldr	r0, [r7, #0]
 801037e:	f00d fa8f 	bl	801d8a0 <RegionUS915SetBandTxDone>
 8010382:	e010      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		AS923_2_SET_BAND_TX_DONE();
 8010384:	6838      	ldr	r0, [r7, #0]
 8010386:	f001 fb1b 	bl	80119c0 <RegionAS923SetBandTxDone>
 801038a:	e00c      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		AS923_3_SET_BAND_TX_DONE();
 801038c:	6838      	ldr	r0, [r7, #0]
 801038e:	f001 fb17 	bl	80119c0 <RegionAS923SetBandTxDone>
 8010392:	e008      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		AS923_4_SET_BAND_TX_DONE();
 8010394:	6838      	ldr	r0, [r7, #0]
 8010396:	f001 fb13 	bl	80119c0 <RegionAS923SetBandTxDone>
 801039a:	e004      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
		RU864_SET_BAND_TX_DONE();
 801039c:	6838      	ldr	r0, [r7, #0]
 801039e:	f00c f821 	bl	801c3e4 <RegionRU864SetBandTxDone>
 80103a2:	e000      	b.n	80103a6 <RegionSetBandTxDone+0xb6>
	default:
	{
		return;
 80103a4:	bf00      	nop
	}
	}
}
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <RegionInitDefaults>:

void RegionInitDefaults(LoRaMacRegion_t region, InitType_t type)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	4603      	mov	r3, r0
 80103b4:	460a      	mov	r2, r1
 80103b6:	71fb      	strb	r3, [r7, #7]
 80103b8:	4613      	mov	r3, r2
 80103ba:	71bb      	strb	r3, [r7, #6]
	switch (region)
 80103bc:	79fb      	ldrb	r3, [r7, #7]
 80103be:	2b0c      	cmp	r3, #12
 80103c0:	d85d      	bhi.n	801047e <RegionInitDefaults+0xd2>
 80103c2:	a201      	add	r2, pc, #4	@ (adr r2, 80103c8 <RegionInitDefaults+0x1c>)
 80103c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c8:	080103fd 	.word	0x080103fd
 80103cc:	08010407 	.word	0x08010407
 80103d0:	08010411 	.word	0x08010411
 80103d4:	0801041b 	.word	0x0801041b
 80103d8:	08010425 	.word	0x08010425
 80103dc:	0801042f 	.word	0x0801042f
 80103e0:	08010439 	.word	0x08010439
 80103e4:	08010443 	.word	0x08010443
 80103e8:	0801044d 	.word	0x0801044d
 80103ec:	08010457 	.word	0x08010457
 80103f0:	08010461 	.word	0x08010461
 80103f4:	0801046b 	.word	0x0801046b
 80103f8:	08010475 	.word	0x08010475
	{
		AS923_INIT_DEFAULTS();
 80103fc:	79bb      	ldrb	r3, [r7, #6]
 80103fe:	4618      	mov	r0, r3
 8010400:	f001 fb00 	bl	8011a04 <RegionAS923InitDefaults>
 8010404:	e03c      	b.n	8010480 <RegionInitDefaults+0xd4>
		AU915_INIT_DEFAULTS();
 8010406:	79bb      	ldrb	r3, [r7, #6]
 8010408:	4618      	mov	r0, r3
 801040a:	f002 fdbb 	bl	8012f84 <RegionAU915InitDefaults>
 801040e:	e037      	b.n	8010480 <RegionInitDefaults+0xd4>
		CN470_INIT_DEFAULTS();
 8010410:	79bb      	ldrb	r3, [r7, #6]
 8010412:	4618      	mov	r0, r3
 8010414:	f003 fe5c 	bl	80140d0 <RegionCN470InitDefaults>
 8010418:	e032      	b.n	8010480 <RegionInitDefaults+0xd4>
		CN779_INIT_DEFAULTS();
 801041a:	79bb      	ldrb	r3, [r7, #6]
 801041c:	4618      	mov	r0, r3
 801041e:	f004 fea9 	bl	8015174 <RegionCN779InitDefaults>
 8010422:	e02d      	b.n	8010480 <RegionInitDefaults+0xd4>
		EU433_INIT_DEFAULTS();
 8010424:	79bb      	ldrb	r3, [r7, #6]
 8010426:	4618      	mov	r0, r3
 8010428:	f006 fe58 	bl	80170dc <RegionEU433InitDefaults>
 801042c:	e028      	b.n	8010480 <RegionInitDefaults+0xd4>
		EU868_INIT_DEFAULTS();
 801042e:	79bb      	ldrb	r3, [r7, #6]
 8010430:	4618      	mov	r0, r3
 8010432:	f008 f8f3 	bl	801861c <RegionEU868InitDefaults>
 8010436:	e023      	b.n	8010480 <RegionInitDefaults+0xd4>
		KR920_INIT_DEFAULTS();
 8010438:	79bb      	ldrb	r3, [r7, #6]
 801043a:	4618      	mov	r0, r3
 801043c:	f00a fde8 	bl	801b010 <RegionKR920InitDefaults>
 8010440:	e01e      	b.n	8010480 <RegionInitDefaults+0xd4>
		IN865_INIT_DEFAULTS();
 8010442:	79bb      	ldrb	r3, [r7, #6]
 8010444:	4618      	mov	r0, r3
 8010446:	f009 fb65 	bl	8019b14 <RegionIN865InitDefaults>
 801044a:	e019      	b.n	8010480 <RegionInitDefaults+0xd4>
		US915_INIT_DEFAULTS();
 801044c:	79bb      	ldrb	r3, [r7, #6]
 801044e:	4618      	mov	r0, r3
 8010450:	f00d fa48 	bl	801d8e4 <RegionUS915InitDefaults>
 8010454:	e014      	b.n	8010480 <RegionInitDefaults+0xd4>
		AS923_2_INIT_DEFAULTS();
 8010456:	79bb      	ldrb	r3, [r7, #6]
 8010458:	4618      	mov	r0, r3
 801045a:	f001 fad3 	bl	8011a04 <RegionAS923InitDefaults>
 801045e:	e00f      	b.n	8010480 <RegionInitDefaults+0xd4>
		AS923_3_INIT_DEFAULTS();
 8010460:	79bb      	ldrb	r3, [r7, #6]
 8010462:	4618      	mov	r0, r3
 8010464:	f001 face 	bl	8011a04 <RegionAS923InitDefaults>
 8010468:	e00a      	b.n	8010480 <RegionInitDefaults+0xd4>
		AS923_4_INIT_DEFAULTS();
 801046a:	79bb      	ldrb	r3, [r7, #6]
 801046c:	4618      	mov	r0, r3
 801046e:	f001 fac9 	bl	8011a04 <RegionAS923InitDefaults>
 8010472:	e005      	b.n	8010480 <RegionInitDefaults+0xd4>
		RU864_INIT_DEFAULTS();
 8010474:	79bb      	ldrb	r3, [r7, #6]
 8010476:	4618      	mov	r0, r3
 8010478:	f00b ffd6 	bl	801c428 <RegionRU864InitDefaults>
 801047c:	e000      	b.n	8010480 <RegionInitDefaults+0xd4>
	default:
	{
		break;
 801047e:	bf00      	nop
	}
	}
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <RegionVerify>:

bool RegionVerify(LoRaMacRegion_t region, VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	4603      	mov	r3, r0
 8010490:	6039      	str	r1, [r7, #0]
 8010492:	71fb      	strb	r3, [r7, #7]
 8010494:	4613      	mov	r3, r2
 8010496:	71bb      	strb	r3, [r7, #6]
	switch (region)
 8010498:	79fb      	ldrb	r3, [r7, #7]
 801049a:	2b0c      	cmp	r3, #12
 801049c:	d877      	bhi.n	801058e <RegionVerify+0x106>
 801049e:	a201      	add	r2, pc, #4	@ (adr r2, 80104a4 <RegionVerify+0x1c>)
 80104a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104a4:	080104d9 	.word	0x080104d9
 80104a8:	080104e7 	.word	0x080104e7
 80104ac:	080104f5 	.word	0x080104f5
 80104b0:	08010503 	.word	0x08010503
 80104b4:	08010511 	.word	0x08010511
 80104b8:	0801051f 	.word	0x0801051f
 80104bc:	0801052d 	.word	0x0801052d
 80104c0:	0801053b 	.word	0x0801053b
 80104c4:	08010549 	.word	0x08010549
 80104c8:	08010557 	.word	0x08010557
 80104cc:	08010565 	.word	0x08010565
 80104d0:	08010573 	.word	0x08010573
 80104d4:	08010581 	.word	0x08010581
	{
		AS923_VERIFY();
 80104d8:	79bb      	ldrb	r3, [r7, #6]
 80104da:	4619      	mov	r1, r3
 80104dc:	6838      	ldr	r0, [r7, #0]
 80104de:	f001 fad9 	bl	8011a94 <RegionAS923Verify>
 80104e2:	4603      	mov	r3, r0
 80104e4:	e054      	b.n	8010590 <RegionVerify+0x108>
		AU915_VERIFY();
 80104e6:	79bb      	ldrb	r3, [r7, #6]
 80104e8:	4619      	mov	r1, r3
 80104ea:	6838      	ldr	r0, [r7, #0]
 80104ec:	f002 fe12 	bl	8013114 <RegionAU915Verify>
 80104f0:	4603      	mov	r3, r0
 80104f2:	e04d      	b.n	8010590 <RegionVerify+0x108>
		CN470_VERIFY();
 80104f4:	79bb      	ldrb	r3, [r7, #6]
 80104f6:	4619      	mov	r1, r3
 80104f8:	6838      	ldr	r0, [r7, #0]
 80104fa:	f003 fe5d 	bl	80141b8 <RegionCN470Verify>
 80104fe:	4603      	mov	r3, r0
 8010500:	e046      	b.n	8010590 <RegionVerify+0x108>
		CN779_VERIFY();
 8010502:	79bb      	ldrb	r3, [r7, #6]
 8010504:	4619      	mov	r1, r3
 8010506:	6838      	ldr	r0, [r7, #0]
 8010508:	f004 fe7e 	bl	8015208 <RegionCN779Verify>
 801050c:	4603      	mov	r3, r0
 801050e:	e03f      	b.n	8010590 <RegionVerify+0x108>
		EU433_VERIFY();
 8010510:	79bb      	ldrb	r3, [r7, #6]
 8010512:	4619      	mov	r1, r3
 8010514:	6838      	ldr	r0, [r7, #0]
 8010516:	f006 fe2b 	bl	8017170 <RegionEU433Verify>
 801051a:	4603      	mov	r3, r0
 801051c:	e038      	b.n	8010590 <RegionVerify+0x108>
		EU868_VERIFY();
 801051e:	79bb      	ldrb	r3, [r7, #6]
 8010520:	4619      	mov	r1, r3
 8010522:	6838      	ldr	r0, [r7, #0]
 8010524:	f008 f8c4 	bl	80186b0 <RegionEU868Verify>
 8010528:	4603      	mov	r3, r0
 801052a:	e031      	b.n	8010590 <RegionVerify+0x108>
		KR920_VERIFY();
 801052c:	79bb      	ldrb	r3, [r7, #6]
 801052e:	4619      	mov	r1, r3
 8010530:	6838      	ldr	r0, [r7, #0]
 8010532:	f00a fdd7 	bl	801b0e4 <RegionKR920Verify>
 8010536:	4603      	mov	r3, r0
 8010538:	e02a      	b.n	8010590 <RegionVerify+0x108>
		IN865_VERIFY();
 801053a:	79bb      	ldrb	r3, [r7, #6]
 801053c:	4619      	mov	r1, r3
 801053e:	6838      	ldr	r0, [r7, #0]
 8010540:	f009 fb32 	bl	8019ba8 <RegionIN865Verify>
 8010544:	4603      	mov	r3, r0
 8010546:	e023      	b.n	8010590 <RegionVerify+0x108>
		US915_VERIFY();
 8010548:	79bb      	ldrb	r3, [r7, #6]
 801054a:	4619      	mov	r1, r3
 801054c:	6838      	ldr	r0, [r7, #0]
 801054e:	f00d fa91 	bl	801da74 <RegionUS915Verify>
 8010552:	4603      	mov	r3, r0
 8010554:	e01c      	b.n	8010590 <RegionVerify+0x108>
		AS923_2_VERIFY();
 8010556:	79bb      	ldrb	r3, [r7, #6]
 8010558:	4619      	mov	r1, r3
 801055a:	6838      	ldr	r0, [r7, #0]
 801055c:	f001 fa9a 	bl	8011a94 <RegionAS923Verify>
 8010560:	4603      	mov	r3, r0
 8010562:	e015      	b.n	8010590 <RegionVerify+0x108>
		AS923_3_VERIFY();
 8010564:	79bb      	ldrb	r3, [r7, #6]
 8010566:	4619      	mov	r1, r3
 8010568:	6838      	ldr	r0, [r7, #0]
 801056a:	f001 fa93 	bl	8011a94 <RegionAS923Verify>
 801056e:	4603      	mov	r3, r0
 8010570:	e00e      	b.n	8010590 <RegionVerify+0x108>
		AS923_4_VERIFY();
 8010572:	79bb      	ldrb	r3, [r7, #6]
 8010574:	4619      	mov	r1, r3
 8010576:	6838      	ldr	r0, [r7, #0]
 8010578:	f001 fa8c 	bl	8011a94 <RegionAS923Verify>
 801057c:	4603      	mov	r3, r0
 801057e:	e007      	b.n	8010590 <RegionVerify+0x108>
		RU864_VERIFY();
 8010580:	79bb      	ldrb	r3, [r7, #6]
 8010582:	4619      	mov	r1, r3
 8010584:	6838      	ldr	r0, [r7, #0]
 8010586:	f00b ffb7 	bl	801c4f8 <RegionRU864Verify>
 801058a:	4603      	mov	r3, r0
 801058c:	e000      	b.n	8010590 <RegionVerify+0x108>
	default:
	{
		return false;
 801058e:	2300      	movs	r3, #0
	}
	}
}
 8010590:	4618      	mov	r0, r3
 8010592:	3708      	adds	r7, #8
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <RegionApplyCFList>:

void RegionApplyCFList(LoRaMacRegion_t region, ApplyCFListParams_t *applyCFList)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	4603      	mov	r3, r0
 80105a0:	6039      	str	r1, [r7, #0]
 80105a2:	71fb      	strb	r3, [r7, #7]
	switch (region)
 80105a4:	79fb      	ldrb	r3, [r7, #7]
 80105a6:	2b0c      	cmp	r3, #12
 80105a8:	d850      	bhi.n	801064c <RegionApplyCFList+0xb4>
 80105aa:	a201      	add	r2, pc, #4	@ (adr r2, 80105b0 <RegionApplyCFList+0x18>)
 80105ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b0:	080105e5 	.word	0x080105e5
 80105b4:	080105ed 	.word	0x080105ed
 80105b8:	080105f5 	.word	0x080105f5
 80105bc:	080105fd 	.word	0x080105fd
 80105c0:	08010605 	.word	0x08010605
 80105c4:	0801060d 	.word	0x0801060d
 80105c8:	08010615 	.word	0x08010615
 80105cc:	0801061d 	.word	0x0801061d
 80105d0:	08010625 	.word	0x08010625
 80105d4:	0801062d 	.word	0x0801062d
 80105d8:	08010635 	.word	0x08010635
 80105dc:	0801063d 	.word	0x0801063d
 80105e0:	08010645 	.word	0x08010645
	{
		AS923_APPLY_CF_LIST();
 80105e4:	6838      	ldr	r0, [r7, #0]
 80105e6:	f001 fb05 	bl	8011bf4 <RegionAS923ApplyCFList>
 80105ea:	e030      	b.n	801064e <RegionApplyCFList+0xb6>
		AU915_APPLY_CF_LIST();
 80105ec:	6838      	ldr	r0, [r7, #0]
 80105ee:	f002 fe13 	bl	8013218 <RegionAU915ApplyCFList>
 80105f2:	e02c      	b.n	801064e <RegionApplyCFList+0xb6>
		CN470_APPLY_CF_LIST();
 80105f4:	6838      	ldr	r0, [r7, #0]
 80105f6:	f003 fe61 	bl	80142bc <RegionCN470ApplyCFList>
 80105fa:	e028      	b.n	801064e <RegionApplyCFList+0xb6>
		CN779_APPLY_CF_LIST();
 80105fc:	6838      	ldr	r0, [r7, #0]
 80105fe:	f004 fe93 	bl	8015328 <RegionCN779ApplyCFList>
 8010602:	e024      	b.n	801064e <RegionApplyCFList+0xb6>
		EU433_APPLY_CF_LIST();
 8010604:	6838      	ldr	r0, [r7, #0]
 8010606:	f006 fe43 	bl	8017290 <RegionEU433ApplyCFList>
 801060a:	e020      	b.n	801064e <RegionApplyCFList+0xb6>
		EU868_APPLY_CF_LIST();
 801060c:	6838      	ldr	r0, [r7, #0]
 801060e:	f008 f8df 	bl	80187d0 <RegionEU868ApplyCFList>
 8010612:	e01c      	b.n	801064e <RegionApplyCFList+0xb6>
		KR920_APPLY_CF_LIST();
 8010614:	6838      	ldr	r0, [r7, #0]
 8010616:	f00a fdf5 	bl	801b204 <RegionKR920ApplyCFList>
 801061a:	e018      	b.n	801064e <RegionApplyCFList+0xb6>
		IN865_APPLY_CF_LIST();
 801061c:	6838      	ldr	r0, [r7, #0]
 801061e:	f009 fb53 	bl	8019cc8 <RegionIN865ApplyCFList>
 8010622:	e014      	b.n	801064e <RegionApplyCFList+0xb6>
		US915_APPLY_CF_LIST();
 8010624:	6838      	ldr	r0, [r7, #0]
 8010626:	f00d fab5 	bl	801db94 <RegionUS915ApplyCFList>
 801062a:	e010      	b.n	801064e <RegionApplyCFList+0xb6>
		AS923_2_APPLY_CF_LIST();
 801062c:	6838      	ldr	r0, [r7, #0]
 801062e:	f001 fae1 	bl	8011bf4 <RegionAS923ApplyCFList>
 8010632:	e00c      	b.n	801064e <RegionApplyCFList+0xb6>
		AS923_3_APPLY_CF_LIST();
 8010634:	6838      	ldr	r0, [r7, #0]
 8010636:	f001 fadd 	bl	8011bf4 <RegionAS923ApplyCFList>
 801063a:	e008      	b.n	801064e <RegionApplyCFList+0xb6>
		AS923_4_APPLY_CF_LIST();
 801063c:	6838      	ldr	r0, [r7, #0]
 801063e:	f001 fad9 	bl	8011bf4 <RegionAS923ApplyCFList>
 8010642:	e004      	b.n	801064e <RegionApplyCFList+0xb6>
		RU864_APPLY_CF_LIST();
 8010644:	6838      	ldr	r0, [r7, #0]
 8010646:	f00b ffe1 	bl	801c60c <RegionRU864ApplyCFList>
 801064a:	e000      	b.n	801064e <RegionApplyCFList+0xb6>
	default:
	{
		break;
 801064c:	bf00      	nop
	}
	}
}
 801064e:	bf00      	nop
 8010650:	3708      	adds	r7, #8
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop

08010658 <RegionChanMaskSet>:

bool RegionChanMaskSet(LoRaMacRegion_t region, ChanMaskSetParams_t *chanMaskSet)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	6039      	str	r1, [r7, #0]
 8010662:	71fb      	strb	r3, [r7, #7]
	switch (region)
 8010664:	79fb      	ldrb	r3, [r7, #7]
 8010666:	2b0c      	cmp	r3, #12
 8010668:	d85d      	bhi.n	8010726 <RegionChanMaskSet+0xce>
 801066a:	a201      	add	r2, pc, #4	@ (adr r2, 8010670 <RegionChanMaskSet+0x18>)
 801066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010670:	080106a5 	.word	0x080106a5
 8010674:	080106af 	.word	0x080106af
 8010678:	080106b9 	.word	0x080106b9
 801067c:	080106c3 	.word	0x080106c3
 8010680:	080106cd 	.word	0x080106cd
 8010684:	080106d7 	.word	0x080106d7
 8010688:	080106e1 	.word	0x080106e1
 801068c:	080106eb 	.word	0x080106eb
 8010690:	080106f5 	.word	0x080106f5
 8010694:	080106ff 	.word	0x080106ff
 8010698:	08010709 	.word	0x08010709
 801069c:	08010713 	.word	0x08010713
 80106a0:	0801071d 	.word	0x0801071d
	{
		AS923_CHAN_MASK_SET();
 80106a4:	6838      	ldr	r0, [r7, #0]
 80106a6:	f001 fb11 	bl	8011ccc <RegionAS923ChanMaskSet>
 80106aa:	4603      	mov	r3, r0
 80106ac:	e03c      	b.n	8010728 <RegionChanMaskSet+0xd0>
		AU915_CHAN_MASK_SET();
 80106ae:	6838      	ldr	r0, [r7, #0]
 80106b0:	f002 fdbc 	bl	801322c <RegionAU915ChanMaskSet>
 80106b4:	4603      	mov	r3, r0
 80106b6:	e037      	b.n	8010728 <RegionChanMaskSet+0xd0>
		CN470_CHAN_MASK_SET();
 80106b8:	6838      	ldr	r0, [r7, #0]
 80106ba:	f003 fe09 	bl	80142d0 <RegionCN470ChanMaskSet>
 80106be:	4603      	mov	r3, r0
 80106c0:	e032      	b.n	8010728 <RegionChanMaskSet+0xd0>
		CN779_CHAN_MASK_SET();
 80106c2:	6838      	ldr	r0, [r7, #0]
 80106c4:	f004 fe9c 	bl	8015400 <RegionCN779ChanMaskSet>
 80106c8:	4603      	mov	r3, r0
 80106ca:	e02d      	b.n	8010728 <RegionChanMaskSet+0xd0>
		EU433_CHAN_MASK_SET();
 80106cc:	6838      	ldr	r0, [r7, #0]
 80106ce:	f006 fe4b 	bl	8017368 <RegionEU433ChanMaskSet>
 80106d2:	4603      	mov	r3, r0
 80106d4:	e028      	b.n	8010728 <RegionChanMaskSet+0xd0>
		EU868_CHAN_MASK_SET();
 80106d6:	6838      	ldr	r0, [r7, #0]
 80106d8:	f008 f8e6 	bl	80188a8 <RegionEU868ChanMaskSet>
 80106dc:	4603      	mov	r3, r0
 80106de:	e023      	b.n	8010728 <RegionChanMaskSet+0xd0>
		KR920_CHAN_MASK_SET();
 80106e0:	6838      	ldr	r0, [r7, #0]
 80106e2:	f00a fdfb 	bl	801b2dc <RegionKR920ChanMaskSet>
 80106e6:	4603      	mov	r3, r0
 80106e8:	e01e      	b.n	8010728 <RegionChanMaskSet+0xd0>
		IN865_CHAN_MASK_SET();
 80106ea:	6838      	ldr	r0, [r7, #0]
 80106ec:	f009 fb58 	bl	8019da0 <RegionIN865ChanMaskSet>
 80106f0:	4603      	mov	r3, r0
 80106f2:	e019      	b.n	8010728 <RegionChanMaskSet+0xd0>
		US915_CHAN_MASK_SET();
 80106f4:	6838      	ldr	r0, [r7, #0]
 80106f6:	f00d fa57 	bl	801dba8 <RegionUS915ChanMaskSet>
 80106fa:	4603      	mov	r3, r0
 80106fc:	e014      	b.n	8010728 <RegionChanMaskSet+0xd0>
		AS923_2_CHAN_MASK_SET();
 80106fe:	6838      	ldr	r0, [r7, #0]
 8010700:	f001 fae4 	bl	8011ccc <RegionAS923ChanMaskSet>
 8010704:	4603      	mov	r3, r0
 8010706:	e00f      	b.n	8010728 <RegionChanMaskSet+0xd0>
		AS923_3_CHAN_MASK_SET();
 8010708:	6838      	ldr	r0, [r7, #0]
 801070a:	f001 fadf 	bl	8011ccc <RegionAS923ChanMaskSet>
 801070e:	4603      	mov	r3, r0
 8010710:	e00a      	b.n	8010728 <RegionChanMaskSet+0xd0>
		AS923_4_CHAN_MASK_SET();
 8010712:	6838      	ldr	r0, [r7, #0]
 8010714:	f001 fada 	bl	8011ccc <RegionAS923ChanMaskSet>
 8010718:	4603      	mov	r3, r0
 801071a:	e005      	b.n	8010728 <RegionChanMaskSet+0xd0>
		RU864_CHAN_MASK_SET();
 801071c:	6838      	ldr	r0, [r7, #0]
 801071e:	f00b ffe1 	bl	801c6e4 <RegionRU864ChanMaskSet>
 8010722:	4603      	mov	r3, r0
 8010724:	e000      	b.n	8010728 <RegionChanMaskSet+0xd0>
	default:
	{
		return false;
 8010726:	2300      	movs	r3, #0
	}
	}
}
 8010728:	4618      	mov	r0, r3
 801072a:	3708      	adds	r7, #8
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <RegionAdrNext>:

bool RegionAdrNext(LoRaMacRegion_t region, AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	af00      	add	r7, sp, #0
 8010736:	60b9      	str	r1, [r7, #8]
 8010738:	607a      	str	r2, [r7, #4]
 801073a:	603b      	str	r3, [r7, #0]
 801073c:	4603      	mov	r3, r0
 801073e:	73fb      	strb	r3, [r7, #15]
	switch (region)
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	2b0c      	cmp	r3, #12
 8010744:	f200 8086 	bhi.w	8010854 <RegionAdrNext+0x124>
 8010748:	a201      	add	r2, pc, #4	@ (adr r2, 8010750 <RegionAdrNext+0x20>)
 801074a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801074e:	bf00      	nop
 8010750:	08010785 	.word	0x08010785
 8010754:	08010795 	.word	0x08010795
 8010758:	080107a5 	.word	0x080107a5
 801075c:	080107b5 	.word	0x080107b5
 8010760:	080107c5 	.word	0x080107c5
 8010764:	080107d5 	.word	0x080107d5
 8010768:	080107e5 	.word	0x080107e5
 801076c:	080107f5 	.word	0x080107f5
 8010770:	08010805 	.word	0x08010805
 8010774:	08010815 	.word	0x08010815
 8010778:	08010825 	.word	0x08010825
 801077c:	08010835 	.word	0x08010835
 8010780:	08010845 	.word	0x08010845
	{
		AS923_ADR_NEXT();
 8010784:	69bb      	ldr	r3, [r7, #24]
 8010786:	683a      	ldr	r2, [r7, #0]
 8010788:	6879      	ldr	r1, [r7, #4]
 801078a:	68b8      	ldr	r0, [r7, #8]
 801078c:	f001 fac4 	bl	8011d18 <RegionAS923AdrNext>
 8010790:	4603      	mov	r3, r0
 8010792:	e060      	b.n	8010856 <RegionAdrNext+0x126>
		AU915_ADR_NEXT();
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	683a      	ldr	r2, [r7, #0]
 8010798:	6879      	ldr	r1, [r7, #4]
 801079a:	68b8      	ldr	r0, [r7, #8]
 801079c:	f002 fd96 	bl	80132cc <RegionAU915AdrNext>
 80107a0:	4603      	mov	r3, r0
 80107a2:	e058      	b.n	8010856 <RegionAdrNext+0x126>
		CN470_ADR_NEXT();
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	683a      	ldr	r2, [r7, #0]
 80107a8:	6879      	ldr	r1, [r7, #4]
 80107aa:	68b8      	ldr	r0, [r7, #8]
 80107ac:	f003 fdb6 	bl	801431c <RegionCN470AdrNext>
 80107b0:	4603      	mov	r3, r0
 80107b2:	e050      	b.n	8010856 <RegionAdrNext+0x126>
		CN779_ADR_NEXT();
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	683a      	ldr	r2, [r7, #0]
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	68b8      	ldr	r0, [r7, #8]
 80107bc:	f004 fe46 	bl	801544c <RegionCN779AdrNext>
 80107c0:	4603      	mov	r3, r0
 80107c2:	e048      	b.n	8010856 <RegionAdrNext+0x126>
		EU433_ADR_NEXT();
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	683a      	ldr	r2, [r7, #0]
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	68b8      	ldr	r0, [r7, #8]
 80107cc:	f006 fdf2 	bl	80173b4 <RegionEU433AdrNext>
 80107d0:	4603      	mov	r3, r0
 80107d2:	e040      	b.n	8010856 <RegionAdrNext+0x126>
		EU868_ADR_NEXT();
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	683a      	ldr	r2, [r7, #0]
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	68b8      	ldr	r0, [r7, #8]
 80107dc:	f008 f88a 	bl	80188f4 <RegionEU868AdrNext>
 80107e0:	4603      	mov	r3, r0
 80107e2:	e038      	b.n	8010856 <RegionAdrNext+0x126>
		KR920_ADR_NEXT();
 80107e4:	69bb      	ldr	r3, [r7, #24]
 80107e6:	683a      	ldr	r2, [r7, #0]
 80107e8:	6879      	ldr	r1, [r7, #4]
 80107ea:	68b8      	ldr	r0, [r7, #8]
 80107ec:	f00a fd9c 	bl	801b328 <RegionKR920AdrNext>
 80107f0:	4603      	mov	r3, r0
 80107f2:	e030      	b.n	8010856 <RegionAdrNext+0x126>
		IN865_ADR_NEXT();
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	6879      	ldr	r1, [r7, #4]
 80107fa:	68b8      	ldr	r0, [r7, #8]
 80107fc:	f009 faf6 	bl	8019dec <RegionIN865AdrNext>
 8010800:	4603      	mov	r3, r0
 8010802:	e028      	b.n	8010856 <RegionAdrNext+0x126>
		US915_ADR_NEXT();
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	683a      	ldr	r2, [r7, #0]
 8010808:	6879      	ldr	r1, [r7, #4]
 801080a:	68b8      	ldr	r0, [r7, #8]
 801080c:	f00d fa1c 	bl	801dc48 <RegionUS915AdrNext>
 8010810:	4603      	mov	r3, r0
 8010812:	e020      	b.n	8010856 <RegionAdrNext+0x126>
		AS923_2_ADR_NEXT();
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	683a      	ldr	r2, [r7, #0]
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	68b8      	ldr	r0, [r7, #8]
 801081c:	f001 fa7c 	bl	8011d18 <RegionAS923AdrNext>
 8010820:	4603      	mov	r3, r0
 8010822:	e018      	b.n	8010856 <RegionAdrNext+0x126>
		AS923_3_ADR_NEXT();
 8010824:	69bb      	ldr	r3, [r7, #24]
 8010826:	683a      	ldr	r2, [r7, #0]
 8010828:	6879      	ldr	r1, [r7, #4]
 801082a:	68b8      	ldr	r0, [r7, #8]
 801082c:	f001 fa74 	bl	8011d18 <RegionAS923AdrNext>
 8010830:	4603      	mov	r3, r0
 8010832:	e010      	b.n	8010856 <RegionAdrNext+0x126>
		AS923_4_ADR_NEXT();
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	683a      	ldr	r2, [r7, #0]
 8010838:	6879      	ldr	r1, [r7, #4]
 801083a:	68b8      	ldr	r0, [r7, #8]
 801083c:	f001 fa6c 	bl	8011d18 <RegionAS923AdrNext>
 8010840:	4603      	mov	r3, r0
 8010842:	e008      	b.n	8010856 <RegionAdrNext+0x126>
		RU864_ADR_NEXT();
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	6879      	ldr	r1, [r7, #4]
 801084a:	68b8      	ldr	r0, [r7, #8]
 801084c:	f00b ff70 	bl	801c730 <RegionRU864AdrNext>
 8010850:	4603      	mov	r3, r0
 8010852:	e000      	b.n	8010856 <RegionAdrNext+0x126>
	default:
	{
		return false;
 8010854:	2300      	movs	r3, #0
	}
	}
}
 8010856:	4618      	mov	r0, r3
 8010858:	3710      	adds	r7, #16
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop

08010860 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters(LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	603b      	str	r3, [r7, #0]
 8010868:	4603      	mov	r3, r0
 801086a:	71fb      	strb	r3, [r7, #7]
 801086c:	460b      	mov	r3, r1
 801086e:	71bb      	strb	r3, [r7, #6]
 8010870:	4613      	mov	r3, r2
 8010872:	717b      	strb	r3, [r7, #5]
	switch (region)
 8010874:	79fb      	ldrb	r3, [r7, #7]
 8010876:	2b0c      	cmp	r3, #12
 8010878:	f200 8086 	bhi.w	8010988 <RegionComputeRxWindowParameters+0x128>
 801087c:	a201      	add	r2, pc, #4	@ (adr r2, 8010884 <RegionComputeRxWindowParameters+0x24>)
 801087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010882:	bf00      	nop
 8010884:	080108b9 	.word	0x080108b9
 8010888:	080108c9 	.word	0x080108c9
 801088c:	080108d9 	.word	0x080108d9
 8010890:	080108e9 	.word	0x080108e9
 8010894:	080108f9 	.word	0x080108f9
 8010898:	08010909 	.word	0x08010909
 801089c:	08010919 	.word	0x08010919
 80108a0:	08010929 	.word	0x08010929
 80108a4:	08010939 	.word	0x08010939
 80108a8:	08010949 	.word	0x08010949
 80108ac:	08010959 	.word	0x08010959
 80108b0:	08010969 	.word	0x08010969
 80108b4:	08010979 	.word	0x08010979
	{
		AS923_COMPUTE_RX_WINDOW_PARAMETERS();
 80108b8:	7979      	ldrb	r1, [r7, #5]
 80108ba:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	683a      	ldr	r2, [r7, #0]
 80108c2:	f001 faa9 	bl	8011e18 <RegionAS923ComputeRxWindowParameters>
 80108c6:	e060      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		AU915_COMPUTE_RX_WINDOW_PARAMETERS();
 80108c8:	7979      	ldrb	r1, [r7, #5]
 80108ca:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	683a      	ldr	r2, [r7, #0]
 80108d2:	f002 fd6f 	bl	80133b4 <RegionAU915ComputeRxWindowParameters>
 80108d6:	e058      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		CN470_COMPUTE_RX_WINDOW_PARAMETERS();
 80108d8:	7979      	ldrb	r1, [r7, #5]
 80108da:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	683a      	ldr	r2, [r7, #0]
 80108e2:	f003 fd91 	bl	8014408 <RegionCN470ComputeRxWindowParameters>
 80108e6:	e050      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		CN779_COMPUTE_RX_WINDOW_PARAMETERS();
 80108e8:	7979      	ldrb	r1, [r7, #5]
 80108ea:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	683a      	ldr	r2, [r7, #0]
 80108f2:	f004 fe0f 	bl	8015514 <RegionCN779ComputeRxWindowParameters>
 80108f6:	e048      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		EU433_COMPUTE_RX_WINDOW_PARAMETERS();
 80108f8:	7979      	ldrb	r1, [r7, #5]
 80108fa:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	f006 fdbb 	bl	801747c <RegionEU433ComputeRxWindowParameters>
 8010906:	e040      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		EU868_COMPUTE_RX_WINDOW_PARAMETERS();
 8010908:	7979      	ldrb	r1, [r7, #5]
 801090a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	683a      	ldr	r2, [r7, #0]
 8010912:	f008 f853 	bl	80189bc <RegionEU868ComputeRxWindowParameters>
 8010916:	e038      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		KR920_COMPUTE_RX_WINDOW_PARAMETERS();
 8010918:	7979      	ldrb	r1, [r7, #5]
 801091a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	f00a fd65 	bl	801b3f0 <RegionKR920ComputeRxWindowParameters>
 8010926:	e030      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		IN865_COMPUTE_RX_WINDOW_PARAMETERS();
 8010928:	7979      	ldrb	r1, [r7, #5]
 801092a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	f009 fabf 	bl	8019eb4 <RegionIN865ComputeRxWindowParameters>
 8010936:	e028      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		US915_COMPUTE_RX_WINDOW_PARAMETERS();
 8010938:	7979      	ldrb	r1, [r7, #5]
 801093a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	683a      	ldr	r2, [r7, #0]
 8010942:	f00d f9f5 	bl	801dd30 <RegionUS915ComputeRxWindowParameters>
 8010946:	e020      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		AS923_2_COMPUTE_RX_WINDOW_PARAMETERS();
 8010948:	7979      	ldrb	r1, [r7, #5]
 801094a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	683a      	ldr	r2, [r7, #0]
 8010952:	f001 fa61 	bl	8011e18 <RegionAS923ComputeRxWindowParameters>
 8010956:	e018      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		AS923_3_COMPUTE_RX_WINDOW_PARAMETERS();
 8010958:	7979      	ldrb	r1, [r7, #5]
 801095a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	683a      	ldr	r2, [r7, #0]
 8010962:	f001 fa59 	bl	8011e18 <RegionAS923ComputeRxWindowParameters>
 8010966:	e010      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		AS923_4_COMPUTE_RX_WINDOW_PARAMETERS();
 8010968:	7979      	ldrb	r1, [r7, #5]
 801096a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	f001 fa51 	bl	8011e18 <RegionAS923ComputeRxWindowParameters>
 8010976:	e008      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
		RU864_COMPUTE_RX_WINDOW_PARAMETERS();
 8010978:	7979      	ldrb	r1, [r7, #5]
 801097a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	f00b ff55 	bl	801c830 <RegionRU864ComputeRxWindowParameters>
 8010986:	e000      	b.n	801098a <RegionComputeRxWindowParameters+0x12a>
	default:
	{
		break;
 8010988:	bf00      	nop
	}
	}
}
 801098a:	bf00      	nop
 801098c:	3708      	adds	r7, #8
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop

08010994 <RegionRxConfig>:

bool RegionRxConfig(LoRaMacRegion_t region, RxConfigParams_t *rxConfig, int8_t *datarate)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	73fb      	strb	r3, [r7, #15]
	switch (region)
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
 80109a4:	2b0c      	cmp	r3, #12
 80109a6:	d86b      	bhi.n	8010a80 <RegionRxConfig+0xec>
 80109a8:	a201      	add	r2, pc, #4	@ (adr r2, 80109b0 <RegionRxConfig+0x1c>)
 80109aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ae:	bf00      	nop
 80109b0:	080109e5 	.word	0x080109e5
 80109b4:	080109f1 	.word	0x080109f1
 80109b8:	080109fd 	.word	0x080109fd
 80109bc:	08010a09 	.word	0x08010a09
 80109c0:	08010a15 	.word	0x08010a15
 80109c4:	08010a21 	.word	0x08010a21
 80109c8:	08010a2d 	.word	0x08010a2d
 80109cc:	08010a39 	.word	0x08010a39
 80109d0:	08010a45 	.word	0x08010a45
 80109d4:	08010a51 	.word	0x08010a51
 80109d8:	08010a5d 	.word	0x08010a5d
 80109dc:	08010a69 	.word	0x08010a69
 80109e0:	08010a75 	.word	0x08010a75
	{
		AS923_RX_CONFIG();
 80109e4:	6879      	ldr	r1, [r7, #4]
 80109e6:	68b8      	ldr	r0, [r7, #8]
 80109e8:	f001 fa72 	bl	8011ed0 <RegionAS923RxConfig>
 80109ec:	4603      	mov	r3, r0
 80109ee:	e048      	b.n	8010a82 <RegionRxConfig+0xee>
		AU915_RX_CONFIG();
 80109f0:	6879      	ldr	r1, [r7, #4]
 80109f2:	68b8      	ldr	r0, [r7, #8]
 80109f4:	f002 fd28 	bl	8013448 <RegionAU915RxConfig>
 80109f8:	4603      	mov	r3, r0
 80109fa:	e042      	b.n	8010a82 <RegionRxConfig+0xee>
		CN470_RX_CONFIG();
 80109fc:	6879      	ldr	r1, [r7, #4]
 80109fe:	68b8      	ldr	r0, [r7, #8]
 8010a00:	f003 fd4c 	bl	801449c <RegionCN470RxConfig>
 8010a04:	4603      	mov	r3, r0
 8010a06:	e03c      	b.n	8010a82 <RegionRxConfig+0xee>
		CN779_RX_CONFIG();
 8010a08:	6879      	ldr	r1, [r7, #4]
 8010a0a:	68b8      	ldr	r0, [r7, #8]
 8010a0c:	f004 fdde 	bl	80155cc <RegionCN779RxConfig>
 8010a10:	4603      	mov	r3, r0
 8010a12:	e036      	b.n	8010a82 <RegionRxConfig+0xee>
		EU433_RX_CONFIG();
 8010a14:	6879      	ldr	r1, [r7, #4]
 8010a16:	68b8      	ldr	r0, [r7, #8]
 8010a18:	f006 fd8c 	bl	8017534 <RegionEU433RxConfig>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	e030      	b.n	8010a82 <RegionRxConfig+0xee>
		EU868_RX_CONFIG();
 8010a20:	6879      	ldr	r1, [r7, #4]
 8010a22:	68b8      	ldr	r0, [r7, #8]
 8010a24:	f008 f826 	bl	8018a74 <RegionEU868RxConfig>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	e02a      	b.n	8010a82 <RegionRxConfig+0xee>
		KR920_RX_CONFIG();
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	68b8      	ldr	r0, [r7, #8]
 8010a30:	f00a fd28 	bl	801b484 <RegionKR920RxConfig>
 8010a34:	4603      	mov	r3, r0
 8010a36:	e024      	b.n	8010a82 <RegionRxConfig+0xee>
		IN865_RX_CONFIG();
 8010a38:	6879      	ldr	r1, [r7, #4]
 8010a3a:	68b8      	ldr	r0, [r7, #8]
 8010a3c:	f009 fa96 	bl	8019f6c <RegionIN865RxConfig>
 8010a40:	4603      	mov	r3, r0
 8010a42:	e01e      	b.n	8010a82 <RegionRxConfig+0xee>
		US915_RX_CONFIG();
 8010a44:	6879      	ldr	r1, [r7, #4]
 8010a46:	68b8      	ldr	r0, [r7, #8]
 8010a48:	f00d f9bc 	bl	801ddc4 <RegionUS915RxConfig>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	e018      	b.n	8010a82 <RegionRxConfig+0xee>
		AS923_2_RX_CONFIG();
 8010a50:	6879      	ldr	r1, [r7, #4]
 8010a52:	68b8      	ldr	r0, [r7, #8]
 8010a54:	f001 fa3c 	bl	8011ed0 <RegionAS923RxConfig>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	e012      	b.n	8010a82 <RegionRxConfig+0xee>
		AS923_3_RX_CONFIG();
 8010a5c:	6879      	ldr	r1, [r7, #4]
 8010a5e:	68b8      	ldr	r0, [r7, #8]
 8010a60:	f001 fa36 	bl	8011ed0 <RegionAS923RxConfig>
 8010a64:	4603      	mov	r3, r0
 8010a66:	e00c      	b.n	8010a82 <RegionRxConfig+0xee>
		AS923_4_RX_CONFIG();
 8010a68:	6879      	ldr	r1, [r7, #4]
 8010a6a:	68b8      	ldr	r0, [r7, #8]
 8010a6c:	f001 fa30 	bl	8011ed0 <RegionAS923RxConfig>
 8010a70:	4603      	mov	r3, r0
 8010a72:	e006      	b.n	8010a82 <RegionRxConfig+0xee>
		RU864_RX_CONFIG();
 8010a74:	6879      	ldr	r1, [r7, #4]
 8010a76:	68b8      	ldr	r0, [r7, #8]
 8010a78:	f00b ff36 	bl	801c8e8 <RegionRU864RxConfig>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	e000      	b.n	8010a82 <RegionRxConfig+0xee>
	default:
	{
		return false;
 8010a80:	2300      	movs	r3, #0
	}
	}
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop

08010a8c <RegionTxConfig>:

bool RegionTxConfig(LoRaMacRegion_t region, TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	60b9      	str	r1, [r7, #8]
 8010a94:	607a      	str	r2, [r7, #4]
 8010a96:	603b      	str	r3, [r7, #0]
 8010a98:	4603      	mov	r3, r0
 8010a9a:	73fb      	strb	r3, [r7, #15]
	switch (region)
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
 8010a9e:	2b0c      	cmp	r3, #12
 8010aa0:	d877      	bhi.n	8010b92 <RegionTxConfig+0x106>
 8010aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8010aa8 <RegionTxConfig+0x1c>)
 8010aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa8:	08010add 	.word	0x08010add
 8010aac:	08010aeb 	.word	0x08010aeb
 8010ab0:	08010af9 	.word	0x08010af9
 8010ab4:	08010b07 	.word	0x08010b07
 8010ab8:	08010b15 	.word	0x08010b15
 8010abc:	08010b23 	.word	0x08010b23
 8010ac0:	08010b31 	.word	0x08010b31
 8010ac4:	08010b3f 	.word	0x08010b3f
 8010ac8:	08010b4d 	.word	0x08010b4d
 8010acc:	08010b5b 	.word	0x08010b5b
 8010ad0:	08010b69 	.word	0x08010b69
 8010ad4:	08010b77 	.word	0x08010b77
 8010ad8:	08010b85 	.word	0x08010b85
	{
		AS923_TX_CONFIG();
 8010adc:	683a      	ldr	r2, [r7, #0]
 8010ade:	6879      	ldr	r1, [r7, #4]
 8010ae0:	68b8      	ldr	r0, [r7, #8]
 8010ae2:	f001 fab7 	bl	8012054 <RegionAS923TxConfig>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	e054      	b.n	8010b94 <RegionTxConfig+0x108>
		AU915_TX_CONFIG();
 8010aea:	683a      	ldr	r2, [r7, #0]
 8010aec:	6879      	ldr	r1, [r7, #4]
 8010aee:	68b8      	ldr	r0, [r7, #8]
 8010af0:	f002 fd26 	bl	8013540 <RegionAU915TxConfig>
 8010af4:	4603      	mov	r3, r0
 8010af6:	e04d      	b.n	8010b94 <RegionTxConfig+0x108>
		CN470_TX_CONFIG();
 8010af8:	683a      	ldr	r2, [r7, #0]
 8010afa:	6879      	ldr	r1, [r7, #4]
 8010afc:	68b8      	ldr	r0, [r7, #8]
 8010afe:	f003 fd53 	bl	80145a8 <RegionCN470TxConfig>
 8010b02:	4603      	mov	r3, r0
 8010b04:	e046      	b.n	8010b94 <RegionTxConfig+0x108>
		CN779_TX_CONFIG();
 8010b06:	683a      	ldr	r2, [r7, #0]
 8010b08:	6879      	ldr	r1, [r7, #4]
 8010b0a:	68b8      	ldr	r0, [r7, #8]
 8010b0c:	f004 fe20 	bl	8015750 <RegionCN779TxConfig>
 8010b10:	4603      	mov	r3, r0
 8010b12:	e03f      	b.n	8010b94 <RegionTxConfig+0x108>
		EU433_TX_CONFIG();
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	6879      	ldr	r1, [r7, #4]
 8010b18:	68b8      	ldr	r0, [r7, #8]
 8010b1a:	f006 fdcd 	bl	80176b8 <RegionEU433TxConfig>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	e038      	b.n	8010b94 <RegionTxConfig+0x108>
		EU868_TX_CONFIG();
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	6879      	ldr	r1, [r7, #4]
 8010b26:	68b8      	ldr	r0, [r7, #8]
 8010b28:	f008 f866 	bl	8018bf8 <RegionEU868TxConfig>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	e031      	b.n	8010b94 <RegionTxConfig+0x108>
		KR920_TX_CONFIG();
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	6879      	ldr	r1, [r7, #4]
 8010b34:	68b8      	ldr	r0, [r7, #8]
 8010b36:	f00a fd2d 	bl	801b594 <RegionKR920TxConfig>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	e02a      	b.n	8010b94 <RegionTxConfig+0x108>
		IN865_TX_CONFIG();
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	6879      	ldr	r1, [r7, #4]
 8010b42:	68b8      	ldr	r0, [r7, #8]
 8010b44:	f009 fad4 	bl	801a0f0 <RegionIN865TxConfig>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	e023      	b.n	8010b94 <RegionTxConfig+0x108>
		US915_TX_CONFIG();
 8010b4c:	683a      	ldr	r2, [r7, #0]
 8010b4e:	6879      	ldr	r1, [r7, #4]
 8010b50:	68b8      	ldr	r0, [r7, #8]
 8010b52:	f00d f9b3 	bl	801debc <RegionUS915TxConfig>
 8010b56:	4603      	mov	r3, r0
 8010b58:	e01c      	b.n	8010b94 <RegionTxConfig+0x108>
		AS923_2_TX_CONFIG();
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	6879      	ldr	r1, [r7, #4]
 8010b5e:	68b8      	ldr	r0, [r7, #8]
 8010b60:	f001 fa78 	bl	8012054 <RegionAS923TxConfig>
 8010b64:	4603      	mov	r3, r0
 8010b66:	e015      	b.n	8010b94 <RegionTxConfig+0x108>
		AS923_3_TX_CONFIG();
 8010b68:	683a      	ldr	r2, [r7, #0]
 8010b6a:	6879      	ldr	r1, [r7, #4]
 8010b6c:	68b8      	ldr	r0, [r7, #8]
 8010b6e:	f001 fa71 	bl	8012054 <RegionAS923TxConfig>
 8010b72:	4603      	mov	r3, r0
 8010b74:	e00e      	b.n	8010b94 <RegionTxConfig+0x108>
		AS923_4_TX_CONFIG();
 8010b76:	683a      	ldr	r2, [r7, #0]
 8010b78:	6879      	ldr	r1, [r7, #4]
 8010b7a:	68b8      	ldr	r0, [r7, #8]
 8010b7c:	f001 fa6a 	bl	8012054 <RegionAS923TxConfig>
 8010b80:	4603      	mov	r3, r0
 8010b82:	e007      	b.n	8010b94 <RegionTxConfig+0x108>
		RU864_TX_CONFIG();
 8010b84:	683a      	ldr	r2, [r7, #0]
 8010b86:	6879      	ldr	r1, [r7, #4]
 8010b88:	68b8      	ldr	r0, [r7, #8]
 8010b8a:	f00b ff6f 	bl	801ca6c <RegionRU864TxConfig>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	e000      	b.n	8010b94 <RegionTxConfig+0x108>
	default:
	{
		return false;
 8010b92:	2300      	movs	r3, #0
	}
	}
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}

08010b9c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq(LoRaMacRegion_t region, LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af02      	add	r7, sp, #8
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	607a      	str	r2, [r7, #4]
 8010ba6:	603b      	str	r3, [r7, #0]
 8010ba8:	4603      	mov	r3, r0
 8010baa:	73fb      	strb	r3, [r7, #15]
	switch (region)
 8010bac:	7bfb      	ldrb	r3, [r7, #15]
 8010bae:	2b0c      	cmp	r3, #12
 8010bb0:	f200 80a0 	bhi.w	8010cf4 <RegionLinkAdrReq+0x158>
 8010bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8010bbc <RegionLinkAdrReq+0x20>)
 8010bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bba:	bf00      	nop
 8010bbc:	08010bf1 	.word	0x08010bf1
 8010bc0:	08010c05 	.word	0x08010c05
 8010bc4:	08010c19 	.word	0x08010c19
 8010bc8:	08010c2d 	.word	0x08010c2d
 8010bcc:	08010c41 	.word	0x08010c41
 8010bd0:	08010c55 	.word	0x08010c55
 8010bd4:	08010c69 	.word	0x08010c69
 8010bd8:	08010c7d 	.word	0x08010c7d
 8010bdc:	08010c91 	.word	0x08010c91
 8010be0:	08010ca5 	.word	0x08010ca5
 8010be4:	08010cb9 	.word	0x08010cb9
 8010be8:	08010ccd 	.word	0x08010ccd
 8010bec:	08010ce1 	.word	0x08010ce1
	{
		AS923_LINK_ADR_REQ();
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	6879      	ldr	r1, [r7, #4]
 8010bfa:	68b8      	ldr	r0, [r7, #8]
 8010bfc:	f001 faec 	bl	80121d8 <RegionAS923LinkAdrReq>
 8010c00:	4603      	mov	r3, r0
 8010c02:	e078      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		AU915_LINK_ADR_REQ();
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	69bb      	ldr	r3, [r7, #24]
 8010c0a:	683a      	ldr	r2, [r7, #0]
 8010c0c:	6879      	ldr	r1, [r7, #4]
 8010c0e:	68b8      	ldr	r0, [r7, #8]
 8010c10:	f002 fd2c 	bl	801366c <RegionAU915LinkAdrReq>
 8010c14:	4603      	mov	r3, r0
 8010c16:	e06e      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		CN470_LINK_ADR_REQ();
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	683a      	ldr	r2, [r7, #0]
 8010c20:	6879      	ldr	r1, [r7, #4]
 8010c22:	68b8      	ldr	r0, [r7, #8]
 8010c24:	f003 fd50 	bl	80146c8 <RegionCN470LinkAdrReq>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	e064      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		CN779_LINK_ADR_REQ();
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	9300      	str	r3, [sp, #0]
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	6879      	ldr	r1, [r7, #4]
 8010c36:	68b8      	ldr	r0, [r7, #8]
 8010c38:	f004 fe4c 	bl	80158d4 <RegionCN779LinkAdrReq>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	e05a      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		EU433_LINK_ADR_REQ();
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	9300      	str	r3, [sp, #0]
 8010c44:	69bb      	ldr	r3, [r7, #24]
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	6879      	ldr	r1, [r7, #4]
 8010c4a:	68b8      	ldr	r0, [r7, #8]
 8010c4c:	f006 fdf6 	bl	801783c <RegionEU433LinkAdrReq>
 8010c50:	4603      	mov	r3, r0
 8010c52:	e050      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		EU868_LINK_ADR_REQ();
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	683a      	ldr	r2, [r7, #0]
 8010c5c:	6879      	ldr	r1, [r7, #4]
 8010c5e:	68b8      	ldr	r0, [r7, #8]
 8010c60:	f008 f88c 	bl	8018d7c <RegionEU868LinkAdrReq>
 8010c64:	4603      	mov	r3, r0
 8010c66:	e046      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		KR920_LINK_ADR_REQ();
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	69bb      	ldr	r3, [r7, #24]
 8010c6e:	683a      	ldr	r2, [r7, #0]
 8010c70:	6879      	ldr	r1, [r7, #4]
 8010c72:	68b8      	ldr	r0, [r7, #8]
 8010c74:	f00a fd44 	bl	801b700 <RegionKR920LinkAdrReq>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	e03c      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		IN865_LINK_ADR_REQ();
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	6879      	ldr	r1, [r7, #4]
 8010c86:	68b8      	ldr	r0, [r7, #8]
 8010c88:	f009 faf4 	bl	801a274 <RegionIN865LinkAdrReq>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	e032      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		US915_LINK_ADR_REQ();
 8010c90:	69fb      	ldr	r3, [r7, #28]
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	69bb      	ldr	r3, [r7, #24]
 8010c96:	683a      	ldr	r2, [r7, #0]
 8010c98:	6879      	ldr	r1, [r7, #4]
 8010c9a:	68b8      	ldr	r0, [r7, #8]
 8010c9c:	f00d f9a0 	bl	801dfe0 <RegionUS915LinkAdrReq>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	e028      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		AS923_2_LINK_ADR_REQ();
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	9300      	str	r3, [sp, #0]
 8010ca8:	69bb      	ldr	r3, [r7, #24]
 8010caa:	683a      	ldr	r2, [r7, #0]
 8010cac:	6879      	ldr	r1, [r7, #4]
 8010cae:	68b8      	ldr	r0, [r7, #8]
 8010cb0:	f001 fa92 	bl	80121d8 <RegionAS923LinkAdrReq>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	e01e      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		AS923_3_LINK_ADR_REQ();
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	69bb      	ldr	r3, [r7, #24]
 8010cbe:	683a      	ldr	r2, [r7, #0]
 8010cc0:	6879      	ldr	r1, [r7, #4]
 8010cc2:	68b8      	ldr	r0, [r7, #8]
 8010cc4:	f001 fa88 	bl	80121d8 <RegionAS923LinkAdrReq>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	e014      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		AS923_4_LINK_ADR_REQ();
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	6879      	ldr	r1, [r7, #4]
 8010cd6:	68b8      	ldr	r0, [r7, #8]
 8010cd8:	f001 fa7e 	bl	80121d8 <RegionAS923LinkAdrReq>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	e00a      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
		RU864_LINK_ADR_REQ();
 8010ce0:	69fb      	ldr	r3, [r7, #28]
 8010ce2:	9300      	str	r3, [sp, #0]
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	683a      	ldr	r2, [r7, #0]
 8010ce8:	6879      	ldr	r1, [r7, #4]
 8010cea:	68b8      	ldr	r0, [r7, #8]
 8010cec:	f00b ff80 	bl	801cbf0 <RegionRU864LinkAdrReq>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	e000      	b.n	8010cf6 <RegionLinkAdrReq+0x15a>
	default:
	{
		return 0;
 8010cf4:	2300      	movs	r3, #0
	}
	}
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3710      	adds	r7, #16
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop

08010d00 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq(LoRaMacRegion_t region, RxParamSetupReqParams_t *rxParamSetupReq)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	4603      	mov	r3, r0
 8010d08:	6039      	str	r1, [r7, #0]
 8010d0a:	71fb      	strb	r3, [r7, #7]
	switch (region)
 8010d0c:	79fb      	ldrb	r3, [r7, #7]
 8010d0e:	2b0c      	cmp	r3, #12
 8010d10:	d85d      	bhi.n	8010dce <RegionRxParamSetupReq+0xce>
 8010d12:	a201      	add	r2, pc, #4	@ (adr r2, 8010d18 <RegionRxParamSetupReq+0x18>)
 8010d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d18:	08010d4d 	.word	0x08010d4d
 8010d1c:	08010d57 	.word	0x08010d57
 8010d20:	08010d61 	.word	0x08010d61
 8010d24:	08010d6b 	.word	0x08010d6b
 8010d28:	08010d75 	.word	0x08010d75
 8010d2c:	08010d7f 	.word	0x08010d7f
 8010d30:	08010d89 	.word	0x08010d89
 8010d34:	08010d93 	.word	0x08010d93
 8010d38:	08010d9d 	.word	0x08010d9d
 8010d3c:	08010da7 	.word	0x08010da7
 8010d40:	08010db1 	.word	0x08010db1
 8010d44:	08010dbb 	.word	0x08010dbb
 8010d48:	08010dc5 	.word	0x08010dc5
	{
		AS923_RX_PARAM_SETUP_REQ();
 8010d4c:	6838      	ldr	r0, [r7, #0]
 8010d4e:	f001 fb57 	bl	8012400 <RegionAS923RxParamSetupReq>
 8010d52:	4603      	mov	r3, r0
 8010d54:	e03c      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		AU915_RX_PARAM_SETUP_REQ();
 8010d56:	6838      	ldr	r0, [r7, #0]
 8010d58:	f002 fdb4 	bl	80138c4 <RegionAU915RxParamSetupReq>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	e037      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		CN470_RX_PARAM_SETUP_REQ();
 8010d60:	6838      	ldr	r0, [r7, #0]
 8010d62:	f003 fdbf 	bl	80148e4 <RegionCN470RxParamSetupReq>
 8010d66:	4603      	mov	r3, r0
 8010d68:	e032      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		CN779_RX_PARAM_SETUP_REQ();
 8010d6a:	6838      	ldr	r0, [r7, #0]
 8010d6c:	f004 fec6 	bl	8015afc <RegionCN779RxParamSetupReq>
 8010d70:	4603      	mov	r3, r0
 8010d72:	e02d      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		EU433_RX_PARAM_SETUP_REQ();
 8010d74:	6838      	ldr	r0, [r7, #0]
 8010d76:	f006 fe75 	bl	8017a64 <RegionEU433RxParamSetupReq>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	e028      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		EU868_RX_PARAM_SETUP_REQ();
 8010d7e:	6838      	ldr	r0, [r7, #0]
 8010d80:	f008 f910 	bl	8018fa4 <RegionEU868RxParamSetupReq>
 8010d84:	4603      	mov	r3, r0
 8010d86:	e023      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		KR920_RX_PARAM_SETUP_REQ();
 8010d88:	6838      	ldr	r0, [r7, #0]
 8010d8a:	f00a fdcd 	bl	801b928 <RegionKR920RxParamSetupReq>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	e01e      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		IN865_RX_PARAM_SETUP_REQ();
 8010d92:	6838      	ldr	r0, [r7, #0]
 8010d94:	f009 fb82 	bl	801a49c <RegionIN865RxParamSetupReq>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	e019      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		US915_RX_PARAM_SETUP_REQ();
 8010d9c:	6838      	ldr	r0, [r7, #0]
 8010d9e:	f00d fa4b 	bl	801e238 <RegionUS915RxParamSetupReq>
 8010da2:	4603      	mov	r3, r0
 8010da4:	e014      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		AS923_2_RX_PARAM_SETUP_REQ();
 8010da6:	6838      	ldr	r0, [r7, #0]
 8010da8:	f001 fb2a 	bl	8012400 <RegionAS923RxParamSetupReq>
 8010dac:	4603      	mov	r3, r0
 8010dae:	e00f      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		AS923_3_RX_PARAM_SETUP_REQ();
 8010db0:	6838      	ldr	r0, [r7, #0]
 8010db2:	f001 fb25 	bl	8012400 <RegionAS923RxParamSetupReq>
 8010db6:	4603      	mov	r3, r0
 8010db8:	e00a      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		AS923_4_RX_PARAM_SETUP_REQ();
 8010dba:	6838      	ldr	r0, [r7, #0]
 8010dbc:	f001 fb20 	bl	8012400 <RegionAS923RxParamSetupReq>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	e005      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
		RU864_RX_PARAM_SETUP_REQ();
 8010dc4:	6838      	ldr	r0, [r7, #0]
 8010dc6:	f00c f827 	bl	801ce18 <RegionRU864RxParamSetupReq>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	e000      	b.n	8010dd0 <RegionRxParamSetupReq+0xd0>
	default:
	{
		return 0;
 8010dce:	2300      	movs	r3, #0
	}
	}
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}

08010dd8 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq(LoRaMacRegion_t region, NewChannelReqParams_t *newChannelReq)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	4603      	mov	r3, r0
 8010de0:	6039      	str	r1, [r7, #0]
 8010de2:	71fb      	strb	r3, [r7, #7]
	switch (region)
 8010de4:	79fb      	ldrb	r3, [r7, #7]
 8010de6:	2b0c      	cmp	r3, #12
 8010de8:	d85d      	bhi.n	8010ea6 <RegionNewChannelReq+0xce>
 8010dea:	a201      	add	r2, pc, #4	@ (adr r2, 8010df0 <RegionNewChannelReq+0x18>)
 8010dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df0:	08010e25 	.word	0x08010e25
 8010df4:	08010e2f 	.word	0x08010e2f
 8010df8:	08010e39 	.word	0x08010e39
 8010dfc:	08010e43 	.word	0x08010e43
 8010e00:	08010e4d 	.word	0x08010e4d
 8010e04:	08010e57 	.word	0x08010e57
 8010e08:	08010e61 	.word	0x08010e61
 8010e0c:	08010e6b 	.word	0x08010e6b
 8010e10:	08010e75 	.word	0x08010e75
 8010e14:	08010e7f 	.word	0x08010e7f
 8010e18:	08010e89 	.word	0x08010e89
 8010e1c:	08010e93 	.word	0x08010e93
 8010e20:	08010e9d 	.word	0x08010e9d
	{
		AS923_NEW_CHANNEL_REQ();
 8010e24:	6838      	ldr	r0, [r7, #0]
 8010e26:	f001 fb27 	bl	8012478 <RegionAS923NewChannelReq>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	e03c      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		AU915_NEW_CHANNEL_REQ();
 8010e2e:	6838      	ldr	r0, [r7, #0]
 8010e30:	f002 fdb2 	bl	8013998 <RegionAU915NewChannelReq>
 8010e34:	4603      	mov	r3, r0
 8010e36:	e037      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		CN470_NEW_CHANNEL_REQ();
 8010e38:	6838      	ldr	r0, [r7, #0]
 8010e3a:	f003 fdaf 	bl	801499c <RegionCN470NewChannelReq>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	e032      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		CN779_NEW_CHANNEL_REQ();
 8010e42:	6838      	ldr	r0, [r7, #0]
 8010e44:	f004 fe96 	bl	8015b74 <RegionCN779NewChannelReq>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	e02d      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		EU433_NEW_CHANNEL_REQ();
 8010e4c:	6838      	ldr	r0, [r7, #0]
 8010e4e:	f006 fe45 	bl	8017adc <RegionEU433NewChannelReq>
 8010e52:	4603      	mov	r3, r0
 8010e54:	e028      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		EU868_NEW_CHANNEL_REQ();
 8010e56:	6838      	ldr	r0, [r7, #0]
 8010e58:	f008 f8e0 	bl	801901c <RegionEU868NewChannelReq>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	e023      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		KR920_NEW_CHANNEL_REQ();
 8010e60:	6838      	ldr	r0, [r7, #0]
 8010e62:	f00a fd9d 	bl	801b9a0 <RegionKR920NewChannelReq>
 8010e66:	4603      	mov	r3, r0
 8010e68:	e01e      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		IN865_NEW_CHANNEL_REQ();
 8010e6a:	6838      	ldr	r0, [r7, #0]
 8010e6c:	f009 fb52 	bl	801a514 <RegionIN865NewChannelReq>
 8010e70:	4603      	mov	r3, r0
 8010e72:	e019      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		US915_NEW_CHANNEL_REQ();
 8010e74:	6838      	ldr	r0, [r7, #0]
 8010e76:	f00d fa4f 	bl	801e318 <RegionUS915NewChannelReq>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	e014      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		AS923_2_NEW_CHANNEL_REQ();
 8010e7e:	6838      	ldr	r0, [r7, #0]
 8010e80:	f001 fafa 	bl	8012478 <RegionAS923NewChannelReq>
 8010e84:	4603      	mov	r3, r0
 8010e86:	e00f      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		AS923_3_NEW_CHANNEL_REQ();
 8010e88:	6838      	ldr	r0, [r7, #0]
 8010e8a:	f001 faf5 	bl	8012478 <RegionAS923NewChannelReq>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	e00a      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		AS923_4_NEW_CHANNEL_REQ();
 8010e92:	6838      	ldr	r0, [r7, #0]
 8010e94:	f001 faf0 	bl	8012478 <RegionAS923NewChannelReq>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	e005      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
		RU864_NEW_CHANNEL_REQ();
 8010e9c:	6838      	ldr	r0, [r7, #0]
 8010e9e:	f00b fff7 	bl	801ce90 <RegionRU864NewChannelReq>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	e000      	b.n	8010ea8 <RegionNewChannelReq+0xd0>
	default:
	{
		return 0;
 8010ea6:	2300      	movs	r3, #0
	}
	}
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3708      	adds	r7, #8
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}

08010eb0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq(LoRaMacRegion_t region, TxParamSetupReqParams_t *txParamSetupReq)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	6039      	str	r1, [r7, #0]
 8010eba:	71fb      	strb	r3, [r7, #7]
	switch (region)
 8010ebc:	79fb      	ldrb	r3, [r7, #7]
 8010ebe:	2b0c      	cmp	r3, #12
 8010ec0:	d85d      	bhi.n	8010f7e <RegionTxParamSetupReq+0xce>
 8010ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8010ec8 <RegionTxParamSetupReq+0x18>)
 8010ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec8:	08010efd 	.word	0x08010efd
 8010ecc:	08010f07 	.word	0x08010f07
 8010ed0:	08010f11 	.word	0x08010f11
 8010ed4:	08010f1b 	.word	0x08010f1b
 8010ed8:	08010f25 	.word	0x08010f25
 8010edc:	08010f2f 	.word	0x08010f2f
 8010ee0:	08010f39 	.word	0x08010f39
 8010ee4:	08010f43 	.word	0x08010f43
 8010ee8:	08010f4d 	.word	0x08010f4d
 8010eec:	08010f57 	.word	0x08010f57
 8010ef0:	08010f61 	.word	0x08010f61
 8010ef4:	08010f6b 	.word	0x08010f6b
 8010ef8:	08010f75 	.word	0x08010f75
	{
		AS923_TX_PARAM_SETUP_REQ();
 8010efc:	6838      	ldr	r0, [r7, #0]
 8010efe:	f001 fb17 	bl	8012530 <RegionAS923TxParamSetupReq>
 8010f02:	4603      	mov	r3, r0
 8010f04:	e03c      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		AU915_TX_PARAM_SETUP_REQ();
 8010f06:	6838      	ldr	r0, [r7, #0]
 8010f08:	f002 fd51 	bl	80139ae <RegionAU915TxParamSetupReq>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	e037      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		CN470_TX_PARAM_SETUP_REQ();
 8010f10:	6838      	ldr	r0, [r7, #0]
 8010f12:	f003 fd4e 	bl	80149b2 <RegionCN470TxParamSetupReq>
 8010f16:	4603      	mov	r3, r0
 8010f18:	e032      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		CN779_TX_PARAM_SETUP_REQ();
 8010f1a:	6838      	ldr	r0, [r7, #0]
 8010f1c:	f004 fe86 	bl	8015c2c <RegionCN779TxParamSetupReq>
 8010f20:	4603      	mov	r3, r0
 8010f22:	e02d      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		EU433_TX_PARAM_SETUP_REQ();
 8010f24:	6838      	ldr	r0, [r7, #0]
 8010f26:	f006 fe35 	bl	8017b94 <RegionEU433TxParamSetupReq>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	e028      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		EU868_TX_PARAM_SETUP_REQ();
 8010f2e:	6838      	ldr	r0, [r7, #0]
 8010f30:	f008 f8ec 	bl	801910c <RegionEU868TxParamSetupReq>
 8010f34:	4603      	mov	r3, r0
 8010f36:	e023      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		KR920_TX_PARAM_SETUP_REQ();
 8010f38:	6838      	ldr	r0, [r7, #0]
 8010f3a:	f00a fd8d 	bl	801ba58 <RegionKR920TxParamSetupReq>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	e01e      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		IN865_TX_PARAM_SETUP_REQ();
 8010f42:	6838      	ldr	r0, [r7, #0]
 8010f44:	f009 fb42 	bl	801a5cc <RegionIN865TxParamSetupReq>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	e019      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		US915_TX_PARAM_SETUP_REQ();
 8010f4c:	6838      	ldr	r0, [r7, #0]
 8010f4e:	f00d f9ee 	bl	801e32e <RegionUS915TxParamSetupReq>
 8010f52:	4603      	mov	r3, r0
 8010f54:	e014      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		AS923_2_TX_PARAM_SETUP_REQ();
 8010f56:	6838      	ldr	r0, [r7, #0]
 8010f58:	f001 faea 	bl	8012530 <RegionAS923TxParamSetupReq>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	e00f      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		AS923_3_TX_PARAM_SETUP_REQ();
 8010f60:	6838      	ldr	r0, [r7, #0]
 8010f62:	f001 fae5 	bl	8012530 <RegionAS923TxParamSetupReq>
 8010f66:	4603      	mov	r3, r0
 8010f68:	e00a      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		AS923_4_TX_PARAM_SETUP_REQ();
 8010f6a:	6838      	ldr	r0, [r7, #0]
 8010f6c:	f001 fae0 	bl	8012530 <RegionAS923TxParamSetupReq>
 8010f70:	4603      	mov	r3, r0
 8010f72:	e005      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
		RU864_TX_PARAM_SETUP_REQ();
 8010f74:	6838      	ldr	r0, [r7, #0]
 8010f76:	f00b ffe7 	bl	801cf48 <RegionRU864TxParamSetupReq>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	e000      	b.n	8010f80 <RegionTxParamSetupReq+0xd0>
	default:
	{
		return 0;
 8010f7e:	2300      	movs	r3, #0
	}
	}
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq(LoRaMacRegion_t region, DlChannelReqParams_t *dlChannelReq)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	4603      	mov	r3, r0
 8010f90:	6039      	str	r1, [r7, #0]
 8010f92:	71fb      	strb	r3, [r7, #7]
	switch (region)
 8010f94:	79fb      	ldrb	r3, [r7, #7]
 8010f96:	2b0c      	cmp	r3, #12
 8010f98:	d85d      	bhi.n	8011056 <RegionDlChannelReq+0xce>
 8010f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8010fa0 <RegionDlChannelReq+0x18>)
 8010f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa0:	08010fd5 	.word	0x08010fd5
 8010fa4:	08010fdf 	.word	0x08010fdf
 8010fa8:	08010fe9 	.word	0x08010fe9
 8010fac:	08010ff3 	.word	0x08010ff3
 8010fb0:	08010ffd 	.word	0x08010ffd
 8010fb4:	08011007 	.word	0x08011007
 8010fb8:	08011011 	.word	0x08011011
 8010fbc:	0801101b 	.word	0x0801101b
 8010fc0:	08011025 	.word	0x08011025
 8010fc4:	0801102f 	.word	0x0801102f
 8010fc8:	08011039 	.word	0x08011039
 8010fcc:	08011043 	.word	0x08011043
 8010fd0:	0801104d 	.word	0x0801104d
	{
		AS923_DL_CHANNEL_REQ();
 8010fd4:	6838      	ldr	r0, [r7, #0]
 8010fd6:	f001 fab7 	bl	8012548 <RegionAS923DlChannelReq>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	e03c      	b.n	8011058 <RegionDlChannelReq+0xd0>
		AU915_DL_CHANNEL_REQ();
 8010fde:	6838      	ldr	r0, [r7, #0]
 8010fe0:	f002 fcf1 	bl	80139c6 <RegionAU915DlChannelReq>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	e037      	b.n	8011058 <RegionDlChannelReq+0xd0>
		CN470_DL_CHANNEL_REQ();
 8010fe8:	6838      	ldr	r0, [r7, #0]
 8010fea:	f003 fcee 	bl	80149ca <RegionCN470DlChannelReq>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	e032      	b.n	8011058 <RegionDlChannelReq+0xd0>
		CN779_DL_CHANNEL_REQ();
 8010ff2:	6838      	ldr	r0, [r7, #0]
 8010ff4:	f004 fe26 	bl	8015c44 <RegionCN779DlChannelReq>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	e02d      	b.n	8011058 <RegionDlChannelReq+0xd0>
		EU433_DL_CHANNEL_REQ();
 8010ffc:	6838      	ldr	r0, [r7, #0]
 8010ffe:	f006 fdd5 	bl	8017bac <RegionEU433DlChannelReq>
 8011002:	4603      	mov	r3, r0
 8011004:	e028      	b.n	8011058 <RegionDlChannelReq+0xd0>
		EU868_DL_CHANNEL_REQ();
 8011006:	6838      	ldr	r0, [r7, #0]
 8011008:	f008 f88c 	bl	8019124 <RegionEU868DlChannelReq>
 801100c:	4603      	mov	r3, r0
 801100e:	e023      	b.n	8011058 <RegionDlChannelReq+0xd0>
		KR920_DL_CHANNEL_REQ();
 8011010:	6838      	ldr	r0, [r7, #0]
 8011012:	f00a fd2d 	bl	801ba70 <RegionKR920DlChannelReq>
 8011016:	4603      	mov	r3, r0
 8011018:	e01e      	b.n	8011058 <RegionDlChannelReq+0xd0>
		IN865_DL_CHANNEL_REQ();
 801101a:	6838      	ldr	r0, [r7, #0]
 801101c:	f009 fae2 	bl	801a5e4 <RegionIN865DlChannelReq>
 8011020:	4603      	mov	r3, r0
 8011022:	e019      	b.n	8011058 <RegionDlChannelReq+0xd0>
		US915_DL_CHANNEL_REQ();
 8011024:	6838      	ldr	r0, [r7, #0]
 8011026:	f00d f98e 	bl	801e346 <RegionUS915DlChannelReq>
 801102a:	4603      	mov	r3, r0
 801102c:	e014      	b.n	8011058 <RegionDlChannelReq+0xd0>
		AS923_2_DL_CHANNEL_REQ();
 801102e:	6838      	ldr	r0, [r7, #0]
 8011030:	f001 fa8a 	bl	8012548 <RegionAS923DlChannelReq>
 8011034:	4603      	mov	r3, r0
 8011036:	e00f      	b.n	8011058 <RegionDlChannelReq+0xd0>
		AS923_3_DL_CHANNEL_REQ();
 8011038:	6838      	ldr	r0, [r7, #0]
 801103a:	f001 fa85 	bl	8012548 <RegionAS923DlChannelReq>
 801103e:	4603      	mov	r3, r0
 8011040:	e00a      	b.n	8011058 <RegionDlChannelReq+0xd0>
		AS923_4_DL_CHANNEL_REQ();
 8011042:	6838      	ldr	r0, [r7, #0]
 8011044:	f001 fa80 	bl	8012548 <RegionAS923DlChannelReq>
 8011048:	4603      	mov	r3, r0
 801104a:	e005      	b.n	8011058 <RegionDlChannelReq+0xd0>
		RU864_DL_CHANNEL_REQ();
 801104c:	6838      	ldr	r0, [r7, #0]
 801104e:	f00b ff87 	bl	801cf60 <RegionRU864DlChannelReq>
 8011052:	4603      	mov	r3, r0
 8011054:	e000      	b.n	8011058 <RegionDlChannelReq+0xd0>
	default:
	{
		return 0;
 8011056:	2300      	movs	r3, #0
	}
	}
}
 8011058:	4618      	mov	r0, r3
 801105a:	3708      	adds	r7, #8
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}

08011060 <RegionAlternateDr>:

int8_t RegionAlternateDr(LoRaMacRegion_t region, AlternateDrParams_t *alternateDr)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	4603      	mov	r3, r0
 8011068:	6039      	str	r1, [r7, #0]
 801106a:	71fb      	strb	r3, [r7, #7]
	switch (region)
 801106c:	79fb      	ldrb	r3, [r7, #7]
 801106e:	2b0c      	cmp	r3, #12
 8011070:	d85d      	bhi.n	801112e <RegionAlternateDr+0xce>
 8011072:	a201      	add	r2, pc, #4	@ (adr r2, 8011078 <RegionAlternateDr+0x18>)
 8011074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011078:	080110ad 	.word	0x080110ad
 801107c:	080110b7 	.word	0x080110b7
 8011080:	080110c1 	.word	0x080110c1
 8011084:	080110cb 	.word	0x080110cb
 8011088:	080110d5 	.word	0x080110d5
 801108c:	080110df 	.word	0x080110df
 8011090:	080110e9 	.word	0x080110e9
 8011094:	080110f3 	.word	0x080110f3
 8011098:	080110fd 	.word	0x080110fd
 801109c:	08011107 	.word	0x08011107
 80110a0:	08011111 	.word	0x08011111
 80110a4:	0801111b 	.word	0x0801111b
 80110a8:	08011125 	.word	0x08011125
	{
		AS923_ALTERNATE_DR();
 80110ac:	6838      	ldr	r0, [r7, #0]
 80110ae:	f001 fa87 	bl	80125c0 <RegionAS923AlternateDr>
 80110b2:	4603      	mov	r3, r0
 80110b4:	e03c      	b.n	8011130 <RegionAlternateDr+0xd0>
		AU915_ALTERNATE_DR();
 80110b6:	6838      	ldr	r0, [r7, #0]
 80110b8:	f002 fc90 	bl	80139dc <RegionAU915AlternateDr>
 80110bc:	4603      	mov	r3, r0
 80110be:	e037      	b.n	8011130 <RegionAlternateDr+0xd0>
		CN470_ALTERNATE_DR();
 80110c0:	6838      	ldr	r0, [r7, #0]
 80110c2:	f003 fc8d 	bl	80149e0 <RegionCN470AlternateDr>
 80110c6:	4603      	mov	r3, r0
 80110c8:	e032      	b.n	8011130 <RegionAlternateDr+0xd0>
		CN779_ALTERNATE_DR();
 80110ca:	6838      	ldr	r0, [r7, #0]
 80110cc:	f004 fdf6 	bl	8015cbc <RegionCN779AlternateDr>
 80110d0:	4603      	mov	r3, r0
 80110d2:	e02d      	b.n	8011130 <RegionAlternateDr+0xd0>
		EU433_ALTERNATE_DR();
 80110d4:	6838      	ldr	r0, [r7, #0]
 80110d6:	f006 fda5 	bl	8017c24 <RegionEU433AlternateDr>
 80110da:	4603      	mov	r3, r0
 80110dc:	e028      	b.n	8011130 <RegionAlternateDr+0xd0>
		EU868_ALTERNATE_DR();
 80110de:	6838      	ldr	r0, [r7, #0]
 80110e0:	f008 f862 	bl	80191a8 <RegionEU868AlternateDr>
 80110e4:	4603      	mov	r3, r0
 80110e6:	e023      	b.n	8011130 <RegionAlternateDr+0xd0>
		KR920_ALTERNATE_DR();
 80110e8:	6838      	ldr	r0, [r7, #0]
 80110ea:	f00a fcfd 	bl	801bae8 <RegionKR920AlternateDr>
 80110ee:	4603      	mov	r3, r0
 80110f0:	e01e      	b.n	8011130 <RegionAlternateDr+0xd0>
		IN865_ALTERNATE_DR();
 80110f2:	6838      	ldr	r0, [r7, #0]
 80110f4:	f009 fab8 	bl	801a668 <RegionIN865AlternateDr>
 80110f8:	4603      	mov	r3, r0
 80110fa:	e019      	b.n	8011130 <RegionAlternateDr+0xd0>
		US915_ALTERNATE_DR();
 80110fc:	6838      	ldr	r0, [r7, #0]
 80110fe:	f00d f92d 	bl	801e35c <RegionUS915AlternateDr>
 8011102:	4603      	mov	r3, r0
 8011104:	e014      	b.n	8011130 <RegionAlternateDr+0xd0>
		AS923_2_ALTERNATE_DR();
 8011106:	6838      	ldr	r0, [r7, #0]
 8011108:	f001 fa5a 	bl	80125c0 <RegionAS923AlternateDr>
 801110c:	4603      	mov	r3, r0
 801110e:	e00f      	b.n	8011130 <RegionAlternateDr+0xd0>
		AS923_3_ALTERNATE_DR();
 8011110:	6838      	ldr	r0, [r7, #0]
 8011112:	f001 fa55 	bl	80125c0 <RegionAS923AlternateDr>
 8011116:	4603      	mov	r3, r0
 8011118:	e00a      	b.n	8011130 <RegionAlternateDr+0xd0>
		AS923_4_ALTERNATE_DR();
 801111a:	6838      	ldr	r0, [r7, #0]
 801111c:	f001 fa50 	bl	80125c0 <RegionAS923AlternateDr>
 8011120:	4603      	mov	r3, r0
 8011122:	e005      	b.n	8011130 <RegionAlternateDr+0xd0>
		RU864_ALTERNATE_DR();
 8011124:	6838      	ldr	r0, [r7, #0]
 8011126:	f00b ff57 	bl	801cfd8 <RegionRU864AlternateDr>
 801112a:	4603      	mov	r3, r0
 801112c:	e000      	b.n	8011130 <RegionAlternateDr+0xd0>
	default:
	{
		return 0;
 801112e:	2300      	movs	r3, #0
	}
	}
}
 8011130:	4618      	mov	r0, r3
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <RegionCalcBackOff>:

void RegionCalcBackOff(LoRaMacRegion_t region, CalcBackOffParams_t *calcBackOff)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	4603      	mov	r3, r0
 8011140:	6039      	str	r1, [r7, #0]
 8011142:	71fb      	strb	r3, [r7, #7]
	switch (region)
 8011144:	79fb      	ldrb	r3, [r7, #7]
 8011146:	2b0c      	cmp	r3, #12
 8011148:	d850      	bhi.n	80111ec <RegionCalcBackOff+0xb4>
 801114a:	a201      	add	r2, pc, #4	@ (adr r2, 8011150 <RegionCalcBackOff+0x18>)
 801114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011150:	08011185 	.word	0x08011185
 8011154:	0801118d 	.word	0x0801118d
 8011158:	08011195 	.word	0x08011195
 801115c:	0801119d 	.word	0x0801119d
 8011160:	080111a5 	.word	0x080111a5
 8011164:	080111ad 	.word	0x080111ad
 8011168:	080111b5 	.word	0x080111b5
 801116c:	080111bd 	.word	0x080111bd
 8011170:	080111c5 	.word	0x080111c5
 8011174:	080111cd 	.word	0x080111cd
 8011178:	080111d5 	.word	0x080111d5
 801117c:	080111dd 	.word	0x080111dd
 8011180:	080111e5 	.word	0x080111e5
	{
		AS923_CALC_BACKOFF();
 8011184:	6838      	ldr	r0, [r7, #0]
 8011186:	f001 fa27 	bl	80125d8 <RegionAS923CalcBackOff>
 801118a:	e030      	b.n	80111ee <RegionCalcBackOff+0xb6>
		AU915_CALC_BACKOFF();
 801118c:	6838      	ldr	r0, [r7, #0]
 801118e:	f002 fc51 	bl	8013a34 <RegionAU915CalcBackOff>
 8011192:	e02c      	b.n	80111ee <RegionCalcBackOff+0xb6>
		CN470_CALC_BACKOFF();
 8011194:	6838      	ldr	r0, [r7, #0]
 8011196:	f003 fc75 	bl	8014a84 <RegionCN470CalcBackOff>
 801119a:	e028      	b.n	80111ee <RegionCalcBackOff+0xb6>
		CN779_CALC_BACKOFF();
 801119c:	6838      	ldr	r0, [r7, #0]
 801119e:	f004 fddf 	bl	8015d60 <RegionCN779CalcBackOff>
 80111a2:	e024      	b.n	80111ee <RegionCalcBackOff+0xb6>
		EU433_CALC_BACKOFF();
 80111a4:	6838      	ldr	r0, [r7, #0]
 80111a6:	f006 fd8f 	bl	8017cc8 <RegionEU433CalcBackOff>
 80111aa:	e020      	b.n	80111ee <RegionCalcBackOff+0xb6>
		EU868_CALC_BACKOFF();
 80111ac:	6838      	ldr	r0, [r7, #0]
 80111ae:	f008 f84d 	bl	801924c <RegionEU868CalcBackOff>
 80111b2:	e01c      	b.n	80111ee <RegionCalcBackOff+0xb6>
		KR920_CALC_BACKOFF();
 80111b4:	6838      	ldr	r0, [r7, #0]
 80111b6:	f00a fce9 	bl	801bb8c <RegionKR920CalcBackOff>
 80111ba:	e018      	b.n	80111ee <RegionCalcBackOff+0xb6>
		IN865_CALC_BACKOFF();
 80111bc:	6838      	ldr	r0, [r7, #0]
 80111be:	f009 faa5 	bl	801a70c <RegionIN865CalcBackOff>
 80111c2:	e014      	b.n	80111ee <RegionCalcBackOff+0xb6>
		US915_CALC_BACKOFF();
 80111c4:	6838      	ldr	r0, [r7, #0]
 80111c6:	f00d f8f1 	bl	801e3ac <RegionUS915CalcBackOff>
 80111ca:	e010      	b.n	80111ee <RegionCalcBackOff+0xb6>
		AS923_2_CALC_BACKOFF();
 80111cc:	6838      	ldr	r0, [r7, #0]
 80111ce:	f001 fa03 	bl	80125d8 <RegionAS923CalcBackOff>
 80111d2:	e00c      	b.n	80111ee <RegionCalcBackOff+0xb6>
		AS923_3_CALC_BACKOFF();
 80111d4:	6838      	ldr	r0, [r7, #0]
 80111d6:	f001 f9ff 	bl	80125d8 <RegionAS923CalcBackOff>
 80111da:	e008      	b.n	80111ee <RegionCalcBackOff+0xb6>
		AS923_4_CALC_BACKOFF();
 80111dc:	6838      	ldr	r0, [r7, #0]
 80111de:	f001 f9fb 	bl	80125d8 <RegionAS923CalcBackOff>
 80111e2:	e004      	b.n	80111ee <RegionCalcBackOff+0xb6>
		RU864_CALC_BACKOFF();
 80111e4:	6838      	ldr	r0, [r7, #0]
 80111e6:	f00b ff49 	bl	801d07c <RegionRU864CalcBackOff>
 80111ea:	e000      	b.n	80111ee <RegionCalcBackOff+0xb6>
	default:
	{
		break;
 80111ec:	bf00      	nop
	}
	}
}
 80111ee:	bf00      	nop
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop

080111f8 <RegionNextChannel>:

bool RegionNextChannel(LoRaMacRegion_t region, NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60b9      	str	r1, [r7, #8]
 8011200:	607a      	str	r2, [r7, #4]
 8011202:	603b      	str	r3, [r7, #0]
 8011204:	4603      	mov	r3, r0
 8011206:	73fb      	strb	r3, [r7, #15]
	switch (region)
 8011208:	7bfb      	ldrb	r3, [r7, #15]
 801120a:	2b0c      	cmp	r3, #12
 801120c:	f200 8086 	bhi.w	801131c <RegionNextChannel+0x124>
 8011210:	a201      	add	r2, pc, #4	@ (adr r2, 8011218 <RegionNextChannel+0x20>)
 8011212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011216:	bf00      	nop
 8011218:	0801124d 	.word	0x0801124d
 801121c:	0801125d 	.word	0x0801125d
 8011220:	0801126d 	.word	0x0801126d
 8011224:	0801127d 	.word	0x0801127d
 8011228:	0801128d 	.word	0x0801128d
 801122c:	0801129d 	.word	0x0801129d
 8011230:	080112ad 	.word	0x080112ad
 8011234:	080112bd 	.word	0x080112bd
 8011238:	080112cd 	.word	0x080112cd
 801123c:	080112dd 	.word	0x080112dd
 8011240:	080112ed 	.word	0x080112ed
 8011244:	080112fd 	.word	0x080112fd
 8011248:	0801130d 	.word	0x0801130d
	{
		AS923_NEXT_CHANNEL();
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	683a      	ldr	r2, [r7, #0]
 8011250:	6879      	ldr	r1, [r7, #4]
 8011252:	68b8      	ldr	r0, [r7, #8]
 8011254:	f001 f9ec 	bl	8012630 <RegionAS923NextChannel>
 8011258:	4603      	mov	r3, r0
 801125a:	e060      	b.n	801131e <RegionNextChannel+0x126>
		AU915_NEXT_CHANNEL();
 801125c:	69bb      	ldr	r3, [r7, #24]
 801125e:	683a      	ldr	r2, [r7, #0]
 8011260:	6879      	ldr	r1, [r7, #4]
 8011262:	68b8      	ldr	r0, [r7, #8]
 8011264:	f002 fc12 	bl	8013a8c <RegionAU915NextChannel>
 8011268:	4603      	mov	r3, r0
 801126a:	e058      	b.n	801131e <RegionNextChannel+0x126>
		CN470_NEXT_CHANNEL();
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	683a      	ldr	r2, [r7, #0]
 8011270:	6879      	ldr	r1, [r7, #4]
 8011272:	68b8      	ldr	r0, [r7, #8]
 8011274:	f003 fc32 	bl	8014adc <RegionCN470NextChannel>
 8011278:	4603      	mov	r3, r0
 801127a:	e050      	b.n	801131e <RegionNextChannel+0x126>
		CN779_NEXT_CHANNEL();
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	683a      	ldr	r2, [r7, #0]
 8011280:	6879      	ldr	r1, [r7, #4]
 8011282:	68b8      	ldr	r0, [r7, #8]
 8011284:	f004 fd98 	bl	8015db8 <RegionCN779NextChannel>
 8011288:	4603      	mov	r3, r0
 801128a:	e048      	b.n	801131e <RegionNextChannel+0x126>
		EU433_NEXT_CHANNEL();
 801128c:	69bb      	ldr	r3, [r7, #24]
 801128e:	683a      	ldr	r2, [r7, #0]
 8011290:	6879      	ldr	r1, [r7, #4]
 8011292:	68b8      	ldr	r0, [r7, #8]
 8011294:	f006 fd44 	bl	8017d20 <RegionEU433NextChannel>
 8011298:	4603      	mov	r3, r0
 801129a:	e040      	b.n	801131e <RegionNextChannel+0x126>
		EU868_NEXT_CHANNEL();
 801129c:	69bb      	ldr	r3, [r7, #24]
 801129e:	683a      	ldr	r2, [r7, #0]
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	68b8      	ldr	r0, [r7, #8]
 80112a4:	f007 fffe 	bl	80192a4 <RegionEU868NextChannel>
 80112a8:	4603      	mov	r3, r0
 80112aa:	e038      	b.n	801131e <RegionNextChannel+0x126>
		KR920_NEXT_CHANNEL();
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	683a      	ldr	r2, [r7, #0]
 80112b0:	6879      	ldr	r1, [r7, #4]
 80112b2:	68b8      	ldr	r0, [r7, #8]
 80112b4:	f00a fc96 	bl	801bbe4 <RegionKR920NextChannel>
 80112b8:	4603      	mov	r3, r0
 80112ba:	e030      	b.n	801131e <RegionNextChannel+0x126>
		IN865_NEXT_CHANNEL();
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	6879      	ldr	r1, [r7, #4]
 80112c2:	68b8      	ldr	r0, [r7, #8]
 80112c4:	f009 fa4e 	bl	801a764 <RegionIN865NextChannel>
 80112c8:	4603      	mov	r3, r0
 80112ca:	e028      	b.n	801131e <RegionNextChannel+0x126>
		US915_NEXT_CHANNEL();
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	6879      	ldr	r1, [r7, #4]
 80112d2:	68b8      	ldr	r0, [r7, #8]
 80112d4:	f00d f896 	bl	801e404 <RegionUS915NextChannel>
 80112d8:	4603      	mov	r3, r0
 80112da:	e020      	b.n	801131e <RegionNextChannel+0x126>
		AS923_2_NEXT_CHANNEL();
 80112dc:	69bb      	ldr	r3, [r7, #24]
 80112de:	683a      	ldr	r2, [r7, #0]
 80112e0:	6879      	ldr	r1, [r7, #4]
 80112e2:	68b8      	ldr	r0, [r7, #8]
 80112e4:	f001 f9a4 	bl	8012630 <RegionAS923NextChannel>
 80112e8:	4603      	mov	r3, r0
 80112ea:	e018      	b.n	801131e <RegionNextChannel+0x126>
		AS923_3_NEXT_CHANNEL();
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	68b8      	ldr	r0, [r7, #8]
 80112f4:	f001 f99c 	bl	8012630 <RegionAS923NextChannel>
 80112f8:	4603      	mov	r3, r0
 80112fa:	e010      	b.n	801131e <RegionNextChannel+0x126>
		AS923_4_NEXT_CHANNEL();
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	683a      	ldr	r2, [r7, #0]
 8011300:	6879      	ldr	r1, [r7, #4]
 8011302:	68b8      	ldr	r0, [r7, #8]
 8011304:	f001 f994 	bl	8012630 <RegionAS923NextChannel>
 8011308:	4603      	mov	r3, r0
 801130a:	e008      	b.n	801131e <RegionNextChannel+0x126>
		RU864_NEXT_CHANNEL();
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	6879      	ldr	r1, [r7, #4]
 8011312:	68b8      	ldr	r0, [r7, #8]
 8011314:	f00b fede 	bl	801d0d4 <RegionRU864NextChannel>
 8011318:	4603      	mov	r3, r0
 801131a:	e000      	b.n	801131e <RegionNextChannel+0x126>
	default:
	{
		return false;
 801131c:	2300      	movs	r3, #0
	}
	}
}
 801131e:	4618      	mov	r0, r3
 8011320:	3710      	adds	r7, #16
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop

08011328 <RegionSetContinuousWave>:
	}
	}
}

void RegionSetContinuousWave(LoRaMacRegion_t region, ContinuousWaveParams_t *continuousWave)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
 801132e:	4603      	mov	r3, r0
 8011330:	6039      	str	r1, [r7, #0]
 8011332:	71fb      	strb	r3, [r7, #7]
	switch (region)
 8011334:	79fb      	ldrb	r3, [r7, #7]
 8011336:	2b0c      	cmp	r3, #12
 8011338:	d850      	bhi.n	80113dc <RegionSetContinuousWave+0xb4>
 801133a:	a201      	add	r2, pc, #4	@ (adr r2, 8011340 <RegionSetContinuousWave+0x18>)
 801133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011340:	08011375 	.word	0x08011375
 8011344:	0801137d 	.word	0x0801137d
 8011348:	08011385 	.word	0x08011385
 801134c:	0801138d 	.word	0x0801138d
 8011350:	08011395 	.word	0x08011395
 8011354:	0801139d 	.word	0x0801139d
 8011358:	080113a5 	.word	0x080113a5
 801135c:	080113ad 	.word	0x080113ad
 8011360:	080113b5 	.word	0x080113b5
 8011364:	080113bd 	.word	0x080113bd
 8011368:	080113c5 	.word	0x080113c5
 801136c:	080113cd 	.word	0x080113cd
 8011370:	080113d5 	.word	0x080113d5
	{
		AS923_SET_CONTINUOUS_WAVE();
 8011374:	6838      	ldr	r0, [r7, #0]
 8011376:	f001 faeb 	bl	8012950 <RegionAS923SetContinuousWave>
 801137a:	e030      	b.n	80113de <RegionSetContinuousWave+0xb6>
		AU915_SET_CONTINUOUS_WAVE();
 801137c:	6838      	ldr	r0, [r7, #0]
 801137e:	f002 fc4b 	bl	8013c18 <RegionAU915SetContinuousWave>
 8011382:	e02c      	b.n	80113de <RegionSetContinuousWave+0xb6>
		CN470_SET_CONTINUOUS_WAVE();
 8011384:	6838      	ldr	r0, [r7, #0]
 8011386:	f003 fc6b 	bl	8014c60 <RegionCN470SetContinuousWave>
 801138a:	e028      	b.n	80113de <RegionSetContinuousWave+0xb6>
		CN779_SET_CONTINUOUS_WAVE();
 801138c:	6838      	ldr	r0, [r7, #0]
 801138e:	f004 feb7 	bl	8016100 <RegionCN779SetContinuousWave>
 8011392:	e024      	b.n	80113de <RegionSetContinuousWave+0xb6>
		EU433_SET_CONTINUOUS_WAVE();
 8011394:	6838      	ldr	r0, [r7, #0]
 8011396:	f006 fe67 	bl	8018068 <RegionEU433SetContinuousWave>
 801139a:	e020      	b.n	80113de <RegionSetContinuousWave+0xb6>
		EU868_SET_CONTINUOUS_WAVE();
 801139c:	6838      	ldr	r0, [r7, #0]
 801139e:	f008 f929 	bl	80195f4 <RegionEU868SetContinuousWave>
 80113a2:	e01c      	b.n	80113de <RegionSetContinuousWave+0xb6>
		KR920_SET_CONTINUOUS_WAVE();
 80113a4:	6838      	ldr	r0, [r7, #0]
 80113a6:	f00a fd95 	bl	801bed4 <RegionKR920SetContinuousWave>
 80113aa:	e018      	b.n	80113de <RegionSetContinuousWave+0xb6>
		IN865_SET_CONTINUOUS_WAVE();
 80113ac:	6838      	ldr	r0, [r7, #0]
 80113ae:	f009 fb6f 	bl	801aa90 <RegionIN865SetContinuousWave>
 80113b2:	e014      	b.n	80113de <RegionSetContinuousWave+0xb6>
		US915_SET_CONTINUOUS_WAVE();
 80113b4:	6838      	ldr	r0, [r7, #0]
 80113b6:	f00d f8eb 	bl	801e590 <RegionUS915SetContinuousWave>
 80113ba:	e010      	b.n	80113de <RegionSetContinuousWave+0xb6>
		AS923_2_SET_CONTINUOUS_WAVE();
 80113bc:	6838      	ldr	r0, [r7, #0]
 80113be:	f001 fac7 	bl	8012950 <RegionAS923SetContinuousWave>
 80113c2:	e00c      	b.n	80113de <RegionSetContinuousWave+0xb6>
		AS923_3_SET_CONTINUOUS_WAVE();
 80113c4:	6838      	ldr	r0, [r7, #0]
 80113c6:	f001 fac3 	bl	8012950 <RegionAS923SetContinuousWave>
 80113ca:	e008      	b.n	80113de <RegionSetContinuousWave+0xb6>
		AS923_4_SET_CONTINUOUS_WAVE();
 80113cc:	6838      	ldr	r0, [r7, #0]
 80113ce:	f001 fabf 	bl	8012950 <RegionAS923SetContinuousWave>
 80113d2:	e004      	b.n	80113de <RegionSetContinuousWave+0xb6>
		RU864_SET_CONTINUOUS_WAVE();
 80113d4:	6838      	ldr	r0, [r7, #0]
 80113d6:	f00c f823 	bl	801d420 <RegionRU864SetContinuousWave>
 80113da:	e000      	b.n	80113de <RegionSetContinuousWave+0xb6>
	default:
	{
		break;
 80113dc:	bf00      	nop
	}
	}
}
 80113de:	bf00      	nop
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop

080113e8 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset(LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 80113e8:	b590      	push	{r4, r7, lr}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	4604      	mov	r4, r0
 80113f0:	4608      	mov	r0, r1
 80113f2:	4611      	mov	r1, r2
 80113f4:	461a      	mov	r2, r3
 80113f6:	4623      	mov	r3, r4
 80113f8:	71fb      	strb	r3, [r7, #7]
 80113fa:	4603      	mov	r3, r0
 80113fc:	71bb      	strb	r3, [r7, #6]
 80113fe:	460b      	mov	r3, r1
 8011400:	717b      	strb	r3, [r7, #5]
 8011402:	4613      	mov	r3, r2
 8011404:	713b      	strb	r3, [r7, #4]
	switch (region)
 8011406:	79fb      	ldrb	r3, [r7, #7]
 8011408:	2b0c      	cmp	r3, #12
 801140a:	f200 809f 	bhi.w	801154c <RegionApplyDrOffset+0x164>
 801140e:	a201      	add	r2, pc, #4	@ (adr r2, 8011414 <RegionApplyDrOffset+0x2c>)
 8011410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011414:	08011449 	.word	0x08011449
 8011418:	0801145d 	.word	0x0801145d
 801141c:	08011471 	.word	0x08011471
 8011420:	08011485 	.word	0x08011485
 8011424:	08011499 	.word	0x08011499
 8011428:	080114ad 	.word	0x080114ad
 801142c:	080114c1 	.word	0x080114c1
 8011430:	080114d5 	.word	0x080114d5
 8011434:	080114e9 	.word	0x080114e9
 8011438:	080114fd 	.word	0x080114fd
 801143c:	08011511 	.word	0x08011511
 8011440:	08011525 	.word	0x08011525
 8011444:	08011539 	.word	0x08011539
	{
		AS923_APPLY_DR_OFFSET();
 8011448:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801144c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011450:	79bb      	ldrb	r3, [r7, #6]
 8011452:	4618      	mov	r0, r3
 8011454:	f001 face 	bl	80129f4 <RegionAS923ApplyDrOffset>
 8011458:	4603      	mov	r3, r0
 801145a:	e078      	b.n	801154e <RegionApplyDrOffset+0x166>
		AU915_APPLY_DR_OFFSET();
 801145c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011460:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011464:	79bb      	ldrb	r3, [r7, #6]
 8011466:	4618      	mov	r0, r3
 8011468:	f002 fc28 	bl	8013cbc <RegionAU915ApplyDrOffset>
 801146c:	4603      	mov	r3, r0
 801146e:	e06e      	b.n	801154e <RegionApplyDrOffset+0x166>
		CN470_APPLY_DR_OFFSET();
 8011470:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011474:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011478:	79bb      	ldrb	r3, [r7, #6]
 801147a:	4618      	mov	r0, r3
 801147c:	f003 fc42 	bl	8014d04 <RegionCN470ApplyDrOffset>
 8011480:	4603      	mov	r3, r0
 8011482:	e064      	b.n	801154e <RegionApplyDrOffset+0x166>
		CN779_APPLY_DR_OFFSET();
 8011484:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011488:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801148c:	79bb      	ldrb	r3, [r7, #6]
 801148e:	4618      	mov	r0, r3
 8011490:	f004 fe88 	bl	80161a4 <RegionCN779ApplyDrOffset>
 8011494:	4603      	mov	r3, r0
 8011496:	e05a      	b.n	801154e <RegionApplyDrOffset+0x166>
		EU433_APPLY_DR_OFFSET();
 8011498:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801149c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80114a0:	79bb      	ldrb	r3, [r7, #6]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f006 fe32 	bl	801810c <RegionEU433ApplyDrOffset>
 80114a8:	4603      	mov	r3, r0
 80114aa:	e050      	b.n	801154e <RegionApplyDrOffset+0x166>
		EU868_APPLY_DR_OFFSET();
 80114ac:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80114b0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80114b4:	79bb      	ldrb	r3, [r7, #6]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f008 f8ee 	bl	8019698 <RegionEU868ApplyDrOffset>
 80114bc:	4603      	mov	r3, r0
 80114be:	e046      	b.n	801154e <RegionApplyDrOffset+0x166>
		KR920_APPLY_DR_OFFSET();
 80114c0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80114c4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80114c8:	79bb      	ldrb	r3, [r7, #6]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f00a fd74 	bl	801bfb8 <RegionKR920ApplyDrOffset>
 80114d0:	4603      	mov	r3, r0
 80114d2:	e03c      	b.n	801154e <RegionApplyDrOffset+0x166>
		IN865_APPLY_DR_OFFSET();
 80114d4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80114d8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80114dc:	79bb      	ldrb	r3, [r7, #6]
 80114de:	4618      	mov	r0, r3
 80114e0:	f009 fb28 	bl	801ab34 <RegionIN865ApplyDrOffset>
 80114e4:	4603      	mov	r3, r0
 80114e6:	e032      	b.n	801154e <RegionApplyDrOffset+0x166>
		US915_APPLY_DR_OFFSET();
 80114e8:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80114ec:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80114f0:	79bb      	ldrb	r3, [r7, #6]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f00d f89a 	bl	801e62c <RegionUS915ApplyDrOffset>
 80114f8:	4603      	mov	r3, r0
 80114fa:	e028      	b.n	801154e <RegionApplyDrOffset+0x166>
		AS923_2_APPLY_DR_OFFSET();
 80114fc:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011500:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011504:	79bb      	ldrb	r3, [r7, #6]
 8011506:	4618      	mov	r0, r3
 8011508:	f001 fa74 	bl	80129f4 <RegionAS923ApplyDrOffset>
 801150c:	4603      	mov	r3, r0
 801150e:	e01e      	b.n	801154e <RegionApplyDrOffset+0x166>
		AS923_3_APPLY_DR_OFFSET();
 8011510:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011514:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011518:	79bb      	ldrb	r3, [r7, #6]
 801151a:	4618      	mov	r0, r3
 801151c:	f001 fa6a 	bl	80129f4 <RegionAS923ApplyDrOffset>
 8011520:	4603      	mov	r3, r0
 8011522:	e014      	b.n	801154e <RegionApplyDrOffset+0x166>
		AS923_4_APPLY_DR_OFFSET();
 8011524:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011528:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801152c:	79bb      	ldrb	r3, [r7, #6]
 801152e:	4618      	mov	r0, r3
 8011530:	f001 fa60 	bl	80129f4 <RegionAS923ApplyDrOffset>
 8011534:	4603      	mov	r3, r0
 8011536:	e00a      	b.n	801154e <RegionApplyDrOffset+0x166>
		RU864_APPLY_DR_OFFSET();
 8011538:	f997 2004 	ldrsb.w	r2, [r7, #4]
 801153c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011540:	79bb      	ldrb	r3, [r7, #6]
 8011542:	4618      	mov	r0, r3
 8011544:	f00b ffbe 	bl	801d4c4 <RegionRU864ApplyDrOffset>
 8011548:	4603      	mov	r3, r0
 801154a:	e000      	b.n	801154e <RegionApplyDrOffset+0x166>
	default:
	{
		return dr;
 801154c:	797b      	ldrb	r3, [r7, #5]
	}
	}
}
 801154e:	4618      	mov	r0, r3
 8011550:	370c      	adds	r7, #12
 8011552:	46bd      	mov	sp, r7
 8011554:	bd90      	pop	{r4, r7, pc}
 8011556:	bf00      	nop

08011558 <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 8011558:	b480      	push	{r7}
 801155a:	b085      	sub	sp, #20
 801155c:	af00      	add	r7, sp, #0
 801155e:	4603      	mov	r3, r0
 8011560:	460a      	mov	r2, r1
 8011562:	71fb      	strb	r3, [r7, #7]
 8011564:	4613      	mov	r3, r2
 8011566:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 8011568:	2300      	movs	r3, #0
 801156a:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 801156c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011570:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011574:	429a      	cmp	r2, r3
 8011576:	d102      	bne.n	801157e <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 8011578:	79bb      	ldrb	r3, [r7, #6]
 801157a:	73fb      	strb	r3, [r7, #15]
 801157c:	e002      	b.n	8011584 <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 801157e:	79fb      	ldrb	r3, [r7, #7]
 8011580:	3b01      	subs	r3, #1
 8011582:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 8011584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr

08011594 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	switch (BandwidthsAS923[drIndex])
 801159c:	4a0a      	ldr	r2, [pc, #40]	@ (80115c8 <GetBandwidth+0x34>)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115a4:	4a09      	ldr	r2, [pc, #36]	@ (80115cc <GetBandwidth+0x38>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d004      	beq.n	80115b4 <GetBandwidth+0x20>
 80115aa:	4a09      	ldr	r2, [pc, #36]	@ (80115d0 <GetBandwidth+0x3c>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d003      	beq.n	80115b8 <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 80115b0:	2300      	movs	r3, #0
 80115b2:	e002      	b.n	80115ba <GetBandwidth+0x26>
	case 250000:
		return 1;
 80115b4:	2301      	movs	r3, #1
 80115b6:	e000      	b.n	80115ba <GetBandwidth+0x26>
	case 500000:
		return 2;
 80115b8:	2302      	movs	r3, #2
	}
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr
 80115c6:	bf00      	nop
 80115c8:	08025170 	.word	0x08025170
 80115cc:	0003d090 	.word	0x0003d090
 80115d0:	0007a120 	.word	0x0007a120

080115d4 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	603b      	str	r3, [r7, #0]
 80115dc:	4603      	mov	r3, r0
 80115de:	71fb      	strb	r3, [r7, #7]
 80115e0:	460b      	mov	r3, r1
 80115e2:	71bb      	strb	r3, [r7, #6]
 80115e4:	4613      	mov	r3, r2
 80115e6:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 80115e8:	79fb      	ldrb	r3, [r7, #7]
 80115ea:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 80115ec:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80115f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80115f4:	4293      	cmp	r3, r2
 80115f6:	bfb8      	it	lt
 80115f8:	4613      	movlt	r3, r2
 80115fa:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 80115fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3714      	adds	r7, #20
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <VerifyTxFreq>:

static bool VerifyTxFreq(uint32_t freq)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
	// Check radio driver support
	if (Radio.CheckRfFrequency(freq) == false)
 8011614:	4b0d      	ldr	r3, [pc, #52]	@ (801164c <VerifyTxFreq+0x40>)
 8011616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	4798      	blx	r3
 801161c:	4603      	mov	r3, r0
 801161e:	f083 0301 	eor.w	r3, r3, #1
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <VerifyTxFreq+0x20>
	{
		return false;
 8011628:	2300      	movs	r3, #0
 801162a:	e00a      	b.n	8011642 <VerifyTxFreq+0x36>
	}

	if ((freq < 915000000) || (freq > 928000000))
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4a08      	ldr	r2, [pc, #32]	@ (8011650 <VerifyTxFreq+0x44>)
 8011630:	4293      	cmp	r3, r2
 8011632:	d903      	bls.n	801163c <VerifyTxFreq+0x30>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4a07      	ldr	r2, [pc, #28]	@ (8011654 <VerifyTxFreq+0x48>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d901      	bls.n	8011640 <VerifyTxFreq+0x34>
	{
		return false;
 801163c:	2300      	movs	r3, #0
 801163e:	e000      	b.n	8011642 <VerifyTxFreq+0x36>
	}
	return true;
 8011640:	2301      	movs	r3, #1
}
 8011642:	4618      	mov	r0, r3
 8011644:	3708      	adds	r7, #8
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	08025450 	.word	0x08025450
 8011650:	3689cabf 	.word	0x3689cabf
 8011654:	37502800 	.word	0x37502800

08011658 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(bool joined, uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b086      	sub	sp, #24
 801165c:	af00      	add	r7, sp, #0
 801165e:	60ba      	str	r2, [r7, #8]
 8011660:	607b      	str	r3, [r7, #4]
 8011662:	4603      	mov	r3, r0
 8011664:	73fb      	strb	r3, [r7, #15]
 8011666:	460b      	mov	r3, r1
 8011668:	73bb      	strb	r3, [r7, #14]
	uint8_t nbEnabledChannels = 0;
 801166a:	2300      	movs	r3, #0
 801166c:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 801166e:	2300      	movs	r3, #0
 8011670:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++)
 8011672:	2300      	movs	r3, #0
 8011674:	757b      	strb	r3, [r7, #21]
 8011676:	2300      	movs	r3, #0
 8011678:	753b      	strb	r3, [r7, #20]
 801167a:	e086      	b.n	801178a <CountNbOfEnabledChannels+0x132>
	{
		for (uint8_t j = 0; j < 16; j++)
 801167c:	2300      	movs	r3, #0
 801167e:	74fb      	strb	r3, [r7, #19]
 8011680:	e07a      	b.n	8011778 <CountNbOfEnabledChannels+0x120>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 8011682:	7d3b      	ldrb	r3, [r7, #20]
 8011684:	005b      	lsls	r3, r3, #1
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	4413      	add	r3, r2
 801168a:	881b      	ldrh	r3, [r3, #0]
 801168c:	461a      	mov	r2, r3
 801168e:	7cfb      	ldrb	r3, [r7, #19]
 8011690:	fa42 f303 	asr.w	r3, r2, r3
 8011694:	f003 0301 	and.w	r3, r3, #1
 8011698:	2b00      	cmp	r3, #0
 801169a:	d06a      	beq.n	8011772 <CountNbOfEnabledChannels+0x11a>
			{
				if (channels[i + j].Frequency == 0)
 801169c:	7d7a      	ldrb	r2, [r7, #21]
 801169e:	7cfb      	ldrb	r3, [r7, #19]
 80116a0:	4413      	add	r3, r2
 80116a2:	461a      	mov	r2, r3
 80116a4:	4613      	mov	r3, r2
 80116a6:	005b      	lsls	r3, r3, #1
 80116a8:	4413      	add	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	461a      	mov	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4413      	add	r3, r2
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d057      	beq.n	8011768 <CountNbOfEnabledChannels+0x110>
				{ // Check if the channel is enabled
					continue;
				}
				if (joined == false)
 80116b8:	7bfb      	ldrb	r3, [r7, #15]
 80116ba:	f083 0301 	eor.w	r3, r3, #1
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d007      	beq.n	80116d4 <CountNbOfEnabledChannels+0x7c>
				{
					if ((AS923_JOIN_CHANNELS & (1 << j)) == 0)
 80116c4:	7cfb      	ldrb	r3, [r7, #19]
 80116c6:	2203      	movs	r2, #3
 80116c8:	fa42 f303 	asr.w	r3, r2, r3
 80116cc:	f003 0301 	and.w	r3, r3, #1
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d04b      	beq.n	801176c <CountNbOfEnabledChannels+0x114>
					{
						continue;
					}
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 80116d4:	f997 000e 	ldrsb.w	r0, [r7, #14]
 80116d8:	7d7a      	ldrb	r2, [r7, #21]
 80116da:	7cfb      	ldrb	r3, [r7, #19]
 80116dc:	4413      	add	r3, r2
 80116de:	461a      	mov	r2, r3
 80116e0:	4613      	mov	r3, r2
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	4413      	add	r3, r2
 80116e6:	009b      	lsls	r3, r3, #2
 80116e8:	461a      	mov	r2, r3
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	4413      	add	r3, r2
 80116ee:	7a1b      	ldrb	r3, [r3, #8]
 80116f0:	f343 0303 	sbfx	r3, r3, #0, #4
 80116f4:	b25b      	sxtb	r3, r3
 80116f6:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 80116f8:	7d7a      	ldrb	r2, [r7, #21]
 80116fa:	7cfb      	ldrb	r3, [r7, #19]
 80116fc:	4413      	add	r3, r2
 80116fe:	461a      	mov	r2, r3
 8011700:	4613      	mov	r3, r2
 8011702:	005b      	lsls	r3, r3, #1
 8011704:	4413      	add	r3, r2
 8011706:	009b      	lsls	r3, r3, #2
 8011708:	461a      	mov	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4413      	add	r3, r2
 801170e:	7a1b      	ldrb	r3, [r3, #8]
 8011710:	f343 1303 	sbfx	r3, r3, #4, #4
 8011714:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8011716:	461a      	mov	r2, r3
 8011718:	f004 fe26 	bl	8016368 <RegionCommonValueInRange>
 801171c:	4603      	mov	r3, r0
 801171e:	2b00      	cmp	r3, #0
 8011720:	d026      	beq.n	8011770 <CountNbOfEnabledChannels+0x118>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 8011722:	7d7a      	ldrb	r2, [r7, #21]
 8011724:	7cfb      	ldrb	r3, [r7, #19]
 8011726:	4413      	add	r3, r2
 8011728:	461a      	mov	r2, r3
 801172a:	4613      	mov	r3, r2
 801172c:	005b      	lsls	r3, r3, #1
 801172e:	4413      	add	r3, r2
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	461a      	mov	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	4413      	add	r3, r2
 8011738:	7a5b      	ldrb	r3, [r3, #9]
 801173a:	015b      	lsls	r3, r3, #5
 801173c:	6a3a      	ldr	r2, [r7, #32]
 801173e:	4413      	add	r3, r2
 8011740:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8011744:	4313      	orrs	r3, r2
 8011746:	d003      	beq.n	8011750 <CountNbOfEnabledChannels+0xf8>
				{ // Check if the band is available for transmission
					delayTransmission++;
 8011748:	7dbb      	ldrb	r3, [r7, #22]
 801174a:	3301      	adds	r3, #1
 801174c:	75bb      	strb	r3, [r7, #22]
					continue;
 801174e:	e010      	b.n	8011772 <CountNbOfEnabledChannels+0x11a>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 8011750:	7dfb      	ldrb	r3, [r7, #23]
 8011752:	1c5a      	adds	r2, r3, #1
 8011754:	75fa      	strb	r2, [r7, #23]
 8011756:	461a      	mov	r2, r3
 8011758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175a:	4413      	add	r3, r2
 801175c:	7d79      	ldrb	r1, [r7, #21]
 801175e:	7cfa      	ldrb	r2, [r7, #19]
 8011760:	440a      	add	r2, r1
 8011762:	b2d2      	uxtb	r2, r2
 8011764:	701a      	strb	r2, [r3, #0]
 8011766:	e004      	b.n	8011772 <CountNbOfEnabledChannels+0x11a>
					continue;
 8011768:	bf00      	nop
 801176a:	e002      	b.n	8011772 <CountNbOfEnabledChannels+0x11a>
						continue;
 801176c:	bf00      	nop
 801176e:	e000      	b.n	8011772 <CountNbOfEnabledChannels+0x11a>
					continue;
 8011770:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 8011772:	7cfb      	ldrb	r3, [r7, #19]
 8011774:	3301      	adds	r3, #1
 8011776:	74fb      	strb	r3, [r7, #19]
 8011778:	7cfb      	ldrb	r3, [r7, #19]
 801177a:	2b0f      	cmp	r3, #15
 801177c:	d981      	bls.n	8011682 <CountNbOfEnabledChannels+0x2a>
	for (uint8_t i = 0, k = 0; i < AS923_MAX_NB_CHANNELS; i += 16, k++)
 801177e:	7d7b      	ldrb	r3, [r7, #21]
 8011780:	3310      	adds	r3, #16
 8011782:	757b      	strb	r3, [r7, #21]
 8011784:	7d3b      	ldrb	r3, [r7, #20]
 8011786:	3301      	adds	r3, #1
 8011788:	753b      	strb	r3, [r7, #20]
 801178a:	7d7b      	ldrb	r3, [r7, #21]
 801178c:	2b0f      	cmp	r3, #15
 801178e:	f67f af75 	bls.w	801167c <CountNbOfEnabledChannels+0x24>
			}
		}
	}

	*delayTx = delayTransmission;
 8011792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011794:	7dba      	ldrb	r2, [r7, #22]
 8011796:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 8011798:	7dfb      	ldrb	r3, [r7, #23]
}
 801179a:	4618      	mov	r0, r3
 801179c:	3718      	adds	r7, #24
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
	...

080117a4 <RegionAS923GetPhyParam>:

PhyParam_t RegionAS923GetPhyParam(GetPhyParams_t *getPhy)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 80117ac:	2300      	movs	r3, #0
 80117ae:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	2b20      	cmp	r3, #32
 80117b6:	f200 80ea 	bhi.w	801198e <RegionAS923GetPhyParam+0x1ea>
 80117ba:	a201      	add	r2, pc, #4	@ (adr r2, 80117c0 <RegionAS923GetPhyParam+0x1c>)
 80117bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c0:	08011845 	.word	0x08011845
 80117c4:	08011859 	.word	0x08011859
 80117c8:	0801198f 	.word	0x0801198f
 80117cc:	0801198f 	.word	0x0801198f
 80117d0:	0801198f 	.word	0x0801198f
 80117d4:	0801186d 	.word	0x0801186d
 80117d8:	0801198f 	.word	0x0801198f
 80117dc:	0801198f 	.word	0x0801198f
 80117e0:	080118a3 	.word	0x080118a3
 80117e4:	080118a9 	.word	0x080118a9
 80117e8:	080118d1 	.word	0x080118d1
 80117ec:	080118f9 	.word	0x080118f9
 80117f0:	080118ff 	.word	0x080118ff
 80117f4:	08011907 	.word	0x08011907
 80117f8:	0801190f 	.word	0x0801190f
 80117fc:	08011917 	.word	0x08011917
 8011800:	0801191f 	.word	0x0801191f
 8011804:	08011927 	.word	0x08011927
 8011808:	0801192f 	.word	0x0801192f
 801180c:	08011943 	.word	0x08011943
 8011810:	08011949 	.word	0x08011949
 8011814:	08011951 	.word	0x08011951
 8011818:	08011957 	.word	0x08011957
 801181c:	0801195d 	.word	0x0801195d
 8011820:	08011963 	.word	0x08011963
 8011824:	08011969 	.word	0x08011969
 8011828:	0801196f 	.word	0x0801196f
 801182c:	08011975 	.word	0x08011975
 8011830:	0801197b 	.word	0x0801197b
 8011834:	08011983 	.word	0x08011983
 8011838:	08011989 	.word	0x08011989
 801183c:	08011989 	.word	0x08011989
 8011840:	08011873 	.word	0x08011873
	{
	case PHY_MIN_RX_DR:
	{
		if (getPhy->DownlinkDwellTime == 0)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	78db      	ldrb	r3, [r3, #3]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d102      	bne.n	8011852 <RegionAS923GetPhyParam+0xae>
		{
			phyParam.Value = AS923_RX_MIN_DATARATE;
 801184c:	2300      	movs	r3, #0
 801184e:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
		}
		break;
 8011850:	e09e      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
			phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8011852:	2302      	movs	r3, #2
 8011854:	60fb      	str	r3, [r7, #12]
		break;
 8011856:	e09b      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_MIN_TX_DR:
	{
		if (getPhy->UplinkDwellTime == 0)
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	789b      	ldrb	r3, [r3, #2]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d102      	bne.n	8011866 <RegionAS923GetPhyParam+0xc2>
		{
			phyParam.Value = AS923_TX_MIN_DATARATE;
 8011860:	2300      	movs	r3, #0
 8011862:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
		}
		break;
 8011864:	e094      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
			phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8011866:	2302      	movs	r3, #2
 8011868:	60fb      	str	r3, [r7, #12]
		break;
 801186a:	e091      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = AS923_DEFAULT_DATARATE;
 801186c:	2302      	movs	r3, #2
 801186e:	60fb      	str	r3, [r7, #12]
		break;
 8011870:	e08e      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		if (getPhy->UplinkDwellTime == 0)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	789b      	ldrb	r3, [r3, #2]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d109      	bne.n	801188e <RegionAS923GetPhyParam+0xea>
		{
			phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, AS923_TX_MIN_DATARATE);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011880:	2100      	movs	r1, #0
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff fe68 	bl	8011558 <GetNextLowerTxDr>
 8011888:	4603      	mov	r3, r0
 801188a:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE);
		}
		break;
 801188c:	e080      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
			phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011894:	2102      	movs	r1, #2
 8011896:	4618      	mov	r0, r3
 8011898:	f7ff fe5e 	bl	8011558 <GetNextLowerTxDr>
 801189c:	4603      	mov	r3, r0
 801189e:	60fb      	str	r3, [r7, #12]
		break;
 80118a0:	e076      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = AS923_DEFAULT_TX_POWER;
 80118a2:	2300      	movs	r3, #0
 80118a4:	60fb      	str	r3, [r7, #12]
		break;
 80118a6:	e073      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_MAX_PAYLOAD:
	{
		if (getPhy->UplinkDwellTime == 0)
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	789b      	ldrb	r3, [r3, #2]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d107      	bne.n	80118c0 <RegionAS923GetPhyParam+0x11c>
		{
			phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80118b6:	461a      	mov	r2, r3
 80118b8:	4b38      	ldr	r3, [pc, #224]	@ (801199c <RegionAS923GetPhyParam+0x1f8>)
 80118ba:	5c9b      	ldrb	r3, [r3, r2]
 80118bc:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
		}
		break;
 80118be:	e067      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
			phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80118c6:	461a      	mov	r2, r3
 80118c8:	4b35      	ldr	r3, [pc, #212]	@ (80119a0 <RegionAS923GetPhyParam+0x1fc>)
 80118ca:	5c9b      	ldrb	r3, [r3, r2]
 80118cc:	60fb      	str	r3, [r7, #12]
		break;
 80118ce:	e05f      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		if (getPhy->UplinkDwellTime == 0)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	789b      	ldrb	r3, [r3, #2]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d107      	bne.n	80118e8 <RegionAS923GetPhyParam+0x144>
		{
			phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80118de:	461a      	mov	r2, r3
 80118e0:	4b30      	ldr	r3, [pc, #192]	@ (80119a4 <RegionAS923GetPhyParam+0x200>)
 80118e2:	5c9b      	ldrb	r3, [r3, r2]
 80118e4:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
		}
		break;
 80118e6:	e053      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
			phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80118ee:	461a      	mov	r2, r3
 80118f0:	4b2b      	ldr	r3, [pc, #172]	@ (80119a0 <RegionAS923GetPhyParam+0x1fc>)
 80118f2:	5c9b      	ldrb	r3, [r3, r2]
 80118f4:	60fb      	str	r3, [r7, #12]
		break;
 80118f6:	e04b      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 80118f8:	2300      	movs	r3, #0
 80118fa:	60fb      	str	r3, [r7, #12]
		break;
 80118fc:	e048      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = AS923_MAX_RX_WINDOW;
 80118fe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8011902:	60fb      	str	r3, [r7, #12]
		break;
 8011904:	e044      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = AS923_RECEIVE_DELAY1;
 8011906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801190a:	60fb      	str	r3, [r7, #12]
		break;
 801190c:	e040      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = AS923_RECEIVE_DELAY2;
 801190e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8011912:	60fb      	str	r3, [r7, #12]
		break;
 8011914:	e03c      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = AS923_JOIN_ACCEPT_DELAY1;
 8011916:	f241 3388 	movw	r3, #5000	@ 0x1388
 801191a:	60fb      	str	r3, [r7, #12]
		break;
 801191c:	e038      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = AS923_JOIN_ACCEPT_DELAY2;
 801191e:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011922:	60fb      	str	r3, [r7, #12]
		break;
 8011924:	e034      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = AS923_MAX_FCNT_GAP;
 8011926:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801192a:	60fb      	str	r3, [r7, #12]
		break;
 801192c:	e030      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (AS923_ACKTIMEOUT + randr(-AS923_ACK_TIMEOUT_RND, AS923_ACK_TIMEOUT_RND));
 801192e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011932:	481d      	ldr	r0, [pc, #116]	@ (80119a8 <RegionAS923GetPhyParam+0x204>)
 8011934:	f00f f91e 	bl	8020b74 <randr>
 8011938:	4603      	mov	r3, r0
 801193a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801193e:	60fb      	str	r3, [r7, #12]
		break;
 8011940:	e026      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = AS923_DEFAULT_RX1_DR_OFFSET;
 8011942:	2300      	movs	r3, #0
 8011944:	60fb      	str	r3, [r7, #12]
		break;
 8011946:	e023      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = AS923_RX_WND_2_FREQ;
 8011948:	4b18      	ldr	r3, [pc, #96]	@ (80119ac <RegionAS923GetPhyParam+0x208>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	60fb      	str	r3, [r7, #12]
		break;
 801194e:	e01f      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = AS923_RX_WND_2_DR;
 8011950:	2302      	movs	r3, #2
 8011952:	60fb      	str	r3, [r7, #12]
		break;
 8011954:	e01c      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 8011956:	4b16      	ldr	r3, [pc, #88]	@ (80119b0 <RegionAS923GetPhyParam+0x20c>)
 8011958:	60fb      	str	r3, [r7, #12]
		break;
 801195a:	e019      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 801195c:	4b15      	ldr	r3, [pc, #84]	@ (80119b4 <RegionAS923GetPhyParam+0x210>)
 801195e:	60fb      	str	r3, [r7, #12]
		break;
 8011960:	e016      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = AS923_MAX_NB_CHANNELS;
 8011962:	2310      	movs	r3, #16
 8011964:	60fb      	str	r3, [r7, #12]
		break;
 8011966:	e013      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 8011968:	4b13      	ldr	r3, [pc, #76]	@ (80119b8 <RegionAS923GetPhyParam+0x214>)
 801196a:	60fb      	str	r3, [r7, #12]
		break;
 801196c:	e010      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	{
		phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 801196e:	2301      	movs	r3, #1
 8011970:	60fb      	str	r3, [r7, #12]
		break;
 8011972:	e00d      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8011974:	2301      	movs	r3, #1
 8011976:	60fb      	str	r3, [r7, #12]
		break;
 8011978:	e00a      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 801197a:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 801197e:	60fb      	str	r3, [r7, #12]
		break;
 8011980:	e006      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8011982:	4b0e      	ldr	r3, [pc, #56]	@ (80119bc <RegionAS923GetPhyParam+0x218>)
 8011984:	60fb      	str	r3, [r7, #12]
		break;
 8011986:	e003      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 1;
 8011988:	2301      	movs	r3, #1
 801198a:	60fb      	str	r3, [r7, #12]
		break;
 801198c:	e000      	b.n	8011990 <RegionAS923GetPhyParam+0x1ec>
	}
	default:
	{
		break;
 801198e:	bf00      	nop
	}
	}

	return phyParam;
 8011990:	68fb      	ldr	r3, [r7, #12]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	08025190 	.word	0x08025190
 80119a0:	080251a0 	.word	0x080251a0
 80119a4:	08025198 	.word	0x08025198
 80119a8:	fffffc18 	.word	0xfffffc18
 80119ac:	200000c8 	.word	0x200000c8
 80119b0:	20006c9c 	.word	0x20006c9c
 80119b4:	20006ca8 	.word	0x20006ca8
 80119b8:	20006d88 	.word	0x20006d88
 80119bc:	4009999a 	.word	0x4009999a

080119c0 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	7858      	ldrb	r0, [r3, #1]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	4619      	mov	r1, r3
 80119d2:	4a0a      	ldr	r2, [pc, #40]	@ (80119fc <RegionAS923SetBandTxDone+0x3c>)
 80119d4:	460b      	mov	r3, r1
 80119d6:	005b      	lsls	r3, r3, #1
 80119d8:	440b      	add	r3, r1
 80119da:	009b      	lsls	r3, r3, #2
 80119dc:	4413      	add	r3, r2
 80119de:	3309      	adds	r3, #9
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	015b      	lsls	r3, r3, #5
 80119e4:	4a06      	ldr	r2, [pc, #24]	@ (8011a00 <RegionAS923SetBandTxDone+0x40>)
 80119e6:	1899      	adds	r1, r3, r2
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80119ee:	f004 fd61 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 80119f2:	bf00      	nop
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	20006d88 	.word	0x20006d88
 8011a00:	200000d0 	.word	0x200000d0

08011a04 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults(InitType_t type)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b088      	sub	sp, #32
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	71fb      	strb	r3, [r7, #7]
	switch (type)
 8011a0e:	79fb      	ldrb	r3, [r7, #7]
 8011a10:	2b02      	cmp	r3, #2
 8011a12:	d026      	beq.n	8011a62 <RegionAS923InitDefaults+0x5e>
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	dc2a      	bgt.n	8011a6e <RegionAS923InitDefaults+0x6a>
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d002      	beq.n	8011a22 <RegionAS923InitDefaults+0x1e>
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d017      	beq.n	8011a50 <RegionAS923InitDefaults+0x4c>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
		break;
	}
	default:
	{
		break;
 8011a20:	e025      	b.n	8011a6e <RegionAS923InitDefaults+0x6a>
		Channels[0] = (ChannelParams_t)AS923_LC1;
 8011a22:	4b15      	ldr	r3, [pc, #84]	@ (8011a78 <RegionAS923InitDefaults+0x74>)
 8011a24:	4a15      	ldr	r2, [pc, #84]	@ (8011a7c <RegionAS923InitDefaults+0x78>)
 8011a26:	ca07      	ldmia	r2, {r0, r1, r2}
 8011a28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[1] = (ChannelParams_t)AS923_LC2;
 8011a2c:	4b12      	ldr	r3, [pc, #72]	@ (8011a78 <RegionAS923InitDefaults+0x74>)
 8011a2e:	4a14      	ldr	r2, [pc, #80]	@ (8011a80 <RegionAS923InitDefaults+0x7c>)
 8011a30:	330c      	adds	r3, #12
 8011a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8011a34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ChannelsDefaultMask[0] = LC(1) + LC(2);
 8011a38:	4b12      	ldr	r3, [pc, #72]	@ (8011a84 <RegionAS923InitDefaults+0x80>)
 8011a3a:	2203      	movs	r2, #3
 8011a3c:	801a      	strh	r2, [r3, #0]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8011a3e:	2201      	movs	r2, #1
 8011a40:	4910      	ldr	r1, [pc, #64]	@ (8011a84 <RegionAS923InitDefaults+0x80>)
 8011a42:	4811      	ldr	r0, [pc, #68]	@ (8011a88 <RegionAS923InitDefaults+0x84>)
 8011a44:	f004 fd0f 	bl	8016466 <RegionCommonChanMaskCopy>
		AS923_RX_WND_2_FREQ = 923200000;
 8011a48:	4b10      	ldr	r3, [pc, #64]	@ (8011a8c <RegionAS923InitDefaults+0x88>)
 8011a4a:	4a11      	ldr	r2, [pc, #68]	@ (8011a90 <RegionAS923InitDefaults+0x8c>)
 8011a4c:	601a      	str	r2, [r3, #0]
		break;
 8011a4e:	e00f      	b.n	8011a70 <RegionAS923InitDefaults+0x6c>
		ChannelsMask[0] |= ChannelsDefaultMask[0];
 8011a50:	4b0d      	ldr	r3, [pc, #52]	@ (8011a88 <RegionAS923InitDefaults+0x84>)
 8011a52:	881a      	ldrh	r2, [r3, #0]
 8011a54:	4b0b      	ldr	r3, [pc, #44]	@ (8011a84 <RegionAS923InitDefaults+0x80>)
 8011a56:	881b      	ldrh	r3, [r3, #0]
 8011a58:	4313      	orrs	r3, r2
 8011a5a:	b29a      	uxth	r2, r3
 8011a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a88 <RegionAS923InitDefaults+0x84>)
 8011a5e:	801a      	strh	r2, [r3, #0]
		break;
 8011a60:	e006      	b.n	8011a70 <RegionAS923InitDefaults+0x6c>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8011a62:	2201      	movs	r2, #1
 8011a64:	4907      	ldr	r1, [pc, #28]	@ (8011a84 <RegionAS923InitDefaults+0x80>)
 8011a66:	4808      	ldr	r0, [pc, #32]	@ (8011a88 <RegionAS923InitDefaults+0x84>)
 8011a68:	f004 fcfd 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8011a6c:	e000      	b.n	8011a70 <RegionAS923InitDefaults+0x6c>
		break;
 8011a6e:	bf00      	nop
	}
	}
}
 8011a70:	bf00      	nop
 8011a72:	3720      	adds	r7, #32
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	20006d88 	.word	0x20006d88
 8011a7c:	08024ad4 	.word	0x08024ad4
 8011a80:	08024ae0 	.word	0x08024ae0
 8011a84:	20006ca8 	.word	0x20006ca8
 8011a88:	20006c9c 	.word	0x20006c9c
 8011a8c:	200000c8 	.word	0x200000c8
 8011a90:	3706ea00 	.word	0x3706ea00

08011a94 <RegionAS923Verify>:

bool RegionAS923Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 8011aa0:	78fb      	ldrb	r3, [r7, #3]
 8011aa2:	3b04      	subs	r3, #4
 8011aa4:	2b1a      	cmp	r3, #26
 8011aa6:	f200 809f 	bhi.w	8011be8 <RegionAS923Verify+0x154>
 8011aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8011ab0 <RegionAS923Verify+0x1c>)
 8011aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ab0:	08011b1d 	.word	0x08011b1d
 8011ab4:	08011b61 	.word	0x08011b61
 8011ab8:	08011b7f 	.word	0x08011b7f
 8011abc:	08011bc3 	.word	0x08011bc3
 8011ac0:	08011bc3 	.word	0x08011bc3
 8011ac4:	08011be9 	.word	0x08011be9
 8011ac8:	08011be9 	.word	0x08011be9
 8011acc:	08011be1 	.word	0x08011be1
 8011ad0:	08011be9 	.word	0x08011be9
 8011ad4:	08011be9 	.word	0x08011be9
 8011ad8:	08011be9 	.word	0x08011be9
 8011adc:	08011be9 	.word	0x08011be9
 8011ae0:	08011be9 	.word	0x08011be9
 8011ae4:	08011be9 	.word	0x08011be9
 8011ae8:	08011be9 	.word	0x08011be9
 8011aec:	08011be9 	.word	0x08011be9
 8011af0:	08011be9 	.word	0x08011be9
 8011af4:	08011be9 	.word	0x08011be9
 8011af8:	08011be9 	.word	0x08011be9
 8011afc:	08011be9 	.word	0x08011be9
 8011b00:	08011be9 	.word	0x08011be9
 8011b04:	08011be9 	.word	0x08011be9
 8011b08:	08011be9 	.word	0x08011be9
 8011b0c:	08011be9 	.word	0x08011be9
 8011b10:	08011be9 	.word	0x08011be9
 8011b14:	08011be9 	.word	0x08011be9
 8011b18:	08011be5 	.word	0x08011be5
	{
	case PHY_TX_DR:
	{
		if (verify->DatarateParams.UplinkDwellTime == 0)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	789b      	ldrb	r3, [r3, #2]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10e      	bne.n	8011b42 <RegionAS923Verify+0xae>
		{
			return RegionCommonValueInRange(verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f993 3000 	ldrsb.w	r3, [r3]
 8011b2a:	2207      	movs	r2, #7
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f004 fc1a 	bl	8016368 <RegionCommonValueInRange>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	bf14      	ite	ne
 8011b3a:	2301      	movne	r3, #1
 8011b3c:	2300      	moveq	r3, #0
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	e053      	b.n	8011bea <RegionAS923Verify+0x156>
		}
		else
		{
			return RegionCommonValueInRange(verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f993 3000 	ldrsb.w	r3, [r3]
 8011b48:	2207      	movs	r2, #7
 8011b4a:	2102      	movs	r1, #2
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f004 fc0b 	bl	8016368 <RegionCommonValueInRange>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	bf14      	ite	ne
 8011b58:	2301      	movne	r3, #1
 8011b5a:	2300      	moveq	r3, #0
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	e044      	b.n	8011bea <RegionAS923Verify+0x156>
		}
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f993 3000 	ldrsb.w	r3, [r3]
 8011b66:	2205      	movs	r2, #5
 8011b68:	2100      	movs	r1, #0
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f004 fbfc 	bl	8016368 <RegionCommonValueInRange>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	bf14      	ite	ne
 8011b76:	2301      	movne	r3, #1
 8011b78:	2300      	moveq	r3, #0
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	e035      	b.n	8011bea <RegionAS923Verify+0x156>
	}
	case PHY_RX_DR:
	{
		if (verify->DatarateParams.DownlinkDwellTime == 0)
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	785b      	ldrb	r3, [r3, #1]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10e      	bne.n	8011ba4 <RegionAS923Verify+0x110>
		{
			return RegionCommonValueInRange(verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f993 3000 	ldrsb.w	r3, [r3]
 8011b8c:	2207      	movs	r2, #7
 8011b8e:	2100      	movs	r1, #0
 8011b90:	4618      	mov	r0, r3
 8011b92:	f004 fbe9 	bl	8016368 <RegionCommonValueInRange>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	bf14      	ite	ne
 8011b9c:	2301      	movne	r3, #1
 8011b9e:	2300      	moveq	r3, #0
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	e022      	b.n	8011bea <RegionAS923Verify+0x156>
		}
		else
		{
			return RegionCommonValueInRange(verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f993 3000 	ldrsb.w	r3, [r3]
 8011baa:	2207      	movs	r2, #7
 8011bac:	2102      	movs	r1, #2
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f004 fbda 	bl	8016368 <RegionCommonValueInRange>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	bf14      	ite	ne
 8011bba:	2301      	movne	r3, #1
 8011bbc:	2300      	moveq	r3, #0
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	e013      	b.n	8011bea <RegionAS923Verify+0x156>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f993 3000 	ldrsb.w	r3, [r3]
 8011bc8:	2207      	movs	r2, #7
 8011bca:	2100      	movs	r1, #0
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f004 fbcb 	bl	8016368 <RegionCommonValueInRange>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	bf14      	ite	ne
 8011bd8:	2301      	movne	r3, #1
 8011bda:	2300      	moveq	r3, #0
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	e004      	b.n	8011bea <RegionAS923Verify+0x156>
	}
	case PHY_DUTY_CYCLE:
	{
		return AS923_DUTY_CYCLE_ENABLED;
 8011be0:	2300      	movs	r3, #0
 8011be2:	e002      	b.n	8011bea <RegionAS923Verify+0x156>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		return true;
 8011be4:	2301      	movs	r3, #1
 8011be6:	e000      	b.n	8011bea <RegionAS923Verify+0x156>
	}
	default:
		return false;
 8011be8:	2300      	movs	r3, #0
	}
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3708      	adds	r7, #8
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop

08011bf4 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b08a      	sub	sp, #40	@ 0x28
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
	ChannelParams_t newChannel;
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	// Setup default datarate range
	newChannel.DrRange.Value = (DR_5 << 4) | DR_0;
 8011bfc:	2350      	movs	r3, #80	@ 0x50
 8011bfe:	f887 3020 	strb.w	r3, [r7, #32]

	// Size of the optional CF list
	if (applyCFList->Size != 16)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	791b      	ldrb	r3, [r3, #4]
 8011c06:	2b10      	cmp	r3, #16
 8011c08:	d15c      	bne.n	8011cc4 <RegionAS923ApplyCFList+0xd0>
	{
		return;
	}

	// Last byte is RFU, don't take it into account
	for (uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i += 3, chanIdx++)
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011c10:	2308      	movs	r3, #8
 8011c12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011c16:	e050      	b.n	8011cba <RegionAS923ApplyCFList+0xc6>
	{
		if (chanIdx < (AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS))
 8011c18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011c1c:	2b0c      	cmp	r3, #12
 8011c1e:	d824      	bhi.n	8011c6a <RegionAS923ApplyCFList+0x76>
		{
			// Channel frequency
			newChannel.Frequency = (uint32_t)applyCFList->Payload[i];
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681a      	ldr	r2, [r3, #0]
 8011c24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c28:	4413      	add	r3, r2
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 1] << 8);
 8011c2e:	69ba      	ldr	r2, [r7, #24]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6819      	ldr	r1, [r3, #0]
 8011c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c38:	3301      	adds	r3, #1
 8011c3a:	440b      	add	r3, r1
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	021b      	lsls	r3, r3, #8
 8011c40:	4313      	orrs	r3, r2
 8011c42:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 2] << 16);
 8011c44:	69ba      	ldr	r2, [r7, #24]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6819      	ldr	r1, [r3, #0]
 8011c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c4e:	3302      	adds	r3, #2
 8011c50:	440b      	add	r3, r1
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	041b      	lsls	r3, r3, #16
 8011c56:	4313      	orrs	r3, r2
 8011c58:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency *= 100;
 8011c5a:	69bb      	ldr	r3, [r7, #24]
 8011c5c:	2264      	movs	r2, #100	@ 0x64
 8011c5e:	fb02 f303 	mul.w	r3, r2, r3
 8011c62:	61bb      	str	r3, [r7, #24]

			// Initialize alternative frequency to 0
			newChannel.Rx1Frequency = 0;
 8011c64:	2300      	movs	r3, #0
 8011c66:	61fb      	str	r3, [r7, #28]
 8011c68:	e006      	b.n	8011c78 <RegionAS923ApplyCFList+0x84>
			LOG_LIB("AS923", "Apply CF list: new channel at Freq = %d", newChannel.Frequency);
		}
		else
		{
			newChannel.Frequency = 0;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	61bb      	str	r3, [r7, #24]
			newChannel.DrRange.Value = 0;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	f887 3020 	strb.w	r3, [r7, #32]
			newChannel.Rx1Frequency = 0;
 8011c74:	2300      	movs	r3, #0
 8011c76:	61fb      	str	r3, [r7, #28]
		}

		if (newChannel.Frequency != 0)
 8011c78:	69bb      	ldr	r3, [r7, #24]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00b      	beq.n	8011c96 <RegionAS923ApplyCFList+0xa2>
		{
			channelAdd.NewChannel = &newChannel;
 8011c7e:	f107 0318 	add.w	r3, r7, #24
 8011c82:	613b      	str	r3, [r7, #16]
			channelAdd.ChannelId = chanIdx;
 8011c84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011c88:	753b      	strb	r3, [r7, #20]

			// Try to add all channels
			RegionAS923ChannelAdd(&channelAdd);
 8011c8a:	f107 0310 	add.w	r3, r7, #16
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f000 fd7e 	bl	8012790 <RegionAS923ChannelAdd>
 8011c94:	e007      	b.n	8011ca6 <RegionAS923ApplyCFList+0xb2>
		}
		else
		{
			channelRemove.ChannelId = chanIdx;
 8011c96:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011c9a:	733b      	strb	r3, [r7, #12]

			RegionAS923ChannelsRemove(&channelRemove);
 8011c9c:	f107 030c 	add.w	r3, r7, #12
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 fe2d 	bl	8012900 <RegionAS923ChannelsRemove>
	for (uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i += 3, chanIdx++)
 8011ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011caa:	3303      	adds	r3, #3
 8011cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011cba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011cbe:	2b0f      	cmp	r3, #15
 8011cc0:	d9aa      	bls.n	8011c18 <RegionAS923ApplyCFList+0x24>
 8011cc2:	e000      	b.n	8011cc6 <RegionAS923ApplyCFList+0xd2>
		return;
 8011cc4:	bf00      	nop
		}
	}
}
 8011cc6:	3728      	adds	r7, #40	@ 0x28
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}

08011ccc <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b082      	sub	sp, #8
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	791b      	ldrb	r3, [r3, #4]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d002      	beq.n	8011ce2 <RegionAS923ChanMaskSet+0x16>
 8011cdc:	2b01      	cmp	r3, #1
 8011cde:	d008      	beq.n	8011cf2 <RegionAS923ChanMaskSet+0x26>
 8011ce0:	e00f      	b.n	8011d02 <RegionAS923ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 1);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	4619      	mov	r1, r3
 8011cea:	4809      	ldr	r0, [pc, #36]	@ (8011d10 <RegionAS923ChanMaskSet+0x44>)
 8011cec:	f004 fbbb 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8011cf0:	e009      	b.n	8011d06 <RegionAS923ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	4806      	ldr	r0, [pc, #24]	@ (8011d14 <RegionAS923ChanMaskSet+0x48>)
 8011cfc:	f004 fbb3 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8011d00:	e001      	b.n	8011d06 <RegionAS923ChanMaskSet+0x3a>
	}
	default:
		return false;
 8011d02:	2300      	movs	r3, #0
 8011d04:	e000      	b.n	8011d08 <RegionAS923ChanMaskSet+0x3c>
	}
	return true;
 8011d06:	2301      	movs	r3, #1
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	20006c9c 	.word	0x20006c9c
 8011d14:	20006ca8 	.word	0x20006ca8

08011d18 <RegionAS923AdrNext>:

bool RegionAS923AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b088      	sub	sp, #32
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	607a      	str	r2, [r7, #4]
 8011d24:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 8011d26:	2300      	movs	r3, #0
 8011d28:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	7a1b      	ldrb	r3, [r3, #8]
 8011d2e:	77bb      	strb	r3, [r7, #30]
	int8_t minTxDatarate = 0;
 8011d30:	2300      	movs	r3, #0
 8011d32:	773b      	strb	r3, [r7, #28]
	int8_t txPower = adrNext->TxPower;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	7a5b      	ldrb	r3, [r3, #9]
 8011d38:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	763b      	strb	r3, [r7, #24]
	getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	7a9b      	ldrb	r3, [r3, #10]
 8011d42:	76bb      	strb	r3, [r7, #26]
	phyParam = RegionAS923GetPhyParam(&getPhy);
 8011d44:	f107 0318 	add.w	r3, r7, #24
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7ff fd2b 	bl	80117a4 <RegionAS923GetPhyParam>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	617b      	str	r3, [r7, #20]
	minTxDatarate = phyParam.Value;
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	773b      	strb	r3, [r7, #28]

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	685a      	ldr	r2, [r3, #4]
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	601a      	str	r2, [r3, #0]

	// Apply the minimum possible datarate.
	datarate = T_MAX(datarate, minTxDatarate);
 8011d5e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8011d62:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011d66:	4293      	cmp	r3, r2
 8011d68:	bfb8      	it	lt
 8011d6a:	4613      	movlt	r3, r2
 8011d6c:	77bb      	strb	r3, [r7, #30]

	if (adrNext->AdrEnabled == true)
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	785b      	ldrb	r3, [r3, #1]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d043      	beq.n	8011dfe <RegionAS923AdrNext+0xe6>
	{
		if (datarate == minTxDatarate)
 8011d76:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8011d7a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d105      	bne.n	8011d8e <RegionAS923AdrNext+0x76>
		{
			*adrAckCounter = 0;
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	2200      	movs	r2, #0
 8011d86:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	77fb      	strb	r3, [r7, #31]
 8011d8c:	e037      	b.n	8011dfe <RegionAS923AdrNext+0xe6>
		}
		else
		{
			if (adrNext->AdrAckCounter >= AS923_ADR_ACK_LIMIT)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	2b3f      	cmp	r3, #63	@ 0x3f
 8011d94:	d904      	bls.n	8011da0 <RegionAS923AdrNext+0x88>
			{
				adrAckReq = true;
 8011d96:	2301      	movs	r3, #1
 8011d98:	77fb      	strb	r3, [r7, #31]
				txPower = AS923_MAX_TX_POWER;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	777b      	strb	r3, [r7, #29]
 8011d9e:	e001      	b.n	8011da4 <RegionAS923AdrNext+0x8c>
			}
			else
			{
				adrAckReq = false;
 8011da0:	2300      	movs	r3, #0
 8011da2:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (AS923_ADR_ACK_LIMIT + AS923_ADR_ACK_DELAY))
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	2b5f      	cmp	r3, #95	@ 0x5f
 8011daa:	d928      	bls.n	8011dfe <RegionAS923AdrNext+0xe6>
			{
				if ((adrNext->AdrAckCounter % AS923_ADR_ACK_DELAY) == 1)
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	f003 031f 	and.w	r3, r3, #31
 8011db4:	2b01      	cmp	r3, #1
 8011db6:	d122      	bne.n	8011dfe <RegionAS923AdrNext+0xe6>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011db8:	2320      	movs	r3, #32
 8011dba:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 8011dbc:	7fbb      	ldrb	r3, [r7, #30]
 8011dbe:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	7a9b      	ldrb	r3, [r3, #10]
 8011dc4:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionAS923GetPhyParam(&getPhy);
 8011dc6:	f107 0318 	add.w	r3, r7, #24
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7ff fcea 	bl	80117a4 <RegionAS923GetPhyParam>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	77bb      	strb	r3, [r7, #30]

					if (datarate == minTxDatarate)
 8011dd8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8011ddc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d10c      	bne.n	8011dfe <RegionAS923AdrNext+0xe6>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 8011de4:	2300      	movs	r3, #0
 8011de6:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d006      	beq.n	8011dfe <RegionAS923AdrNext+0xe6>
						{
							// Re-enable default channels
							ChannelsMask[0] |= LC(1) + LC(2);
 8011df0:	4b08      	ldr	r3, [pc, #32]	@ (8011e14 <RegionAS923AdrNext+0xfc>)
 8011df2:	881b      	ldrh	r3, [r3, #0]
 8011df4:	f043 0303 	orr.w	r3, r3, #3
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	4b06      	ldr	r3, [pc, #24]	@ (8011e14 <RegionAS923AdrNext+0xfc>)
 8011dfc:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	*drOut = datarate;
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	7fba      	ldrb	r2, [r7, #30]
 8011e02:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	7f7a      	ldrb	r2, [r7, #29]
 8011e08:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 8011e0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3720      	adds	r7, #32
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	20006c9c 	.word	0x20006c9c

08011e18 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b088      	sub	sp, #32
 8011e1c:	af02      	add	r7, sp, #8
 8011e1e:	60ba      	str	r2, [r7, #8]
 8011e20:	607b      	str	r3, [r7, #4]
 8011e22:	4603      	mov	r3, r0
 8011e24:	73fb      	strb	r3, [r7, #15]
 8011e26:	460b      	mov	r3, r1
 8011e28:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 8011e2a:	f04f 0200 	mov.w	r2, #0
 8011e2e:	f04f 0300 	mov.w	r3, #0
 8011e32:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, AS923_RX_MAX_DATARATE);
 8011e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e3a:	2b07      	cmp	r3, #7
 8011e3c:	bfa8      	it	ge
 8011e3e:	2307      	movge	r3, #7
 8011e40:	b25a      	sxtb	r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7ff fba1 	bl	8011594 <GetBandwidth>
 8011e52:	4603      	mov	r3, r0
 8011e54:	b2da      	uxtb	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	709a      	strb	r2, [r3, #2]

	if (rxConfigParams->Datarate == DR_7)
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e60:	2b07      	cmp	r3, #7
 8011e62:	d10b      	bne.n	8011e7c <RegionAS923ComputeRxWindowParameters+0x64>
	{ // FSK
		tSymbol = RegionCommonComputeSymbolTimeFsk(DataratesAS923[rxConfigParams->Datarate]);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	4b16      	ldr	r3, [pc, #88]	@ (8011ec8 <RegionAS923ComputeRxWindowParameters+0xb0>)
 8011e6e:	5c9b      	ldrb	r3, [r3, r2]
 8011e70:	4618      	mov	r0, r3
 8011e72:	f004 fd85 	bl	8016980 <RegionCommonComputeSymbolTimeFsk>
 8011e76:	ed87 0b04 	vstr	d0, [r7, #16]
 8011e7a:	e012      	b.n	8011ea2 <RegionAS923ComputeRxWindowParameters+0x8a>
	}
	else
	{ // LoRa
		tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate]);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e82:	461a      	mov	r2, r3
 8011e84:	4b10      	ldr	r3, [pc, #64]	@ (8011ec8 <RegionAS923ComputeRxWindowParameters+0xb0>)
 8011e86:	5c9a      	ldrb	r2, [r3, r2]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	4b0e      	ldr	r3, [pc, #56]	@ (8011ecc <RegionAS923ComputeRxWindowParameters+0xb4>)
 8011e92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011e96:	4619      	mov	r1, r3
 8011e98:	4610      	mov	r0, r2
 8011e9a:	f004 fd43 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 8011e9e:	ed87 0b04 	vstr	d0, [r7, #16]
	}

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f103 0208 	add.w	r2, r3, #8
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	330c      	adds	r3, #12
 8011eac:	7bb8      	ldrb	r0, [r7, #14]
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	2203      	movs	r2, #3
 8011eb4:	68b9      	ldr	r1, [r7, #8]
 8011eb6:	ed97 0b04 	vldr	d0, [r7, #16]
 8011eba:	f004 fd7f 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 8011ebe:	bf00      	nop
 8011ec0:	3718      	adds	r7, #24
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	08025168 	.word	0x08025168
 8011ecc:	08025170 	.word	0x08025170

08011ed0 <RegionAS923RxConfig>:

bool RegionAS923RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 8011ed0:	b590      	push	{r4, r7, lr}
 8011ed2:	b091      	sub	sp, #68	@ 0x44
 8011ed4:	af0a      	add	r7, sp, #40	@ 0x28
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
	RadioModems_t modem;
	int8_t dr = rxConfig->Datarate;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	785b      	ldrb	r3, [r3, #1]
 8011ede:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	75bb      	strb	r3, [r7, #22]
	int8_t phyDr = 0;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 8011eee:	4b53      	ldr	r3, [pc, #332]	@ (801203c <RegionAS923RxConfig+0x16c>)
 8011ef0:	689b      	ldr	r3, [r3, #8]
 8011ef2:	4798      	blx	r3
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d001      	beq.n	8011efe <RegionAS923RxConfig+0x2e>
	{
		return false;
 8011efa:	2300      	movs	r3, #0
 8011efc:	e099      	b.n	8012032 <RegionAS923RxConfig+0x162>
	}

	if (rxConfig->Window == 0)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	7cdb      	ldrb	r3, [r3, #19]
 8011f02:	f083 0301 	eor.w	r3, r3, #1
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d023      	beq.n	8011f54 <RegionAS923RxConfig+0x84>
	{
		// Apply window 1 frequency
		frequency = Channels[rxConfig->Channel].Frequency;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	4619      	mov	r1, r3
 8011f12:	4a4b      	ldr	r2, [pc, #300]	@ (8012040 <RegionAS923RxConfig+0x170>)
 8011f14:	460b      	mov	r3, r1
 8011f16:	005b      	lsls	r3, r3, #1
 8011f18:	440b      	add	r3, r1
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	4413      	add	r3, r2
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	613b      	str	r3, [r7, #16]
		// Apply the alternative RX 1 window frequency, if it is available
		if (Channels[rxConfig->Channel].Rx1Frequency != 0)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	4619      	mov	r1, r3
 8011f28:	4a45      	ldr	r2, [pc, #276]	@ (8012040 <RegionAS923RxConfig+0x170>)
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	005b      	lsls	r3, r3, #1
 8011f2e:	440b      	add	r3, r1
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	4413      	add	r3, r2
 8011f34:	3304      	adds	r3, #4
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d00b      	beq.n	8011f54 <RegionAS923RxConfig+0x84>
		{
			frequency = Channels[rxConfig->Channel].Rx1Frequency;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	4619      	mov	r1, r3
 8011f42:	4a3f      	ldr	r2, [pc, #252]	@ (8012040 <RegionAS923RxConfig+0x170>)
 8011f44:	460b      	mov	r3, r1
 8011f46:	005b      	lsls	r3, r3, #1
 8011f48:	440b      	add	r3, r1
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	4413      	add	r3, r2
 8011f4e:	3304      	adds	r3, #4
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	613b      	str	r3, [r7, #16]
		}
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesAS923[dr];
 8011f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f58:	4a3a      	ldr	r2, [pc, #232]	@ (8012044 <RegionAS923RxConfig+0x174>)
 8011f5a:	5cd3      	ldrb	r3, [r2, r3]
 8011f5c:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 8011f5e:	4b37      	ldr	r3, [pc, #220]	@ (801203c <RegionAS923RxConfig+0x16c>)
 8011f60:	691b      	ldr	r3, [r3, #16]
 8011f62:	6938      	ldr	r0, [r7, #16]
 8011f64:	4798      	blx	r3

	// Radio configuration
	if (dr == DR_7)
 8011f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f6a:	2b07      	cmp	r3, #7
 8011f6c:	d125      	bne.n	8011fba <RegionAS923RxConfig+0xea>
	{
		modem = MODEM_FSK;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, 0, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
 8011f72:	4b32      	ldr	r3, [pc, #200]	@ (801203c <RegionAS923RxConfig+0x16c>)
 8011f74:	69dc      	ldr	r4, [r3, #28]
 8011f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f7a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f7e:	fb02 f303 	mul.w	r3, r2, r3
 8011f82:	461a      	mov	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	7c9b      	ldrb	r3, [r3, #18]
 8011f88:	7df8      	ldrb	r0, [r7, #23]
 8011f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	9308      	str	r3, [sp, #32]
 8011f90:	2300      	movs	r3, #0
 8011f92:	9307      	str	r3, [sp, #28]
 8011f94:	2300      	movs	r3, #0
 8011f96:	9306      	str	r3, [sp, #24]
 8011f98:	2301      	movs	r3, #1
 8011f9a:	9305      	str	r3, [sp, #20]
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	9304      	str	r3, [sp, #16]
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	9303      	str	r3, [sp, #12]
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	9302      	str	r3, [sp, #8]
 8011fa8:	2305      	movs	r3, #5
 8011faa:	9301      	str	r3, [sp, #4]
 8011fac:	4b26      	ldr	r3, [pc, #152]	@ (8012048 <RegionAS923RxConfig+0x178>)
 8011fae:	9300      	str	r3, [sp, #0]
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8011fb6:	47a0      	blx	r4
 8011fb8:	e020      	b.n	8011ffc <RegionAS923RxConfig+0x12c>
	}
	else
	{
		modem = MODEM_LORA;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 8011fbe:	4b1f      	ldr	r3, [pc, #124]	@ (801203c <RegionAS923RxConfig+0x16c>)
 8011fc0:	69dc      	ldr	r4, [r3, #28]
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	789b      	ldrb	r3, [r3, #2]
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	7c9b      	ldrb	r3, [r3, #18]
 8011fd0:	7df8      	ldrb	r0, [r7, #23]
 8011fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	9308      	str	r3, [sp, #32]
 8011fd8:	2300      	movs	r3, #0
 8011fda:	9307      	str	r3, [sp, #28]
 8011fdc:	2300      	movs	r3, #0
 8011fde:	9306      	str	r3, [sp, #24]
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	9305      	str	r3, [sp, #20]
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	9304      	str	r3, [sp, #16]
 8011fe8:	2300      	movs	r3, #0
 8011fea:	9303      	str	r3, [sp, #12]
 8011fec:	2300      	movs	r3, #0
 8011fee:	9302      	str	r3, [sp, #8]
 8011ff0:	2308      	movs	r3, #8
 8011ff2:	9301      	str	r3, [sp, #4]
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	47a0      	blx	r4
	}

	// Check for repeater support
	if (rxConfig->RepeaterSupport == true)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	7c5b      	ldrb	r3, [r3, #17]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d005      	beq.n	8012010 <RegionAS923RxConfig+0x140>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8012004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012008:	4a10      	ldr	r2, [pc, #64]	@ (801204c <RegionAS923RxConfig+0x17c>)
 801200a:	5cd3      	ldrb	r3, [r2, r3]
 801200c:	75bb      	strb	r3, [r7, #22]
 801200e:	e004      	b.n	801201a <RegionAS923RxConfig+0x14a>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8012010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012014:	4a0e      	ldr	r2, [pc, #56]	@ (8012050 <RegionAS923RxConfig+0x180>)
 8012016:	5cd3      	ldrb	r3, [r2, r3]
 8012018:	75bb      	strb	r3, [r7, #22]
	}

	Radio.SetMaxPayloadLength(modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 801201a:	4b08      	ldr	r3, [pc, #32]	@ (801203c <RegionAS923RxConfig+0x16c>)
 801201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801201e:	7dba      	ldrb	r2, [r7, #22]
 8012020:	320d      	adds	r2, #13
 8012022:	b2d1      	uxtb	r1, r2
 8012024:	7dfa      	ldrb	r2, [r7, #23]
 8012026:	4610      	mov	r0, r2
 8012028:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	7bfa      	ldrb	r2, [r7, #15]
 801202e:	701a      	strb	r2, [r3, #0]
	return true;
 8012030:	2301      	movs	r3, #1
}
 8012032:	4618      	mov	r0, r3
 8012034:	371c      	adds	r7, #28
 8012036:	46bd      	mov	sp, r7
 8012038:	bd90      	pop	{r4, r7, pc}
 801203a:	bf00      	nop
 801203c:	08025450 	.word	0x08025450
 8012040:	20006d88 	.word	0x20006d88
 8012044:	08025168 	.word	0x08025168
 8012048:	00014585 	.word	0x00014585
 801204c:	08025198 	.word	0x08025198
 8012050:	08025190 	.word	0x08025190

08012054 <RegionAS923TxConfig>:

bool RegionAS923TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 8012054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012056:	b093      	sub	sp, #76	@ 0x4c
 8012058:	af0a      	add	r7, sp, #40	@ 0x28
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	607a      	str	r2, [r7, #4]
	RadioModems_t modem;
	int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012066:	461a      	mov	r2, r3
 8012068:	4b56      	ldr	r3, [pc, #344]	@ (80121c4 <RegionAS923TxConfig+0x170>)
 801206a:	5c9b      	ldrb	r3, [r3, r2]
 801206c:	77bb      	strb	r3, [r7, #30]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	4619      	mov	r1, r3
 801207a:	4a53      	ldr	r2, [pc, #332]	@ (80121c8 <RegionAS923TxConfig+0x174>)
 801207c:	460b      	mov	r3, r1
 801207e:	005b      	lsls	r3, r3, #1
 8012080:	440b      	add	r3, r1
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	4413      	add	r3, r2
 8012086:	3309      	adds	r3, #9
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	4a50      	ldr	r2, [pc, #320]	@ (80121cc <RegionAS923TxConfig+0x178>)
 801208c:	015b      	lsls	r3, r3, #5
 801208e:	4413      	add	r3, r2
 8012090:	3302      	adds	r3, #2
 8012092:	f993 1000 	ldrsb.w	r1, [r3]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801209c:	4b4c      	ldr	r3, [pc, #304]	@ (80121d0 <RegionAS923TxConfig+0x17c>)
 801209e:	f7ff fa99 	bl	80115d4 <LimitTxPower>
 80120a2:	4603      	mov	r3, r0
 80120a4:	777b      	strb	r3, [r7, #29]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ff fa71 	bl	8011594 <GetBandwidth>
 80120b2:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80120c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80120c8:	eef0 0a47 	vmov.f32	s1, s14
 80120cc:	eeb0 0a67 	vmov.f32	s0, s15
 80120d0:	4618      	mov	r0, r3
 80120d2:	f004 fcff 	bl	8016ad4 <RegionCommonComputeTxPower>
 80120d6:	4603      	mov	r3, r0
 80120d8:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 80120da:	4b3e      	ldr	r3, [pc, #248]	@ (80121d4 <RegionAS923TxConfig+0x180>)
 80120dc:	691a      	ldr	r2, [r3, #16]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	4618      	mov	r0, r3
 80120e4:	4938      	ldr	r1, [pc, #224]	@ (80121c8 <RegionAS923TxConfig+0x174>)
 80120e6:	4603      	mov	r3, r0
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	4403      	add	r3, r0
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	440b      	add	r3, r1
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	4618      	mov	r0, r3
 80120f4:	4790      	blx	r2
	LOG_LIB("AS923", "Using TX Frequency %ld", Channels[txConfig->Channel].Frequency);
	if (txConfig->Datarate == DR_7)
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80120fc:	2b07      	cmp	r3, #7
 80120fe:	d124      	bne.n	801214a <RegionAS923TxConfig+0xf6>
	{ // High Speed FSK channel
		modem = MODEM_FSK;
 8012100:	2300      	movs	r3, #0
 8012102:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000);
 8012104:	4b33      	ldr	r3, [pc, #204]	@ (80121d4 <RegionAS923TxConfig+0x180>)
 8012106:	6a1e      	ldr	r6, [r3, #32]
 8012108:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801210c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012110:	fb02 f303 	mul.w	r3, r2, r3
 8012114:	461a      	mov	r2, r3
 8012116:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801211a:	7ff8      	ldrb	r0, [r7, #31]
 801211c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8012120:	9308      	str	r3, [sp, #32]
 8012122:	2300      	movs	r3, #0
 8012124:	9307      	str	r3, [sp, #28]
 8012126:	2300      	movs	r3, #0
 8012128:	9306      	str	r3, [sp, #24]
 801212a:	2300      	movs	r3, #0
 801212c:	9305      	str	r3, [sp, #20]
 801212e:	2301      	movs	r3, #1
 8012130:	9304      	str	r3, [sp, #16]
 8012132:	2300      	movs	r3, #0
 8012134:	9303      	str	r3, [sp, #12]
 8012136:	2305      	movs	r3, #5
 8012138:	9302      	str	r3, [sp, #8]
 801213a:	2300      	movs	r3, #0
 801213c:	9301      	str	r3, [sp, #4]
 801213e:	9200      	str	r2, [sp, #0]
 8012140:	69bb      	ldr	r3, [r7, #24]
 8012142:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8012146:	47b0      	blx	r6
 8012148:	e01d      	b.n	8012186 <RegionAS923TxConfig+0x132>
	}
	else
	{
		modem = MODEM_LORA;
 801214a:	2301      	movs	r3, #1
 801214c:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 801214e:	4b21      	ldr	r3, [pc, #132]	@ (80121d4 <RegionAS923TxConfig+0x180>)
 8012150:	6a1e      	ldr	r6, [r3, #32]
 8012152:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012156:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801215a:	7ff8      	ldrb	r0, [r7, #31]
 801215c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8012160:	9208      	str	r2, [sp, #32]
 8012162:	2200      	movs	r2, #0
 8012164:	9207      	str	r2, [sp, #28]
 8012166:	2200      	movs	r2, #0
 8012168:	9206      	str	r2, [sp, #24]
 801216a:	2200      	movs	r2, #0
 801216c:	9205      	str	r2, [sp, #20]
 801216e:	2201      	movs	r2, #1
 8012170:	9204      	str	r2, [sp, #16]
 8012172:	2200      	movs	r2, #0
 8012174:	9203      	str	r2, [sp, #12]
 8012176:	2208      	movs	r2, #8
 8012178:	9202      	str	r2, [sp, #8]
 801217a:	2201      	movs	r2, #1
 801217c:	9201      	str	r2, [sp, #4]
 801217e:	9300      	str	r3, [sp, #0]
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	2200      	movs	r2, #0
 8012184:	47b0      	blx	r6
	}

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(modem, txConfig->PktLen);
 8012186:	4b13      	ldr	r3, [pc, #76]	@ (80121d4 <RegionAS923TxConfig+0x180>)
 8012188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	8992      	ldrh	r2, [r2, #12]
 801218e:	b2d1      	uxtb	r1, r2
 8012190:	7ffa      	ldrb	r2, [r7, #31]
 8012192:	4610      	mov	r0, r2
 8012194:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(modem, txConfig->PktLen);
 8012196:	4b0f      	ldr	r3, [pc, #60]	@ (80121d4 <RegionAS923TxConfig+0x180>)
 8012198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801219a:	68fa      	ldr	r2, [r7, #12]
 801219c:	8992      	ldrh	r2, [r2, #12]
 801219e:	b2d1      	uxtb	r1, r2
 80121a0:	7ffa      	ldrb	r2, [r7, #31]
 80121a2:	4610      	mov	r0, r2
 80121a4:	4798      	blx	r3
 80121a6:	4603      	mov	r3, r0
 80121a8:	2200      	movs	r2, #0
 80121aa:	461c      	mov	r4, r3
 80121ac:	4615      	mov	r5, r2
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	e9c3 4500 	strd	r4, r5, [r3]

	*txPower = txPowerLimited;
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	7f7a      	ldrb	r2, [r7, #29]
 80121b8:	701a      	strb	r2, [r3, #0]
	return true;
 80121ba:	2301      	movs	r3, #1
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3724      	adds	r7, #36	@ 0x24
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c4:	08025168 	.word	0x08025168
 80121c8:	20006d88 	.word	0x20006d88
 80121cc:	200000d0 	.word	0x200000d0
 80121d0:	20006c9c 	.word	0x20006c9c
 80121d4:	08025450 	.word	0x08025450

080121d8 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 80121d8:	b590      	push	{r4, r7, lr}
 80121da:	b093      	sub	sp, #76	@ 0x4c
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 80121e6:	2307      	movs	r3, #7
 80121e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 80121ec:	2300      	movs	r3, #0
 80121ee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t bytesProcessed = 0;
 80121f2:	2300      	movs	r3, #0
 80121f4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t chMask = 0;
 80121f8:	2300      	movs	r3, #0
 80121fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	while (bytesProcessed < linkAdrReq->PayloadSize)
 80121fc:	e083      	b.n	8012306 <RegionAS923LinkAdrReq+0x12e>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8012206:	4413      	add	r3, r2
 8012208:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801220c:	4611      	mov	r1, r2
 801220e:	4618      	mov	r0, r3
 8012210:	f004 fab0 	bl	8016774 <RegionCommonParseLinkAdrReq>
 8012214:	4603      	mov	r3, r0
 8012216:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		if (nextIndex == 0)
 801221a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801221e:	2b00      	cmp	r3, #0
 8012220:	d079      	beq.n	8012316 <RegionAS923LinkAdrReq+0x13e>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 8012222:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8012226:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801222a:	4413      	add	r3, r2
 801222c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 8012230:	2307      	movs	r3, #7
 8012232:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		// Setup temporary channels mask
		chMask = linkAdrParams.ChMask;
 8012236:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801223a:	877b      	strh	r3, [r7, #58]	@ 0x3a

		// Verify channels mask
		if ((linkAdrParams.ChMaskCtrl == 0) && (chMask == 0))
 801223c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012240:	2b00      	cmp	r3, #0
 8012242:	d109      	bne.n	8012258 <RegionAS923LinkAdrReq+0x80>
 8012244:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012246:	2b00      	cmp	r3, #0
 8012248:	d106      	bne.n	8012258 <RegionAS923LinkAdrReq+0x80>
		{
			status &= 0xFE; // Channel mask KO
 801224a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801224e:	f023 0301 	bic.w	r3, r3, #1
 8012252:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8012256:	e056      	b.n	8012306 <RegionAS923LinkAdrReq+0x12e>
		}
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 8012258:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801225c:	2b00      	cmp	r3, #0
 801225e:	d003      	beq.n	8012268 <RegionAS923LinkAdrReq+0x90>
 8012260:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012264:	2b05      	cmp	r3, #5
 8012266:	d903      	bls.n	8012270 <RegionAS923LinkAdrReq+0x98>
				 (linkAdrParams.ChMaskCtrl >= 7))
 8012268:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 801226c:	2b06      	cmp	r3, #6
 801226e:	d906      	bls.n	801227e <RegionAS923LinkAdrReq+0xa6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 8012270:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012274:	f023 0301 	bic.w	r3, r3, #1
 8012278:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801227c:	e043      	b.n	8012306 <RegionAS923LinkAdrReq+0x12e>
		}
		else
		{
			for (uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++)
 801227e:	2300      	movs	r3, #0
 8012280:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8012284:	e03b      	b.n	80122fe <RegionAS923LinkAdrReq+0x126>
			{
				if (linkAdrParams.ChMaskCtrl == 6)
 8012286:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801228a:	2b06      	cmp	r3, #6
 801228c:	d117      	bne.n	80122be <RegionAS923LinkAdrReq+0xe6>
				{
					if (Channels[i].Frequency != 0)
 801228e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8012292:	4959      	ldr	r1, [pc, #356]	@ (80123f8 <RegionAS923LinkAdrReq+0x220>)
 8012294:	4613      	mov	r3, r2
 8012296:	005b      	lsls	r3, r3, #1
 8012298:	4413      	add	r3, r2
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	440b      	add	r3, r1
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d027      	beq.n	80122f4 <RegionAS923LinkAdrReq+0x11c>
					{
						chMask |= 1 << i;
 80122a4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80122a8:	2201      	movs	r2, #1
 80122aa:	fa02 f303 	lsl.w	r3, r2, r3
 80122ae:	b21a      	sxth	r2, r3
 80122b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80122b2:	b21b      	sxth	r3, r3
 80122b4:	4313      	orrs	r3, r2
 80122b6:	b21b      	sxth	r3, r3
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80122bc:	e01a      	b.n	80122f4 <RegionAS923LinkAdrReq+0x11c>
					}
				}
				else
				{
					if (((chMask & (1 << i)) != 0) &&
 80122be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80122c0:	461a      	mov	r2, r3
 80122c2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80122c6:	fa42 f303 	asr.w	r3, r2, r3
 80122ca:	f003 0301 	and.w	r3, r3, #1
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d010      	beq.n	80122f4 <RegionAS923LinkAdrReq+0x11c>
						(Channels[i].Frequency == 0))
 80122d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80122d6:	4948      	ldr	r1, [pc, #288]	@ (80123f8 <RegionAS923LinkAdrReq+0x220>)
 80122d8:	4613      	mov	r3, r2
 80122da:	005b      	lsls	r3, r3, #1
 80122dc:	4413      	add	r3, r2
 80122de:	009b      	lsls	r3, r3, #2
 80122e0:	440b      	add	r3, r1
 80122e2:	681b      	ldr	r3, [r3, #0]
					if (((chMask & (1 << i)) != 0) &&
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d105      	bne.n	80122f4 <RegionAS923LinkAdrReq+0x11c>
					{					// Trying to enable an undefined channel
						status &= 0xFE; // Channel mask KO
 80122e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80122ec:	f023 0301 	bic.w	r3, r3, #1
 80122f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			for (uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++)
 80122f4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80122f8:	3301      	adds	r3, #1
 80122fa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80122fe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8012302:	2b0f      	cmp	r3, #15
 8012304:	d9bf      	bls.n	8012286 <RegionAS923LinkAdrReq+0xae>
	while (bytesProcessed < linkAdrReq->PayloadSize)
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	791b      	ldrb	r3, [r3, #4]
 801230a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801230e:	429a      	cmp	r2, r3
 8012310:	f4ff af75 	bcc.w	80121fe <RegionAS923LinkAdrReq+0x26>
 8012314:	e000      	b.n	8012318 <RegionAS923LinkAdrReq+0x140>
			break; // break loop, since no more request has been found
 8012316:	bf00      	nop
			}
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 8012318:	2301      	movs	r3, #1
 801231a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	795b      	ldrb	r3, [r3, #5]
 8012322:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionAS923GetPhyParam(&getPhy);
 8012326:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801232a:	4618      	mov	r0, r3
 801232c:	f7ff fa3a 	bl	80117a4 <RegionAS923GetPhyParam>
 8012330:	4603      	mov	r3, r0
 8012332:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 8012334:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8012338:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	799b      	ldrb	r3, [r3, #6]
 801233e:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8012340:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8012344:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012346:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 801234a:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801234c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8012350:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8012358:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012360:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	7a5b      	ldrb	r3, [r3, #9]
 8012366:	b25b      	sxtb	r3, r3
 8012368:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 801236a:	2310      	movs	r3, #16
 801236c:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = &chMask;
 801236e:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8012372:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 8012374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012376:	b25b      	sxtb	r3, r3
 8012378:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 801237c:	2307      	movs	r3, #7
 801237e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 8012382:	4b1d      	ldr	r3, [pc, #116]	@ (80123f8 <RegionAS923LinkAdrReq+0x220>)
 8012384:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8012386:	2307      	movs	r3, #7
 8012388:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 801238c:	2300      	movs	r3, #0
 801238e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 8012392:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8012396:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801239a:	1c9a      	adds	r2, r3, #2
 801239c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123a0:	1c59      	adds	r1, r3, #1
 80123a2:	f107 0014 	add.w	r0, r7, #20
 80123a6:	4623      	mov	r3, r4
 80123a8:	f004 fa36 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 80123ac:	4603      	mov	r3, r0
 80123ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	// Update channelsMask if everything is correct
	if (status == 0x07)
 80123b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80123b6:	2b07      	cmp	r3, #7
 80123b8:	d107      	bne.n	80123ca <RegionAS923LinkAdrReq+0x1f2>
	{
		// Set the channels mask to a default value
		memset(ChannelsMask, 0, sizeof(ChannelsMask));
 80123ba:	220c      	movs	r2, #12
 80123bc:	2100      	movs	r1, #0
 80123be:	480f      	ldr	r0, [pc, #60]	@ (80123fc <RegionAS923LinkAdrReq+0x224>)
 80123c0:	f00f ff44 	bl	802224c <memset>
		// Update the channels mask
		ChannelsMask[0] = chMask;
 80123c4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80123c6:	4b0d      	ldr	r3, [pc, #52]	@ (80123fc <RegionAS923LinkAdrReq+0x224>)
 80123c8:	801a      	strh	r2, [r3, #0]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 80123ca:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 80123d2:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 80123da:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 80123e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80123e4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80123e8:	701a      	strb	r2, [r3, #0]

	return status;
 80123ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	374c      	adds	r7, #76	@ 0x4c
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd90      	pop	{r4, r7, pc}
 80123f6:	bf00      	nop
 80123f8:	20006d88 	.word	0x20006d88
 80123fc:	20006c9c 	.word	0x20006c9c

08012400 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 8012408:	2307      	movs	r3, #7
 801240a:	73fb      	strb	r3, [r7, #15]

	// Verify radio frequency
	if (Radio.CheckRfFrequency(rxParamSetupReq->Frequency) == false)
 801240c:	4b19      	ldr	r3, [pc, #100]	@ (8012474 <RegionAS923RxParamSetupReq+0x74>)
 801240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	6852      	ldr	r2, [r2, #4]
 8012414:	4610      	mov	r0, r2
 8012416:	4798      	blx	r3
 8012418:	4603      	mov	r3, r0
 801241a:	f083 0301 	eor.w	r3, r3, #1
 801241e:	b2db      	uxtb	r3, r3
 8012420:	2b00      	cmp	r3, #0
 8012422:	d003      	beq.n	801242c <RegionAS923RxParamSetupReq+0x2c>
	{
		status &= 0xFE; // Channel frequency KO
 8012424:	7bfb      	ldrb	r3, [r7, #15]
 8012426:	f023 0301 	bic.w	r3, r3, #1
 801242a:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE) == false)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f993 3000 	ldrsb.w	r3, [r3]
 8012432:	2207      	movs	r2, #7
 8012434:	2100      	movs	r1, #0
 8012436:	4618      	mov	r0, r3
 8012438:	f003 ff96 	bl	8016368 <RegionCommonValueInRange>
 801243c:	4603      	mov	r3, r0
 801243e:	2b00      	cmp	r3, #0
 8012440:	d103      	bne.n	801244a <RegionAS923RxParamSetupReq+0x4a>
	{
		status &= 0xFD; // Datarate KO
 8012442:	7bfb      	ldrb	r3, [r7, #15]
 8012444:	f023 0302 	bic.w	r3, r3, #2
 8012448:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET) == false)
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012450:	2207      	movs	r2, #7
 8012452:	2100      	movs	r1, #0
 8012454:	4618      	mov	r0, r3
 8012456:	f003 ff87 	bl	8016368 <RegionCommonValueInRange>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d103      	bne.n	8012468 <RegionAS923RxParamSetupReq+0x68>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 8012460:	7bfb      	ldrb	r3, [r7, #15]
 8012462:	f023 0304 	bic.w	r3, r3, #4
 8012466:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8012468:	7bfb      	ldrb	r3, [r7, #15]
}
 801246a:	4618      	mov	r0, r3
 801246c:	3710      	adds	r7, #16
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	08025450 	.word	0x08025450

08012478 <RegionAS923NewChannelReq>:

uint8_t RegionAS923NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b086      	sub	sp, #24
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 8012480:	2303      	movs	r3, #3
 8012482:	75fb      	strb	r3, [r7, #23]
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	if (newChannelReq->NewChannel->Frequency == 0)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d114      	bne.n	80124b8 <RegionAS923NewChannelReq+0x40>
	{
		channelRemove.ChannelId = newChannelReq->ChannelId;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012494:	b2db      	uxtb	r3, r3
 8012496:	723b      	strb	r3, [r7, #8]

		// Remove
		if (RegionAS923ChannelsRemove(&channelRemove) == false)
 8012498:	f107 0308 	add.w	r3, r7, #8
 801249c:	4618      	mov	r0, r3
 801249e:	f000 fa2f 	bl	8012900 <RegionAS923ChannelsRemove>
 80124a2:	4603      	mov	r3, r0
 80124a4:	f083 0301 	eor.w	r3, r3, #1
 80124a8:	b2db      	uxtb	r3, r3
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d03b      	beq.n	8012526 <RegionAS923NewChannelReq+0xae>
		{
			status &= 0xFC;
 80124ae:	7dfb      	ldrb	r3, [r7, #23]
 80124b0:	f023 0303 	bic.w	r3, r3, #3
 80124b4:	75fb      	strb	r3, [r7, #23]
 80124b6:	e036      	b.n	8012526 <RegionAS923NewChannelReq+0xae>
		}
	}
	else
	{
		channelAdd.NewChannel = newChannelReq->NewChannel;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	60fb      	str	r3, [r7, #12]
		channelAdd.ChannelId = newChannelReq->ChannelId;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80124c4:	b2db      	uxtb	r3, r3
 80124c6:	743b      	strb	r3, [r7, #16]

		switch (RegionAS923ChannelAdd(&channelAdd))
 80124c8:	f107 030c 	add.w	r3, r7, #12
 80124cc:	4618      	mov	r0, r3
 80124ce:	f000 f95f 	bl	8012790 <RegionAS923ChannelAdd>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b06      	cmp	r3, #6
 80124d6:	d820      	bhi.n	801251a <RegionAS923NewChannelReq+0xa2>
 80124d8:	a201      	add	r2, pc, #4	@ (adr r2, 80124e0 <RegionAS923NewChannelReq+0x68>)
 80124da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124de:	bf00      	nop
 80124e0:	08012525 	.word	0x08012525
 80124e4:	0801251b 	.word	0x0801251b
 80124e8:	0801251b 	.word	0x0801251b
 80124ec:	0801251b 	.word	0x0801251b
 80124f0:	080124fd 	.word	0x080124fd
 80124f4:	08012507 	.word	0x08012507
 80124f8:	08012511 	.word	0x08012511
		{
			break;
		}
		case LORAMAC_STATUS_FREQUENCY_INVALID:
		{
			status &= 0xFE;
 80124fc:	7dfb      	ldrb	r3, [r7, #23]
 80124fe:	f023 0301 	bic.w	r3, r3, #1
 8012502:	75fb      	strb	r3, [r7, #23]
			break;
 8012504:	e00f      	b.n	8012526 <RegionAS923NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_DATARATE_INVALID:
		{
			status &= 0xFD;
 8012506:	7dfb      	ldrb	r3, [r7, #23]
 8012508:	f023 0302 	bic.w	r3, r3, #2
 801250c:	75fb      	strb	r3, [r7, #23]
			break;
 801250e:	e00a      	b.n	8012526 <RegionAS923NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		{
			status &= 0xFC;
 8012510:	7dfb      	ldrb	r3, [r7, #23]
 8012512:	f023 0303 	bic.w	r3, r3, #3
 8012516:	75fb      	strb	r3, [r7, #23]
			break;
 8012518:	e005      	b.n	8012526 <RegionAS923NewChannelReq+0xae>
		}
		default:
		{
			status &= 0xFC;
 801251a:	7dfb      	ldrb	r3, [r7, #23]
 801251c:	f023 0303 	bic.w	r3, r3, #3
 8012520:	75fb      	strb	r3, [r7, #23]
			break;
 8012522:	e000      	b.n	8012526 <RegionAS923NewChannelReq+0xae>
			break;
 8012524:	bf00      	nop
		}
		}
	}

	return status;
 8012526:	7dfb      	ldrb	r3, [r7, #23]
}
 8012528:	4618      	mov	r0, r3
 801252a:	3718      	adds	r7, #24
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
	// Accept the request
	return 0;
 8012538:	2300      	movs	r3, #0
}
 801253a:	4618      	mov	r0, r3
 801253c:	370c      	adds	r7, #12
 801253e:	46bd      	mov	sp, r7
 8012540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012544:	4770      	bx	lr
	...

08012548 <RegionAS923DlChannelReq>:

uint8_t RegionAS923DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 8012550:	2303      	movs	r3, #3
 8012552:	73fb      	strb	r3, [r7, #15]

	// Verify if the frequency is supported
	if (VerifyTxFreq(dlChannelReq->Rx1Frequency) == false)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	4618      	mov	r0, r3
 801255a:	f7ff f857 	bl	801160c <VerifyTxFreq>
 801255e:	4603      	mov	r3, r0
 8012560:	f083 0301 	eor.w	r3, r3, #1
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d003      	beq.n	8012572 <RegionAS923DlChannelReq+0x2a>
	{
		status &= 0xFE;
 801256a:	7bfb      	ldrb	r3, [r7, #15]
 801256c:	f023 0301 	bic.w	r3, r3, #1
 8012570:	73fb      	strb	r3, [r7, #15]
	}

	// Verify if an uplink frequency exists
	if (Channels[dlChannelReq->ChannelId].Frequency == 0)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	4619      	mov	r1, r3
 8012578:	4a10      	ldr	r2, [pc, #64]	@ (80125bc <RegionAS923DlChannelReq+0x74>)
 801257a:	460b      	mov	r3, r1
 801257c:	005b      	lsls	r3, r3, #1
 801257e:	440b      	add	r3, r1
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4413      	add	r3, r2
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d103      	bne.n	8012592 <RegionAS923DlChannelReq+0x4a>
	{
		status &= 0xFD;
 801258a:	7bfb      	ldrb	r3, [r7, #15]
 801258c:	f023 0302 	bic.w	r3, r3, #2
 8012590:	73fb      	strb	r3, [r7, #15]
	}

	// Apply Rx1 frequency, if the status is OK
	if (status == 0x03)
 8012592:	7bfb      	ldrb	r3, [r7, #15]
 8012594:	2b03      	cmp	r3, #3
 8012596:	d10c      	bne.n	80125b2 <RegionAS923DlChannelReq+0x6a>
	{
		Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	4618      	mov	r0, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	685a      	ldr	r2, [r3, #4]
 80125a2:	4906      	ldr	r1, [pc, #24]	@ (80125bc <RegionAS923DlChannelReq+0x74>)
 80125a4:	4603      	mov	r3, r0
 80125a6:	005b      	lsls	r3, r3, #1
 80125a8:	4403      	add	r3, r0
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	440b      	add	r3, r1
 80125ae:	3304      	adds	r3, #4
 80125b0:	601a      	str	r2, [r3, #0]
	}

	return status;
 80125b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}
 80125bc:	20006d88 	.word	0x20006d88

080125c0 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr(AlternateDrParams_t *alternateDr)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
	// Only AS923_DWELL_LIMIT_DATARATE is supported
	return AS923_DWELL_LIMIT_DATARATE;
 80125c8:	2302      	movs	r3, #2
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	370c      	adds	r7, #12
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr
	...

080125d8 <RegionAS923CalcBackOff>:

void RegionAS923CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b08a      	sub	sp, #40	@ 0x28
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 80125e0:	4b11      	ldr	r3, [pc, #68]	@ (8012628 <RegionAS923CalcBackOff+0x50>)
 80125e2:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 80125e4:	4b11      	ldr	r3, [pc, #68]	@ (801262c <RegionAS923CalcBackOff+0x54>)
 80125e6:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	785b      	ldrb	r3, [r3, #1]
 80125ec:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	789b      	ldrb	r3, [r3, #2]
 80125f8:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	78db      	ldrb	r3, [r3, #3]
 80125fe:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8012606:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012610:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 8012614:	f107 0308 	add.w	r3, r7, #8
 8012618:	4618      	mov	r0, r3
 801261a:	f004 fa8d 	bl	8016b38 <RegionCommonCalcBackOff>
}
 801261e:	bf00      	nop
 8012620:	3728      	adds	r7, #40	@ 0x28
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	20006d88 	.word	0x20006d88
 801262c:	200000d0 	.word	0x200000d0

08012630 <RegionAS923NextChannel>:

bool RegionAS923NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 8012630:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012634:	b092      	sub	sp, #72	@ 0x48
 8012636:	af04      	add	r7, sp, #16
 8012638:	60f8      	str	r0, [r7, #12]
 801263a:	60b9      	str	r1, [r7, #8]
 801263c:	607a      	str	r2, [r7, #4]
 801263e:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 8012640:	2300      	movs	r3, #0
 8012642:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t delayTx = 0;
 8012646:	2300      	movs	r3, #0
 8012648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = {0};
 801264c:	2300      	movs	r3, #0
 801264e:	617b      	str	r3, [r7, #20]
 8012650:	f107 0318 	add.w	r3, r7, #24
 8012654:	2200      	movs	r2, #0
 8012656:	601a      	str	r2, [r3, #0]
 8012658:	605a      	str	r2, [r3, #4]
 801265a:	609a      	str	r2, [r3, #8]
	TimerTime_t nextTxDelay = 0;
 801265c:	f04f 0200 	mov.w	r2, #0
 8012660:	f04f 0300 	mov.w	r3, #0
 8012664:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if (RegionCommonCountChannels(ChannelsMask, 0, 1) == 0)
 8012668:	2201      	movs	r2, #1
 801266a:	2100      	movs	r1, #0
 801266c:	4845      	ldr	r0, [pc, #276]	@ (8012784 <RegionAS923NextChannel+0x154>)
 801266e:	f003 fece 	bl	801640e <RegionCommonCountChannels>
	{	// Reactivate default channels
		// ChannelsMask[0] |= LC( 1 ) + LC( 2 )+ LC( 3 )+ LC( 4 )+ LC( 5 )+ LC( 6 )+ LC( 7 )+ LC( 8 );
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	e9d3 4500 	ldrd	r4, r5, [r3]
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801267e:	4610      	mov	r0, r2
 8012680:	4619      	mov	r1, r3
 8012682:	f00e fceb 	bl	802105c <util_timer_get_elapsedtime>
 8012686:	4602      	mov	r2, r0
 8012688:	460b      	mov	r3, r1
 801268a:	42a2      	cmp	r2, r4
 801268c:	41ab      	sbcs	r3, r5
 801268e:	d326      	bcc.n	80126de <RegionAS923NextChannel+0xae>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 8012690:	6839      	ldr	r1, [r7, #0]
 8012692:	f04f 0200 	mov.w	r2, #0
 8012696:	f04f 0300 	mov.w	r3, #0
 801269a:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, AS923_MAX_NB_BANDS);
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	7c58      	ldrb	r0, [r3, #17]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	7c99      	ldrb	r1, [r3, #18]
 80126a6:	2301      	movs	r3, #1
 80126a8:	4a37      	ldr	r2, [pc, #220]	@ (8012788 <RegionAS923NextChannel+0x158>)
 80126aa:	f003 ff24 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 80126ae:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Joined, nextChanParams->Datarate,
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	7c58      	ldrb	r0, [r3, #17]
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80126bc:	b2d9      	uxtb	r1, r3
 80126be:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 80126c2:	9302      	str	r3, [sp, #8]
 80126c4:	f107 0314 	add.w	r3, r7, #20
 80126c8:	9301      	str	r3, [sp, #4]
 80126ca:	4b2f      	ldr	r3, [pc, #188]	@ (8012788 <RegionAS923NextChannel+0x158>)
 80126cc:	9300      	str	r3, [sp, #0]
 80126ce:	4b2f      	ldr	r3, [pc, #188]	@ (801278c <RegionAS923NextChannel+0x15c>)
 80126d0:	4a2c      	ldr	r2, [pc, #176]	@ (8012784 <RegionAS923NextChannel+0x154>)
 80126d2:	f7fe ffc1 	bl	8011658 <CountNbOfEnabledChannels>
 80126d6:	4603      	mov	r3, r0
 80126d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80126dc:	e017      	b.n	801270e <RegionAS923NextChannel+0xde>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 80126de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126e2:	3301      	adds	r3, #1
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80126f6:	4610      	mov	r0, r2
 80126f8:	4619      	mov	r1, r3
 80126fa:	f00e fcaf 	bl	802105c <util_timer_get_elapsedtime>
 80126fe:	4602      	mov	r2, r0
 8012700:	460b      	mov	r3, r1
 8012702:	ebb4 0802 	subs.w	r8, r4, r2
 8012706:	eb65 0903 	sbc.w	r9, r5, r3
 801270a:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}

	if (nbEnabledChannels > 0)
 801270e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012712:	2b00      	cmp	r3, #0
 8012714:	d016      	beq.n	8012744 <RegionAS923NextChannel+0x114>
	{
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 8012716:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801271a:	3b01      	subs	r3, #1
 801271c:	4619      	mov	r1, r3
 801271e:	2000      	movs	r0, #0
 8012720:	f00e fa28 	bl	8020b74 <randr>
 8012724:	4603      	mov	r3, r0
 8012726:	3338      	adds	r3, #56	@ 0x38
 8012728:	443b      	add	r3, r7
 801272a:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	701a      	strb	r2, [r3, #0]
		*time = 0;
 8012732:	6879      	ldr	r1, [r7, #4]
 8012734:	f04f 0200 	mov.w	r2, #0
 8012738:	f04f 0300 	mov.w	r3, #0
 801273c:	e9c1 2300 	strd	r2, r3, [r1]

		return true;
 8012740:	2301      	movs	r3, #1
 8012742:	e019      	b.n	8012778 <RegionAS923NextChannel+0x148>
			return false;
#endif
	}
	else
	{
		if (delayTx > 0)
 8012744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <RegionAS923NextChannel+0x12a>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 801274c:	6879      	ldr	r1, [r7, #4]
 801274e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8012752:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8012756:	2301      	movs	r3, #1
 8012758:	e00e      	b.n	8012778 <RegionAS923NextChannel+0x148>
		}
		// Datarate not supported by any channel, restore defaults
		ChannelsMask[0] |= LC(1) + LC(2);
 801275a:	4b0a      	ldr	r3, [pc, #40]	@ (8012784 <RegionAS923NextChannel+0x154>)
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	f043 0303 	orr.w	r3, r3, #3
 8012762:	b29a      	uxth	r2, r3
 8012764:	4b07      	ldr	r3, [pc, #28]	@ (8012784 <RegionAS923NextChannel+0x154>)
 8012766:	801a      	strh	r2, [r3, #0]
		*time = 0;
 8012768:	6879      	ldr	r1, [r7, #4]
 801276a:	f04f 0200 	mov.w	r2, #0
 801276e:	f04f 0300 	mov.w	r3, #0
 8012772:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 8012776:	2300      	movs	r3, #0
	}
}
 8012778:	4618      	mov	r0, r3
 801277a:	3738      	adds	r7, #56	@ 0x38
 801277c:	46bd      	mov	sp, r7
 801277e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8012782:	bf00      	nop
 8012784:	20006c9c 	.word	0x20006c9c
 8012788:	200000d0 	.word	0x200000d0
 801278c:	20006d88 	.word	0x20006d88

08012790 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd(ChannelAddParams_t *channelAdd)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
	uint8_t band = 0;
 8012798:	2300      	movs	r3, #0
 801279a:	737b      	strb	r3, [r7, #13]
	bool drInvalid = false;
 801279c:	2300      	movs	r3, #0
 801279e:	73fb      	strb	r3, [r7, #15]
	bool freqInvalid = false;
 80127a0:	2300      	movs	r3, #0
 80127a2:	73bb      	strb	r3, [r7, #14]
	uint8_t id = channelAdd->ChannelId;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	791b      	ldrb	r3, [r3, #4]
 80127a8:	733b      	strb	r3, [r7, #12]

	if (id >= AS923_MAX_NB_CHANNELS)
 80127aa:	7b3b      	ldrb	r3, [r7, #12]
 80127ac:	2b0f      	cmp	r3, #15
 80127ae:	d901      	bls.n	80127b4 <RegionAS923ChannelAdd+0x24>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 80127b0:	2303      	movs	r3, #3
 80127b2:	e09c      	b.n	80128ee <RegionAS923ChannelAdd+0x15e>
	}

	// Validate the datarate range
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE) == false)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	7a1b      	ldrb	r3, [r3, #8]
 80127ba:	f343 0303 	sbfx	r3, r3, #0, #4
 80127be:	b25b      	sxtb	r3, r3
 80127c0:	2207      	movs	r2, #7
 80127c2:	2100      	movs	r1, #0
 80127c4:	4618      	mov	r0, r3
 80127c6:	f003 fdcf 	bl	8016368 <RegionCommonValueInRange>
 80127ca:	4603      	mov	r3, r0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d101      	bne.n	80127d4 <RegionAS923ChannelAdd+0x44>
	{
		drInvalid = true;
 80127d0:	2301      	movs	r3, #1
 80127d2:	73fb      	strb	r3, [r7, #15]
	}
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE) == false)
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	7a1b      	ldrb	r3, [r3, #8]
 80127da:	f343 1303 	sbfx	r3, r3, #4, #4
 80127de:	b25b      	sxtb	r3, r3
 80127e0:	2207      	movs	r2, #7
 80127e2:	2100      	movs	r1, #0
 80127e4:	4618      	mov	r0, r3
 80127e6:	f003 fdbf 	bl	8016368 <RegionCommonValueInRange>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d101      	bne.n	80127f4 <RegionAS923ChannelAdd+0x64>
	{
		drInvalid = true;
 80127f0:	2301      	movs	r3, #1
 80127f2:	73fb      	strb	r3, [r7, #15]
	}
	if (channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	7a1b      	ldrb	r3, [r3, #8]
 80127fa:	f343 0303 	sbfx	r3, r3, #0, #4
 80127fe:	b25a      	sxtb	r2, r3
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	7a1b      	ldrb	r3, [r3, #8]
 8012806:	f343 1303 	sbfx	r3, r3, #4, #4
 801280a:	b25b      	sxtb	r3, r3
 801280c:	429a      	cmp	r2, r3
 801280e:	dd01      	ble.n	8012814 <RegionAS923ChannelAdd+0x84>
	{
		drInvalid = true;
 8012810:	2301      	movs	r3, #1
 8012812:	73fb      	strb	r3, [r7, #15]
	}

	// Default channels don't accept all values
	if (id < AS923_NUMB_DEFAULT_CHANNELS)
 8012814:	7b3b      	ldrb	r3, [r7, #12]
 8012816:	2b07      	cmp	r3, #7
 8012818:	d81e      	bhi.n	8012858 <RegionAS923ChannelAdd+0xc8>
	{
		// Validate the datarate range for min: must be DR_0
#if AS923_DEFAULT_UPLINK_DWELL_TIME
		if (channelAdd->NewChannel->DrRange.Fields.Min != DR_2)
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	7a1b      	ldrb	r3, [r3, #8]
 8012820:	f003 030f 	and.w	r3, r3, #15
 8012824:	b2db      	uxtb	r3, r3
 8012826:	2b02      	cmp	r3, #2
 8012828:	d006      	beq.n	8012838 <RegionAS923ChannelAdd+0xa8>
		{
			LOG_LIB("AS923", "DR to low %d", channelAdd->NewChannel->DrRange.Fields.Min);
			channelAdd->NewChannel->DrRange.Fields.Min = DR_2;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	7a13      	ldrb	r3, [r2, #8]
 8012830:	2102      	movs	r1, #2
 8012832:	f361 0303 	bfi	r3, r1, #0, #4
 8012836:	7213      	strb	r3, [r2, #8]
			LOG_LIB("AS923", "DR to low %d", channelAdd->NewChannel->DrRange.Fields.Min);
			drInvalid = true;
		}
#endif
		// Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
		if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, DR_5, AS923_TX_MAX_DATARATE) == false)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	7a1b      	ldrb	r3, [r3, #8]
 801283e:	f343 1303 	sbfx	r3, r3, #4, #4
 8012842:	b25b      	sxtb	r3, r3
 8012844:	2207      	movs	r2, #7
 8012846:	2105      	movs	r1, #5
 8012848:	4618      	mov	r0, r3
 801284a:	f003 fd8d 	bl	8016368 <RegionCommonValueInRange>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d101      	bne.n	8012858 <RegionAS923ChannelAdd+0xc8>
		{
			LOG_LIB("AS923", "DR to high %d", channelAdd->NewChannel->DrRange.Fields.Max);
			drInvalid = true;
 8012854:	2301      	movs	r3, #1
 8012856:	73fb      	strb	r3, [r7, #15]
		// 	freqInvalid = true;
		// }
	}

	// Check frequency
	if (freqInvalid == false)
 8012858:	7bbb      	ldrb	r3, [r7, #14]
 801285a:	f083 0301 	eor.w	r3, r3, #1
 801285e:	b2db      	uxtb	r3, r3
 8012860:	2b00      	cmp	r3, #0
 8012862:	d00d      	beq.n	8012880 <RegionAS923ChannelAdd+0xf0>
	{
		if (VerifyTxFreq(channelAdd->NewChannel->Frequency) == false)
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	4618      	mov	r0, r3
 801286c:	f7fe fece 	bl	801160c <VerifyTxFreq>
 8012870:	4603      	mov	r3, r0
 8012872:	f083 0301 	eor.w	r3, r3, #1
 8012876:	b2db      	uxtb	r3, r3
 8012878:	2b00      	cmp	r3, #0
 801287a:	d001      	beq.n	8012880 <RegionAS923ChannelAdd+0xf0>
		{
			LOG_LIB("AS923", "New channel not accepted %.1f", (float)((channelAdd->NewChannel->Frequency)/1000000.0));
			freqInvalid = true;
 801287c:	2301      	movs	r3, #1
 801287e:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check status
	if ((drInvalid == true) && (freqInvalid == true))
 8012880:	7bfb      	ldrb	r3, [r7, #15]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d004      	beq.n	8012890 <RegionAS923ChannelAdd+0x100>
 8012886:	7bbb      	ldrb	r3, [r7, #14]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d001      	beq.n	8012890 <RegionAS923ChannelAdd+0x100>
	{
		LOG_LIB("AS923", "New channel not accepted FREQ_AND_DR_INVALID");
		return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801288c:	2306      	movs	r3, #6
 801288e:	e02e      	b.n	80128ee <RegionAS923ChannelAdd+0x15e>
	}
	if (drInvalid == true)
 8012890:	7bfb      	ldrb	r3, [r7, #15]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d001      	beq.n	801289a <RegionAS923ChannelAdd+0x10a>
	{
		LOG_LIB("AS923", "New channel not accepted DATARATE_INVALID");
		return LORAMAC_STATUS_DATARATE_INVALID;
 8012896:	2305      	movs	r3, #5
 8012898:	e029      	b.n	80128ee <RegionAS923ChannelAdd+0x15e>
	}
	if (freqInvalid == true)
 801289a:	7bbb      	ldrb	r3, [r7, #14]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d001      	beq.n	80128a4 <RegionAS923ChannelAdd+0x114>
	{
		LOG_LIB("AS923", "New channel not accepted FREQUENCY_INVALID");
		return LORAMAC_STATUS_FREQUENCY_INVALID;
 80128a0:	2304      	movs	r3, #4
 80128a2:	e024      	b.n	80128ee <RegionAS923ChannelAdd+0x15e>
	}

	LOG_LIB("AS923", "New channel added %.1f", (float)((channelAdd->NewChannel->Frequency)/1000000.0));
	memcpy(&(Channels[id]), channelAdd->NewChannel, sizeof(Channels[id]));
 80128a4:	7b3a      	ldrb	r2, [r7, #12]
 80128a6:	4613      	mov	r3, r2
 80128a8:	005b      	lsls	r3, r3, #1
 80128aa:	4413      	add	r3, r2
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	4a12      	ldr	r2, [pc, #72]	@ (80128f8 <RegionAS923ChannelAdd+0x168>)
 80128b0:	1898      	adds	r0, r3, r2
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	220c      	movs	r2, #12
 80128b8:	4619      	mov	r1, r3
 80128ba:	f00f fd56 	bl	802236a <memcpy>
	Channels[id].Band = band;
 80128be:	7b3a      	ldrb	r2, [r7, #12]
 80128c0:	490d      	ldr	r1, [pc, #52]	@ (80128f8 <RegionAS923ChannelAdd+0x168>)
 80128c2:	4613      	mov	r3, r2
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	4413      	add	r3, r2
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	440b      	add	r3, r1
 80128cc:	3309      	adds	r3, #9
 80128ce:	7b7a      	ldrb	r2, [r7, #13]
 80128d0:	701a      	strb	r2, [r3, #0]
	ChannelsMask[0] |= (1 << id);
 80128d2:	4b0a      	ldr	r3, [pc, #40]	@ (80128fc <RegionAS923ChannelAdd+0x16c>)
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	b21a      	sxth	r2, r3
 80128d8:	7b3b      	ldrb	r3, [r7, #12]
 80128da:	2101      	movs	r1, #1
 80128dc:	fa01 f303 	lsl.w	r3, r1, r3
 80128e0:	b21b      	sxth	r3, r3
 80128e2:	4313      	orrs	r3, r2
 80128e4:	b21b      	sxth	r3, r3
 80128e6:	b29a      	uxth	r2, r3
 80128e8:	4b04      	ldr	r3, [pc, #16]	@ (80128fc <RegionAS923ChannelAdd+0x16c>)
 80128ea:	801a      	strh	r2, [r3, #0]
	return LORAMAC_STATUS_OK;
 80128ec:	2300      	movs	r3, #0
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3710      	adds	r7, #16
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}
 80128f6:	bf00      	nop
 80128f8:	20006d88 	.word	0x20006d88
 80128fc:	20006c9c 	.word	0x20006c9c

08012900 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove(ChannelRemoveParams_t *channelRemove)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b086      	sub	sp, #24
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
	uint8_t id = channelRemove->ChannelId;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	75fb      	strb	r3, [r7, #23]

	if (id < AS923_NUMB_DEFAULT_CHANNELS)
 801290e:	7dfb      	ldrb	r3, [r7, #23]
 8012910:	2b07      	cmp	r3, #7
 8012912:	d801      	bhi.n	8012918 <RegionAS923ChannelsRemove+0x18>
	{
		return false;
 8012914:	2300      	movs	r3, #0
 8012916:	e012      	b.n	801293e <RegionAS923ChannelsRemove+0x3e>
	}

	// Remove the channel from the list of channels
	Channels[id] = (ChannelParams_t){0, 0, {0}, 0};
 8012918:	7dfa      	ldrb	r2, [r7, #23]
 801291a:	490b      	ldr	r1, [pc, #44]	@ (8012948 <RegionAS923ChannelsRemove+0x48>)
 801291c:	4613      	mov	r3, r2
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	009b      	lsls	r3, r3, #2
 8012924:	440b      	add	r3, r1
 8012926:	461a      	mov	r2, r3
 8012928:	2300      	movs	r3, #0
 801292a:	6013      	str	r3, [r2, #0]
 801292c:	6053      	str	r3, [r2, #4]
 801292e:	6093      	str	r3, [r2, #8]

	return RegionCommonChanDisable(ChannelsMask, id, AS923_MAX_NB_CHANNELS);
 8012930:	7dfb      	ldrb	r3, [r7, #23]
 8012932:	2210      	movs	r2, #16
 8012934:	4619      	mov	r1, r3
 8012936:	4805      	ldr	r0, [pc, #20]	@ (801294c <RegionAS923ChannelsRemove+0x4c>)
 8012938:	f003 fd34 	bl	80163a4 <RegionCommonChanDisable>
 801293c:	4603      	mov	r3, r0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3718      	adds	r7, #24
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	20006d88 	.word	0x20006d88
 801294c:	20006c9c 	.word	0x20006c9c

08012950 <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	4619      	mov	r1, r3
 8012964:	4a1f      	ldr	r2, [pc, #124]	@ (80129e4 <RegionAS923SetContinuousWave+0x94>)
 8012966:	460b      	mov	r3, r1
 8012968:	005b      	lsls	r3, r3, #1
 801296a:	440b      	add	r3, r1
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	4413      	add	r3, r2
 8012970:	3309      	adds	r3, #9
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	4a1c      	ldr	r2, [pc, #112]	@ (80129e8 <RegionAS923SetContinuousWave+0x98>)
 8012976:	015b      	lsls	r3, r3, #5
 8012978:	4413      	add	r3, r2
 801297a:	3302      	adds	r3, #2
 801297c:	f993 1000 	ldrsb.w	r1, [r3]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8012986:	4b19      	ldr	r3, [pc, #100]	@ (80129ec <RegionAS923SetContinuousWave+0x9c>)
 8012988:	f7fe fe24 	bl	80115d4 <LimitTxPower>
 801298c:	4603      	mov	r3, r0
 801298e:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 8012990:	2300      	movs	r3, #0
 8012992:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	4619      	mov	r1, r3
 801299a:	4a12      	ldr	r2, [pc, #72]	@ (80129e4 <RegionAS923SetContinuousWave+0x94>)
 801299c:	460b      	mov	r3, r1
 801299e:	005b      	lsls	r3, r3, #1
 80129a0:	440b      	add	r3, r1
 80129a2:	009b      	lsls	r3, r3, #2
 80129a4:	4413      	add	r3, r2
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	ed93 7a02 	vldr	s14, [r3, #8]
 80129b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129ba:	eef0 0a47 	vmov.f32	s1, s14
 80129be:	eeb0 0a67 	vmov.f32	s0, s15
 80129c2:	4618      	mov	r0, r3
 80129c4:	f004 f886 	bl	8016ad4 <RegionCommonComputeTxPower>
 80129c8:	4603      	mov	r3, r0
 80129ca:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 80129cc:	4b08      	ldr	r3, [pc, #32]	@ (80129f0 <RegionAS923SetContinuousWave+0xa0>)
 80129ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	8992      	ldrh	r2, [r2, #12]
 80129d4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80129d8:	68b8      	ldr	r0, [r7, #8]
 80129da:	4798      	blx	r3
}
 80129dc:	bf00      	nop
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	20006d88 	.word	0x20006d88
 80129e8:	200000d0 	.word	0x200000d0
 80129ec:	20006c9c 	.word	0x20006c9c
 80129f0:	08025450 	.word	0x08025450

080129f4 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	71fb      	strb	r3, [r7, #7]
 80129fe:	460b      	mov	r3, r1
 8012a00:	71bb      	strb	r3, [r7, #6]
 8012a02:	4613      	mov	r3, r2
 8012a04:	717b      	strb	r3, [r7, #5]
	// Initialize minDr for a downlink dwell time configuration of 0
	int8_t minDr = DR_0;
 8012a06:	2300      	movs	r3, #0
 8012a08:	73fb      	strb	r3, [r7, #15]

	// Update the minDR for a downlink dwell time configuration of 1
	if (downlinkDwellTime == 1)
 8012a0a:	79fb      	ldrb	r3, [r7, #7]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d101      	bne.n	8012a14 <RegionAS923ApplyDrOffset+0x20>
	{
		minDr = AS923_DWELL_LIMIT_DATARATE;
 8012a10:	2302      	movs	r3, #2
 8012a12:	73fb      	strb	r3, [r7, #15]
	}

	// Apply offset formula
	return T_MIN(DR_5, T_MAX(minDr, dr - EffectiveRx1DrOffsetAS923[drOffset]));
 8012a14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012a18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012a1c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012a20:	4807      	ldr	r0, [pc, #28]	@ (8012a40 <RegionAS923ApplyDrOffset+0x4c>)
 8012a22:	5641      	ldrsb	r1, [r0, r1]
 8012a24:	1a5b      	subs	r3, r3, r1
 8012a26:	4293      	cmp	r3, r2
 8012a28:	bfb8      	it	lt
 8012a2a:	4613      	movlt	r3, r2
 8012a2c:	2b05      	cmp	r3, #5
 8012a2e:	bfa8      	it	ge
 8012a30:	2305      	movge	r3, #5
 8012a32:	b2db      	uxtb	r3, r3
}
 8012a34:	4618      	mov	r0, r3
 8012a36:	3714      	adds	r7, #20
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr
 8012a40:	080251a8 	.word	0x080251a8

08012a44 <RegionAS923SetVersion>:

bool RegionAS923SetVersion(uint8_t version)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b08c      	sub	sp, #48	@ 0x30
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	71fb      	strb	r3, [r7, #7]
	// Channels
	Channels[0] = (ChannelParams_t)AS923_LC1;
 8012a4e:	4b54      	ldr	r3, [pc, #336]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012a50:	4a54      	ldr	r2, [pc, #336]	@ (8012ba4 <RegionAS923SetVersion+0x160>)
 8012a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8012a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Channels[1] = (ChannelParams_t)AS923_LC2;
 8012a58:	4b51      	ldr	r3, [pc, #324]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012a5a:	4a53      	ldr	r2, [pc, #332]	@ (8012ba8 <RegionAS923SetVersion+0x164>)
 8012a5c:	330c      	adds	r3, #12
 8012a5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012a60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// Channels[5] = (ChannelParams_t)AS923_LC6;
	// Channels[6] = (ChannelParams_t)AS923_LC7;
	// Channels[7] = (ChannelParams_t)AS923_LC8;

	// Initialize the channels default mask
	ChannelsDefaultMask[0] = LC(1) + LC(2);
 8012a64:	4b51      	ldr	r3, [pc, #324]	@ (8012bac <RegionAS923SetVersion+0x168>)
 8012a66:	2203      	movs	r2, #3
 8012a68:	801a      	strh	r2, [r3, #0]
	// Update the channels mask
	RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	494f      	ldr	r1, [pc, #316]	@ (8012bac <RegionAS923SetVersion+0x168>)
 8012a6e:	4850      	ldr	r0, [pc, #320]	@ (8012bb0 <RegionAS923SetVersion+0x16c>)
 8012a70:	f003 fcf9 	bl	8016466 <RegionCommonChanMaskCopy>
	AS923_RX_WND_2_FREQ = 923200000;
 8012a74:	4b4f      	ldr	r3, [pc, #316]	@ (8012bb4 <RegionAS923SetVersion+0x170>)
 8012a76:	4a50      	ldr	r2, [pc, #320]	@ (8012bb8 <RegionAS923SetVersion+0x174>)
 8012a78:	601a      	str	r2, [r3, #0]

	switch (version)
 8012a7a:	79fb      	ldrb	r3, [r7, #7]
 8012a7c:	3b01      	subs	r3, #1
 8012a7e:	2b03      	cmp	r3, #3
 8012a80:	d87e      	bhi.n	8012b80 <RegionAS923SetVersion+0x13c>
 8012a82:	a201      	add	r2, pc, #4	@ (adr r2, 8012a88 <RegionAS923SetVersion+0x44>)
 8012a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a88:	08012a99 	.word	0x08012a99
 8012a8c:	08012a9d 	.word	0x08012a9d
 8012a90:	08012ae9 	.word	0x08012ae9
 8012a94:	08012b35 	.word	0x08012b35
	{
	case 1:
		LOG_LIB("AS923", "Switch to Version 1");
		return true;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	e07d      	b.n	8012b98 <RegionAS923SetVersion+0x154>
		break;
	case 2:
		LOG_LIB("AS923", "Switch to Version 2");
		for (int idx = 0; idx < 2; idx++)
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012aa0:	e016      	b.n	8012ad0 <RegionAS923SetVersion+0x8c>
		{
			Channels[idx].Frequency = Channels[idx].Frequency - 1800000;
 8012aa2:	493f      	ldr	r1, [pc, #252]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012aa6:	4613      	mov	r3, r2
 8012aa8:	005b      	lsls	r3, r3, #1
 8012aaa:	4413      	add	r3, r2
 8012aac:	009b      	lsls	r3, r3, #2
 8012aae:	440b      	add	r3, r1
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	f5a3 12db 	sub.w	r2, r3, #1794048	@ 0x1b6000
 8012ab6:	f5a2 52ba 	sub.w	r2, r2, #5952	@ 0x1740
 8012aba:	4839      	ldr	r0, [pc, #228]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012abe:	460b      	mov	r3, r1
 8012ac0:	005b      	lsls	r3, r3, #1
 8012ac2:	440b      	add	r3, r1
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	4403      	add	r3, r0
 8012ac8:	601a      	str	r2, [r3, #0]
		for (int idx = 0; idx < 2; idx++)
 8012aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012acc:	3301      	adds	r3, #1
 8012ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	dde5      	ble.n	8012aa2 <RegionAS923SetVersion+0x5e>
			// Channels[idx].Rx1Frequency = Channels[idx].Rx1Frequency - 1800000;
		}
		AS923_RX_WND_2_FREQ = AS923_RX_WND_2_FREQ - 1800000;
 8012ad6:	4b37      	ldr	r3, [pc, #220]	@ (8012bb4 <RegionAS923SetVersion+0x170>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f5a3 13db 	sub.w	r3, r3, #1794048	@ 0x1b6000
 8012ade:	f5a3 53ba 	sub.w	r3, r3, #5952	@ 0x1740
 8012ae2:	4a34      	ldr	r2, [pc, #208]	@ (8012bb4 <RegionAS923SetVersion+0x170>)
 8012ae4:	6013      	str	r3, [r2, #0]
		break;
 8012ae6:	e04d      	b.n	8012b84 <RegionAS923SetVersion+0x140>
	case 3:
		LOG_LIB("AS923", "Switch to Version 3");
		for (int idx = 0; idx < 2; idx++)
 8012ae8:	2300      	movs	r3, #0
 8012aea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012aec:	e016      	b.n	8012b1c <RegionAS923SetVersion+0xd8>
		{
			Channels[idx].Frequency = Channels[idx].Frequency - 6600000;
 8012aee:	492c      	ldr	r1, [pc, #176]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012af2:	4613      	mov	r3, r2
 8012af4:	005b      	lsls	r3, r3, #1
 8012af6:	4413      	add	r3, r2
 8012af8:	009b      	lsls	r3, r3, #2
 8012afa:	440b      	add	r3, r1
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	f5a3 02c9 	sub.w	r2, r3, #6586368	@ 0x648000
 8012b02:	f5a2 5255 	sub.w	r2, r2, #13632	@ 0x3540
 8012b06:	4826      	ldr	r0, [pc, #152]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012b0a:	460b      	mov	r3, r1
 8012b0c:	005b      	lsls	r3, r3, #1
 8012b0e:	440b      	add	r3, r1
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	4403      	add	r3, r0
 8012b14:	601a      	str	r2, [r3, #0]
		for (int idx = 0; idx < 2; idx++)
 8012b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b18:	3301      	adds	r3, #1
 8012b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	dde5      	ble.n	8012aee <RegionAS923SetVersion+0xaa>
			// Channels[idx].Rx1Frequency = Channels[idx].Rx1Frequency - 6600000;
		}
		AS923_RX_WND_2_FREQ = AS923_RX_WND_2_FREQ - 6600000;
 8012b22:	4b24      	ldr	r3, [pc, #144]	@ (8012bb4 <RegionAS923SetVersion+0x170>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f5a3 03c9 	sub.w	r3, r3, #6586368	@ 0x648000
 8012b2a:	f5a3 5355 	sub.w	r3, r3, #13632	@ 0x3540
 8012b2e:	4a21      	ldr	r2, [pc, #132]	@ (8012bb4 <RegionAS923SetVersion+0x170>)
 8012b30:	6013      	str	r3, [r2, #0]
		break;
 8012b32:	e027      	b.n	8012b84 <RegionAS923SetVersion+0x140>
	case 4:
		LOG_LIB("AS923", "Switch to Version 4");
		for (int idx = 0; idx < 2; idx++)
 8012b34:	2300      	movs	r3, #0
 8012b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b38:	e016      	b.n	8012b68 <RegionAS923SetVersion+0x124>
		{
			Channels[idx].Frequency = Channels[idx].Frequency - 5900000;
 8012b3a:	4919      	ldr	r1, [pc, #100]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b3e:	4613      	mov	r3, r2
 8012b40:	005b      	lsls	r3, r3, #1
 8012b42:	4413      	add	r3, r2
 8012b44:	009b      	lsls	r3, r3, #2
 8012b46:	440b      	add	r3, r1
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f5a3 02b4 	sub.w	r2, r3, #5898240	@ 0x5a0000
 8012b4e:	f5a2 62dc 	sub.w	r2, r2, #1760	@ 0x6e0
 8012b52:	4813      	ldr	r0, [pc, #76]	@ (8012ba0 <RegionAS923SetVersion+0x15c>)
 8012b54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012b56:	460b      	mov	r3, r1
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	440b      	add	r3, r1
 8012b5c:	009b      	lsls	r3, r3, #2
 8012b5e:	4403      	add	r3, r0
 8012b60:	601a      	str	r2, [r3, #0]
		for (int idx = 0; idx < 2; idx++)
 8012b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b64:	3301      	adds	r3, #1
 8012b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	dde5      	ble.n	8012b3a <RegionAS923SetVersion+0xf6>
			// Channels[idx].Rx1Frequency = Channels[idx].Rx1Frequency - 6600000;
		}
		AS923_RX_WND_2_FREQ = AS923_RX_WND_2_FREQ - 5900000;
 8012b6e:	4b11      	ldr	r3, [pc, #68]	@ (8012bb4 <RegionAS923SetVersion+0x170>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f5a3 03b4 	sub.w	r3, r3, #5898240	@ 0x5a0000
 8012b76:	f5a3 63dc 	sub.w	r3, r3, #1760	@ 0x6e0
 8012b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8012bb4 <RegionAS923SetVersion+0x170>)
 8012b7c:	6013      	str	r3, [r2, #0]
		break;
 8012b7e:	e001      	b.n	8012b84 <RegionAS923SetVersion+0x140>
	default:
		LOG_LIB("AS923", "Wrong version request");
		return false;
 8012b80:	2300      	movs	r3, #0
 8012b82:	e009      	b.n	8012b98 <RegionAS923SetVersion+0x154>
	}
	for (int idx = 0; idx < 2; idx++)
 8012b84:	2300      	movs	r3, #0
 8012b86:	623b      	str	r3, [r7, #32]
 8012b88:	e002      	b.n	8012b90 <RegionAS923SetVersion+0x14c>
 8012b8a:	6a3b      	ldr	r3, [r7, #32]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	623b      	str	r3, [r7, #32]
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	ddf9      	ble.n	8012b8a <RegionAS923SetVersion+0x146>
	{
		LOG_LIB("AS923", "CH%d - TX %.1f", idx, Channels[idx].Frequency / 1000000.0);
	}
	LOG_LIB("AS923", "RX2 %.1f", AS923_RX_WND_2_FREQ / 1000000.0);
	return true;
 8012b96:	2301      	movs	r3, #1
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3730      	adds	r7, #48	@ 0x30
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	20006d88 	.word	0x20006d88
 8012ba4:	08024ad4 	.word	0x08024ad4
 8012ba8:	08024ae0 	.word	0x08024ae0
 8012bac:	20006ca8 	.word	0x20006ca8
 8012bb0:	20006c9c 	.word	0x20006c9c
 8012bb4:	200000c8 	.word	0x200000c8
 8012bb8:	3706ea00 	.word	0x3706ea00

08012bbc <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b085      	sub	sp, #20
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	460a      	mov	r2, r1
 8012bc6:	71fb      	strb	r3, [r7, #7]
 8012bc8:	4613      	mov	r3, r2
 8012bca:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 8012bd0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012bd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d102      	bne.n	8012be2 <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 8012bdc:	79bb      	ldrb	r3, [r7, #6]
 8012bde:	73fb      	strb	r3, [r7, #15]
 8012be0:	e002      	b.n	8012be8 <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 8012be2:	79fb      	ldrb	r3, [r7, #7]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 8012be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3714      	adds	r7, #20
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf6:	4770      	bx	lr

08012bf8 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b083      	sub	sp, #12
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
	switch (BandwidthsAU915[drIndex])
 8012c00:	4a0a      	ldr	r2, [pc, #40]	@ (8012c2c <GetBandwidth+0x34>)
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c08:	4a09      	ldr	r2, [pc, #36]	@ (8012c30 <GetBandwidth+0x38>)
 8012c0a:	4293      	cmp	r3, r2
 8012c0c:	d004      	beq.n	8012c18 <GetBandwidth+0x20>
 8012c0e:	4a09      	ldr	r2, [pc, #36]	@ (8012c34 <GetBandwidth+0x3c>)
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d003      	beq.n	8012c1c <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	e002      	b.n	8012c1e <GetBandwidth+0x26>
	case 250000:
		return 1;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e000      	b.n	8012c1e <GetBandwidth+0x26>
	case 500000:
		return 2;
 8012c1c:	2302      	movs	r3, #2
	}
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	370c      	adds	r7, #12
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr
 8012c2a:	bf00      	nop
 8012c2c:	080251c0 	.word	0x080251c0
 8012c30:	0003d090 	.word	0x0003d090
 8012c34:	0007a120 	.word	0x0007a120

08012c38 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	603b      	str	r3, [r7, #0]
 8012c40:	4603      	mov	r3, r0
 8012c42:	71fb      	strb	r3, [r7, #7]
 8012c44:	460b      	mov	r3, r1
 8012c46:	71bb      	strb	r3, [r7, #6]
 8012c48:	4613      	mov	r3, r2
 8012c4a:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 8012c4c:	79fb      	ldrb	r3, [r7, #7]
 8012c4e:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 8012c50:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012c54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	bfb8      	it	lt
 8012c5c:	4613      	movlt	r3, r2
 8012c5e:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 8012c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	3714      	adds	r7, #20
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr

08012c70 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b086      	sub	sp, #24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	60b9      	str	r1, [r7, #8]
 8012c78:	607a      	str	r2, [r7, #4]
 8012c7a:	603b      	str	r3, [r7, #0]
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	73fb      	strb	r3, [r7, #15]
	uint8_t nbEnabledChannels = 0;
 8012c80:	2300      	movs	r3, #0
 8012c82:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 8012c84:	2300      	movs	r3, #0
 8012c86:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	757b      	strb	r3, [r7, #21]
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	753b      	strb	r3, [r7, #20]
 8012c90:	e076      	b.n	8012d80 <CountNbOfEnabledChannels+0x110>
	{
		for (uint8_t j = 0; j < 16; j++)
 8012c92:	2300      	movs	r3, #0
 8012c94:	74fb      	strb	r3, [r7, #19]
 8012c96:	e06a      	b.n	8012d6e <CountNbOfEnabledChannels+0xfe>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 8012c98:	7d3b      	ldrb	r3, [r7, #20]
 8012c9a:	005b      	lsls	r3, r3, #1
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	881b      	ldrh	r3, [r3, #0]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	7cfb      	ldrb	r3, [r7, #19]
 8012ca6:	fa42 f303 	asr.w	r3, r2, r3
 8012caa:	f003 0301 	and.w	r3, r3, #1
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d05a      	beq.n	8012d68 <CountNbOfEnabledChannels+0xf8>
			{
				if (channels[i + j].Frequency == 0)
 8012cb2:	7d7a      	ldrb	r2, [r7, #21]
 8012cb4:	7cfb      	ldrb	r3, [r7, #19]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	461a      	mov	r2, r3
 8012cba:	4613      	mov	r3, r2
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	4413      	add	r3, r2
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d049      	beq.n	8012d62 <CountNbOfEnabledChannels+0xf2>
				{ // Check if the channel is enabled
					continue;
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8012cce:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8012cd2:	7d7a      	ldrb	r2, [r7, #21]
 8012cd4:	7cfb      	ldrb	r3, [r7, #19]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	461a      	mov	r2, r3
 8012cda:	4613      	mov	r3, r2
 8012cdc:	005b      	lsls	r3, r3, #1
 8012cde:	4413      	add	r3, r2
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	4413      	add	r3, r2
 8012ce8:	7a1b      	ldrb	r3, [r3, #8]
 8012cea:	f343 0303 	sbfx	r3, r3, #0, #4
 8012cee:	b25b      	sxtb	r3, r3
 8012cf0:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 8012cf2:	7d7a      	ldrb	r2, [r7, #21]
 8012cf4:	7cfb      	ldrb	r3, [r7, #19]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	005b      	lsls	r3, r3, #1
 8012cfe:	4413      	add	r3, r2
 8012d00:	009b      	lsls	r3, r3, #2
 8012d02:	461a      	mov	r2, r3
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	4413      	add	r3, r2
 8012d08:	7a1b      	ldrb	r3, [r3, #8]
 8012d0a:	f343 1303 	sbfx	r3, r3, #4, #4
 8012d0e:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8012d10:	461a      	mov	r2, r3
 8012d12:	f003 fb29 	bl	8016368 <RegionCommonValueInRange>
 8012d16:	4603      	mov	r3, r0
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d024      	beq.n	8012d66 <CountNbOfEnabledChannels+0xf6>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 8012d1c:	7d7a      	ldrb	r2, [r7, #21]
 8012d1e:	7cfb      	ldrb	r3, [r7, #19]
 8012d20:	4413      	add	r3, r2
 8012d22:	461a      	mov	r2, r3
 8012d24:	4613      	mov	r3, r2
 8012d26:	005b      	lsls	r3, r3, #1
 8012d28:	4413      	add	r3, r2
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	4413      	add	r3, r2
 8012d32:	7a5b      	ldrb	r3, [r3, #9]
 8012d34:	015b      	lsls	r3, r3, #5
 8012d36:	683a      	ldr	r2, [r7, #0]
 8012d38:	4413      	add	r3, r2
 8012d3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8012d3e:	4313      	orrs	r3, r2
 8012d40:	d003      	beq.n	8012d4a <CountNbOfEnabledChannels+0xda>
				{ // Check if the band is available for transmission
					delayTransmission++;
 8012d42:	7dbb      	ldrb	r3, [r7, #22]
 8012d44:	3301      	adds	r3, #1
 8012d46:	75bb      	strb	r3, [r7, #22]
					continue;
 8012d48:	e00e      	b.n	8012d68 <CountNbOfEnabledChannels+0xf8>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	1c5a      	adds	r2, r3, #1
 8012d4e:	75fa      	strb	r2, [r7, #23]
 8012d50:	461a      	mov	r2, r3
 8012d52:	6a3b      	ldr	r3, [r7, #32]
 8012d54:	4413      	add	r3, r2
 8012d56:	7d79      	ldrb	r1, [r7, #21]
 8012d58:	7cfa      	ldrb	r2, [r7, #19]
 8012d5a:	440a      	add	r2, r1
 8012d5c:	b2d2      	uxtb	r2, r2
 8012d5e:	701a      	strb	r2, [r3, #0]
 8012d60:	e002      	b.n	8012d68 <CountNbOfEnabledChannels+0xf8>
					continue;
 8012d62:	bf00      	nop
 8012d64:	e000      	b.n	8012d68 <CountNbOfEnabledChannels+0xf8>
					continue;
 8012d66:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 8012d68:	7cfb      	ldrb	r3, [r7, #19]
 8012d6a:	3301      	adds	r3, #1
 8012d6c:	74fb      	strb	r3, [r7, #19]
 8012d6e:	7cfb      	ldrb	r3, [r7, #19]
 8012d70:	2b0f      	cmp	r3, #15
 8012d72:	d991      	bls.n	8012c98 <CountNbOfEnabledChannels+0x28>
	for (uint8_t i = 0, k = 0; i < AU915_MAX_NB_CHANNELS; i += 16, k++)
 8012d74:	7d7b      	ldrb	r3, [r7, #21]
 8012d76:	3310      	adds	r3, #16
 8012d78:	757b      	strb	r3, [r7, #21]
 8012d7a:	7d3b      	ldrb	r3, [r7, #20]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	753b      	strb	r3, [r7, #20]
 8012d80:	7d7b      	ldrb	r3, [r7, #21]
 8012d82:	2b47      	cmp	r3, #71	@ 0x47
 8012d84:	d985      	bls.n	8012c92 <CountNbOfEnabledChannels+0x22>
			}
		}
	}

	*delayTx = delayTransmission;
 8012d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d88:	7dba      	ldrb	r2, [r7, #22]
 8012d8a:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 8012d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3718      	adds	r7, #24
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}
	...

08012d98 <RegionAU915GetPhyParam>:

PhyParam_t RegionAU915GetPhyParam(GetPhyParams_t *getPhy)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 8012da0:	2300      	movs	r3, #0
 8012da2:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	2b20      	cmp	r3, #32
 8012daa:	f200 80b1 	bhi.w	8012f10 <RegionAU915GetPhyParam+0x178>
 8012dae:	a201      	add	r2, pc, #4	@ (adr r2, 8012db4 <RegionAU915GetPhyParam+0x1c>)
 8012db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db4:	08012e39 	.word	0x08012e39
 8012db8:	08012e3f 	.word	0x08012e3f
 8012dbc:	08012f11 	.word	0x08012f11
 8012dc0:	08012f11 	.word	0x08012f11
 8012dc4:	08012f11 	.word	0x08012f11
 8012dc8:	08012e45 	.word	0x08012e45
 8012dcc:	08012f11 	.word	0x08012f11
 8012dd0:	08012f11 	.word	0x08012f11
 8012dd4:	08012e5f 	.word	0x08012e5f
 8012dd8:	08012e65 	.word	0x08012e65
 8012ddc:	08012e75 	.word	0x08012e75
 8012de0:	08012e85 	.word	0x08012e85
 8012de4:	08012e8b 	.word	0x08012e8b
 8012de8:	08012e93 	.word	0x08012e93
 8012dec:	08012e9b 	.word	0x08012e9b
 8012df0:	08012ea3 	.word	0x08012ea3
 8012df4:	08012eab 	.word	0x08012eab
 8012df8:	08012eb3 	.word	0x08012eb3
 8012dfc:	08012ebb 	.word	0x08012ebb
 8012e00:	08012ecf 	.word	0x08012ecf
 8012e04:	08012ed5 	.word	0x08012ed5
 8012e08:	08012edb 	.word	0x08012edb
 8012e0c:	08012ee1 	.word	0x08012ee1
 8012e10:	08012ee7 	.word	0x08012ee7
 8012e14:	08012eed 	.word	0x08012eed
 8012e18:	08012ef3 	.word	0x08012ef3
 8012e1c:	08012ef9 	.word	0x08012ef9
 8012e20:	08012ef9 	.word	0x08012ef9
 8012e24:	08012eff 	.word	0x08012eff
 8012e28:	08012f05 	.word	0x08012f05
 8012e2c:	08012f0b 	.word	0x08012f0b
 8012e30:	08012f0b 	.word	0x08012f0b
 8012e34:	08012e4b 	.word	0x08012e4b
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = AU915_RX_MIN_DATARATE;
 8012e38:	2308      	movs	r3, #8
 8012e3a:	60fb      	str	r3, [r7, #12]
		break;
 8012e3c:	e069      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = AU915_TX_MIN_DATARATE;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	60fb      	str	r3, [r7, #12]
		break;
 8012e42:	e066      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = AU915_DEFAULT_DATARATE;
 8012e44:	2302      	movs	r3, #2
 8012e46:	60fb      	str	r3, [r7, #12]
		break;
 8012e48:	e063      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, AU915_TX_MIN_DATARATE);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012e50:	2100      	movs	r1, #0
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7ff feb2 	bl	8012bbc <GetNextLowerTxDr>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	60fb      	str	r3, [r7, #12]
		break;
 8012e5c:	e059      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = AU915_DEFAULT_TX_POWER;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60fb      	str	r3, [r7, #12]
		break;
 8012e62:	e056      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateAU915[getPhy->Datarate];
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8012f1c <RegionAU915GetPhyParam+0x184>)
 8012e6e:	5c9b      	ldrb	r3, [r3, r2]
 8012e70:	60fb      	str	r3, [r7, #12]
		break;
 8012e72:	e04e      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterAU915[getPhy->Datarate];
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012e7a:	461a      	mov	r2, r3
 8012e7c:	4b28      	ldr	r3, [pc, #160]	@ (8012f20 <RegionAU915GetPhyParam+0x188>)
 8012e7e:	5c9b      	ldrb	r3, [r3, r2]
 8012e80:	60fb      	str	r3, [r7, #12]
		break;
 8012e82:	e046      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = AU915_DUTY_CYCLE_ENABLED;
 8012e84:	2300      	movs	r3, #0
 8012e86:	60fb      	str	r3, [r7, #12]
		break;
 8012e88:	e043      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = AU915_MAX_RX_WINDOW;
 8012e8a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8012e8e:	60fb      	str	r3, [r7, #12]
		break;
 8012e90:	e03f      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = AU915_RECEIVE_DELAY1;
 8012e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012e96:	60fb      	str	r3, [r7, #12]
		break;
 8012e98:	e03b      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = AU915_RECEIVE_DELAY2;
 8012e9a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8012e9e:	60fb      	str	r3, [r7, #12]
		break;
 8012ea0:	e037      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = AU915_JOIN_ACCEPT_DELAY1;
 8012ea2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012ea6:	60fb      	str	r3, [r7, #12]
		break;
 8012ea8:	e033      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = AU915_JOIN_ACCEPT_DELAY2;
 8012eaa:	f241 7370 	movw	r3, #6000	@ 0x1770
 8012eae:	60fb      	str	r3, [r7, #12]
		break;
 8012eb0:	e02f      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = AU915_MAX_FCNT_GAP;
 8012eb2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012eb6:	60fb      	str	r3, [r7, #12]
		break;
 8012eb8:	e02b      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (AU915_ACKTIMEOUT + randr(-AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND));
 8012eba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012ebe:	4819      	ldr	r0, [pc, #100]	@ (8012f24 <RegionAU915GetPhyParam+0x18c>)
 8012ec0:	f00d fe58 	bl	8020b74 <randr>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8012eca:	60fb      	str	r3, [r7, #12]
		break;
 8012ecc:	e021      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = AU915_DEFAULT_RX1_DR_OFFSET;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	60fb      	str	r3, [r7, #12]
		break;
 8012ed2:	e01e      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = AU915_RX_WND_2_FREQ;
 8012ed4:	4b14      	ldr	r3, [pc, #80]	@ (8012f28 <RegionAU915GetPhyParam+0x190>)
 8012ed6:	60fb      	str	r3, [r7, #12]
		break;
 8012ed8:	e01b      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = AU915_RX_WND_2_DR;
 8012eda:	2308      	movs	r3, #8
 8012edc:	60fb      	str	r3, [r7, #12]
		break;
 8012ede:	e018      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 8012ee0:	4b12      	ldr	r3, [pc, #72]	@ (8012f2c <RegionAU915GetPhyParam+0x194>)
 8012ee2:	60fb      	str	r3, [r7, #12]
		break;
 8012ee4:	e015      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 8012ee6:	4b12      	ldr	r3, [pc, #72]	@ (8012f30 <RegionAU915GetPhyParam+0x198>)
 8012ee8:	60fb      	str	r3, [r7, #12]
		break;
 8012eea:	e012      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = AU915_MAX_NB_CHANNELS;
 8012eec:	2348      	movs	r3, #72	@ 0x48
 8012eee:	60fb      	str	r3, [r7, #12]
		break;
 8012ef0:	e00f      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 8012ef2:	4b10      	ldr	r3, [pc, #64]	@ (8012f34 <RegionAU915GetPhyParam+0x19c>)
 8012ef4:	60fb      	str	r3, [r7, #12]
		break;
 8012ef6:	e00c      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	60fb      	str	r3, [r7, #12]
		break;
 8012efc:	e009      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 8012efe:	4b0e      	ldr	r3, [pc, #56]	@ (8012f38 <RegionAU915GetPhyParam+0x1a0>)
 8012f00:	60fb      	str	r3, [r7, #12]
		break;
 8012f02:	e006      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 8012f04:	4b0d      	ldr	r3, [pc, #52]	@ (8012f3c <RegionAU915GetPhyParam+0x1a4>)
 8012f06:	60fb      	str	r3, [r7, #12]
		break;
 8012f08:	e003      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 2;
 8012f0a:	2302      	movs	r3, #2
 8012f0c:	60fb      	str	r3, [r7, #12]
		break;
 8012f0e:	e000      	b.n	8012f12 <RegionAU915GetPhyParam+0x17a>
	}
	default:
	{
		break;
 8012f10:	bf00      	nop
	}
	}

	return phyParam;
 8012f12:	68fb      	ldr	r3, [r7, #12]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3710      	adds	r7, #16
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	0802522c 	.word	0x0802522c
 8012f20:	0802523c 	.word	0x0802523c
 8012f24:	fffffc18 	.word	0xfffffc18
 8012f28:	370870a0 	.word	0x370870a0
 8012f2c:	20006c9c 	.word	0x20006c9c
 8012f30:	20006ca8 	.word	0x20006ca8
 8012f34:	20006e48 	.word	0x20006e48
 8012f38:	41f00000 	.word	0x41f00000
 8012f3c:	4009999a 	.word	0x4009999a

08012f40 <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	7858      	ldrb	r0, [r3, #1]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	4619      	mov	r1, r3
 8012f52:	4a0a      	ldr	r2, [pc, #40]	@ (8012f7c <RegionAU915SetBandTxDone+0x3c>)
 8012f54:	460b      	mov	r3, r1
 8012f56:	005b      	lsls	r3, r3, #1
 8012f58:	440b      	add	r3, r1
 8012f5a:	009b      	lsls	r3, r3, #2
 8012f5c:	4413      	add	r3, r2
 8012f5e:	3309      	adds	r3, #9
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	015b      	lsls	r3, r3, #5
 8012f64:	4a06      	ldr	r2, [pc, #24]	@ (8012f80 <RegionAU915SetBandTxDone+0x40>)
 8012f66:	1899      	adds	r1, r3, r2
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8012f6e:	f003 faa1 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 8012f72:	bf00      	nop
 8012f74:	3708      	adds	r7, #8
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	20006e48 	.word	0x20006e48
 8012f80:	200000f0 	.word	0x200000f0

08012f84 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults(InitType_t type)
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	71fb      	strb	r3, [r7, #7]
	switch (type)
 8012f8e:	79fb      	ldrb	r3, [r7, #7]
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	f000 809f 	beq.w	80130d4 <RegionAU915InitDefaults+0x150>
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	f300 80a7 	bgt.w	80130ea <RegionAU915InitDefaults+0x166>
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d002      	beq.n	8012fa6 <RegionAU915InitDefaults+0x22>
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d07a      	beq.n	801309a <RegionAU915InitDefaults+0x116>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 6);
		break;
	}
	default:
	{
		break;
 8012fa4:	e0a1      	b.n	80130ea <RegionAU915InitDefaults+0x166>
		for (uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++)
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	73fb      	strb	r3, [r7, #15]
 8012faa:	e025      	b.n	8012ff8 <RegionAU915InitDefaults+0x74>
			Channels[i].Frequency = 915200000 + i * 200000;
 8012fac:	7bfb      	ldrb	r3, [r7, #15]
 8012fae:	4a51      	ldr	r2, [pc, #324]	@ (80130f4 <RegionAU915InitDefaults+0x170>)
 8012fb0:	fb03 f202 	mul.w	r2, r3, r2
 8012fb4:	4b50      	ldr	r3, [pc, #320]	@ (80130f8 <RegionAU915InitDefaults+0x174>)
 8012fb6:	4413      	add	r3, r2
 8012fb8:	7bfa      	ldrb	r2, [r7, #15]
 8012fba:	4618      	mov	r0, r3
 8012fbc:	494f      	ldr	r1, [pc, #316]	@ (80130fc <RegionAU915InitDefaults+0x178>)
 8012fbe:	4613      	mov	r3, r2
 8012fc0:	005b      	lsls	r3, r3, #1
 8012fc2:	4413      	add	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	440b      	add	r3, r1
 8012fc8:	6018      	str	r0, [r3, #0]
			Channels[i].DrRange.Value = (DR_5 << 4) | DR_0;
 8012fca:	7bfa      	ldrb	r2, [r7, #15]
 8012fcc:	494b      	ldr	r1, [pc, #300]	@ (80130fc <RegionAU915InitDefaults+0x178>)
 8012fce:	4613      	mov	r3, r2
 8012fd0:	005b      	lsls	r3, r3, #1
 8012fd2:	4413      	add	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	440b      	add	r3, r1
 8012fd8:	3308      	adds	r3, #8
 8012fda:	2250      	movs	r2, #80	@ 0x50
 8012fdc:	701a      	strb	r2, [r3, #0]
			Channels[i].Band = 0;
 8012fde:	7bfa      	ldrb	r2, [r7, #15]
 8012fe0:	4946      	ldr	r1, [pc, #280]	@ (80130fc <RegionAU915InitDefaults+0x178>)
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	005b      	lsls	r3, r3, #1
 8012fe6:	4413      	add	r3, r2
 8012fe8:	009b      	lsls	r3, r3, #2
 8012fea:	440b      	add	r3, r1
 8012fec:	3309      	adds	r3, #9
 8012fee:	2200      	movs	r2, #0
 8012ff0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++)
 8012ff2:	7bfb      	ldrb	r3, [r7, #15]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	73fb      	strb	r3, [r7, #15]
 8012ff8:	7bfb      	ldrb	r3, [r7, #15]
 8012ffa:	2b3f      	cmp	r3, #63	@ 0x3f
 8012ffc:	d9d6      	bls.n	8012fac <RegionAU915InitDefaults+0x28>
		for (uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++)
 8012ffe:	2340      	movs	r3, #64	@ 0x40
 8013000:	73bb      	strb	r3, [r7, #14]
 8013002:	e026      	b.n	8013052 <RegionAU915InitDefaults+0xce>
			Channels[i].Frequency = 915900000 + (i - (AU915_MAX_NB_CHANNELS - 8)) * 1600000;
 8013004:	7bbb      	ldrb	r3, [r7, #14]
 8013006:	3b40      	subs	r3, #64	@ 0x40
 8013008:	4a3d      	ldr	r2, [pc, #244]	@ (8013100 <RegionAU915InitDefaults+0x17c>)
 801300a:	fb03 f202 	mul.w	r2, r3, r2
 801300e:	4b3d      	ldr	r3, [pc, #244]	@ (8013104 <RegionAU915InitDefaults+0x180>)
 8013010:	4413      	add	r3, r2
 8013012:	7bba      	ldrb	r2, [r7, #14]
 8013014:	4618      	mov	r0, r3
 8013016:	4939      	ldr	r1, [pc, #228]	@ (80130fc <RegionAU915InitDefaults+0x178>)
 8013018:	4613      	mov	r3, r2
 801301a:	005b      	lsls	r3, r3, #1
 801301c:	4413      	add	r3, r2
 801301e:	009b      	lsls	r3, r3, #2
 8013020:	440b      	add	r3, r1
 8013022:	6018      	str	r0, [r3, #0]
			Channels[i].DrRange.Value = (DR_6 << 4) | DR_6;
 8013024:	7bba      	ldrb	r2, [r7, #14]
 8013026:	4935      	ldr	r1, [pc, #212]	@ (80130fc <RegionAU915InitDefaults+0x178>)
 8013028:	4613      	mov	r3, r2
 801302a:	005b      	lsls	r3, r3, #1
 801302c:	4413      	add	r3, r2
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	440b      	add	r3, r1
 8013032:	3308      	adds	r3, #8
 8013034:	2266      	movs	r2, #102	@ 0x66
 8013036:	701a      	strb	r2, [r3, #0]
			Channels[i].Band = 0;
 8013038:	7bba      	ldrb	r2, [r7, #14]
 801303a:	4930      	ldr	r1, [pc, #192]	@ (80130fc <RegionAU915InitDefaults+0x178>)
 801303c:	4613      	mov	r3, r2
 801303e:	005b      	lsls	r3, r3, #1
 8013040:	4413      	add	r3, r2
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	440b      	add	r3, r1
 8013046:	3309      	adds	r3, #9
 8013048:	2200      	movs	r2, #0
 801304a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++)
 801304c:	7bbb      	ldrb	r3, [r7, #14]
 801304e:	3301      	adds	r3, #1
 8013050:	73bb      	strb	r3, [r7, #14]
 8013052:	7bbb      	ldrb	r3, [r7, #14]
 8013054:	2b47      	cmp	r3, #71	@ 0x47
 8013056:	d9d5      	bls.n	8013004 <RegionAU915InitDefaults+0x80>
		ChannelsDefaultMask[0] = 0xFFFF;
 8013058:	4b2b      	ldr	r3, [pc, #172]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 801305a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801305e:	801a      	strh	r2, [r3, #0]
		ChannelsDefaultMask[1] = 0xFFFF;
 8013060:	4b29      	ldr	r3, [pc, #164]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 8013062:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013066:	805a      	strh	r2, [r3, #2]
		ChannelsDefaultMask[2] = 0xFFFF;
 8013068:	4b27      	ldr	r3, [pc, #156]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 801306a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801306e:	809a      	strh	r2, [r3, #4]
		ChannelsDefaultMask[3] = 0xFFFF;
 8013070:	4b25      	ldr	r3, [pc, #148]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 8013072:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013076:	80da      	strh	r2, [r3, #6]
		ChannelsDefaultMask[4] = 0x00FF;
 8013078:	4b23      	ldr	r3, [pc, #140]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 801307a:	22ff      	movs	r2, #255	@ 0xff
 801307c:	811a      	strh	r2, [r3, #8]
		ChannelsDefaultMask[5] = 0x0000;
 801307e:	4b22      	ldr	r3, [pc, #136]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 8013080:	2200      	movs	r2, #0
 8013082:	815a      	strh	r2, [r3, #10]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 8013084:	2206      	movs	r2, #6
 8013086:	4920      	ldr	r1, [pc, #128]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 8013088:	4820      	ldr	r0, [pc, #128]	@ (801310c <RegionAU915InitDefaults+0x188>)
 801308a:	f003 f9ec 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 6);
 801308e:	2206      	movs	r2, #6
 8013090:	491e      	ldr	r1, [pc, #120]	@ (801310c <RegionAU915InitDefaults+0x188>)
 8013092:	481f      	ldr	r0, [pc, #124]	@ (8013110 <RegionAU915InitDefaults+0x18c>)
 8013094:	f003 f9e7 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8013098:	e028      	b.n	80130ec <RegionAU915InitDefaults+0x168>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 801309a:	2206      	movs	r2, #6
 801309c:	491a      	ldr	r1, [pc, #104]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 801309e:	481b      	ldr	r0, [pc, #108]	@ (801310c <RegionAU915InitDefaults+0x188>)
 80130a0:	f003 f9e1 	bl	8016466 <RegionCommonChanMaskCopy>
		for (uint8_t i = 0; i < 6; i++)
 80130a4:	2300      	movs	r3, #0
 80130a6:	737b      	strb	r3, [r7, #13]
 80130a8:	e010      	b.n	80130cc <RegionAU915InitDefaults+0x148>
			ChannelsMaskRemaining[i] &= ChannelsMask[i];
 80130aa:	7b7b      	ldrb	r3, [r7, #13]
 80130ac:	4a18      	ldr	r2, [pc, #96]	@ (8013110 <RegionAU915InitDefaults+0x18c>)
 80130ae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80130b2:	7b7b      	ldrb	r3, [r7, #13]
 80130b4:	4a15      	ldr	r2, [pc, #84]	@ (801310c <RegionAU915InitDefaults+0x188>)
 80130b6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80130ba:	7b7b      	ldrb	r3, [r7, #13]
 80130bc:	400a      	ands	r2, r1
 80130be:	b291      	uxth	r1, r2
 80130c0:	4a13      	ldr	r2, [pc, #76]	@ (8013110 <RegionAU915InitDefaults+0x18c>)
 80130c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 6; i++)
 80130c6:	7b7b      	ldrb	r3, [r7, #13]
 80130c8:	3301      	adds	r3, #1
 80130ca:	737b      	strb	r3, [r7, #13]
 80130cc:	7b7b      	ldrb	r3, [r7, #13]
 80130ce:	2b05      	cmp	r3, #5
 80130d0:	d9eb      	bls.n	80130aa <RegionAU915InitDefaults+0x126>
		break;
 80130d2:	e00b      	b.n	80130ec <RegionAU915InitDefaults+0x168>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 80130d4:	2206      	movs	r2, #6
 80130d6:	490c      	ldr	r1, [pc, #48]	@ (8013108 <RegionAU915InitDefaults+0x184>)
 80130d8:	480c      	ldr	r0, [pc, #48]	@ (801310c <RegionAU915InitDefaults+0x188>)
 80130da:	f003 f9c4 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 6);
 80130de:	2206      	movs	r2, #6
 80130e0:	490a      	ldr	r1, [pc, #40]	@ (801310c <RegionAU915InitDefaults+0x188>)
 80130e2:	480b      	ldr	r0, [pc, #44]	@ (8013110 <RegionAU915InitDefaults+0x18c>)
 80130e4:	f003 f9bf 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 80130e8:	e000      	b.n	80130ec <RegionAU915InitDefaults+0x168>
		break;
 80130ea:	bf00      	nop
	}
	}
}
 80130ec:	bf00      	nop
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	00030d40 	.word	0x00030d40
 80130f8:	368cd800 	.word	0x368cd800
 80130fc:	20006e48 	.word	0x20006e48
 8013100:	00186a00 	.word	0x00186a00
 8013104:	36978660 	.word	0x36978660
 8013108:	20006ca8 	.word	0x20006ca8
 801310c:	20006c9c 	.word	0x20006c9c
 8013110:	20006cb4 	.word	0x20006cb4

08013114 <RegionAU915Verify>:

bool RegionAU915Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	460b      	mov	r3, r1
 801311e:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 8013120:	78fb      	ldrb	r3, [r7, #3]
 8013122:	3b04      	subs	r3, #4
 8013124:	2b1a      	cmp	r3, #26
 8013126:	d86e      	bhi.n	8013206 <RegionAU915Verify+0xf2>
 8013128:	a201      	add	r2, pc, #4	@ (adr r2, 8013130 <RegionAU915Verify+0x1c>)
 801312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801312e:	bf00      	nop
 8013130:	0801319d 	.word	0x0801319d
 8013134:	0801319d 	.word	0x0801319d
 8013138:	080131bb 	.word	0x080131bb
 801313c:	080131d9 	.word	0x080131d9
 8013140:	080131d9 	.word	0x080131d9
 8013144:	08013207 	.word	0x08013207
 8013148:	08013207 	.word	0x08013207
 801314c:	080131f7 	.word	0x080131f7
 8013150:	08013207 	.word	0x08013207
 8013154:	08013207 	.word	0x08013207
 8013158:	08013207 	.word	0x08013207
 801315c:	08013207 	.word	0x08013207
 8013160:	08013207 	.word	0x08013207
 8013164:	08013207 	.word	0x08013207
 8013168:	08013207 	.word	0x08013207
 801316c:	08013207 	.word	0x08013207
 8013170:	08013207 	.word	0x08013207
 8013174:	08013207 	.word	0x08013207
 8013178:	08013207 	.word	0x08013207
 801317c:	08013207 	.word	0x08013207
 8013180:	08013207 	.word	0x08013207
 8013184:	08013207 	.word	0x08013207
 8013188:	08013207 	.word	0x08013207
 801318c:	08013207 	.word	0x08013207
 8013190:	08013207 	.word	0x08013207
 8013194:	08013207 	.word	0x08013207
 8013198:	080131fb 	.word	0x080131fb
	{
	case PHY_TX_DR:
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f993 3000 	ldrsb.w	r3, [r3]
 80131a2:	220d      	movs	r2, #13
 80131a4:	2100      	movs	r1, #0
 80131a6:	4618      	mov	r0, r3
 80131a8:	f003 f8de 	bl	8016368 <RegionCommonValueInRange>
 80131ac:	4603      	mov	r3, r0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	bf14      	ite	ne
 80131b2:	2301      	movne	r3, #1
 80131b4:	2300      	moveq	r3, #0
 80131b6:	b2db      	uxtb	r3, r3
 80131b8:	e029      	b.n	801320e <RegionAU915Verify+0xfa>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f993 3000 	ldrsb.w	r3, [r3]
 80131c0:	220d      	movs	r2, #13
 80131c2:	2108      	movs	r1, #8
 80131c4:	4618      	mov	r0, r3
 80131c6:	f003 f8cf 	bl	8016368 <RegionCommonValueInRange>
 80131ca:	4603      	mov	r3, r0
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	bf14      	ite	ne
 80131d0:	2301      	movne	r3, #1
 80131d2:	2300      	moveq	r3, #0
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	e01a      	b.n	801320e <RegionAU915Verify+0xfa>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f993 3000 	ldrsb.w	r3, [r3]
 80131de:	220e      	movs	r2, #14
 80131e0:	2100      	movs	r1, #0
 80131e2:	4618      	mov	r0, r3
 80131e4:	f003 f8c0 	bl	8016368 <RegionCommonValueInRange>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	bf14      	ite	ne
 80131ee:	2301      	movne	r3, #1
 80131f0:	2300      	moveq	r3, #0
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	e00b      	b.n	801320e <RegionAU915Verify+0xfa>
	}
	case PHY_DUTY_CYCLE:
	{
		return AU915_DUTY_CYCLE_ENABLED;
 80131f6:	2300      	movs	r3, #0
 80131f8:	e009      	b.n	801320e <RegionAU915Verify+0xfa>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 2)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d803      	bhi.n	801320a <RegionAU915Verify+0xf6>
		{
			return false;
 8013202:	2300      	movs	r3, #0
 8013204:	e003      	b.n	801320e <RegionAU915Verify+0xfa>
		}
		break;
	}
	default:
		return false;
 8013206:	2300      	movs	r3, #0
 8013208:	e001      	b.n	801320e <RegionAU915Verify+0xfa>
		break;
 801320a:	bf00      	nop
	}
	return true;
 801320c:	2301      	movs	r3, #1
}
 801320e:	4618      	mov	r0, r3
 8013210:	3708      	adds	r7, #8
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop

08013218 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
	return;
 8013220:	bf00      	nop
}
 8013222:	370c      	adds	r7, #12
 8013224:	46bd      	mov	sp, r7
 8013226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322a:	4770      	bx	lr

0801322c <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
	uint8_t nbChannels = RegionCommonCountChannels(chanMaskSet->ChannelsMaskIn, 0, 4);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	2204      	movs	r2, #4
 801323a:	2100      	movs	r1, #0
 801323c:	4618      	mov	r0, r3
 801323e:	f003 f8e6 	bl	801640e <RegionCommonCountChannels>
 8013242:	4603      	mov	r3, r0
 8013244:	73bb      	strb	r3, [r7, #14]

	// Check the number of active channels
	// According to ACMA regulation, we require at least 20 125KHz channels, if
	// the node shall utilize 125KHz channels.
	if ((nbChannels < 20) &&
 8013246:	7bbb      	ldrb	r3, [r7, #14]
 8013248:	2b13      	cmp	r3, #19
 801324a:	d804      	bhi.n	8013256 <RegionAU915ChanMaskSet+0x2a>
 801324c:	7bbb      	ldrb	r3, [r7, #14]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d001      	beq.n	8013256 <RegionAU915ChanMaskSet+0x2a>
		(nbChannels > 0))
	{
		return false;
 8013252:	2300      	movs	r3, #0
 8013254:	e030      	b.n	80132b8 <RegionAU915ChanMaskSet+0x8c>
	}

	switch (chanMaskSet->ChannelsMaskType)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	791b      	ldrb	r3, [r3, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d002      	beq.n	8013264 <RegionAU915ChanMaskSet+0x38>
 801325e:	2b01      	cmp	r3, #1
 8013260:	d01f      	beq.n	80132a2 <RegionAU915ChanMaskSet+0x76>
 8013262:	e026      	b.n	80132b2 <RegionAU915ChanMaskSet+0x86>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 6);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2206      	movs	r2, #6
 801326a:	4619      	mov	r1, r3
 801326c:	4814      	ldr	r0, [pc, #80]	@ (80132c0 <RegionAU915ChanMaskSet+0x94>)
 801326e:	f003 f8fa 	bl	8016466 <RegionCommonChanMaskCopy>

		for (uint8_t i = 0; i < 6; i++)
 8013272:	2300      	movs	r3, #0
 8013274:	73fb      	strb	r3, [r7, #15]
 8013276:	e010      	b.n	801329a <RegionAU915ChanMaskSet+0x6e>
		{ // Copy-And the channels mask
			ChannelsMaskRemaining[i] &= ChannelsMask[i];
 8013278:	7bfb      	ldrb	r3, [r7, #15]
 801327a:	4a12      	ldr	r2, [pc, #72]	@ (80132c4 <RegionAU915ChanMaskSet+0x98>)
 801327c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8013280:	7bfb      	ldrb	r3, [r7, #15]
 8013282:	4a0f      	ldr	r2, [pc, #60]	@ (80132c0 <RegionAU915ChanMaskSet+0x94>)
 8013284:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013288:	7bfb      	ldrb	r3, [r7, #15]
 801328a:	400a      	ands	r2, r1
 801328c:	b291      	uxth	r1, r2
 801328e:	4a0d      	ldr	r2, [pc, #52]	@ (80132c4 <RegionAU915ChanMaskSet+0x98>)
 8013290:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 6; i++)
 8013294:	7bfb      	ldrb	r3, [r7, #15]
 8013296:	3301      	adds	r3, #1
 8013298:	73fb      	strb	r3, [r7, #15]
 801329a:	7bfb      	ldrb	r3, [r7, #15]
 801329c:	2b05      	cmp	r3, #5
 801329e:	d9eb      	bls.n	8013278 <RegionAU915ChanMaskSet+0x4c>
		}
		break;
 80132a0:	e009      	b.n	80132b6 <RegionAU915ChanMaskSet+0x8a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2206      	movs	r2, #6
 80132a8:	4619      	mov	r1, r3
 80132aa:	4807      	ldr	r0, [pc, #28]	@ (80132c8 <RegionAU915ChanMaskSet+0x9c>)
 80132ac:	f003 f8db 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 80132b0:	e001      	b.n	80132b6 <RegionAU915ChanMaskSet+0x8a>
	}
	default:
		return false;
 80132b2:	2300      	movs	r3, #0
 80132b4:	e000      	b.n	80132b8 <RegionAU915ChanMaskSet+0x8c>
	}
	return true;
 80132b6:	2301      	movs	r3, #1
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3710      	adds	r7, #16
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}
 80132c0:	20006c9c 	.word	0x20006c9c
 80132c4:	20006cb4 	.word	0x20006cb4
 80132c8:	20006ca8 	.word	0x20006ca8

080132cc <RegionAU915AdrNext>:

bool RegionAU915AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b088      	sub	sp, #32
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	607a      	str	r2, [r7, #4]
 80132d8:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 80132da:	2300      	movs	r3, #0
 80132dc:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	7a1b      	ldrb	r3, [r3, #8]
 80132e2:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	7a5b      	ldrb	r3, [r3, #9]
 80132e8:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	685a      	ldr	r2, [r3, #4]
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	785b      	ldrb	r3, [r3, #1]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d04e      	beq.n	8013398 <RegionAU915AdrNext+0xcc>
	{
		if (datarate == AU915_TX_MIN_DATARATE)
 80132fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d105      	bne.n	801330e <RegionAU915AdrNext+0x42>
		{
			*adrAckCounter = 0;
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	2200      	movs	r2, #0
 8013306:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 8013308:	2300      	movs	r3, #0
 801330a:	77fb      	strb	r3, [r7, #31]
 801330c:	e044      	b.n	8013398 <RegionAU915AdrNext+0xcc>
		}
		else
		{
			if (adrNext->AdrAckCounter >= AU915_ADR_ACK_LIMIT)
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	2b3f      	cmp	r3, #63	@ 0x3f
 8013314:	d904      	bls.n	8013320 <RegionAU915AdrNext+0x54>
			{
				adrAckReq = true;
 8013316:	2301      	movs	r3, #1
 8013318:	77fb      	strb	r3, [r7, #31]
				txPower = AU915_MAX_TX_POWER;
 801331a:	2300      	movs	r3, #0
 801331c:	777b      	strb	r3, [r7, #29]
 801331e:	e001      	b.n	8013324 <RegionAU915AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 8013320:	2300      	movs	r3, #0
 8013322:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (AU915_ADR_ACK_LIMIT + AU915_ADR_ACK_DELAY))
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	2b5f      	cmp	r3, #95	@ 0x5f
 801332a:	d935      	bls.n	8013398 <RegionAU915AdrNext+0xcc>
			{
				if ((adrNext->AdrAckCounter % AU915_ADR_ACK_DELAY) == 1)
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	f003 031f 	and.w	r3, r3, #31
 8013334:	2b01      	cmp	r3, #1
 8013336:	d12f      	bne.n	8013398 <RegionAU915AdrNext+0xcc>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013338:	2320      	movs	r3, #32
 801333a:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 801333c:	7fbb      	ldrb	r3, [r7, #30]
 801333e:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	7a9b      	ldrb	r3, [r3, #10]
 8013344:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionAU915GetPhyParam(&getPhy);
 8013346:	f107 0318 	add.w	r3, r7, #24
 801334a:	4618      	mov	r0, r3
 801334c:	f7ff fd24 	bl	8012d98 <RegionAU915GetPhyParam>
 8013350:	4603      	mov	r3, r0
 8013352:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	77bb      	strb	r3, [r7, #30]

					if (datarate == AU915_TX_MIN_DATARATE)
 8013358:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d11b      	bne.n	8013398 <RegionAU915AdrNext+0xcc>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 8013360:	2300      	movs	r3, #0
 8013362:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d015      	beq.n	8013398 <RegionAU915AdrNext+0xcc>
						{
							// Re-enable default channels
							ChannelsMask[0] = 0xFFFF;
 801336c:	4b10      	ldr	r3, [pc, #64]	@ (80133b0 <RegionAU915AdrNext+0xe4>)
 801336e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013372:	801a      	strh	r2, [r3, #0]
							ChannelsMask[1] = 0xFFFF;
 8013374:	4b0e      	ldr	r3, [pc, #56]	@ (80133b0 <RegionAU915AdrNext+0xe4>)
 8013376:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801337a:	805a      	strh	r2, [r3, #2]
							ChannelsMask[2] = 0xFFFF;
 801337c:	4b0c      	ldr	r3, [pc, #48]	@ (80133b0 <RegionAU915AdrNext+0xe4>)
 801337e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013382:	809a      	strh	r2, [r3, #4]
							ChannelsMask[3] = 0xFFFF;
 8013384:	4b0a      	ldr	r3, [pc, #40]	@ (80133b0 <RegionAU915AdrNext+0xe4>)
 8013386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801338a:	80da      	strh	r2, [r3, #6]
							ChannelsMask[4] = 0x00FF;
 801338c:	4b08      	ldr	r3, [pc, #32]	@ (80133b0 <RegionAU915AdrNext+0xe4>)
 801338e:	22ff      	movs	r2, #255	@ 0xff
 8013390:	811a      	strh	r2, [r3, #8]
							ChannelsMask[5] = 0x0000;
 8013392:	4b07      	ldr	r3, [pc, #28]	@ (80133b0 <RegionAU915AdrNext+0xe4>)
 8013394:	2200      	movs	r2, #0
 8013396:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}

	*drOut = datarate;
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	7fba      	ldrb	r2, [r7, #30]
 801339c:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	7f7a      	ldrb	r2, [r7, #29]
 80133a2:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 80133a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3720      	adds	r7, #32
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}
 80133ae:	bf00      	nop
 80133b0:	20006c9c 	.word	0x20006c9c

080133b4 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b088      	sub	sp, #32
 80133b8:	af02      	add	r7, sp, #8
 80133ba:	60ba      	str	r2, [r7, #8]
 80133bc:	607b      	str	r3, [r7, #4]
 80133be:	4603      	mov	r3, r0
 80133c0:	73fb      	strb	r3, [r7, #15]
 80133c2:	460b      	mov	r3, r1
 80133c4:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 80133c6:	f04f 0200 	mov.w	r2, #0
 80133ca:	f04f 0300 	mov.w	r3, #0
 80133ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, AU915_RX_MAX_DATARATE);
 80133d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80133d6:	2b0d      	cmp	r3, #13
 80133d8:	bfa8      	it	ge
 80133da:	230d      	movge	r3, #13
 80133dc:	b25a      	sxtb	r2, r3
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7ff fc05 	bl	8012bf8 <GetBandwidth>
 80133ee:	4603      	mov	r3, r0
 80133f0:	b2da      	uxtb	r2, r3
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	709a      	strb	r2, [r3, #2]

	tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate]);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80133fc:	461a      	mov	r2, r3
 80133fe:	4b10      	ldr	r3, [pc, #64]	@ (8013440 <RegionAU915ComputeRxWindowParameters+0x8c>)
 8013400:	5c9a      	ldrb	r2, [r3, r2]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013408:	4619      	mov	r1, r3
 801340a:	4b0e      	ldr	r3, [pc, #56]	@ (8013444 <RegionAU915ComputeRxWindowParameters+0x90>)
 801340c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013410:	4619      	mov	r1, r3
 8013412:	4610      	mov	r0, r2
 8013414:	f003 fa86 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 8013418:	ed87 0b04 	vstr	d0, [r7, #16]

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f103 0208 	add.w	r2, r3, #8
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	330c      	adds	r3, #12
 8013426:	7bb8      	ldrb	r0, [r7, #14]
 8013428:	9300      	str	r3, [sp, #0]
 801342a:	4613      	mov	r3, r2
 801342c:	2203      	movs	r2, #3
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	ed97 0b04 	vldr	d0, [r7, #16]
 8013434:	f003 fac2 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 8013438:	bf00      	nop
 801343a:	3718      	adds	r7, #24
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	080251b0 	.word	0x080251b0
 8013444:	080251c0 	.word	0x080251c0

08013448 <RegionAU915RxConfig>:

bool RegionAU915RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 8013448:	b590      	push	{r4, r7, lr}
 801344a:	b091      	sub	sp, #68	@ 0x44
 801344c:	af0a      	add	r7, sp, #40	@ 0x28
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
	int8_t dr = rxConfig->Datarate;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	785b      	ldrb	r3, [r3, #1]
 8013456:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 8013458:	2300      	movs	r3, #0
 801345a:	75fb      	strb	r3, [r7, #23]
	int8_t phyDr = 0;
 801345c:	2300      	movs	r3, #0
 801345e:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 8013466:	4b30      	ldr	r3, [pc, #192]	@ (8013528 <RegionAU915RxConfig+0xe0>)
 8013468:	689b      	ldr	r3, [r3, #8]
 801346a:	4798      	blx	r3
 801346c:	4603      	mov	r3, r0
 801346e:	2b00      	cmp	r3, #0
 8013470:	d001      	beq.n	8013476 <RegionAU915RxConfig+0x2e>
	{
		return false;
 8013472:	2300      	movs	r3, #0
 8013474:	e053      	b.n	801351e <RegionAU915RxConfig+0xd6>
	}

	if (rxConfig->Window == 0)
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	7cdb      	ldrb	r3, [r3, #19]
 801347a:	f083 0301 	eor.w	r3, r3, #1
 801347e:	b2db      	uxtb	r3, r3
 8013480:	2b00      	cmp	r3, #0
 8013482:	d009      	beq.n	8013498 <RegionAU915RxConfig+0x50>
	{
		// Apply window 1 frequency
		frequency = AU915_FIRST_RX1_CHANNEL + (rxConfig->Channel % 8) * AU915_STEPWIDTH_RX1_CHANNEL;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	f003 0307 	and.w	r3, r3, #7
 801348c:	4a27      	ldr	r2, [pc, #156]	@ (801352c <RegionAU915RxConfig+0xe4>)
 801348e:	fb03 f202 	mul.w	r2, r3, r2
 8013492:	4b27      	ldr	r3, [pc, #156]	@ (8013530 <RegionAU915RxConfig+0xe8>)
 8013494:	4413      	add	r3, r2
 8013496:	613b      	str	r3, [r7, #16]
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesAU915[dr];
 8013498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801349c:	4a25      	ldr	r2, [pc, #148]	@ (8013534 <RegionAU915RxConfig+0xec>)
 801349e:	5cd3      	ldrb	r3, [r2, r3]
 80134a0:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 80134a2:	4b21      	ldr	r3, [pc, #132]	@ (8013528 <RegionAU915RxConfig+0xe0>)
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	6938      	ldr	r0, [r7, #16]
 80134a8:	4798      	blx	r3

	// Radio configuration
	// Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
	// RAKwireless symbTimeout changed after tests done by RAKwireless
	Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 80134aa:	4b1f      	ldr	r3, [pc, #124]	@ (8013528 <RegionAU915RxConfig+0xe0>)
 80134ac:	69dc      	ldr	r4, [r3, #28]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	789b      	ldrb	r3, [r3, #2]
 80134b2:	4619      	mov	r1, r3
 80134b4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	7c9b      	ldrb	r3, [r3, #18]
 80134bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80134be:	2301      	movs	r3, #1
 80134c0:	9308      	str	r3, [sp, #32]
 80134c2:	2300      	movs	r3, #0
 80134c4:	9307      	str	r3, [sp, #28]
 80134c6:	2300      	movs	r3, #0
 80134c8:	9306      	str	r3, [sp, #24]
 80134ca:	2300      	movs	r3, #0
 80134cc:	9305      	str	r3, [sp, #20]
 80134ce:	2300      	movs	r3, #0
 80134d0:	9304      	str	r3, [sp, #16]
 80134d2:	2300      	movs	r3, #0
 80134d4:	9303      	str	r3, [sp, #12]
 80134d6:	2300      	movs	r3, #0
 80134d8:	9302      	str	r3, [sp, #8]
 80134da:	2308      	movs	r3, #8
 80134dc:	9301      	str	r3, [sp, #4]
 80134de:	2300      	movs	r3, #0
 80134e0:	9300      	str	r3, [sp, #0]
 80134e2:	2301      	movs	r3, #1
 80134e4:	2001      	movs	r0, #1
 80134e6:	47a0      	blx	r4

	if (rxConfig->RepeaterSupport == true)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	7c5b      	ldrb	r3, [r3, #17]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d005      	beq.n	80134fc <RegionAU915RxConfig+0xb4>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterAU915[dr];
 80134f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134f4:	4a10      	ldr	r2, [pc, #64]	@ (8013538 <RegionAU915RxConfig+0xf0>)
 80134f6:	5cd3      	ldrb	r3, [r2, r3]
 80134f8:	75fb      	strb	r3, [r7, #23]
 80134fa:	e004      	b.n	8013506 <RegionAU915RxConfig+0xbe>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateAU915[dr];
 80134fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013500:	4a0e      	ldr	r2, [pc, #56]	@ (801353c <RegionAU915RxConfig+0xf4>)
 8013502:	5cd3      	ldrb	r3, [r2, r3]
 8013504:	75fb      	strb	r3, [r7, #23]
	}
	Radio.SetMaxPayloadLength(MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 8013506:	4b08      	ldr	r3, [pc, #32]	@ (8013528 <RegionAU915RxConfig+0xe0>)
 8013508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801350a:	7dfa      	ldrb	r2, [r7, #23]
 801350c:	320d      	adds	r2, #13
 801350e:	b2d2      	uxtb	r2, r2
 8013510:	4611      	mov	r1, r2
 8013512:	2001      	movs	r0, #1
 8013514:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	7bfa      	ldrb	r2, [r7, #15]
 801351a:	701a      	strb	r2, [r3, #0]
	return true;
 801351c:	2301      	movs	r3, #1
}
 801351e:	4618      	mov	r0, r3
 8013520:	371c      	adds	r7, #28
 8013522:	46bd      	mov	sp, r7
 8013524:	bd90      	pop	{r4, r7, pc}
 8013526:	bf00      	nop
 8013528:	08025450 	.word	0x08025450
 801352c:	000927c0 	.word	0x000927c0
 8013530:	370870a0 	.word	0x370870a0
 8013534:	080251b0 	.word	0x080251b0
 8013538:	0802523c 	.word	0x0802523c
 801353c:	0802522c 	.word	0x0802522c

08013540 <RegionAU915TxConfig>:

bool RegionAU915TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 8013540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013542:	b093      	sub	sp, #76	@ 0x4c
 8013544:	af0a      	add	r7, sp, #40	@ 0x28
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]
	int8_t phyDr = DataratesAU915[txConfig->Datarate];
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013552:	461a      	mov	r2, r3
 8013554:	4b40      	ldr	r3, [pc, #256]	@ (8013658 <RegionAU915TxConfig+0x118>)
 8013556:	5c9b      	ldrb	r3, [r3, r2]
 8013558:	77fb      	strb	r3, [r7, #31]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	781b      	ldrb	r3, [r3, #0]
 8013564:	4619      	mov	r1, r3
 8013566:	4a3d      	ldr	r2, [pc, #244]	@ (801365c <RegionAU915TxConfig+0x11c>)
 8013568:	460b      	mov	r3, r1
 801356a:	005b      	lsls	r3, r3, #1
 801356c:	440b      	add	r3, r1
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	4413      	add	r3, r2
 8013572:	3309      	adds	r3, #9
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	4a3a      	ldr	r2, [pc, #232]	@ (8013660 <RegionAU915TxConfig+0x120>)
 8013578:	015b      	lsls	r3, r3, #5
 801357a:	4413      	add	r3, r2
 801357c:	3302      	adds	r3, #2
 801357e:	f993 1000 	ldrsb.w	r1, [r3]
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8013588:	4b36      	ldr	r3, [pc, #216]	@ (8013664 <RegionAU915TxConfig+0x124>)
 801358a:	f7ff fb55 	bl	8012c38 <LimitTxPower>
 801358e:	4603      	mov	r3, r0
 8013590:	77bb      	strb	r3, [r7, #30]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013598:	4618      	mov	r0, r3
 801359a:	f7ff fb2d 	bl	8012bf8 <GetBandwidth>
 801359e:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 80135a0:	2300      	movs	r3, #0
 80135a2:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80135b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80135b4:	eef0 0a47 	vmov.f32	s1, s14
 80135b8:	eeb0 0a67 	vmov.f32	s0, s15
 80135bc:	4618      	mov	r0, r3
 80135be:	f003 fa89 	bl	8016ad4 <RegionCommonComputeTxPower>
 80135c2:	4603      	mov	r3, r0
 80135c4:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 80135c6:	4b28      	ldr	r3, [pc, #160]	@ (8013668 <RegionAU915TxConfig+0x128>)
 80135c8:	691a      	ldr	r2, [r3, #16]
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	4618      	mov	r0, r3
 80135d0:	4922      	ldr	r1, [pc, #136]	@ (801365c <RegionAU915TxConfig+0x11c>)
 80135d2:	4603      	mov	r3, r0
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	4403      	add	r3, r0
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	440b      	add	r3, r1
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	4618      	mov	r0, r3
 80135e0:	4790      	blx	r2

	Radio.SetTxConfig(MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000);
 80135e2:	4b21      	ldr	r3, [pc, #132]	@ (8013668 <RegionAU915TxConfig+0x128>)
 80135e4:	6a1e      	ldr	r6, [r3, #32]
 80135e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80135ea:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80135ee:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80135f2:	9208      	str	r2, [sp, #32]
 80135f4:	2200      	movs	r2, #0
 80135f6:	9207      	str	r2, [sp, #28]
 80135f8:	2200      	movs	r2, #0
 80135fa:	9206      	str	r2, [sp, #24]
 80135fc:	2200      	movs	r2, #0
 80135fe:	9205      	str	r2, [sp, #20]
 8013600:	2201      	movs	r2, #1
 8013602:	9204      	str	r2, [sp, #16]
 8013604:	2200      	movs	r2, #0
 8013606:	9203      	str	r2, [sp, #12]
 8013608:	2208      	movs	r2, #8
 801360a:	9202      	str	r2, [sp, #8]
 801360c:	2201      	movs	r2, #1
 801360e:	9201      	str	r2, [sp, #4]
 8013610:	9300      	str	r3, [sp, #0]
 8013612:	69bb      	ldr	r3, [r7, #24]
 8013614:	2200      	movs	r2, #0
 8013616:	2001      	movs	r0, #1
 8013618:	47b0      	blx	r6

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(MODEM_LORA, txConfig->PktLen);
 801361a:	4b13      	ldr	r3, [pc, #76]	@ (8013668 <RegionAU915TxConfig+0x128>)
 801361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801361e:	68fa      	ldr	r2, [r7, #12]
 8013620:	8992      	ldrh	r2, [r2, #12]
 8013622:	b2d2      	uxtb	r2, r2
 8013624:	4611      	mov	r1, r2
 8013626:	2001      	movs	r0, #1
 8013628:	4798      	blx	r3

	*txTimeOnAir = Radio.TimeOnAir(MODEM_LORA, txConfig->PktLen);
 801362a:	4b0f      	ldr	r3, [pc, #60]	@ (8013668 <RegionAU915TxConfig+0x128>)
 801362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801362e:	68fa      	ldr	r2, [r7, #12]
 8013630:	8992      	ldrh	r2, [r2, #12]
 8013632:	b2d2      	uxtb	r2, r2
 8013634:	4611      	mov	r1, r2
 8013636:	2001      	movs	r0, #1
 8013638:	4798      	blx	r3
 801363a:	4603      	mov	r3, r0
 801363c:	2200      	movs	r2, #0
 801363e:	461c      	mov	r4, r3
 8013640:	4615      	mov	r5, r2
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	e9c3 4500 	strd	r4, r5, [r3]
	*txPower = txPowerLimited;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	7fba      	ldrb	r2, [r7, #30]
 801364c:	701a      	strb	r2, [r3, #0]

	return true;
 801364e:	2301      	movs	r3, #1
}
 8013650:	4618      	mov	r0, r3
 8013652:	3724      	adds	r7, #36	@ 0x24
 8013654:	46bd      	mov	sp, r7
 8013656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013658:	080251b0 	.word	0x080251b0
 801365c:	20006e48 	.word	0x20006e48
 8013660:	200000f0 	.word	0x200000f0
 8013664:	20006c9c 	.word	0x20006c9c
 8013668:	08025450 	.word	0x08025450

0801366c <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 801366c:	b590      	push	{r4, r7, lr}
 801366e:	b095      	sub	sp, #84	@ 0x54
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	607a      	str	r2, [r7, #4]
 8013678:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 801367a:	2307      	movs	r3, #7
 801367c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 8013680:	2300      	movs	r3, #0
 8013682:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t bytesProcessed = 0;
 8013686:	2300      	movs	r3, #0
 8013688:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint16_t channelsMask[6] = {0, 0, 0, 0, 0, 0};
 801368c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013690:	2200      	movs	r2, #0
 8013692:	601a      	str	r2, [r3, #0]
 8013694:	605a      	str	r2, [r3, #4]
 8013696:	609a      	str	r2, [r3, #8]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	// Initialize local copy of channels mask
	RegionCommonChanMaskCopy(channelsMask, ChannelsMask, 6);
 8013698:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801369c:	2206      	movs	r2, #6
 801369e:	4986      	ldr	r1, [pc, #536]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 80136a0:	4618      	mov	r0, r3
 80136a2:	f002 fee0 	bl	8016466 <RegionCommonChanMaskCopy>

	while (bytesProcessed < linkAdrReq->PayloadSize)
 80136a6:	e055      	b.n	8013754 <RegionAU915LinkAdrReq+0xe8>
	{
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	681a      	ldr	r2, [r3, #0]
 80136ac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80136b0:	4413      	add	r3, r2
 80136b2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80136b6:	4611      	mov	r1, r2
 80136b8:	4618      	mov	r0, r3
 80136ba:	f003 f85b 	bl	8016774 <RegionCommonParseLinkAdrReq>
 80136be:	4603      	mov	r3, r0
 80136c0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

		if (nextIndex == 0)
 80136c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d04a      	beq.n	8013762 <RegionAU915LinkAdrReq+0xf6>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 80136cc:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80136d0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80136d4:	4413      	add	r3, r2
 80136d6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 80136da:	2307      	movs	r3, #7
 80136dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if (linkAdrParams.ChMaskCtrl == 6)
 80136e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80136e4:	2b06      	cmp	r3, #6
 80136e6:	d110      	bne.n	801370a <RegionAU915LinkAdrReq+0x9e>
		{
			// Enable all 125 kHz channels
			channelsMask[0] = 0xFFFF;
 80136e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136ec:	873b      	strh	r3, [r7, #56]	@ 0x38
			channelsMask[1] = 0xFFFF;
 80136ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
			channelsMask[2] = 0xFFFF;
 80136f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136f8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			channelsMask[3] = 0xFFFF;
 80136fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			// Apply chMask to channels 64 to 71
			channelsMask[4] = linkAdrParams.ChMask;
 8013700:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8013704:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8013708:	e024      	b.n	8013754 <RegionAU915LinkAdrReq+0xe8>
		}
		else if (linkAdrParams.ChMaskCtrl == 7)
 801370a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801370e:	2b07      	cmp	r3, #7
 8013710:	d10c      	bne.n	801372c <RegionAU915LinkAdrReq+0xc0>
		{
			// Disable all 125 kHz channels
			channelsMask[0] = 0x0000;
 8013712:	2300      	movs	r3, #0
 8013714:	873b      	strh	r3, [r7, #56]	@ 0x38
			channelsMask[1] = 0x0000;
 8013716:	2300      	movs	r3, #0
 8013718:	877b      	strh	r3, [r7, #58]	@ 0x3a
			channelsMask[2] = 0x0000;
 801371a:	2300      	movs	r3, #0
 801371c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			channelsMask[3] = 0x0000;
 801371e:	2300      	movs	r3, #0
 8013720:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			// Apply chMask to channels 64 to 71
			channelsMask[4] = linkAdrParams.ChMask;
 8013722:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8013726:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801372a:	e013      	b.n	8013754 <RegionAU915LinkAdrReq+0xe8>
		}
		else if (linkAdrParams.ChMaskCtrl == 5)
 801372c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013730:	2b05      	cmp	r3, #5
 8013732:	d106      	bne.n	8013742 <RegionAU915LinkAdrReq+0xd6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 8013734:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013738:	f023 0301 	bic.w	r3, r3, #1
 801373c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8013740:	e008      	b.n	8013754 <RegionAU915LinkAdrReq+0xe8>
		}
		else
		{
			channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8013742:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013746:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	3350      	adds	r3, #80	@ 0x50
 801374e:	443b      	add	r3, r7
 8013750:	f823 2c18 	strh.w	r2, [r3, #-24]
	while (bytesProcessed < linkAdrReq->PayloadSize)
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	791b      	ldrb	r3, [r3, #4]
 8013758:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 801375c:	429a      	cmp	r2, r3
 801375e:	d3a3      	bcc.n	80136a8 <RegionAU915LinkAdrReq+0x3c>
 8013760:	e000      	b.n	8013764 <RegionAU915LinkAdrReq+0xf8>
			break; // break loop, since no more request has been found
 8013762:	bf00      	nop
		}
	}

	// FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
	if ((linkAdrParams.Datarate < DR_6) && (RegionCommonCountChannels(channelsMask, 0, 4) < 2))
 8013764:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8013768:	2b05      	cmp	r3, #5
 801376a:	dc0f      	bgt.n	801378c <RegionAU915LinkAdrReq+0x120>
 801376c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013770:	2204      	movs	r2, #4
 8013772:	2100      	movs	r1, #0
 8013774:	4618      	mov	r0, r3
 8013776:	f002 fe4a 	bl	801640e <RegionCommonCountChannels>
 801377a:	4603      	mov	r3, r0
 801377c:	2b01      	cmp	r3, #1
 801377e:	d805      	bhi.n	801378c <RegionAU915LinkAdrReq+0x120>
	{
		status &= 0xFE; // Channel mask KO
 8013780:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8013784:	f023 0301 	bic.w	r3, r3, #1
 8013788:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 801378c:	2301      	movs	r3, #1
 801378e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	795b      	ldrb	r3, [r3, #5]
 8013796:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionAU915GetPhyParam(&getPhy);
 801379a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801379e:	4618      	mov	r0, r3
 80137a0:	f7ff fafa 	bl	8012d98 <RegionAU915GetPhyParam>
 80137a4:	4603      	mov	r3, r0
 80137a6:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 80137a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80137ac:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	799b      	ldrb	r3, [r3, #6]
 80137b2:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80137b4:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 80137b8:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80137ba:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 80137be:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80137c0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80137c4:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80137cc:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80137d4:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	7a5b      	ldrb	r3, [r3, #9]
 80137da:	b25b      	sxtb	r3, r3
 80137dc:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 80137de:	2348      	movs	r3, #72	@ 0x48
 80137e0:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = channelsMask;
 80137e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80137e6:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 80137e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ea:	b25b      	sxtb	r3, r3
 80137ec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 80137f0:	230d      	movs	r3, #13
 80137f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 80137f6:	4b31      	ldr	r3, [pc, #196]	@ (80138bc <RegionAU915LinkAdrReq+0x250>)
 80137f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 80137fa:	230e      	movs	r3, #14
 80137fc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 8013800:	2300      	movs	r3, #0
 8013802:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 8013806:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 801380a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801380e:	1c9a      	adds	r2, r3, #2
 8013810:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013814:	1c59      	adds	r1, r3, #1
 8013816:	f107 0014 	add.w	r0, r7, #20
 801381a:	4623      	mov	r3, r4
 801381c:	f002 fffc 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 8013820:	4603      	mov	r3, r0
 8013822:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Update channelsMask if everything is correct
	if (status == 0x07)
 8013826:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801382a:	2b07      	cmp	r3, #7
 801382c:	d12e      	bne.n	801388c <RegionAU915LinkAdrReq+0x220>
	{
		// Copy Mask
		RegionCommonChanMaskCopy(ChannelsMask, channelsMask, 6);
 801382e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013832:	2206      	movs	r2, #6
 8013834:	4619      	mov	r1, r3
 8013836:	4820      	ldr	r0, [pc, #128]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 8013838:	f002 fe15 	bl	8016466 <RegionCommonChanMaskCopy>

		ChannelsMaskRemaining[0] &= ChannelsMask[0];
 801383c:	4b20      	ldr	r3, [pc, #128]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801383e:	881a      	ldrh	r2, [r3, #0]
 8013840:	4b1d      	ldr	r3, [pc, #116]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	4013      	ands	r3, r2
 8013846:	b29a      	uxth	r2, r3
 8013848:	4b1d      	ldr	r3, [pc, #116]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801384a:	801a      	strh	r2, [r3, #0]
		ChannelsMaskRemaining[1] &= ChannelsMask[1];
 801384c:	4b1c      	ldr	r3, [pc, #112]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801384e:	885a      	ldrh	r2, [r3, #2]
 8013850:	4b19      	ldr	r3, [pc, #100]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 8013852:	885b      	ldrh	r3, [r3, #2]
 8013854:	4013      	ands	r3, r2
 8013856:	b29a      	uxth	r2, r3
 8013858:	4b19      	ldr	r3, [pc, #100]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801385a:	805a      	strh	r2, [r3, #2]
		ChannelsMaskRemaining[2] &= ChannelsMask[2];
 801385c:	4b18      	ldr	r3, [pc, #96]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801385e:	889a      	ldrh	r2, [r3, #4]
 8013860:	4b15      	ldr	r3, [pc, #84]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 8013862:	889b      	ldrh	r3, [r3, #4]
 8013864:	4013      	ands	r3, r2
 8013866:	b29a      	uxth	r2, r3
 8013868:	4b15      	ldr	r3, [pc, #84]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801386a:	809a      	strh	r2, [r3, #4]
		ChannelsMaskRemaining[3] &= ChannelsMask[3];
 801386c:	4b14      	ldr	r3, [pc, #80]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801386e:	88da      	ldrh	r2, [r3, #6]
 8013870:	4b11      	ldr	r3, [pc, #68]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 8013872:	88db      	ldrh	r3, [r3, #6]
 8013874:	4013      	ands	r3, r2
 8013876:	b29a      	uxth	r2, r3
 8013878:	4b11      	ldr	r3, [pc, #68]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801387a:	80da      	strh	r2, [r3, #6]
		ChannelsMaskRemaining[4] = ChannelsMask[4];
 801387c:	4b0e      	ldr	r3, [pc, #56]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 801387e:	891a      	ldrh	r2, [r3, #8]
 8013880:	4b0f      	ldr	r3, [pc, #60]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 8013882:	811a      	strh	r2, [r3, #8]
		ChannelsMaskRemaining[5] = ChannelsMask[5];
 8013884:	4b0c      	ldr	r3, [pc, #48]	@ (80138b8 <RegionAU915LinkAdrReq+0x24c>)
 8013886:	895a      	ldrh	r2, [r3, #10]
 8013888:	4b0d      	ldr	r3, [pc, #52]	@ (80138c0 <RegionAU915LinkAdrReq+0x254>)
 801388a:	815a      	strh	r2, [r3, #10]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 801388c:	f997 2045 	ldrsb.w	r2, [r7, #69]	@ 0x45
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 8013894:	f997 2046 	ldrsb.w	r2, [r7, #70]	@ 0x46
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 801389c:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 80138a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80138a6:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80138aa:	701a      	strb	r2, [r3, #0]

	return status;
 80138ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3754      	adds	r7, #84	@ 0x54
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd90      	pop	{r4, r7, pc}
 80138b8:	20006c9c 	.word	0x20006c9c
 80138bc:	20006e48 	.word	0x20006e48
 80138c0:	20006cb4 	.word	0x20006cb4

080138c4 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b084      	sub	sp, #16
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 80138cc:	2307      	movs	r3, #7
 80138ce:	73fb      	strb	r3, [r7, #15]
	uint32_t freq = rxParamSetupReq->Frequency;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	60bb      	str	r3, [r7, #8]

	// Verify radio frequency
	if ((Radio.CheckRfFrequency(freq) == false) ||
 80138d6:	4b2a      	ldr	r3, [pc, #168]	@ (8013980 <RegionAU915RxParamSetupReq+0xbc>)
 80138d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138da:	68b8      	ldr	r0, [r7, #8]
 80138dc:	4798      	blx	r3
 80138de:	4603      	mov	r3, r0
 80138e0:	f083 0301 	eor.w	r3, r3, #1
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d114      	bne.n	8013914 <RegionAU915RxParamSetupReq+0x50>
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	4a25      	ldr	r2, [pc, #148]	@ (8013984 <RegionAU915RxParamSetupReq+0xc0>)
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d910      	bls.n	8013914 <RegionAU915RxParamSetupReq+0x50>
		(freq < AU915_FIRST_RX1_CHANNEL) ||
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	4a24      	ldr	r2, [pc, #144]	@ (8013988 <RegionAU915RxParamSetupReq+0xc4>)
 80138f6:	4293      	cmp	r3, r2
 80138f8:	d80c      	bhi.n	8013914 <RegionAU915RxParamSetupReq+0x50>
		(freq > AU915_LAST_RX1_CHANNEL) ||
		(((freq - (uint32_t)AU915_FIRST_RX1_CHANNEL) % (uint32_t)AU915_STEPWIDTH_RX1_CHANNEL) != 0))
 80138fa:	68ba      	ldr	r2, [r7, #8]
 80138fc:	4b23      	ldr	r3, [pc, #140]	@ (801398c <RegionAU915RxParamSetupReq+0xc8>)
 80138fe:	4413      	add	r3, r2
 8013900:	4a23      	ldr	r2, [pc, #140]	@ (8013990 <RegionAU915RxParamSetupReq+0xcc>)
 8013902:	fba2 1203 	umull	r1, r2, r2, r3
 8013906:	0c92      	lsrs	r2, r2, #18
 8013908:	4922      	ldr	r1, [pc, #136]	@ (8013994 <RegionAU915RxParamSetupReq+0xd0>)
 801390a:	fb01 f202 	mul.w	r2, r1, r2
 801390e:	1a9a      	subs	r2, r3, r2
		(freq > AU915_LAST_RX1_CHANNEL) ||
 8013910:	2a00      	cmp	r2, #0
 8013912:	d003      	beq.n	801391c <RegionAU915RxParamSetupReq+0x58>
	{
		status &= 0xFE; // Channel frequency KO
 8013914:	7bfb      	ldrb	r3, [r7, #15]
 8013916:	f023 0301 	bic.w	r3, r3, #1
 801391a:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE) == false)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f993 3000 	ldrsb.w	r3, [r3]
 8013922:	220d      	movs	r2, #13
 8013924:	2108      	movs	r1, #8
 8013926:	4618      	mov	r0, r3
 8013928:	f002 fd1e 	bl	8016368 <RegionCommonValueInRange>
 801392c:	4603      	mov	r3, r0
 801392e:	2b00      	cmp	r3, #0
 8013930:	d103      	bne.n	801393a <RegionAU915RxParamSetupReq+0x76>
	{
		status &= 0xFD; // Datarate KO
 8013932:	7bfb      	ldrb	r3, [r7, #15]
 8013934:	f023 0302 	bic.w	r3, r3, #2
 8013938:	73fb      	strb	r3, [r7, #15]
	}
	if ((rxParamSetupReq->Datarate == DR_7) ||
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f993 3000 	ldrsb.w	r3, [r3]
 8013940:	2b07      	cmp	r3, #7
 8013942:	d004      	beq.n	801394e <RegionAU915RxParamSetupReq+0x8a>
		(rxParamSetupReq->Datarate > DR_13))
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f993 3000 	ldrsb.w	r3, [r3]
	if ((rxParamSetupReq->Datarate == DR_7) ||
 801394a:	2b0d      	cmp	r3, #13
 801394c:	dd03      	ble.n	8013956 <RegionAU915RxParamSetupReq+0x92>
	{
		status &= 0xFD; // Datarate KO
 801394e:	7bfb      	ldrb	r3, [r7, #15]
 8013950:	f023 0302 	bic.w	r3, r3, #2
 8013954:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET) == false)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801395c:	2206      	movs	r2, #6
 801395e:	2100      	movs	r1, #0
 8013960:	4618      	mov	r0, r3
 8013962:	f002 fd01 	bl	8016368 <RegionCommonValueInRange>
 8013966:	4603      	mov	r3, r0
 8013968:	2b00      	cmp	r3, #0
 801396a:	d103      	bne.n	8013974 <RegionAU915RxParamSetupReq+0xb0>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 801396c:	7bfb      	ldrb	r3, [r7, #15]
 801396e:	f023 0304 	bic.w	r3, r3, #4
 8013972:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8013974:	7bfb      	ldrb	r3, [r7, #15]
}
 8013976:	4618      	mov	r0, r3
 8013978:	3710      	adds	r7, #16
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}
 801397e:	bf00      	nop
 8013980:	08025450 	.word	0x08025450
 8013984:	3708709f 	.word	0x3708709f
 8013988:	374886e0 	.word	0x374886e0
 801398c:	c8f78f60 	.word	0xc8f78f60
 8013990:	6fd91d85 	.word	0x6fd91d85
 8013994:	000927c0 	.word	0x000927c0

08013998 <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
	// Datarate and frequency KO
	return 0;
 80139a0:	2300      	movs	r3, #0
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	370c      	adds	r7, #12
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr

080139ae <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 80139ae:	b480      	push	{r7}
 80139b0:	b083      	sub	sp, #12
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
	return -1;
 80139b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	370c      	adds	r7, #12
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr

080139c6 <RegionAU915DlChannelReq>:

uint8_t RegionAU915DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 80139c6:	b480      	push	{r7}
 80139c8:	b083      	sub	sp, #12
 80139ca:	af00      	add	r7, sp, #0
 80139cc:	6078      	str	r0, [r7, #4]
	return 0;
 80139ce:	2300      	movs	r3, #0
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <RegionAU915AlternateDr>:

int8_t RegionAU915AlternateDr(AlternateDrParams_t *alternateDr)
{
 80139dc:	b480      	push	{r7}
 80139de:	b085      	sub	sp, #20
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
	static int8_t trialsCount = 0;
	uint8_t currentDr = 0;
 80139e4:	2300      	movs	r3, #0
 80139e6:	73fb      	strb	r3, [r7, #15]

	// Re-enable 500 kHz default channels
	ChannelsMask[4] = 0x00FF;
 80139e8:	4b10      	ldr	r3, [pc, #64]	@ (8013a2c <RegionAU915AlternateDr+0x50>)
 80139ea:	22ff      	movs	r2, #255	@ 0xff
 80139ec:	811a      	strh	r2, [r3, #8]

	if ((trialsCount & 0x01) == 0x01)
 80139ee:	4b10      	ldr	r3, [pc, #64]	@ (8013a30 <RegionAU915AlternateDr+0x54>)
 80139f0:	f993 3000 	ldrsb.w	r3, [r3]
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	f003 0301 	and.w	r3, r3, #1
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d002      	beq.n	8013a04 <RegionAU915AlternateDr+0x28>
	{
		currentDr = DR_6;
 80139fe:	2306      	movs	r3, #6
 8013a00:	73fb      	strb	r3, [r7, #15]
 8013a02:	e001      	b.n	8013a08 <RegionAU915AlternateDr+0x2c>
	}
	else
	{
		currentDr = DR_2;
 8013a04:	2302      	movs	r3, #2
 8013a06:	73fb      	strb	r3, [r7, #15]
	}
	trialsCount++;
 8013a08:	4b09      	ldr	r3, [pc, #36]	@ (8013a30 <RegionAU915AlternateDr+0x54>)
 8013a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	3301      	adds	r3, #1
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	b25a      	sxtb	r2, r3
 8013a16:	4b06      	ldr	r3, [pc, #24]	@ (8013a30 <RegionAU915AlternateDr+0x54>)
 8013a18:	701a      	strb	r2, [r3, #0]
	return currentDr;
 8013a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3714      	adds	r7, #20
 8013a22:	46bd      	mov	sp, r7
 8013a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a28:	4770      	bx	lr
 8013a2a:	bf00      	nop
 8013a2c:	20006c9c 	.word	0x20006c9c
 8013a30:	200071a8 	.word	0x200071a8

08013a34 <RegionAU915CalcBackOff>:

void RegionAU915CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b08a      	sub	sp, #40	@ 0x28
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 8013a3c:	4b11      	ldr	r3, [pc, #68]	@ (8013a84 <RegionAU915CalcBackOff+0x50>)
 8013a3e:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 8013a40:	4b11      	ldr	r3, [pc, #68]	@ (8013a88 <RegionAU915CalcBackOff+0x54>)
 8013a42:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	785b      	ldrb	r3, [r3, #1]
 8013a48:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	789b      	ldrb	r3, [r3, #2]
 8013a54:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	78db      	ldrb	r3, [r3, #3]
 8013a5a:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013a62:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013a6c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 8013a70:	f107 0308 	add.w	r3, r7, #8
 8013a74:	4618      	mov	r0, r3
 8013a76:	f003 f85f 	bl	8016b38 <RegionCommonCalcBackOff>
}
 8013a7a:	bf00      	nop
 8013a7c:	3728      	adds	r7, #40	@ 0x28
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}
 8013a82:	bf00      	nop
 8013a84:	20006e48 	.word	0x20006e48
 8013a88:	200000f0 	.word	0x200000f0

08013a8c <RegionAU915NextChannel>:

bool RegionAU915NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 8013a8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013a90:	b09e      	sub	sp, #120	@ 0x78
 8013a92:	af02      	add	r7, sp, #8
 8013a94:	60f8      	str	r0, [r7, #12]
 8013a96:	60b9      	str	r1, [r7, #8]
 8013a98:	607a      	str	r2, [r7, #4]
 8013a9a:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t delayTx = 0;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = {0};
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	f107 0318 	add.w	r3, r7, #24
 8013ab0:	2244      	movs	r2, #68	@ 0x44
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f00e fbc9 	bl	802224c <memset>
	TimerTime_t nextTxDelay = 0;
 8013aba:	f04f 0200 	mov.w	r2, #0
 8013abe:	f04f 0300 	mov.w	r3, #0
 8013ac2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	// Count 125kHz channels
	if (RegionCommonCountChannels(ChannelsMaskRemaining, 0, 4) == 0)
 8013ac6:	2204      	movs	r2, #4
 8013ac8:	2100      	movs	r1, #0
 8013aca:	484f      	ldr	r0, [pc, #316]	@ (8013c08 <RegionAU915NextChannel+0x17c>)
 8013acc:	f002 fc9f 	bl	801640e <RegionCommonCountChannels>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d104      	bne.n	8013ae0 <RegionAU915NextChannel+0x54>
	{ // Reactivate default channels
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 4);
 8013ad6:	2204      	movs	r2, #4
 8013ad8:	494c      	ldr	r1, [pc, #304]	@ (8013c0c <RegionAU915NextChannel+0x180>)
 8013ada:	484b      	ldr	r0, [pc, #300]	@ (8013c08 <RegionAU915NextChannel+0x17c>)
 8013adc:	f002 fcc3 	bl	8016466 <RegionCommonChanMaskCopy>
	}
	// Check other channels
	if (nextChanParams->Datarate >= DR_6)
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8013ae6:	2b05      	cmp	r3, #5
 8013ae8:	dd08      	ble.n	8013afc <RegionAU915NextChannel+0x70>
	{
		if ((ChannelsMaskRemaining[4] & 0x00FF) == 0)
 8013aea:	4b47      	ldr	r3, [pc, #284]	@ (8013c08 <RegionAU915NextChannel+0x17c>)
 8013aec:	891b      	ldrh	r3, [r3, #8]
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d103      	bne.n	8013afc <RegionAU915NextChannel+0x70>
		{
			ChannelsMaskRemaining[4] = ChannelsMask[4];
 8013af4:	4b45      	ldr	r3, [pc, #276]	@ (8013c0c <RegionAU915NextChannel+0x180>)
 8013af6:	891a      	ldrh	r2, [r3, #8]
 8013af8:	4b43      	ldr	r3, [pc, #268]	@ (8013c08 <RegionAU915NextChannel+0x17c>)
 8013afa:	811a      	strh	r2, [r3, #8]
		}
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013b08:	4610      	mov	r0, r2
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	f00d faa6 	bl	802105c <util_timer_get_elapsedtime>
 8013b10:	4602      	mov	r2, r0
 8013b12:	460b      	mov	r3, r1
 8013b14:	42a2      	cmp	r2, r4
 8013b16:	41ab      	sbcs	r3, r5
 8013b18:	d323      	bcc.n	8013b62 <RegionAU915NextChannel+0xd6>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 8013b1a:	6839      	ldr	r1, [r7, #0]
 8013b1c:	f04f 0200 	mov.w	r2, #0
 8013b20:	f04f 0300 	mov.w	r3, #0
 8013b24:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, AU915_MAX_NB_BANDS);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	7c58      	ldrb	r0, [r3, #17]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	7c99      	ldrb	r1, [r3, #18]
 8013b30:	2301      	movs	r3, #1
 8013b32:	4a37      	ldr	r2, [pc, #220]	@ (8013c10 <RegionAU915NextChannel+0x184>)
 8013b34:	f002 fcdf 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 8013b38:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Datarate,
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8013b42:	b2d8      	uxtb	r0, r3
 8013b44:	f107 035f 	add.w	r3, r7, #95	@ 0x5f
 8013b48:	9301      	str	r3, [sp, #4]
 8013b4a:	f107 0314 	add.w	r3, r7, #20
 8013b4e:	9300      	str	r3, [sp, #0]
 8013b50:	4b2f      	ldr	r3, [pc, #188]	@ (8013c10 <RegionAU915NextChannel+0x184>)
 8013b52:	4a30      	ldr	r2, [pc, #192]	@ (8013c14 <RegionAU915NextChannel+0x188>)
 8013b54:	492c      	ldr	r1, [pc, #176]	@ (8013c08 <RegionAU915NextChannel+0x17c>)
 8013b56:	f7ff f88b 	bl	8012c70 <CountNbOfEnabledChannels>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8013b60:	e017      	b.n	8013b92 <RegionAU915NextChannel+0x106>
													 ChannelsMaskRemaining, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 8013b62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013b66:	3301      	adds	r3, #1
 8013b68:	b2db      	uxtb	r3, r3
 8013b6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013b7a:	4610      	mov	r0, r2
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	f00d fa6d 	bl	802105c <util_timer_get_elapsedtime>
 8013b82:	4602      	mov	r2, r0
 8013b84:	460b      	mov	r3, r1
 8013b86:	ebb4 0802 	subs.w	r8, r4, r2
 8013b8a:	eb65 0903 	sbc.w	r9, r5, r3
 8013b8e:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
	}

	if (nbEnabledChannels > 0)
 8013b92:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d01d      	beq.n	8013bd6 <RegionAU915NextChannel+0x14a>
	{
		// We found a valid channel
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 8013b9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8013b9e:	3b01      	subs	r3, #1
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	2000      	movs	r0, #0
 8013ba4:	f00c ffe6 	bl	8020b74 <randr>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	3370      	adds	r3, #112	@ 0x70
 8013bac:	443b      	add	r3, r7
 8013bae:	f813 2c5c 	ldrb.w	r2, [r3, #-92]
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	701a      	strb	r2, [r3, #0]
		// Disable the channel in the mask
		RegionCommonChanDisable(ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8);
 8013bb6:	68bb      	ldr	r3, [r7, #8]
 8013bb8:	781b      	ldrb	r3, [r3, #0]
 8013bba:	2240      	movs	r2, #64	@ 0x40
 8013bbc:	4619      	mov	r1, r3
 8013bbe:	4812      	ldr	r0, [pc, #72]	@ (8013c08 <RegionAU915NextChannel+0x17c>)
 8013bc0:	f002 fbf0 	bl	80163a4 <RegionCommonChanDisable>

		*time = 0;
 8013bc4:	6879      	ldr	r1, [r7, #4]
 8013bc6:	f04f 0200 	mov.w	r2, #0
 8013bca:	f04f 0300 	mov.w	r3, #0
 8013bce:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	e012      	b.n	8013bfc <RegionAU915NextChannel+0x170>
	}
	else
	{
		if (delayTx > 0)
 8013bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d006      	beq.n	8013bec <RegionAU915NextChannel+0x160>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 8013bde:	6879      	ldr	r1, [r7, #4]
 8013be0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8013be4:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8013be8:	2301      	movs	r3, #1
 8013bea:	e007      	b.n	8013bfc <RegionAU915NextChannel+0x170>
		}
		// Datarate not supported by any channel
		*time = 0;
 8013bec:	6879      	ldr	r1, [r7, #4]
 8013bee:	f04f 0200 	mov.w	r2, #0
 8013bf2:	f04f 0300 	mov.w	r3, #0
 8013bf6:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 8013bfa:	2300      	movs	r3, #0
	}
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3770      	adds	r7, #112	@ 0x70
 8013c00:	46bd      	mov	sp, r7
 8013c02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8013c06:	bf00      	nop
 8013c08:	20006cb4 	.word	0x20006cb4
 8013c0c:	20006c9c 	.word	0x20006c9c
 8013c10:	200000f0 	.word	0x200000f0
 8013c14:	20006e48 	.word	0x20006e48

08013c18 <RegionAU915SetContinuousWave>:
{
	return false; // LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b084      	sub	sp, #16
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8013cac <RegionAU915SetContinuousWave+0x94>)
 8013c2e:	460b      	mov	r3, r1
 8013c30:	005b      	lsls	r3, r3, #1
 8013c32:	440b      	add	r3, r1
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	4413      	add	r3, r2
 8013c38:	3309      	adds	r3, #9
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8013cb0 <RegionAU915SetContinuousWave+0x98>)
 8013c3e:	015b      	lsls	r3, r3, #5
 8013c40:	4413      	add	r3, r2
 8013c42:	3302      	adds	r3, #2
 8013c44:	f993 1000 	ldrsb.w	r1, [r3]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8013c4e:	4b19      	ldr	r3, [pc, #100]	@ (8013cb4 <RegionAU915SetContinuousWave+0x9c>)
 8013c50:	f7fe fff2 	bl	8012c38 <LimitTxPower>
 8013c54:	4603      	mov	r3, r0
 8013c56:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	4619      	mov	r1, r3
 8013c62:	4a12      	ldr	r2, [pc, #72]	@ (8013cac <RegionAU915SetContinuousWave+0x94>)
 8013c64:	460b      	mov	r3, r1
 8013c66:	005b      	lsls	r3, r3, #1
 8013c68:	440b      	add	r3, r1
 8013c6a:	009b      	lsls	r3, r3, #2
 8013c6c:	4413      	add	r3, r2
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	edd3 7a01 	vldr	s15, [r3, #4]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8013c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c82:	eef0 0a47 	vmov.f32	s1, s14
 8013c86:	eeb0 0a67 	vmov.f32	s0, s15
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f002 ff22 	bl	8016ad4 <RegionCommonComputeTxPower>
 8013c90:	4603      	mov	r3, r0
 8013c92:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 8013c94:	4b08      	ldr	r3, [pc, #32]	@ (8013cb8 <RegionAU915SetContinuousWave+0xa0>)
 8013c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	8992      	ldrh	r2, [r2, #12]
 8013c9c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8013ca0:	68b8      	ldr	r0, [r7, #8]
 8013ca2:	4798      	blx	r3
}
 8013ca4:	bf00      	nop
 8013ca6:	3710      	adds	r7, #16
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	20006e48 	.word	0x20006e48
 8013cb0:	200000f0 	.word	0x200000f0
 8013cb4:	20006c9c 	.word	0x20006c9c
 8013cb8:	08025450 	.word	0x08025450

08013cbc <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 8013cbc:	b480      	push	{r7}
 8013cbe:	b085      	sub	sp, #20
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	71fb      	strb	r3, [r7, #7]
 8013cc6:	460b      	mov	r3, r1
 8013cc8:	71bb      	strb	r3, [r7, #6]
 8013cca:	4613      	mov	r3, r2
 8013ccc:	717b      	strb	r3, [r7, #5]
	int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 8013cce:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8013cd2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013cd6:	480b      	ldr	r0, [pc, #44]	@ (8013d04 <RegionAU915ApplyDrOffset+0x48>)
 8013cd8:	4613      	mov	r3, r2
 8013cda:	005b      	lsls	r3, r3, #1
 8013cdc:	4413      	add	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4403      	add	r3, r0
 8013ce2:	440b      	add	r3, r1
 8013ce4:	781b      	ldrb	r3, [r3, #0]
 8013ce6:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 8013ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	da01      	bge.n	8013cf4 <RegionAU915ApplyDrOffset+0x38>
	{
		datarate = DR_0;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 8013cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3714      	adds	r7, #20
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	08025200 	.word	0x08025200

08013d08 <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b085      	sub	sp, #20
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	4603      	mov	r3, r0
 8013d10:	460a      	mov	r2, r1
 8013d12:	71fb      	strb	r3, [r7, #7]
 8013d14:	4613      	mov	r3, r2
 8013d16:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 8013d1c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013d20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d102      	bne.n	8013d2e <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 8013d28:	79bb      	ldrb	r3, [r7, #6]
 8013d2a:	73fb      	strb	r3, [r7, #15]
 8013d2c:	e002      	b.n	8013d34 <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 8013d2e:	79fb      	ldrb	r3, [r7, #7]
 8013d30:	3b01      	subs	r3, #1
 8013d32:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 8013d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013d38:	4618      	mov	r0, r3
 8013d3a:	3714      	adds	r7, #20
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
	switch (BandwidthsCN470[drIndex])
 8013d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8013d78 <GetBandwidth+0x34>)
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d54:	4a09      	ldr	r2, [pc, #36]	@ (8013d7c <GetBandwidth+0x38>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d004      	beq.n	8013d64 <GetBandwidth+0x20>
 8013d5a:	4a09      	ldr	r2, [pc, #36]	@ (8013d80 <GetBandwidth+0x3c>)
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d003      	beq.n	8013d68 <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 8013d60:	2300      	movs	r3, #0
 8013d62:	e002      	b.n	8013d6a <GetBandwidth+0x26>
	case 250000:
		return 1;
 8013d64:	2301      	movs	r3, #1
 8013d66:	e000      	b.n	8013d6a <GetBandwidth+0x26>
	case 500000:
		return 2;
 8013d68:	2302      	movs	r3, #2
	}
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	370c      	adds	r7, #12
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d74:	4770      	bx	lr
 8013d76:	bf00      	nop
 8013d78:	08025254 	.word	0x08025254
 8013d7c:	0003d090 	.word	0x0003d090
 8013d80:	0007a120 	.word	0x0007a120

08013d84 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 8013d84:	b480      	push	{r7}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	603b      	str	r3, [r7, #0]
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	71fb      	strb	r3, [r7, #7]
 8013d90:	460b      	mov	r3, r1
 8013d92:	71bb      	strb	r3, [r7, #6]
 8013d94:	4613      	mov	r3, r2
 8013d96:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 8013d98:	79fb      	ldrb	r3, [r7, #7]
 8013d9a:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 8013d9c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013da0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013da4:	4293      	cmp	r3, r2
 8013da6:	bfb8      	it	lt
 8013da8:	4613      	movlt	r3, r2
 8013daa:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 8013dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3714      	adds	r7, #20
 8013db4:	46bd      	mov	sp, r7
 8013db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dba:	4770      	bx	lr

08013dbc <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b086      	sub	sp, #24
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	60b9      	str	r1, [r7, #8]
 8013dc4:	607a      	str	r2, [r7, #4]
 8013dc6:	603b      	str	r3, [r7, #0]
 8013dc8:	4603      	mov	r3, r0
 8013dca:	73fb      	strb	r3, [r7, #15]
	uint8_t nbEnabledChannels = 0;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < CN470_MAX_NB_CHANNELS; i += 16, k++)
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	757b      	strb	r3, [r7, #21]
 8013dd8:	2300      	movs	r3, #0
 8013dda:	753b      	strb	r3, [r7, #20]
 8013ddc:	e076      	b.n	8013ecc <CountNbOfEnabledChannels+0x110>
	{
		for (uint8_t j = 0; j < 16; j++)
 8013dde:	2300      	movs	r3, #0
 8013de0:	74fb      	strb	r3, [r7, #19]
 8013de2:	e06a      	b.n	8013eba <CountNbOfEnabledChannels+0xfe>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 8013de4:	7d3b      	ldrb	r3, [r7, #20]
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	68ba      	ldr	r2, [r7, #8]
 8013dea:	4413      	add	r3, r2
 8013dec:	881b      	ldrh	r3, [r3, #0]
 8013dee:	461a      	mov	r2, r3
 8013df0:	7cfb      	ldrb	r3, [r7, #19]
 8013df2:	fa42 f303 	asr.w	r3, r2, r3
 8013df6:	f003 0301 	and.w	r3, r3, #1
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d05a      	beq.n	8013eb4 <CountNbOfEnabledChannels+0xf8>
			{
				if (channels[i + j].Frequency == 0)
 8013dfe:	7d7a      	ldrb	r2, [r7, #21]
 8013e00:	7cfb      	ldrb	r3, [r7, #19]
 8013e02:	4413      	add	r3, r2
 8013e04:	461a      	mov	r2, r3
 8013e06:	4613      	mov	r3, r2
 8013e08:	005b      	lsls	r3, r3, #1
 8013e0a:	4413      	add	r3, r2
 8013e0c:	009b      	lsls	r3, r3, #2
 8013e0e:	461a      	mov	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4413      	add	r3, r2
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d049      	beq.n	8013eae <CountNbOfEnabledChannels+0xf2>
				{ // Check if the channel is enabled
					continue;
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8013e1a:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8013e1e:	7d7a      	ldrb	r2, [r7, #21]
 8013e20:	7cfb      	ldrb	r3, [r7, #19]
 8013e22:	4413      	add	r3, r2
 8013e24:	461a      	mov	r2, r3
 8013e26:	4613      	mov	r3, r2
 8013e28:	005b      	lsls	r3, r3, #1
 8013e2a:	4413      	add	r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	461a      	mov	r2, r3
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	4413      	add	r3, r2
 8013e34:	7a1b      	ldrb	r3, [r3, #8]
 8013e36:	f343 0303 	sbfx	r3, r3, #0, #4
 8013e3a:	b25b      	sxtb	r3, r3
 8013e3c:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 8013e3e:	7d7a      	ldrb	r2, [r7, #21]
 8013e40:	7cfb      	ldrb	r3, [r7, #19]
 8013e42:	4413      	add	r3, r2
 8013e44:	461a      	mov	r2, r3
 8013e46:	4613      	mov	r3, r2
 8013e48:	005b      	lsls	r3, r3, #1
 8013e4a:	4413      	add	r3, r2
 8013e4c:	009b      	lsls	r3, r3, #2
 8013e4e:	461a      	mov	r2, r3
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	4413      	add	r3, r2
 8013e54:	7a1b      	ldrb	r3, [r3, #8]
 8013e56:	f343 1303 	sbfx	r3, r3, #4, #4
 8013e5a:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	f002 fa83 	bl	8016368 <RegionCommonValueInRange>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d024      	beq.n	8013eb2 <CountNbOfEnabledChannels+0xf6>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 8013e68:	7d7a      	ldrb	r2, [r7, #21]
 8013e6a:	7cfb      	ldrb	r3, [r7, #19]
 8013e6c:	4413      	add	r3, r2
 8013e6e:	461a      	mov	r2, r3
 8013e70:	4613      	mov	r3, r2
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	4413      	add	r3, r2
 8013e76:	009b      	lsls	r3, r3, #2
 8013e78:	461a      	mov	r2, r3
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	4413      	add	r3, r2
 8013e7e:	7a5b      	ldrb	r3, [r3, #9]
 8013e80:	015b      	lsls	r3, r3, #5
 8013e82:	683a      	ldr	r2, [r7, #0]
 8013e84:	4413      	add	r3, r2
 8013e86:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8013e8a:	4313      	orrs	r3, r2
 8013e8c:	d003      	beq.n	8013e96 <CountNbOfEnabledChannels+0xda>
				{ // Check if the band is available for transmission
					delayTransmission++;
 8013e8e:	7dbb      	ldrb	r3, [r7, #22]
 8013e90:	3301      	adds	r3, #1
 8013e92:	75bb      	strb	r3, [r7, #22]
					continue;
 8013e94:	e00e      	b.n	8013eb4 <CountNbOfEnabledChannels+0xf8>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 8013e96:	7dfb      	ldrb	r3, [r7, #23]
 8013e98:	1c5a      	adds	r2, r3, #1
 8013e9a:	75fa      	strb	r2, [r7, #23]
 8013e9c:	461a      	mov	r2, r3
 8013e9e:	6a3b      	ldr	r3, [r7, #32]
 8013ea0:	4413      	add	r3, r2
 8013ea2:	7d79      	ldrb	r1, [r7, #21]
 8013ea4:	7cfa      	ldrb	r2, [r7, #19]
 8013ea6:	440a      	add	r2, r1
 8013ea8:	b2d2      	uxtb	r2, r2
 8013eaa:	701a      	strb	r2, [r3, #0]
 8013eac:	e002      	b.n	8013eb4 <CountNbOfEnabledChannels+0xf8>
					continue;
 8013eae:	bf00      	nop
 8013eb0:	e000      	b.n	8013eb4 <CountNbOfEnabledChannels+0xf8>
					continue;
 8013eb2:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 8013eb4:	7cfb      	ldrb	r3, [r7, #19]
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	74fb      	strb	r3, [r7, #19]
 8013eba:	7cfb      	ldrb	r3, [r7, #19]
 8013ebc:	2b0f      	cmp	r3, #15
 8013ebe:	d991      	bls.n	8013de4 <CountNbOfEnabledChannels+0x28>
	for (uint8_t i = 0, k = 0; i < CN470_MAX_NB_CHANNELS; i += 16, k++)
 8013ec0:	7d7b      	ldrb	r3, [r7, #21]
 8013ec2:	3310      	adds	r3, #16
 8013ec4:	757b      	strb	r3, [r7, #21]
 8013ec6:	7d3b      	ldrb	r3, [r7, #20]
 8013ec8:	3301      	adds	r3, #1
 8013eca:	753b      	strb	r3, [r7, #20]
 8013ecc:	7d7b      	ldrb	r3, [r7, #21]
 8013ece:	2b5f      	cmp	r3, #95	@ 0x5f
 8013ed0:	d985      	bls.n	8013dde <CountNbOfEnabledChannels+0x22>
			}
		}
	}

	*delayTx = delayTransmission;
 8013ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed4:	7dba      	ldrb	r2, [r7, #22]
 8013ed6:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 8013ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3718      	adds	r7, #24
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
	...

08013ee4 <RegionCN470GetPhyParam>:

PhyParam_t RegionCN470GetPhyParam(GetPhyParams_t *getPhy)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 8013eec:	2300      	movs	r3, #0
 8013eee:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	2b20      	cmp	r3, #32
 8013ef6:	f200 80b1 	bhi.w	801405c <RegionCN470GetPhyParam+0x178>
 8013efa:	a201      	add	r2, pc, #4	@ (adr r2, 8013f00 <RegionCN470GetPhyParam+0x1c>)
 8013efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f00:	08013f85 	.word	0x08013f85
 8013f04:	08013f8b 	.word	0x08013f8b
 8013f08:	0801405d 	.word	0x0801405d
 8013f0c:	0801405d 	.word	0x0801405d
 8013f10:	0801405d 	.word	0x0801405d
 8013f14:	08013f91 	.word	0x08013f91
 8013f18:	0801405d 	.word	0x0801405d
 8013f1c:	0801405d 	.word	0x0801405d
 8013f20:	08013fab 	.word	0x08013fab
 8013f24:	08013fb1 	.word	0x08013fb1
 8013f28:	08013fc1 	.word	0x08013fc1
 8013f2c:	08013fd1 	.word	0x08013fd1
 8013f30:	08013fd7 	.word	0x08013fd7
 8013f34:	08013fdf 	.word	0x08013fdf
 8013f38:	08013fe7 	.word	0x08013fe7
 8013f3c:	08013fef 	.word	0x08013fef
 8013f40:	08013ff7 	.word	0x08013ff7
 8013f44:	08013fff 	.word	0x08013fff
 8013f48:	08014007 	.word	0x08014007
 8013f4c:	0801401b 	.word	0x0801401b
 8013f50:	08014021 	.word	0x08014021
 8013f54:	08014027 	.word	0x08014027
 8013f58:	0801402d 	.word	0x0801402d
 8013f5c:	08014033 	.word	0x08014033
 8013f60:	08014039 	.word	0x08014039
 8013f64:	0801403f 	.word	0x0801403f
 8013f68:	08014045 	.word	0x08014045
 8013f6c:	08014045 	.word	0x08014045
 8013f70:	0801404b 	.word	0x0801404b
 8013f74:	08014051 	.word	0x08014051
 8013f78:	08014057 	.word	0x08014057
 8013f7c:	08014057 	.word	0x08014057
 8013f80:	08013f97 	.word	0x08013f97
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = CN470_RX_MIN_DATARATE;
 8013f84:	2300      	movs	r3, #0
 8013f86:	60fb      	str	r3, [r7, #12]
		break;
 8013f88:	e069      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = CN470_TX_MIN_DATARATE;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	60fb      	str	r3, [r7, #12]
		break;
 8013f8e:	e066      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = CN470_DEFAULT_DATARATE;
 8013f90:	2300      	movs	r3, #0
 8013f92:	60fb      	str	r3, [r7, #12]
		break;
 8013f94:	e063      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, CN470_TX_MIN_DATARATE);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f9c:	2100      	movs	r1, #0
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7ff feb2 	bl	8013d08 <GetNextLowerTxDr>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	60fb      	str	r3, [r7, #12]
		break;
 8013fa8:	e059      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = CN470_DEFAULT_TX_POWER;
 8013faa:	2300      	movs	r3, #0
 8013fac:	60fb      	str	r3, [r7, #12]
		break;
 8013fae:	e056      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateCN470[getPhy->Datarate];
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013fb6:	461a      	mov	r2, r3
 8013fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8014068 <RegionCN470GetPhyParam+0x184>)
 8013fba:	5c9b      	ldrb	r3, [r3, r2]
 8013fbc:	60fb      	str	r3, [r7, #12]
		break;
 8013fbe:	e04e      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterCN470[getPhy->Datarate];
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	4b28      	ldr	r3, [pc, #160]	@ (801406c <RegionCN470GetPhyParam+0x188>)
 8013fca:	5c9b      	ldrb	r3, [r3, r2]
 8013fcc:	60fb      	str	r3, [r7, #12]
		break;
 8013fce:	e046      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = CN470_DUTY_CYCLE_ENABLED;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	60fb      	str	r3, [r7, #12]
		break;
 8013fd4:	e043      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = CN470_MAX_RX_WINDOW;
 8013fd6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013fda:	60fb      	str	r3, [r7, #12]
		break;
 8013fdc:	e03f      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = CN470_RECEIVE_DELAY1;
 8013fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013fe2:	60fb      	str	r3, [r7, #12]
		break;
 8013fe4:	e03b      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = CN470_RECEIVE_DELAY2;
 8013fe6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8013fea:	60fb      	str	r3, [r7, #12]
		break;
 8013fec:	e037      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = CN470_JOIN_ACCEPT_DELAY1;
 8013fee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013ff2:	60fb      	str	r3, [r7, #12]
		break;
 8013ff4:	e033      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = CN470_JOIN_ACCEPT_DELAY2;
 8013ff6:	f241 7370 	movw	r3, #6000	@ 0x1770
 8013ffa:	60fb      	str	r3, [r7, #12]
		break;
 8013ffc:	e02f      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = CN470_MAX_FCNT_GAP;
 8013ffe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014002:	60fb      	str	r3, [r7, #12]
		break;
 8014004:	e02b      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (CN470_ACKTIMEOUT + randr(-CN470_ACK_TIMEOUT_RND, CN470_ACK_TIMEOUT_RND));
 8014006:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801400a:	4819      	ldr	r0, [pc, #100]	@ (8014070 <RegionCN470GetPhyParam+0x18c>)
 801400c:	f00c fdb2 	bl	8020b74 <randr>
 8014010:	4603      	mov	r3, r0
 8014012:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014016:	60fb      	str	r3, [r7, #12]
		break;
 8014018:	e021      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = CN470_DEFAULT_RX1_DR_OFFSET;
 801401a:	2300      	movs	r3, #0
 801401c:	60fb      	str	r3, [r7, #12]
		break;
 801401e:	e01e      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = CN470_RX_WND_2_FREQ;
 8014020:	4b14      	ldr	r3, [pc, #80]	@ (8014074 <RegionCN470GetPhyParam+0x190>)
 8014022:	60fb      	str	r3, [r7, #12]
		break;
 8014024:	e01b      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = CN470_RX_WND_2_DR;
 8014026:	2300      	movs	r3, #0
 8014028:	60fb      	str	r3, [r7, #12]
		break;
 801402a:	e018      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 801402c:	4b12      	ldr	r3, [pc, #72]	@ (8014078 <RegionCN470GetPhyParam+0x194>)
 801402e:	60fb      	str	r3, [r7, #12]
		break;
 8014030:	e015      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 8014032:	4b12      	ldr	r3, [pc, #72]	@ (801407c <RegionCN470GetPhyParam+0x198>)
 8014034:	60fb      	str	r3, [r7, #12]
		break;
 8014036:	e012      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = CN470_MAX_NB_CHANNELS;
 8014038:	2360      	movs	r3, #96	@ 0x60
 801403a:	60fb      	str	r3, [r7, #12]
		break;
 801403c:	e00f      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 801403e:	4b10      	ldr	r3, [pc, #64]	@ (8014080 <RegionCN470GetPhyParam+0x19c>)
 8014040:	60fb      	str	r3, [r7, #12]
		break;
 8014042:	e00c      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 8014044:	2300      	movs	r3, #0
 8014046:	60fb      	str	r3, [r7, #12]
		break;
 8014048:	e009      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = CN470_DEFAULT_MAX_EIRP;
 801404a:	4b0e      	ldr	r3, [pc, #56]	@ (8014084 <RegionCN470GetPhyParam+0x1a0>)
 801404c:	60fb      	str	r3, [r7, #12]
		break;
 801404e:	e006      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = CN470_DEFAULT_ANTENNA_GAIN;
 8014050:	4b0d      	ldr	r3, [pc, #52]	@ (8014088 <RegionCN470GetPhyParam+0x1a4>)
 8014052:	60fb      	str	r3, [r7, #12]
		break;
 8014054:	e003      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 48;
 8014056:	2330      	movs	r3, #48	@ 0x30
 8014058:	60fb      	str	r3, [r7, #12]
		break;
 801405a:	e000      	b.n	801405e <RegionCN470GetPhyParam+0x17a>
	}
	default:
	{
		break;
 801405c:	bf00      	nop
	}
	}

	return phyParam;
 801405e:	68fb      	ldr	r3, [r7, #12]
}
 8014060:	4618      	mov	r0, r3
 8014062:	3710      	adds	r7, #16
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}
 8014068:	0802526c 	.word	0x0802526c
 801406c:	08025274 	.word	0x08025274
 8014070:	fffffc18 	.word	0xfffffc18
 8014074:	1e1e4420 	.word	0x1e1e4420
 8014078:	20006c9c 	.word	0x20006c9c
 801407c:	20006ca8 	.word	0x20006ca8
 8014080:	200071ac 	.word	0x200071ac
 8014084:	41993333 	.word	0x41993333
 8014088:	4009999a 	.word	0x4009999a

0801408c <RegionCN470SetBandTxDone>:

void RegionCN470SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	7858      	ldrb	r0, [r3, #1]
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	4619      	mov	r1, r3
 801409e:	4a0a      	ldr	r2, [pc, #40]	@ (80140c8 <RegionCN470SetBandTxDone+0x3c>)
 80140a0:	460b      	mov	r3, r1
 80140a2:	005b      	lsls	r3, r3, #1
 80140a4:	440b      	add	r3, r1
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	4413      	add	r3, r2
 80140aa:	3309      	adds	r3, #9
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	015b      	lsls	r3, r3, #5
 80140b0:	4a06      	ldr	r2, [pc, #24]	@ (80140cc <RegionCN470SetBandTxDone+0x40>)
 80140b2:	1899      	adds	r1, r3, r2
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80140ba:	f002 f9fb 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 80140be:	bf00      	nop
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	200071ac 	.word	0x200071ac
 80140cc:	20000110 	.word	0x20000110

080140d0 <RegionCN470InitDefaults>:

void RegionCN470InitDefaults(InitType_t type)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	4603      	mov	r3, r0
 80140d8:	71fb      	strb	r3, [r7, #7]
	switch (type)
 80140da:	79fb      	ldrb	r3, [r7, #7]
 80140dc:	2b02      	cmp	r3, #2
 80140de:	d056      	beq.n	801418e <RegionCN470InitDefaults+0xbe>
 80140e0:	2b02      	cmp	r3, #2
 80140e2:	dc5a      	bgt.n	801419a <RegionCN470InitDefaults+0xca>
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d002      	beq.n	80140ee <RegionCN470InitDefaults+0x1e>
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	d04a      	beq.n	8014182 <RegionCN470InitDefaults+0xb2>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
		break;
	}
	default:
	{
		break;
 80140ec:	e055      	b.n	801419a <RegionCN470InitDefaults+0xca>
		for (uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++)
 80140ee:	2300      	movs	r3, #0
 80140f0:	73fb      	strb	r3, [r7, #15]
 80140f2:	e025      	b.n	8014140 <RegionCN470InitDefaults+0x70>
			Channels[i].Frequency = 470300000 + i * 200000;
 80140f4:	7bfb      	ldrb	r3, [r7, #15]
 80140f6:	4a2b      	ldr	r2, [pc, #172]	@ (80141a4 <RegionCN470InitDefaults+0xd4>)
 80140f8:	fb03 f202 	mul.w	r2, r3, r2
 80140fc:	4b2a      	ldr	r3, [pc, #168]	@ (80141a8 <RegionCN470InitDefaults+0xd8>)
 80140fe:	4413      	add	r3, r2
 8014100:	7bfa      	ldrb	r2, [r7, #15]
 8014102:	4618      	mov	r0, r3
 8014104:	4929      	ldr	r1, [pc, #164]	@ (80141ac <RegionCN470InitDefaults+0xdc>)
 8014106:	4613      	mov	r3, r2
 8014108:	005b      	lsls	r3, r3, #1
 801410a:	4413      	add	r3, r2
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	440b      	add	r3, r1
 8014110:	6018      	str	r0, [r3, #0]
			Channels[i].DrRange.Value = (DR_5 << 4) | DR_0;
 8014112:	7bfa      	ldrb	r2, [r7, #15]
 8014114:	4925      	ldr	r1, [pc, #148]	@ (80141ac <RegionCN470InitDefaults+0xdc>)
 8014116:	4613      	mov	r3, r2
 8014118:	005b      	lsls	r3, r3, #1
 801411a:	4413      	add	r3, r2
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	440b      	add	r3, r1
 8014120:	3308      	adds	r3, #8
 8014122:	2250      	movs	r2, #80	@ 0x50
 8014124:	701a      	strb	r2, [r3, #0]
			Channels[i].Band = 0;
 8014126:	7bfa      	ldrb	r2, [r7, #15]
 8014128:	4920      	ldr	r1, [pc, #128]	@ (80141ac <RegionCN470InitDefaults+0xdc>)
 801412a:	4613      	mov	r3, r2
 801412c:	005b      	lsls	r3, r3, #1
 801412e:	4413      	add	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	440b      	add	r3, r1
 8014134:	3309      	adds	r3, #9
 8014136:	2200      	movs	r2, #0
 8014138:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < CN470_MAX_NB_CHANNELS; i++)
 801413a:	7bfb      	ldrb	r3, [r7, #15]
 801413c:	3301      	adds	r3, #1
 801413e:	73fb      	strb	r3, [r7, #15]
 8014140:	7bfb      	ldrb	r3, [r7, #15]
 8014142:	2b5f      	cmp	r3, #95	@ 0x5f
 8014144:	d9d6      	bls.n	80140f4 <RegionCN470InitDefaults+0x24>
		ChannelsDefaultMask[0] = 0xFFFF;
 8014146:	4b1a      	ldr	r3, [pc, #104]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801414c:	801a      	strh	r2, [r3, #0]
		ChannelsDefaultMask[1] = 0xFFFF;
 801414e:	4b18      	ldr	r3, [pc, #96]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014154:	805a      	strh	r2, [r3, #2]
		ChannelsDefaultMask[2] = 0xFFFF;
 8014156:	4b16      	ldr	r3, [pc, #88]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801415c:	809a      	strh	r2, [r3, #4]
		ChannelsDefaultMask[3] = 0xFFFF;
 801415e:	4b14      	ldr	r3, [pc, #80]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014164:	80da      	strh	r2, [r3, #6]
		ChannelsDefaultMask[4] = 0xFFFF;
 8014166:	4b12      	ldr	r3, [pc, #72]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014168:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801416c:	811a      	strh	r2, [r3, #8]
		ChannelsDefaultMask[5] = 0xFFFF;
 801416e:	4b10      	ldr	r3, [pc, #64]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014170:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014174:	815a      	strh	r2, [r3, #10]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 8014176:	2206      	movs	r2, #6
 8014178:	490d      	ldr	r1, [pc, #52]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 801417a:	480e      	ldr	r0, [pc, #56]	@ (80141b4 <RegionCN470InitDefaults+0xe4>)
 801417c:	f002 f973 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8014180:	e00c      	b.n	801419c <RegionCN470InitDefaults+0xcc>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 8014182:	2206      	movs	r2, #6
 8014184:	490a      	ldr	r1, [pc, #40]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014186:	480b      	ldr	r0, [pc, #44]	@ (80141b4 <RegionCN470InitDefaults+0xe4>)
 8014188:	f002 f96d 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801418c:	e006      	b.n	801419c <RegionCN470InitDefaults+0xcc>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 801418e:	2206      	movs	r2, #6
 8014190:	4907      	ldr	r1, [pc, #28]	@ (80141b0 <RegionCN470InitDefaults+0xe0>)
 8014192:	4808      	ldr	r0, [pc, #32]	@ (80141b4 <RegionCN470InitDefaults+0xe4>)
 8014194:	f002 f967 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8014198:	e000      	b.n	801419c <RegionCN470InitDefaults+0xcc>
		break;
 801419a:	bf00      	nop
	}
	}
}
 801419c:	bf00      	nop
 801419e:	3710      	adds	r7, #16
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}
 80141a4:	00030d40 	.word	0x00030d40
 80141a8:	1c083560 	.word	0x1c083560
 80141ac:	200071ac 	.word	0x200071ac
 80141b0:	20006ca8 	.word	0x20006ca8
 80141b4:	20006c9c 	.word	0x20006c9c

080141b8 <RegionCN470Verify>:

bool RegionCN470Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b082      	sub	sp, #8
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	460b      	mov	r3, r1
 80141c2:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 80141c4:	78fb      	ldrb	r3, [r7, #3]
 80141c6:	3b04      	subs	r3, #4
 80141c8:	2b1a      	cmp	r3, #26
 80141ca:	d86e      	bhi.n	80142aa <RegionCN470Verify+0xf2>
 80141cc:	a201      	add	r2, pc, #4	@ (adr r2, 80141d4 <RegionCN470Verify+0x1c>)
 80141ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141d2:	bf00      	nop
 80141d4:	08014241 	.word	0x08014241
 80141d8:	08014241 	.word	0x08014241
 80141dc:	0801425f 	.word	0x0801425f
 80141e0:	0801427d 	.word	0x0801427d
 80141e4:	0801427d 	.word	0x0801427d
 80141e8:	080142ab 	.word	0x080142ab
 80141ec:	080142ab 	.word	0x080142ab
 80141f0:	0801429b 	.word	0x0801429b
 80141f4:	080142ab 	.word	0x080142ab
 80141f8:	080142ab 	.word	0x080142ab
 80141fc:	080142ab 	.word	0x080142ab
 8014200:	080142ab 	.word	0x080142ab
 8014204:	080142ab 	.word	0x080142ab
 8014208:	080142ab 	.word	0x080142ab
 801420c:	080142ab 	.word	0x080142ab
 8014210:	080142ab 	.word	0x080142ab
 8014214:	080142ab 	.word	0x080142ab
 8014218:	080142ab 	.word	0x080142ab
 801421c:	080142ab 	.word	0x080142ab
 8014220:	080142ab 	.word	0x080142ab
 8014224:	080142ab 	.word	0x080142ab
 8014228:	080142ab 	.word	0x080142ab
 801422c:	080142ab 	.word	0x080142ab
 8014230:	080142ab 	.word	0x080142ab
 8014234:	080142ab 	.word	0x080142ab
 8014238:	080142ab 	.word	0x080142ab
 801423c:	0801429f 	.word	0x0801429f
	{
	case PHY_TX_DR:
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, CN470_TX_MIN_DATARATE, CN470_TX_MAX_DATARATE);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f993 3000 	ldrsb.w	r3, [r3]
 8014246:	2205      	movs	r2, #5
 8014248:	2100      	movs	r1, #0
 801424a:	4618      	mov	r0, r3
 801424c:	f002 f88c 	bl	8016368 <RegionCommonValueInRange>
 8014250:	4603      	mov	r3, r0
 8014252:	2b00      	cmp	r3, #0
 8014254:	bf14      	ite	ne
 8014256:	2301      	movne	r3, #1
 8014258:	2300      	moveq	r3, #0
 801425a:	b2db      	uxtb	r3, r3
 801425c:	e029      	b.n	80142b2 <RegionCN470Verify+0xfa>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f993 3000 	ldrsb.w	r3, [r3]
 8014264:	2205      	movs	r2, #5
 8014266:	2100      	movs	r1, #0
 8014268:	4618      	mov	r0, r3
 801426a:	f002 f87d 	bl	8016368 <RegionCommonValueInRange>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	bf14      	ite	ne
 8014274:	2301      	movne	r3, #1
 8014276:	2300      	moveq	r3, #0
 8014278:	b2db      	uxtb	r3, r3
 801427a:	e01a      	b.n	80142b2 <RegionCN470Verify+0xfa>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, CN470_MAX_TX_POWER, CN470_MIN_TX_POWER);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f993 3000 	ldrsb.w	r3, [r3]
 8014282:	2207      	movs	r2, #7
 8014284:	2100      	movs	r1, #0
 8014286:	4618      	mov	r0, r3
 8014288:	f002 f86e 	bl	8016368 <RegionCommonValueInRange>
 801428c:	4603      	mov	r3, r0
 801428e:	2b00      	cmp	r3, #0
 8014290:	bf14      	ite	ne
 8014292:	2301      	movne	r3, #1
 8014294:	2300      	moveq	r3, #0
 8014296:	b2db      	uxtb	r3, r3
 8014298:	e00b      	b.n	80142b2 <RegionCN470Verify+0xfa>
	}
	case PHY_DUTY_CYCLE:
	{
		return CN470_DUTY_CYCLE_ENABLED;
 801429a:	2300      	movs	r3, #0
 801429c:	e009      	b.n	80142b2 <RegionCN470Verify+0xfa>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 48)
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80142a4:	d803      	bhi.n	80142ae <RegionCN470Verify+0xf6>
		{
			return false;
 80142a6:	2300      	movs	r3, #0
 80142a8:	e003      	b.n	80142b2 <RegionCN470Verify+0xfa>
		}
		break;
	}
	default:
		return false;
 80142aa:	2300      	movs	r3, #0
 80142ac:	e001      	b.n	80142b2 <RegionCN470Verify+0xfa>
		break;
 80142ae:	bf00      	nop
	}
	return true;
 80142b0:	2301      	movs	r3, #1
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3708      	adds	r7, #8
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop

080142bc <RegionCN470ApplyCFList>:

void RegionCN470ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 80142bc:	b480      	push	{r7}
 80142be:	b083      	sub	sp, #12
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
	return;
 80142c4:	bf00      	nop
}
 80142c6:	370c      	adds	r7, #12
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <RegionCN470ChanMaskSet>:

bool RegionCN470ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	791b      	ldrb	r3, [r3, #4]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d002      	beq.n	80142e6 <RegionCN470ChanMaskSet+0x16>
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d008      	beq.n	80142f6 <RegionCN470ChanMaskSet+0x26>
 80142e4:	e00f      	b.n	8014306 <RegionCN470ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 6);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	2206      	movs	r2, #6
 80142ec:	4619      	mov	r1, r3
 80142ee:	4809      	ldr	r0, [pc, #36]	@ (8014314 <RegionCN470ChanMaskSet+0x44>)
 80142f0:	f002 f8b9 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 80142f4:	e009      	b.n	801430a <RegionCN470ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	2206      	movs	r2, #6
 80142fc:	4619      	mov	r1, r3
 80142fe:	4806      	ldr	r0, [pc, #24]	@ (8014318 <RegionCN470ChanMaskSet+0x48>)
 8014300:	f002 f8b1 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8014304:	e001      	b.n	801430a <RegionCN470ChanMaskSet+0x3a>
	}
	default:
		return false;
 8014306:	2300      	movs	r3, #0
 8014308:	e000      	b.n	801430c <RegionCN470ChanMaskSet+0x3c>
	}
	return true;
 801430a:	2301      	movs	r3, #1
}
 801430c:	4618      	mov	r0, r3
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}
 8014314:	20006c9c 	.word	0x20006c9c
 8014318:	20006ca8 	.word	0x20006ca8

0801431c <RegionCN470AdrNext>:

bool RegionCN470AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b088      	sub	sp, #32
 8014320:	af00      	add	r7, sp, #0
 8014322:	60f8      	str	r0, [r7, #12]
 8014324:	60b9      	str	r1, [r7, #8]
 8014326:	607a      	str	r2, [r7, #4]
 8014328:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 801432a:	2300      	movs	r3, #0
 801432c:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	7a1b      	ldrb	r3, [r3, #8]
 8014332:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	7a5b      	ldrb	r3, [r3, #9]
 8014338:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	685a      	ldr	r2, [r3, #4]
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	785b      	ldrb	r3, [r3, #1]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d050      	beq.n	80143ec <RegionCN470AdrNext+0xd0>
	{
		if (datarate == CN470_TX_MIN_DATARATE)
 801434a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d105      	bne.n	801435e <RegionCN470AdrNext+0x42>
		{
			*adrAckCounter = 0;
 8014352:	683b      	ldr	r3, [r7, #0]
 8014354:	2200      	movs	r2, #0
 8014356:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 8014358:	2300      	movs	r3, #0
 801435a:	77fb      	strb	r3, [r7, #31]
 801435c:	e046      	b.n	80143ec <RegionCN470AdrNext+0xd0>
		}
		else
		{
			if (adrNext->AdrAckCounter >= CN470_ADR_ACK_LIMIT)
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	2b3f      	cmp	r3, #63	@ 0x3f
 8014364:	d904      	bls.n	8014370 <RegionCN470AdrNext+0x54>
			{
				adrAckReq = true;
 8014366:	2301      	movs	r3, #1
 8014368:	77fb      	strb	r3, [r7, #31]
				txPower = CN470_MAX_TX_POWER;
 801436a:	2300      	movs	r3, #0
 801436c:	777b      	strb	r3, [r7, #29]
 801436e:	e001      	b.n	8014374 <RegionCN470AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 8014370:	2300      	movs	r3, #0
 8014372:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (CN470_ADR_ACK_LIMIT + CN470_ADR_ACK_DELAY))
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	685b      	ldr	r3, [r3, #4]
 8014378:	2b5f      	cmp	r3, #95	@ 0x5f
 801437a:	d937      	bls.n	80143ec <RegionCN470AdrNext+0xd0>
			{
				if ((adrNext->AdrAckCounter % CN470_ADR_ACK_DELAY) == 1)
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	f003 031f 	and.w	r3, r3, #31
 8014384:	2b01      	cmp	r3, #1
 8014386:	d131      	bne.n	80143ec <RegionCN470AdrNext+0xd0>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014388:	2320      	movs	r3, #32
 801438a:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 801438c:	7fbb      	ldrb	r3, [r7, #30]
 801438e:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	7a9b      	ldrb	r3, [r3, #10]
 8014394:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionCN470GetPhyParam(&getPhy);
 8014396:	f107 0318 	add.w	r3, r7, #24
 801439a:	4618      	mov	r0, r3
 801439c:	f7ff fda2 	bl	8013ee4 <RegionCN470GetPhyParam>
 80143a0:	4603      	mov	r3, r0
 80143a2:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	77bb      	strb	r3, [r7, #30]

					if (datarate == CN470_TX_MIN_DATARATE)
 80143a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d11d      	bne.n	80143ec <RegionCN470AdrNext+0xd0>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 80143b0:	2300      	movs	r3, #0
 80143b2:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d017      	beq.n	80143ec <RegionCN470AdrNext+0xd0>
						{
							// Re-enable default channels
							ChannelsMask[0] = 0xFFFF;
 80143bc:	4b11      	ldr	r3, [pc, #68]	@ (8014404 <RegionCN470AdrNext+0xe8>)
 80143be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143c2:	801a      	strh	r2, [r3, #0]
							ChannelsMask[1] = 0xFFFF;
 80143c4:	4b0f      	ldr	r3, [pc, #60]	@ (8014404 <RegionCN470AdrNext+0xe8>)
 80143c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143ca:	805a      	strh	r2, [r3, #2]
							ChannelsMask[2] = 0xFFFF;
 80143cc:	4b0d      	ldr	r3, [pc, #52]	@ (8014404 <RegionCN470AdrNext+0xe8>)
 80143ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143d2:	809a      	strh	r2, [r3, #4]
							ChannelsMask[3] = 0xFFFF;
 80143d4:	4b0b      	ldr	r3, [pc, #44]	@ (8014404 <RegionCN470AdrNext+0xe8>)
 80143d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143da:	80da      	strh	r2, [r3, #6]
							ChannelsMask[4] = 0xFFFF;
 80143dc:	4b09      	ldr	r3, [pc, #36]	@ (8014404 <RegionCN470AdrNext+0xe8>)
 80143de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143e2:	811a      	strh	r2, [r3, #8]
							ChannelsMask[5] = 0xFFFF;
 80143e4:	4b07      	ldr	r3, [pc, #28]	@ (8014404 <RegionCN470AdrNext+0xe8>)
 80143e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80143ea:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}

	*drOut = datarate;
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	7fba      	ldrb	r2, [r7, #30]
 80143f0:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	7f7a      	ldrb	r2, [r7, #29]
 80143f6:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 80143f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3720      	adds	r7, #32
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop
 8014404:	20006c9c 	.word	0x20006c9c

08014408 <RegionCN470ComputeRxWindowParameters>:

void RegionCN470ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b088      	sub	sp, #32
 801440c:	af02      	add	r7, sp, #8
 801440e:	60ba      	str	r2, [r7, #8]
 8014410:	607b      	str	r3, [r7, #4]
 8014412:	4603      	mov	r3, r0
 8014414:	73fb      	strb	r3, [r7, #15]
 8014416:	460b      	mov	r3, r1
 8014418:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 801441a:	f04f 0200 	mov.w	r2, #0
 801441e:	f04f 0300 	mov.w	r3, #0
 8014422:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, CN470_RX_MAX_DATARATE);
 8014426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801442a:	2b05      	cmp	r3, #5
 801442c:	bfa8      	it	ge
 801442e:	2305      	movge	r3, #5
 8014430:	b25a      	sxtb	r2, r3
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801443c:	4618      	mov	r0, r3
 801443e:	f7ff fc81 	bl	8013d44 <GetBandwidth>
 8014442:	4603      	mov	r3, r0
 8014444:	b2da      	uxtb	r2, r3
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	709a      	strb	r2, [r3, #2]

	tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesCN470[rxConfigParams->Datarate], BandwidthsCN470[rxConfigParams->Datarate]);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014450:	461a      	mov	r2, r3
 8014452:	4b10      	ldr	r3, [pc, #64]	@ (8014494 <RegionCN470ComputeRxWindowParameters+0x8c>)
 8014454:	5c9a      	ldrb	r2, [r3, r2]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801445c:	4619      	mov	r1, r3
 801445e:	4b0e      	ldr	r3, [pc, #56]	@ (8014498 <RegionCN470ComputeRxWindowParameters+0x90>)
 8014460:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014464:	4619      	mov	r1, r3
 8014466:	4610      	mov	r0, r2
 8014468:	f002 fa5c 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 801446c:	ed87 0b04 	vstr	d0, [r7, #16]

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f103 0208 	add.w	r2, r3, #8
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	330c      	adds	r3, #12
 801447a:	7bb8      	ldrb	r0, [r7, #14]
 801447c:	9300      	str	r3, [sp, #0]
 801447e:	4613      	mov	r3, r2
 8014480:	2203      	movs	r2, #3
 8014482:	68b9      	ldr	r1, [r7, #8]
 8014484:	ed97 0b04 	vldr	d0, [r7, #16]
 8014488:	f002 fa98 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 801448c:	bf00      	nop
 801448e:	3718      	adds	r7, #24
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}
 8014494:	0802524c 	.word	0x0802524c
 8014498:	08025254 	.word	0x08025254

0801449c <RegionCN470RxConfig>:

bool RegionCN470RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 801449c:	b590      	push	{r4, r7, lr}
 801449e:	b091      	sub	sp, #68	@ 0x44
 80144a0:	af0a      	add	r7, sp, #40	@ 0x28
 80144a2:	6078      	str	r0, [r7, #4]
 80144a4:	6039      	str	r1, [r7, #0]
	int8_t dr = rxConfig->Datarate;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	785b      	ldrb	r3, [r3, #1]
 80144aa:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 80144ac:	2300      	movs	r3, #0
 80144ae:	75fb      	strb	r3, [r7, #23]
	int8_t phyDr = 0;
 80144b0:	2300      	movs	r3, #0
 80144b2:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 80144ba:	4b34      	ldr	r3, [pc, #208]	@ (801458c <RegionCN470RxConfig+0xf0>)
 80144bc:	689b      	ldr	r3, [r3, #8]
 80144be:	4798      	blx	r3
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d001      	beq.n	80144ca <RegionCN470RxConfig+0x2e>
	{
		return false;
 80144c6:	2300      	movs	r3, #0
 80144c8:	e05c      	b.n	8014584 <RegionCN470RxConfig+0xe8>
	}

	if (rxConfig->Window == 0)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	7cdb      	ldrb	r3, [r3, #19]
 80144ce:	f083 0301 	eor.w	r3, r3, #1
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d012      	beq.n	80144fe <RegionCN470RxConfig+0x62>
	{
		// Apply window 1 frequency
		frequency = CN470_FIRST_RX1_CHANNEL + (rxConfig->Channel % 48) * CN470_STEPWIDTH_RX1_CHANNEL;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	781a      	ldrb	r2, [r3, #0]
 80144dc:	4b2c      	ldr	r3, [pc, #176]	@ (8014590 <RegionCN470RxConfig+0xf4>)
 80144de:	fba3 1302 	umull	r1, r3, r3, r2
 80144e2:	0959      	lsrs	r1, r3, #5
 80144e4:	460b      	mov	r3, r1
 80144e6:	005b      	lsls	r3, r3, #1
 80144e8:	440b      	add	r3, r1
 80144ea:	011b      	lsls	r3, r3, #4
 80144ec:	1ad3      	subs	r3, r2, r3
 80144ee:	b2db      	uxtb	r3, r3
 80144f0:	461a      	mov	r2, r3
 80144f2:	4b28      	ldr	r3, [pc, #160]	@ (8014594 <RegionCN470RxConfig+0xf8>)
 80144f4:	fb03 f202 	mul.w	r2, r3, r2
 80144f8:	4b27      	ldr	r3, [pc, #156]	@ (8014598 <RegionCN470RxConfig+0xfc>)
 80144fa:	4413      	add	r3, r2
 80144fc:	613b      	str	r3, [r7, #16]
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesCN470[dr];
 80144fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014502:	4a26      	ldr	r2, [pc, #152]	@ (801459c <RegionCN470RxConfig+0x100>)
 8014504:	5cd3      	ldrb	r3, [r2, r3]
 8014506:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 8014508:	4b20      	ldr	r3, [pc, #128]	@ (801458c <RegionCN470RxConfig+0xf0>)
 801450a:	691b      	ldr	r3, [r3, #16]
 801450c:	6938      	ldr	r0, [r7, #16]
 801450e:	4798      	blx	r3

	// Radio configuration
	// Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
	// RAKwireless symbTimeout changed after tests done by RAKwireless
	Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 8014510:	4b1e      	ldr	r3, [pc, #120]	@ (801458c <RegionCN470RxConfig+0xf0>)
 8014512:	69dc      	ldr	r4, [r3, #28]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	789b      	ldrb	r3, [r3, #2]
 8014518:	4619      	mov	r1, r3
 801451a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	7c9b      	ldrb	r3, [r3, #18]
 8014522:	9309      	str	r3, [sp, #36]	@ 0x24
 8014524:	2301      	movs	r3, #1
 8014526:	9308      	str	r3, [sp, #32]
 8014528:	2300      	movs	r3, #0
 801452a:	9307      	str	r3, [sp, #28]
 801452c:	2300      	movs	r3, #0
 801452e:	9306      	str	r3, [sp, #24]
 8014530:	2300      	movs	r3, #0
 8014532:	9305      	str	r3, [sp, #20]
 8014534:	2300      	movs	r3, #0
 8014536:	9304      	str	r3, [sp, #16]
 8014538:	2300      	movs	r3, #0
 801453a:	9303      	str	r3, [sp, #12]
 801453c:	2300      	movs	r3, #0
 801453e:	9302      	str	r3, [sp, #8]
 8014540:	2308      	movs	r3, #8
 8014542:	9301      	str	r3, [sp, #4]
 8014544:	2300      	movs	r3, #0
 8014546:	9300      	str	r3, [sp, #0]
 8014548:	2301      	movs	r3, #1
 801454a:	2001      	movs	r0, #1
 801454c:	47a0      	blx	r4

	if (rxConfig->RepeaterSupport == true)
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	7c5b      	ldrb	r3, [r3, #17]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d005      	beq.n	8014562 <RegionCN470RxConfig+0xc6>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterCN470[dr];
 8014556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801455a:	4a11      	ldr	r2, [pc, #68]	@ (80145a0 <RegionCN470RxConfig+0x104>)
 801455c:	5cd3      	ldrb	r3, [r2, r3]
 801455e:	75fb      	strb	r3, [r7, #23]
 8014560:	e004      	b.n	801456c <RegionCN470RxConfig+0xd0>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateCN470[dr];
 8014562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014566:	4a0f      	ldr	r2, [pc, #60]	@ (80145a4 <RegionCN470RxConfig+0x108>)
 8014568:	5cd3      	ldrb	r3, [r2, r3]
 801456a:	75fb      	strb	r3, [r7, #23]
	}
	Radio.SetMaxPayloadLength(MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 801456c:	4b07      	ldr	r3, [pc, #28]	@ (801458c <RegionCN470RxConfig+0xf0>)
 801456e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014570:	7dfa      	ldrb	r2, [r7, #23]
 8014572:	320d      	adds	r2, #13
 8014574:	b2d2      	uxtb	r2, r2
 8014576:	4611      	mov	r1, r2
 8014578:	2001      	movs	r0, #1
 801457a:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	7bfa      	ldrb	r2, [r7, #15]
 8014580:	701a      	strb	r2, [r3, #0]
	return true;
 8014582:	2301      	movs	r3, #1
}
 8014584:	4618      	mov	r0, r3
 8014586:	371c      	adds	r7, #28
 8014588:	46bd      	mov	sp, r7
 801458a:	bd90      	pop	{r4, r7, pc}
 801458c:	08025450 	.word	0x08025450
 8014590:	aaaaaaab 	.word	0xaaaaaaab
 8014594:	00030d40 	.word	0x00030d40
 8014598:	1dd1f8e0 	.word	0x1dd1f8e0
 801459c:	0802524c 	.word	0x0802524c
 80145a0:	08025274 	.word	0x08025274
 80145a4:	0802526c 	.word	0x0802526c

080145a8 <RegionCN470TxConfig>:

bool RegionCN470TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 80145a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145aa:	b091      	sub	sp, #68	@ 0x44
 80145ac:	af0a      	add	r7, sp, #40	@ 0x28
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
	int8_t phyDr = DataratesCN470[txConfig->Datarate];
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80145ba:	461a      	mov	r2, r3
 80145bc:	4b3d      	ldr	r3, [pc, #244]	@ (80146b4 <RegionCN470TxConfig+0x10c>)
 80145be:	5c9b      	ldrb	r3, [r3, r2]
 80145c0:	75fb      	strb	r3, [r7, #23]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	781b      	ldrb	r3, [r3, #0]
 80145cc:	4619      	mov	r1, r3
 80145ce:	4a3a      	ldr	r2, [pc, #232]	@ (80146b8 <RegionCN470TxConfig+0x110>)
 80145d0:	460b      	mov	r3, r1
 80145d2:	005b      	lsls	r3, r3, #1
 80145d4:	440b      	add	r3, r1
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	4413      	add	r3, r2
 80145da:	3309      	adds	r3, #9
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	4a37      	ldr	r2, [pc, #220]	@ (80146bc <RegionCN470TxConfig+0x114>)
 80145e0:	015b      	lsls	r3, r3, #5
 80145e2:	4413      	add	r3, r2
 80145e4:	3302      	adds	r3, #2
 80145e6:	f993 1000 	ldrsb.w	r1, [r3]
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80145f0:	4b33      	ldr	r3, [pc, #204]	@ (80146c0 <RegionCN470TxConfig+0x118>)
 80145f2:	f7ff fbc7 	bl	8013d84 <LimitTxPower>
 80145f6:	4603      	mov	r3, r0
 80145f8:	75bb      	strb	r3, [r7, #22]
	int8_t phyTxPower = 0;
 80145fa:	2300      	movs	r3, #0
 80145fc:	757b      	strb	r3, [r7, #21]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	edd3 7a01 	vldr	s15, [r3, #4]
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	ed93 7a02 	vldr	s14, [r3, #8]
 801460a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801460e:	eef0 0a47 	vmov.f32	s1, s14
 8014612:	eeb0 0a67 	vmov.f32	s0, s15
 8014616:	4618      	mov	r0, r3
 8014618:	f002 fa5c 	bl	8016ad4 <RegionCommonComputeTxPower>
 801461c:	4603      	mov	r3, r0
 801461e:	757b      	strb	r3, [r7, #21]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 8014620:	4b28      	ldr	r3, [pc, #160]	@ (80146c4 <RegionCN470TxConfig+0x11c>)
 8014622:	691a      	ldr	r2, [r3, #16]
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	4618      	mov	r0, r3
 801462a:	4923      	ldr	r1, [pc, #140]	@ (80146b8 <RegionCN470TxConfig+0x110>)
 801462c:	4603      	mov	r3, r0
 801462e:	005b      	lsls	r3, r3, #1
 8014630:	4403      	add	r3, r0
 8014632:	009b      	lsls	r3, r3, #2
 8014634:	440b      	add	r3, r1
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4618      	mov	r0, r3
 801463a:	4790      	blx	r2

	Radio.SetTxConfig(MODEM_LORA, phyTxPower, 0, 0, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 801463c:	4b21      	ldr	r3, [pc, #132]	@ (80146c4 <RegionCN470TxConfig+0x11c>)
 801463e:	6a1e      	ldr	r6, [r3, #32]
 8014640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014644:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8014648:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801464c:	9208      	str	r2, [sp, #32]
 801464e:	2200      	movs	r2, #0
 8014650:	9207      	str	r2, [sp, #28]
 8014652:	2200      	movs	r2, #0
 8014654:	9206      	str	r2, [sp, #24]
 8014656:	2200      	movs	r2, #0
 8014658:	9205      	str	r2, [sp, #20]
 801465a:	2201      	movs	r2, #1
 801465c:	9204      	str	r2, [sp, #16]
 801465e:	2200      	movs	r2, #0
 8014660:	9203      	str	r2, [sp, #12]
 8014662:	2208      	movs	r2, #8
 8014664:	9202      	str	r2, [sp, #8]
 8014666:	2201      	movs	r2, #1
 8014668:	9201      	str	r2, [sp, #4]
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	2300      	movs	r3, #0
 801466e:	2200      	movs	r2, #0
 8014670:	2001      	movs	r0, #1
 8014672:	47b0      	blx	r6
	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(MODEM_LORA, txConfig->PktLen);
 8014674:	4b13      	ldr	r3, [pc, #76]	@ (80146c4 <RegionCN470TxConfig+0x11c>)
 8014676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014678:	68fa      	ldr	r2, [r7, #12]
 801467a:	8992      	ldrh	r2, [r2, #12]
 801467c:	b2d2      	uxtb	r2, r2
 801467e:	4611      	mov	r1, r2
 8014680:	2001      	movs	r0, #1
 8014682:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(MODEM_LORA, txConfig->PktLen);
 8014684:	4b0f      	ldr	r3, [pc, #60]	@ (80146c4 <RegionCN470TxConfig+0x11c>)
 8014686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014688:	68fa      	ldr	r2, [r7, #12]
 801468a:	8992      	ldrh	r2, [r2, #12]
 801468c:	b2d2      	uxtb	r2, r2
 801468e:	4611      	mov	r1, r2
 8014690:	2001      	movs	r0, #1
 8014692:	4798      	blx	r3
 8014694:	4603      	mov	r3, r0
 8014696:	2200      	movs	r2, #0
 8014698:	461c      	mov	r4, r3
 801469a:	4615      	mov	r5, r2
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	e9c3 4500 	strd	r4, r5, [r3]
	*txPower = txPowerLimited;
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	7dba      	ldrb	r2, [r7, #22]
 80146a6:	701a      	strb	r2, [r3, #0]

	return true;
 80146a8:	2301      	movs	r3, #1
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	371c      	adds	r7, #28
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146b2:	bf00      	nop
 80146b4:	0802524c 	.word	0x0802524c
 80146b8:	200071ac 	.word	0x200071ac
 80146bc:	20000110 	.word	0x20000110
 80146c0:	20006c9c 	.word	0x20006c9c
 80146c4:	08025450 	.word	0x08025450

080146c8 <RegionCN470LinkAdrReq>:

uint8_t RegionCN470LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 80146c8:	b590      	push	{r4, r7, lr}
 80146ca:	b095      	sub	sp, #84	@ 0x54
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	60b9      	str	r1, [r7, #8]
 80146d2:	607a      	str	r2, [r7, #4]
 80146d4:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 80146d6:	2307      	movs	r3, #7
 80146d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	uint8_t bytesProcessed = 0;
 80146e2:	2300      	movs	r3, #0
 80146e4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint16_t channelsMask[6] = {0, 0, 0, 0, 0, 0};
 80146e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80146ec:	2200      	movs	r2, #0
 80146ee:	601a      	str	r2, [r3, #0]
 80146f0:	605a      	str	r2, [r3, #4]
 80146f2:	609a      	str	r2, [r3, #8]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	// Initialize local copy of channels mask
	RegionCommonChanMaskCopy(channelsMask, ChannelsMask, 6);
 80146f4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80146f8:	2206      	movs	r2, #6
 80146fa:	4978      	ldr	r1, [pc, #480]	@ (80148dc <RegionCN470LinkAdrReq+0x214>)
 80146fc:	4618      	mov	r0, r3
 80146fe:	f001 feb2 	bl	8016466 <RegionCommonChanMaskCopy>

	while (bytesProcessed < linkAdrReq->PayloadSize)
 8014702:	e075      	b.n	80147f0 <RegionCN470LinkAdrReq+0x128>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681a      	ldr	r2, [r3, #0]
 8014708:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801470c:	4413      	add	r3, r2
 801470e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8014712:	4611      	mov	r1, r2
 8014714:	4618      	mov	r0, r3
 8014716:	f002 f82d 	bl	8016774 <RegionCommonParseLinkAdrReq>
 801471a:	4603      	mov	r3, r0
 801471c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

		if (nextIndex == 0)
 8014720:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8014724:	2b00      	cmp	r3, #0
 8014726:	d06a      	beq.n	80147fe <RegionCN470LinkAdrReq+0x136>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 8014728:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 801472c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8014730:	4413      	add	r3, r2
 8014732:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 8014736:	2307      	movs	r3, #7
 8014738:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if (linkAdrParams.ChMaskCtrl == 6)
 801473c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014740:	2b06      	cmp	r3, #6
 8014742:	d114      	bne.n	801476e <RegionCN470LinkAdrReq+0xa6>
		{
			// Enable all 125 kHz channels
			channelsMask[0] = 0xFFFF;
 8014744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014748:	873b      	strh	r3, [r7, #56]	@ 0x38
			channelsMask[1] = 0xFFFF;
 801474a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801474e:	877b      	strh	r3, [r7, #58]	@ 0x3a
			channelsMask[2] = 0xFFFF;
 8014750:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014754:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			channelsMask[3] = 0xFFFF;
 8014756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801475a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			channelsMask[4] = 0xFFFF;
 801475c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014760:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			channelsMask[5] = 0xFFFF;
 8014764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014768:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801476c:	e040      	b.n	80147f0 <RegionCN470LinkAdrReq+0x128>
		}
		else if (linkAdrParams.ChMaskCtrl == 7)
 801476e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014772:	2b07      	cmp	r3, #7
 8014774:	d106      	bne.n	8014784 <RegionCN470LinkAdrReq+0xbc>
		{
			status &= 0xFE; // Channel mask KO
 8014776:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801477a:	f023 0301 	bic.w	r3, r3, #1
 801477e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8014782:	e035      	b.n	80147f0 <RegionCN470LinkAdrReq+0x128>
		}
		else
		{
			for (uint8_t i = 0; i < 16; i++)
 8014784:	2300      	movs	r3, #0
 8014786:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 801478a:	e024      	b.n	80147d6 <RegionCN470LinkAdrReq+0x10e>
			{
				if (((linkAdrParams.ChMask & (1 << i)) != 0) &&
 801478c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014790:	461a      	mov	r2, r3
 8014792:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8014796:	fa42 f303 	asr.w	r3, r2, r3
 801479a:	f003 0301 	and.w	r3, r3, #1
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d014      	beq.n	80147cc <RegionCN470LinkAdrReq+0x104>
					(Channels[linkAdrParams.ChMaskCtrl * 16 + i].Frequency == 0))
 80147a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80147a6:	011a      	lsls	r2, r3, #4
 80147a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80147ac:	441a      	add	r2, r3
 80147ae:	494c      	ldr	r1, [pc, #304]	@ (80148e0 <RegionCN470LinkAdrReq+0x218>)
 80147b0:	4613      	mov	r3, r2
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	4413      	add	r3, r2
 80147b6:	009b      	lsls	r3, r3, #2
 80147b8:	440b      	add	r3, r1
 80147ba:	681b      	ldr	r3, [r3, #0]
				if (((linkAdrParams.ChMask & (1 << i)) != 0) &&
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d105      	bne.n	80147cc <RegionCN470LinkAdrReq+0x104>
				{					// Trying to enable an undefined channel
					status &= 0xFE; // Channel mask KO
 80147c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80147c4:	f023 0301 	bic.w	r3, r3, #1
 80147c8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			for (uint8_t i = 0; i < 16; i++)
 80147cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80147d0:	3301      	adds	r3, #1
 80147d2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80147d6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80147da:	2b0f      	cmp	r3, #15
 80147dc:	d9d6      	bls.n	801478c <RegionCN470LinkAdrReq+0xc4>
				}
			}
			channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80147de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80147e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80147e6:	005b      	lsls	r3, r3, #1
 80147e8:	3350      	adds	r3, #80	@ 0x50
 80147ea:	443b      	add	r3, r7
 80147ec:	f823 2c18 	strh.w	r2, [r3, #-24]
	while (bytesProcessed < linkAdrReq->PayloadSize)
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	791b      	ldrb	r3, [r3, #4]
 80147f4:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d383      	bcc.n	8014704 <RegionCN470LinkAdrReq+0x3c>
 80147fc:	e000      	b.n	8014800 <RegionCN470LinkAdrReq+0x138>
			break; // break loop, since no more request has been found
 80147fe:	bf00      	nop
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 8014800:	2301      	movs	r3, #1
 8014802:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	795b      	ldrb	r3, [r3, #5]
 801480a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionCN470GetPhyParam(&getPhy);
 801480e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8014812:	4618      	mov	r0, r3
 8014814:	f7ff fb66 	bl	8013ee4 <RegionCN470GetPhyParam>
 8014818:	4603      	mov	r3, r0
 801481a:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 801481c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014820:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	799b      	ldrb	r3, [r3, #6]
 8014826:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014828:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 801482c:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801482e:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8014832:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014834:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8014838:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8014840:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014848:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	7a5b      	ldrb	r3, [r3, #9]
 801484e:	b25b      	sxtb	r3, r3
 8014850:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = CN470_MAX_NB_CHANNELS;
 8014852:	2360      	movs	r3, #96	@ 0x60
 8014854:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = channelsMask;
 8014856:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801485a:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 801485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801485e:	b25b      	sxtb	r3, r3
 8014860:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = CN470_TX_MAX_DATARATE;
 8014864:	2305      	movs	r3, #5
 8014866:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 801486a:	4b1d      	ldr	r3, [pc, #116]	@ (80148e0 <RegionCN470LinkAdrReq+0x218>)
 801486c:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = CN470_MIN_TX_POWER;
 801486e:	2307      	movs	r3, #7
 8014870:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = CN470_MAX_TX_POWER;
 8014874:	2300      	movs	r3, #0
 8014876:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 801487a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 801487e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014882:	1c9a      	adds	r2, r3, #2
 8014884:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014888:	1c59      	adds	r1, r3, #1
 801488a:	f107 0014 	add.w	r0, r7, #20
 801488e:	4623      	mov	r3, r4
 8014890:	f001 ffc2 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 8014894:	4603      	mov	r3, r0
 8014896:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Update channelsMask if everything is correct
	if (status == 0x07)
 801489a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801489e:	2b07      	cmp	r3, #7
 80148a0:	d106      	bne.n	80148b0 <RegionCN470LinkAdrReq+0x1e8>
	{
		// Copy Mask
		RegionCommonChanMaskCopy(ChannelsMask, channelsMask, 6);
 80148a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80148a6:	2206      	movs	r2, #6
 80148a8:	4619      	mov	r1, r3
 80148aa:	480c      	ldr	r0, [pc, #48]	@ (80148dc <RegionCN470LinkAdrReq+0x214>)
 80148ac:	f001 fddb 	bl	8016466 <RegionCommonChanMaskCopy>
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 80148b0:	f997 2045 	ldrsb.w	r2, [r7, #69]	@ 0x45
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 80148b8:	f997 2046 	ldrsb.w	r2, [r7, #70]	@ 0x46
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 80148c0:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80148c4:	683b      	ldr	r3, [r7, #0]
 80148c6:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 80148c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148ca:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80148ce:	701a      	strb	r2, [r3, #0]

	return status;
 80148d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80148d4:	4618      	mov	r0, r3
 80148d6:	3754      	adds	r7, #84	@ 0x54
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd90      	pop	{r4, r7, pc}
 80148dc:	20006c9c 	.word	0x20006c9c
 80148e0:	200071ac 	.word	0x200071ac

080148e4 <RegionCN470RxParamSetupReq>:

uint8_t RegionCN470RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b084      	sub	sp, #16
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 80148ec:	2307      	movs	r3, #7
 80148ee:	73fb      	strb	r3, [r7, #15]
	uint32_t freq = rxParamSetupReq->Frequency;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	685b      	ldr	r3, [r3, #4]
 80148f4:	60bb      	str	r3, [r7, #8]

	// Verify radio frequency
	if ((Radio.CheckRfFrequency(freq) == false) ||
 80148f6:	4b23      	ldr	r3, [pc, #140]	@ (8014984 <RegionCN470RxParamSetupReq+0xa0>)
 80148f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148fa:	68b8      	ldr	r0, [r7, #8]
 80148fc:	4798      	blx	r3
 80148fe:	4603      	mov	r3, r0
 8014900:	f083 0301 	eor.w	r3, r3, #1
 8014904:	b2db      	uxtb	r3, r3
 8014906:	2b00      	cmp	r3, #0
 8014908:	d115      	bne.n	8014936 <RegionCN470RxParamSetupReq+0x52>
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	4a1e      	ldr	r2, [pc, #120]	@ (8014988 <RegionCN470RxParamSetupReq+0xa4>)
 801490e:	4293      	cmp	r3, r2
 8014910:	d911      	bls.n	8014936 <RegionCN470RxParamSetupReq+0x52>
		(freq < CN470_FIRST_RX1_CHANNEL) ||
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	4a1d      	ldr	r2, [pc, #116]	@ (801498c <RegionCN470RxParamSetupReq+0xa8>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d80d      	bhi.n	8014936 <RegionCN470RxParamSetupReq+0x52>
		(freq > CN470_LAST_RX1_CHANNEL) ||
		(((freq - (uint32_t)CN470_FIRST_RX1_CHANNEL) % (uint32_t)CN470_STEPWIDTH_RX1_CHANNEL) != 0))
 801491a:	68ba      	ldr	r2, [r7, #8]
 801491c:	4b1c      	ldr	r3, [pc, #112]	@ (8014990 <RegionCN470RxParamSetupReq+0xac>)
 801491e:	4413      	add	r3, r2
 8014920:	099a      	lsrs	r2, r3, #6
 8014922:	491c      	ldr	r1, [pc, #112]	@ (8014994 <RegionCN470RxParamSetupReq+0xb0>)
 8014924:	fba1 1202 	umull	r1, r2, r1, r2
 8014928:	0992      	lsrs	r2, r2, #6
 801492a:	491b      	ldr	r1, [pc, #108]	@ (8014998 <RegionCN470RxParamSetupReq+0xb4>)
 801492c:	fb01 f202 	mul.w	r2, r1, r2
 8014930:	1a9a      	subs	r2, r3, r2
		(freq > CN470_LAST_RX1_CHANNEL) ||
 8014932:	2a00      	cmp	r2, #0
 8014934:	d003      	beq.n	801493e <RegionCN470RxParamSetupReq+0x5a>
	{
		status &= 0xFE; // Channel frequency KO
 8014936:	7bfb      	ldrb	r3, [r7, #15]
 8014938:	f023 0301 	bic.w	r3, r3, #1
 801493c:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, CN470_RX_MIN_DATARATE, CN470_RX_MAX_DATARATE) == false)
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f993 3000 	ldrsb.w	r3, [r3]
 8014944:	2205      	movs	r2, #5
 8014946:	2100      	movs	r1, #0
 8014948:	4618      	mov	r0, r3
 801494a:	f001 fd0d 	bl	8016368 <RegionCommonValueInRange>
 801494e:	4603      	mov	r3, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	d103      	bne.n	801495c <RegionCN470RxParamSetupReq+0x78>
	{
		status &= 0xFD; // Datarate KO
 8014954:	7bfb      	ldrb	r3, [r7, #15]
 8014956:	f023 0302 	bic.w	r3, r3, #2
 801495a:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, CN470_MIN_RX1_DR_OFFSET, CN470_MAX_RX1_DR_OFFSET) == false)
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014962:	2203      	movs	r2, #3
 8014964:	2100      	movs	r1, #0
 8014966:	4618      	mov	r0, r3
 8014968:	f001 fcfe 	bl	8016368 <RegionCommonValueInRange>
 801496c:	4603      	mov	r3, r0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d103      	bne.n	801497a <RegionCN470RxParamSetupReq+0x96>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 8014972:	7bfb      	ldrb	r3, [r7, #15]
 8014974:	f023 0304 	bic.w	r3, r3, #4
 8014978:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 801497a:	7bfb      	ldrb	r3, [r7, #15]
}
 801497c:	4618      	mov	r0, r3
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	08025450 	.word	0x08025450
 8014988:	1dd1f8df 	.word	0x1dd1f8df
 801498c:	1e6167a0 	.word	0x1e6167a0
 8014990:	e22e0720 	.word	0xe22e0720
 8014994:	053e2d63 	.word	0x053e2d63
 8014998:	00030d40 	.word	0x00030d40

0801499c <RegionCN470NewChannelReq>:

uint8_t RegionCN470NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 801499c:	b480      	push	{r7}
 801499e:	b083      	sub	sp, #12
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
	// Datarate and frequency KO
	return 0;
 80149a4:	2300      	movs	r3, #0
}
 80149a6:	4618      	mov	r0, r3
 80149a8:	370c      	adds	r7, #12
 80149aa:	46bd      	mov	sp, r7
 80149ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b0:	4770      	bx	lr

080149b2 <RegionCN470TxParamSetupReq>:

int8_t RegionCN470TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 80149b2:	b480      	push	{r7}
 80149b4:	b083      	sub	sp, #12
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
	return -1;
 80149ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80149be:	4618      	mov	r0, r3
 80149c0:	370c      	adds	r7, #12
 80149c2:	46bd      	mov	sp, r7
 80149c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c8:	4770      	bx	lr

080149ca <RegionCN470DlChannelReq>:

uint8_t RegionCN470DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 80149ca:	b480      	push	{r7}
 80149cc:	b083      	sub	sp, #12
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
	return 0;
 80149d2:	2300      	movs	r3, #0
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	370c      	adds	r7, #12
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr

080149e0 <RegionCN470AlternateDr>:

int8_t RegionCN470AlternateDr(AlternateDrParams_t *alternateDr)
{
 80149e0:	b480      	push	{r7}
 80149e2:	b085      	sub	sp, #20
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 80149e8:	2300      	movs	r3, #0
 80149ea:	73fb      	strb	r3, [r7, #15]

	if ((alternateDr->NbTrials % 48) == 0)
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	881a      	ldrh	r2, [r3, #0]
 80149f0:	4b23      	ldr	r3, [pc, #140]	@ (8014a80 <RegionCN470AlternateDr+0xa0>)
 80149f2:	fba3 1302 	umull	r1, r3, r3, r2
 80149f6:	0959      	lsrs	r1, r3, #5
 80149f8:	460b      	mov	r3, r1
 80149fa:	005b      	lsls	r3, r3, #1
 80149fc:	440b      	add	r3, r1
 80149fe:	011b      	lsls	r3, r3, #4
 8014a00:	1ad3      	subs	r3, r2, r3
 8014a02:	b29b      	uxth	r3, r3
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d102      	bne.n	8014a0e <RegionCN470AlternateDr+0x2e>
	{
		datarate = DR_0;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	73fb      	strb	r3, [r7, #15]
 8014a0c:	e030      	b.n	8014a70 <RegionCN470AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 32) == 0)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	881b      	ldrh	r3, [r3, #0]
 8014a12:	f003 031f 	and.w	r3, r3, #31
 8014a16:	b29b      	uxth	r3, r3
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d102      	bne.n	8014a22 <RegionCN470AlternateDr+0x42>
	{
		datarate = DR_1;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	73fb      	strb	r3, [r7, #15]
 8014a20:	e026      	b.n	8014a70 <RegionCN470AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 24) == 0)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	881a      	ldrh	r2, [r3, #0]
 8014a26:	4b16      	ldr	r3, [pc, #88]	@ (8014a80 <RegionCN470AlternateDr+0xa0>)
 8014a28:	fba3 1302 	umull	r1, r3, r3, r2
 8014a2c:	0919      	lsrs	r1, r3, #4
 8014a2e:	460b      	mov	r3, r1
 8014a30:	005b      	lsls	r3, r3, #1
 8014a32:	440b      	add	r3, r1
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d102      	bne.n	8014a44 <RegionCN470AlternateDr+0x64>
	{
		datarate = DR_2;
 8014a3e:	2302      	movs	r3, #2
 8014a40:	73fb      	strb	r3, [r7, #15]
 8014a42:	e015      	b.n	8014a70 <RegionCN470AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 16) == 0)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	881b      	ldrh	r3, [r3, #0]
 8014a48:	f003 030f 	and.w	r3, r3, #15
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d102      	bne.n	8014a58 <RegionCN470AlternateDr+0x78>
	{
		datarate = DR_3;
 8014a52:	2303      	movs	r3, #3
 8014a54:	73fb      	strb	r3, [r7, #15]
 8014a56:	e00b      	b.n	8014a70 <RegionCN470AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 8) == 0)
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	881b      	ldrh	r3, [r3, #0]
 8014a5c:	f003 0307 	and.w	r3, r3, #7
 8014a60:	b29b      	uxth	r3, r3
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d102      	bne.n	8014a6c <RegionCN470AlternateDr+0x8c>
	{
		datarate = DR_4;
 8014a66:	2304      	movs	r3, #4
 8014a68:	73fb      	strb	r3, [r7, #15]
 8014a6a:	e001      	b.n	8014a70 <RegionCN470AlternateDr+0x90>
	}
	else
	{
		datarate = DR_5;
 8014a6c:	2305      	movs	r3, #5
 8014a6e:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 8014a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3714      	adds	r7, #20
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr
 8014a80:	aaaaaaab 	.word	0xaaaaaaab

08014a84 <RegionCN470CalcBackOff>:

void RegionCN470CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b08a      	sub	sp, #40	@ 0x28
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 8014a8c:	4b11      	ldr	r3, [pc, #68]	@ (8014ad4 <RegionCN470CalcBackOff+0x50>)
 8014a8e:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 8014a90:	4b11      	ldr	r3, [pc, #68]	@ (8014ad8 <RegionCN470CalcBackOff+0x54>)
 8014a92:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	785b      	ldrb	r3, [r3, #1]
 8014a98:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	789b      	ldrb	r3, [r3, #2]
 8014aa4:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	78db      	ldrb	r3, [r3, #3]
 8014aaa:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014ab2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8014abc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 8014ac0:	f107 0308 	add.w	r3, r7, #8
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f002 f837 	bl	8016b38 <RegionCommonCalcBackOff>
}
 8014aca:	bf00      	nop
 8014acc:	3728      	adds	r7, #40	@ 0x28
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	200071ac 	.word	0x200071ac
 8014ad8:	20000110 	.word	0x20000110

08014adc <RegionCN470NextChannel>:

bool RegionCN470NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 8014adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8014ae0:	b0a4      	sub	sp, #144	@ 0x90
 8014ae2:	af02      	add	r7, sp, #8
 8014ae4:	60f8      	str	r0, [r7, #12]
 8014ae6:	60b9      	str	r1, [r7, #8]
 8014ae8:	607a      	str	r2, [r7, #4]
 8014aea:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	uint8_t delayTx = 0;
 8014af2:	2300      	movs	r3, #0
 8014af4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t enabledChannels[CN470_MAX_NB_CHANNELS] = {0};
 8014af8:	2300      	movs	r3, #0
 8014afa:	617b      	str	r3, [r7, #20]
 8014afc:	f107 0318 	add.w	r3, r7, #24
 8014b00:	225c      	movs	r2, #92	@ 0x5c
 8014b02:	2100      	movs	r1, #0
 8014b04:	4618      	mov	r0, r3
 8014b06:	f00d fba1 	bl	802224c <memset>
	TimerTime_t nextTxDelay = 0;
 8014b0a:	f04f 0200 	mov.w	r2, #0
 8014b0e:	f04f 0300 	mov.w	r3, #0
 8014b12:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

	// Count 125kHz channels
	if (RegionCommonCountChannels(ChannelsMask, 0, 6) == 0)
 8014b16:	2206      	movs	r2, #6
 8014b18:	2100      	movs	r1, #0
 8014b1a:	484e      	ldr	r0, [pc, #312]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014b1c:	f001 fc77 	bl	801640e <RegionCommonCountChannels>
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d117      	bne.n	8014b56 <RegionCN470NextChannel+0x7a>
	{ // Reactivate default channels
		ChannelsMask[0] = 0xFFFF;
 8014b26:	4b4b      	ldr	r3, [pc, #300]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b2c:	801a      	strh	r2, [r3, #0]
		ChannelsMask[1] = 0xFFFF;
 8014b2e:	4b49      	ldr	r3, [pc, #292]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b34:	805a      	strh	r2, [r3, #2]
		ChannelsMask[2] = 0xFFFF;
 8014b36:	4b47      	ldr	r3, [pc, #284]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b3c:	809a      	strh	r2, [r3, #4]
		ChannelsMask[3] = 0xFFFF;
 8014b3e:	4b45      	ldr	r3, [pc, #276]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b44:	80da      	strh	r2, [r3, #6]
		ChannelsMask[4] = 0xFFFF;
 8014b46:	4b43      	ldr	r3, [pc, #268]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014b48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b4c:	811a      	strh	r2, [r3, #8]
		ChannelsMask[5] = 0xFFFF;
 8014b4e:	4b41      	ldr	r3, [pc, #260]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b54:	815a      	strh	r2, [r3, #10]
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014b62:	4610      	mov	r0, r2
 8014b64:	4619      	mov	r1, r3
 8014b66:	f00c fa79 	bl	802105c <util_timer_get_elapsedtime>
 8014b6a:	4602      	mov	r2, r0
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	42a2      	cmp	r2, r4
 8014b70:	41ab      	sbcs	r3, r5
 8014b72:	d323      	bcc.n	8014bbc <RegionCN470NextChannel+0xe0>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 8014b74:	6839      	ldr	r1, [r7, #0]
 8014b76:	f04f 0200 	mov.w	r2, #0
 8014b7a:	f04f 0300 	mov.w	r3, #0
 8014b7e:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, CN470_MAX_NB_BANDS);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	7c58      	ldrb	r0, [r3, #17]
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	7c99      	ldrb	r1, [r3, #18]
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	4a32      	ldr	r2, [pc, #200]	@ (8014c58 <RegionCN470NextChannel+0x17c>)
 8014b8e:	f001 fcb2 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 8014b92:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Datarate,
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8014b9c:	b2d8      	uxtb	r0, r3
 8014b9e:	f107 0377 	add.w	r3, r7, #119	@ 0x77
 8014ba2:	9301      	str	r3, [sp, #4]
 8014ba4:	f107 0314 	add.w	r3, r7, #20
 8014ba8:	9300      	str	r3, [sp, #0]
 8014baa:	4b2b      	ldr	r3, [pc, #172]	@ (8014c58 <RegionCN470NextChannel+0x17c>)
 8014bac:	4a2b      	ldr	r2, [pc, #172]	@ (8014c5c <RegionCN470NextChannel+0x180>)
 8014bae:	4929      	ldr	r1, [pc, #164]	@ (8014c54 <RegionCN470NextChannel+0x178>)
 8014bb0:	f7ff f904 	bl	8013dbc <CountNbOfEnabledChannels>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8014bba:	e017      	b.n	8014bec <RegionCN470NextChannel+0x110>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 8014bbc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014bd4:	4610      	mov	r0, r2
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	f00c fa40 	bl	802105c <util_timer_get_elapsedtime>
 8014bdc:	4602      	mov	r2, r0
 8014bde:	460b      	mov	r3, r1
 8014be0:	ebb4 0802 	subs.w	r8, r4, r2
 8014be4:	eb65 0903 	sbc.w	r9, r5, r3
 8014be8:	e9c7 891e 	strd	r8, r9, [r7, #120]	@ 0x78
	}

	if (nbEnabledChannels > 0)
 8014bec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d016      	beq.n	8014c22 <RegionCN470NextChannel+0x146>
	{
		// We found a valid channel
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 8014bf4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8014bf8:	3b01      	subs	r3, #1
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	f00b ffb9 	bl	8020b74 <randr>
 8014c02:	4603      	mov	r3, r0
 8014c04:	3388      	adds	r3, #136	@ 0x88
 8014c06:	443b      	add	r3, r7
 8014c08:	f813 2c74 	ldrb.w	r2, [r3, #-116]
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	701a      	strb	r2, [r3, #0]

		*time = 0;
 8014c10:	6879      	ldr	r1, [r7, #4]
 8014c12:	f04f 0200 	mov.w	r2, #0
 8014c16:	f04f 0300 	mov.w	r3, #0
 8014c1a:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8014c1e:	2301      	movs	r3, #1
 8014c20:	e012      	b.n	8014c48 <RegionCN470NextChannel+0x16c>
	}
	else
	{
		if (delayTx > 0)
 8014c22:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d006      	beq.n	8014c38 <RegionCN470NextChannel+0x15c>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 8014c2a:	6879      	ldr	r1, [r7, #4]
 8014c2c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8014c30:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8014c34:	2301      	movs	r3, #1
 8014c36:	e007      	b.n	8014c48 <RegionCN470NextChannel+0x16c>
		}
		// Datarate not supported by any channel
		*time = 0;
 8014c38:	6879      	ldr	r1, [r7, #4]
 8014c3a:	f04f 0200 	mov.w	r2, #0
 8014c3e:	f04f 0300 	mov.w	r3, #0
 8014c42:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 8014c46:	2300      	movs	r3, #0
	}
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3788      	adds	r7, #136	@ 0x88
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8014c52:	bf00      	nop
 8014c54:	20006c9c 	.word	0x20006c9c
 8014c58:	20000110 	.word	0x20000110
 8014c5c:	200071ac 	.word	0x200071ac

08014c60 <RegionCN470SetContinuousWave>:
{
	return false; // LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionCN470SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b084      	sub	sp, #16
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	781b      	ldrb	r3, [r3, #0]
 8014c72:	4619      	mov	r1, r3
 8014c74:	4a1f      	ldr	r2, [pc, #124]	@ (8014cf4 <RegionCN470SetContinuousWave+0x94>)
 8014c76:	460b      	mov	r3, r1
 8014c78:	005b      	lsls	r3, r3, #1
 8014c7a:	440b      	add	r3, r1
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	4413      	add	r3, r2
 8014c80:	3309      	adds	r3, #9
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	4a1c      	ldr	r2, [pc, #112]	@ (8014cf8 <RegionCN470SetContinuousWave+0x98>)
 8014c86:	015b      	lsls	r3, r3, #5
 8014c88:	4413      	add	r3, r2
 8014c8a:	3302      	adds	r3, #2
 8014c8c:	f993 1000 	ldrsb.w	r1, [r3]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014c96:	4b19      	ldr	r3, [pc, #100]	@ (8014cfc <RegionCN470SetContinuousWave+0x9c>)
 8014c98:	f7ff f874 	bl	8013d84 <LimitTxPower>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	4619      	mov	r1, r3
 8014caa:	4a12      	ldr	r2, [pc, #72]	@ (8014cf4 <RegionCN470SetContinuousWave+0x94>)
 8014cac:	460b      	mov	r3, r1
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	440b      	add	r3, r1
 8014cb2:	009b      	lsls	r3, r3, #2
 8014cb4:	4413      	add	r3, r2
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	ed93 7a02 	vldr	s14, [r3, #8]
 8014cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cca:	eef0 0a47 	vmov.f32	s1, s14
 8014cce:	eeb0 0a67 	vmov.f32	s0, s15
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f001 fefe 	bl	8016ad4 <RegionCommonComputeTxPower>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 8014cdc:	4b08      	ldr	r3, [pc, #32]	@ (8014d00 <RegionCN470SetContinuousWave+0xa0>)
 8014cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	8992      	ldrh	r2, [r2, #12]
 8014ce4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014ce8:	68b8      	ldr	r0, [r7, #8]
 8014cea:	4798      	blx	r3
}
 8014cec:	bf00      	nop
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	200071ac 	.word	0x200071ac
 8014cf8:	20000110 	.word	0x20000110
 8014cfc:	20006c9c 	.word	0x20006c9c
 8014d00:	08025450 	.word	0x08025450

08014d04 <RegionCN470ApplyDrOffset>:

uint8_t RegionCN470ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 8014d04:	b480      	push	{r7}
 8014d06:	b085      	sub	sp, #20
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	71fb      	strb	r3, [r7, #7]
 8014d0e:	460b      	mov	r3, r1
 8014d10:	71bb      	strb	r3, [r7, #6]
 8014d12:	4613      	mov	r3, r2
 8014d14:	717b      	strb	r3, [r7, #5]
	int8_t datarate = dr - drOffset;
 8014d16:	79ba      	ldrb	r2, [r7, #6]
 8014d18:	797b      	ldrb	r3, [r7, #5]
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	b2db      	uxtb	r3, r3
 8014d1e:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 8014d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	da01      	bge.n	8014d2c <RegionCN470ApplyDrOffset+0x28>
	{
		datarate = DR_0;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 8014d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr

08014d3a <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 8014d3a:	b480      	push	{r7}
 8014d3c:	b085      	sub	sp, #20
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	4603      	mov	r3, r0
 8014d42:	460a      	mov	r2, r1
 8014d44:	71fb      	strb	r3, [r7, #7]
 8014d46:	4613      	mov	r3, r2
 8014d48:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 8014d4e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014d52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d102      	bne.n	8014d60 <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 8014d5a:	79bb      	ldrb	r3, [r7, #6]
 8014d5c:	73fb      	strb	r3, [r7, #15]
 8014d5e:	e002      	b.n	8014d66 <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 8014d60:	79fb      	ldrb	r3, [r7, #7]
 8014d62:	3b01      	subs	r3, #1
 8014d64:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 8014d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3714      	adds	r7, #20
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr
	...

08014d78 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b083      	sub	sp, #12
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	switch (BandwidthsCN779[drIndex])
 8014d80:	4a0a      	ldr	r2, [pc, #40]	@ (8014dac <GetBandwidth+0x34>)
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d88:	4a09      	ldr	r2, [pc, #36]	@ (8014db0 <GetBandwidth+0x38>)
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d004      	beq.n	8014d98 <GetBandwidth+0x20>
 8014d8e:	4a09      	ldr	r2, [pc, #36]	@ (8014db4 <GetBandwidth+0x3c>)
 8014d90:	4293      	cmp	r3, r2
 8014d92:	d003      	beq.n	8014d9c <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 8014d94:	2300      	movs	r3, #0
 8014d96:	e002      	b.n	8014d9e <GetBandwidth+0x26>
	case 250000:
		return 1;
 8014d98:	2301      	movs	r3, #1
 8014d9a:	e000      	b.n	8014d9e <GetBandwidth+0x26>
	case 500000:
		return 2;
 8014d9c:	2302      	movs	r3, #2
	}
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	370c      	adds	r7, #12
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	08025284 	.word	0x08025284
 8014db0:	0003d090 	.word	0x0003d090
 8014db4:	0007a120 	.word	0x0007a120

08014db8 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 8014db8:	b480      	push	{r7}
 8014dba:	b085      	sub	sp, #20
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	603b      	str	r3, [r7, #0]
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	71fb      	strb	r3, [r7, #7]
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	71bb      	strb	r3, [r7, #6]
 8014dc8:	4613      	mov	r3, r2
 8014dca:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 8014dcc:	79fb      	ldrb	r3, [r7, #7]
 8014dce:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 8014dd0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014dd4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014dd8:	4293      	cmp	r3, r2
 8014dda:	bfb8      	it	lt
 8014ddc:	4613      	movlt	r3, r2
 8014dde:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 8014de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3714      	adds	r7, #20
 8014de8:	46bd      	mov	sp, r7
 8014dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dee:	4770      	bx	lr

08014df0 <VerifyTxFreq>:

static bool VerifyTxFreq(uint32_t freq)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
	// Check radio driver support
	if (Radio.CheckRfFrequency(freq) == false)
 8014df8:	4b0d      	ldr	r3, [pc, #52]	@ (8014e30 <VerifyTxFreq+0x40>)
 8014dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dfc:	6878      	ldr	r0, [r7, #4]
 8014dfe:	4798      	blx	r3
 8014e00:	4603      	mov	r3, r0
 8014e02:	f083 0301 	eor.w	r3, r3, #1
 8014e06:	b2db      	uxtb	r3, r3
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d001      	beq.n	8014e10 <VerifyTxFreq+0x20>
	{
		return false;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	e00a      	b.n	8014e26 <VerifyTxFreq+0x36>
	}

	if ((freq < 779500000) || (freq > 786500000))
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	4a08      	ldr	r2, [pc, #32]	@ (8014e34 <VerifyTxFreq+0x44>)
 8014e14:	4293      	cmp	r3, r2
 8014e16:	d903      	bls.n	8014e20 <VerifyTxFreq+0x30>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	4a07      	ldr	r2, [pc, #28]	@ (8014e38 <VerifyTxFreq+0x48>)
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d901      	bls.n	8014e24 <VerifyTxFreq+0x34>
	{
		return false;
 8014e20:	2300      	movs	r3, #0
 8014e22:	e000      	b.n	8014e26 <VerifyTxFreq+0x36>
	}
	return true;
 8014e24:	2301      	movs	r3, #1
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3708      	adds	r7, #8
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	08025450 	.word	0x08025450
 8014e34:	2e7639df 	.word	0x2e7639df
 8014e38:	2ee109a0 	.word	0x2ee109a0

08014e3c <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(bool joined, uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b086      	sub	sp, #24
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	60ba      	str	r2, [r7, #8]
 8014e44:	607b      	str	r3, [r7, #4]
 8014e46:	4603      	mov	r3, r0
 8014e48:	73fb      	strb	r3, [r7, #15]
 8014e4a:	460b      	mov	r3, r1
 8014e4c:	73bb      	strb	r3, [r7, #14]
	uint8_t nbEnabledChannels = 0;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 8014e52:	2300      	movs	r3, #0
 8014e54:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < CN779_MAX_NB_CHANNELS; i += 16, k++)
 8014e56:	2300      	movs	r3, #0
 8014e58:	757b      	strb	r3, [r7, #21]
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	753b      	strb	r3, [r7, #20]
 8014e5e:	e086      	b.n	8014f6e <CountNbOfEnabledChannels+0x132>
	{
		for (uint8_t j = 0; j < 16; j++)
 8014e60:	2300      	movs	r3, #0
 8014e62:	74fb      	strb	r3, [r7, #19]
 8014e64:	e07a      	b.n	8014f5c <CountNbOfEnabledChannels+0x120>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 8014e66:	7d3b      	ldrb	r3, [r7, #20]
 8014e68:	005b      	lsls	r3, r3, #1
 8014e6a:	68ba      	ldr	r2, [r7, #8]
 8014e6c:	4413      	add	r3, r2
 8014e6e:	881b      	ldrh	r3, [r3, #0]
 8014e70:	461a      	mov	r2, r3
 8014e72:	7cfb      	ldrb	r3, [r7, #19]
 8014e74:	fa42 f303 	asr.w	r3, r2, r3
 8014e78:	f003 0301 	and.w	r3, r3, #1
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d06a      	beq.n	8014f56 <CountNbOfEnabledChannels+0x11a>
			{
				if (channels[i + j].Frequency == 0)
 8014e80:	7d7a      	ldrb	r2, [r7, #21]
 8014e82:	7cfb      	ldrb	r3, [r7, #19]
 8014e84:	4413      	add	r3, r2
 8014e86:	461a      	mov	r2, r3
 8014e88:	4613      	mov	r3, r2
 8014e8a:	005b      	lsls	r3, r3, #1
 8014e8c:	4413      	add	r3, r2
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	461a      	mov	r2, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	4413      	add	r3, r2
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d057      	beq.n	8014f4c <CountNbOfEnabledChannels+0x110>
				{ // Check if the channel is enabled
					continue;
				}
				if (joined == false)
 8014e9c:	7bfb      	ldrb	r3, [r7, #15]
 8014e9e:	f083 0301 	eor.w	r3, r3, #1
 8014ea2:	b2db      	uxtb	r3, r3
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d007      	beq.n	8014eb8 <CountNbOfEnabledChannels+0x7c>
				{
					if ((CN779_JOIN_CHANNELS & (1 << j)) == 0)
 8014ea8:	7cfb      	ldrb	r3, [r7, #19]
 8014eaa:	2207      	movs	r2, #7
 8014eac:	fa42 f303 	asr.w	r3, r2, r3
 8014eb0:	f003 0301 	and.w	r3, r3, #1
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d04b      	beq.n	8014f50 <CountNbOfEnabledChannels+0x114>
					{
						continue;
					}
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8014eb8:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8014ebc:	7d7a      	ldrb	r2, [r7, #21]
 8014ebe:	7cfb      	ldrb	r3, [r7, #19]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	005b      	lsls	r3, r3, #1
 8014ec8:	4413      	add	r3, r2
 8014eca:	009b      	lsls	r3, r3, #2
 8014ecc:	461a      	mov	r2, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	7a1b      	ldrb	r3, [r3, #8]
 8014ed4:	f343 0303 	sbfx	r3, r3, #0, #4
 8014ed8:	b25b      	sxtb	r3, r3
 8014eda:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 8014edc:	7d7a      	ldrb	r2, [r7, #21]
 8014ede:	7cfb      	ldrb	r3, [r7, #19]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	461a      	mov	r2, r3
 8014ee4:	4613      	mov	r3, r2
 8014ee6:	005b      	lsls	r3, r3, #1
 8014ee8:	4413      	add	r3, r2
 8014eea:	009b      	lsls	r3, r3, #2
 8014eec:	461a      	mov	r2, r3
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	7a1b      	ldrb	r3, [r3, #8]
 8014ef4:	f343 1303 	sbfx	r3, r3, #4, #4
 8014ef8:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8014efa:	461a      	mov	r2, r3
 8014efc:	f001 fa34 	bl	8016368 <RegionCommonValueInRange>
 8014f00:	4603      	mov	r3, r0
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d026      	beq.n	8014f54 <CountNbOfEnabledChannels+0x118>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 8014f06:	7d7a      	ldrb	r2, [r7, #21]
 8014f08:	7cfb      	ldrb	r3, [r7, #19]
 8014f0a:	4413      	add	r3, r2
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	4613      	mov	r3, r2
 8014f10:	005b      	lsls	r3, r3, #1
 8014f12:	4413      	add	r3, r2
 8014f14:	009b      	lsls	r3, r3, #2
 8014f16:	461a      	mov	r2, r3
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	7a5b      	ldrb	r3, [r3, #9]
 8014f1e:	015b      	lsls	r3, r3, #5
 8014f20:	6a3a      	ldr	r2, [r7, #32]
 8014f22:	4413      	add	r3, r2
 8014f24:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	d003      	beq.n	8014f34 <CountNbOfEnabledChannels+0xf8>
				{ // Check if the band is available for transmission
					delayTransmission++;
 8014f2c:	7dbb      	ldrb	r3, [r7, #22]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	75bb      	strb	r3, [r7, #22]
					continue;
 8014f32:	e010      	b.n	8014f56 <CountNbOfEnabledChannels+0x11a>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 8014f34:	7dfb      	ldrb	r3, [r7, #23]
 8014f36:	1c5a      	adds	r2, r3, #1
 8014f38:	75fa      	strb	r2, [r7, #23]
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f3e:	4413      	add	r3, r2
 8014f40:	7d79      	ldrb	r1, [r7, #21]
 8014f42:	7cfa      	ldrb	r2, [r7, #19]
 8014f44:	440a      	add	r2, r1
 8014f46:	b2d2      	uxtb	r2, r2
 8014f48:	701a      	strb	r2, [r3, #0]
 8014f4a:	e004      	b.n	8014f56 <CountNbOfEnabledChannels+0x11a>
					continue;
 8014f4c:	bf00      	nop
 8014f4e:	e002      	b.n	8014f56 <CountNbOfEnabledChannels+0x11a>
						continue;
 8014f50:	bf00      	nop
 8014f52:	e000      	b.n	8014f56 <CountNbOfEnabledChannels+0x11a>
					continue;
 8014f54:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 8014f56:	7cfb      	ldrb	r3, [r7, #19]
 8014f58:	3301      	adds	r3, #1
 8014f5a:	74fb      	strb	r3, [r7, #19]
 8014f5c:	7cfb      	ldrb	r3, [r7, #19]
 8014f5e:	2b0f      	cmp	r3, #15
 8014f60:	d981      	bls.n	8014e66 <CountNbOfEnabledChannels+0x2a>
	for (uint8_t i = 0, k = 0; i < CN779_MAX_NB_CHANNELS; i += 16, k++)
 8014f62:	7d7b      	ldrb	r3, [r7, #21]
 8014f64:	3310      	adds	r3, #16
 8014f66:	757b      	strb	r3, [r7, #21]
 8014f68:	7d3b      	ldrb	r3, [r7, #20]
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	753b      	strb	r3, [r7, #20]
 8014f6e:	7d7b      	ldrb	r3, [r7, #21]
 8014f70:	2b0f      	cmp	r3, #15
 8014f72:	f67f af75 	bls.w	8014e60 <CountNbOfEnabledChannels+0x24>
			}
		}
	}

	*delayTx = delayTransmission;
 8014f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f78:	7dba      	ldrb	r2, [r7, #22]
 8014f7a:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 8014f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3718      	adds	r7, #24
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
	...

08014f88 <RegionCN779GetPhyParam>:

PhyParam_t RegionCN779GetPhyParam(GetPhyParams_t *getPhy)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b084      	sub	sp, #16
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 8014f90:	2300      	movs	r3, #0
 8014f92:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	2b20      	cmp	r3, #32
 8014f9a:	f200 80b1 	bhi.w	8015100 <RegionCN779GetPhyParam+0x178>
 8014f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8014fa4 <RegionCN779GetPhyParam+0x1c>)
 8014fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fa4:	08015029 	.word	0x08015029
 8014fa8:	0801502f 	.word	0x0801502f
 8014fac:	08015101 	.word	0x08015101
 8014fb0:	08015101 	.word	0x08015101
 8014fb4:	08015101 	.word	0x08015101
 8014fb8:	08015035 	.word	0x08015035
 8014fbc:	08015101 	.word	0x08015101
 8014fc0:	08015101 	.word	0x08015101
 8014fc4:	0801504f 	.word	0x0801504f
 8014fc8:	08015055 	.word	0x08015055
 8014fcc:	08015065 	.word	0x08015065
 8014fd0:	08015075 	.word	0x08015075
 8014fd4:	0801507b 	.word	0x0801507b
 8014fd8:	08015083 	.word	0x08015083
 8014fdc:	0801508b 	.word	0x0801508b
 8014fe0:	08015093 	.word	0x08015093
 8014fe4:	0801509b 	.word	0x0801509b
 8014fe8:	080150a3 	.word	0x080150a3
 8014fec:	080150ab 	.word	0x080150ab
 8014ff0:	080150bf 	.word	0x080150bf
 8014ff4:	080150c5 	.word	0x080150c5
 8014ff8:	080150cb 	.word	0x080150cb
 8014ffc:	080150d1 	.word	0x080150d1
 8015000:	080150d7 	.word	0x080150d7
 8015004:	080150dd 	.word	0x080150dd
 8015008:	080150e3 	.word	0x080150e3
 801500c:	080150e9 	.word	0x080150e9
 8015010:	080150e9 	.word	0x080150e9
 8015014:	080150ef 	.word	0x080150ef
 8015018:	080150f5 	.word	0x080150f5
 801501c:	080150fb 	.word	0x080150fb
 8015020:	080150fb 	.word	0x080150fb
 8015024:	0801503b 	.word	0x0801503b
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = CN779_RX_MIN_DATARATE;
 8015028:	2300      	movs	r3, #0
 801502a:	60fb      	str	r3, [r7, #12]
		break;
 801502c:	e069      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = CN779_TX_MIN_DATARATE;
 801502e:	2300      	movs	r3, #0
 8015030:	60fb      	str	r3, [r7, #12]
		break;
 8015032:	e066      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = CN779_DEFAULT_DATARATE;
 8015034:	2300      	movs	r3, #0
 8015036:	60fb      	str	r3, [r7, #12]
		break;
 8015038:	e063      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, CN779_TX_MIN_DATARATE);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015040:	2100      	movs	r1, #0
 8015042:	4618      	mov	r0, r3
 8015044:	f7ff fe79 	bl	8014d3a <GetNextLowerTxDr>
 8015048:	4603      	mov	r3, r0
 801504a:	60fb      	str	r3, [r7, #12]
		break;
 801504c:	e059      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = CN779_DEFAULT_TX_POWER;
 801504e:	2300      	movs	r3, #0
 8015050:	60fb      	str	r3, [r7, #12]
		break;
 8015052:	e056      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateCN779[getPhy->Datarate];
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801505a:	461a      	mov	r2, r3
 801505c:	4b2b      	ldr	r3, [pc, #172]	@ (801510c <RegionCN779GetPhyParam+0x184>)
 801505e:	5c9b      	ldrb	r3, [r3, r2]
 8015060:	60fb      	str	r3, [r7, #12]
		break;
 8015062:	e04e      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterCN779[getPhy->Datarate];
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801506a:	461a      	mov	r2, r3
 801506c:	4b28      	ldr	r3, [pc, #160]	@ (8015110 <RegionCN779GetPhyParam+0x188>)
 801506e:	5c9b      	ldrb	r3, [r3, r2]
 8015070:	60fb      	str	r3, [r7, #12]
		break;
 8015072:	e046      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = CN779_DUTY_CYCLE_ENABLED;
 8015074:	2301      	movs	r3, #1
 8015076:	60fb      	str	r3, [r7, #12]
		break;
 8015078:	e043      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = CN779_MAX_RX_WINDOW;
 801507a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801507e:	60fb      	str	r3, [r7, #12]
		break;
 8015080:	e03f      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = CN779_RECEIVE_DELAY1;
 8015082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015086:	60fb      	str	r3, [r7, #12]
		break;
 8015088:	e03b      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = CN779_RECEIVE_DELAY2;
 801508a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801508e:	60fb      	str	r3, [r7, #12]
		break;
 8015090:	e037      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = CN779_JOIN_ACCEPT_DELAY1;
 8015092:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015096:	60fb      	str	r3, [r7, #12]
		break;
 8015098:	e033      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = CN779_JOIN_ACCEPT_DELAY2;
 801509a:	f241 7370 	movw	r3, #6000	@ 0x1770
 801509e:	60fb      	str	r3, [r7, #12]
		break;
 80150a0:	e02f      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = CN779_MAX_FCNT_GAP;
 80150a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80150a6:	60fb      	str	r3, [r7, #12]
		break;
 80150a8:	e02b      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (CN779_ACKTIMEOUT + randr(-CN779_ACK_TIMEOUT_RND, CN779_ACK_TIMEOUT_RND));
 80150aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80150ae:	4819      	ldr	r0, [pc, #100]	@ (8015114 <RegionCN779GetPhyParam+0x18c>)
 80150b0:	f00b fd60 	bl	8020b74 <randr>
 80150b4:	4603      	mov	r3, r0
 80150b6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80150ba:	60fb      	str	r3, [r7, #12]
		break;
 80150bc:	e021      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = CN779_DEFAULT_RX1_DR_OFFSET;
 80150be:	2300      	movs	r3, #0
 80150c0:	60fb      	str	r3, [r7, #12]
		break;
 80150c2:	e01e      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = CN779_RX_WND_2_FREQ;
 80150c4:	4b14      	ldr	r3, [pc, #80]	@ (8015118 <RegionCN779GetPhyParam+0x190>)
 80150c6:	60fb      	str	r3, [r7, #12]
		break;
 80150c8:	e01b      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = CN779_RX_WND_2_DR;
 80150ca:	2300      	movs	r3, #0
 80150cc:	60fb      	str	r3, [r7, #12]
		break;
 80150ce:	e018      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 80150d0:	4b12      	ldr	r3, [pc, #72]	@ (801511c <RegionCN779GetPhyParam+0x194>)
 80150d2:	60fb      	str	r3, [r7, #12]
		break;
 80150d4:	e015      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 80150d6:	4b12      	ldr	r3, [pc, #72]	@ (8015120 <RegionCN779GetPhyParam+0x198>)
 80150d8:	60fb      	str	r3, [r7, #12]
		break;
 80150da:	e012      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = CN779_MAX_NB_CHANNELS;
 80150dc:	2310      	movs	r3, #16
 80150de:	60fb      	str	r3, [r7, #12]
		break;
 80150e0:	e00f      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 80150e2:	4b10      	ldr	r3, [pc, #64]	@ (8015124 <RegionCN779GetPhyParam+0x19c>)
 80150e4:	60fb      	str	r3, [r7, #12]
		break;
 80150e6:	e00c      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 80150e8:	2300      	movs	r3, #0
 80150ea:	60fb      	str	r3, [r7, #12]
		break;
 80150ec:	e009      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = CN779_DEFAULT_MAX_EIRP;
 80150ee:	4b0e      	ldr	r3, [pc, #56]	@ (8015128 <RegionCN779GetPhyParam+0x1a0>)
 80150f0:	60fb      	str	r3, [r7, #12]
		break;
 80150f2:	e006      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = CN779_DEFAULT_ANTENNA_GAIN;
 80150f4:	4b0d      	ldr	r3, [pc, #52]	@ (801512c <RegionCN779GetPhyParam+0x1a4>)
 80150f6:	60fb      	str	r3, [r7, #12]
		break;
 80150f8:	e003      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 48;
 80150fa:	2330      	movs	r3, #48	@ 0x30
 80150fc:	60fb      	str	r3, [r7, #12]
		break;
 80150fe:	e000      	b.n	8015102 <RegionCN779GetPhyParam+0x17a>
	}
	default:
	{
		break;
 8015100:	bf00      	nop
	}
	}

	return phyParam;
 8015102:	68fb      	ldr	r3, [r7, #12]
}
 8015104:	4618      	mov	r0, r3
 8015106:	3710      	adds	r7, #16
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}
 801510c:	080252a4 	.word	0x080252a4
 8015110:	080252ac 	.word	0x080252ac
 8015114:	fffffc18 	.word	0xfffffc18
 8015118:	2ed96880 	.word	0x2ed96880
 801511c:	20006c9c 	.word	0x20006c9c
 8015120:	20006ca8 	.word	0x20006ca8
 8015124:	2000762c 	.word	0x2000762c
 8015128:	41426666 	.word	0x41426666
 801512c:	4009999a 	.word	0x4009999a

08015130 <RegionCN779SetBandTxDone>:

void RegionCN779SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	7858      	ldrb	r0, [r3, #1]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	4619      	mov	r1, r3
 8015142:	4a0a      	ldr	r2, [pc, #40]	@ (801516c <RegionCN779SetBandTxDone+0x3c>)
 8015144:	460b      	mov	r3, r1
 8015146:	005b      	lsls	r3, r3, #1
 8015148:	440b      	add	r3, r1
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	4413      	add	r3, r2
 801514e:	3309      	adds	r3, #9
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	015b      	lsls	r3, r3, #5
 8015154:	4a06      	ldr	r2, [pc, #24]	@ (8015170 <RegionCN779SetBandTxDone+0x40>)
 8015156:	1899      	adds	r1, r3, r2
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801515e:	f001 f9a9 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 8015162:	bf00      	nop
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	2000762c 	.word	0x2000762c
 8015170:	20000130 	.word	0x20000130

08015174 <RegionCN779InitDefaults>:

void RegionCN779InitDefaults(InitType_t type)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b08c      	sub	sp, #48	@ 0x30
 8015178:	af00      	add	r7, sp, #0
 801517a:	4603      	mov	r3, r0
 801517c:	71fb      	strb	r3, [r7, #7]
	switch (type)
 801517e:	79fb      	ldrb	r3, [r7, #7]
 8015180:	2b02      	cmp	r3, #2
 8015182:	d029      	beq.n	80151d8 <RegionCN779InitDefaults+0x64>
 8015184:	2b02      	cmp	r3, #2
 8015186:	dc2d      	bgt.n	80151e4 <RegionCN779InitDefaults+0x70>
 8015188:	2b00      	cmp	r3, #0
 801518a:	d002      	beq.n	8015192 <RegionCN779InitDefaults+0x1e>
 801518c:	2b01      	cmp	r3, #1
 801518e:	d01a      	beq.n	80151c6 <RegionCN779InitDefaults+0x52>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
		break;
	}
	default:
	{
		break;
 8015190:	e028      	b.n	80151e4 <RegionCN779InitDefaults+0x70>
		Channels[0] = (ChannelParams_t)CN779_LC1;
 8015192:	4b17      	ldr	r3, [pc, #92]	@ (80151f0 <RegionCN779InitDefaults+0x7c>)
 8015194:	4a17      	ldr	r2, [pc, #92]	@ (80151f4 <RegionCN779InitDefaults+0x80>)
 8015196:	ca07      	ldmia	r2, {r0, r1, r2}
 8015198:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[1] = (ChannelParams_t)CN779_LC2;
 801519c:	4b14      	ldr	r3, [pc, #80]	@ (80151f0 <RegionCN779InitDefaults+0x7c>)
 801519e:	4a16      	ldr	r2, [pc, #88]	@ (80151f8 <RegionCN779InitDefaults+0x84>)
 80151a0:	330c      	adds	r3, #12
 80151a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80151a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[2] = (ChannelParams_t)CN779_LC3;
 80151a8:	4b11      	ldr	r3, [pc, #68]	@ (80151f0 <RegionCN779InitDefaults+0x7c>)
 80151aa:	4a14      	ldr	r2, [pc, #80]	@ (80151fc <RegionCN779InitDefaults+0x88>)
 80151ac:	3318      	adds	r3, #24
 80151ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80151b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ChannelsDefaultMask[0] = LC(1) + LC(2) + LC(3);
 80151b4:	4b12      	ldr	r3, [pc, #72]	@ (8015200 <RegionCN779InitDefaults+0x8c>)
 80151b6:	2207      	movs	r2, #7
 80151b8:	801a      	strh	r2, [r3, #0]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 80151ba:	2201      	movs	r2, #1
 80151bc:	4910      	ldr	r1, [pc, #64]	@ (8015200 <RegionCN779InitDefaults+0x8c>)
 80151be:	4811      	ldr	r0, [pc, #68]	@ (8015204 <RegionCN779InitDefaults+0x90>)
 80151c0:	f001 f951 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 80151c4:	e00f      	b.n	80151e6 <RegionCN779InitDefaults+0x72>
		ChannelsMask[0] |= ChannelsDefaultMask[0];
 80151c6:	4b0f      	ldr	r3, [pc, #60]	@ (8015204 <RegionCN779InitDefaults+0x90>)
 80151c8:	881a      	ldrh	r2, [r3, #0]
 80151ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015200 <RegionCN779InitDefaults+0x8c>)
 80151cc:	881b      	ldrh	r3, [r3, #0]
 80151ce:	4313      	orrs	r3, r2
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	4b0c      	ldr	r3, [pc, #48]	@ (8015204 <RegionCN779InitDefaults+0x90>)
 80151d4:	801a      	strh	r2, [r3, #0]
		break;
 80151d6:	e006      	b.n	80151e6 <RegionCN779InitDefaults+0x72>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 80151d8:	2201      	movs	r2, #1
 80151da:	4909      	ldr	r1, [pc, #36]	@ (8015200 <RegionCN779InitDefaults+0x8c>)
 80151dc:	4809      	ldr	r0, [pc, #36]	@ (8015204 <RegionCN779InitDefaults+0x90>)
 80151de:	f001 f942 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 80151e2:	e000      	b.n	80151e6 <RegionCN779InitDefaults+0x72>
		break;
 80151e4:	bf00      	nop
	}
	}
}
 80151e6:	bf00      	nop
 80151e8:	3730      	adds	r7, #48	@ 0x30
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	bf00      	nop
 80151f0:	2000762c 	.word	0x2000762c
 80151f4:	08024aec 	.word	0x08024aec
 80151f8:	08024af8 	.word	0x08024af8
 80151fc:	08024b04 	.word	0x08024b04
 8015200:	20006ca8 	.word	0x20006ca8
 8015204:	20006c9c 	.word	0x20006c9c

08015208 <RegionCN779Verify>:

bool RegionCN779Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
 8015210:	460b      	mov	r3, r1
 8015212:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 8015214:	78fb      	ldrb	r3, [r7, #3]
 8015216:	3b04      	subs	r3, #4
 8015218:	2b1a      	cmp	r3, #26
 801521a:	d87d      	bhi.n	8015318 <RegionCN779Verify+0x110>
 801521c:	a201      	add	r2, pc, #4	@ (adr r2, 8015224 <RegionCN779Verify+0x1c>)
 801521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015222:	bf00      	nop
 8015224:	08015291 	.word	0x08015291
 8015228:	080152af 	.word	0x080152af
 801522c:	080152cd 	.word	0x080152cd
 8015230:	080152eb 	.word	0x080152eb
 8015234:	080152eb 	.word	0x080152eb
 8015238:	08015319 	.word	0x08015319
 801523c:	08015319 	.word	0x08015319
 8015240:	08015309 	.word	0x08015309
 8015244:	08015319 	.word	0x08015319
 8015248:	08015319 	.word	0x08015319
 801524c:	08015319 	.word	0x08015319
 8015250:	08015319 	.word	0x08015319
 8015254:	08015319 	.word	0x08015319
 8015258:	08015319 	.word	0x08015319
 801525c:	08015319 	.word	0x08015319
 8015260:	08015319 	.word	0x08015319
 8015264:	08015319 	.word	0x08015319
 8015268:	08015319 	.word	0x08015319
 801526c:	08015319 	.word	0x08015319
 8015270:	08015319 	.word	0x08015319
 8015274:	08015319 	.word	0x08015319
 8015278:	08015319 	.word	0x08015319
 801527c:	08015319 	.word	0x08015319
 8015280:	08015319 	.word	0x08015319
 8015284:	08015319 	.word	0x08015319
 8015288:	08015319 	.word	0x08015319
 801528c:	0801530d 	.word	0x0801530d
	{
	case PHY_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f993 3000 	ldrsb.w	r3, [r3]
 8015296:	2207      	movs	r2, #7
 8015298:	2100      	movs	r1, #0
 801529a:	4618      	mov	r0, r3
 801529c:	f001 f864 	bl	8016368 <RegionCommonValueInRange>
 80152a0:	4603      	mov	r3, r0
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	bf14      	ite	ne
 80152a6:	2301      	movne	r3, #1
 80152a8:	2300      	moveq	r3, #0
 80152aa:	b2db      	uxtb	r3, r3
 80152ac:	e038      	b.n	8015320 <RegionCN779Verify+0x118>
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f993 3000 	ldrsb.w	r3, [r3]
 80152b4:	2205      	movs	r2, #5
 80152b6:	2100      	movs	r1, #0
 80152b8:	4618      	mov	r0, r3
 80152ba:	f001 f855 	bl	8016368 <RegionCommonValueInRange>
 80152be:	4603      	mov	r3, r0
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	bf14      	ite	ne
 80152c4:	2301      	movne	r3, #1
 80152c6:	2300      	moveq	r3, #0
 80152c8:	b2db      	uxtb	r3, r3
 80152ca:	e029      	b.n	8015320 <RegionCN779Verify+0x118>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE);
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f993 3000 	ldrsb.w	r3, [r3]
 80152d2:	2207      	movs	r2, #7
 80152d4:	2100      	movs	r1, #0
 80152d6:	4618      	mov	r0, r3
 80152d8:	f001 f846 	bl	8016368 <RegionCommonValueInRange>
 80152dc:	4603      	mov	r3, r0
 80152de:	2b00      	cmp	r3, #0
 80152e0:	bf14      	ite	ne
 80152e2:	2301      	movne	r3, #1
 80152e4:	2300      	moveq	r3, #0
 80152e6:	b2db      	uxtb	r3, r3
 80152e8:	e01a      	b.n	8015320 <RegionCN779Verify+0x118>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, CN779_MAX_TX_POWER, CN779_MIN_TX_POWER);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	f993 3000 	ldrsb.w	r3, [r3]
 80152f0:	2205      	movs	r2, #5
 80152f2:	2100      	movs	r1, #0
 80152f4:	4618      	mov	r0, r3
 80152f6:	f001 f837 	bl	8016368 <RegionCommonValueInRange>
 80152fa:	4603      	mov	r3, r0
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	bf14      	ite	ne
 8015300:	2301      	movne	r3, #1
 8015302:	2300      	moveq	r3, #0
 8015304:	b2db      	uxtb	r3, r3
 8015306:	e00b      	b.n	8015320 <RegionCN779Verify+0x118>
	}
	case PHY_DUTY_CYCLE:
	{
		return CN779_DUTY_CYCLE_ENABLED;
 8015308:	2301      	movs	r3, #1
 801530a:	e009      	b.n	8015320 <RegionCN779Verify+0x118>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 48)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	781b      	ldrb	r3, [r3, #0]
 8015310:	2b2f      	cmp	r3, #47	@ 0x2f
 8015312:	d803      	bhi.n	801531c <RegionCN779Verify+0x114>
		{
			return false;
 8015314:	2300      	movs	r3, #0
 8015316:	e003      	b.n	8015320 <RegionCN779Verify+0x118>
		}
		break;
	}
	default:
		return false;
 8015318:	2300      	movs	r3, #0
 801531a:	e001      	b.n	8015320 <RegionCN779Verify+0x118>
		break;
 801531c:	bf00      	nop
	}
	return true;
 801531e:	2301      	movs	r3, #1
}
 8015320:	4618      	mov	r0, r3
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}

08015328 <RegionCN779ApplyCFList>:

void RegionCN779ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08a      	sub	sp, #40	@ 0x28
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
	ChannelParams_t newChannel;
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	// Setup default datarate range
	newChannel.DrRange.Value = (DR_5 << 4) | DR_0;
 8015330:	2350      	movs	r3, #80	@ 0x50
 8015332:	f887 3020 	strb.w	r3, [r7, #32]

	// Size of the optional CF list
	if (applyCFList->Size != 16)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	791b      	ldrb	r3, [r3, #4]
 801533a:	2b10      	cmp	r3, #16
 801533c:	d15c      	bne.n	80153f8 <RegionCN779ApplyCFList+0xd0>
	{
		return;
	}

	// Last byte is RFU, don't take it into account
	for (uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i += 3, chanIdx++)
 801533e:	2300      	movs	r3, #0
 8015340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015344:	2303      	movs	r3, #3
 8015346:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801534a:	e050      	b.n	80153ee <RegionCN779ApplyCFList+0xc6>
	{
		if (chanIdx < (CN779_NUMB_CHANNELS_CF_LIST + CN779_NUMB_DEFAULT_CHANNELS))
 801534c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015350:	2b07      	cmp	r3, #7
 8015352:	d824      	bhi.n	801539e <RegionCN779ApplyCFList+0x76>
		{
			// Channel frequency
			newChannel.Frequency = (uint32_t)applyCFList->Payload[i];
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681a      	ldr	r2, [r3, #0]
 8015358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801535c:	4413      	add	r3, r2
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 1] << 8);
 8015362:	69ba      	ldr	r2, [r7, #24]
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6819      	ldr	r1, [r3, #0]
 8015368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801536c:	3301      	adds	r3, #1
 801536e:	440b      	add	r3, r1
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	021b      	lsls	r3, r3, #8
 8015374:	4313      	orrs	r3, r2
 8015376:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 2] << 16);
 8015378:	69ba      	ldr	r2, [r7, #24]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	6819      	ldr	r1, [r3, #0]
 801537e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015382:	3302      	adds	r3, #2
 8015384:	440b      	add	r3, r1
 8015386:	781b      	ldrb	r3, [r3, #0]
 8015388:	041b      	lsls	r3, r3, #16
 801538a:	4313      	orrs	r3, r2
 801538c:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency *= 100;
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	2264      	movs	r2, #100	@ 0x64
 8015392:	fb02 f303 	mul.w	r3, r2, r3
 8015396:	61bb      	str	r3, [r7, #24]

			// Initialize alternative frequency to 0
			newChannel.Rx1Frequency = 0;
 8015398:	2300      	movs	r3, #0
 801539a:	61fb      	str	r3, [r7, #28]
 801539c:	e006      	b.n	80153ac <RegionCN779ApplyCFList+0x84>
		}
		else
		{
			newChannel.Frequency = 0;
 801539e:	2300      	movs	r3, #0
 80153a0:	61bb      	str	r3, [r7, #24]
			newChannel.DrRange.Value = 0;
 80153a2:	2300      	movs	r3, #0
 80153a4:	f887 3020 	strb.w	r3, [r7, #32]
			newChannel.Rx1Frequency = 0;
 80153a8:	2300      	movs	r3, #0
 80153aa:	61fb      	str	r3, [r7, #28]
		}

		if (newChannel.Frequency != 0)
 80153ac:	69bb      	ldr	r3, [r7, #24]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d00b      	beq.n	80153ca <RegionCN779ApplyCFList+0xa2>
		{
			channelAdd.NewChannel = &newChannel;
 80153b2:	f107 0318 	add.w	r3, r7, #24
 80153b6:	613b      	str	r3, [r7, #16]
			channelAdd.ChannelId = chanIdx;
 80153b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153bc:	753b      	strb	r3, [r7, #20]

			// Try to add all channels
			RegionCN779ChannelAdd(&channelAdd);
 80153be:	f107 0310 	add.w	r3, r7, #16
 80153c2:	4618      	mov	r0, r3
 80153c4:	f000 fdb2 	bl	8015f2c <RegionCN779ChannelAdd>
 80153c8:	e007      	b.n	80153da <RegionCN779ApplyCFList+0xb2>
		}
		else
		{
			channelRemove.ChannelId = chanIdx;
 80153ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153ce:	733b      	strb	r3, [r7, #12]

			RegionCN779ChannelsRemove(&channelRemove);
 80153d0:	f107 030c 	add.w	r3, r7, #12
 80153d4:	4618      	mov	r0, r3
 80153d6:	f000 fe6b 	bl	80160b0 <RegionCN779ChannelsRemove>
	for (uint8_t i = 0, chanIdx = CN779_NUMB_DEFAULT_CHANNELS; chanIdx < CN779_MAX_NB_CHANNELS; i += 3, chanIdx++)
 80153da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80153de:	3303      	adds	r3, #3
 80153e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80153e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153e8:	3301      	adds	r3, #1
 80153ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80153ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80153f2:	2b0f      	cmp	r3, #15
 80153f4:	d9aa      	bls.n	801534c <RegionCN779ApplyCFList+0x24>
 80153f6:	e000      	b.n	80153fa <RegionCN779ApplyCFList+0xd2>
		return;
 80153f8:	bf00      	nop
		}
	}
}
 80153fa:	3728      	adds	r7, #40	@ 0x28
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <RegionCN779ChanMaskSet>:

bool RegionCN779ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	791b      	ldrb	r3, [r3, #4]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d002      	beq.n	8015416 <RegionCN779ChanMaskSet+0x16>
 8015410:	2b01      	cmp	r3, #1
 8015412:	d008      	beq.n	8015426 <RegionCN779ChanMaskSet+0x26>
 8015414:	e00f      	b.n	8015436 <RegionCN779ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 1);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	2201      	movs	r2, #1
 801541c:	4619      	mov	r1, r3
 801541e:	4809      	ldr	r0, [pc, #36]	@ (8015444 <RegionCN779ChanMaskSet+0x44>)
 8015420:	f001 f821 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8015424:	e009      	b.n	801543a <RegionCN779ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1);
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	2201      	movs	r2, #1
 801542c:	4619      	mov	r1, r3
 801542e:	4806      	ldr	r0, [pc, #24]	@ (8015448 <RegionCN779ChanMaskSet+0x48>)
 8015430:	f001 f819 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8015434:	e001      	b.n	801543a <RegionCN779ChanMaskSet+0x3a>
	}
	default:
		return false;
 8015436:	2300      	movs	r3, #0
 8015438:	e000      	b.n	801543c <RegionCN779ChanMaskSet+0x3c>
	}
	return true;
 801543a:	2301      	movs	r3, #1
}
 801543c:	4618      	mov	r0, r3
 801543e:	3708      	adds	r7, #8
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}
 8015444:	20006c9c 	.word	0x20006c9c
 8015448:	20006ca8 	.word	0x20006ca8

0801544c <RegionCN779AdrNext>:

bool RegionCN779AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b088      	sub	sp, #32
 8015450:	af00      	add	r7, sp, #0
 8015452:	60f8      	str	r0, [r7, #12]
 8015454:	60b9      	str	r1, [r7, #8]
 8015456:	607a      	str	r2, [r7, #4]
 8015458:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 801545a:	2300      	movs	r3, #0
 801545c:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	7a1b      	ldrb	r3, [r3, #8]
 8015462:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	7a5b      	ldrb	r3, [r3, #9]
 8015468:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	685a      	ldr	r2, [r3, #4]
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	785b      	ldrb	r3, [r3, #1]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d03f      	beq.n	80154fa <RegionCN779AdrNext+0xae>
	{
		if (datarate == CN779_TX_MIN_DATARATE)
 801547a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d105      	bne.n	801548e <RegionCN779AdrNext+0x42>
		{
			*adrAckCounter = 0;
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	2200      	movs	r2, #0
 8015486:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 8015488:	2300      	movs	r3, #0
 801548a:	77fb      	strb	r3, [r7, #31]
 801548c:	e035      	b.n	80154fa <RegionCN779AdrNext+0xae>
		}
		else
		{
			if (adrNext->AdrAckCounter >= CN779_ADR_ACK_LIMIT)
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	2b3f      	cmp	r3, #63	@ 0x3f
 8015494:	d904      	bls.n	80154a0 <RegionCN779AdrNext+0x54>
			{
				adrAckReq = true;
 8015496:	2301      	movs	r3, #1
 8015498:	77fb      	strb	r3, [r7, #31]
				txPower = CN779_MAX_TX_POWER;
 801549a:	2300      	movs	r3, #0
 801549c:	777b      	strb	r3, [r7, #29]
 801549e:	e001      	b.n	80154a4 <RegionCN779AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 80154a0:	2300      	movs	r3, #0
 80154a2:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (CN779_ADR_ACK_LIMIT + CN779_ADR_ACK_DELAY))
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	2b5f      	cmp	r3, #95	@ 0x5f
 80154aa:	d926      	bls.n	80154fa <RegionCN779AdrNext+0xae>
			{
				if ((adrNext->AdrAckCounter % CN779_ADR_ACK_DELAY) == 1)
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	f003 031f 	and.w	r3, r3, #31
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d120      	bne.n	80154fa <RegionCN779AdrNext+0xae>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80154b8:	2320      	movs	r3, #32
 80154ba:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 80154bc:	7fbb      	ldrb	r3, [r7, #30]
 80154be:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	7a9b      	ldrb	r3, [r3, #10]
 80154c4:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionCN779GetPhyParam(&getPhy);
 80154c6:	f107 0318 	add.w	r3, r7, #24
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7ff fd5c 	bl	8014f88 <RegionCN779GetPhyParam>
 80154d0:	4603      	mov	r3, r0
 80154d2:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	77bb      	strb	r3, [r7, #30]

					if (datarate == CN779_TX_MIN_DATARATE)
 80154d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d10c      	bne.n	80154fa <RegionCN779AdrNext+0xae>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 80154e0:	2300      	movs	r3, #0
 80154e2:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d006      	beq.n	80154fa <RegionCN779AdrNext+0xae>
						{
							// Re-enable default channels
							ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 80154ec:	4b08      	ldr	r3, [pc, #32]	@ (8015510 <RegionCN779AdrNext+0xc4>)
 80154ee:	881b      	ldrh	r3, [r3, #0]
 80154f0:	f043 0307 	orr.w	r3, r3, #7
 80154f4:	b29a      	uxth	r2, r3
 80154f6:	4b06      	ldr	r3, [pc, #24]	@ (8015510 <RegionCN779AdrNext+0xc4>)
 80154f8:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	*drOut = datarate;
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	7fba      	ldrb	r2, [r7, #30]
 80154fe:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	7f7a      	ldrb	r2, [r7, #29]
 8015504:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 8015506:	7ffb      	ldrb	r3, [r7, #31]
}
 8015508:	4618      	mov	r0, r3
 801550a:	3720      	adds	r7, #32
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}
 8015510:	20006c9c 	.word	0x20006c9c

08015514 <RegionCN779ComputeRxWindowParameters>:

void RegionCN779ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b088      	sub	sp, #32
 8015518:	af02      	add	r7, sp, #8
 801551a:	60ba      	str	r2, [r7, #8]
 801551c:	607b      	str	r3, [r7, #4]
 801551e:	4603      	mov	r3, r0
 8015520:	73fb      	strb	r3, [r7, #15]
 8015522:	460b      	mov	r3, r1
 8015524:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 8015526:	f04f 0200 	mov.w	r2, #0
 801552a:	f04f 0300 	mov.w	r3, #0
 801552e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, CN779_RX_MAX_DATARATE);
 8015532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015536:	2b07      	cmp	r3, #7
 8015538:	bfa8      	it	ge
 801553a:	2307      	movge	r3, #7
 801553c:	b25a      	sxtb	r2, r3
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015548:	4618      	mov	r0, r3
 801554a:	f7ff fc15 	bl	8014d78 <GetBandwidth>
 801554e:	4603      	mov	r3, r0
 8015550:	b2da      	uxtb	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	709a      	strb	r2, [r3, #2]

	if (rxConfigParams->Datarate == DR_7)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801555c:	2b07      	cmp	r3, #7
 801555e:	d10b      	bne.n	8015578 <RegionCN779ComputeRxWindowParameters+0x64>
	{ // FSK
		tSymbol = RegionCommonComputeSymbolTimeFsk(DataratesCN779[rxConfigParams->Datarate]);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015566:	461a      	mov	r2, r3
 8015568:	4b16      	ldr	r3, [pc, #88]	@ (80155c4 <RegionCN779ComputeRxWindowParameters+0xb0>)
 801556a:	5c9b      	ldrb	r3, [r3, r2]
 801556c:	4618      	mov	r0, r3
 801556e:	f001 fa07 	bl	8016980 <RegionCommonComputeSymbolTimeFsk>
 8015572:	ed87 0b04 	vstr	d0, [r7, #16]
 8015576:	e012      	b.n	801559e <RegionCN779ComputeRxWindowParameters+0x8a>
	}
	else
	{ // LoRa
		tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesCN779[rxConfigParams->Datarate], BandwidthsCN779[rxConfigParams->Datarate]);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801557e:	461a      	mov	r2, r3
 8015580:	4b10      	ldr	r3, [pc, #64]	@ (80155c4 <RegionCN779ComputeRxWindowParameters+0xb0>)
 8015582:	5c9a      	ldrb	r2, [r3, r2]
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801558a:	4619      	mov	r1, r3
 801558c:	4b0e      	ldr	r3, [pc, #56]	@ (80155c8 <RegionCN779ComputeRxWindowParameters+0xb4>)
 801558e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015592:	4619      	mov	r1, r3
 8015594:	4610      	mov	r0, r2
 8015596:	f001 f9c5 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 801559a:	ed87 0b04 	vstr	d0, [r7, #16]
	}

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	f103 0208 	add.w	r2, r3, #8
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	330c      	adds	r3, #12
 80155a8:	7bb8      	ldrb	r0, [r7, #14]
 80155aa:	9300      	str	r3, [sp, #0]
 80155ac:	4613      	mov	r3, r2
 80155ae:	2203      	movs	r2, #3
 80155b0:	68b9      	ldr	r1, [r7, #8]
 80155b2:	ed97 0b04 	vldr	d0, [r7, #16]
 80155b6:	f001 fa01 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 80155ba:	bf00      	nop
 80155bc:	3718      	adds	r7, #24
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}
 80155c2:	bf00      	nop
 80155c4:	0802527c 	.word	0x0802527c
 80155c8:	08025284 	.word	0x08025284

080155cc <RegionCN779RxConfig>:

bool RegionCN779RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 80155cc:	b590      	push	{r4, r7, lr}
 80155ce:	b091      	sub	sp, #68	@ 0x44
 80155d0:	af0a      	add	r7, sp, #40	@ 0x28
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]
	RadioModems_t modem;
	int8_t dr = rxConfig->Datarate;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	785b      	ldrb	r3, [r3, #1]
 80155da:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 80155dc:	2300      	movs	r3, #0
 80155de:	75bb      	strb	r3, [r7, #22]
	int8_t phyDr = 0;
 80155e0:	2300      	movs	r3, #0
 80155e2:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 80155ea:	4b53      	ldr	r3, [pc, #332]	@ (8015738 <RegionCN779RxConfig+0x16c>)
 80155ec:	689b      	ldr	r3, [r3, #8]
 80155ee:	4798      	blx	r3
 80155f0:	4603      	mov	r3, r0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d001      	beq.n	80155fa <RegionCN779RxConfig+0x2e>
	{
		return false;
 80155f6:	2300      	movs	r3, #0
 80155f8:	e099      	b.n	801572e <RegionCN779RxConfig+0x162>
	}

	if (rxConfig->Window == 0)
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	7cdb      	ldrb	r3, [r3, #19]
 80155fe:	f083 0301 	eor.w	r3, r3, #1
 8015602:	b2db      	uxtb	r3, r3
 8015604:	2b00      	cmp	r3, #0
 8015606:	d023      	beq.n	8015650 <RegionCN779RxConfig+0x84>
	{
		// Apply window 1 frequency
		frequency = Channels[rxConfig->Channel].Frequency;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	4619      	mov	r1, r3
 801560e:	4a4b      	ldr	r2, [pc, #300]	@ (801573c <RegionCN779RxConfig+0x170>)
 8015610:	460b      	mov	r3, r1
 8015612:	005b      	lsls	r3, r3, #1
 8015614:	440b      	add	r3, r1
 8015616:	009b      	lsls	r3, r3, #2
 8015618:	4413      	add	r3, r2
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	613b      	str	r3, [r7, #16]
		// Apply the alternative RX 1 window frequency, if it is available
		if (Channels[rxConfig->Channel].Rx1Frequency != 0)
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	4619      	mov	r1, r3
 8015624:	4a45      	ldr	r2, [pc, #276]	@ (801573c <RegionCN779RxConfig+0x170>)
 8015626:	460b      	mov	r3, r1
 8015628:	005b      	lsls	r3, r3, #1
 801562a:	440b      	add	r3, r1
 801562c:	009b      	lsls	r3, r3, #2
 801562e:	4413      	add	r3, r2
 8015630:	3304      	adds	r3, #4
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d00b      	beq.n	8015650 <RegionCN779RxConfig+0x84>
		{
			frequency = Channels[rxConfig->Channel].Rx1Frequency;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	4619      	mov	r1, r3
 801563e:	4a3f      	ldr	r2, [pc, #252]	@ (801573c <RegionCN779RxConfig+0x170>)
 8015640:	460b      	mov	r3, r1
 8015642:	005b      	lsls	r3, r3, #1
 8015644:	440b      	add	r3, r1
 8015646:	009b      	lsls	r3, r3, #2
 8015648:	4413      	add	r3, r2
 801564a:	3304      	adds	r3, #4
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	613b      	str	r3, [r7, #16]
		}
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesCN779[dr];
 8015650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015654:	4a3a      	ldr	r2, [pc, #232]	@ (8015740 <RegionCN779RxConfig+0x174>)
 8015656:	5cd3      	ldrb	r3, [r2, r3]
 8015658:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 801565a:	4b37      	ldr	r3, [pc, #220]	@ (8015738 <RegionCN779RxConfig+0x16c>)
 801565c:	691b      	ldr	r3, [r3, #16]
 801565e:	6938      	ldr	r0, [r7, #16]
 8015660:	4798      	blx	r3

	// Radio configuration
	if (dr == DR_7)
 8015662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015666:	2b07      	cmp	r3, #7
 8015668:	d125      	bne.n	80156b6 <RegionCN779RxConfig+0xea>
	{
		modem = MODEM_FSK;
 801566a:	2300      	movs	r3, #0
 801566c:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, 0, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
 801566e:	4b32      	ldr	r3, [pc, #200]	@ (8015738 <RegionCN779RxConfig+0x16c>)
 8015670:	69dc      	ldr	r4, [r3, #28]
 8015672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015676:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801567a:	fb02 f303 	mul.w	r3, r2, r3
 801567e:	461a      	mov	r2, r3
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	7c9b      	ldrb	r3, [r3, #18]
 8015684:	7df8      	ldrb	r0, [r7, #23]
 8015686:	9309      	str	r3, [sp, #36]	@ 0x24
 8015688:	2300      	movs	r3, #0
 801568a:	9308      	str	r3, [sp, #32]
 801568c:	2300      	movs	r3, #0
 801568e:	9307      	str	r3, [sp, #28]
 8015690:	2300      	movs	r3, #0
 8015692:	9306      	str	r3, [sp, #24]
 8015694:	2301      	movs	r3, #1
 8015696:	9305      	str	r3, [sp, #20]
 8015698:	2300      	movs	r3, #0
 801569a:	9304      	str	r3, [sp, #16]
 801569c:	2300      	movs	r3, #0
 801569e:	9303      	str	r3, [sp, #12]
 80156a0:	2300      	movs	r3, #0
 80156a2:	9302      	str	r3, [sp, #8]
 80156a4:	2305      	movs	r3, #5
 80156a6:	9301      	str	r3, [sp, #4]
 80156a8:	4b26      	ldr	r3, [pc, #152]	@ (8015744 <RegionCN779RxConfig+0x178>)
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	2300      	movs	r3, #0
 80156ae:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80156b2:	47a0      	blx	r4
 80156b4:	e020      	b.n	80156f8 <RegionCN779RxConfig+0x12c>
	}
	else
	{
		modem = MODEM_LORA;
 80156b6:	2301      	movs	r3, #1
 80156b8:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 80156ba:	4b1f      	ldr	r3, [pc, #124]	@ (8015738 <RegionCN779RxConfig+0x16c>)
 80156bc:	69dc      	ldr	r4, [r3, #28]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	789b      	ldrb	r3, [r3, #2]
 80156c2:	4619      	mov	r1, r3
 80156c4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	7c9b      	ldrb	r3, [r3, #18]
 80156cc:	7df8      	ldrb	r0, [r7, #23]
 80156ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80156d0:	2301      	movs	r3, #1
 80156d2:	9308      	str	r3, [sp, #32]
 80156d4:	2300      	movs	r3, #0
 80156d6:	9307      	str	r3, [sp, #28]
 80156d8:	2300      	movs	r3, #0
 80156da:	9306      	str	r3, [sp, #24]
 80156dc:	2300      	movs	r3, #0
 80156de:	9305      	str	r3, [sp, #20]
 80156e0:	2300      	movs	r3, #0
 80156e2:	9304      	str	r3, [sp, #16]
 80156e4:	2300      	movs	r3, #0
 80156e6:	9303      	str	r3, [sp, #12]
 80156e8:	2300      	movs	r3, #0
 80156ea:	9302      	str	r3, [sp, #8]
 80156ec:	2308      	movs	r3, #8
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	2300      	movs	r3, #0
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	2301      	movs	r3, #1
 80156f6:	47a0      	blx	r4
	}

	if (rxConfig->RepeaterSupport == true)
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	7c5b      	ldrb	r3, [r3, #17]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d005      	beq.n	801570c <RegionCN779RxConfig+0x140>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterCN779[dr];
 8015700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015704:	4a10      	ldr	r2, [pc, #64]	@ (8015748 <RegionCN779RxConfig+0x17c>)
 8015706:	5cd3      	ldrb	r3, [r2, r3]
 8015708:	75bb      	strb	r3, [r7, #22]
 801570a:	e004      	b.n	8015716 <RegionCN779RxConfig+0x14a>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateCN779[dr];
 801570c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015710:	4a0e      	ldr	r2, [pc, #56]	@ (801574c <RegionCN779RxConfig+0x180>)
 8015712:	5cd3      	ldrb	r3, [r2, r3]
 8015714:	75bb      	strb	r3, [r7, #22]
	}
	Radio.SetMaxPayloadLength(modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 8015716:	4b08      	ldr	r3, [pc, #32]	@ (8015738 <RegionCN779RxConfig+0x16c>)
 8015718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801571a:	7dba      	ldrb	r2, [r7, #22]
 801571c:	320d      	adds	r2, #13
 801571e:	b2d1      	uxtb	r1, r2
 8015720:	7dfa      	ldrb	r2, [r7, #23]
 8015722:	4610      	mov	r0, r2
 8015724:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	7bfa      	ldrb	r2, [r7, #15]
 801572a:	701a      	strb	r2, [r3, #0]
	return true;
 801572c:	2301      	movs	r3, #1
}
 801572e:	4618      	mov	r0, r3
 8015730:	371c      	adds	r7, #28
 8015732:	46bd      	mov	sp, r7
 8015734:	bd90      	pop	{r4, r7, pc}
 8015736:	bf00      	nop
 8015738:	08025450 	.word	0x08025450
 801573c:	2000762c 	.word	0x2000762c
 8015740:	0802527c 	.word	0x0802527c
 8015744:	00014585 	.word	0x00014585
 8015748:	080252ac 	.word	0x080252ac
 801574c:	080252a4 	.word	0x080252a4

08015750 <RegionCN779TxConfig>:

bool RegionCN779TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 8015750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015752:	b093      	sub	sp, #76	@ 0x4c
 8015754:	af0a      	add	r7, sp, #40	@ 0x28
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
	RadioModems_t modem;
	int8_t phyDr = DataratesCN779[txConfig->Datarate];
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015762:	461a      	mov	r2, r3
 8015764:	4b56      	ldr	r3, [pc, #344]	@ (80158c0 <RegionCN779TxConfig+0x170>)
 8015766:	5c9b      	ldrb	r3, [r3, r2]
 8015768:	77bb      	strb	r3, [r7, #30]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	781b      	ldrb	r3, [r3, #0]
 8015774:	4619      	mov	r1, r3
 8015776:	4a53      	ldr	r2, [pc, #332]	@ (80158c4 <RegionCN779TxConfig+0x174>)
 8015778:	460b      	mov	r3, r1
 801577a:	005b      	lsls	r3, r3, #1
 801577c:	440b      	add	r3, r1
 801577e:	009b      	lsls	r3, r3, #2
 8015780:	4413      	add	r3, r2
 8015782:	3309      	adds	r3, #9
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	4a50      	ldr	r2, [pc, #320]	@ (80158c8 <RegionCN779TxConfig+0x178>)
 8015788:	015b      	lsls	r3, r3, #5
 801578a:	4413      	add	r3, r2
 801578c:	3302      	adds	r3, #2
 801578e:	f993 1000 	ldrsb.w	r1, [r3]
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015798:	4b4c      	ldr	r3, [pc, #304]	@ (80158cc <RegionCN779TxConfig+0x17c>)
 801579a:	f7ff fb0d 	bl	8014db8 <LimitTxPower>
 801579e:	4603      	mov	r3, r0
 80157a0:	777b      	strb	r3, [r7, #29]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157a8:	4618      	mov	r0, r3
 80157aa:	f7ff fae5 	bl	8014d78 <GetBandwidth>
 80157ae:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 80157b0:	2300      	movs	r3, #0
 80157b2:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80157c0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80157c4:	eef0 0a47 	vmov.f32	s1, s14
 80157c8:	eeb0 0a67 	vmov.f32	s0, s15
 80157cc:	4618      	mov	r0, r3
 80157ce:	f001 f981 	bl	8016ad4 <RegionCommonComputeTxPower>
 80157d2:	4603      	mov	r3, r0
 80157d4:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 80157d6:	4b3e      	ldr	r3, [pc, #248]	@ (80158d0 <RegionCN779TxConfig+0x180>)
 80157d8:	691a      	ldr	r2, [r3, #16]
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	4618      	mov	r0, r3
 80157e0:	4938      	ldr	r1, [pc, #224]	@ (80158c4 <RegionCN779TxConfig+0x174>)
 80157e2:	4603      	mov	r3, r0
 80157e4:	005b      	lsls	r3, r3, #1
 80157e6:	4403      	add	r3, r0
 80157e8:	009b      	lsls	r3, r3, #2
 80157ea:	440b      	add	r3, r1
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	4618      	mov	r0, r3
 80157f0:	4790      	blx	r2

	if (txConfig->Datarate == DR_7)
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80157f8:	2b07      	cmp	r3, #7
 80157fa:	d124      	bne.n	8015846 <RegionCN779TxConfig+0xf6>
	{ // High Speed FSK channel
		modem = MODEM_FSK;
 80157fc:	2300      	movs	r3, #0
 80157fe:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000);
 8015800:	4b33      	ldr	r3, [pc, #204]	@ (80158d0 <RegionCN779TxConfig+0x180>)
 8015802:	6a1e      	ldr	r6, [r3, #32]
 8015804:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015808:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801580c:	fb02 f303 	mul.w	r3, r2, r3
 8015810:	461a      	mov	r2, r3
 8015812:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015816:	7ff8      	ldrb	r0, [r7, #31]
 8015818:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801581c:	9308      	str	r3, [sp, #32]
 801581e:	2300      	movs	r3, #0
 8015820:	9307      	str	r3, [sp, #28]
 8015822:	2300      	movs	r3, #0
 8015824:	9306      	str	r3, [sp, #24]
 8015826:	2300      	movs	r3, #0
 8015828:	9305      	str	r3, [sp, #20]
 801582a:	2301      	movs	r3, #1
 801582c:	9304      	str	r3, [sp, #16]
 801582e:	2300      	movs	r3, #0
 8015830:	9303      	str	r3, [sp, #12]
 8015832:	2305      	movs	r3, #5
 8015834:	9302      	str	r3, [sp, #8]
 8015836:	2300      	movs	r3, #0
 8015838:	9301      	str	r3, [sp, #4]
 801583a:	9200      	str	r2, [sp, #0]
 801583c:	69bb      	ldr	r3, [r7, #24]
 801583e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8015842:	47b0      	blx	r6
 8015844:	e01d      	b.n	8015882 <RegionCN779TxConfig+0x132>
	}
	else
	{
		modem = MODEM_LORA;
 8015846:	2301      	movs	r3, #1
 8015848:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 801584a:	4b21      	ldr	r3, [pc, #132]	@ (80158d0 <RegionCN779TxConfig+0x180>)
 801584c:	6a1e      	ldr	r6, [r3, #32]
 801584e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015852:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015856:	7ff8      	ldrb	r0, [r7, #31]
 8015858:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801585c:	9208      	str	r2, [sp, #32]
 801585e:	2200      	movs	r2, #0
 8015860:	9207      	str	r2, [sp, #28]
 8015862:	2200      	movs	r2, #0
 8015864:	9206      	str	r2, [sp, #24]
 8015866:	2200      	movs	r2, #0
 8015868:	9205      	str	r2, [sp, #20]
 801586a:	2201      	movs	r2, #1
 801586c:	9204      	str	r2, [sp, #16]
 801586e:	2200      	movs	r2, #0
 8015870:	9203      	str	r2, [sp, #12]
 8015872:	2208      	movs	r2, #8
 8015874:	9202      	str	r2, [sp, #8]
 8015876:	2201      	movs	r2, #1
 8015878:	9201      	str	r2, [sp, #4]
 801587a:	9300      	str	r3, [sp, #0]
 801587c:	69bb      	ldr	r3, [r7, #24]
 801587e:	2200      	movs	r2, #0
 8015880:	47b0      	blx	r6
	}

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(modem, txConfig->PktLen);
 8015882:	4b13      	ldr	r3, [pc, #76]	@ (80158d0 <RegionCN779TxConfig+0x180>)
 8015884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015886:	68fa      	ldr	r2, [r7, #12]
 8015888:	8992      	ldrh	r2, [r2, #12]
 801588a:	b2d1      	uxtb	r1, r2
 801588c:	7ffa      	ldrb	r2, [r7, #31]
 801588e:	4610      	mov	r0, r2
 8015890:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(modem, txConfig->PktLen);
 8015892:	4b0f      	ldr	r3, [pc, #60]	@ (80158d0 <RegionCN779TxConfig+0x180>)
 8015894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015896:	68fa      	ldr	r2, [r7, #12]
 8015898:	8992      	ldrh	r2, [r2, #12]
 801589a:	b2d1      	uxtb	r1, r2
 801589c:	7ffa      	ldrb	r2, [r7, #31]
 801589e:	4610      	mov	r0, r2
 80158a0:	4798      	blx	r3
 80158a2:	4603      	mov	r3, r0
 80158a4:	2200      	movs	r2, #0
 80158a6:	461c      	mov	r4, r3
 80158a8:	4615      	mov	r5, r2
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	e9c3 4500 	strd	r4, r5, [r3]

	*txPower = txPowerLimited;
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	7f7a      	ldrb	r2, [r7, #29]
 80158b4:	701a      	strb	r2, [r3, #0]
	return true;
 80158b6:	2301      	movs	r3, #1
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3724      	adds	r7, #36	@ 0x24
 80158bc:	46bd      	mov	sp, r7
 80158be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c0:	0802527c 	.word	0x0802527c
 80158c4:	2000762c 	.word	0x2000762c
 80158c8:	20000130 	.word	0x20000130
 80158cc:	20006c9c 	.word	0x20006c9c
 80158d0:	08025450 	.word	0x08025450

080158d4 <RegionCN779LinkAdrReq>:

uint8_t RegionCN779LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 80158d4:	b590      	push	{r4, r7, lr}
 80158d6:	b093      	sub	sp, #76	@ 0x4c
 80158d8:	af00      	add	r7, sp, #0
 80158da:	60f8      	str	r0, [r7, #12]
 80158dc:	60b9      	str	r1, [r7, #8]
 80158de:	607a      	str	r2, [r7, #4]
 80158e0:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 80158e2:	2307      	movs	r3, #7
 80158e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 80158e8:	2300      	movs	r3, #0
 80158ea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t bytesProcessed = 0;
 80158ee:	2300      	movs	r3, #0
 80158f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t chMask = 0;
 80158f4:	2300      	movs	r3, #0
 80158f6:	877b      	strh	r3, [r7, #58]	@ 0x3a
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	while (bytesProcessed < linkAdrReq->PayloadSize)
 80158f8:	e083      	b.n	8015a02 <RegionCN779LinkAdrReq+0x12e>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	681a      	ldr	r2, [r3, #0]
 80158fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015902:	4413      	add	r3, r2
 8015904:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015908:	4611      	mov	r1, r2
 801590a:	4618      	mov	r0, r3
 801590c:	f000 ff32 	bl	8016774 <RegionCommonParseLinkAdrReq>
 8015910:	4603      	mov	r3, r0
 8015912:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		if (nextIndex == 0)
 8015916:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801591a:	2b00      	cmp	r3, #0
 801591c:	d079      	beq.n	8015a12 <RegionCN779LinkAdrReq+0x13e>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 801591e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015922:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015926:	4413      	add	r3, r2
 8015928:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 801592c:	2307      	movs	r3, #7
 801592e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		// Setup temporary channels mask
		chMask = linkAdrParams.ChMask;
 8015932:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015936:	877b      	strh	r3, [r7, #58]	@ 0x3a

		// Verify channels mask
		if ((linkAdrParams.ChMaskCtrl == 0) && (chMask == 0))
 8015938:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801593c:	2b00      	cmp	r3, #0
 801593e:	d109      	bne.n	8015954 <RegionCN779LinkAdrReq+0x80>
 8015940:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015942:	2b00      	cmp	r3, #0
 8015944:	d106      	bne.n	8015954 <RegionCN779LinkAdrReq+0x80>
		{
			status &= 0xFE; // Channel mask KO
 8015946:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801594a:	f023 0301 	bic.w	r3, r3, #1
 801594e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015952:	e056      	b.n	8015a02 <RegionCN779LinkAdrReq+0x12e>
		}
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 8015954:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015958:	2b00      	cmp	r3, #0
 801595a:	d003      	beq.n	8015964 <RegionCN779LinkAdrReq+0x90>
 801595c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015960:	2b05      	cmp	r3, #5
 8015962:	d903      	bls.n	801596c <RegionCN779LinkAdrReq+0x98>
				 (linkAdrParams.ChMaskCtrl >= 7))
 8015964:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 8015968:	2b06      	cmp	r3, #6
 801596a:	d906      	bls.n	801597a <RegionCN779LinkAdrReq+0xa6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 801596c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015970:	f023 0301 	bic.w	r3, r3, #1
 8015974:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015978:	e043      	b.n	8015a02 <RegionCN779LinkAdrReq+0x12e>
		}
		else
		{
			for (uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++)
 801597a:	2300      	movs	r3, #0
 801597c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015980:	e03b      	b.n	80159fa <RegionCN779LinkAdrReq+0x126>
			{
				if (linkAdrParams.ChMaskCtrl == 6)
 8015982:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015986:	2b06      	cmp	r3, #6
 8015988:	d117      	bne.n	80159ba <RegionCN779LinkAdrReq+0xe6>
				{
					if (Channels[i].Frequency != 0)
 801598a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801598e:	4959      	ldr	r1, [pc, #356]	@ (8015af4 <RegionCN779LinkAdrReq+0x220>)
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	009b      	lsls	r3, r3, #2
 8015998:	440b      	add	r3, r1
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d027      	beq.n	80159f0 <RegionCN779LinkAdrReq+0x11c>
					{
						chMask |= 1 << i;
 80159a0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80159a4:	2201      	movs	r2, #1
 80159a6:	fa02 f303 	lsl.w	r3, r2, r3
 80159aa:	b21a      	sxth	r2, r3
 80159ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159ae:	b21b      	sxth	r3, r3
 80159b0:	4313      	orrs	r3, r2
 80159b2:	b21b      	sxth	r3, r3
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80159b8:	e01a      	b.n	80159f0 <RegionCN779LinkAdrReq+0x11c>
					}
				}
				else
				{
					if (((chMask & (1 << i)) != 0) &&
 80159ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159bc:	461a      	mov	r2, r3
 80159be:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80159c2:	fa42 f303 	asr.w	r3, r2, r3
 80159c6:	f003 0301 	and.w	r3, r3, #1
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d010      	beq.n	80159f0 <RegionCN779LinkAdrReq+0x11c>
						(Channels[i].Frequency == 0))
 80159ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80159d2:	4948      	ldr	r1, [pc, #288]	@ (8015af4 <RegionCN779LinkAdrReq+0x220>)
 80159d4:	4613      	mov	r3, r2
 80159d6:	005b      	lsls	r3, r3, #1
 80159d8:	4413      	add	r3, r2
 80159da:	009b      	lsls	r3, r3, #2
 80159dc:	440b      	add	r3, r1
 80159de:	681b      	ldr	r3, [r3, #0]
					if (((chMask & (1 << i)) != 0) &&
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d105      	bne.n	80159f0 <RegionCN779LinkAdrReq+0x11c>
					{					// Trying to enable an undefined channel
						status &= 0xFE; // Channel mask KO
 80159e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80159e8:	f023 0301 	bic.w	r3, r3, #1
 80159ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			for (uint8_t i = 0; i < CN779_MAX_NB_CHANNELS; i++)
 80159f0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80159f4:	3301      	adds	r3, #1
 80159f6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80159fa:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80159fe:	2b0f      	cmp	r3, #15
 8015a00:	d9bf      	bls.n	8015982 <RegionCN779LinkAdrReq+0xae>
	while (bytesProcessed < linkAdrReq->PayloadSize)
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	791b      	ldrb	r3, [r3, #4]
 8015a06:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	f4ff af75 	bcc.w	80158fa <RegionCN779LinkAdrReq+0x26>
 8015a10:	e000      	b.n	8015a14 <RegionCN779LinkAdrReq+0x140>
			break; // break loop, since no more request has been found
 8015a12:	bf00      	nop
			}
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 8015a14:	2301      	movs	r3, #1
 8015a16:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	795b      	ldrb	r3, [r3, #5]
 8015a1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionCN779GetPhyParam(&getPhy);
 8015a22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7ff faae 	bl	8014f88 <RegionCN779GetPhyParam>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 8015a30:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015a34:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	799b      	ldrb	r3, [r3, #6]
 8015a3a:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015a3c:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015a40:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015a42:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015a46:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015a48:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015a4c:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8015a54:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015a5c:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	7a5b      	ldrb	r3, [r3, #9]
 8015a62:	b25b      	sxtb	r3, r3
 8015a64:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = CN779_MAX_NB_CHANNELS;
 8015a66:	2310      	movs	r3, #16
 8015a68:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = &chMask;
 8015a6a:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015a6e:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 8015a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a72:	b25b      	sxtb	r3, r3
 8015a74:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = CN779_TX_MAX_DATARATE;
 8015a78:	2307      	movs	r3, #7
 8015a7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 8015a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8015af4 <RegionCN779LinkAdrReq+0x220>)
 8015a80:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = CN779_MIN_TX_POWER;
 8015a82:	2305      	movs	r3, #5
 8015a84:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = CN779_MAX_TX_POWER;
 8015a88:	2300      	movs	r3, #0
 8015a8a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 8015a8e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015a92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015a96:	1c9a      	adds	r2, r3, #2
 8015a98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015a9c:	1c59      	adds	r1, r3, #1
 8015a9e:	f107 0014 	add.w	r0, r7, #20
 8015aa2:	4623      	mov	r3, r4
 8015aa4:	f000 feb8 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	// Update channelsMask if everything is correct
	if (status == 0x07)
 8015aae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ab2:	2b07      	cmp	r3, #7
 8015ab4:	d107      	bne.n	8015ac6 <RegionCN779LinkAdrReq+0x1f2>
	{
		// Set the channels mask to a default value
		memset(ChannelsMask, 0, sizeof(ChannelsMask));
 8015ab6:	220c      	movs	r2, #12
 8015ab8:	2100      	movs	r1, #0
 8015aba:	480f      	ldr	r0, [pc, #60]	@ (8015af8 <RegionCN779LinkAdrReq+0x224>)
 8015abc:	f00c fbc6 	bl	802224c <memset>
		// Update the channels mask
		ChannelsMask[0] = chMask;
 8015ac0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8015af8 <RegionCN779LinkAdrReq+0x224>)
 8015ac4:	801a      	strh	r2, [r3, #0]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 8015ac6:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 8015ace:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 8015ad6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 8015ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015ae0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015ae4:	701a      	strb	r2, [r3, #0]

	return status;
 8015ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	374c      	adds	r7, #76	@ 0x4c
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd90      	pop	{r4, r7, pc}
 8015af2:	bf00      	nop
 8015af4:	2000762c 	.word	0x2000762c
 8015af8:	20006c9c 	.word	0x20006c9c

08015afc <RegionCN779RxParamSetupReq>:

uint8_t RegionCN779RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b084      	sub	sp, #16
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 8015b04:	2307      	movs	r3, #7
 8015b06:	73fb      	strb	r3, [r7, #15]

	// Verify radio frequency
	if (Radio.CheckRfFrequency(rxParamSetupReq->Frequency) == false)
 8015b08:	4b19      	ldr	r3, [pc, #100]	@ (8015b70 <RegionCN779RxParamSetupReq+0x74>)
 8015b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	6852      	ldr	r2, [r2, #4]
 8015b10:	4610      	mov	r0, r2
 8015b12:	4798      	blx	r3
 8015b14:	4603      	mov	r3, r0
 8015b16:	f083 0301 	eor.w	r3, r3, #1
 8015b1a:	b2db      	uxtb	r3, r3
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d003      	beq.n	8015b28 <RegionCN779RxParamSetupReq+0x2c>
	{
		status &= 0xFE; // Channel frequency KO
 8015b20:	7bfb      	ldrb	r3, [r7, #15]
 8015b22:	f023 0301 	bic.w	r3, r3, #1
 8015b26:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, CN779_RX_MIN_DATARATE, CN779_RX_MAX_DATARATE) == false)
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8015b2e:	2207      	movs	r2, #7
 8015b30:	2100      	movs	r1, #0
 8015b32:	4618      	mov	r0, r3
 8015b34:	f000 fc18 	bl	8016368 <RegionCommonValueInRange>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d103      	bne.n	8015b46 <RegionCN779RxParamSetupReq+0x4a>
	{
		status &= 0xFD; // Datarate KO
 8015b3e:	7bfb      	ldrb	r3, [r7, #15]
 8015b40:	f023 0302 	bic.w	r3, r3, #2
 8015b44:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, CN779_MIN_RX1_DR_OFFSET, CN779_MAX_RX1_DR_OFFSET) == false)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015b4c:	2205      	movs	r2, #5
 8015b4e:	2100      	movs	r1, #0
 8015b50:	4618      	mov	r0, r3
 8015b52:	f000 fc09 	bl	8016368 <RegionCommonValueInRange>
 8015b56:	4603      	mov	r3, r0
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d103      	bne.n	8015b64 <RegionCN779RxParamSetupReq+0x68>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 8015b5c:	7bfb      	ldrb	r3, [r7, #15]
 8015b5e:	f023 0304 	bic.w	r3, r3, #4
 8015b62:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8015b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b66:	4618      	mov	r0, r3
 8015b68:	3710      	adds	r7, #16
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	bd80      	pop	{r7, pc}
 8015b6e:	bf00      	nop
 8015b70:	08025450 	.word	0x08025450

08015b74 <RegionCN779NewChannelReq>:

uint8_t RegionCN779NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b086      	sub	sp, #24
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 8015b7c:	2303      	movs	r3, #3
 8015b7e:	75fb      	strb	r3, [r7, #23]
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	if (newChannelReq->NewChannel->Frequency == 0)
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d114      	bne.n	8015bb4 <RegionCN779NewChannelReq+0x40>
	{
		channelRemove.ChannelId = newChannelReq->ChannelId;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	723b      	strb	r3, [r7, #8]

		// Remove
		if (RegionCN779ChannelsRemove(&channelRemove) == false)
 8015b94:	f107 0308 	add.w	r3, r7, #8
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f000 fa89 	bl	80160b0 <RegionCN779ChannelsRemove>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	f083 0301 	eor.w	r3, r3, #1
 8015ba4:	b2db      	uxtb	r3, r3
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d03b      	beq.n	8015c22 <RegionCN779NewChannelReq+0xae>
		{
			status &= 0xFC;
 8015baa:	7dfb      	ldrb	r3, [r7, #23]
 8015bac:	f023 0303 	bic.w	r3, r3, #3
 8015bb0:	75fb      	strb	r3, [r7, #23]
 8015bb2:	e036      	b.n	8015c22 <RegionCN779NewChannelReq+0xae>
		}
	}
	else
	{
		channelAdd.NewChannel = newChannelReq->NewChannel;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	60fb      	str	r3, [r7, #12]
		channelAdd.ChannelId = newChannelReq->ChannelId;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015bc0:	b2db      	uxtb	r3, r3
 8015bc2:	743b      	strb	r3, [r7, #16]

		switch (RegionCN779ChannelAdd(&channelAdd))
 8015bc4:	f107 030c 	add.w	r3, r7, #12
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f000 f9af 	bl	8015f2c <RegionCN779ChannelAdd>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b06      	cmp	r3, #6
 8015bd2:	d820      	bhi.n	8015c16 <RegionCN779NewChannelReq+0xa2>
 8015bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8015bdc <RegionCN779NewChannelReq+0x68>)
 8015bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bda:	bf00      	nop
 8015bdc:	08015c21 	.word	0x08015c21
 8015be0:	08015c17 	.word	0x08015c17
 8015be4:	08015c17 	.word	0x08015c17
 8015be8:	08015c17 	.word	0x08015c17
 8015bec:	08015bf9 	.word	0x08015bf9
 8015bf0:	08015c03 	.word	0x08015c03
 8015bf4:	08015c0d 	.word	0x08015c0d
		{
			break;
		}
		case LORAMAC_STATUS_FREQUENCY_INVALID:
		{
			status &= 0xFE;
 8015bf8:	7dfb      	ldrb	r3, [r7, #23]
 8015bfa:	f023 0301 	bic.w	r3, r3, #1
 8015bfe:	75fb      	strb	r3, [r7, #23]
			break;
 8015c00:	e00f      	b.n	8015c22 <RegionCN779NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_DATARATE_INVALID:
		{
			status &= 0xFD;
 8015c02:	7dfb      	ldrb	r3, [r7, #23]
 8015c04:	f023 0302 	bic.w	r3, r3, #2
 8015c08:	75fb      	strb	r3, [r7, #23]
			break;
 8015c0a:	e00a      	b.n	8015c22 <RegionCN779NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		{
			status &= 0xFC;
 8015c0c:	7dfb      	ldrb	r3, [r7, #23]
 8015c0e:	f023 0303 	bic.w	r3, r3, #3
 8015c12:	75fb      	strb	r3, [r7, #23]
			break;
 8015c14:	e005      	b.n	8015c22 <RegionCN779NewChannelReq+0xae>
		}
		default:
		{
			status &= 0xFC;
 8015c16:	7dfb      	ldrb	r3, [r7, #23]
 8015c18:	f023 0303 	bic.w	r3, r3, #3
 8015c1c:	75fb      	strb	r3, [r7, #23]
			break;
 8015c1e:	e000      	b.n	8015c22 <RegionCN779NewChannelReq+0xae>
			break;
 8015c20:	bf00      	nop
		}
		}
	}

	return status;
 8015c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c24:	4618      	mov	r0, r3
 8015c26:	3718      	adds	r7, #24
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <RegionCN779TxParamSetupReq>:

int8_t RegionCN779TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	b083      	sub	sp, #12
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
	return -1;
 8015c34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	370c      	adds	r7, #12
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr

08015c44 <RegionCN779DlChannelReq>:

uint8_t RegionCN779DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b084      	sub	sp, #16
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 8015c4c:	2303      	movs	r3, #3
 8015c4e:	73fb      	strb	r3, [r7, #15]

	// Verify if the frequency is supported
	if (VerifyTxFreq(dlChannelReq->Rx1Frequency) == false)
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7ff f8cb 	bl	8014df0 <VerifyTxFreq>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	f083 0301 	eor.w	r3, r3, #1
 8015c60:	b2db      	uxtb	r3, r3
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d003      	beq.n	8015c6e <RegionCN779DlChannelReq+0x2a>
	{
		status &= 0xFE;
 8015c66:	7bfb      	ldrb	r3, [r7, #15]
 8015c68:	f023 0301 	bic.w	r3, r3, #1
 8015c6c:	73fb      	strb	r3, [r7, #15]
	}

	// Verify if an uplink frequency exists
	if (Channels[dlChannelReq->ChannelId].Frequency == 0)
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	4619      	mov	r1, r3
 8015c74:	4a10      	ldr	r2, [pc, #64]	@ (8015cb8 <RegionCN779DlChannelReq+0x74>)
 8015c76:	460b      	mov	r3, r1
 8015c78:	005b      	lsls	r3, r3, #1
 8015c7a:	440b      	add	r3, r1
 8015c7c:	009b      	lsls	r3, r3, #2
 8015c7e:	4413      	add	r3, r2
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d103      	bne.n	8015c8e <RegionCN779DlChannelReq+0x4a>
	{
		status &= 0xFD;
 8015c86:	7bfb      	ldrb	r3, [r7, #15]
 8015c88:	f023 0302 	bic.w	r3, r3, #2
 8015c8c:	73fb      	strb	r3, [r7, #15]
	}

	// Apply Rx1 frequency, if the status is OK
	if (status == 0x03)
 8015c8e:	7bfb      	ldrb	r3, [r7, #15]
 8015c90:	2b03      	cmp	r3, #3
 8015c92:	d10c      	bne.n	8015cae <RegionCN779DlChannelReq+0x6a>
	{
		Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	781b      	ldrb	r3, [r3, #0]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	685a      	ldr	r2, [r3, #4]
 8015c9e:	4906      	ldr	r1, [pc, #24]	@ (8015cb8 <RegionCN779DlChannelReq+0x74>)
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	005b      	lsls	r3, r3, #1
 8015ca4:	4403      	add	r3, r0
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	440b      	add	r3, r1
 8015caa:	3304      	adds	r3, #4
 8015cac:	601a      	str	r2, [r3, #0]
	}

	return status;
 8015cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3710      	adds	r7, #16
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	2000762c 	.word	0x2000762c

08015cbc <RegionCN779AlternateDr>:

int8_t RegionCN779AlternateDr(AlternateDrParams_t *alternateDr)
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	b085      	sub	sp, #20
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	73fb      	strb	r3, [r7, #15]

	if ((alternateDr->NbTrials % 48) == 0)
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	881a      	ldrh	r2, [r3, #0]
 8015ccc:	4b23      	ldr	r3, [pc, #140]	@ (8015d5c <RegionCN779AlternateDr+0xa0>)
 8015cce:	fba3 1302 	umull	r1, r3, r3, r2
 8015cd2:	0959      	lsrs	r1, r3, #5
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	005b      	lsls	r3, r3, #1
 8015cd8:	440b      	add	r3, r1
 8015cda:	011b      	lsls	r3, r3, #4
 8015cdc:	1ad3      	subs	r3, r2, r3
 8015cde:	b29b      	uxth	r3, r3
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d102      	bne.n	8015cea <RegionCN779AlternateDr+0x2e>
	{
		datarate = DR_0;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	73fb      	strb	r3, [r7, #15]
 8015ce8:	e030      	b.n	8015d4c <RegionCN779AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 32) == 0)
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	881b      	ldrh	r3, [r3, #0]
 8015cee:	f003 031f 	and.w	r3, r3, #31
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d102      	bne.n	8015cfe <RegionCN779AlternateDr+0x42>
	{
		datarate = DR_1;
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	73fb      	strb	r3, [r7, #15]
 8015cfc:	e026      	b.n	8015d4c <RegionCN779AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 24) == 0)
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	881a      	ldrh	r2, [r3, #0]
 8015d02:	4b16      	ldr	r3, [pc, #88]	@ (8015d5c <RegionCN779AlternateDr+0xa0>)
 8015d04:	fba3 1302 	umull	r1, r3, r3, r2
 8015d08:	0919      	lsrs	r1, r3, #4
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	005b      	lsls	r3, r3, #1
 8015d0e:	440b      	add	r3, r1
 8015d10:	00db      	lsls	r3, r3, #3
 8015d12:	1ad3      	subs	r3, r2, r3
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d102      	bne.n	8015d20 <RegionCN779AlternateDr+0x64>
	{
		datarate = DR_2;
 8015d1a:	2302      	movs	r3, #2
 8015d1c:	73fb      	strb	r3, [r7, #15]
 8015d1e:	e015      	b.n	8015d4c <RegionCN779AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 16) == 0)
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	881b      	ldrh	r3, [r3, #0]
 8015d24:	f003 030f 	and.w	r3, r3, #15
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d102      	bne.n	8015d34 <RegionCN779AlternateDr+0x78>
	{
		datarate = DR_3;
 8015d2e:	2303      	movs	r3, #3
 8015d30:	73fb      	strb	r3, [r7, #15]
 8015d32:	e00b      	b.n	8015d4c <RegionCN779AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 8) == 0)
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	881b      	ldrh	r3, [r3, #0]
 8015d38:	f003 0307 	and.w	r3, r3, #7
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d102      	bne.n	8015d48 <RegionCN779AlternateDr+0x8c>
	{
		datarate = DR_4;
 8015d42:	2304      	movs	r3, #4
 8015d44:	73fb      	strb	r3, [r7, #15]
 8015d46:	e001      	b.n	8015d4c <RegionCN779AlternateDr+0x90>
	}
	else
	{
		datarate = DR_5;
 8015d48:	2305      	movs	r3, #5
 8015d4a:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 8015d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3714      	adds	r7, #20
 8015d54:	46bd      	mov	sp, r7
 8015d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5a:	4770      	bx	lr
 8015d5c:	aaaaaaab 	.word	0xaaaaaaab

08015d60 <RegionCN779CalcBackOff>:

void RegionCN779CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b08a      	sub	sp, #40	@ 0x28
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 8015d68:	4b11      	ldr	r3, [pc, #68]	@ (8015db0 <RegionCN779CalcBackOff+0x50>)
 8015d6a:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 8015d6c:	4b11      	ldr	r3, [pc, #68]	@ (8015db4 <RegionCN779CalcBackOff+0x54>)
 8015d6e:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	785b      	ldrb	r3, [r3, #1]
 8015d74:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	789b      	ldrb	r3, [r3, #2]
 8015d80:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	78db      	ldrb	r3, [r3, #3]
 8015d86:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015d8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8015d98:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 8015d9c:	f107 0308 	add.w	r3, r7, #8
 8015da0:	4618      	mov	r0, r3
 8015da2:	f000 fec9 	bl	8016b38 <RegionCommonCalcBackOff>
}
 8015da6:	bf00      	nop
 8015da8:	3728      	adds	r7, #40	@ 0x28
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	2000762c 	.word	0x2000762c
 8015db4:	20000130 	.word	0x20000130

08015db8 <RegionCN779NextChannel>:

bool RegionCN779NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 8015db8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015dbc:	b092      	sub	sp, #72	@ 0x48
 8015dbe:	af04      	add	r7, sp, #16
 8015dc0:	60f8      	str	r0, [r7, #12]
 8015dc2:	60b9      	str	r1, [r7, #8]
 8015dc4:	607a      	str	r2, [r7, #4]
 8015dc6:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t delayTx = 0;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t enabledChannels[CN779_MAX_NB_CHANNELS] = {0};
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	617b      	str	r3, [r7, #20]
 8015dd8:	f107 0318 	add.w	r3, r7, #24
 8015ddc:	2200      	movs	r2, #0
 8015dde:	601a      	str	r2, [r3, #0]
 8015de0:	605a      	str	r2, [r3, #4]
 8015de2:	609a      	str	r2, [r3, #8]
	TimerTime_t nextTxDelay = 0;
 8015de4:	f04f 0200 	mov.w	r2, #0
 8015de8:	f04f 0300 	mov.w	r3, #0
 8015dec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if (RegionCommonCountChannels(ChannelsMask, 0, 1) == 0)
 8015df0:	2201      	movs	r2, #1
 8015df2:	2100      	movs	r1, #0
 8015df4:	484a      	ldr	r0, [pc, #296]	@ (8015f20 <RegionCN779NextChannel+0x168>)
 8015df6:	f000 fb0a 	bl	801640e <RegionCommonCountChannels>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d106      	bne.n	8015e0e <RegionCN779NextChannel+0x56>
	{ // Reactivate default channels
		ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 8015e00:	4b47      	ldr	r3, [pc, #284]	@ (8015f20 <RegionCN779NextChannel+0x168>)
 8015e02:	881b      	ldrh	r3, [r3, #0]
 8015e04:	f043 0307 	orr.w	r3, r3, #7
 8015e08:	b29a      	uxth	r2, r3
 8015e0a:	4b45      	ldr	r3, [pc, #276]	@ (8015f20 <RegionCN779NextChannel+0x168>)
 8015e0c:	801a      	strh	r2, [r3, #0]
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015e1a:	4610      	mov	r0, r2
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	f00b f91d 	bl	802105c <util_timer_get_elapsedtime>
 8015e22:	4602      	mov	r2, r0
 8015e24:	460b      	mov	r3, r1
 8015e26:	42a2      	cmp	r2, r4
 8015e28:	41ab      	sbcs	r3, r5
 8015e2a:	d326      	bcc.n	8015e7a <RegionCN779NextChannel+0xc2>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 8015e2c:	6839      	ldr	r1, [r7, #0]
 8015e2e:	f04f 0200 	mov.w	r2, #0
 8015e32:	f04f 0300 	mov.w	r3, #0
 8015e36:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, CN779_MAX_NB_BANDS);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	7c58      	ldrb	r0, [r3, #17]
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	7c99      	ldrb	r1, [r3, #18]
 8015e42:	2301      	movs	r3, #1
 8015e44:	4a37      	ldr	r2, [pc, #220]	@ (8015f24 <RegionCN779NextChannel+0x16c>)
 8015e46:	f000 fb56 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 8015e4a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Joined, nextChanParams->Datarate,
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	7c58      	ldrb	r0, [r3, #17]
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8015e58:	b2d9      	uxtb	r1, r3
 8015e5a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8015e5e:	9302      	str	r3, [sp, #8]
 8015e60:	f107 0314 	add.w	r3, r7, #20
 8015e64:	9301      	str	r3, [sp, #4]
 8015e66:	4b2f      	ldr	r3, [pc, #188]	@ (8015f24 <RegionCN779NextChannel+0x16c>)
 8015e68:	9300      	str	r3, [sp, #0]
 8015e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8015f28 <RegionCN779NextChannel+0x170>)
 8015e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8015f20 <RegionCN779NextChannel+0x168>)
 8015e6e:	f7fe ffe5 	bl	8014e3c <CountNbOfEnabledChannels>
 8015e72:	4603      	mov	r3, r0
 8015e74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015e78:	e017      	b.n	8015eaa <RegionCN779NextChannel+0xf2>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 8015e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e7e:	3301      	adds	r3, #1
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8015e92:	4610      	mov	r0, r2
 8015e94:	4619      	mov	r1, r3
 8015e96:	f00b f8e1 	bl	802105c <util_timer_get_elapsedtime>
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	460b      	mov	r3, r1
 8015e9e:	ebb4 0802 	subs.w	r8, r4, r2
 8015ea2:	eb65 0903 	sbc.w	r9, r5, r3
 8015ea6:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}

	if (nbEnabledChannels > 0)
 8015eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d016      	beq.n	8015ee0 <RegionCN779NextChannel+0x128>
	{
		// We found a valid channel
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 8015eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015eb6:	3b01      	subs	r3, #1
 8015eb8:	4619      	mov	r1, r3
 8015eba:	2000      	movs	r0, #0
 8015ebc:	f00a fe5a 	bl	8020b74 <randr>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	3338      	adds	r3, #56	@ 0x38
 8015ec4:	443b      	add	r3, r7
 8015ec6:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8015eca:	68bb      	ldr	r3, [r7, #8]
 8015ecc:	701a      	strb	r2, [r3, #0]

		*time = 0;
 8015ece:	6879      	ldr	r1, [r7, #4]
 8015ed0:	f04f 0200 	mov.w	r2, #0
 8015ed4:	f04f 0300 	mov.w	r3, #0
 8015ed8:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8015edc:	2301      	movs	r3, #1
 8015ede:	e019      	b.n	8015f14 <RegionCN779NextChannel+0x15c>
	}
	else
	{
		if (delayTx > 0)
 8015ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d006      	beq.n	8015ef6 <RegionCN779NextChannel+0x13e>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 8015ee8:	6879      	ldr	r1, [r7, #4]
 8015eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8015eee:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	e00e      	b.n	8015f14 <RegionCN779NextChannel+0x15c>
		}
		// Datarate not supported by any channel, restore defaults
		ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 8015ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8015f20 <RegionCN779NextChannel+0x168>)
 8015ef8:	881b      	ldrh	r3, [r3, #0]
 8015efa:	f043 0307 	orr.w	r3, r3, #7
 8015efe:	b29a      	uxth	r2, r3
 8015f00:	4b07      	ldr	r3, [pc, #28]	@ (8015f20 <RegionCN779NextChannel+0x168>)
 8015f02:	801a      	strh	r2, [r3, #0]
		*time = 0;
 8015f04:	6879      	ldr	r1, [r7, #4]
 8015f06:	f04f 0200 	mov.w	r2, #0
 8015f0a:	f04f 0300 	mov.w	r3, #0
 8015f0e:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 8015f12:	2300      	movs	r3, #0
	}
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3738      	adds	r7, #56	@ 0x38
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8015f1e:	bf00      	nop
 8015f20:	20006c9c 	.word	0x20006c9c
 8015f24:	20000130 	.word	0x20000130
 8015f28:	2000762c 	.word	0x2000762c

08015f2c <RegionCN779ChannelAdd>:

LoRaMacStatus_t RegionCN779ChannelAdd(ChannelAddParams_t *channelAdd)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
	uint8_t band = 0;
 8015f34:	2300      	movs	r3, #0
 8015f36:	737b      	strb	r3, [r7, #13]
	bool drInvalid = false;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	73fb      	strb	r3, [r7, #15]
	bool freqInvalid = false;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	73bb      	strb	r3, [r7, #14]
	uint8_t id = channelAdd->ChannelId;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	791b      	ldrb	r3, [r3, #4]
 8015f44:	733b      	strb	r3, [r7, #12]

	if (id >= CN779_MAX_NB_CHANNELS)
 8015f46:	7b3b      	ldrb	r3, [r7, #12]
 8015f48:	2b0f      	cmp	r3, #15
 8015f4a:	d901      	bls.n	8015f50 <RegionCN779ChannelAdd+0x24>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 8015f4c:	2303      	movs	r3, #3
 8015f4e:	e0a6      	b.n	801609e <RegionCN779ChannelAdd+0x172>
	}

	// Validate the datarate range
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Min, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE) == false)
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	7a1b      	ldrb	r3, [r3, #8]
 8015f56:	f343 0303 	sbfx	r3, r3, #0, #4
 8015f5a:	b25b      	sxtb	r3, r3
 8015f5c:	2207      	movs	r2, #7
 8015f5e:	2100      	movs	r1, #0
 8015f60:	4618      	mov	r0, r3
 8015f62:	f000 fa01 	bl	8016368 <RegionCommonValueInRange>
 8015f66:	4603      	mov	r3, r0
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d101      	bne.n	8015f70 <RegionCN779ChannelAdd+0x44>
	{
		drInvalid = true;
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	73fb      	strb	r3, [r7, #15]
	}
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, CN779_TX_MIN_DATARATE, CN779_TX_MAX_DATARATE) == false)
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	7a1b      	ldrb	r3, [r3, #8]
 8015f76:	f343 1303 	sbfx	r3, r3, #4, #4
 8015f7a:	b25b      	sxtb	r3, r3
 8015f7c:	2207      	movs	r2, #7
 8015f7e:	2100      	movs	r1, #0
 8015f80:	4618      	mov	r0, r3
 8015f82:	f000 f9f1 	bl	8016368 <RegionCommonValueInRange>
 8015f86:	4603      	mov	r3, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d101      	bne.n	8015f90 <RegionCN779ChannelAdd+0x64>
	{
		drInvalid = true;
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	73fb      	strb	r3, [r7, #15]
	}
	if (channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	7a1b      	ldrb	r3, [r3, #8]
 8015f96:	f343 0303 	sbfx	r3, r3, #0, #4
 8015f9a:	b25a      	sxtb	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	7a1b      	ldrb	r3, [r3, #8]
 8015fa2:	f343 1303 	sbfx	r3, r3, #4, #4
 8015fa6:	b25b      	sxtb	r3, r3
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	dd01      	ble.n	8015fb0 <RegionCN779ChannelAdd+0x84>
	{
		drInvalid = true;
 8015fac:	2301      	movs	r3, #1
 8015fae:	73fb      	strb	r3, [r7, #15]
	}

	// Default channels don't accept all values
	if (id < CN779_NUMB_DEFAULT_CHANNELS)
 8015fb0:	7b3b      	ldrb	r3, [r7, #12]
 8015fb2:	2b02      	cmp	r3, #2
 8015fb4:	d828      	bhi.n	8016008 <RegionCN779ChannelAdd+0xdc>
	{
		// Validate the datarate range for min: must be DR_0
		if (channelAdd->NewChannel->DrRange.Fields.Min > DR_0)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	7a1b      	ldrb	r3, [r3, #8]
 8015fbc:	f343 0303 	sbfx	r3, r3, #0, #4
 8015fc0:	b25b      	sxtb	r3, r3
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	dd01      	ble.n	8015fca <RegionCN779ChannelAdd+0x9e>
		{
			drInvalid = true;
 8015fc6:	2301      	movs	r3, #1
 8015fc8:	73fb      	strb	r3, [r7, #15]
		}
		// Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
		if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, DR_5, CN779_TX_MAX_DATARATE) == false)
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	7a1b      	ldrb	r3, [r3, #8]
 8015fd0:	f343 1303 	sbfx	r3, r3, #4, #4
 8015fd4:	b25b      	sxtb	r3, r3
 8015fd6:	2207      	movs	r2, #7
 8015fd8:	2105      	movs	r1, #5
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f000 f9c4 	bl	8016368 <RegionCommonValueInRange>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d101      	bne.n	8015fea <RegionCN779ChannelAdd+0xbe>
		{
			drInvalid = true;
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	73fb      	strb	r3, [r7, #15]
		}
		// We are not allowed to change the frequency
		if (channelAdd->NewChannel->Frequency != Channels[id].Frequency)
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	6819      	ldr	r1, [r3, #0]
 8015ff0:	7b3a      	ldrb	r2, [r7, #12]
 8015ff2:	482d      	ldr	r0, [pc, #180]	@ (80160a8 <RegionCN779ChannelAdd+0x17c>)
 8015ff4:	4613      	mov	r3, r2
 8015ff6:	005b      	lsls	r3, r3, #1
 8015ff8:	4413      	add	r3, r2
 8015ffa:	009b      	lsls	r3, r3, #2
 8015ffc:	4403      	add	r3, r0
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4299      	cmp	r1, r3
 8016002:	d001      	beq.n	8016008 <RegionCN779ChannelAdd+0xdc>
		{
			freqInvalid = true;
 8016004:	2301      	movs	r3, #1
 8016006:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check frequency
	if (freqInvalid == false)
 8016008:	7bbb      	ldrb	r3, [r7, #14]
 801600a:	f083 0301 	eor.w	r3, r3, #1
 801600e:	b2db      	uxtb	r3, r3
 8016010:	2b00      	cmp	r3, #0
 8016012:	d00d      	beq.n	8016030 <RegionCN779ChannelAdd+0x104>
	{
		if (VerifyTxFreq(channelAdd->NewChannel->Frequency) == false)
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	4618      	mov	r0, r3
 801601c:	f7fe fee8 	bl	8014df0 <VerifyTxFreq>
 8016020:	4603      	mov	r3, r0
 8016022:	f083 0301 	eor.w	r3, r3, #1
 8016026:	b2db      	uxtb	r3, r3
 8016028:	2b00      	cmp	r3, #0
 801602a:	d001      	beq.n	8016030 <RegionCN779ChannelAdd+0x104>
		{
			freqInvalid = true;
 801602c:	2301      	movs	r3, #1
 801602e:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check status
	if ((drInvalid == true) && (freqInvalid == true))
 8016030:	7bfb      	ldrb	r3, [r7, #15]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d004      	beq.n	8016040 <RegionCN779ChannelAdd+0x114>
 8016036:	7bbb      	ldrb	r3, [r7, #14]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <RegionCN779ChannelAdd+0x114>
	{
		return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801603c:	2306      	movs	r3, #6
 801603e:	e02e      	b.n	801609e <RegionCN779ChannelAdd+0x172>
	}
	if (drInvalid == true)
 8016040:	7bfb      	ldrb	r3, [r7, #15]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d001      	beq.n	801604a <RegionCN779ChannelAdd+0x11e>
	{
		return LORAMAC_STATUS_DATARATE_INVALID;
 8016046:	2305      	movs	r3, #5
 8016048:	e029      	b.n	801609e <RegionCN779ChannelAdd+0x172>
	}
	if (freqInvalid == true)
 801604a:	7bbb      	ldrb	r3, [r7, #14]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d001      	beq.n	8016054 <RegionCN779ChannelAdd+0x128>
	{
		return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016050:	2304      	movs	r3, #4
 8016052:	e024      	b.n	801609e <RegionCN779ChannelAdd+0x172>
	}

	memcpy(&(Channels[id]), channelAdd->NewChannel, sizeof(Channels[id]));
 8016054:	7b3a      	ldrb	r2, [r7, #12]
 8016056:	4613      	mov	r3, r2
 8016058:	005b      	lsls	r3, r3, #1
 801605a:	4413      	add	r3, r2
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	4a12      	ldr	r2, [pc, #72]	@ (80160a8 <RegionCN779ChannelAdd+0x17c>)
 8016060:	1898      	adds	r0, r3, r2
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	220c      	movs	r2, #12
 8016068:	4619      	mov	r1, r3
 801606a:	f00c f97e 	bl	802236a <memcpy>
	Channels[id].Band = band;
 801606e:	7b3a      	ldrb	r2, [r7, #12]
 8016070:	490d      	ldr	r1, [pc, #52]	@ (80160a8 <RegionCN779ChannelAdd+0x17c>)
 8016072:	4613      	mov	r3, r2
 8016074:	005b      	lsls	r3, r3, #1
 8016076:	4413      	add	r3, r2
 8016078:	009b      	lsls	r3, r3, #2
 801607a:	440b      	add	r3, r1
 801607c:	3309      	adds	r3, #9
 801607e:	7b7a      	ldrb	r2, [r7, #13]
 8016080:	701a      	strb	r2, [r3, #0]
	ChannelsMask[0] |= (1 << id);
 8016082:	4b0a      	ldr	r3, [pc, #40]	@ (80160ac <RegionCN779ChannelAdd+0x180>)
 8016084:	881b      	ldrh	r3, [r3, #0]
 8016086:	b21a      	sxth	r2, r3
 8016088:	7b3b      	ldrb	r3, [r7, #12]
 801608a:	2101      	movs	r1, #1
 801608c:	fa01 f303 	lsl.w	r3, r1, r3
 8016090:	b21b      	sxth	r3, r3
 8016092:	4313      	orrs	r3, r2
 8016094:	b21b      	sxth	r3, r3
 8016096:	b29a      	uxth	r2, r3
 8016098:	4b04      	ldr	r3, [pc, #16]	@ (80160ac <RegionCN779ChannelAdd+0x180>)
 801609a:	801a      	strh	r2, [r3, #0]
	return LORAMAC_STATUS_OK;
 801609c:	2300      	movs	r3, #0
}
 801609e:	4618      	mov	r0, r3
 80160a0:	3710      	adds	r7, #16
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop
 80160a8:	2000762c 	.word	0x2000762c
 80160ac:	20006c9c 	.word	0x20006c9c

080160b0 <RegionCN779ChannelsRemove>:

bool RegionCN779ChannelsRemove(ChannelRemoveParams_t *channelRemove)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b086      	sub	sp, #24
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
	uint8_t id = channelRemove->ChannelId;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	75fb      	strb	r3, [r7, #23]

	if (id < CN779_NUMB_DEFAULT_CHANNELS)
 80160be:	7dfb      	ldrb	r3, [r7, #23]
 80160c0:	2b02      	cmp	r3, #2
 80160c2:	d801      	bhi.n	80160c8 <RegionCN779ChannelsRemove+0x18>
	{
		return false;
 80160c4:	2300      	movs	r3, #0
 80160c6:	e012      	b.n	80160ee <RegionCN779ChannelsRemove+0x3e>
	}

	// Remove the channel from the list of channels
	Channels[id] = (ChannelParams_t){0, 0, {0}, 0};
 80160c8:	7dfa      	ldrb	r2, [r7, #23]
 80160ca:	490b      	ldr	r1, [pc, #44]	@ (80160f8 <RegionCN779ChannelsRemove+0x48>)
 80160cc:	4613      	mov	r3, r2
 80160ce:	005b      	lsls	r3, r3, #1
 80160d0:	4413      	add	r3, r2
 80160d2:	009b      	lsls	r3, r3, #2
 80160d4:	440b      	add	r3, r1
 80160d6:	461a      	mov	r2, r3
 80160d8:	2300      	movs	r3, #0
 80160da:	6013      	str	r3, [r2, #0]
 80160dc:	6053      	str	r3, [r2, #4]
 80160de:	6093      	str	r3, [r2, #8]

	return RegionCommonChanDisable(ChannelsMask, id, CN779_MAX_NB_CHANNELS);
 80160e0:	7dfb      	ldrb	r3, [r7, #23]
 80160e2:	2210      	movs	r2, #16
 80160e4:	4619      	mov	r1, r3
 80160e6:	4805      	ldr	r0, [pc, #20]	@ (80160fc <RegionCN779ChannelsRemove+0x4c>)
 80160e8:	f000 f95c 	bl	80163a4 <RegionCommonChanDisable>
 80160ec:	4603      	mov	r3, r0
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3718      	adds	r7, #24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
 80160f6:	bf00      	nop
 80160f8:	2000762c 	.word	0x2000762c
 80160fc:	20006c9c 	.word	0x20006c9c

08016100 <RegionCN779SetContinuousWave>:

void RegionCN779SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b084      	sub	sp, #16
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	4619      	mov	r1, r3
 8016114:	4a1f      	ldr	r2, [pc, #124]	@ (8016194 <RegionCN779SetContinuousWave+0x94>)
 8016116:	460b      	mov	r3, r1
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	440b      	add	r3, r1
 801611c:	009b      	lsls	r3, r3, #2
 801611e:	4413      	add	r3, r2
 8016120:	3309      	adds	r3, #9
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	4a1c      	ldr	r2, [pc, #112]	@ (8016198 <RegionCN779SetContinuousWave+0x98>)
 8016126:	015b      	lsls	r3, r3, #5
 8016128:	4413      	add	r3, r2
 801612a:	3302      	adds	r3, #2
 801612c:	f993 1000 	ldrsb.w	r1, [r3]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016136:	4b19      	ldr	r3, [pc, #100]	@ (801619c <RegionCN779SetContinuousWave+0x9c>)
 8016138:	f7fe fe3e 	bl	8014db8 <LimitTxPower>
 801613c:	4603      	mov	r3, r0
 801613e:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 8016140:	2300      	movs	r3, #0
 8016142:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	4619      	mov	r1, r3
 801614a:	4a12      	ldr	r2, [pc, #72]	@ (8016194 <RegionCN779SetContinuousWave+0x94>)
 801614c:	460b      	mov	r3, r1
 801614e:	005b      	lsls	r3, r3, #1
 8016150:	440b      	add	r3, r1
 8016152:	009b      	lsls	r3, r3, #2
 8016154:	4413      	add	r3, r2
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	edd3 7a01 	vldr	s15, [r3, #4]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	ed93 7a02 	vldr	s14, [r3, #8]
 8016166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801616a:	eef0 0a47 	vmov.f32	s1, s14
 801616e:	eeb0 0a67 	vmov.f32	s0, s15
 8016172:	4618      	mov	r0, r3
 8016174:	f000 fcae 	bl	8016ad4 <RegionCommonComputeTxPower>
 8016178:	4603      	mov	r3, r0
 801617a:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 801617c:	4b08      	ldr	r3, [pc, #32]	@ (80161a0 <RegionCN779SetContinuousWave+0xa0>)
 801617e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	8992      	ldrh	r2, [r2, #12]
 8016184:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016188:	68b8      	ldr	r0, [r7, #8]
 801618a:	4798      	blx	r3
}
 801618c:	bf00      	nop
 801618e:	3710      	adds	r7, #16
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	2000762c 	.word	0x2000762c
 8016198:	20000130 	.word	0x20000130
 801619c:	20006c9c 	.word	0x20006c9c
 80161a0:	08025450 	.word	0x08025450

080161a4 <RegionCN779ApplyDrOffset>:

uint8_t RegionCN779ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 80161a4:	b480      	push	{r7}
 80161a6:	b085      	sub	sp, #20
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	4603      	mov	r3, r0
 80161ac:	71fb      	strb	r3, [r7, #7]
 80161ae:	460b      	mov	r3, r1
 80161b0:	71bb      	strb	r3, [r7, #6]
 80161b2:	4613      	mov	r3, r2
 80161b4:	717b      	strb	r3, [r7, #5]
	int8_t datarate = dr - drOffset;
 80161b6:	79ba      	ldrb	r2, [r7, #6]
 80161b8:	797b      	ldrb	r3, [r7, #5]
 80161ba:	1ad3      	subs	r3, r2, r3
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 80161c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	da01      	bge.n	80161cc <RegionCN779ApplyDrOffset+0x28>
	{
		datarate = DR_0;
 80161c8:	2300      	movs	r3, #0
 80161ca:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 80161cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3714      	adds	r7, #20
 80161d2:	46bd      	mov	sp, r7
 80161d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d8:	4770      	bx	lr

080161da <CountChannels>:
#define BACKOFF_DC_1_HOUR 100
#define BACKOFF_DC_10_HOURS 1000
#define BACKOFF_DC_24_HOURS 10000

static uint8_t CountChannels(uint16_t mask, uint8_t nbBits)
{
 80161da:	b480      	push	{r7}
 80161dc:	b085      	sub	sp, #20
 80161de:	af00      	add	r7, sp, #0
 80161e0:	4603      	mov	r3, r0
 80161e2:	460a      	mov	r2, r1
 80161e4:	80fb      	strh	r3, [r7, #6]
 80161e6:	4613      	mov	r3, r2
 80161e8:	717b      	strb	r3, [r7, #5]
	uint8_t nbActiveBits = 0;
 80161ea:	2300      	movs	r3, #0
 80161ec:	73fb      	strb	r3, [r7, #15]

	for (uint8_t j = 0; j < nbBits; j++)
 80161ee:	2300      	movs	r3, #0
 80161f0:	73bb      	strb	r3, [r7, #14]
 80161f2:	e011      	b.n	8016218 <CountChannels+0x3e>
	{
		if ((mask & (1 << j)) == (1 << j))
 80161f4:	88fa      	ldrh	r2, [r7, #6]
 80161f6:	7bbb      	ldrb	r3, [r7, #14]
 80161f8:	2101      	movs	r1, #1
 80161fa:	fa01 f303 	lsl.w	r3, r1, r3
 80161fe:	401a      	ands	r2, r3
 8016200:	7bbb      	ldrb	r3, [r7, #14]
 8016202:	2101      	movs	r1, #1
 8016204:	fa01 f303 	lsl.w	r3, r1, r3
 8016208:	429a      	cmp	r2, r3
 801620a:	d102      	bne.n	8016212 <CountChannels+0x38>
		{
			nbActiveBits++;
 801620c:	7bfb      	ldrb	r3, [r7, #15]
 801620e:	3301      	adds	r3, #1
 8016210:	73fb      	strb	r3, [r7, #15]
	for (uint8_t j = 0; j < nbBits; j++)
 8016212:	7bbb      	ldrb	r3, [r7, #14]
 8016214:	3301      	adds	r3, #1
 8016216:	73bb      	strb	r3, [r7, #14]
 8016218:	7bba      	ldrb	r2, [r7, #14]
 801621a:	797b      	ldrb	r3, [r7, #5]
 801621c:	429a      	cmp	r2, r3
 801621e:	d3e9      	bcc.n	80161f4 <CountChannels+0x1a>
		}
	}
	return nbActiveBits;
 8016220:	7bfb      	ldrb	r3, [r7, #15]
}
 8016222:	4618      	mov	r0, r3
 8016224:	3714      	adds	r7, #20
 8016226:	46bd      	mov	sp, r7
 8016228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622c:	4770      	bx	lr
	...

08016230 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc(TimerTime_t elapsedTime)
{
 8016230:	b480      	push	{r7}
 8016232:	b085      	sub	sp, #20
 8016234:	af00      	add	r7, sp, #0
 8016236:	e9c7 0100 	strd	r0, r1, [r7]
	uint16_t dutyCycle = 0;
 801623a:	2300      	movs	r3, #0
 801623c:	81fb      	strh	r3, [r7, #14]

	if (elapsedTime < 3600000)
 801623e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016242:	490e      	ldr	r1, [pc, #56]	@ (801627c <RegionCommonGetJoinDc+0x4c>)
 8016244:	428a      	cmp	r2, r1
 8016246:	f173 0300 	sbcs.w	r3, r3, #0
 801624a:	d202      	bcs.n	8016252 <RegionCommonGetJoinDc+0x22>
	{
		dutyCycle = BACKOFF_DC_1_HOUR;
 801624c:	2364      	movs	r3, #100	@ 0x64
 801624e:	81fb      	strh	r3, [r7, #14]
 8016250:	e00d      	b.n	801626e <RegionCommonGetJoinDc+0x3e>
	}
	else if (elapsedTime < (3600000 + 36000000))
 8016252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016256:	490a      	ldr	r1, [pc, #40]	@ (8016280 <RegionCommonGetJoinDc+0x50>)
 8016258:	428a      	cmp	r2, r1
 801625a:	f173 0300 	sbcs.w	r3, r3, #0
 801625e:	d203      	bcs.n	8016268 <RegionCommonGetJoinDc+0x38>
	{
		dutyCycle = BACKOFF_DC_10_HOURS;
 8016260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016264:	81fb      	strh	r3, [r7, #14]
 8016266:	e002      	b.n	801626e <RegionCommonGetJoinDc+0x3e>
	}
	else
	{
		dutyCycle = BACKOFF_DC_24_HOURS;
 8016268:	f242 7310 	movw	r3, #10000	@ 0x2710
 801626c:	81fb      	strh	r3, [r7, #14]
	}
	return dutyCycle;
 801626e:	89fb      	ldrh	r3, [r7, #14]
}
 8016270:	4618      	mov	r0, r3
 8016272:	3714      	adds	r7, #20
 8016274:	46bd      	mov	sp, r7
 8016276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801627a:	4770      	bx	lr
 801627c:	0036ee80 	.word	0x0036ee80
 8016280:	025c3f80 	.word	0x025c3f80

08016284 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr(uint8_t nbChannels, uint16_t *channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t *channels)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b084      	sub	sp, #16
 8016288:	af00      	add	r7, sp, #0
 801628a:	6039      	str	r1, [r7, #0]
 801628c:	4611      	mov	r1, r2
 801628e:	461a      	mov	r2, r3
 8016290:	4603      	mov	r3, r0
 8016292:	71fb      	strb	r3, [r7, #7]
 8016294:	460b      	mov	r3, r1
 8016296:	71bb      	strb	r3, [r7, #6]
 8016298:	4613      	mov	r3, r2
 801629a:	717b      	strb	r3, [r7, #5]
	if (RegionCommonValueInRange(dr, minDr, maxDr) == 0)
 801629c:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80162a0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80162a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f000 f85d 	bl	8016368 <RegionCommonValueInRange>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d101      	bne.n	80162b8 <RegionCommonChanVerifyDr+0x34>
	{
		return false;
 80162b4:	2300      	movs	r3, #0
 80162b6:	e053      	b.n	8016360 <RegionCommonChanVerifyDr+0xdc>
	}

	for (uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++)
 80162b8:	2300      	movs	r3, #0
 80162ba:	73fb      	strb	r3, [r7, #15]
 80162bc:	2300      	movs	r3, #0
 80162be:	73bb      	strb	r3, [r7, #14]
 80162c0:	e049      	b.n	8016356 <RegionCommonChanVerifyDr+0xd2>
	{
		for (uint8_t j = 0; j < 16; j++)
 80162c2:	2300      	movs	r3, #0
 80162c4:	737b      	strb	r3, [r7, #13]
 80162c6:	e03d      	b.n	8016344 <RegionCommonChanVerifyDr+0xc0>
		{
			if (((channelsMask[k] & (1 << j)) != 0))
 80162c8:	7bbb      	ldrb	r3, [r7, #14]
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	683a      	ldr	r2, [r7, #0]
 80162ce:	4413      	add	r3, r2
 80162d0:	881b      	ldrh	r3, [r3, #0]
 80162d2:	461a      	mov	r2, r3
 80162d4:	7b7b      	ldrb	r3, [r7, #13]
 80162d6:	fa42 f303 	asr.w	r3, r2, r3
 80162da:	f003 0301 	and.w	r3, r3, #1
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d02d      	beq.n	801633e <RegionCommonChanVerifyDr+0xba>
			{ // Check datarate validity for enabled channels
				if (RegionCommonValueInRange(dr, (channels[i + j].DrRange.Fields.Min & 0x0F),
 80162e2:	7bfa      	ldrb	r2, [r7, #15]
 80162e4:	7b7b      	ldrb	r3, [r7, #13]
 80162e6:	4413      	add	r3, r2
 80162e8:	461a      	mov	r2, r3
 80162ea:	4613      	mov	r3, r2
 80162ec:	005b      	lsls	r3, r3, #1
 80162ee:	4413      	add	r3, r2
 80162f0:	009b      	lsls	r3, r3, #2
 80162f2:	461a      	mov	r2, r3
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	4413      	add	r3, r2
 80162f8:	7a1b      	ldrb	r3, [r3, #8]
 80162fa:	f343 0303 	sbfx	r3, r3, #0, #4
 80162fe:	b25b      	sxtb	r3, r3
 8016300:	f003 030f 	and.w	r3, r3, #15
 8016304:	b259      	sxtb	r1, r3
											 (channels[i + j].DrRange.Fields.Max & 0x0F)) == 1)
 8016306:	7bfa      	ldrb	r2, [r7, #15]
 8016308:	7b7b      	ldrb	r3, [r7, #13]
 801630a:	4413      	add	r3, r2
 801630c:	461a      	mov	r2, r3
 801630e:	4613      	mov	r3, r2
 8016310:	005b      	lsls	r3, r3, #1
 8016312:	4413      	add	r3, r2
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	461a      	mov	r2, r3
 8016318:	69fb      	ldr	r3, [r7, #28]
 801631a:	4413      	add	r3, r2
 801631c:	7a1b      	ldrb	r3, [r3, #8]
 801631e:	f343 1303 	sbfx	r3, r3, #4, #4
 8016322:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(dr, (channels[i + j].DrRange.Fields.Min & 0x0F),
 8016324:	f003 030f 	and.w	r3, r3, #15
 8016328:	b25a      	sxtb	r2, r3
 801632a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801632e:	4618      	mov	r0, r3
 8016330:	f000 f81a 	bl	8016368 <RegionCommonValueInRange>
 8016334:	4603      	mov	r3, r0
 8016336:	2b01      	cmp	r3, #1
 8016338:	d101      	bne.n	801633e <RegionCommonChanVerifyDr+0xba>
				{
					// At least 1 channel has been found we can return OK.
					return true;
 801633a:	2301      	movs	r3, #1
 801633c:	e010      	b.n	8016360 <RegionCommonChanVerifyDr+0xdc>
		for (uint8_t j = 0; j < 16; j++)
 801633e:	7b7b      	ldrb	r3, [r7, #13]
 8016340:	3301      	adds	r3, #1
 8016342:	737b      	strb	r3, [r7, #13]
 8016344:	7b7b      	ldrb	r3, [r7, #13]
 8016346:	2b0f      	cmp	r3, #15
 8016348:	d9be      	bls.n	80162c8 <RegionCommonChanVerifyDr+0x44>
	for (uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++)
 801634a:	7bfb      	ldrb	r3, [r7, #15]
 801634c:	3310      	adds	r3, #16
 801634e:	73fb      	strb	r3, [r7, #15]
 8016350:	7bbb      	ldrb	r3, [r7, #14]
 8016352:	3301      	adds	r3, #1
 8016354:	73bb      	strb	r3, [r7, #14]
 8016356:	7bfa      	ldrb	r2, [r7, #15]
 8016358:	79fb      	ldrb	r3, [r7, #7]
 801635a:	429a      	cmp	r2, r3
 801635c:	d3b1      	bcc.n	80162c2 <RegionCommonChanVerifyDr+0x3e>
				}
			}
		}
	}
	return false;
 801635e:	2300      	movs	r3, #0
}
 8016360:	4618      	mov	r0, r3
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange(int8_t value, int8_t min, int8_t max)
{
 8016368:	b480      	push	{r7}
 801636a:	b083      	sub	sp, #12
 801636c:	af00      	add	r7, sp, #0
 801636e:	4603      	mov	r3, r0
 8016370:	71fb      	strb	r3, [r7, #7]
 8016372:	460b      	mov	r3, r1
 8016374:	71bb      	strb	r3, [r7, #6]
 8016376:	4613      	mov	r3, r2
 8016378:	717b      	strb	r3, [r7, #5]
	if ((value >= min) && (value <= max))
 801637a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801637e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016382:	429a      	cmp	r2, r3
 8016384:	db07      	blt.n	8016396 <RegionCommonValueInRange+0x2e>
 8016386:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801638a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801638e:	429a      	cmp	r2, r3
 8016390:	dc01      	bgt.n	8016396 <RegionCommonValueInRange+0x2e>
	{
		return 1;
 8016392:	2301      	movs	r3, #1
 8016394:	e000      	b.n	8016398 <RegionCommonValueInRange+0x30>
	}
	return 0;
 8016396:	2300      	movs	r3, #0
}
 8016398:	4618      	mov	r0, r3
 801639a:	370c      	adds	r7, #12
 801639c:	46bd      	mov	sp, r7
 801639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a2:	4770      	bx	lr

080163a4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable(uint16_t *channelsMask, uint8_t id, uint8_t maxChannels)
{
 80163a4:	b480      	push	{r7}
 80163a6:	b085      	sub	sp, #20
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
 80163ac:	460b      	mov	r3, r1
 80163ae:	70fb      	strb	r3, [r7, #3]
 80163b0:	4613      	mov	r3, r2
 80163b2:	70bb      	strb	r3, [r7, #2]
	uint8_t index = id / 16;
 80163b4:	78fb      	ldrb	r3, [r7, #3]
 80163b6:	091b      	lsrs	r3, r3, #4
 80163b8:	73fb      	strb	r3, [r7, #15]

	if ((index > (maxChannels / 16)) || (id >= maxChannels))
 80163ba:	78bb      	ldrb	r3, [r7, #2]
 80163bc:	091b      	lsrs	r3, r3, #4
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	7bfa      	ldrb	r2, [r7, #15]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d803      	bhi.n	80163ce <RegionCommonChanDisable+0x2a>
 80163c6:	78fa      	ldrb	r2, [r7, #3]
 80163c8:	78bb      	ldrb	r3, [r7, #2]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d301      	bcc.n	80163d2 <RegionCommonChanDisable+0x2e>
	{
		return false;
 80163ce:	2300      	movs	r3, #0
 80163d0:	e017      	b.n	8016402 <RegionCommonChanDisable+0x5e>
	}

	// Deactivate channel
	channelsMask[index] &= ~(1 << (id % 16));
 80163d2:	7bfb      	ldrb	r3, [r7, #15]
 80163d4:	005b      	lsls	r3, r3, #1
 80163d6:	687a      	ldr	r2, [r7, #4]
 80163d8:	4413      	add	r3, r2
 80163da:	881b      	ldrh	r3, [r3, #0]
 80163dc:	b21a      	sxth	r2, r3
 80163de:	78fb      	ldrb	r3, [r7, #3]
 80163e0:	f003 030f 	and.w	r3, r3, #15
 80163e4:	2101      	movs	r1, #1
 80163e6:	fa01 f303 	lsl.w	r3, r1, r3
 80163ea:	b21b      	sxth	r3, r3
 80163ec:	43db      	mvns	r3, r3
 80163ee:	b21b      	sxth	r3, r3
 80163f0:	4013      	ands	r3, r2
 80163f2:	b219      	sxth	r1, r3
 80163f4:	7bfb      	ldrb	r3, [r7, #15]
 80163f6:	005b      	lsls	r3, r3, #1
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	4413      	add	r3, r2
 80163fc:	b28a      	uxth	r2, r1
 80163fe:	801a      	strh	r2, [r3, #0]

	return true;
 8016400:	2301      	movs	r3, #1
}
 8016402:	4618      	mov	r0, r3
 8016404:	3714      	adds	r7, #20
 8016406:	46bd      	mov	sp, r7
 8016408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640c:	4770      	bx	lr

0801640e <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels(uint16_t *channelsMask, uint8_t startIdx, uint8_t stopIdx)
{
 801640e:	b580      	push	{r7, lr}
 8016410:	b084      	sub	sp, #16
 8016412:	af00      	add	r7, sp, #0
 8016414:	6078      	str	r0, [r7, #4]
 8016416:	460b      	mov	r3, r1
 8016418:	70fb      	strb	r3, [r7, #3]
 801641a:	4613      	mov	r3, r2
 801641c:	70bb      	strb	r3, [r7, #2]
	uint8_t nbChannels = 0;
 801641e:	2300      	movs	r3, #0
 8016420:	73fb      	strb	r3, [r7, #15]

	if (channelsMask == NULL)
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d101      	bne.n	801642c <RegionCommonCountChannels+0x1e>
	{
		return 0;
 8016428:	2300      	movs	r3, #0
 801642a:	e018      	b.n	801645e <RegionCommonCountChannels+0x50>
	}

	for (uint8_t i = startIdx; i < stopIdx; i++)
 801642c:	78fb      	ldrb	r3, [r7, #3]
 801642e:	73bb      	strb	r3, [r7, #14]
 8016430:	e010      	b.n	8016454 <RegionCommonCountChannels+0x46>
	{
		nbChannels += CountChannels(channelsMask[i], 16);
 8016432:	7bbb      	ldrb	r3, [r7, #14]
 8016434:	005b      	lsls	r3, r3, #1
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	4413      	add	r3, r2
 801643a:	881b      	ldrh	r3, [r3, #0]
 801643c:	2110      	movs	r1, #16
 801643e:	4618      	mov	r0, r3
 8016440:	f7ff fecb 	bl	80161da <CountChannels>
 8016444:	4603      	mov	r3, r0
 8016446:	461a      	mov	r2, r3
 8016448:	7bfb      	ldrb	r3, [r7, #15]
 801644a:	4413      	add	r3, r2
 801644c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = startIdx; i < stopIdx; i++)
 801644e:	7bbb      	ldrb	r3, [r7, #14]
 8016450:	3301      	adds	r3, #1
 8016452:	73bb      	strb	r3, [r7, #14]
 8016454:	7bba      	ldrb	r2, [r7, #14]
 8016456:	78bb      	ldrb	r3, [r7, #2]
 8016458:	429a      	cmp	r2, r3
 801645a:	d3ea      	bcc.n	8016432 <RegionCommonCountChannels+0x24>
	}

	return nbChannels;
 801645c:	7bfb      	ldrb	r3, [r7, #15]
}
 801645e:	4618      	mov	r0, r3
 8016460:	3710      	adds	r7, #16
 8016462:	46bd      	mov	sp, r7
 8016464:	bd80      	pop	{r7, pc}

08016466 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy(uint16_t *channelsMaskDest, uint16_t *channelsMaskSrc, uint8_t len)
{
 8016466:	b480      	push	{r7}
 8016468:	b087      	sub	sp, #28
 801646a:	af00      	add	r7, sp, #0
 801646c:	60f8      	str	r0, [r7, #12]
 801646e:	60b9      	str	r1, [r7, #8]
 8016470:	4613      	mov	r3, r2
 8016472:	71fb      	strb	r3, [r7, #7]
	if ((channelsMaskDest != NULL) && (channelsMaskSrc != NULL))
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d016      	beq.n	80164a8 <RegionCommonChanMaskCopy+0x42>
 801647a:	68bb      	ldr	r3, [r7, #8]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d013      	beq.n	80164a8 <RegionCommonChanMaskCopy+0x42>
	{
		for (uint8_t i = 0; i < len; i++)
 8016480:	2300      	movs	r3, #0
 8016482:	75fb      	strb	r3, [r7, #23]
 8016484:	e00c      	b.n	80164a0 <RegionCommonChanMaskCopy+0x3a>
		{
			channelsMaskDest[i] = channelsMaskSrc[i];
 8016486:	7dfb      	ldrb	r3, [r7, #23]
 8016488:	005b      	lsls	r3, r3, #1
 801648a:	68ba      	ldr	r2, [r7, #8]
 801648c:	441a      	add	r2, r3
 801648e:	7dfb      	ldrb	r3, [r7, #23]
 8016490:	005b      	lsls	r3, r3, #1
 8016492:	68f9      	ldr	r1, [r7, #12]
 8016494:	440b      	add	r3, r1
 8016496:	8812      	ldrh	r2, [r2, #0]
 8016498:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++)
 801649a:	7dfb      	ldrb	r3, [r7, #23]
 801649c:	3301      	adds	r3, #1
 801649e:	75fb      	strb	r3, [r7, #23]
 80164a0:	7dfa      	ldrb	r2, [r7, #23]
 80164a2:	79fb      	ldrb	r3, [r7, #7]
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d3ee      	bcc.n	8016486 <RegionCommonChanMaskCopy+0x20>
		}
	}
}
 80164a8:	bf00      	nop
 80164aa:	371c      	adds	r7, #28
 80164ac:	46bd      	mov	sp, r7
 80164ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b2:	4770      	bx	lr

080164b4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone(bool joined, Band_t *band, TimerTime_t lastTxDone)
{
 80164b4:	b480      	push	{r7}
 80164b6:	b085      	sub	sp, #20
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	60b9      	str	r1, [r7, #8]
 80164bc:	e9c7 2300 	strd	r2, r3, [r7]
 80164c0:	4603      	mov	r3, r0
 80164c2:	73fb      	strb	r3, [r7, #15]
	if (joined == true)
 80164c4:	7bfb      	ldrb	r3, [r7, #15]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d005      	beq.n	80164d6 <RegionCommonSetBandTxDone+0x22>
	{
		band->LastTxDoneTime = lastTxDone;
 80164ca:	68b9      	ldr	r1, [r7, #8]
 80164cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80164d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	else
	{
		band->LastTxDoneTime = lastTxDone;
		band->LastJoinTxDoneTime = lastTxDone;
	}
}
 80164d4:	e009      	b.n	80164ea <RegionCommonSetBandTxDone+0x36>
		band->LastTxDoneTime = lastTxDone;
 80164d6:	68b9      	ldr	r1, [r7, #8]
 80164d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80164dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
		band->LastJoinTxDoneTime = lastTxDone;
 80164e0:	68b9      	ldr	r1, [r7, #8]
 80164e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80164e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80164ea:	bf00      	nop
 80164ec:	3714      	adds	r7, #20
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr

080164f6 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff(bool joined, bool dutyCycle, Band_t *bands, uint8_t nbBands)
{
 80164f6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80164fa:	b08c      	sub	sp, #48	@ 0x30
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	61ba      	str	r2, [r7, #24]
 8016500:	461a      	mov	r2, r3
 8016502:	4603      	mov	r3, r0
 8016504:	77fb      	strb	r3, [r7, #31]
 8016506:	460b      	mov	r3, r1
 8016508:	77bb      	strb	r3, [r7, #30]
 801650a:	4613      	mov	r3, r2
 801650c:	777b      	strb	r3, [r7, #29]
	TimerTime_t nextTxDelay = (TimerTime_t)(-1);
 801650e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016516:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	// Update bands Time OFF
	for (uint8_t i = 0; i < nbBands; i++)
 801651a:	2300      	movs	r3, #0
 801651c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016520:	e11a      	b.n	8016758 <RegionCommonUpdateBandTimeOff+0x262>
	{
		if (joined == false)
 8016522:	7ffb      	ldrb	r3, [r7, #31]
 8016524:	f083 0301 	eor.w	r3, r3, #1
 8016528:	b2db      	uxtb	r3, r3
 801652a:	2b00      	cmp	r3, #0
 801652c:	f000 808f 	beq.w	801664e <RegionCommonUpdateBandTimeOff+0x158>
		{
			uint32_t txDoneTime = T_MAX(TimerGetElapsedTime(bands[i].LastJoinTxDoneTime),
 8016530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016534:	015b      	lsls	r3, r3, #5
 8016536:	69ba      	ldr	r2, [r7, #24]
 8016538:	4413      	add	r3, r2
 801653a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801653e:	4610      	mov	r0, r2
 8016540:	4619      	mov	r1, r3
 8016542:	f00a fd8b 	bl	802105c <util_timer_get_elapsedtime>
 8016546:	4604      	mov	r4, r0
 8016548:	460d      	mov	r5, r1
 801654a:	7fbb      	ldrb	r3, [r7, #30]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d00d      	beq.n	801656c <RegionCommonUpdateBandTimeOff+0x76>
 8016550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016554:	015b      	lsls	r3, r3, #5
 8016556:	69ba      	ldr	r2, [r7, #24]
 8016558:	4413      	add	r3, r2
 801655a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801655e:	4610      	mov	r0, r2
 8016560:	4619      	mov	r1, r3
 8016562:	f00a fd7b 	bl	802105c <util_timer_get_elapsedtime>
 8016566:	4602      	mov	r2, r0
 8016568:	460b      	mov	r3, r1
 801656a:	e003      	b.n	8016574 <RegionCommonUpdateBandTimeOff+0x7e>
 801656c:	f04f 0200 	mov.w	r2, #0
 8016570:	f04f 0300 	mov.w	r3, #0
 8016574:	4294      	cmp	r4, r2
 8016576:	eb75 0303 	sbcs.w	r3, r5, r3
 801657a:	d213      	bcs.n	80165a4 <RegionCommonUpdateBandTimeOff+0xae>
 801657c:	7fbb      	ldrb	r3, [r7, #30]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d00e      	beq.n	80165a0 <RegionCommonUpdateBandTimeOff+0xaa>
 8016582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016586:	015b      	lsls	r3, r3, #5
 8016588:	69ba      	ldr	r2, [r7, #24]
 801658a:	4413      	add	r3, r2
 801658c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016590:	4610      	mov	r0, r2
 8016592:	4619      	mov	r1, r3
 8016594:	f00a fd62 	bl	802105c <util_timer_get_elapsedtime>
 8016598:	4602      	mov	r2, r0
 801659a:	460b      	mov	r3, r1
 801659c:	4613      	mov	r3, r2
 801659e:	e00f      	b.n	80165c0 <RegionCommonUpdateBandTimeOff+0xca>
 80165a0:	2300      	movs	r3, #0
 80165a2:	e00d      	b.n	80165c0 <RegionCommonUpdateBandTimeOff+0xca>
 80165a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80165a8:	015b      	lsls	r3, r3, #5
 80165aa:	69ba      	ldr	r2, [r7, #24]
 80165ac:	4413      	add	r3, r2
 80165ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80165b2:	4610      	mov	r0, r2
 80165b4:	4619      	mov	r1, r3
 80165b6:	f00a fd51 	bl	802105c <util_timer_get_elapsedtime>
 80165ba:	4602      	mov	r2, r0
 80165bc:	460b      	mov	r3, r1
 80165be:	4613      	mov	r3, r2
 80165c0:	623b      	str	r3, [r7, #32]
										(dutyCycle == true) ? TimerGetElapsedTime(bands[i].LastTxDoneTime) : 0);

			if (bands[i].TimeOff <= txDoneTime)
 80165c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80165c6:	015b      	lsls	r3, r3, #5
 80165c8:	69ba      	ldr	r2, [r7, #24]
 80165ca:	4413      	add	r3, r2
 80165cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80165d0:	6a39      	ldr	r1, [r7, #32]
 80165d2:	2000      	movs	r0, #0
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80165dc:	4621      	mov	r1, r4
 80165de:	4291      	cmp	r1, r2
 80165e0:	4629      	mov	r1, r5
 80165e2:	eb71 0303 	sbcs.w	r3, r1, r3
 80165e6:	d30a      	bcc.n	80165fe <RegionCommonUpdateBandTimeOff+0x108>
			{
				bands[i].TimeOff = 0;
 80165e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80165ec:	015b      	lsls	r3, r3, #5
 80165ee:	69ba      	ldr	r2, [r7, #24]
 80165f0:	18d1      	adds	r1, r2, r3
 80165f2:	f04f 0200 	mov.w	r2, #0
 80165f6:	f04f 0300 	mov.w	r3, #0
 80165fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
			}
			if (bands[i].TimeOff != 0)
 80165fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016602:	015b      	lsls	r3, r3, #5
 8016604:	69ba      	ldr	r2, [r7, #24]
 8016606:	4413      	add	r3, r2
 8016608:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801660c:	4313      	orrs	r3, r2
 801660e:	f000 809e 	beq.w	801674e <RegionCommonUpdateBandTimeOff+0x258>
			{
				nextTxDelay = T_MIN(bands[i].TimeOff - txDoneTime, nextTxDelay);
 8016612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016616:	015b      	lsls	r3, r3, #5
 8016618:	69ba      	ldr	r2, [r7, #24]
 801661a:	4413      	add	r3, r2
 801661c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016620:	6a39      	ldr	r1, [r7, #32]
 8016622:	2000      	movs	r0, #0
 8016624:	6039      	str	r1, [r7, #0]
 8016626:	6078      	str	r0, [r7, #4]
 8016628:	e9d7 4500 	ldrd	r4, r5, [r7]
 801662c:	4621      	mov	r1, r4
 801662e:	ebb2 0801 	subs.w	r8, r2, r1
 8016632:	4629      	mov	r1, r5
 8016634:	eb63 0901 	sbc.w	r9, r3, r1
 8016638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801663c:	4590      	cmp	r8, r2
 801663e:	eb79 0103 	sbcs.w	r1, r9, r3
 8016642:	d201      	bcs.n	8016648 <RegionCommonUpdateBandTimeOff+0x152>
 8016644:	4642      	mov	r2, r8
 8016646:	464b      	mov	r3, r9
 8016648:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 801664c:	e07f      	b.n	801674e <RegionCommonUpdateBandTimeOff+0x258>
			}
		}
		else
		{
			if (dutyCycle == true)
 801664e:	7fbb      	ldrb	r3, [r7, #30]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d06b      	beq.n	801672c <RegionCommonUpdateBandTimeOff+0x236>
			{
				if (bands[i].TimeOff <= TimerGetElapsedTime(bands[i].LastTxDoneTime))
 8016654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016658:	015b      	lsls	r3, r3, #5
 801665a:	69ba      	ldr	r2, [r7, #24]
 801665c:	4413      	add	r3, r2
 801665e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8016662:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016666:	015b      	lsls	r3, r3, #5
 8016668:	69ba      	ldr	r2, [r7, #24]
 801666a:	4413      	add	r3, r2
 801666c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016670:	4610      	mov	r0, r2
 8016672:	4619      	mov	r1, r3
 8016674:	f00a fcf2 	bl	802105c <util_timer_get_elapsedtime>
 8016678:	4602      	mov	r2, r0
 801667a:	460b      	mov	r3, r1
 801667c:	42a2      	cmp	r2, r4
 801667e:	41ab      	sbcs	r3, r5
 8016680:	d30a      	bcc.n	8016698 <RegionCommonUpdateBandTimeOff+0x1a2>
				{
					bands[i].TimeOff = 0;
 8016682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016686:	015b      	lsls	r3, r3, #5
 8016688:	69ba      	ldr	r2, [r7, #24]
 801668a:	18d1      	adds	r1, r2, r3
 801668c:	f04f 0200 	mov.w	r2, #0
 8016690:	f04f 0300 	mov.w	r3, #0
 8016694:	e9c1 2306 	strd	r2, r3, [r1, #24]
				}
				if (bands[i].TimeOff != 0)
 8016698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801669c:	015b      	lsls	r3, r3, #5
 801669e:	69ba      	ldr	r2, [r7, #24]
 80166a0:	4413      	add	r3, r2
 80166a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80166a6:	4313      	orrs	r3, r2
 80166a8:	d051      	beq.n	801674e <RegionCommonUpdateBandTimeOff+0x258>
				{
					nextTxDelay = T_MIN(bands[i].TimeOff - TimerGetElapsedTime(bands[i].LastTxDoneTime),
 80166aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166ae:	015b      	lsls	r3, r3, #5
 80166b0:	69ba      	ldr	r2, [r7, #24]
 80166b2:	4413      	add	r3, r2
 80166b4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80166b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166bc:	015b      	lsls	r3, r3, #5
 80166be:	69ba      	ldr	r2, [r7, #24]
 80166c0:	4413      	add	r3, r2
 80166c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80166c6:	4610      	mov	r0, r2
 80166c8:	4619      	mov	r1, r3
 80166ca:	f00a fcc7 	bl	802105c <util_timer_get_elapsedtime>
 80166ce:	4602      	mov	r2, r0
 80166d0:	460b      	mov	r3, r1
 80166d2:	ebb4 0a02 	subs.w	sl, r4, r2
 80166d6:	eb65 0b03 	sbc.w	fp, r5, r3
 80166da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80166de:	4592      	cmp	sl, r2
 80166e0:	eb7b 0303 	sbcs.w	r3, fp, r3
 80166e4:	d219      	bcs.n	801671a <RegionCommonUpdateBandTimeOff+0x224>
 80166e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166ea:	015b      	lsls	r3, r3, #5
 80166ec:	69ba      	ldr	r2, [r7, #24]
 80166ee:	4413      	add	r3, r2
 80166f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80166f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80166f8:	015b      	lsls	r3, r3, #5
 80166fa:	69ba      	ldr	r2, [r7, #24]
 80166fc:	4413      	add	r3, r2
 80166fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016702:	4610      	mov	r0, r2
 8016704:	4619      	mov	r1, r3
 8016706:	f00a fca9 	bl	802105c <util_timer_get_elapsedtime>
 801670a:	4602      	mov	r2, r0
 801670c:	460b      	mov	r3, r1
 801670e:	1aa1      	subs	r1, r4, r2
 8016710:	6139      	str	r1, [r7, #16]
 8016712:	eb65 0303 	sbc.w	r3, r5, r3
 8016716:	617b      	str	r3, [r7, #20]
 8016718:	e003      	b.n	8016722 <RegionCommonUpdateBandTimeOff+0x22c>
 801671a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 801671e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8016722:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016726:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
 801672a:	e010      	b.n	801674e <RegionCommonUpdateBandTimeOff+0x258>
										nextTxDelay);
				}
			}
			else
			{
				nextTxDelay = 0;
 801672c:	f04f 0200 	mov.w	r2, #0
 8016730:	f04f 0300 	mov.w	r3, #0
 8016734:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
				bands[i].TimeOff = 0;
 8016738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801673c:	015b      	lsls	r3, r3, #5
 801673e:	69ba      	ldr	r2, [r7, #24]
 8016740:	18d1      	adds	r1, r2, r3
 8016742:	f04f 0200 	mov.w	r2, #0
 8016746:	f04f 0300 	mov.w	r3, #0
 801674a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	for (uint8_t i = 0; i < nbBands; i++)
 801674e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016752:	3301      	adds	r3, #1
 8016754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016758:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801675c:	7f7b      	ldrb	r3, [r7, #29]
 801675e:	429a      	cmp	r2, r3
 8016760:	f4ff aedf 	bcc.w	8016522 <RegionCommonUpdateBandTimeOff+0x2c>
			}
		}
	}
	return nextTxDelay;
 8016764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 8016768:	4610      	mov	r0, r2
 801676a:	4619      	mov	r1, r3
 801676c:	3730      	adds	r7, #48	@ 0x30
 801676e:	46bd      	mov	sp, r7
 8016770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08016774 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq(uint8_t *payload, RegionCommonLinkAdrParams_t *linkAdrParams)
{
 8016774:	b480      	push	{r7}
 8016776:	b085      	sub	sp, #20
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
 801677c:	6039      	str	r1, [r7, #0]
	uint8_t retIndex = 0;
 801677e:	2300      	movs	r3, #0
 8016780:	73fb      	strb	r3, [r7, #15]

	if (payload[0] == SRV_MAC_LINK_ADR_REQ)
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	781b      	ldrb	r3, [r3, #0]
 8016786:	2b03      	cmp	r3, #3
 8016788:	d13f      	bne.n	801680a <RegionCommonParseLinkAdrReq+0x96>
	{
		// Parse datarate and tx power
		linkAdrParams->Datarate = payload[1];
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	3301      	adds	r3, #1
 801678e:	781b      	ldrb	r3, [r3, #0]
 8016790:	b25a      	sxtb	r2, r3
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	705a      	strb	r2, [r3, #1]
		linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801679c:	f003 030f 	and.w	r3, r3, #15
 80167a0:	b25a      	sxtb	r2, r3
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	709a      	strb	r2, [r3, #2]
		linkAdrParams->Datarate = (linkAdrParams->Datarate >> 4) & 0x0F;
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80167ac:	b2db      	uxtb	r3, r3
 80167ae:	091b      	lsrs	r3, r3, #4
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	b25a      	sxtb	r2, r3
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	705a      	strb	r2, [r3, #1]
		// Parse ChMask
		linkAdrParams->ChMask = (uint16_t)payload[2];
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	3302      	adds	r3, #2
 80167bc:	781b      	ldrb	r3, [r3, #0]
 80167be:	461a      	mov	r2, r3
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	809a      	strh	r2, [r3, #4]
		linkAdrParams->ChMask |= (uint16_t)payload[3] << 8;
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	889b      	ldrh	r3, [r3, #4]
 80167c8:	b21a      	sxth	r2, r3
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	3303      	adds	r3, #3
 80167ce:	781b      	ldrb	r3, [r3, #0]
 80167d0:	021b      	lsls	r3, r3, #8
 80167d2:	b21b      	sxth	r3, r3
 80167d4:	4313      	orrs	r3, r2
 80167d6:	b21b      	sxth	r3, r3
 80167d8:	b29a      	uxth	r2, r3
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	809a      	strh	r2, [r3, #4]
		// Parse ChMaskCtrl and nbRep
		linkAdrParams->NbRep = payload[4];
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	791a      	ldrb	r2, [r3, #4]
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	701a      	strb	r2, [r3, #0]
		linkAdrParams->ChMaskCtrl = (linkAdrParams->NbRep >> 4) & 0x07;
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	781b      	ldrb	r3, [r3, #0]
 80167ea:	091b      	lsrs	r3, r3, #4
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	f003 0307 	and.w	r3, r3, #7
 80167f2:	b2da      	uxtb	r2, r3
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	70da      	strb	r2, [r3, #3]
		linkAdrParams->NbRep &= 0x0F;
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	f003 030f 	and.w	r3, r3, #15
 8016800:	b2da      	uxtb	r2, r3
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	701a      	strb	r2, [r3, #0]

		// LinkAdrReq has 4 bytes length + 1 byte CMD
		retIndex = 5;
 8016806:	2305      	movs	r3, #5
 8016808:	73fb      	strb	r3, [r7, #15]
	}
	return retIndex;
 801680a:	7bfb      	ldrb	r3, [r7, #15]
}
 801680c:	4618      	mov	r0, r3
 801680e:	3714      	adds	r7, #20
 8016810:	46bd      	mov	sp, r7
 8016812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016816:	4770      	bx	lr

08016818 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams(RegionCommonLinkAdrReqVerifyParams_t *verifyParams, int8_t *dr, int8_t *txPow, uint8_t *nbRep)
{
 8016818:	b5b0      	push	{r4, r5, r7, lr}
 801681a:	b088      	sub	sp, #32
 801681c:	af02      	add	r7, sp, #8
 801681e:	60f8      	str	r0, [r7, #12]
 8016820:	60b9      	str	r1, [r7, #8]
 8016822:	607a      	str	r2, [r7, #4]
 8016824:	603b      	str	r3, [r7, #0]
	uint8_t status = verifyParams->Status;
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	781b      	ldrb	r3, [r3, #0]
 801682a:	75fb      	strb	r3, [r7, #23]
	int8_t datarate = verifyParams->Datarate;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	789b      	ldrb	r3, [r3, #2]
 8016830:	75bb      	strb	r3, [r7, #22]
	int8_t txPower = verifyParams->TxPower;
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	78db      	ldrb	r3, [r3, #3]
 8016836:	757b      	strb	r3, [r7, #21]
	int8_t nbRepetitions = verifyParams->NbRep;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	791b      	ldrb	r3, [r3, #4]
 801683c:	753b      	strb	r3, [r7, #20]

	// Handle the case when ADR is off.
	if (verifyParams->AdrEnabled == false)
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	785b      	ldrb	r3, [r3, #1]
 8016842:	f083 0301 	eor.w	r3, r3, #1
 8016846:	b2db      	uxtb	r3, r3
 8016848:	2b00      	cmp	r3, #0
 801684a:	d014      	beq.n	8016876 <RegionCommonLinkAdrReqVerifyParams+0x5e>
	{
		// When ADR is off, we are allowed to change the channels mask and the NbRep,
		// if the datarate and the TX power of the LinkAdrReq are set to 0x0F.
		if ((verifyParams->Datarate != 0x0F) || (verifyParams->TxPower != 0x0F))
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016852:	2b0f      	cmp	r3, #15
 8016854:	d104      	bne.n	8016860 <RegionCommonLinkAdrReqVerifyParams+0x48>
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f993 3003 	ldrsb.w	r3, [r3, #3]
 801685c:	2b0f      	cmp	r3, #15
 801685e:	d004      	beq.n	801686a <RegionCommonLinkAdrReqVerifyParams+0x52>
		{
			status = 0;
 8016860:	2300      	movs	r3, #0
 8016862:	75fb      	strb	r3, [r7, #23]
			nbRepetitions = verifyParams->CurrentNbRep;
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	79db      	ldrb	r3, [r3, #7]
 8016868:	753b      	strb	r3, [r7, #20]
		}
		// Get the current datarate and tx power
		datarate = verifyParams->CurrentDatarate;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	795b      	ldrb	r3, [r3, #5]
 801686e:	75bb      	strb	r3, [r7, #22]
		txPower = verifyParams->CurrentTxPower;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	799b      	ldrb	r3, [r3, #6]
 8016874:	757b      	strb	r3, [r7, #21]
	}

	if (status != 0)
 8016876:	7dfb      	ldrb	r3, [r7, #23]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d03a      	beq.n	80168f2 <RegionCommonLinkAdrReqVerifyParams+0xda>
	{
		// Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
		if (RegionCommonChanVerifyDr(verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	7a18      	ldrb	r0, [r3, #8]
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	68d9      	ldr	r1, [r3, #12]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	f993 5010 	ldrsb.w	r5, [r3, #16]
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8016890:	68fa      	ldr	r2, [r7, #12]
 8016892:	6952      	ldr	r2, [r2, #20]
 8016894:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016898:	9201      	str	r2, [sp, #4]
 801689a:	9300      	str	r3, [sp, #0]
 801689c:	462b      	mov	r3, r5
 801689e:	4622      	mov	r2, r4
 80168a0:	f7ff fcf0 	bl	8016284 <RegionCommonChanVerifyDr>
 80168a4:	4603      	mov	r3, r0
									 verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels) == false)
 80168a6:	f083 0301 	eor.w	r3, r3, #1
 80168aa:	b2db      	uxtb	r3, r3
		if (RegionCommonChanVerifyDr(verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d003      	beq.n	80168b8 <RegionCommonLinkAdrReqVerifyParams+0xa0>
		{
			status &= 0xFD; // Datarate KO
 80168b0:	7dfb      	ldrb	r3, [r7, #23]
 80168b2:	f023 0302 	bic.w	r3, r3, #2
 80168b6:	75fb      	strb	r3, [r7, #23]
		}

		// Verify tx power
		if (RegionCommonValueInRange(txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower) == 0)
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	f993 1019 	ldrsb.w	r1, [r3, #25]
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	f993 2018 	ldrsb.w	r2, [r3, #24]
 80168c4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7ff fd4d 	bl	8016368 <RegionCommonValueInRange>
 80168ce:	4603      	mov	r3, r0
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d10e      	bne.n	80168f2 <RegionCommonLinkAdrReqVerifyParams+0xda>
		{
			// Verify if the maximum TX power is exceeded
			if (verifyParams->MaxTxPower > txPower)
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80168da:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80168de:	429a      	cmp	r2, r3
 80168e0:	da03      	bge.n	80168ea <RegionCommonLinkAdrReqVerifyParams+0xd2>
			{ // Apply maximum TX power. Accept TX power.
				txPower = verifyParams->MaxTxPower;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	7e5b      	ldrb	r3, [r3, #25]
 80168e6:	757b      	strb	r3, [r7, #21]
 80168e8:	e003      	b.n	80168f2 <RegionCommonLinkAdrReqVerifyParams+0xda>
			}
			else
			{
				status &= 0xFB; // TxPower KO
 80168ea:	7dfb      	ldrb	r3, [r7, #23]
 80168ec:	f023 0304 	bic.w	r3, r3, #4
 80168f0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	// If the status is ok, verify the NbRep
	if (status == 0x07)
 80168f2:	7dfb      	ldrb	r3, [r7, #23]
 80168f4:	2b07      	cmp	r3, #7
 80168f6:	d106      	bne.n	8016906 <RegionCommonLinkAdrReqVerifyParams+0xee>
	{
		if (nbRepetitions == 0)
 80168f8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d102      	bne.n	8016906 <RegionCommonLinkAdrReqVerifyParams+0xee>
		{ // Keep the current one
			nbRepetitions = verifyParams->CurrentNbRep;
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	79db      	ldrb	r3, [r3, #7]
 8016904:	753b      	strb	r3, [r7, #20]
		}
	}

	// Apply changes
	*dr = datarate;
 8016906:	68bb      	ldr	r3, [r7, #8]
 8016908:	7dba      	ldrb	r2, [r7, #22]
 801690a:	701a      	strb	r2, [r3, #0]
	*txPow = txPower;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	7d7a      	ldrb	r2, [r7, #21]
 8016910:	701a      	strb	r2, [r3, #0]
	*nbRep = nbRepetitions;
 8016912:	7d3a      	ldrb	r2, [r7, #20]
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	701a      	strb	r2, [r3, #0]

	return status;
 8016918:	7dfb      	ldrb	r3, [r7, #23]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3718      	adds	r7, #24
 801691e:	46bd      	mov	sp, r7
 8016920:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016924 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa(uint8_t phyDr, uint32_t bandwidth)
{
 8016924:	b5b0      	push	{r4, r5, r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	4603      	mov	r3, r0
 801692c:	6039      	str	r1, [r7, #0]
 801692e:	71fb      	strb	r3, [r7, #7]
	return ((double)(1 << phyDr) / (double)bandwidth) * 1000;
 8016930:	79fb      	ldrb	r3, [r7, #7]
 8016932:	2201      	movs	r2, #1
 8016934:	fa02 f303 	lsl.w	r3, r2, r3
 8016938:	4618      	mov	r0, r3
 801693a:	f7e9 fdf3 	bl	8000524 <__aeabi_i2d>
 801693e:	4604      	mov	r4, r0
 8016940:	460d      	mov	r5, r1
 8016942:	6838      	ldr	r0, [r7, #0]
 8016944:	f7e9 fdde 	bl	8000504 <__aeabi_ui2d>
 8016948:	4602      	mov	r2, r0
 801694a:	460b      	mov	r3, r1
 801694c:	4620      	mov	r0, r4
 801694e:	4629      	mov	r1, r5
 8016950:	f7e9 ff7c 	bl	800084c <__aeabi_ddiv>
 8016954:	4602      	mov	r2, r0
 8016956:	460b      	mov	r3, r1
 8016958:	4610      	mov	r0, r2
 801695a:	4619      	mov	r1, r3
 801695c:	f04f 0200 	mov.w	r2, #0
 8016960:	4b06      	ldr	r3, [pc, #24]	@ (801697c <RegionCommonComputeSymbolTimeLoRa+0x58>)
 8016962:	f7e9 fe49 	bl	80005f8 <__aeabi_dmul>
 8016966:	4602      	mov	r2, r0
 8016968:	460b      	mov	r3, r1
 801696a:	ec43 2b17 	vmov	d7, r2, r3
}
 801696e:	eeb0 0a47 	vmov.f32	s0, s14
 8016972:	eef0 0a67 	vmov.f32	s1, s15
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bdb0      	pop	{r4, r5, r7, pc}
 801697c:	408f4000 	.word	0x408f4000

08016980 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk(uint8_t phyDr)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	4603      	mov	r3, r0
 8016988:	71fb      	strb	r3, [r7, #7]
	return (8.0 / (double)phyDr); // 1 symbol equals 1 byte
 801698a:	79fb      	ldrb	r3, [r7, #7]
 801698c:	4618      	mov	r0, r3
 801698e:	f7e9 fdb9 	bl	8000504 <__aeabi_ui2d>
 8016992:	4602      	mov	r2, r0
 8016994:	460b      	mov	r3, r1
 8016996:	f04f 0000 	mov.w	r0, #0
 801699a:	4907      	ldr	r1, [pc, #28]	@ (80169b8 <RegionCommonComputeSymbolTimeFsk+0x38>)
 801699c:	f7e9 ff56 	bl	800084c <__aeabi_ddiv>
 80169a0:	4602      	mov	r2, r0
 80169a2:	460b      	mov	r3, r1
 80169a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80169a8:	eeb0 0a47 	vmov.f32	s0, s14
 80169ac:	eef0 0a67 	vmov.f32	s1, s15
 80169b0:	3708      	adds	r7, #8
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
 80169b6:	bf00      	nop
 80169b8:	40200000 	.word	0x40200000

080169bc <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters(double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t *windowTimeout, int32_t *windowOffset)
{
 80169bc:	b5b0      	push	{r4, r5, r7, lr}
 80169be:	b086      	sub	sp, #24
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	ed87 0b04 	vstr	d0, [r7, #16]
 80169c6:	60b9      	str	r1, [r7, #8]
 80169c8:	607a      	str	r2, [r7, #4]
 80169ca:	603b      	str	r3, [r7, #0]
 80169cc:	4603      	mov	r3, r0
 80169ce:	73fb      	strb	r3, [r7, #15]
	*windowTimeout = T_MAX((uint32_t)ceil(((2 * minRxSymbols - 8) * tSymbol + 2 * rxError) / tSymbol), minRxSymbols); // Computed number of symbols
 80169d0:	7bfb      	ldrb	r3, [r7, #15]
 80169d2:	3b04      	subs	r3, #4
 80169d4:	005b      	lsls	r3, r3, #1
 80169d6:	4618      	mov	r0, r3
 80169d8:	f7e9 fda4 	bl	8000524 <__aeabi_i2d>
 80169dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80169e0:	f7e9 fe0a 	bl	80005f8 <__aeabi_dmul>
 80169e4:	4602      	mov	r2, r0
 80169e6:	460b      	mov	r3, r1
 80169e8:	4614      	mov	r4, r2
 80169ea:	461d      	mov	r5, r3
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	005b      	lsls	r3, r3, #1
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7e9 fd87 	bl	8000504 <__aeabi_ui2d>
 80169f6:	4602      	mov	r2, r0
 80169f8:	460b      	mov	r3, r1
 80169fa:	4620      	mov	r0, r4
 80169fc:	4629      	mov	r1, r5
 80169fe:	f7e9 fc45 	bl	800028c <__adddf3>
 8016a02:	4602      	mov	r2, r0
 8016a04:	460b      	mov	r3, r1
 8016a06:	4610      	mov	r0, r2
 8016a08:	4619      	mov	r1, r3
 8016a0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016a0e:	f7e9 ff1d 	bl	800084c <__aeabi_ddiv>
 8016a12:	4602      	mov	r2, r0
 8016a14:	460b      	mov	r3, r1
 8016a16:	ec43 2b17 	vmov	d7, r2, r3
 8016a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8016a1e:	eef0 0a67 	vmov.f32	s1, s15
 8016a22:	f00d fc25 	bl	8024270 <ceil>
 8016a26:	ec53 2b10 	vmov	r2, r3, d0
 8016a2a:	4610      	mov	r0, r2
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	f7ea f8bb 	bl	8000ba8 <__aeabi_d2uiz>
 8016a32:	4602      	mov	r2, r0
 8016a34:	7bfb      	ldrb	r3, [r7, #15]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	bf38      	it	cc
 8016a3a:	461a      	movcc	r2, r3
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	601a      	str	r2, [r3, #0]
	*windowOffset = (int32_t)ceil((4.0 * tSymbol) - ((*windowTimeout * tSymbol) / 2.0) - wakeUpTime);
 8016a40:	f04f 0200 	mov.w	r2, #0
 8016a44:	4b22      	ldr	r3, [pc, #136]	@ (8016ad0 <RegionCommonComputeRxWindowParameters+0x114>)
 8016a46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016a4a:	f7e9 fdd5 	bl	80005f8 <__aeabi_dmul>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	460b      	mov	r3, r1
 8016a52:	4614      	mov	r4, r2
 8016a54:	461d      	mov	r5, r3
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7e9 fd52 	bl	8000504 <__aeabi_ui2d>
 8016a60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016a64:	f7e9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8016a68:	4602      	mov	r2, r0
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	4610      	mov	r0, r2
 8016a6e:	4619      	mov	r1, r3
 8016a70:	f04f 0200 	mov.w	r2, #0
 8016a74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016a78:	f7e9 fee8 	bl	800084c <__aeabi_ddiv>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	460b      	mov	r3, r1
 8016a80:	4620      	mov	r0, r4
 8016a82:	4629      	mov	r1, r5
 8016a84:	f7e9 fc00 	bl	8000288 <__aeabi_dsub>
 8016a88:	4602      	mov	r2, r0
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	4614      	mov	r4, r2
 8016a8e:	461d      	mov	r5, r3
 8016a90:	6878      	ldr	r0, [r7, #4]
 8016a92:	f7e9 fd37 	bl	8000504 <__aeabi_ui2d>
 8016a96:	4602      	mov	r2, r0
 8016a98:	460b      	mov	r3, r1
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	4629      	mov	r1, r5
 8016a9e:	f7e9 fbf3 	bl	8000288 <__aeabi_dsub>
 8016aa2:	4602      	mov	r2, r0
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	ec43 2b17 	vmov	d7, r2, r3
 8016aaa:	eeb0 0a47 	vmov.f32	s0, s14
 8016aae:	eef0 0a67 	vmov.f32	s1, s15
 8016ab2:	f00d fbdd 	bl	8024270 <ceil>
 8016ab6:	ec53 2b10 	vmov	r2, r3, d0
 8016aba:	4610      	mov	r0, r2
 8016abc:	4619      	mov	r1, r3
 8016abe:	f7ea f84b 	bl	8000b58 <__aeabi_d2iz>
 8016ac2:	4602      	mov	r2, r0
 8016ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ac6:	601a      	str	r2, [r3, #0]
}
 8016ac8:	bf00      	nop
 8016aca:	3718      	adds	r7, #24
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bdb0      	pop	{r4, r5, r7, pc}
 8016ad0:	40100000 	.word	0x40100000

08016ad4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower(int8_t txPowerIndex, float maxEirp, float antennaGain)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b086      	sub	sp, #24
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	4603      	mov	r3, r0
 8016adc:	ed87 0a02 	vstr	s0, [r7, #8]
 8016ae0:	edc7 0a01 	vstr	s1, [r7, #4]
 8016ae4:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	75fb      	strb	r3, [r7, #23]

	phyTxPower = (int8_t)floor((maxEirp - (txPowerIndex * 2U)) - antennaGain);
 8016aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016aee:	005b      	lsls	r3, r3, #1
 8016af0:	ee07 3a90 	vmov	s15, r3
 8016af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016af8:	ed97 7a02 	vldr	s14, [r7, #8]
 8016afc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8016b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016b08:	ee17 0a90 	vmov	r0, s15
 8016b0c:	f7e9 fd1c 	bl	8000548 <__aeabi_f2d>
 8016b10:	4602      	mov	r2, r0
 8016b12:	460b      	mov	r3, r1
 8016b14:	ec43 2b10 	vmov	d0, r2, r3
 8016b18:	f00d fc26 	bl	8024368 <floor>
 8016b1c:	ec53 2b10 	vmov	r2, r3, d0
 8016b20:	4610      	mov	r0, r2
 8016b22:	4619      	mov	r1, r3
 8016b24:	f7ea f818 	bl	8000b58 <__aeabi_d2iz>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	75fb      	strb	r3, [r7, #23]

	return phyTxPower;
 8016b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b30:	4618      	mov	r0, r3
 8016b32:	3718      	adds	r7, #24
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}

08016b38 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff(RegionCommonCalcBackOffParams_t *calcBackOffParams)
{
 8016b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b3c:	b08b      	sub	sp, #44	@ 0x2c
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	61f8      	str	r0, [r7, #28]
	uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	6819      	ldr	r1, [r3, #0]
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	7adb      	ldrb	r3, [r3, #11]
 8016b4a:	461a      	mov	r2, r3
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	005b      	lsls	r3, r3, #1
 8016b50:	4413      	add	r3, r2
 8016b52:	009b      	lsls	r3, r3, #2
 8016b54:	440b      	add	r3, r1
 8016b56:	7a5b      	ldrb	r3, [r3, #9]
 8016b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	685a      	ldr	r2, [r3, #4]
 8016b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b64:	015b      	lsls	r3, r3, #5
 8016b66:	4413      	add	r3, r2
 8016b68:	881b      	ldrh	r3, [r3, #0]
 8016b6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t joinDutyCycle = 0;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	847b      	strh	r3, [r7, #34]	@ 0x22

	// Reset time-off to initial value.
	calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8016b70:	69fb      	ldr	r3, [r7, #28]
 8016b72:	685a      	ldr	r2, [r3, #4]
 8016b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b78:	015b      	lsls	r3, r3, #5
 8016b7a:	18d1      	adds	r1, r2, r3
 8016b7c:	f04f 0200 	mov.w	r2, #0
 8016b80:	f04f 0300 	mov.w	r3, #0
 8016b84:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if (calcBackOffParams->Joined == false)
 8016b88:	69fb      	ldr	r3, [r7, #28]
 8016b8a:	7a5b      	ldrb	r3, [r3, #9]
 8016b8c:	f083 0301 	eor.w	r3, r3, #1
 8016b90:	b2db      	uxtb	r3, r3
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d050      	beq.n	8016c38 <RegionCommonCalcBackOff+0x100>
	{
		// Get the join duty cycle
		joinDutyCycle = RegionCommonGetJoinDc(calcBackOffParams->ElapsedTime);
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8016b9c:	4610      	mov	r0, r2
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	f7ff fb46 	bl	8016230 <RegionCommonGetJoinDc>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	847b      	strh	r3, [r7, #34]	@ 0x22
		// Apply the most restricting duty cycle
		dutyCycle = T_MAX(dutyCycle, joinDutyCycle);
 8016ba8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016baa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016bac:	4293      	cmp	r3, r2
 8016bae:	bf38      	it	cc
 8016bb0:	4613      	movcc	r3, r2
 8016bb2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		// Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
		if ((calcBackOffParams->DutyCycleEnabled == false) && (calcBackOffParams->LastTxIsJoinRequest == false))
 8016bb4:	69fb      	ldr	r3, [r7, #28]
 8016bb6:	7a9b      	ldrb	r3, [r3, #10]
 8016bb8:	f083 0301 	eor.w	r3, r3, #1
 8016bbc:	b2db      	uxtb	r3, r3
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d013      	beq.n	8016bea <RegionCommonCalcBackOff+0xb2>
 8016bc2:	69fb      	ldr	r3, [r7, #28]
 8016bc4:	7a1b      	ldrb	r3, [r3, #8]
 8016bc6:	f083 0301 	eor.w	r3, r3, #1
 8016bca:	b2db      	uxtb	r3, r3
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d00c      	beq.n	8016bea <RegionCommonCalcBackOff+0xb2>
		{
			// This is the case when the duty cycle is off and the last uplink frame was not a join.
			// This could happen in case of a rejoin, e.g. in compliance test mode.
			// In this special case we have to set the time off to 0, since the join duty cycle shall only
			// be applied after the first join request.
			calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8016bd0:	69fb      	ldr	r3, [r7, #28]
 8016bd2:	685a      	ldr	r2, [r3, #4]
 8016bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016bd8:	015b      	lsls	r3, r3, #5
 8016bda:	18d1      	adds	r1, r2, r3
 8016bdc:	f04f 0200 	mov.w	r2, #0
 8016be0:	f04f 0300 	mov.w	r3, #0
 8016be4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		else
		{
			calcBackOffParams->Bands[bandIdx].TimeOff = 0;
		}
	}
}
 8016be8:	e057      	b.n	8016c9a <RegionCommonCalcBackOff+0x162>
			calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8016bea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016bec:	2200      	movs	r2, #0
 8016bee:	60bb      	str	r3, [r7, #8]
 8016bf0:	60fa      	str	r2, [r7, #12]
 8016bf2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	f113 3aff 	adds.w	sl, r3, #4294967295	@ 0xffffffff
 8016bfc:	4613      	mov	r3, r2
 8016bfe:	f143 3bff 	adc.w	fp, r3, #4294967295	@ 0xffffffff
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016c08:	69f9      	ldr	r1, [r7, #28]
 8016c0a:	6848      	ldr	r0, [r1, #4]
 8016c0c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8016c10:	0149      	lsls	r1, r1, #5
 8016c12:	4401      	add	r1, r0
 8016c14:	fb02 f40b 	mul.w	r4, r2, fp
 8016c18:	fb0a f003 	mul.w	r0, sl, r3
 8016c1c:	4420      	add	r0, r4
 8016c1e:	fbaa 2302 	umull	r2, r3, sl, r2
 8016c22:	617b      	str	r3, [r7, #20]
 8016c24:	4613      	mov	r3, r2
 8016c26:	613b      	str	r3, [r7, #16]
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	18c3      	adds	r3, r0, r3
 8016c2c:	617b      	str	r3, [r7, #20]
 8016c2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016c32:	e9c1 3406 	strd	r3, r4, [r1, #24]
}
 8016c36:	e030      	b.n	8016c9a <RegionCommonCalcBackOff+0x162>
		if (calcBackOffParams->DutyCycleEnabled == true)
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	7a9b      	ldrb	r3, [r3, #10]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d020      	beq.n	8016c82 <RegionCommonCalcBackOff+0x14a>
			calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8016c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016c42:	2200      	movs	r2, #0
 8016c44:	603b      	str	r3, [r7, #0]
 8016c46:	607a      	str	r2, [r7, #4]
 8016c48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016c4c:	460b      	mov	r3, r1
 8016c4e:	f113 38ff 	adds.w	r8, r3, #4294967295	@ 0xffffffff
 8016c52:	4613      	mov	r3, r2
 8016c54:	f143 39ff 	adc.w	r9, r3, #4294967295	@ 0xffffffff
 8016c58:	69fb      	ldr	r3, [r7, #28]
 8016c5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016c5e:	69f9      	ldr	r1, [r7, #28]
 8016c60:	6848      	ldr	r0, [r1, #4]
 8016c62:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8016c66:	0149      	lsls	r1, r1, #5
 8016c68:	4401      	add	r1, r0
 8016c6a:	fb02 f409 	mul.w	r4, r2, r9
 8016c6e:	fb08 f003 	mul.w	r0, r8, r3
 8016c72:	4420      	add	r0, r4
 8016c74:	fba8 5602 	umull	r5, r6, r8, r2
 8016c78:	1983      	adds	r3, r0, r6
 8016c7a:	461e      	mov	r6, r3
 8016c7c:	e9c1 5606 	strd	r5, r6, [r1, #24]
}
 8016c80:	e00b      	b.n	8016c9a <RegionCommonCalcBackOff+0x162>
			calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8016c82:	69fb      	ldr	r3, [r7, #28]
 8016c84:	685a      	ldr	r2, [r3, #4]
 8016c86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016c8a:	015b      	lsls	r3, r3, #5
 8016c8c:	18d1      	adds	r1, r2, r3
 8016c8e:	f04f 0200 	mov.w	r2, #0
 8016c92:	f04f 0300 	mov.w	r3, #0
 8016c96:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8016c9a:	bf00      	nop
 8016c9c:	372c      	adds	r7, #44	@ 0x2c
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ca4 <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b085      	sub	sp, #20
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	4603      	mov	r3, r0
 8016cac:	460a      	mov	r2, r1
 8016cae:	71fb      	strb	r3, [r7, #7]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 8016cb8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016cbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	d102      	bne.n	8016cca <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 8016cc4:	79bb      	ldrb	r3, [r7, #6]
 8016cc6:	73fb      	strb	r3, [r7, #15]
 8016cc8:	e002      	b.n	8016cd0 <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 8016cca:	79fb      	ldrb	r3, [r7, #7]
 8016ccc:	3b01      	subs	r3, #1
 8016cce:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 8016cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3714      	adds	r7, #20
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr

08016ce0 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	b083      	sub	sp, #12
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
	switch (BandwidthsEU433[drIndex])
 8016ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8016d14 <GetBandwidth+0x34>)
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016cf0:	4a09      	ldr	r2, [pc, #36]	@ (8016d18 <GetBandwidth+0x38>)
 8016cf2:	4293      	cmp	r3, r2
 8016cf4:	d004      	beq.n	8016d00 <GetBandwidth+0x20>
 8016cf6:	4a09      	ldr	r2, [pc, #36]	@ (8016d1c <GetBandwidth+0x3c>)
 8016cf8:	4293      	cmp	r3, r2
 8016cfa:	d003      	beq.n	8016d04 <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	e002      	b.n	8016d06 <GetBandwidth+0x26>
	case 250000:
		return 1;
 8016d00:	2301      	movs	r3, #1
 8016d02:	e000      	b.n	8016d06 <GetBandwidth+0x26>
	case 500000:
		return 2;
 8016d04:	2302      	movs	r3, #2
	}
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	370c      	adds	r7, #12
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d10:	4770      	bx	lr
 8016d12:	bf00      	nop
 8016d14:	080252bc 	.word	0x080252bc
 8016d18:	0003d090 	.word	0x0003d090
 8016d1c:	0007a120 	.word	0x0007a120

08016d20 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 8016d20:	b480      	push	{r7}
 8016d22:	b085      	sub	sp, #20
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	603b      	str	r3, [r7, #0]
 8016d28:	4603      	mov	r3, r0
 8016d2a:	71fb      	strb	r3, [r7, #7]
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	71bb      	strb	r3, [r7, #6]
 8016d30:	4613      	mov	r3, r2
 8016d32:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 8016d34:	79fb      	ldrb	r3, [r7, #7]
 8016d36:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 8016d38:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8016d3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016d40:	4293      	cmp	r3, r2
 8016d42:	bfb8      	it	lt
 8016d44:	4613      	movlt	r3, r2
 8016d46:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 8016d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3714      	adds	r7, #20
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr

08016d58 <VerifyTxFreq>:

static bool VerifyTxFreq(uint32_t freq)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
	// Check radio driver support
	if (Radio.CheckRfFrequency(freq) == false)
 8016d60:	4b0d      	ldr	r3, [pc, #52]	@ (8016d98 <VerifyTxFreq+0x40>)
 8016d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	4798      	blx	r3
 8016d68:	4603      	mov	r3, r0
 8016d6a:	f083 0301 	eor.w	r3, r3, #1
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d001      	beq.n	8016d78 <VerifyTxFreq+0x20>
	{
		return false;
 8016d74:	2300      	movs	r3, #0
 8016d76:	e00a      	b.n	8016d8e <VerifyTxFreq+0x36>
	}

	if ((freq < 433175000) || (freq > 434665000))
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	4a08      	ldr	r2, [pc, #32]	@ (8016d9c <VerifyTxFreq+0x44>)
 8016d7c:	4293      	cmp	r3, r2
 8016d7e:	d903      	bls.n	8016d88 <VerifyTxFreq+0x30>
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	4a07      	ldr	r2, [pc, #28]	@ (8016da0 <VerifyTxFreq+0x48>)
 8016d84:	4293      	cmp	r3, r2
 8016d86:	d901      	bls.n	8016d8c <VerifyTxFreq+0x34>
	{
		return false;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	e000      	b.n	8016d8e <VerifyTxFreq+0x36>
	}
	return true;
 8016d8c:	2301      	movs	r3, #1
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	3708      	adds	r7, #8
 8016d92:	46bd      	mov	sp, r7
 8016d94:	bd80      	pop	{r7, pc}
 8016d96:	bf00      	nop
 8016d98:	08025450 	.word	0x08025450
 8016d9c:	19d1b9d7 	.word	0x19d1b9d7
 8016da0:	19e87628 	.word	0x19e87628

08016da4 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(bool joined, uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b086      	sub	sp, #24
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	60ba      	str	r2, [r7, #8]
 8016dac:	607b      	str	r3, [r7, #4]
 8016dae:	4603      	mov	r3, r0
 8016db0:	73fb      	strb	r3, [r7, #15]
 8016db2:	460b      	mov	r3, r1
 8016db4:	73bb      	strb	r3, [r7, #14]
	uint8_t nbEnabledChannels = 0;
 8016db6:	2300      	movs	r3, #0
 8016db8:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < EU433_MAX_NB_CHANNELS; i += 16, k++)
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	757b      	strb	r3, [r7, #21]
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	753b      	strb	r3, [r7, #20]
 8016dc6:	e086      	b.n	8016ed6 <CountNbOfEnabledChannels+0x132>
	{
		for (uint8_t j = 0; j < 16; j++)
 8016dc8:	2300      	movs	r3, #0
 8016dca:	74fb      	strb	r3, [r7, #19]
 8016dcc:	e07a      	b.n	8016ec4 <CountNbOfEnabledChannels+0x120>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 8016dce:	7d3b      	ldrb	r3, [r7, #20]
 8016dd0:	005b      	lsls	r3, r3, #1
 8016dd2:	68ba      	ldr	r2, [r7, #8]
 8016dd4:	4413      	add	r3, r2
 8016dd6:	881b      	ldrh	r3, [r3, #0]
 8016dd8:	461a      	mov	r2, r3
 8016dda:	7cfb      	ldrb	r3, [r7, #19]
 8016ddc:	fa42 f303 	asr.w	r3, r2, r3
 8016de0:	f003 0301 	and.w	r3, r3, #1
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d06a      	beq.n	8016ebe <CountNbOfEnabledChannels+0x11a>
			{
				if (channels[i + j].Frequency == 0)
 8016de8:	7d7a      	ldrb	r2, [r7, #21]
 8016dea:	7cfb      	ldrb	r3, [r7, #19]
 8016dec:	4413      	add	r3, r2
 8016dee:	461a      	mov	r2, r3
 8016df0:	4613      	mov	r3, r2
 8016df2:	005b      	lsls	r3, r3, #1
 8016df4:	4413      	add	r3, r2
 8016df6:	009b      	lsls	r3, r3, #2
 8016df8:	461a      	mov	r2, r3
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	4413      	add	r3, r2
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d057      	beq.n	8016eb4 <CountNbOfEnabledChannels+0x110>
				{ // Check if the channel is enabled
					continue;
				}
				if (joined == false)
 8016e04:	7bfb      	ldrb	r3, [r7, #15]
 8016e06:	f083 0301 	eor.w	r3, r3, #1
 8016e0a:	b2db      	uxtb	r3, r3
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d007      	beq.n	8016e20 <CountNbOfEnabledChannels+0x7c>
				{
					if ((EU433_JOIN_CHANNELS & (1 << j)) == 0)
 8016e10:	7cfb      	ldrb	r3, [r7, #19]
 8016e12:	2207      	movs	r2, #7
 8016e14:	fa42 f303 	asr.w	r3, r2, r3
 8016e18:	f003 0301 	and.w	r3, r3, #1
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d04b      	beq.n	8016eb8 <CountNbOfEnabledChannels+0x114>
					{
						continue;
					}
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8016e20:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8016e24:	7d7a      	ldrb	r2, [r7, #21]
 8016e26:	7cfb      	ldrb	r3, [r7, #19]
 8016e28:	4413      	add	r3, r2
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	005b      	lsls	r3, r3, #1
 8016e30:	4413      	add	r3, r2
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	461a      	mov	r2, r3
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	4413      	add	r3, r2
 8016e3a:	7a1b      	ldrb	r3, [r3, #8]
 8016e3c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016e40:	b25b      	sxtb	r3, r3
 8016e42:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 8016e44:	7d7a      	ldrb	r2, [r7, #21]
 8016e46:	7cfb      	ldrb	r3, [r7, #19]
 8016e48:	4413      	add	r3, r2
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	4613      	mov	r3, r2
 8016e4e:	005b      	lsls	r3, r3, #1
 8016e50:	4413      	add	r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	461a      	mov	r2, r3
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	4413      	add	r3, r2
 8016e5a:	7a1b      	ldrb	r3, [r3, #8]
 8016e5c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016e60:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8016e62:	461a      	mov	r2, r3
 8016e64:	f7ff fa80 	bl	8016368 <RegionCommonValueInRange>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d026      	beq.n	8016ebc <CountNbOfEnabledChannels+0x118>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 8016e6e:	7d7a      	ldrb	r2, [r7, #21]
 8016e70:	7cfb      	ldrb	r3, [r7, #19]
 8016e72:	4413      	add	r3, r2
 8016e74:	461a      	mov	r2, r3
 8016e76:	4613      	mov	r3, r2
 8016e78:	005b      	lsls	r3, r3, #1
 8016e7a:	4413      	add	r3, r2
 8016e7c:	009b      	lsls	r3, r3, #2
 8016e7e:	461a      	mov	r2, r3
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	4413      	add	r3, r2
 8016e84:	7a5b      	ldrb	r3, [r3, #9]
 8016e86:	015b      	lsls	r3, r3, #5
 8016e88:	6a3a      	ldr	r2, [r7, #32]
 8016e8a:	4413      	add	r3, r2
 8016e8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8016e90:	4313      	orrs	r3, r2
 8016e92:	d003      	beq.n	8016e9c <CountNbOfEnabledChannels+0xf8>
				{ // Check if the band is available for transmission
					delayTransmission++;
 8016e94:	7dbb      	ldrb	r3, [r7, #22]
 8016e96:	3301      	adds	r3, #1
 8016e98:	75bb      	strb	r3, [r7, #22]
					continue;
 8016e9a:	e010      	b.n	8016ebe <CountNbOfEnabledChannels+0x11a>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 8016e9c:	7dfb      	ldrb	r3, [r7, #23]
 8016e9e:	1c5a      	adds	r2, r3, #1
 8016ea0:	75fa      	strb	r2, [r7, #23]
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ea6:	4413      	add	r3, r2
 8016ea8:	7d79      	ldrb	r1, [r7, #21]
 8016eaa:	7cfa      	ldrb	r2, [r7, #19]
 8016eac:	440a      	add	r2, r1
 8016eae:	b2d2      	uxtb	r2, r2
 8016eb0:	701a      	strb	r2, [r3, #0]
 8016eb2:	e004      	b.n	8016ebe <CountNbOfEnabledChannels+0x11a>
					continue;
 8016eb4:	bf00      	nop
 8016eb6:	e002      	b.n	8016ebe <CountNbOfEnabledChannels+0x11a>
						continue;
 8016eb8:	bf00      	nop
 8016eba:	e000      	b.n	8016ebe <CountNbOfEnabledChannels+0x11a>
					continue;
 8016ebc:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 8016ebe:	7cfb      	ldrb	r3, [r7, #19]
 8016ec0:	3301      	adds	r3, #1
 8016ec2:	74fb      	strb	r3, [r7, #19]
 8016ec4:	7cfb      	ldrb	r3, [r7, #19]
 8016ec6:	2b0f      	cmp	r3, #15
 8016ec8:	d981      	bls.n	8016dce <CountNbOfEnabledChannels+0x2a>
	for (uint8_t i = 0, k = 0; i < EU433_MAX_NB_CHANNELS; i += 16, k++)
 8016eca:	7d7b      	ldrb	r3, [r7, #21]
 8016ecc:	3310      	adds	r3, #16
 8016ece:	757b      	strb	r3, [r7, #21]
 8016ed0:	7d3b      	ldrb	r3, [r7, #20]
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	753b      	strb	r3, [r7, #20]
 8016ed6:	7d7b      	ldrb	r3, [r7, #21]
 8016ed8:	2b0f      	cmp	r3, #15
 8016eda:	f67f af75 	bls.w	8016dc8 <CountNbOfEnabledChannels+0x24>
			}
		}
	}

	*delayTx = delayTransmission;
 8016ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ee0:	7dba      	ldrb	r2, [r7, #22]
 8016ee2:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 8016ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3718      	adds	r7, #24
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
	...

08016ef0 <RegionEU433GetPhyParam>:

PhyParam_t RegionEU433GetPhyParam(GetPhyParams_t *getPhy)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 8016ef8:	2300      	movs	r3, #0
 8016efa:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	781b      	ldrb	r3, [r3, #0]
 8016f00:	2b20      	cmp	r3, #32
 8016f02:	f200 80b1 	bhi.w	8017068 <RegionEU433GetPhyParam+0x178>
 8016f06:	a201      	add	r2, pc, #4	@ (adr r2, 8016f0c <RegionEU433GetPhyParam+0x1c>)
 8016f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f0c:	08016f91 	.word	0x08016f91
 8016f10:	08016f97 	.word	0x08016f97
 8016f14:	08017069 	.word	0x08017069
 8016f18:	08017069 	.word	0x08017069
 8016f1c:	08017069 	.word	0x08017069
 8016f20:	08016f9d 	.word	0x08016f9d
 8016f24:	08017069 	.word	0x08017069
 8016f28:	08017069 	.word	0x08017069
 8016f2c:	08016fb7 	.word	0x08016fb7
 8016f30:	08016fbd 	.word	0x08016fbd
 8016f34:	08016fcd 	.word	0x08016fcd
 8016f38:	08016fdd 	.word	0x08016fdd
 8016f3c:	08016fe3 	.word	0x08016fe3
 8016f40:	08016feb 	.word	0x08016feb
 8016f44:	08016ff3 	.word	0x08016ff3
 8016f48:	08016ffb 	.word	0x08016ffb
 8016f4c:	08017003 	.word	0x08017003
 8016f50:	0801700b 	.word	0x0801700b
 8016f54:	08017013 	.word	0x08017013
 8016f58:	08017027 	.word	0x08017027
 8016f5c:	0801702d 	.word	0x0801702d
 8016f60:	08017033 	.word	0x08017033
 8016f64:	08017039 	.word	0x08017039
 8016f68:	0801703f 	.word	0x0801703f
 8016f6c:	08017045 	.word	0x08017045
 8016f70:	0801704b 	.word	0x0801704b
 8016f74:	08017051 	.word	0x08017051
 8016f78:	08017051 	.word	0x08017051
 8016f7c:	08017057 	.word	0x08017057
 8016f80:	0801705d 	.word	0x0801705d
 8016f84:	08017063 	.word	0x08017063
 8016f88:	08017063 	.word	0x08017063
 8016f8c:	08016fa3 	.word	0x08016fa3
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = EU433_RX_MIN_DATARATE;
 8016f90:	2300      	movs	r3, #0
 8016f92:	60fb      	str	r3, [r7, #12]
		break;
 8016f94:	e069      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = EU433_TX_MIN_DATARATE;
 8016f96:	2300      	movs	r3, #0
 8016f98:	60fb      	str	r3, [r7, #12]
		break;
 8016f9a:	e066      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = EU433_DEFAULT_DATARATE;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	60fb      	str	r3, [r7, #12]
		break;
 8016fa0:	e063      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, EU433_TX_MIN_DATARATE);
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fa8:	2100      	movs	r1, #0
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7ff fe7a 	bl	8016ca4 <GetNextLowerTxDr>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	60fb      	str	r3, [r7, #12]
		break;
 8016fb4:	e059      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = EU433_DEFAULT_TX_POWER;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	60fb      	str	r3, [r7, #12]
		break;
 8016fba:	e056      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8017074 <RegionEU433GetPhyParam+0x184>)
 8016fc6:	5c9b      	ldrb	r3, [r3, r2]
 8016fc8:	60fb      	str	r3, [r7, #12]
		break;
 8016fca:	e04e      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	4b28      	ldr	r3, [pc, #160]	@ (8017078 <RegionEU433GetPhyParam+0x188>)
 8016fd6:	5c9b      	ldrb	r3, [r3, r2]
 8016fd8:	60fb      	str	r3, [r7, #12]
		break;
 8016fda:	e046      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 8016fdc:	2301      	movs	r3, #1
 8016fde:	60fb      	str	r3, [r7, #12]
		break;
 8016fe0:	e043      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = EU433_MAX_RX_WINDOW;
 8016fe2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016fe6:	60fb      	str	r3, [r7, #12]
		break;
 8016fe8:	e03f      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = EU433_RECEIVE_DELAY1;
 8016fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016fee:	60fb      	str	r3, [r7, #12]
		break;
 8016ff0:	e03b      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = EU433_RECEIVE_DELAY2;
 8016ff2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8016ff6:	60fb      	str	r3, [r7, #12]
		break;
 8016ff8:	e037      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = EU433_JOIN_ACCEPT_DELAY1;
 8016ffa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8016ffe:	60fb      	str	r3, [r7, #12]
		break;
 8017000:	e033      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = EU433_JOIN_ACCEPT_DELAY2;
 8017002:	f241 7370 	movw	r3, #6000	@ 0x1770
 8017006:	60fb      	str	r3, [r7, #12]
		break;
 8017008:	e02f      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = EU433_MAX_FCNT_GAP;
 801700a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801700e:	60fb      	str	r3, [r7, #12]
		break;
 8017010:	e02b      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (EU433_ACKTIMEOUT + randr(-EU433_ACK_TIMEOUT_RND, EU433_ACK_TIMEOUT_RND));
 8017012:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017016:	4819      	ldr	r0, [pc, #100]	@ (801707c <RegionEU433GetPhyParam+0x18c>)
 8017018:	f009 fdac 	bl	8020b74 <randr>
 801701c:	4603      	mov	r3, r0
 801701e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8017022:	60fb      	str	r3, [r7, #12]
		break;
 8017024:	e021      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = EU433_DEFAULT_RX1_DR_OFFSET;
 8017026:	2300      	movs	r3, #0
 8017028:	60fb      	str	r3, [r7, #12]
		break;
 801702a:	e01e      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = EU433_RX_WND_2_FREQ;
 801702c:	4b14      	ldr	r3, [pc, #80]	@ (8017080 <RegionEU433GetPhyParam+0x190>)
 801702e:	60fb      	str	r3, [r7, #12]
		break;
 8017030:	e01b      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = EU433_RX_WND_2_DR;
 8017032:	2300      	movs	r3, #0
 8017034:	60fb      	str	r3, [r7, #12]
		break;
 8017036:	e018      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 8017038:	4b12      	ldr	r3, [pc, #72]	@ (8017084 <RegionEU433GetPhyParam+0x194>)
 801703a:	60fb      	str	r3, [r7, #12]
		break;
 801703c:	e015      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 801703e:	4b12      	ldr	r3, [pc, #72]	@ (8017088 <RegionEU433GetPhyParam+0x198>)
 8017040:	60fb      	str	r3, [r7, #12]
		break;
 8017042:	e012      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = EU433_MAX_NB_CHANNELS;
 8017044:	2310      	movs	r3, #16
 8017046:	60fb      	str	r3, [r7, #12]
		break;
 8017048:	e00f      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 801704a:	4b10      	ldr	r3, [pc, #64]	@ (801708c <RegionEU433GetPhyParam+0x19c>)
 801704c:	60fb      	str	r3, [r7, #12]
		break;
 801704e:	e00c      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 8017050:	2300      	movs	r3, #0
 8017052:	60fb      	str	r3, [r7, #12]
		break;
 8017054:	e009      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 8017056:	4b0e      	ldr	r3, [pc, #56]	@ (8017090 <RegionEU433GetPhyParam+0x1a0>)
 8017058:	60fb      	str	r3, [r7, #12]
		break;
 801705a:	e006      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 801705c:	4b0d      	ldr	r3, [pc, #52]	@ (8017094 <RegionEU433GetPhyParam+0x1a4>)
 801705e:	60fb      	str	r3, [r7, #12]
		break;
 8017060:	e003      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 48;
 8017062:	2330      	movs	r3, #48	@ 0x30
 8017064:	60fb      	str	r3, [r7, #12]
		break;
 8017066:	e000      	b.n	801706a <RegionEU433GetPhyParam+0x17a>
	}
	default:
	{
		break;
 8017068:	bf00      	nop
	}
	}

	return phyParam;
 801706a:	68fb      	ldr	r3, [r7, #12]
}
 801706c:	4618      	mov	r0, r3
 801706e:	3710      	adds	r7, #16
 8017070:	46bd      	mov	sp, r7
 8017072:	bd80      	pop	{r7, pc}
 8017074:	080252dc 	.word	0x080252dc
 8017078:	080252e4 	.word	0x080252e4
 801707c:	fffffc18 	.word	0xfffffc18
 8017080:	19e87628 	.word	0x19e87628
 8017084:	20006c9c 	.word	0x20006c9c
 8017088:	20006ca8 	.word	0x20006ca8
 801708c:	200076ec 	.word	0x200076ec
 8017090:	41426666 	.word	0x41426666
 8017094:	4009999a 	.word	0x4009999a

08017098 <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b082      	sub	sp, #8
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	7858      	ldrb	r0, [r3, #1]
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	781b      	ldrb	r3, [r3, #0]
 80170a8:	4619      	mov	r1, r3
 80170aa:	4a0a      	ldr	r2, [pc, #40]	@ (80170d4 <RegionEU433SetBandTxDone+0x3c>)
 80170ac:	460b      	mov	r3, r1
 80170ae:	005b      	lsls	r3, r3, #1
 80170b0:	440b      	add	r3, r1
 80170b2:	009b      	lsls	r3, r3, #2
 80170b4:	4413      	add	r3, r2
 80170b6:	3309      	adds	r3, #9
 80170b8:	781b      	ldrb	r3, [r3, #0]
 80170ba:	015b      	lsls	r3, r3, #5
 80170bc:	4a06      	ldr	r2, [pc, #24]	@ (80170d8 <RegionEU433SetBandTxDone+0x40>)
 80170be:	1899      	adds	r1, r3, r2
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80170c6:	f7ff f9f5 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 80170ca:	bf00      	nop
 80170cc:	3708      	adds	r7, #8
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bd80      	pop	{r7, pc}
 80170d2:	bf00      	nop
 80170d4:	200076ec 	.word	0x200076ec
 80170d8:	20000150 	.word	0x20000150

080170dc <RegionEU433InitDefaults>:

void RegionEU433InitDefaults(InitType_t type)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b08c      	sub	sp, #48	@ 0x30
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	4603      	mov	r3, r0
 80170e4:	71fb      	strb	r3, [r7, #7]
	switch (type)
 80170e6:	79fb      	ldrb	r3, [r7, #7]
 80170e8:	2b02      	cmp	r3, #2
 80170ea:	d029      	beq.n	8017140 <RegionEU433InitDefaults+0x64>
 80170ec:	2b02      	cmp	r3, #2
 80170ee:	dc2d      	bgt.n	801714c <RegionEU433InitDefaults+0x70>
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d002      	beq.n	80170fa <RegionEU433InitDefaults+0x1e>
 80170f4:	2b01      	cmp	r3, #1
 80170f6:	d01a      	beq.n	801712e <RegionEU433InitDefaults+0x52>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
		break;
	}
	default:
	{
		break;
 80170f8:	e028      	b.n	801714c <RegionEU433InitDefaults+0x70>
		Channels[0] = (ChannelParams_t)EU433_LC1;
 80170fa:	4b17      	ldr	r3, [pc, #92]	@ (8017158 <RegionEU433InitDefaults+0x7c>)
 80170fc:	4a17      	ldr	r2, [pc, #92]	@ (801715c <RegionEU433InitDefaults+0x80>)
 80170fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8017100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[1] = (ChannelParams_t)EU433_LC2;
 8017104:	4b14      	ldr	r3, [pc, #80]	@ (8017158 <RegionEU433InitDefaults+0x7c>)
 8017106:	4a16      	ldr	r2, [pc, #88]	@ (8017160 <RegionEU433InitDefaults+0x84>)
 8017108:	330c      	adds	r3, #12
 801710a:	ca07      	ldmia	r2, {r0, r1, r2}
 801710c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[2] = (ChannelParams_t)EU433_LC3;
 8017110:	4b11      	ldr	r3, [pc, #68]	@ (8017158 <RegionEU433InitDefaults+0x7c>)
 8017112:	4a14      	ldr	r2, [pc, #80]	@ (8017164 <RegionEU433InitDefaults+0x88>)
 8017114:	3318      	adds	r3, #24
 8017116:	ca07      	ldmia	r2, {r0, r1, r2}
 8017118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ChannelsDefaultMask[0] = LC(1) + LC(2) + LC(3);
 801711c:	4b12      	ldr	r3, [pc, #72]	@ (8017168 <RegionEU433InitDefaults+0x8c>)
 801711e:	2207      	movs	r2, #7
 8017120:	801a      	strh	r2, [r3, #0]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8017122:	2201      	movs	r2, #1
 8017124:	4910      	ldr	r1, [pc, #64]	@ (8017168 <RegionEU433InitDefaults+0x8c>)
 8017126:	4811      	ldr	r0, [pc, #68]	@ (801716c <RegionEU433InitDefaults+0x90>)
 8017128:	f7ff f99d 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801712c:	e00f      	b.n	801714e <RegionEU433InitDefaults+0x72>
		ChannelsMask[0] |= ChannelsDefaultMask[0];
 801712e:	4b0f      	ldr	r3, [pc, #60]	@ (801716c <RegionEU433InitDefaults+0x90>)
 8017130:	881a      	ldrh	r2, [r3, #0]
 8017132:	4b0d      	ldr	r3, [pc, #52]	@ (8017168 <RegionEU433InitDefaults+0x8c>)
 8017134:	881b      	ldrh	r3, [r3, #0]
 8017136:	4313      	orrs	r3, r2
 8017138:	b29a      	uxth	r2, r3
 801713a:	4b0c      	ldr	r3, [pc, #48]	@ (801716c <RegionEU433InitDefaults+0x90>)
 801713c:	801a      	strh	r2, [r3, #0]
		break;
 801713e:	e006      	b.n	801714e <RegionEU433InitDefaults+0x72>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8017140:	2201      	movs	r2, #1
 8017142:	4909      	ldr	r1, [pc, #36]	@ (8017168 <RegionEU433InitDefaults+0x8c>)
 8017144:	4809      	ldr	r0, [pc, #36]	@ (801716c <RegionEU433InitDefaults+0x90>)
 8017146:	f7ff f98e 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801714a:	e000      	b.n	801714e <RegionEU433InitDefaults+0x72>
		break;
 801714c:	bf00      	nop
	}
	}
}
 801714e:	bf00      	nop
 8017150:	3730      	adds	r7, #48	@ 0x30
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	200076ec 	.word	0x200076ec
 801715c:	08024b10 	.word	0x08024b10
 8017160:	08024b1c 	.word	0x08024b1c
 8017164:	08024b28 	.word	0x08024b28
 8017168:	20006ca8 	.word	0x20006ca8
 801716c:	20006c9c 	.word	0x20006c9c

08017170 <RegionEU433Verify>:

bool RegionEU433Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	460b      	mov	r3, r1
 801717a:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 801717c:	78fb      	ldrb	r3, [r7, #3]
 801717e:	3b04      	subs	r3, #4
 8017180:	2b1a      	cmp	r3, #26
 8017182:	d87d      	bhi.n	8017280 <RegionEU433Verify+0x110>
 8017184:	a201      	add	r2, pc, #4	@ (adr r2, 801718c <RegionEU433Verify+0x1c>)
 8017186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801718a:	bf00      	nop
 801718c:	080171f9 	.word	0x080171f9
 8017190:	08017217 	.word	0x08017217
 8017194:	08017235 	.word	0x08017235
 8017198:	08017253 	.word	0x08017253
 801719c:	08017253 	.word	0x08017253
 80171a0:	08017281 	.word	0x08017281
 80171a4:	08017281 	.word	0x08017281
 80171a8:	08017271 	.word	0x08017271
 80171ac:	08017281 	.word	0x08017281
 80171b0:	08017281 	.word	0x08017281
 80171b4:	08017281 	.word	0x08017281
 80171b8:	08017281 	.word	0x08017281
 80171bc:	08017281 	.word	0x08017281
 80171c0:	08017281 	.word	0x08017281
 80171c4:	08017281 	.word	0x08017281
 80171c8:	08017281 	.word	0x08017281
 80171cc:	08017281 	.word	0x08017281
 80171d0:	08017281 	.word	0x08017281
 80171d4:	08017281 	.word	0x08017281
 80171d8:	08017281 	.word	0x08017281
 80171dc:	08017281 	.word	0x08017281
 80171e0:	08017281 	.word	0x08017281
 80171e4:	08017281 	.word	0x08017281
 80171e8:	08017281 	.word	0x08017281
 80171ec:	08017281 	.word	0x08017281
 80171f0:	08017281 	.word	0x08017281
 80171f4:	08017275 	.word	0x08017275
	{
	case PHY_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE);
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f993 3000 	ldrsb.w	r3, [r3]
 80171fe:	2207      	movs	r2, #7
 8017200:	2100      	movs	r1, #0
 8017202:	4618      	mov	r0, r3
 8017204:	f7ff f8b0 	bl	8016368 <RegionCommonValueInRange>
 8017208:	4603      	mov	r3, r0
 801720a:	2b00      	cmp	r3, #0
 801720c:	bf14      	ite	ne
 801720e:	2301      	movne	r3, #1
 8017210:	2300      	moveq	r3, #0
 8017212:	b2db      	uxtb	r3, r3
 8017214:	e038      	b.n	8017288 <RegionEU433Verify+0x118>
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	f993 3000 	ldrsb.w	r3, [r3]
 801721c:	2205      	movs	r2, #5
 801721e:	2100      	movs	r1, #0
 8017220:	4618      	mov	r0, r3
 8017222:	f7ff f8a1 	bl	8016368 <RegionCommonValueInRange>
 8017226:	4603      	mov	r3, r0
 8017228:	2b00      	cmp	r3, #0
 801722a:	bf14      	ite	ne
 801722c:	2301      	movne	r3, #1
 801722e:	2300      	moveq	r3, #0
 8017230:	b2db      	uxtb	r3, r3
 8017232:	e029      	b.n	8017288 <RegionEU433Verify+0x118>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f993 3000 	ldrsb.w	r3, [r3]
 801723a:	2207      	movs	r2, #7
 801723c:	2100      	movs	r1, #0
 801723e:	4618      	mov	r0, r3
 8017240:	f7ff f892 	bl	8016368 <RegionCommonValueInRange>
 8017244:	4603      	mov	r3, r0
 8017246:	2b00      	cmp	r3, #0
 8017248:	bf14      	ite	ne
 801724a:	2301      	movne	r3, #1
 801724c:	2300      	moveq	r3, #0
 801724e:	b2db      	uxtb	r3, r3
 8017250:	e01a      	b.n	8017288 <RegionEU433Verify+0x118>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f993 3000 	ldrsb.w	r3, [r3]
 8017258:	2205      	movs	r2, #5
 801725a:	2100      	movs	r1, #0
 801725c:	4618      	mov	r0, r3
 801725e:	f7ff f883 	bl	8016368 <RegionCommonValueInRange>
 8017262:	4603      	mov	r3, r0
 8017264:	2b00      	cmp	r3, #0
 8017266:	bf14      	ite	ne
 8017268:	2301      	movne	r3, #1
 801726a:	2300      	moveq	r3, #0
 801726c:	b2db      	uxtb	r3, r3
 801726e:	e00b      	b.n	8017288 <RegionEU433Verify+0x118>
	}
	case PHY_DUTY_CYCLE:
	{
		return EU433_DUTY_CYCLE_ENABLED;
 8017270:	2301      	movs	r3, #1
 8017272:	e009      	b.n	8017288 <RegionEU433Verify+0x118>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 48)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	781b      	ldrb	r3, [r3, #0]
 8017278:	2b2f      	cmp	r3, #47	@ 0x2f
 801727a:	d803      	bhi.n	8017284 <RegionEU433Verify+0x114>
		{
			return false;
 801727c:	2300      	movs	r3, #0
 801727e:	e003      	b.n	8017288 <RegionEU433Verify+0x118>
		}
		break;
	}
	default:
		return false;
 8017280:	2300      	movs	r3, #0
 8017282:	e001      	b.n	8017288 <RegionEU433Verify+0x118>
		break;
 8017284:	bf00      	nop
	}
	return true;
 8017286:	2301      	movs	r3, #1
}
 8017288:	4618      	mov	r0, r3
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <RegionEU433ApplyCFList>:

void RegionEU433ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b08a      	sub	sp, #40	@ 0x28
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
	ChannelParams_t newChannel;
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	// Setup default datarate range
	newChannel.DrRange.Value = (DR_5 << 4) | DR_0;
 8017298:	2350      	movs	r3, #80	@ 0x50
 801729a:	f887 3020 	strb.w	r3, [r7, #32]

	// Size of the optional CF list
	if (applyCFList->Size != 16)
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	791b      	ldrb	r3, [r3, #4]
 80172a2:	2b10      	cmp	r3, #16
 80172a4:	d15c      	bne.n	8017360 <RegionEU433ApplyCFList+0xd0>
	{
		return;
	}

	// Last byte is RFU, don't take it into account
	for (uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i += 3, chanIdx++)
 80172a6:	2300      	movs	r3, #0
 80172a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80172ac:	2303      	movs	r3, #3
 80172ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80172b2:	e050      	b.n	8017356 <RegionEU433ApplyCFList+0xc6>
	{
		if (chanIdx < (EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS))
 80172b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80172b8:	2b07      	cmp	r3, #7
 80172ba:	d824      	bhi.n	8017306 <RegionEU433ApplyCFList+0x76>
		{
			// Channel frequency
			newChannel.Frequency = (uint32_t)applyCFList->Payload[i];
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681a      	ldr	r2, [r3, #0]
 80172c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80172c4:	4413      	add	r3, r2
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 1] << 8);
 80172ca:	69ba      	ldr	r2, [r7, #24]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6819      	ldr	r1, [r3, #0]
 80172d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80172d4:	3301      	adds	r3, #1
 80172d6:	440b      	add	r3, r1
 80172d8:	781b      	ldrb	r3, [r3, #0]
 80172da:	021b      	lsls	r3, r3, #8
 80172dc:	4313      	orrs	r3, r2
 80172de:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 2] << 16);
 80172e0:	69ba      	ldr	r2, [r7, #24]
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	6819      	ldr	r1, [r3, #0]
 80172e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80172ea:	3302      	adds	r3, #2
 80172ec:	440b      	add	r3, r1
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	041b      	lsls	r3, r3, #16
 80172f2:	4313      	orrs	r3, r2
 80172f4:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency *= 100;
 80172f6:	69bb      	ldr	r3, [r7, #24]
 80172f8:	2264      	movs	r2, #100	@ 0x64
 80172fa:	fb02 f303 	mul.w	r3, r2, r3
 80172fe:	61bb      	str	r3, [r7, #24]

			// Initialize alternative frequency to 0
			newChannel.Rx1Frequency = 0;
 8017300:	2300      	movs	r3, #0
 8017302:	61fb      	str	r3, [r7, #28]
 8017304:	e006      	b.n	8017314 <RegionEU433ApplyCFList+0x84>
		}
		else
		{
			newChannel.Frequency = 0;
 8017306:	2300      	movs	r3, #0
 8017308:	61bb      	str	r3, [r7, #24]
			newChannel.DrRange.Value = 0;
 801730a:	2300      	movs	r3, #0
 801730c:	f887 3020 	strb.w	r3, [r7, #32]
			newChannel.Rx1Frequency = 0;
 8017310:	2300      	movs	r3, #0
 8017312:	61fb      	str	r3, [r7, #28]
		}

		if (newChannel.Frequency != 0)
 8017314:	69bb      	ldr	r3, [r7, #24]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d00b      	beq.n	8017332 <RegionEU433ApplyCFList+0xa2>
		{
			channelAdd.NewChannel = &newChannel;
 801731a:	f107 0318 	add.w	r3, r7, #24
 801731e:	613b      	str	r3, [r7, #16]
			channelAdd.ChannelId = chanIdx;
 8017320:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017324:	753b      	strb	r3, [r7, #20]

			// Try to add all channels
			RegionEU433ChannelAdd(&channelAdd);
 8017326:	f107 0310 	add.w	r3, r7, #16
 801732a:	4618      	mov	r0, r3
 801732c:	f000 fdb2 	bl	8017e94 <RegionEU433ChannelAdd>
 8017330:	e007      	b.n	8017342 <RegionEU433ApplyCFList+0xb2>
		}
		else
		{
			channelRemove.ChannelId = chanIdx;
 8017332:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017336:	733b      	strb	r3, [r7, #12]

			RegionEU433ChannelsRemove(&channelRemove);
 8017338:	f107 030c 	add.w	r3, r7, #12
 801733c:	4618      	mov	r0, r3
 801733e:	f000 fe6b 	bl	8018018 <RegionEU433ChannelsRemove>
	for (uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i += 3, chanIdx++)
 8017342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017346:	3303      	adds	r3, #3
 8017348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801734c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017350:	3301      	adds	r3, #1
 8017352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8017356:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801735a:	2b0f      	cmp	r3, #15
 801735c:	d9aa      	bls.n	80172b4 <RegionEU433ApplyCFList+0x24>
 801735e:	e000      	b.n	8017362 <RegionEU433ApplyCFList+0xd2>
		return;
 8017360:	bf00      	nop
		}
	}
}
 8017362:	3728      	adds	r7, #40	@ 0x28
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}

08017368 <RegionEU433ChanMaskSet>:

bool RegionEU433ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	791b      	ldrb	r3, [r3, #4]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d002      	beq.n	801737e <RegionEU433ChanMaskSet+0x16>
 8017378:	2b01      	cmp	r3, #1
 801737a:	d008      	beq.n	801738e <RegionEU433ChanMaskSet+0x26>
 801737c:	e00f      	b.n	801739e <RegionEU433ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 1);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	2201      	movs	r2, #1
 8017384:	4619      	mov	r1, r3
 8017386:	4809      	ldr	r0, [pc, #36]	@ (80173ac <RegionEU433ChanMaskSet+0x44>)
 8017388:	f7ff f86d 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801738c:	e009      	b.n	80173a2 <RegionEU433ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1);
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	2201      	movs	r2, #1
 8017394:	4619      	mov	r1, r3
 8017396:	4806      	ldr	r0, [pc, #24]	@ (80173b0 <RegionEU433ChanMaskSet+0x48>)
 8017398:	f7ff f865 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801739c:	e001      	b.n	80173a2 <RegionEU433ChanMaskSet+0x3a>
	}
	default:
		return false;
 801739e:	2300      	movs	r3, #0
 80173a0:	e000      	b.n	80173a4 <RegionEU433ChanMaskSet+0x3c>
	}
	return true;
 80173a2:	2301      	movs	r3, #1
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	3708      	adds	r7, #8
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	20006c9c 	.word	0x20006c9c
 80173b0:	20006ca8 	.word	0x20006ca8

080173b4 <RegionEU433AdrNext>:

bool RegionEU433AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b088      	sub	sp, #32
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	607a      	str	r2, [r7, #4]
 80173c0:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 80173c2:	2300      	movs	r3, #0
 80173c4:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	7a1b      	ldrb	r3, [r3, #8]
 80173ca:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	7a5b      	ldrb	r3, [r3, #9]
 80173d0:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	685a      	ldr	r2, [r3, #4]
 80173d6:	683b      	ldr	r3, [r7, #0]
 80173d8:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	785b      	ldrb	r3, [r3, #1]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d03f      	beq.n	8017462 <RegionEU433AdrNext+0xae>
	{
		if (datarate == EU433_TX_MIN_DATARATE)
 80173e2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d105      	bne.n	80173f6 <RegionEU433AdrNext+0x42>
		{
			*adrAckCounter = 0;
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	2200      	movs	r2, #0
 80173ee:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 80173f0:	2300      	movs	r3, #0
 80173f2:	77fb      	strb	r3, [r7, #31]
 80173f4:	e035      	b.n	8017462 <RegionEU433AdrNext+0xae>
		}
		else
		{
			if (adrNext->AdrAckCounter >= EU433_ADR_ACK_LIMIT)
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80173fc:	d904      	bls.n	8017408 <RegionEU433AdrNext+0x54>
			{
				adrAckReq = true;
 80173fe:	2301      	movs	r3, #1
 8017400:	77fb      	strb	r3, [r7, #31]
				txPower = EU433_MAX_TX_POWER;
 8017402:	2300      	movs	r3, #0
 8017404:	777b      	strb	r3, [r7, #29]
 8017406:	e001      	b.n	801740c <RegionEU433AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 8017408:	2300      	movs	r3, #0
 801740a:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (EU433_ADR_ACK_LIMIT + EU433_ADR_ACK_DELAY))
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	685b      	ldr	r3, [r3, #4]
 8017410:	2b5f      	cmp	r3, #95	@ 0x5f
 8017412:	d926      	bls.n	8017462 <RegionEU433AdrNext+0xae>
			{
				if ((adrNext->AdrAckCounter % EU433_ADR_ACK_DELAY) == 1)
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	685b      	ldr	r3, [r3, #4]
 8017418:	f003 031f 	and.w	r3, r3, #31
 801741c:	2b01      	cmp	r3, #1
 801741e:	d120      	bne.n	8017462 <RegionEU433AdrNext+0xae>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8017420:	2320      	movs	r3, #32
 8017422:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 8017424:	7fbb      	ldrb	r3, [r7, #30]
 8017426:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	7a9b      	ldrb	r3, [r3, #10]
 801742c:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionEU433GetPhyParam(&getPhy);
 801742e:	f107 0318 	add.w	r3, r7, #24
 8017432:	4618      	mov	r0, r3
 8017434:	f7ff fd5c 	bl	8016ef0 <RegionEU433GetPhyParam>
 8017438:	4603      	mov	r3, r0
 801743a:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 801743c:	697b      	ldr	r3, [r7, #20]
 801743e:	77bb      	strb	r3, [r7, #30]

					if (datarate == EU433_TX_MIN_DATARATE)
 8017440:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d10c      	bne.n	8017462 <RegionEU433AdrNext+0xae>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 8017448:	2300      	movs	r3, #0
 801744a:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d006      	beq.n	8017462 <RegionEU433AdrNext+0xae>
						{
							// Re-enable default channels
							ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 8017454:	4b08      	ldr	r3, [pc, #32]	@ (8017478 <RegionEU433AdrNext+0xc4>)
 8017456:	881b      	ldrh	r3, [r3, #0]
 8017458:	f043 0307 	orr.w	r3, r3, #7
 801745c:	b29a      	uxth	r2, r3
 801745e:	4b06      	ldr	r3, [pc, #24]	@ (8017478 <RegionEU433AdrNext+0xc4>)
 8017460:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	*drOut = datarate;
 8017462:	68bb      	ldr	r3, [r7, #8]
 8017464:	7fba      	ldrb	r2, [r7, #30]
 8017466:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	7f7a      	ldrb	r2, [r7, #29]
 801746c:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 801746e:	7ffb      	ldrb	r3, [r7, #31]
}
 8017470:	4618      	mov	r0, r3
 8017472:	3720      	adds	r7, #32
 8017474:	46bd      	mov	sp, r7
 8017476:	bd80      	pop	{r7, pc}
 8017478:	20006c9c 	.word	0x20006c9c

0801747c <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b088      	sub	sp, #32
 8017480:	af02      	add	r7, sp, #8
 8017482:	60ba      	str	r2, [r7, #8]
 8017484:	607b      	str	r3, [r7, #4]
 8017486:	4603      	mov	r3, r0
 8017488:	73fb      	strb	r3, [r7, #15]
 801748a:	460b      	mov	r3, r1
 801748c:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 801748e:	f04f 0200 	mov.w	r2, #0
 8017492:	f04f 0300 	mov.w	r3, #0
 8017496:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, EU433_RX_MAX_DATARATE);
 801749a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801749e:	2b07      	cmp	r3, #7
 80174a0:	bfa8      	it	ge
 80174a2:	2307      	movge	r3, #7
 80174a4:	b25a      	sxtb	r2, r3
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7ff fc15 	bl	8016ce0 <GetBandwidth>
 80174b6:	4603      	mov	r3, r0
 80174b8:	b2da      	uxtb	r2, r3
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	709a      	strb	r2, [r3, #2]

	if (rxConfigParams->Datarate == DR_7)
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174c4:	2b07      	cmp	r3, #7
 80174c6:	d10b      	bne.n	80174e0 <RegionEU433ComputeRxWindowParameters+0x64>
	{ // FSK
		tSymbol = RegionCommonComputeSymbolTimeFsk(DataratesEU433[rxConfigParams->Datarate]);
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174ce:	461a      	mov	r2, r3
 80174d0:	4b16      	ldr	r3, [pc, #88]	@ (801752c <RegionEU433ComputeRxWindowParameters+0xb0>)
 80174d2:	5c9b      	ldrb	r3, [r3, r2]
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7ff fa53 	bl	8016980 <RegionCommonComputeSymbolTimeFsk>
 80174da:	ed87 0b04 	vstr	d0, [r7, #16]
 80174de:	e012      	b.n	8017506 <RegionEU433ComputeRxWindowParameters+0x8a>
	}
	else
	{ // LoRa
		tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate]);
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174e6:	461a      	mov	r2, r3
 80174e8:	4b10      	ldr	r3, [pc, #64]	@ (801752c <RegionEU433ComputeRxWindowParameters+0xb0>)
 80174ea:	5c9a      	ldrb	r2, [r3, r2]
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80174f2:	4619      	mov	r1, r3
 80174f4:	4b0e      	ldr	r3, [pc, #56]	@ (8017530 <RegionEU433ComputeRxWindowParameters+0xb4>)
 80174f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80174fa:	4619      	mov	r1, r3
 80174fc:	4610      	mov	r0, r2
 80174fe:	f7ff fa11 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 8017502:	ed87 0b04 	vstr	d0, [r7, #16]
	}

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	f103 0208 	add.w	r2, r3, #8
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	330c      	adds	r3, #12
 8017510:	7bb8      	ldrb	r0, [r7, #14]
 8017512:	9300      	str	r3, [sp, #0]
 8017514:	4613      	mov	r3, r2
 8017516:	2203      	movs	r2, #3
 8017518:	68b9      	ldr	r1, [r7, #8]
 801751a:	ed97 0b04 	vldr	d0, [r7, #16]
 801751e:	f7ff fa4d 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 8017522:	bf00      	nop
 8017524:	3718      	adds	r7, #24
 8017526:	46bd      	mov	sp, r7
 8017528:	bd80      	pop	{r7, pc}
 801752a:	bf00      	nop
 801752c:	080252b4 	.word	0x080252b4
 8017530:	080252bc 	.word	0x080252bc

08017534 <RegionEU433RxConfig>:

bool RegionEU433RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 8017534:	b590      	push	{r4, r7, lr}
 8017536:	b091      	sub	sp, #68	@ 0x44
 8017538:	af0a      	add	r7, sp, #40	@ 0x28
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	6039      	str	r1, [r7, #0]
	RadioModems_t modem;
	int8_t dr = rxConfig->Datarate;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	785b      	ldrb	r3, [r3, #1]
 8017542:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 8017544:	2300      	movs	r3, #0
 8017546:	75bb      	strb	r3, [r7, #22]
	int8_t phyDr = 0;
 8017548:	2300      	movs	r3, #0
 801754a:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	685b      	ldr	r3, [r3, #4]
 8017550:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 8017552:	4b53      	ldr	r3, [pc, #332]	@ (80176a0 <RegionEU433RxConfig+0x16c>)
 8017554:	689b      	ldr	r3, [r3, #8]
 8017556:	4798      	blx	r3
 8017558:	4603      	mov	r3, r0
 801755a:	2b00      	cmp	r3, #0
 801755c:	d001      	beq.n	8017562 <RegionEU433RxConfig+0x2e>
	{
		return false;
 801755e:	2300      	movs	r3, #0
 8017560:	e099      	b.n	8017696 <RegionEU433RxConfig+0x162>
	}

	if (rxConfig->Window == 0)
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	7cdb      	ldrb	r3, [r3, #19]
 8017566:	f083 0301 	eor.w	r3, r3, #1
 801756a:	b2db      	uxtb	r3, r3
 801756c:	2b00      	cmp	r3, #0
 801756e:	d023      	beq.n	80175b8 <RegionEU433RxConfig+0x84>
	{
		// Apply window 1 frequency
		frequency = Channels[rxConfig->Channel].Frequency;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	4619      	mov	r1, r3
 8017576:	4a4b      	ldr	r2, [pc, #300]	@ (80176a4 <RegionEU433RxConfig+0x170>)
 8017578:	460b      	mov	r3, r1
 801757a:	005b      	lsls	r3, r3, #1
 801757c:	440b      	add	r3, r1
 801757e:	009b      	lsls	r3, r3, #2
 8017580:	4413      	add	r3, r2
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	613b      	str	r3, [r7, #16]
		// Apply the alternative RX 1 window frequency, if it is available
		if (Channels[rxConfig->Channel].Rx1Frequency != 0)
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	4619      	mov	r1, r3
 801758c:	4a45      	ldr	r2, [pc, #276]	@ (80176a4 <RegionEU433RxConfig+0x170>)
 801758e:	460b      	mov	r3, r1
 8017590:	005b      	lsls	r3, r3, #1
 8017592:	440b      	add	r3, r1
 8017594:	009b      	lsls	r3, r3, #2
 8017596:	4413      	add	r3, r2
 8017598:	3304      	adds	r3, #4
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d00b      	beq.n	80175b8 <RegionEU433RxConfig+0x84>
		{
			frequency = Channels[rxConfig->Channel].Rx1Frequency;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	4619      	mov	r1, r3
 80175a6:	4a3f      	ldr	r2, [pc, #252]	@ (80176a4 <RegionEU433RxConfig+0x170>)
 80175a8:	460b      	mov	r3, r1
 80175aa:	005b      	lsls	r3, r3, #1
 80175ac:	440b      	add	r3, r1
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	4413      	add	r3, r2
 80175b2:	3304      	adds	r3, #4
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	613b      	str	r3, [r7, #16]
		}
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesEU433[dr];
 80175b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175bc:	4a3a      	ldr	r2, [pc, #232]	@ (80176a8 <RegionEU433RxConfig+0x174>)
 80175be:	5cd3      	ldrb	r3, [r2, r3]
 80175c0:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 80175c2:	4b37      	ldr	r3, [pc, #220]	@ (80176a0 <RegionEU433RxConfig+0x16c>)
 80175c4:	691b      	ldr	r3, [r3, #16]
 80175c6:	6938      	ldr	r0, [r7, #16]
 80175c8:	4798      	blx	r3

	// Radio configuration
	if (dr == DR_7)
 80175ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175ce:	2b07      	cmp	r3, #7
 80175d0:	d125      	bne.n	801761e <RegionEU433RxConfig+0xea>
	{
		modem = MODEM_FSK;
 80175d2:	2300      	movs	r3, #0
 80175d4:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, 0, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
 80175d6:	4b32      	ldr	r3, [pc, #200]	@ (80176a0 <RegionEU433RxConfig+0x16c>)
 80175d8:	69dc      	ldr	r4, [r3, #28]
 80175da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80175de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80175e2:	fb02 f303 	mul.w	r3, r2, r3
 80175e6:	461a      	mov	r2, r3
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	7c9b      	ldrb	r3, [r3, #18]
 80175ec:	7df8      	ldrb	r0, [r7, #23]
 80175ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80175f0:	2300      	movs	r3, #0
 80175f2:	9308      	str	r3, [sp, #32]
 80175f4:	2300      	movs	r3, #0
 80175f6:	9307      	str	r3, [sp, #28]
 80175f8:	2300      	movs	r3, #0
 80175fa:	9306      	str	r3, [sp, #24]
 80175fc:	2301      	movs	r3, #1
 80175fe:	9305      	str	r3, [sp, #20]
 8017600:	2300      	movs	r3, #0
 8017602:	9304      	str	r3, [sp, #16]
 8017604:	2300      	movs	r3, #0
 8017606:	9303      	str	r3, [sp, #12]
 8017608:	2300      	movs	r3, #0
 801760a:	9302      	str	r3, [sp, #8]
 801760c:	2305      	movs	r3, #5
 801760e:	9301      	str	r3, [sp, #4]
 8017610:	4b26      	ldr	r3, [pc, #152]	@ (80176ac <RegionEU433RxConfig+0x178>)
 8017612:	9300      	str	r3, [sp, #0]
 8017614:	2300      	movs	r3, #0
 8017616:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801761a:	47a0      	blx	r4
 801761c:	e020      	b.n	8017660 <RegionEU433RxConfig+0x12c>
	}
	else
	{
		modem = MODEM_LORA;
 801761e:	2301      	movs	r3, #1
 8017620:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 8017622:	4b1f      	ldr	r3, [pc, #124]	@ (80176a0 <RegionEU433RxConfig+0x16c>)
 8017624:	69dc      	ldr	r4, [r3, #28]
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	789b      	ldrb	r3, [r3, #2]
 801762a:	4619      	mov	r1, r3
 801762c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	7c9b      	ldrb	r3, [r3, #18]
 8017634:	7df8      	ldrb	r0, [r7, #23]
 8017636:	9309      	str	r3, [sp, #36]	@ 0x24
 8017638:	2301      	movs	r3, #1
 801763a:	9308      	str	r3, [sp, #32]
 801763c:	2300      	movs	r3, #0
 801763e:	9307      	str	r3, [sp, #28]
 8017640:	2300      	movs	r3, #0
 8017642:	9306      	str	r3, [sp, #24]
 8017644:	2300      	movs	r3, #0
 8017646:	9305      	str	r3, [sp, #20]
 8017648:	2300      	movs	r3, #0
 801764a:	9304      	str	r3, [sp, #16]
 801764c:	2300      	movs	r3, #0
 801764e:	9303      	str	r3, [sp, #12]
 8017650:	2300      	movs	r3, #0
 8017652:	9302      	str	r3, [sp, #8]
 8017654:	2308      	movs	r3, #8
 8017656:	9301      	str	r3, [sp, #4]
 8017658:	2300      	movs	r3, #0
 801765a:	9300      	str	r3, [sp, #0]
 801765c:	2301      	movs	r3, #1
 801765e:	47a0      	blx	r4
	}

	if (rxConfig->RepeaterSupport == true)
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	7c5b      	ldrb	r3, [r3, #17]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d005      	beq.n	8017674 <RegionEU433RxConfig+0x140>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 8017668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801766c:	4a10      	ldr	r2, [pc, #64]	@ (80176b0 <RegionEU433RxConfig+0x17c>)
 801766e:	5cd3      	ldrb	r3, [r2, r3]
 8017670:	75bb      	strb	r3, [r7, #22]
 8017672:	e004      	b.n	801767e <RegionEU433RxConfig+0x14a>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateEU433[dr];
 8017674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017678:	4a0e      	ldr	r2, [pc, #56]	@ (80176b4 <RegionEU433RxConfig+0x180>)
 801767a:	5cd3      	ldrb	r3, [r2, r3]
 801767c:	75bb      	strb	r3, [r7, #22]
	}
	Radio.SetMaxPayloadLength(modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 801767e:	4b08      	ldr	r3, [pc, #32]	@ (80176a0 <RegionEU433RxConfig+0x16c>)
 8017680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017682:	7dba      	ldrb	r2, [r7, #22]
 8017684:	320d      	adds	r2, #13
 8017686:	b2d1      	uxtb	r1, r2
 8017688:	7dfa      	ldrb	r2, [r7, #23]
 801768a:	4610      	mov	r0, r2
 801768c:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	7bfa      	ldrb	r2, [r7, #15]
 8017692:	701a      	strb	r2, [r3, #0]
	return true;
 8017694:	2301      	movs	r3, #1
}
 8017696:	4618      	mov	r0, r3
 8017698:	371c      	adds	r7, #28
 801769a:	46bd      	mov	sp, r7
 801769c:	bd90      	pop	{r4, r7, pc}
 801769e:	bf00      	nop
 80176a0:	08025450 	.word	0x08025450
 80176a4:	200076ec 	.word	0x200076ec
 80176a8:	080252b4 	.word	0x080252b4
 80176ac:	00014585 	.word	0x00014585
 80176b0:	080252e4 	.word	0x080252e4
 80176b4:	080252dc 	.word	0x080252dc

080176b8 <RegionEU433TxConfig>:

bool RegionEU433TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 80176b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ba:	b093      	sub	sp, #76	@ 0x4c
 80176bc:	af0a      	add	r7, sp, #40	@ 0x28
 80176be:	60f8      	str	r0, [r7, #12]
 80176c0:	60b9      	str	r1, [r7, #8]
 80176c2:	607a      	str	r2, [r7, #4]
	RadioModems_t modem;
	int8_t phyDr = DataratesEU433[txConfig->Datarate];
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80176ca:	461a      	mov	r2, r3
 80176cc:	4b56      	ldr	r3, [pc, #344]	@ (8017828 <RegionEU433TxConfig+0x170>)
 80176ce:	5c9b      	ldrb	r3, [r3, r2]
 80176d0:	77bb      	strb	r3, [r7, #30]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	4619      	mov	r1, r3
 80176de:	4a53      	ldr	r2, [pc, #332]	@ (801782c <RegionEU433TxConfig+0x174>)
 80176e0:	460b      	mov	r3, r1
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	440b      	add	r3, r1
 80176e6:	009b      	lsls	r3, r3, #2
 80176e8:	4413      	add	r3, r2
 80176ea:	3309      	adds	r3, #9
 80176ec:	781b      	ldrb	r3, [r3, #0]
 80176ee:	4a50      	ldr	r2, [pc, #320]	@ (8017830 <RegionEU433TxConfig+0x178>)
 80176f0:	015b      	lsls	r3, r3, #5
 80176f2:	4413      	add	r3, r2
 80176f4:	3302      	adds	r3, #2
 80176f6:	f993 1000 	ldrsb.w	r1, [r3]
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017700:	4b4c      	ldr	r3, [pc, #304]	@ (8017834 <RegionEU433TxConfig+0x17c>)
 8017702:	f7ff fb0d 	bl	8016d20 <LimitTxPower>
 8017706:	4603      	mov	r3, r0
 8017708:	777b      	strb	r3, [r7, #29]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017710:	4618      	mov	r0, r3
 8017712:	f7ff fae5 	bl	8016ce0 <GetBandwidth>
 8017716:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 8017718:	2300      	movs	r3, #0
 801771a:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	edd3 7a01 	vldr	s15, [r3, #4]
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	ed93 7a02 	vldr	s14, [r3, #8]
 8017728:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801772c:	eef0 0a47 	vmov.f32	s1, s14
 8017730:	eeb0 0a67 	vmov.f32	s0, s15
 8017734:	4618      	mov	r0, r3
 8017736:	f7ff f9cd 	bl	8016ad4 <RegionCommonComputeTxPower>
 801773a:	4603      	mov	r3, r0
 801773c:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 801773e:	4b3e      	ldr	r3, [pc, #248]	@ (8017838 <RegionEU433TxConfig+0x180>)
 8017740:	691a      	ldr	r2, [r3, #16]
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	781b      	ldrb	r3, [r3, #0]
 8017746:	4618      	mov	r0, r3
 8017748:	4938      	ldr	r1, [pc, #224]	@ (801782c <RegionEU433TxConfig+0x174>)
 801774a:	4603      	mov	r3, r0
 801774c:	005b      	lsls	r3, r3, #1
 801774e:	4403      	add	r3, r0
 8017750:	009b      	lsls	r3, r3, #2
 8017752:	440b      	add	r3, r1
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	4618      	mov	r0, r3
 8017758:	4790      	blx	r2

	if (txConfig->Datarate == DR_7)
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017760:	2b07      	cmp	r3, #7
 8017762:	d124      	bne.n	80177ae <RegionEU433TxConfig+0xf6>
	{ // High Speed FSK channel
		modem = MODEM_FSK;
 8017764:	2300      	movs	r3, #0
 8017766:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000);
 8017768:	4b33      	ldr	r3, [pc, #204]	@ (8017838 <RegionEU433TxConfig+0x180>)
 801776a:	6a1e      	ldr	r6, [r3, #32]
 801776c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017770:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017774:	fb02 f303 	mul.w	r3, r2, r3
 8017778:	461a      	mov	r2, r3
 801777a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801777e:	7ff8      	ldrb	r0, [r7, #31]
 8017780:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017784:	9308      	str	r3, [sp, #32]
 8017786:	2300      	movs	r3, #0
 8017788:	9307      	str	r3, [sp, #28]
 801778a:	2300      	movs	r3, #0
 801778c:	9306      	str	r3, [sp, #24]
 801778e:	2300      	movs	r3, #0
 8017790:	9305      	str	r3, [sp, #20]
 8017792:	2301      	movs	r3, #1
 8017794:	9304      	str	r3, [sp, #16]
 8017796:	2300      	movs	r3, #0
 8017798:	9303      	str	r3, [sp, #12]
 801779a:	2305      	movs	r3, #5
 801779c:	9302      	str	r3, [sp, #8]
 801779e:	2300      	movs	r3, #0
 80177a0:	9301      	str	r3, [sp, #4]
 80177a2:	9200      	str	r2, [sp, #0]
 80177a4:	69bb      	ldr	r3, [r7, #24]
 80177a6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80177aa:	47b0      	blx	r6
 80177ac:	e01d      	b.n	80177ea <RegionEU433TxConfig+0x132>
	}
	else
	{
		modem = MODEM_LORA;
 80177ae:	2301      	movs	r3, #1
 80177b0:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 80177b2:	4b21      	ldr	r3, [pc, #132]	@ (8017838 <RegionEU433TxConfig+0x180>)
 80177b4:	6a1e      	ldr	r6, [r3, #32]
 80177b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80177ba:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80177be:	7ff8      	ldrb	r0, [r7, #31]
 80177c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80177c4:	9208      	str	r2, [sp, #32]
 80177c6:	2200      	movs	r2, #0
 80177c8:	9207      	str	r2, [sp, #28]
 80177ca:	2200      	movs	r2, #0
 80177cc:	9206      	str	r2, [sp, #24]
 80177ce:	2200      	movs	r2, #0
 80177d0:	9205      	str	r2, [sp, #20]
 80177d2:	2201      	movs	r2, #1
 80177d4:	9204      	str	r2, [sp, #16]
 80177d6:	2200      	movs	r2, #0
 80177d8:	9203      	str	r2, [sp, #12]
 80177da:	2208      	movs	r2, #8
 80177dc:	9202      	str	r2, [sp, #8]
 80177de:	2201      	movs	r2, #1
 80177e0:	9201      	str	r2, [sp, #4]
 80177e2:	9300      	str	r3, [sp, #0]
 80177e4:	69bb      	ldr	r3, [r7, #24]
 80177e6:	2200      	movs	r2, #0
 80177e8:	47b0      	blx	r6
	}

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(modem, txConfig->PktLen);
 80177ea:	4b13      	ldr	r3, [pc, #76]	@ (8017838 <RegionEU433TxConfig+0x180>)
 80177ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80177ee:	68fa      	ldr	r2, [r7, #12]
 80177f0:	8992      	ldrh	r2, [r2, #12]
 80177f2:	b2d1      	uxtb	r1, r2
 80177f4:	7ffa      	ldrb	r2, [r7, #31]
 80177f6:	4610      	mov	r0, r2
 80177f8:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(modem, txConfig->PktLen);
 80177fa:	4b0f      	ldr	r3, [pc, #60]	@ (8017838 <RegionEU433TxConfig+0x180>)
 80177fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177fe:	68fa      	ldr	r2, [r7, #12]
 8017800:	8992      	ldrh	r2, [r2, #12]
 8017802:	b2d1      	uxtb	r1, r2
 8017804:	7ffa      	ldrb	r2, [r7, #31]
 8017806:	4610      	mov	r0, r2
 8017808:	4798      	blx	r3
 801780a:	4603      	mov	r3, r0
 801780c:	2200      	movs	r2, #0
 801780e:	461c      	mov	r4, r3
 8017810:	4615      	mov	r5, r2
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	e9c3 4500 	strd	r4, r5, [r3]

	*txPower = txPowerLimited;
 8017818:	68bb      	ldr	r3, [r7, #8]
 801781a:	7f7a      	ldrb	r2, [r7, #29]
 801781c:	701a      	strb	r2, [r3, #0]
	return true;
 801781e:	2301      	movs	r3, #1
}
 8017820:	4618      	mov	r0, r3
 8017822:	3724      	adds	r7, #36	@ 0x24
 8017824:	46bd      	mov	sp, r7
 8017826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017828:	080252b4 	.word	0x080252b4
 801782c:	200076ec 	.word	0x200076ec
 8017830:	20000150 	.word	0x20000150
 8017834:	20006c9c 	.word	0x20006c9c
 8017838:	08025450 	.word	0x08025450

0801783c <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 801783c:	b590      	push	{r4, r7, lr}
 801783e:	b093      	sub	sp, #76	@ 0x4c
 8017840:	af00      	add	r7, sp, #0
 8017842:	60f8      	str	r0, [r7, #12]
 8017844:	60b9      	str	r1, [r7, #8]
 8017846:	607a      	str	r2, [r7, #4]
 8017848:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 801784a:	2307      	movs	r3, #7
 801784c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 8017850:	2300      	movs	r3, #0
 8017852:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t bytesProcessed = 0;
 8017856:	2300      	movs	r3, #0
 8017858:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t chMask = 0;
 801785c:	2300      	movs	r3, #0
 801785e:	877b      	strh	r3, [r7, #58]	@ 0x3a
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	while (bytesProcessed < linkAdrReq->PayloadSize)
 8017860:	e083      	b.n	801796a <RegionEU433LinkAdrReq+0x12e>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	681a      	ldr	r2, [r3, #0]
 8017866:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801786a:	4413      	add	r3, r2
 801786c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8017870:	4611      	mov	r1, r2
 8017872:	4618      	mov	r0, r3
 8017874:	f7fe ff7e 	bl	8016774 <RegionCommonParseLinkAdrReq>
 8017878:	4603      	mov	r3, r0
 801787a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		if (nextIndex == 0)
 801787e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017882:	2b00      	cmp	r3, #0
 8017884:	d079      	beq.n	801797a <RegionEU433LinkAdrReq+0x13e>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 8017886:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801788a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801788e:	4413      	add	r3, r2
 8017890:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 8017894:	2307      	movs	r3, #7
 8017896:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		// Setup temporary channels mask
		chMask = linkAdrParams.ChMask;
 801789a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801789e:	877b      	strh	r3, [r7, #58]	@ 0x3a

		// Verify channels mask
		if ((linkAdrParams.ChMaskCtrl == 0) && (chMask == 0))
 80178a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d109      	bne.n	80178bc <RegionEU433LinkAdrReq+0x80>
 80178a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d106      	bne.n	80178bc <RegionEU433LinkAdrReq+0x80>
		{
			status &= 0xFE; // Channel mask KO
 80178ae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80178b2:	f023 0301 	bic.w	r3, r3, #1
 80178b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80178ba:	e056      	b.n	801796a <RegionEU433LinkAdrReq+0x12e>
		}
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 80178bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d003      	beq.n	80178cc <RegionEU433LinkAdrReq+0x90>
 80178c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80178c8:	2b05      	cmp	r3, #5
 80178ca:	d903      	bls.n	80178d4 <RegionEU433LinkAdrReq+0x98>
				 (linkAdrParams.ChMaskCtrl >= 7))
 80178cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 80178d0:	2b06      	cmp	r3, #6
 80178d2:	d906      	bls.n	80178e2 <RegionEU433LinkAdrReq+0xa6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 80178d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80178d8:	f023 0301 	bic.w	r3, r3, #1
 80178dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80178e0:	e043      	b.n	801796a <RegionEU433LinkAdrReq+0x12e>
		}
		else
		{
			for (uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++)
 80178e2:	2300      	movs	r3, #0
 80178e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80178e8:	e03b      	b.n	8017962 <RegionEU433LinkAdrReq+0x126>
			{
				if (linkAdrParams.ChMaskCtrl == 6)
 80178ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80178ee:	2b06      	cmp	r3, #6
 80178f0:	d117      	bne.n	8017922 <RegionEU433LinkAdrReq+0xe6>
				{
					if (Channels[i].Frequency != 0)
 80178f2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80178f6:	4959      	ldr	r1, [pc, #356]	@ (8017a5c <RegionEU433LinkAdrReq+0x220>)
 80178f8:	4613      	mov	r3, r2
 80178fa:	005b      	lsls	r3, r3, #1
 80178fc:	4413      	add	r3, r2
 80178fe:	009b      	lsls	r3, r3, #2
 8017900:	440b      	add	r3, r1
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d027      	beq.n	8017958 <RegionEU433LinkAdrReq+0x11c>
					{
						chMask |= 1 << i;
 8017908:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801790c:	2201      	movs	r2, #1
 801790e:	fa02 f303 	lsl.w	r3, r2, r3
 8017912:	b21a      	sxth	r2, r3
 8017914:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017916:	b21b      	sxth	r3, r3
 8017918:	4313      	orrs	r3, r2
 801791a:	b21b      	sxth	r3, r3
 801791c:	b29b      	uxth	r3, r3
 801791e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8017920:	e01a      	b.n	8017958 <RegionEU433LinkAdrReq+0x11c>
					}
				}
				else
				{
					if (((chMask & (1 << i)) != 0) &&
 8017922:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017924:	461a      	mov	r2, r3
 8017926:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801792a:	fa42 f303 	asr.w	r3, r2, r3
 801792e:	f003 0301 	and.w	r3, r3, #1
 8017932:	2b00      	cmp	r3, #0
 8017934:	d010      	beq.n	8017958 <RegionEU433LinkAdrReq+0x11c>
						(Channels[i].Frequency == 0))
 8017936:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801793a:	4948      	ldr	r1, [pc, #288]	@ (8017a5c <RegionEU433LinkAdrReq+0x220>)
 801793c:	4613      	mov	r3, r2
 801793e:	005b      	lsls	r3, r3, #1
 8017940:	4413      	add	r3, r2
 8017942:	009b      	lsls	r3, r3, #2
 8017944:	440b      	add	r3, r1
 8017946:	681b      	ldr	r3, [r3, #0]
					if (((chMask & (1 << i)) != 0) &&
 8017948:	2b00      	cmp	r3, #0
 801794a:	d105      	bne.n	8017958 <RegionEU433LinkAdrReq+0x11c>
					{					// Trying to enable an undefined channel
						status &= 0xFE; // Channel mask KO
 801794c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017950:	f023 0301 	bic.w	r3, r3, #1
 8017954:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			for (uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++)
 8017958:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801795c:	3301      	adds	r3, #1
 801795e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8017962:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8017966:	2b0f      	cmp	r3, #15
 8017968:	d9bf      	bls.n	80178ea <RegionEU433LinkAdrReq+0xae>
	while (bytesProcessed < linkAdrReq->PayloadSize)
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	791b      	ldrb	r3, [r3, #4]
 801796e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017972:	429a      	cmp	r2, r3
 8017974:	f4ff af75 	bcc.w	8017862 <RegionEU433LinkAdrReq+0x26>
 8017978:	e000      	b.n	801797c <RegionEU433LinkAdrReq+0x140>
			break; // break loop, since no more request has been found
 801797a:	bf00      	nop
			}
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 801797c:	2301      	movs	r3, #1
 801797e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	795b      	ldrb	r3, [r3, #5]
 8017986:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionEU433GetPhyParam(&getPhy);
 801798a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801798e:	4618      	mov	r0, r3
 8017990:	f7ff faae 	bl	8016ef0 <RegionEU433GetPhyParam>
 8017994:	4603      	mov	r3, r0
 8017996:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 8017998:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801799c:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	799b      	ldrb	r3, [r3, #6]
 80179a2:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80179a4:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80179a8:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80179aa:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80179ae:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80179b0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80179b4:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80179bc:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80179c4:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	7a5b      	ldrb	r3, [r3, #9]
 80179ca:	b25b      	sxtb	r3, r3
 80179cc:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 80179ce:	2310      	movs	r3, #16
 80179d0:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = &chMask;
 80179d2:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80179d6:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 80179d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179da:	b25b      	sxtb	r3, r3
 80179dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 80179e0:	2307      	movs	r3, #7
 80179e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 80179e6:	4b1d      	ldr	r3, [pc, #116]	@ (8017a5c <RegionEU433LinkAdrReq+0x220>)
 80179e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 80179ea:	2305      	movs	r3, #5
 80179ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 80179f0:	2300      	movs	r3, #0
 80179f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 80179f6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80179fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80179fe:	1c9a      	adds	r2, r3, #2
 8017a00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017a04:	1c59      	adds	r1, r3, #1
 8017a06:	f107 0014 	add.w	r0, r7, #20
 8017a0a:	4623      	mov	r3, r4
 8017a0c:	f7fe ff04 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 8017a10:	4603      	mov	r3, r0
 8017a12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	// Update channelsMask if everything is correct
	if (status == 0x07)
 8017a16:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017a1a:	2b07      	cmp	r3, #7
 8017a1c:	d107      	bne.n	8017a2e <RegionEU433LinkAdrReq+0x1f2>
	{
		// Set the channels mask to a default value
		memset(ChannelsMask, 0, sizeof(ChannelsMask));
 8017a1e:	220c      	movs	r2, #12
 8017a20:	2100      	movs	r1, #0
 8017a22:	480f      	ldr	r0, [pc, #60]	@ (8017a60 <RegionEU433LinkAdrReq+0x224>)
 8017a24:	f00a fc12 	bl	802224c <memset>
		// Update the channels mask
		ChannelsMask[0] = chMask;
 8017a28:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8017a60 <RegionEU433LinkAdrReq+0x224>)
 8017a2c:	801a      	strh	r2, [r3, #0]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 8017a2e:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 8017a36:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 8017a3e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017a42:	683b      	ldr	r3, [r7, #0]
 8017a44:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 8017a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017a48:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8017a4c:	701a      	strb	r2, [r3, #0]

	return status;
 8017a4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	374c      	adds	r7, #76	@ 0x4c
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd90      	pop	{r4, r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	200076ec 	.word	0x200076ec
 8017a60:	20006c9c 	.word	0x20006c9c

08017a64 <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b084      	sub	sp, #16
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 8017a6c:	2307      	movs	r3, #7
 8017a6e:	73fb      	strb	r3, [r7, #15]

	// Verify radio frequency
	if (Radio.CheckRfFrequency(rxParamSetupReq->Frequency) == false)
 8017a70:	4b19      	ldr	r3, [pc, #100]	@ (8017ad8 <RegionEU433RxParamSetupReq+0x74>)
 8017a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	6852      	ldr	r2, [r2, #4]
 8017a78:	4610      	mov	r0, r2
 8017a7a:	4798      	blx	r3
 8017a7c:	4603      	mov	r3, r0
 8017a7e:	f083 0301 	eor.w	r3, r3, #1
 8017a82:	b2db      	uxtb	r3, r3
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d003      	beq.n	8017a90 <RegionEU433RxParamSetupReq+0x2c>
	{
		status &= 0xFE; // Channel frequency KO
 8017a88:	7bfb      	ldrb	r3, [r7, #15]
 8017a8a:	f023 0301 	bic.w	r3, r3, #1
 8017a8e:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE) == false)
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	f993 3000 	ldrsb.w	r3, [r3]
 8017a96:	2207      	movs	r2, #7
 8017a98:	2100      	movs	r1, #0
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	f7fe fc64 	bl	8016368 <RegionCommonValueInRange>
 8017aa0:	4603      	mov	r3, r0
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d103      	bne.n	8017aae <RegionEU433RxParamSetupReq+0x4a>
	{
		status &= 0xFD; // Datarate KO
 8017aa6:	7bfb      	ldrb	r3, [r7, #15]
 8017aa8:	f023 0302 	bic.w	r3, r3, #2
 8017aac:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET) == false)
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ab4:	2205      	movs	r2, #5
 8017ab6:	2100      	movs	r1, #0
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f7fe fc55 	bl	8016368 <RegionCommonValueInRange>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d103      	bne.n	8017acc <RegionEU433RxParamSetupReq+0x68>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 8017ac4:	7bfb      	ldrb	r3, [r7, #15]
 8017ac6:	f023 0304 	bic.w	r3, r3, #4
 8017aca:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8017acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3710      	adds	r7, #16
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	08025450 	.word	0x08025450

08017adc <RegionEU433NewChannelReq>:

uint8_t RegionEU433NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b086      	sub	sp, #24
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 8017ae4:	2303      	movs	r3, #3
 8017ae6:	75fb      	strb	r3, [r7, #23]
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	if (newChannelReq->NewChannel->Frequency == 0)
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d114      	bne.n	8017b1c <RegionEU433NewChannelReq+0x40>
	{
		channelRemove.ChannelId = newChannelReq->ChannelId;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017af8:	b2db      	uxtb	r3, r3
 8017afa:	723b      	strb	r3, [r7, #8]

		// Remove
		if (RegionEU433ChannelsRemove(&channelRemove) == false)
 8017afc:	f107 0308 	add.w	r3, r7, #8
 8017b00:	4618      	mov	r0, r3
 8017b02:	f000 fa89 	bl	8018018 <RegionEU433ChannelsRemove>
 8017b06:	4603      	mov	r3, r0
 8017b08:	f083 0301 	eor.w	r3, r3, #1
 8017b0c:	b2db      	uxtb	r3, r3
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d03b      	beq.n	8017b8a <RegionEU433NewChannelReq+0xae>
		{
			status &= 0xFC;
 8017b12:	7dfb      	ldrb	r3, [r7, #23]
 8017b14:	f023 0303 	bic.w	r3, r3, #3
 8017b18:	75fb      	strb	r3, [r7, #23]
 8017b1a:	e036      	b.n	8017b8a <RegionEU433NewChannelReq+0xae>
		}
	}
	else
	{
		channelAdd.NewChannel = newChannelReq->NewChannel;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	60fb      	str	r3, [r7, #12]
		channelAdd.ChannelId = newChannelReq->ChannelId;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017b28:	b2db      	uxtb	r3, r3
 8017b2a:	743b      	strb	r3, [r7, #16]

		switch (RegionEU433ChannelAdd(&channelAdd))
 8017b2c:	f107 030c 	add.w	r3, r7, #12
 8017b30:	4618      	mov	r0, r3
 8017b32:	f000 f9af 	bl	8017e94 <RegionEU433ChannelAdd>
 8017b36:	4603      	mov	r3, r0
 8017b38:	2b06      	cmp	r3, #6
 8017b3a:	d820      	bhi.n	8017b7e <RegionEU433NewChannelReq+0xa2>
 8017b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8017b44 <RegionEU433NewChannelReq+0x68>)
 8017b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b42:	bf00      	nop
 8017b44:	08017b89 	.word	0x08017b89
 8017b48:	08017b7f 	.word	0x08017b7f
 8017b4c:	08017b7f 	.word	0x08017b7f
 8017b50:	08017b7f 	.word	0x08017b7f
 8017b54:	08017b61 	.word	0x08017b61
 8017b58:	08017b6b 	.word	0x08017b6b
 8017b5c:	08017b75 	.word	0x08017b75
		{
			break;
		}
		case LORAMAC_STATUS_FREQUENCY_INVALID:
		{
			status &= 0xFE;
 8017b60:	7dfb      	ldrb	r3, [r7, #23]
 8017b62:	f023 0301 	bic.w	r3, r3, #1
 8017b66:	75fb      	strb	r3, [r7, #23]
			break;
 8017b68:	e00f      	b.n	8017b8a <RegionEU433NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_DATARATE_INVALID:
		{
			status &= 0xFD;
 8017b6a:	7dfb      	ldrb	r3, [r7, #23]
 8017b6c:	f023 0302 	bic.w	r3, r3, #2
 8017b70:	75fb      	strb	r3, [r7, #23]
			break;
 8017b72:	e00a      	b.n	8017b8a <RegionEU433NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		{
			status &= 0xFC;
 8017b74:	7dfb      	ldrb	r3, [r7, #23]
 8017b76:	f023 0303 	bic.w	r3, r3, #3
 8017b7a:	75fb      	strb	r3, [r7, #23]
			break;
 8017b7c:	e005      	b.n	8017b8a <RegionEU433NewChannelReq+0xae>
		}
		default:
		{
			status &= 0xFC;
 8017b7e:	7dfb      	ldrb	r3, [r7, #23]
 8017b80:	f023 0303 	bic.w	r3, r3, #3
 8017b84:	75fb      	strb	r3, [r7, #23]
			break;
 8017b86:	e000      	b.n	8017b8a <RegionEU433NewChannelReq+0xae>
			break;
 8017b88:	bf00      	nop
		}
		}
	}

	return status;
 8017b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	3718      	adds	r7, #24
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bd80      	pop	{r7, pc}

08017b94 <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 8017b94:	b480      	push	{r7}
 8017b96:	b083      	sub	sp, #12
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
	return -1;
 8017b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	370c      	adds	r7, #12
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017baa:	4770      	bx	lr

08017bac <RegionEU433DlChannelReq>:

uint8_t RegionEU433DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b084      	sub	sp, #16
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 8017bb4:	2303      	movs	r3, #3
 8017bb6:	73fb      	strb	r3, [r7, #15]

	// Verify if the frequency is supported
	if (VerifyTxFreq(dlChannelReq->Rx1Frequency) == false)
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	685b      	ldr	r3, [r3, #4]
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7ff f8cb 	bl	8016d58 <VerifyTxFreq>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	f083 0301 	eor.w	r3, r3, #1
 8017bc8:	b2db      	uxtb	r3, r3
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d003      	beq.n	8017bd6 <RegionEU433DlChannelReq+0x2a>
	{
		status &= 0xFE;
 8017bce:	7bfb      	ldrb	r3, [r7, #15]
 8017bd0:	f023 0301 	bic.w	r3, r3, #1
 8017bd4:	73fb      	strb	r3, [r7, #15]
	}

	// Verify if an uplink frequency exists
	if (Channels[dlChannelReq->ChannelId].Frequency == 0)
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	781b      	ldrb	r3, [r3, #0]
 8017bda:	4619      	mov	r1, r3
 8017bdc:	4a10      	ldr	r2, [pc, #64]	@ (8017c20 <RegionEU433DlChannelReq+0x74>)
 8017bde:	460b      	mov	r3, r1
 8017be0:	005b      	lsls	r3, r3, #1
 8017be2:	440b      	add	r3, r1
 8017be4:	009b      	lsls	r3, r3, #2
 8017be6:	4413      	add	r3, r2
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d103      	bne.n	8017bf6 <RegionEU433DlChannelReq+0x4a>
	{
		status &= 0xFD;
 8017bee:	7bfb      	ldrb	r3, [r7, #15]
 8017bf0:	f023 0302 	bic.w	r3, r3, #2
 8017bf4:	73fb      	strb	r3, [r7, #15]
	}

	// Apply Rx1 frequency, if the status is OK
	if (status == 0x03)
 8017bf6:	7bfb      	ldrb	r3, [r7, #15]
 8017bf8:	2b03      	cmp	r3, #3
 8017bfa:	d10c      	bne.n	8017c16 <RegionEU433DlChannelReq+0x6a>
	{
		Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	4618      	mov	r0, r3
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	685a      	ldr	r2, [r3, #4]
 8017c06:	4906      	ldr	r1, [pc, #24]	@ (8017c20 <RegionEU433DlChannelReq+0x74>)
 8017c08:	4603      	mov	r3, r0
 8017c0a:	005b      	lsls	r3, r3, #1
 8017c0c:	4403      	add	r3, r0
 8017c0e:	009b      	lsls	r3, r3, #2
 8017c10:	440b      	add	r3, r1
 8017c12:	3304      	adds	r3, #4
 8017c14:	601a      	str	r2, [r3, #0]
	}

	return status;
 8017c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c18:	4618      	mov	r0, r3
 8017c1a:	3710      	adds	r7, #16
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}
 8017c20:	200076ec 	.word	0x200076ec

08017c24 <RegionEU433AlternateDr>:

int8_t RegionEU433AlternateDr(AlternateDrParams_t *alternateDr)
{
 8017c24:	b480      	push	{r7}
 8017c26:	b085      	sub	sp, #20
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	73fb      	strb	r3, [r7, #15]

	if ((alternateDr->NbTrials % 48) == 0)
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	881a      	ldrh	r2, [r3, #0]
 8017c34:	4b23      	ldr	r3, [pc, #140]	@ (8017cc4 <RegionEU433AlternateDr+0xa0>)
 8017c36:	fba3 1302 	umull	r1, r3, r3, r2
 8017c3a:	0959      	lsrs	r1, r3, #5
 8017c3c:	460b      	mov	r3, r1
 8017c3e:	005b      	lsls	r3, r3, #1
 8017c40:	440b      	add	r3, r1
 8017c42:	011b      	lsls	r3, r3, #4
 8017c44:	1ad3      	subs	r3, r2, r3
 8017c46:	b29b      	uxth	r3, r3
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d102      	bne.n	8017c52 <RegionEU433AlternateDr+0x2e>
	{
		datarate = DR_0;
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	73fb      	strb	r3, [r7, #15]
 8017c50:	e030      	b.n	8017cb4 <RegionEU433AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 32) == 0)
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	881b      	ldrh	r3, [r3, #0]
 8017c56:	f003 031f 	and.w	r3, r3, #31
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d102      	bne.n	8017c66 <RegionEU433AlternateDr+0x42>
	{
		datarate = DR_1;
 8017c60:	2301      	movs	r3, #1
 8017c62:	73fb      	strb	r3, [r7, #15]
 8017c64:	e026      	b.n	8017cb4 <RegionEU433AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 24) == 0)
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	881a      	ldrh	r2, [r3, #0]
 8017c6a:	4b16      	ldr	r3, [pc, #88]	@ (8017cc4 <RegionEU433AlternateDr+0xa0>)
 8017c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8017c70:	0919      	lsrs	r1, r3, #4
 8017c72:	460b      	mov	r3, r1
 8017c74:	005b      	lsls	r3, r3, #1
 8017c76:	440b      	add	r3, r1
 8017c78:	00db      	lsls	r3, r3, #3
 8017c7a:	1ad3      	subs	r3, r2, r3
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d102      	bne.n	8017c88 <RegionEU433AlternateDr+0x64>
	{
		datarate = DR_2;
 8017c82:	2302      	movs	r3, #2
 8017c84:	73fb      	strb	r3, [r7, #15]
 8017c86:	e015      	b.n	8017cb4 <RegionEU433AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 16) == 0)
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	881b      	ldrh	r3, [r3, #0]
 8017c8c:	f003 030f 	and.w	r3, r3, #15
 8017c90:	b29b      	uxth	r3, r3
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d102      	bne.n	8017c9c <RegionEU433AlternateDr+0x78>
	{
		datarate = DR_3;
 8017c96:	2303      	movs	r3, #3
 8017c98:	73fb      	strb	r3, [r7, #15]
 8017c9a:	e00b      	b.n	8017cb4 <RegionEU433AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 8) == 0)
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	881b      	ldrh	r3, [r3, #0]
 8017ca0:	f003 0307 	and.w	r3, r3, #7
 8017ca4:	b29b      	uxth	r3, r3
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d102      	bne.n	8017cb0 <RegionEU433AlternateDr+0x8c>
	{
		datarate = DR_4;
 8017caa:	2304      	movs	r3, #4
 8017cac:	73fb      	strb	r3, [r7, #15]
 8017cae:	e001      	b.n	8017cb4 <RegionEU433AlternateDr+0x90>
	}
	else
	{
		datarate = DR_5;
 8017cb0:	2305      	movs	r3, #5
 8017cb2:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 8017cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3714      	adds	r7, #20
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc2:	4770      	bx	lr
 8017cc4:	aaaaaaab 	.word	0xaaaaaaab

08017cc8 <RegionEU433CalcBackOff>:

void RegionEU433CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b08a      	sub	sp, #40	@ 0x28
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 8017cd0:	4b11      	ldr	r3, [pc, #68]	@ (8017d18 <RegionEU433CalcBackOff+0x50>)
 8017cd2:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 8017cd4:	4b11      	ldr	r3, [pc, #68]	@ (8017d1c <RegionEU433CalcBackOff+0x54>)
 8017cd6:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	785b      	ldrb	r3, [r3, #1]
 8017cdc:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	789b      	ldrb	r3, [r3, #2]
 8017ce8:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	78db      	ldrb	r3, [r3, #3]
 8017cee:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017cf6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8017d00:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 8017d04:	f107 0308 	add.w	r3, r7, #8
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7fe ff15 	bl	8016b38 <RegionCommonCalcBackOff>
}
 8017d0e:	bf00      	nop
 8017d10:	3728      	adds	r7, #40	@ 0x28
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	bf00      	nop
 8017d18:	200076ec 	.word	0x200076ec
 8017d1c:	20000150 	.word	0x20000150

08017d20 <RegionEU433NextChannel>:

bool RegionEU433NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 8017d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8017d24:	b092      	sub	sp, #72	@ 0x48
 8017d26:	af04      	add	r7, sp, #16
 8017d28:	60f8      	str	r0, [r7, #12]
 8017d2a:	60b9      	str	r1, [r7, #8]
 8017d2c:	607a      	str	r2, [r7, #4]
 8017d2e:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 8017d30:	2300      	movs	r3, #0
 8017d32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t delayTx = 0;
 8017d36:	2300      	movs	r3, #0
 8017d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = {0};
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	617b      	str	r3, [r7, #20]
 8017d40:	f107 0318 	add.w	r3, r7, #24
 8017d44:	2200      	movs	r2, #0
 8017d46:	601a      	str	r2, [r3, #0]
 8017d48:	605a      	str	r2, [r3, #4]
 8017d4a:	609a      	str	r2, [r3, #8]
	TimerTime_t nextTxDelay = 0;
 8017d4c:	f04f 0200 	mov.w	r2, #0
 8017d50:	f04f 0300 	mov.w	r3, #0
 8017d54:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if (RegionCommonCountChannels(ChannelsMask, 0, 1) == 0)
 8017d58:	2201      	movs	r2, #1
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	484a      	ldr	r0, [pc, #296]	@ (8017e88 <RegionEU433NextChannel+0x168>)
 8017d5e:	f7fe fb56 	bl	801640e <RegionCommonCountChannels>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d106      	bne.n	8017d76 <RegionEU433NextChannel+0x56>
	{ // Reactivate default channels
		ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 8017d68:	4b47      	ldr	r3, [pc, #284]	@ (8017e88 <RegionEU433NextChannel+0x168>)
 8017d6a:	881b      	ldrh	r3, [r3, #0]
 8017d6c:	f043 0307 	orr.w	r3, r3, #7
 8017d70:	b29a      	uxth	r2, r3
 8017d72:	4b45      	ldr	r3, [pc, #276]	@ (8017e88 <RegionEU433NextChannel+0x168>)
 8017d74:	801a      	strh	r2, [r3, #0]
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017d82:	4610      	mov	r0, r2
 8017d84:	4619      	mov	r1, r3
 8017d86:	f009 f969 	bl	802105c <util_timer_get_elapsedtime>
 8017d8a:	4602      	mov	r2, r0
 8017d8c:	460b      	mov	r3, r1
 8017d8e:	42a2      	cmp	r2, r4
 8017d90:	41ab      	sbcs	r3, r5
 8017d92:	d326      	bcc.n	8017de2 <RegionEU433NextChannel+0xc2>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 8017d94:	6839      	ldr	r1, [r7, #0]
 8017d96:	f04f 0200 	mov.w	r2, #0
 8017d9a:	f04f 0300 	mov.w	r3, #0
 8017d9e:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, EU433_MAX_NB_BANDS);
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	7c58      	ldrb	r0, [r3, #17]
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	7c99      	ldrb	r1, [r3, #18]
 8017daa:	2301      	movs	r3, #1
 8017dac:	4a37      	ldr	r2, [pc, #220]	@ (8017e8c <RegionEU433NextChannel+0x16c>)
 8017dae:	f7fe fba2 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 8017db2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Joined, nextChanParams->Datarate,
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	7c58      	ldrb	r0, [r3, #17]
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8017dc0:	b2d9      	uxtb	r1, r3
 8017dc2:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8017dc6:	9302      	str	r3, [sp, #8]
 8017dc8:	f107 0314 	add.w	r3, r7, #20
 8017dcc:	9301      	str	r3, [sp, #4]
 8017dce:	4b2f      	ldr	r3, [pc, #188]	@ (8017e8c <RegionEU433NextChannel+0x16c>)
 8017dd0:	9300      	str	r3, [sp, #0]
 8017dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8017e90 <RegionEU433NextChannel+0x170>)
 8017dd4:	4a2c      	ldr	r2, [pc, #176]	@ (8017e88 <RegionEU433NextChannel+0x168>)
 8017dd6:	f7fe ffe5 	bl	8016da4 <CountNbOfEnabledChannels>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017de0:	e017      	b.n	8017e12 <RegionEU433NextChannel+0xf2>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 8017de2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017de6:	3301      	adds	r3, #1
 8017de8:	b2db      	uxtb	r3, r3
 8017dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8017dfa:	4610      	mov	r0, r2
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	f009 f92d 	bl	802105c <util_timer_get_elapsedtime>
 8017e02:	4602      	mov	r2, r0
 8017e04:	460b      	mov	r3, r1
 8017e06:	ebb4 0802 	subs.w	r8, r4, r2
 8017e0a:	eb65 0903 	sbc.w	r9, r5, r3
 8017e0e:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}

	if (nbEnabledChannels > 0)
 8017e12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d016      	beq.n	8017e48 <RegionEU433NextChannel+0x128>
	{
		// We found a valid channel
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 8017e1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017e1e:	3b01      	subs	r3, #1
 8017e20:	4619      	mov	r1, r3
 8017e22:	2000      	movs	r0, #0
 8017e24:	f008 fea6 	bl	8020b74 <randr>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	3338      	adds	r3, #56	@ 0x38
 8017e2c:	443b      	add	r3, r7
 8017e2e:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8017e32:	68bb      	ldr	r3, [r7, #8]
 8017e34:	701a      	strb	r2, [r3, #0]

		*time = 0;
 8017e36:	6879      	ldr	r1, [r7, #4]
 8017e38:	f04f 0200 	mov.w	r2, #0
 8017e3c:	f04f 0300 	mov.w	r3, #0
 8017e40:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8017e44:	2301      	movs	r3, #1
 8017e46:	e019      	b.n	8017e7c <RegionEU433NextChannel+0x15c>
	}
	else
	{
		if (delayTx > 0)
 8017e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d006      	beq.n	8017e5e <RegionEU433NextChannel+0x13e>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 8017e50:	6879      	ldr	r1, [r7, #4]
 8017e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8017e56:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8017e5a:	2301      	movs	r3, #1
 8017e5c:	e00e      	b.n	8017e7c <RegionEU433NextChannel+0x15c>
		}
		// Datarate not supported by any channel, restore defaults
		ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 8017e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8017e88 <RegionEU433NextChannel+0x168>)
 8017e60:	881b      	ldrh	r3, [r3, #0]
 8017e62:	f043 0307 	orr.w	r3, r3, #7
 8017e66:	b29a      	uxth	r2, r3
 8017e68:	4b07      	ldr	r3, [pc, #28]	@ (8017e88 <RegionEU433NextChannel+0x168>)
 8017e6a:	801a      	strh	r2, [r3, #0]
		*time = 0;
 8017e6c:	6879      	ldr	r1, [r7, #4]
 8017e6e:	f04f 0200 	mov.w	r2, #0
 8017e72:	f04f 0300 	mov.w	r3, #0
 8017e76:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 8017e7a:	2300      	movs	r3, #0
	}
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3738      	adds	r7, #56	@ 0x38
 8017e80:	46bd      	mov	sp, r7
 8017e82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017e86:	bf00      	nop
 8017e88:	20006c9c 	.word	0x20006c9c
 8017e8c:	20000150 	.word	0x20000150
 8017e90:	200076ec 	.word	0x200076ec

08017e94 <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd(ChannelAddParams_t *channelAdd)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b084      	sub	sp, #16
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
	uint8_t band = 0;
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	737b      	strb	r3, [r7, #13]
	bool drInvalid = false;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	73fb      	strb	r3, [r7, #15]
	bool freqInvalid = false;
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	73bb      	strb	r3, [r7, #14]
	uint8_t id = channelAdd->ChannelId;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	791b      	ldrb	r3, [r3, #4]
 8017eac:	733b      	strb	r3, [r7, #12]

	if (id >= EU433_MAX_NB_CHANNELS)
 8017eae:	7b3b      	ldrb	r3, [r7, #12]
 8017eb0:	2b0f      	cmp	r3, #15
 8017eb2:	d901      	bls.n	8017eb8 <RegionEU433ChannelAdd+0x24>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 8017eb4:	2303      	movs	r3, #3
 8017eb6:	e0a6      	b.n	8018006 <RegionEU433ChannelAdd+0x172>
	}

	// Validate the datarate range
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE) == false)
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	7a1b      	ldrb	r3, [r3, #8]
 8017ebe:	f343 0303 	sbfx	r3, r3, #0, #4
 8017ec2:	b25b      	sxtb	r3, r3
 8017ec4:	2207      	movs	r2, #7
 8017ec6:	2100      	movs	r1, #0
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f7fe fa4d 	bl	8016368 <RegionCommonValueInRange>
 8017ece:	4603      	mov	r3, r0
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d101      	bne.n	8017ed8 <RegionEU433ChannelAdd+0x44>
	{
		drInvalid = true;
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	73fb      	strb	r3, [r7, #15]
	}
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE) == false)
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	7a1b      	ldrb	r3, [r3, #8]
 8017ede:	f343 1303 	sbfx	r3, r3, #4, #4
 8017ee2:	b25b      	sxtb	r3, r3
 8017ee4:	2207      	movs	r2, #7
 8017ee6:	2100      	movs	r1, #0
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7fe fa3d 	bl	8016368 <RegionCommonValueInRange>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d101      	bne.n	8017ef8 <RegionEU433ChannelAdd+0x64>
	{
		drInvalid = true;
 8017ef4:	2301      	movs	r3, #1
 8017ef6:	73fb      	strb	r3, [r7, #15]
	}
	if (channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max)
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	7a1b      	ldrb	r3, [r3, #8]
 8017efe:	f343 0303 	sbfx	r3, r3, #0, #4
 8017f02:	b25a      	sxtb	r2, r3
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	7a1b      	ldrb	r3, [r3, #8]
 8017f0a:	f343 1303 	sbfx	r3, r3, #4, #4
 8017f0e:	b25b      	sxtb	r3, r3
 8017f10:	429a      	cmp	r2, r3
 8017f12:	dd01      	ble.n	8017f18 <RegionEU433ChannelAdd+0x84>
	{
		drInvalid = true;
 8017f14:	2301      	movs	r3, #1
 8017f16:	73fb      	strb	r3, [r7, #15]
	}

	// Default channels don't accept all values
	if (id < EU433_NUMB_DEFAULT_CHANNELS)
 8017f18:	7b3b      	ldrb	r3, [r7, #12]
 8017f1a:	2b02      	cmp	r3, #2
 8017f1c:	d828      	bhi.n	8017f70 <RegionEU433ChannelAdd+0xdc>
	{
		// Validate the datarate range for min: must be DR_0
		if (channelAdd->NewChannel->DrRange.Fields.Min > DR_0)
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	7a1b      	ldrb	r3, [r3, #8]
 8017f24:	f343 0303 	sbfx	r3, r3, #0, #4
 8017f28:	b25b      	sxtb	r3, r3
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	dd01      	ble.n	8017f32 <RegionEU433ChannelAdd+0x9e>
		{
			drInvalid = true;
 8017f2e:	2301      	movs	r3, #1
 8017f30:	73fb      	strb	r3, [r7, #15]
		}
		// Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
		if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU433_TX_MAX_DATARATE) == false)
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	7a1b      	ldrb	r3, [r3, #8]
 8017f38:	f343 1303 	sbfx	r3, r3, #4, #4
 8017f3c:	b25b      	sxtb	r3, r3
 8017f3e:	2207      	movs	r2, #7
 8017f40:	2105      	movs	r1, #5
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7fe fa10 	bl	8016368 <RegionCommonValueInRange>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d101      	bne.n	8017f52 <RegionEU433ChannelAdd+0xbe>
		{
			drInvalid = true;
 8017f4e:	2301      	movs	r3, #1
 8017f50:	73fb      	strb	r3, [r7, #15]
		}
		// We are not allowed to change the frequency
		if (channelAdd->NewChannel->Frequency != Channels[id].Frequency)
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	6819      	ldr	r1, [r3, #0]
 8017f58:	7b3a      	ldrb	r2, [r7, #12]
 8017f5a:	482d      	ldr	r0, [pc, #180]	@ (8018010 <RegionEU433ChannelAdd+0x17c>)
 8017f5c:	4613      	mov	r3, r2
 8017f5e:	005b      	lsls	r3, r3, #1
 8017f60:	4413      	add	r3, r2
 8017f62:	009b      	lsls	r3, r3, #2
 8017f64:	4403      	add	r3, r0
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	4299      	cmp	r1, r3
 8017f6a:	d001      	beq.n	8017f70 <RegionEU433ChannelAdd+0xdc>
		{
			freqInvalid = true;
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check frequency
	if (freqInvalid == false)
 8017f70:	7bbb      	ldrb	r3, [r7, #14]
 8017f72:	f083 0301 	eor.w	r3, r3, #1
 8017f76:	b2db      	uxtb	r3, r3
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d00d      	beq.n	8017f98 <RegionEU433ChannelAdd+0x104>
	{
		if (VerifyTxFreq(channelAdd->NewChannel->Frequency) == false)
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7fe fee8 	bl	8016d58 <VerifyTxFreq>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	f083 0301 	eor.w	r3, r3, #1
 8017f8e:	b2db      	uxtb	r3, r3
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d001      	beq.n	8017f98 <RegionEU433ChannelAdd+0x104>
		{
			freqInvalid = true;
 8017f94:	2301      	movs	r3, #1
 8017f96:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check status
	if ((drInvalid == true) && (freqInvalid == true))
 8017f98:	7bfb      	ldrb	r3, [r7, #15]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d004      	beq.n	8017fa8 <RegionEU433ChannelAdd+0x114>
 8017f9e:	7bbb      	ldrb	r3, [r7, #14]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d001      	beq.n	8017fa8 <RegionEU433ChannelAdd+0x114>
	{
		return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017fa4:	2306      	movs	r3, #6
 8017fa6:	e02e      	b.n	8018006 <RegionEU433ChannelAdd+0x172>
	}
	if (drInvalid == true)
 8017fa8:	7bfb      	ldrb	r3, [r7, #15]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d001      	beq.n	8017fb2 <RegionEU433ChannelAdd+0x11e>
	{
		return LORAMAC_STATUS_DATARATE_INVALID;
 8017fae:	2305      	movs	r3, #5
 8017fb0:	e029      	b.n	8018006 <RegionEU433ChannelAdd+0x172>
	}
	if (freqInvalid == true)
 8017fb2:	7bbb      	ldrb	r3, [r7, #14]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d001      	beq.n	8017fbc <RegionEU433ChannelAdd+0x128>
	{
		return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017fb8:	2304      	movs	r3, #4
 8017fba:	e024      	b.n	8018006 <RegionEU433ChannelAdd+0x172>
	}

	memcpy(&(Channels[id]), channelAdd->NewChannel, sizeof(Channels[id]));
 8017fbc:	7b3a      	ldrb	r2, [r7, #12]
 8017fbe:	4613      	mov	r3, r2
 8017fc0:	005b      	lsls	r3, r3, #1
 8017fc2:	4413      	add	r3, r2
 8017fc4:	009b      	lsls	r3, r3, #2
 8017fc6:	4a12      	ldr	r2, [pc, #72]	@ (8018010 <RegionEU433ChannelAdd+0x17c>)
 8017fc8:	1898      	adds	r0, r3, r2
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	220c      	movs	r2, #12
 8017fd0:	4619      	mov	r1, r3
 8017fd2:	f00a f9ca 	bl	802236a <memcpy>
	Channels[id].Band = band;
 8017fd6:	7b3a      	ldrb	r2, [r7, #12]
 8017fd8:	490d      	ldr	r1, [pc, #52]	@ (8018010 <RegionEU433ChannelAdd+0x17c>)
 8017fda:	4613      	mov	r3, r2
 8017fdc:	005b      	lsls	r3, r3, #1
 8017fde:	4413      	add	r3, r2
 8017fe0:	009b      	lsls	r3, r3, #2
 8017fe2:	440b      	add	r3, r1
 8017fe4:	3309      	adds	r3, #9
 8017fe6:	7b7a      	ldrb	r2, [r7, #13]
 8017fe8:	701a      	strb	r2, [r3, #0]
	ChannelsMask[0] |= (1 << id);
 8017fea:	4b0a      	ldr	r3, [pc, #40]	@ (8018014 <RegionEU433ChannelAdd+0x180>)
 8017fec:	881b      	ldrh	r3, [r3, #0]
 8017fee:	b21a      	sxth	r2, r3
 8017ff0:	7b3b      	ldrb	r3, [r7, #12]
 8017ff2:	2101      	movs	r1, #1
 8017ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8017ff8:	b21b      	sxth	r3, r3
 8017ffa:	4313      	orrs	r3, r2
 8017ffc:	b21b      	sxth	r3, r3
 8017ffe:	b29a      	uxth	r2, r3
 8018000:	4b04      	ldr	r3, [pc, #16]	@ (8018014 <RegionEU433ChannelAdd+0x180>)
 8018002:	801a      	strh	r2, [r3, #0]
	return LORAMAC_STATUS_OK;
 8018004:	2300      	movs	r3, #0
}
 8018006:	4618      	mov	r0, r3
 8018008:	3710      	adds	r7, #16
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	200076ec 	.word	0x200076ec
 8018014:	20006c9c 	.word	0x20006c9c

08018018 <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove(ChannelRemoveParams_t *channelRemove)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b086      	sub	sp, #24
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
	uint8_t id = channelRemove->ChannelId;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	781b      	ldrb	r3, [r3, #0]
 8018024:	75fb      	strb	r3, [r7, #23]

	if (id < EU433_NUMB_DEFAULT_CHANNELS)
 8018026:	7dfb      	ldrb	r3, [r7, #23]
 8018028:	2b02      	cmp	r3, #2
 801802a:	d801      	bhi.n	8018030 <RegionEU433ChannelsRemove+0x18>
	{
		return false;
 801802c:	2300      	movs	r3, #0
 801802e:	e012      	b.n	8018056 <RegionEU433ChannelsRemove+0x3e>
	}

	// Remove the channel from the list of channels
	Channels[id] = (ChannelParams_t){0, 0, {0}, 0};
 8018030:	7dfa      	ldrb	r2, [r7, #23]
 8018032:	490b      	ldr	r1, [pc, #44]	@ (8018060 <RegionEU433ChannelsRemove+0x48>)
 8018034:	4613      	mov	r3, r2
 8018036:	005b      	lsls	r3, r3, #1
 8018038:	4413      	add	r3, r2
 801803a:	009b      	lsls	r3, r3, #2
 801803c:	440b      	add	r3, r1
 801803e:	461a      	mov	r2, r3
 8018040:	2300      	movs	r3, #0
 8018042:	6013      	str	r3, [r2, #0]
 8018044:	6053      	str	r3, [r2, #4]
 8018046:	6093      	str	r3, [r2, #8]

	return RegionCommonChanDisable(ChannelsMask, id, EU433_MAX_NB_CHANNELS);
 8018048:	7dfb      	ldrb	r3, [r7, #23]
 801804a:	2210      	movs	r2, #16
 801804c:	4619      	mov	r1, r3
 801804e:	4805      	ldr	r0, [pc, #20]	@ (8018064 <RegionEU433ChannelsRemove+0x4c>)
 8018050:	f7fe f9a8 	bl	80163a4 <RegionCommonChanDisable>
 8018054:	4603      	mov	r3, r0
}
 8018056:	4618      	mov	r0, r3
 8018058:	3718      	adds	r7, #24
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}
 801805e:	bf00      	nop
 8018060:	200076ec 	.word	0x200076ec
 8018064:	20006c9c 	.word	0x20006c9c

08018068 <RegionEU433SetContinuousWave>:

void RegionEU433SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b084      	sub	sp, #16
 801806c:	af00      	add	r7, sp, #0
 801806e:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	781b      	ldrb	r3, [r3, #0]
 801807a:	4619      	mov	r1, r3
 801807c:	4a1f      	ldr	r2, [pc, #124]	@ (80180fc <RegionEU433SetContinuousWave+0x94>)
 801807e:	460b      	mov	r3, r1
 8018080:	005b      	lsls	r3, r3, #1
 8018082:	440b      	add	r3, r1
 8018084:	009b      	lsls	r3, r3, #2
 8018086:	4413      	add	r3, r2
 8018088:	3309      	adds	r3, #9
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	4a1c      	ldr	r2, [pc, #112]	@ (8018100 <RegionEU433SetContinuousWave+0x98>)
 801808e:	015b      	lsls	r3, r3, #5
 8018090:	4413      	add	r3, r2
 8018092:	3302      	adds	r3, #2
 8018094:	f993 1000 	ldrsb.w	r1, [r3]
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801809e:	4b19      	ldr	r3, [pc, #100]	@ (8018104 <RegionEU433SetContinuousWave+0x9c>)
 80180a0:	f7fe fe3e 	bl	8016d20 <LimitTxPower>
 80180a4:	4603      	mov	r3, r0
 80180a6:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 80180a8:	2300      	movs	r3, #0
 80180aa:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	781b      	ldrb	r3, [r3, #0]
 80180b0:	4619      	mov	r1, r3
 80180b2:	4a12      	ldr	r2, [pc, #72]	@ (80180fc <RegionEU433SetContinuousWave+0x94>)
 80180b4:	460b      	mov	r3, r1
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	440b      	add	r3, r1
 80180ba:	009b      	lsls	r3, r3, #2
 80180bc:	4413      	add	r3, r2
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80180ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80180d2:	eef0 0a47 	vmov.f32	s1, s14
 80180d6:	eeb0 0a67 	vmov.f32	s0, s15
 80180da:	4618      	mov	r0, r3
 80180dc:	f7fe fcfa 	bl	8016ad4 <RegionCommonComputeTxPower>
 80180e0:	4603      	mov	r3, r0
 80180e2:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 80180e4:	4b08      	ldr	r3, [pc, #32]	@ (8018108 <RegionEU433SetContinuousWave+0xa0>)
 80180e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80180e8:	687a      	ldr	r2, [r7, #4]
 80180ea:	8992      	ldrh	r2, [r2, #12]
 80180ec:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80180f0:	68b8      	ldr	r0, [r7, #8]
 80180f2:	4798      	blx	r3
}
 80180f4:	bf00      	nop
 80180f6:	3710      	adds	r7, #16
 80180f8:	46bd      	mov	sp, r7
 80180fa:	bd80      	pop	{r7, pc}
 80180fc:	200076ec 	.word	0x200076ec
 8018100:	20000150 	.word	0x20000150
 8018104:	20006c9c 	.word	0x20006c9c
 8018108:	08025450 	.word	0x08025450

0801810c <RegionEU433ApplyDrOffset>:

uint8_t RegionEU433ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 801810c:	b480      	push	{r7}
 801810e:	b085      	sub	sp, #20
 8018110:	af00      	add	r7, sp, #0
 8018112:	4603      	mov	r3, r0
 8018114:	71fb      	strb	r3, [r7, #7]
 8018116:	460b      	mov	r3, r1
 8018118:	71bb      	strb	r3, [r7, #6]
 801811a:	4613      	mov	r3, r2
 801811c:	717b      	strb	r3, [r7, #5]
	int8_t datarate = dr - drOffset;
 801811e:	79ba      	ldrb	r2, [r7, #6]
 8018120:	797b      	ldrb	r3, [r7, #5]
 8018122:	1ad3      	subs	r3, r2, r3
 8018124:	b2db      	uxtb	r3, r3
 8018126:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 8018128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801812c:	2b00      	cmp	r3, #0
 801812e:	da01      	bge.n	8018134 <RegionEU433ApplyDrOffset+0x28>
	{
		datarate = DR_0;
 8018130:	2300      	movs	r3, #0
 8018132:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 8018134:	7bfb      	ldrb	r3, [r7, #15]
}
 8018136:	4618      	mov	r0, r3
 8018138:	3714      	adds	r7, #20
 801813a:	46bd      	mov	sp, r7
 801813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018140:	4770      	bx	lr

08018142 <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 8018142:	b480      	push	{r7}
 8018144:	b085      	sub	sp, #20
 8018146:	af00      	add	r7, sp, #0
 8018148:	4603      	mov	r3, r0
 801814a:	460a      	mov	r2, r1
 801814c:	71fb      	strb	r3, [r7, #7]
 801814e:	4613      	mov	r3, r2
 8018150:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 8018152:	2300      	movs	r3, #0
 8018154:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 8018156:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801815a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801815e:	429a      	cmp	r2, r3
 8018160:	d102      	bne.n	8018168 <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 8018162:	79bb      	ldrb	r3, [r7, #6]
 8018164:	73fb      	strb	r3, [r7, #15]
 8018166:	e002      	b.n	801816e <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 8018168:	79fb      	ldrb	r3, [r7, #7]
 801816a:	3b01      	subs	r3, #1
 801816c:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 801816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018172:	4618      	mov	r0, r3
 8018174:	3714      	adds	r7, #20
 8018176:	46bd      	mov	sp, r7
 8018178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801817c:	4770      	bx	lr
	...

08018180 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 8018180:	b480      	push	{r7}
 8018182:	b083      	sub	sp, #12
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
	switch (BandwidthsEU868[drIndex])
 8018188:	4a0a      	ldr	r2, [pc, #40]	@ (80181b4 <GetBandwidth+0x34>)
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018190:	4a09      	ldr	r2, [pc, #36]	@ (80181b8 <GetBandwidth+0x38>)
 8018192:	4293      	cmp	r3, r2
 8018194:	d004      	beq.n	80181a0 <GetBandwidth+0x20>
 8018196:	4a09      	ldr	r2, [pc, #36]	@ (80181bc <GetBandwidth+0x3c>)
 8018198:	4293      	cmp	r3, r2
 801819a:	d003      	beq.n	80181a4 <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 801819c:	2300      	movs	r3, #0
 801819e:	e002      	b.n	80181a6 <GetBandwidth+0x26>
	case 250000:
		return 1;
 80181a0:	2301      	movs	r3, #1
 80181a2:	e000      	b.n	80181a6 <GetBandwidth+0x26>
	case 500000:
		return 2;
 80181a4:	2302      	movs	r3, #2
	}
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	370c      	adds	r7, #12
 80181aa:	46bd      	mov	sp, r7
 80181ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b0:	4770      	bx	lr
 80181b2:	bf00      	nop
 80181b4:	080252f4 	.word	0x080252f4
 80181b8:	0003d090 	.word	0x0003d090
 80181bc:	0007a120 	.word	0x0007a120

080181c0 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 80181c0:	b480      	push	{r7}
 80181c2:	b085      	sub	sp, #20
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	603b      	str	r3, [r7, #0]
 80181c8:	4603      	mov	r3, r0
 80181ca:	71fb      	strb	r3, [r7, #7]
 80181cc:	460b      	mov	r3, r1
 80181ce:	71bb      	strb	r3, [r7, #6]
 80181d0:	4613      	mov	r3, r2
 80181d2:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 80181d4:	79fb      	ldrb	r3, [r7, #7]
 80181d6:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 80181d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80181dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80181e0:	4293      	cmp	r3, r2
 80181e2:	bfb8      	it	lt
 80181e4:	4613      	movlt	r3, r2
 80181e6:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 80181e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3714      	adds	r7, #20
 80181f0:	46bd      	mov	sp, r7
 80181f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f6:	4770      	bx	lr

080181f8 <VerifyTxFreq>:

static bool VerifyTxFreq(uint32_t freq, uint8_t *band)
{
 80181f8:	b580      	push	{r7, lr}
 80181fa:	b082      	sub	sp, #8
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	6039      	str	r1, [r7, #0]
	// Check radio driver support
	if (Radio.CheckRfFrequency(freq) == false)
 8018202:	4b2d      	ldr	r3, [pc, #180]	@ (80182b8 <VerifyTxFreq+0xc0>)
 8018204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	4798      	blx	r3
 801820a:	4603      	mov	r3, r0
 801820c:	f083 0301 	eor.w	r3, r3, #1
 8018210:	b2db      	uxtb	r3, r3
 8018212:	2b00      	cmp	r3, #0
 8018214:	d001      	beq.n	801821a <VerifyTxFreq+0x22>
	{
		return false;
 8018216:	2300      	movs	r3, #0
 8018218:	e04a      	b.n	80182b0 <VerifyTxFreq+0xb8>
	}

	// Check frequency bands
	if ((freq >= 863000000) && (freq < 865000000))
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	4a27      	ldr	r2, [pc, #156]	@ (80182bc <VerifyTxFreq+0xc4>)
 801821e:	4293      	cmp	r3, r2
 8018220:	d307      	bcc.n	8018232 <VerifyTxFreq+0x3a>
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	4a26      	ldr	r2, [pc, #152]	@ (80182c0 <VerifyTxFreq+0xc8>)
 8018226:	4293      	cmp	r3, r2
 8018228:	d803      	bhi.n	8018232 <VerifyTxFreq+0x3a>
	{
		*band = 2;
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	2202      	movs	r2, #2
 801822e:	701a      	strb	r2, [r3, #0]
 8018230:	e03d      	b.n	80182ae <VerifyTxFreq+0xb6>
	}
	else if ((freq >= 865000000) && (freq <= 868000000))
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	4a22      	ldr	r2, [pc, #136]	@ (80182c0 <VerifyTxFreq+0xc8>)
 8018236:	4293      	cmp	r3, r2
 8018238:	d907      	bls.n	801824a <VerifyTxFreq+0x52>
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	4a21      	ldr	r2, [pc, #132]	@ (80182c4 <VerifyTxFreq+0xcc>)
 801823e:	4293      	cmp	r3, r2
 8018240:	d803      	bhi.n	801824a <VerifyTxFreq+0x52>
	{
		*band = 0;
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	2200      	movs	r2, #0
 8018246:	701a      	strb	r2, [r3, #0]
 8018248:	e031      	b.n	80182ae <VerifyTxFreq+0xb6>
	}
	else if ((freq > 868000000) && (freq <= 868600000))
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	4a1d      	ldr	r2, [pc, #116]	@ (80182c4 <VerifyTxFreq+0xcc>)
 801824e:	4293      	cmp	r3, r2
 8018250:	d907      	bls.n	8018262 <VerifyTxFreq+0x6a>
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	4a1c      	ldr	r2, [pc, #112]	@ (80182c8 <VerifyTxFreq+0xd0>)
 8018256:	4293      	cmp	r3, r2
 8018258:	d803      	bhi.n	8018262 <VerifyTxFreq+0x6a>
	{
		*band = 1;
 801825a:	683b      	ldr	r3, [r7, #0]
 801825c:	2201      	movs	r2, #1
 801825e:	701a      	strb	r2, [r3, #0]
 8018260:	e025      	b.n	80182ae <VerifyTxFreq+0xb6>
	}
	else if ((freq >= 868700000) && (freq <= 869200000))
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	4a19      	ldr	r2, [pc, #100]	@ (80182cc <VerifyTxFreq+0xd4>)
 8018266:	4293      	cmp	r3, r2
 8018268:	d907      	bls.n	801827a <VerifyTxFreq+0x82>
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	4a18      	ldr	r2, [pc, #96]	@ (80182d0 <VerifyTxFreq+0xd8>)
 801826e:	4293      	cmp	r3, r2
 8018270:	d803      	bhi.n	801827a <VerifyTxFreq+0x82>
	{
		*band = 2;
 8018272:	683b      	ldr	r3, [r7, #0]
 8018274:	2202      	movs	r2, #2
 8018276:	701a      	strb	r2, [r3, #0]
 8018278:	e019      	b.n	80182ae <VerifyTxFreq+0xb6>
	}
	else if ((freq >= 869400000) && (freq <= 869650000))
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	4a15      	ldr	r2, [pc, #84]	@ (80182d4 <VerifyTxFreq+0xdc>)
 801827e:	4293      	cmp	r3, r2
 8018280:	d907      	bls.n	8018292 <VerifyTxFreq+0x9a>
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	4a14      	ldr	r2, [pc, #80]	@ (80182d8 <VerifyTxFreq+0xe0>)
 8018286:	4293      	cmp	r3, r2
 8018288:	d803      	bhi.n	8018292 <VerifyTxFreq+0x9a>
	{
		*band = 3;
 801828a:	683b      	ldr	r3, [r7, #0]
 801828c:	2203      	movs	r2, #3
 801828e:	701a      	strb	r2, [r3, #0]
 8018290:	e00d      	b.n	80182ae <VerifyTxFreq+0xb6>
	}
	else if ((freq >= 869700000) && (freq <= 870000000))
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	4a11      	ldr	r2, [pc, #68]	@ (80182dc <VerifyTxFreq+0xe4>)
 8018296:	4293      	cmp	r3, r2
 8018298:	d307      	bcc.n	80182aa <VerifyTxFreq+0xb2>
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	4a10      	ldr	r2, [pc, #64]	@ (80182e0 <VerifyTxFreq+0xe8>)
 801829e:	4293      	cmp	r3, r2
 80182a0:	d803      	bhi.n	80182aa <VerifyTxFreq+0xb2>
	{
		*band = 4;
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	2204      	movs	r2, #4
 80182a6:	701a      	strb	r2, [r3, #0]
 80182a8:	e001      	b.n	80182ae <VerifyTxFreq+0xb6>
	}
	else
	{
		return false;
 80182aa:	2300      	movs	r3, #0
 80182ac:	e000      	b.n	80182b0 <VerifyTxFreq+0xb8>
	}
	return true;
 80182ae:	2301      	movs	r3, #1
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3708      	adds	r7, #8
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	08025450 	.word	0x08025450
 80182bc:	337055c0 	.word	0x337055c0
 80182c0:	338eda3f 	.word	0x338eda3f
 80182c4:	33bca100 	.word	0x33bca100
 80182c8:	33c5c8c0 	.word	0x33c5c8c0
 80182cc:	33c74f5f 	.word	0x33c74f5f
 80182d0:	33cef080 	.word	0x33cef080
 80182d4:	33d1fdbf 	.word	0x33d1fdbf
 80182d8:	33d5ce50 	.word	0x33d5ce50
 80182dc:	33d691a0 	.word	0x33d691a0
 80182e0:	33db2580 	.word	0x33db2580

080182e4 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(bool joined, uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 80182e4:	b580      	push	{r7, lr}
 80182e6:	b086      	sub	sp, #24
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	60ba      	str	r2, [r7, #8]
 80182ec:	607b      	str	r3, [r7, #4]
 80182ee:	4603      	mov	r3, r0
 80182f0:	73fb      	strb	r3, [r7, #15]
 80182f2:	460b      	mov	r3, r1
 80182f4:	73bb      	strb	r3, [r7, #14]
	uint8_t nbEnabledChannels = 0;
 80182f6:	2300      	movs	r3, #0
 80182f8:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 80182fa:	2300      	movs	r3, #0
 80182fc:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++)
 80182fe:	2300      	movs	r3, #0
 8018300:	757b      	strb	r3, [r7, #21]
 8018302:	2300      	movs	r3, #0
 8018304:	753b      	strb	r3, [r7, #20]
 8018306:	e086      	b.n	8018416 <CountNbOfEnabledChannels+0x132>
	{
		for (uint8_t j = 0; j < 16; j++)
 8018308:	2300      	movs	r3, #0
 801830a:	74fb      	strb	r3, [r7, #19]
 801830c:	e07a      	b.n	8018404 <CountNbOfEnabledChannels+0x120>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 801830e:	7d3b      	ldrb	r3, [r7, #20]
 8018310:	005b      	lsls	r3, r3, #1
 8018312:	68ba      	ldr	r2, [r7, #8]
 8018314:	4413      	add	r3, r2
 8018316:	881b      	ldrh	r3, [r3, #0]
 8018318:	461a      	mov	r2, r3
 801831a:	7cfb      	ldrb	r3, [r7, #19]
 801831c:	fa42 f303 	asr.w	r3, r2, r3
 8018320:	f003 0301 	and.w	r3, r3, #1
 8018324:	2b00      	cmp	r3, #0
 8018326:	d06a      	beq.n	80183fe <CountNbOfEnabledChannels+0x11a>
			{
				LOG_LIB("EU868", "Channel count ch# %d, freq %ld", i + j, channels[i + j].Frequency);
				if (channels[i + j].Frequency == 0)
 8018328:	7d7a      	ldrb	r2, [r7, #21]
 801832a:	7cfb      	ldrb	r3, [r7, #19]
 801832c:	4413      	add	r3, r2
 801832e:	461a      	mov	r2, r3
 8018330:	4613      	mov	r3, r2
 8018332:	005b      	lsls	r3, r3, #1
 8018334:	4413      	add	r3, r2
 8018336:	009b      	lsls	r3, r3, #2
 8018338:	461a      	mov	r2, r3
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	4413      	add	r3, r2
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d057      	beq.n	80183f4 <CountNbOfEnabledChannels+0x110>
				{ // Check if the channel is enabled
					continue;
				}
				if (joined == false)
 8018344:	7bfb      	ldrb	r3, [r7, #15]
 8018346:	f083 0301 	eor.w	r3, r3, #1
 801834a:	b2db      	uxtb	r3, r3
 801834c:	2b00      	cmp	r3, #0
 801834e:	d007      	beq.n	8018360 <CountNbOfEnabledChannels+0x7c>
				{
					if ((EU868_JOIN_CHANNELS & (1 << j)) == 0)
 8018350:	7cfb      	ldrb	r3, [r7, #19]
 8018352:	2207      	movs	r2, #7
 8018354:	fa42 f303 	asr.w	r3, r2, r3
 8018358:	f003 0301 	and.w	r3, r3, #1
 801835c:	2b00      	cmp	r3, #0
 801835e:	d04b      	beq.n	80183f8 <CountNbOfEnabledChannels+0x114>
					{
						continue;
					}
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8018360:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8018364:	7d7a      	ldrb	r2, [r7, #21]
 8018366:	7cfb      	ldrb	r3, [r7, #19]
 8018368:	4413      	add	r3, r2
 801836a:	461a      	mov	r2, r3
 801836c:	4613      	mov	r3, r2
 801836e:	005b      	lsls	r3, r3, #1
 8018370:	4413      	add	r3, r2
 8018372:	009b      	lsls	r3, r3, #2
 8018374:	461a      	mov	r2, r3
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	4413      	add	r3, r2
 801837a:	7a1b      	ldrb	r3, [r3, #8]
 801837c:	f343 0303 	sbfx	r3, r3, #0, #4
 8018380:	b25b      	sxtb	r3, r3
 8018382:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 8018384:	7d7a      	ldrb	r2, [r7, #21]
 8018386:	7cfb      	ldrb	r3, [r7, #19]
 8018388:	4413      	add	r3, r2
 801838a:	461a      	mov	r2, r3
 801838c:	4613      	mov	r3, r2
 801838e:	005b      	lsls	r3, r3, #1
 8018390:	4413      	add	r3, r2
 8018392:	009b      	lsls	r3, r3, #2
 8018394:	461a      	mov	r2, r3
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	4413      	add	r3, r2
 801839a:	7a1b      	ldrb	r3, [r3, #8]
 801839c:	f343 1303 	sbfx	r3, r3, #4, #4
 80183a0:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 80183a2:	461a      	mov	r2, r3
 80183a4:	f7fd ffe0 	bl	8016368 <RegionCommonValueInRange>
 80183a8:	4603      	mov	r3, r0
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d026      	beq.n	80183fc <CountNbOfEnabledChannels+0x118>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 80183ae:	7d7a      	ldrb	r2, [r7, #21]
 80183b0:	7cfb      	ldrb	r3, [r7, #19]
 80183b2:	4413      	add	r3, r2
 80183b4:	461a      	mov	r2, r3
 80183b6:	4613      	mov	r3, r2
 80183b8:	005b      	lsls	r3, r3, #1
 80183ba:	4413      	add	r3, r2
 80183bc:	009b      	lsls	r3, r3, #2
 80183be:	461a      	mov	r2, r3
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	4413      	add	r3, r2
 80183c4:	7a5b      	ldrb	r3, [r3, #9]
 80183c6:	015b      	lsls	r3, r3, #5
 80183c8:	6a3a      	ldr	r2, [r7, #32]
 80183ca:	4413      	add	r3, r2
 80183cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80183d0:	4313      	orrs	r3, r2
 80183d2:	d003      	beq.n	80183dc <CountNbOfEnabledChannels+0xf8>
				{ // Check if the band is available for transmission
					delayTransmission++;
 80183d4:	7dbb      	ldrb	r3, [r7, #22]
 80183d6:	3301      	adds	r3, #1
 80183d8:	75bb      	strb	r3, [r7, #22]
					continue;
 80183da:	e010      	b.n	80183fe <CountNbOfEnabledChannels+0x11a>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 80183dc:	7dfb      	ldrb	r3, [r7, #23]
 80183de:	1c5a      	adds	r2, r3, #1
 80183e0:	75fa      	strb	r2, [r7, #23]
 80183e2:	461a      	mov	r2, r3
 80183e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183e6:	4413      	add	r3, r2
 80183e8:	7d79      	ldrb	r1, [r7, #21]
 80183ea:	7cfa      	ldrb	r2, [r7, #19]
 80183ec:	440a      	add	r2, r1
 80183ee:	b2d2      	uxtb	r2, r2
 80183f0:	701a      	strb	r2, [r3, #0]
 80183f2:	e004      	b.n	80183fe <CountNbOfEnabledChannels+0x11a>
					continue;
 80183f4:	bf00      	nop
 80183f6:	e002      	b.n	80183fe <CountNbOfEnabledChannels+0x11a>
						continue;
 80183f8:	bf00      	nop
 80183fa:	e000      	b.n	80183fe <CountNbOfEnabledChannels+0x11a>
					continue;
 80183fc:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 80183fe:	7cfb      	ldrb	r3, [r7, #19]
 8018400:	3301      	adds	r3, #1
 8018402:	74fb      	strb	r3, [r7, #19]
 8018404:	7cfb      	ldrb	r3, [r7, #19]
 8018406:	2b0f      	cmp	r3, #15
 8018408:	d981      	bls.n	801830e <CountNbOfEnabledChannels+0x2a>
	for (uint8_t i = 0, k = 0; i < EU868_MAX_NB_CHANNELS; i += 16, k++)
 801840a:	7d7b      	ldrb	r3, [r7, #21]
 801840c:	3310      	adds	r3, #16
 801840e:	757b      	strb	r3, [r7, #21]
 8018410:	7d3b      	ldrb	r3, [r7, #20]
 8018412:	3301      	adds	r3, #1
 8018414:	753b      	strb	r3, [r7, #20]
 8018416:	7d7b      	ldrb	r3, [r7, #21]
 8018418:	2b0f      	cmp	r3, #15
 801841a:	f67f af75 	bls.w	8018308 <CountNbOfEnabledChannels+0x24>
				LOG_LIB("EU868", "Set channel %d, frequency %ld", nbEnabledChannels - 1, channels[i + j].Frequency);
			}
		}
	}

	*delayTx = delayTransmission;
 801841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018420:	7dba      	ldrb	r2, [r7, #22]
 8018422:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 8018424:	7dfb      	ldrb	r3, [r7, #23]
}
 8018426:	4618      	mov	r0, r3
 8018428:	3718      	adds	r7, #24
 801842a:	46bd      	mov	sp, r7
 801842c:	bd80      	pop	{r7, pc}
	...

08018430 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam(GetPhyParams_t *getPhy)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b084      	sub	sp, #16
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 8018438:	2300      	movs	r3, #0
 801843a:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	781b      	ldrb	r3, [r3, #0]
 8018440:	2b20      	cmp	r3, #32
 8018442:	f200 80b2 	bhi.w	80185aa <RegionEU868GetPhyParam+0x17a>
 8018446:	a201      	add	r2, pc, #4	@ (adr r2, 801844c <RegionEU868GetPhyParam+0x1c>)
 8018448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801844c:	080184d1 	.word	0x080184d1
 8018450:	080184d7 	.word	0x080184d7
 8018454:	080185ab 	.word	0x080185ab
 8018458:	080185ab 	.word	0x080185ab
 801845c:	080185ab 	.word	0x080185ab
 8018460:	080184dd 	.word	0x080184dd
 8018464:	080185ab 	.word	0x080185ab
 8018468:	080185ab 	.word	0x080185ab
 801846c:	080184f7 	.word	0x080184f7
 8018470:	080184fd 	.word	0x080184fd
 8018474:	0801850d 	.word	0x0801850d
 8018478:	0801851d 	.word	0x0801851d
 801847c:	08018523 	.word	0x08018523
 8018480:	0801852b 	.word	0x0801852b
 8018484:	08018533 	.word	0x08018533
 8018488:	0801853b 	.word	0x0801853b
 801848c:	08018543 	.word	0x08018543
 8018490:	0801854b 	.word	0x0801854b
 8018494:	08018553 	.word	0x08018553
 8018498:	08018567 	.word	0x08018567
 801849c:	0801856d 	.word	0x0801856d
 80184a0:	08018573 	.word	0x08018573
 80184a4:	08018579 	.word	0x08018579
 80184a8:	0801857f 	.word	0x0801857f
 80184ac:	08018585 	.word	0x08018585
 80184b0:	0801858b 	.word	0x0801858b
 80184b4:	08018591 	.word	0x08018591
 80184b8:	08018591 	.word	0x08018591
 80184bc:	08018597 	.word	0x08018597
 80184c0:	0801859f 	.word	0x0801859f
 80184c4:	080185a5 	.word	0x080185a5
 80184c8:	080185a5 	.word	0x080185a5
 80184cc:	080184e3 	.word	0x080184e3
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = EU868_RX_MIN_DATARATE;
 80184d0:	2300      	movs	r3, #0
 80184d2:	60fb      	str	r3, [r7, #12]
		break;
 80184d4:	e06a      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = EU868_TX_MIN_DATARATE;
 80184d6:	2300      	movs	r3, #0
 80184d8:	60fb      	str	r3, [r7, #12]
		break;
 80184da:	e067      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = EU868_DEFAULT_DATARATE;
 80184dc:	2300      	movs	r3, #0
 80184de:	60fb      	str	r3, [r7, #12]
		break;
 80184e0:	e064      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, EU868_TX_MIN_DATARATE);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184e8:	2100      	movs	r1, #0
 80184ea:	4618      	mov	r0, r3
 80184ec:	f7ff fe29 	bl	8018142 <GetNextLowerTxDr>
 80184f0:	4603      	mov	r3, r0
 80184f2:	60fb      	str	r3, [r7, #12]
		break;
 80184f4:	e05a      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = EU868_DEFAULT_TX_POWER;
 80184f6:	2300      	movs	r3, #0
 80184f8:	60fb      	str	r3, [r7, #12]
		break;
 80184fa:	e057      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018502:	461a      	mov	r2, r3
 8018504:	4b2c      	ldr	r3, [pc, #176]	@ (80185b8 <RegionEU868GetPhyParam+0x188>)
 8018506:	5c9b      	ldrb	r3, [r3, r2]
 8018508:	60fb      	str	r3, [r7, #12]
		break;
 801850a:	e04f      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018512:	461a      	mov	r2, r3
 8018514:	4b29      	ldr	r3, [pc, #164]	@ (80185bc <RegionEU868GetPhyParam+0x18c>)
 8018516:	5c9b      	ldrb	r3, [r3, r2]
 8018518:	60fb      	str	r3, [r7, #12]
		break;
 801851a:	e047      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801851c:	2301      	movs	r3, #1
 801851e:	60fb      	str	r3, [r7, #12]
		break;
 8018520:	e044      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = EU868_MAX_RX_WINDOW;
 8018522:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018526:	60fb      	str	r3, [r7, #12]
		break;
 8018528:	e040      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = EU868_RECEIVE_DELAY1;
 801852a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801852e:	60fb      	str	r3, [r7, #12]
		break;
 8018530:	e03c      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = EU868_RECEIVE_DELAY2;
 8018532:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8018536:	60fb      	str	r3, [r7, #12]
		break;
 8018538:	e038      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 801853a:	f241 3388 	movw	r3, #5000	@ 0x1388
 801853e:	60fb      	str	r3, [r7, #12]
		break;
 8018540:	e034      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 8018542:	f241 7370 	movw	r3, #6000	@ 0x1770
 8018546:	60fb      	str	r3, [r7, #12]
		break;
 8018548:	e030      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = EU868_MAX_FCNT_GAP;
 801854a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801854e:	60fb      	str	r3, [r7, #12]
		break;
 8018550:	e02c      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (EU868_ACKTIMEOUT + randr(-EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND));
 8018552:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8018556:	481a      	ldr	r0, [pc, #104]	@ (80185c0 <RegionEU868GetPhyParam+0x190>)
 8018558:	f008 fb0c 	bl	8020b74 <randr>
 801855c:	4603      	mov	r3, r0
 801855e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8018562:	60fb      	str	r3, [r7, #12]
		break;
 8018564:	e022      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8018566:	2300      	movs	r3, #0
 8018568:	60fb      	str	r3, [r7, #12]
		break;
 801856a:	e01f      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = EU868_RX_WND_2_FREQ;
 801856c:	4b15      	ldr	r3, [pc, #84]	@ (80185c4 <RegionEU868GetPhyParam+0x194>)
 801856e:	60fb      	str	r3, [r7, #12]
		break;
 8018570:	e01c      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = EU868_RX_WND_2_DR;
 8018572:	2300      	movs	r3, #0
 8018574:	60fb      	str	r3, [r7, #12]
		break;
 8018576:	e019      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 8018578:	4b13      	ldr	r3, [pc, #76]	@ (80185c8 <RegionEU868GetPhyParam+0x198>)
 801857a:	60fb      	str	r3, [r7, #12]
		break;
 801857c:	e016      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 801857e:	4b13      	ldr	r3, [pc, #76]	@ (80185cc <RegionEU868GetPhyParam+0x19c>)
 8018580:	60fb      	str	r3, [r7, #12]
		break;
 8018582:	e013      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018584:	2310      	movs	r3, #16
 8018586:	60fb      	str	r3, [r7, #12]
		break;
 8018588:	e010      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 801858a:	4b11      	ldr	r3, [pc, #68]	@ (80185d0 <RegionEU868GetPhyParam+0x1a0>)
 801858c:	60fb      	str	r3, [r7, #12]
		break;
 801858e:	e00d      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 8018590:	2300      	movs	r3, #0
 8018592:	60fb      	str	r3, [r7, #12]
		break;
 8018594:	e00a      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018596:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 801859a:	60fb      	str	r3, [r7, #12]
		break;
 801859c:	e006      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801859e:	4b0d      	ldr	r3, [pc, #52]	@ (80185d4 <RegionEU868GetPhyParam+0x1a4>)
 80185a0:	60fb      	str	r3, [r7, #12]
		break;
 80185a2:	e003      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 48;
 80185a4:	2330      	movs	r3, #48	@ 0x30
 80185a6:	60fb      	str	r3, [r7, #12]
		break;
 80185a8:	e000      	b.n	80185ac <RegionEU868GetPhyParam+0x17c>
	}
	default:
	{
		break;
 80185aa:	bf00      	nop
	}
	}

	return phyParam;
 80185ac:	68fb      	ldr	r3, [r7, #12]
}
 80185ae:	4618      	mov	r0, r3
 80185b0:	3710      	adds	r7, #16
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}
 80185b6:	bf00      	nop
 80185b8:	08025314 	.word	0x08025314
 80185bc:	0802531c 	.word	0x0802531c
 80185c0:	fffffc18 	.word	0xfffffc18
 80185c4:	33d3e608 	.word	0x33d3e608
 80185c8:	20006c9c 	.word	0x20006c9c
 80185cc:	20006ca8 	.word	0x20006ca8
 80185d0:	200077ac 	.word	0x200077ac
 80185d4:	4009999a 	.word	0x4009999a

080185d8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	b082      	sub	sp, #8
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	7858      	ldrb	r0, [r3, #1]
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	4619      	mov	r1, r3
 80185ea:	4a0a      	ldr	r2, [pc, #40]	@ (8018614 <RegionEU868SetBandTxDone+0x3c>)
 80185ec:	460b      	mov	r3, r1
 80185ee:	005b      	lsls	r3, r3, #1
 80185f0:	440b      	add	r3, r1
 80185f2:	009b      	lsls	r3, r3, #2
 80185f4:	4413      	add	r3, r2
 80185f6:	3309      	adds	r3, #9
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	015b      	lsls	r3, r3, #5
 80185fc:	4a06      	ldr	r2, [pc, #24]	@ (8018618 <RegionEU868SetBandTxDone+0x40>)
 80185fe:	1899      	adds	r1, r3, r2
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8018606:	f7fd ff55 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 801860a:	bf00      	nop
 801860c:	3708      	adds	r7, #8
 801860e:	46bd      	mov	sp, r7
 8018610:	bd80      	pop	{r7, pc}
 8018612:	bf00      	nop
 8018614:	200077ac 	.word	0x200077ac
 8018618:	20000170 	.word	0x20000170

0801861c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults(InitType_t type)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b08c      	sub	sp, #48	@ 0x30
 8018620:	af00      	add	r7, sp, #0
 8018622:	4603      	mov	r3, r0
 8018624:	71fb      	strb	r3, [r7, #7]
	switch (type)
 8018626:	79fb      	ldrb	r3, [r7, #7]
 8018628:	2b02      	cmp	r3, #2
 801862a:	d029      	beq.n	8018680 <RegionEU868InitDefaults+0x64>
 801862c:	2b02      	cmp	r3, #2
 801862e:	dc2d      	bgt.n	801868c <RegionEU868InitDefaults+0x70>
 8018630:	2b00      	cmp	r3, #0
 8018632:	d002      	beq.n	801863a <RegionEU868InitDefaults+0x1e>
 8018634:	2b01      	cmp	r3, #1
 8018636:	d01a      	beq.n	801866e <RegionEU868InitDefaults+0x52>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
		break;
	}
	default:
	{
		break;
 8018638:	e028      	b.n	801868c <RegionEU868InitDefaults+0x70>
		Channels[0] = (ChannelParams_t)EU868_LC1;
 801863a:	4b17      	ldr	r3, [pc, #92]	@ (8018698 <RegionEU868InitDefaults+0x7c>)
 801863c:	4a17      	ldr	r2, [pc, #92]	@ (801869c <RegionEU868InitDefaults+0x80>)
 801863e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018640:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[1] = (ChannelParams_t)EU868_LC2;
 8018644:	4b14      	ldr	r3, [pc, #80]	@ (8018698 <RegionEU868InitDefaults+0x7c>)
 8018646:	4a16      	ldr	r2, [pc, #88]	@ (80186a0 <RegionEU868InitDefaults+0x84>)
 8018648:	330c      	adds	r3, #12
 801864a:	ca07      	ldmia	r2, {r0, r1, r2}
 801864c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[2] = (ChannelParams_t)EU868_LC3;
 8018650:	4b11      	ldr	r3, [pc, #68]	@ (8018698 <RegionEU868InitDefaults+0x7c>)
 8018652:	4a14      	ldr	r2, [pc, #80]	@ (80186a4 <RegionEU868InitDefaults+0x88>)
 8018654:	3318      	adds	r3, #24
 8018656:	ca07      	ldmia	r2, {r0, r1, r2}
 8018658:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ChannelsDefaultMask[0] = LC(1) + LC(2) + LC(3);
 801865c:	4b12      	ldr	r3, [pc, #72]	@ (80186a8 <RegionEU868InitDefaults+0x8c>)
 801865e:	2207      	movs	r2, #7
 8018660:	801a      	strh	r2, [r3, #0]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8018662:	2201      	movs	r2, #1
 8018664:	4910      	ldr	r1, [pc, #64]	@ (80186a8 <RegionEU868InitDefaults+0x8c>)
 8018666:	4811      	ldr	r0, [pc, #68]	@ (80186ac <RegionEU868InitDefaults+0x90>)
 8018668:	f7fd fefd 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801866c:	e00f      	b.n	801868e <RegionEU868InitDefaults+0x72>
		ChannelsMask[0] |= ChannelsDefaultMask[0];
 801866e:	4b0f      	ldr	r3, [pc, #60]	@ (80186ac <RegionEU868InitDefaults+0x90>)
 8018670:	881a      	ldrh	r2, [r3, #0]
 8018672:	4b0d      	ldr	r3, [pc, #52]	@ (80186a8 <RegionEU868InitDefaults+0x8c>)
 8018674:	881b      	ldrh	r3, [r3, #0]
 8018676:	4313      	orrs	r3, r2
 8018678:	b29a      	uxth	r2, r3
 801867a:	4b0c      	ldr	r3, [pc, #48]	@ (80186ac <RegionEU868InitDefaults+0x90>)
 801867c:	801a      	strh	r2, [r3, #0]
		break;
 801867e:	e006      	b.n	801868e <RegionEU868InitDefaults+0x72>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8018680:	2201      	movs	r2, #1
 8018682:	4909      	ldr	r1, [pc, #36]	@ (80186a8 <RegionEU868InitDefaults+0x8c>)
 8018684:	4809      	ldr	r0, [pc, #36]	@ (80186ac <RegionEU868InitDefaults+0x90>)
 8018686:	f7fd feee 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801868a:	e000      	b.n	801868e <RegionEU868InitDefaults+0x72>
		break;
 801868c:	bf00      	nop
	}
	}
}
 801868e:	bf00      	nop
 8018690:	3730      	adds	r7, #48	@ 0x30
 8018692:	46bd      	mov	sp, r7
 8018694:	bd80      	pop	{r7, pc}
 8018696:	bf00      	nop
 8018698:	200077ac 	.word	0x200077ac
 801869c:	08024b34 	.word	0x08024b34
 80186a0:	08024b40 	.word	0x08024b40
 80186a4:	08024b4c 	.word	0x08024b4c
 80186a8:	20006ca8 	.word	0x20006ca8
 80186ac:	20006c9c 	.word	0x20006c9c

080186b0 <RegionEU868Verify>:

bool RegionEU868Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
 80186b8:	460b      	mov	r3, r1
 80186ba:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 80186bc:	78fb      	ldrb	r3, [r7, #3]
 80186be:	3b04      	subs	r3, #4
 80186c0:	2b1a      	cmp	r3, #26
 80186c2:	d87d      	bhi.n	80187c0 <RegionEU868Verify+0x110>
 80186c4:	a201      	add	r2, pc, #4	@ (adr r2, 80186cc <RegionEU868Verify+0x1c>)
 80186c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186ca:	bf00      	nop
 80186cc:	08018739 	.word	0x08018739
 80186d0:	08018757 	.word	0x08018757
 80186d4:	08018775 	.word	0x08018775
 80186d8:	08018793 	.word	0x08018793
 80186dc:	08018793 	.word	0x08018793
 80186e0:	080187c1 	.word	0x080187c1
 80186e4:	080187c1 	.word	0x080187c1
 80186e8:	080187b1 	.word	0x080187b1
 80186ec:	080187c1 	.word	0x080187c1
 80186f0:	080187c1 	.word	0x080187c1
 80186f4:	080187c1 	.word	0x080187c1
 80186f8:	080187c1 	.word	0x080187c1
 80186fc:	080187c1 	.word	0x080187c1
 8018700:	080187c1 	.word	0x080187c1
 8018704:	080187c1 	.word	0x080187c1
 8018708:	080187c1 	.word	0x080187c1
 801870c:	080187c1 	.word	0x080187c1
 8018710:	080187c1 	.word	0x080187c1
 8018714:	080187c1 	.word	0x080187c1
 8018718:	080187c1 	.word	0x080187c1
 801871c:	080187c1 	.word	0x080187c1
 8018720:	080187c1 	.word	0x080187c1
 8018724:	080187c1 	.word	0x080187c1
 8018728:	080187c1 	.word	0x080187c1
 801872c:	080187c1 	.word	0x080187c1
 8018730:	080187c1 	.word	0x080187c1
 8018734:	080187b5 	.word	0x080187b5
	{
	case PHY_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	f993 3000 	ldrsb.w	r3, [r3]
 801873e:	2207      	movs	r2, #7
 8018740:	2100      	movs	r1, #0
 8018742:	4618      	mov	r0, r3
 8018744:	f7fd fe10 	bl	8016368 <RegionCommonValueInRange>
 8018748:	4603      	mov	r3, r0
 801874a:	2b00      	cmp	r3, #0
 801874c:	bf14      	ite	ne
 801874e:	2301      	movne	r3, #1
 8018750:	2300      	moveq	r3, #0
 8018752:	b2db      	uxtb	r3, r3
 8018754:	e038      	b.n	80187c8 <RegionEU868Verify+0x118>
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	f993 3000 	ldrsb.w	r3, [r3]
 801875c:	2205      	movs	r2, #5
 801875e:	2100      	movs	r1, #0
 8018760:	4618      	mov	r0, r3
 8018762:	f7fd fe01 	bl	8016368 <RegionCommonValueInRange>
 8018766:	4603      	mov	r3, r0
 8018768:	2b00      	cmp	r3, #0
 801876a:	bf14      	ite	ne
 801876c:	2301      	movne	r3, #1
 801876e:	2300      	moveq	r3, #0
 8018770:	b2db      	uxtb	r3, r3
 8018772:	e029      	b.n	80187c8 <RegionEU868Verify+0x118>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE);
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f993 3000 	ldrsb.w	r3, [r3]
 801877a:	2207      	movs	r2, #7
 801877c:	2100      	movs	r1, #0
 801877e:	4618      	mov	r0, r3
 8018780:	f7fd fdf2 	bl	8016368 <RegionCommonValueInRange>
 8018784:	4603      	mov	r3, r0
 8018786:	2b00      	cmp	r3, #0
 8018788:	bf14      	ite	ne
 801878a:	2301      	movne	r3, #1
 801878c:	2300      	moveq	r3, #0
 801878e:	b2db      	uxtb	r3, r3
 8018790:	e01a      	b.n	80187c8 <RegionEU868Verify+0x118>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f993 3000 	ldrsb.w	r3, [r3]
 8018798:	2207      	movs	r2, #7
 801879a:	2100      	movs	r1, #0
 801879c:	4618      	mov	r0, r3
 801879e:	f7fd fde3 	bl	8016368 <RegionCommonValueInRange>
 80187a2:	4603      	mov	r3, r0
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	bf14      	ite	ne
 80187a8:	2301      	movne	r3, #1
 80187aa:	2300      	moveq	r3, #0
 80187ac:	b2db      	uxtb	r3, r3
 80187ae:	e00b      	b.n	80187c8 <RegionEU868Verify+0x118>
	}
	case PHY_DUTY_CYCLE:
	{
		return EU868_DUTY_CYCLE_ENABLED;
 80187b0:	2301      	movs	r3, #1
 80187b2:	e009      	b.n	80187c8 <RegionEU868Verify+0x118>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 48)
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80187ba:	d803      	bhi.n	80187c4 <RegionEU868Verify+0x114>
		{
			return false;
 80187bc:	2300      	movs	r3, #0
 80187be:	e003      	b.n	80187c8 <RegionEU868Verify+0x118>
		}
		break;
	}
	default:
		return false;
 80187c0:	2300      	movs	r3, #0
 80187c2:	e001      	b.n	80187c8 <RegionEU868Verify+0x118>
		break;
 80187c4:	bf00      	nop
	}
	return true;
 80187c6:	2301      	movs	r3, #1
}
 80187c8:	4618      	mov	r0, r3
 80187ca:	3708      	adds	r7, #8
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b08a      	sub	sp, #40	@ 0x28
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
	ChannelParams_t newChannel;
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	// Setup default datarate range
	newChannel.DrRange.Value = (DR_5 << 4) | DR_0;
 80187d8:	2350      	movs	r3, #80	@ 0x50
 80187da:	f887 3020 	strb.w	r3, [r7, #32]

	// Size of the optional CF list
	if (applyCFList->Size != 16)
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	791b      	ldrb	r3, [r3, #4]
 80187e2:	2b10      	cmp	r3, #16
 80187e4:	d15c      	bne.n	80188a0 <RegionEU868ApplyCFList+0xd0>
	{
		return;
	}

	// Last byte is RFU, don't take it into account
	for (uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i += 3, chanIdx++)
 80187e6:	2300      	movs	r3, #0
 80187e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80187ec:	2303      	movs	r3, #3
 80187ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80187f2:	e050      	b.n	8018896 <RegionEU868ApplyCFList+0xc6>
	{
		if (chanIdx < (EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS))
 80187f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80187f8:	2b07      	cmp	r3, #7
 80187fa:	d824      	bhi.n	8018846 <RegionEU868ApplyCFList+0x76>
		{
			// Channel frequency
			newChannel.Frequency = (uint32_t)applyCFList->Payload[i];
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681a      	ldr	r2, [r3, #0]
 8018800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018804:	4413      	add	r3, r2
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 1] << 8);
 801880a:	69ba      	ldr	r2, [r7, #24]
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6819      	ldr	r1, [r3, #0]
 8018810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018814:	3301      	adds	r3, #1
 8018816:	440b      	add	r3, r1
 8018818:	781b      	ldrb	r3, [r3, #0]
 801881a:	021b      	lsls	r3, r3, #8
 801881c:	4313      	orrs	r3, r2
 801881e:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 2] << 16);
 8018820:	69ba      	ldr	r2, [r7, #24]
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6819      	ldr	r1, [r3, #0]
 8018826:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801882a:	3302      	adds	r3, #2
 801882c:	440b      	add	r3, r1
 801882e:	781b      	ldrb	r3, [r3, #0]
 8018830:	041b      	lsls	r3, r3, #16
 8018832:	4313      	orrs	r3, r2
 8018834:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency *= 100;
 8018836:	69bb      	ldr	r3, [r7, #24]
 8018838:	2264      	movs	r2, #100	@ 0x64
 801883a:	fb02 f303 	mul.w	r3, r2, r3
 801883e:	61bb      	str	r3, [r7, #24]

			LOG_LIB("EU868", "Apply CF list: new channel at Freq = %d", newChannel.Frequency);
			// Initialize alternative frequency to 0
			newChannel.Rx1Frequency = 0;
 8018840:	2300      	movs	r3, #0
 8018842:	61fb      	str	r3, [r7, #28]
 8018844:	e006      	b.n	8018854 <RegionEU868ApplyCFList+0x84>
		}
		else
		{
			newChannel.Frequency = 0;
 8018846:	2300      	movs	r3, #0
 8018848:	61bb      	str	r3, [r7, #24]
			newChannel.DrRange.Value = 0;
 801884a:	2300      	movs	r3, #0
 801884c:	f887 3020 	strb.w	r3, [r7, #32]
			newChannel.Rx1Frequency = 0;
 8018850:	2300      	movs	r3, #0
 8018852:	61fb      	str	r3, [r7, #28]
		}

		if (newChannel.Frequency != 0)
 8018854:	69bb      	ldr	r3, [r7, #24]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d00b      	beq.n	8018872 <RegionEU868ApplyCFList+0xa2>
		{
			channelAdd.NewChannel = &newChannel;
 801885a:	f107 0318 	add.w	r3, r7, #24
 801885e:	613b      	str	r3, [r7, #16]
			channelAdd.ChannelId = chanIdx;
 8018860:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018864:	753b      	strb	r3, [r7, #20]

			// Try to add all channels
			RegionEU868ChannelAdd(&channelAdd);
 8018866:	f107 0310 	add.w	r3, r7, #16
 801886a:	4618      	mov	r0, r3
 801886c:	f000 fdd4 	bl	8019418 <RegionEU868ChannelAdd>
 8018870:	e007      	b.n	8018882 <RegionEU868ApplyCFList+0xb2>
		}
		else
		{
			channelRemove.ChannelId = chanIdx;
 8018872:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018876:	733b      	strb	r3, [r7, #12]

			RegionEU868ChannelsRemove(&channelRemove);
 8018878:	f107 030c 	add.w	r3, r7, #12
 801887c:	4618      	mov	r0, r3
 801887e:	f000 fe91 	bl	80195a4 <RegionEU868ChannelsRemove>
	for (uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i += 3, chanIdx++)
 8018882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018886:	3303      	adds	r3, #3
 8018888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801888c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018890:	3301      	adds	r3, #1
 8018892:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8018896:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801889a:	2b0f      	cmp	r3, #15
 801889c:	d9aa      	bls.n	80187f4 <RegionEU868ApplyCFList+0x24>
 801889e:	e000      	b.n	80188a2 <RegionEU868ApplyCFList+0xd2>
		return;
 80188a0:	bf00      	nop
		}
	}
}
 80188a2:	3728      	adds	r7, #40	@ 0x28
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b082      	sub	sp, #8
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	791b      	ldrb	r3, [r3, #4]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d002      	beq.n	80188be <RegionEU868ChanMaskSet+0x16>
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d008      	beq.n	80188ce <RegionEU868ChanMaskSet+0x26>
 80188bc:	e00f      	b.n	80188de <RegionEU868ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 1);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	2201      	movs	r2, #1
 80188c4:	4619      	mov	r1, r3
 80188c6:	4809      	ldr	r0, [pc, #36]	@ (80188ec <RegionEU868ChanMaskSet+0x44>)
 80188c8:	f7fd fdcd 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 80188cc:	e009      	b.n	80188e2 <RegionEU868ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	2201      	movs	r2, #1
 80188d4:	4619      	mov	r1, r3
 80188d6:	4806      	ldr	r0, [pc, #24]	@ (80188f0 <RegionEU868ChanMaskSet+0x48>)
 80188d8:	f7fd fdc5 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 80188dc:	e001      	b.n	80188e2 <RegionEU868ChanMaskSet+0x3a>
	}
	default:
		return false;
 80188de:	2300      	movs	r3, #0
 80188e0:	e000      	b.n	80188e4 <RegionEU868ChanMaskSet+0x3c>
	}
	return true;
 80188e2:	2301      	movs	r3, #1
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3708      	adds	r7, #8
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	20006c9c 	.word	0x20006c9c
 80188f0:	20006ca8 	.word	0x20006ca8

080188f4 <RegionEU868AdrNext>:

bool RegionEU868AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b088      	sub	sp, #32
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	60f8      	str	r0, [r7, #12]
 80188fc:	60b9      	str	r1, [r7, #8]
 80188fe:	607a      	str	r2, [r7, #4]
 8018900:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 8018902:	2300      	movs	r3, #0
 8018904:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	7a1b      	ldrb	r3, [r3, #8]
 801890a:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	7a5b      	ldrb	r3, [r3, #9]
 8018910:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	685a      	ldr	r2, [r3, #4]
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	785b      	ldrb	r3, [r3, #1]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d03f      	beq.n	80189a2 <RegionEU868AdrNext+0xae>
	{
		if (datarate == EU868_TX_MIN_DATARATE)
 8018922:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d105      	bne.n	8018936 <RegionEU868AdrNext+0x42>
		{
			*adrAckCounter = 0;
 801892a:	683b      	ldr	r3, [r7, #0]
 801892c:	2200      	movs	r2, #0
 801892e:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 8018930:	2300      	movs	r3, #0
 8018932:	77fb      	strb	r3, [r7, #31]
 8018934:	e035      	b.n	80189a2 <RegionEU868AdrNext+0xae>
		}
		else
		{
			if (adrNext->AdrAckCounter >= EU868_ADR_ACK_LIMIT)
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	685b      	ldr	r3, [r3, #4]
 801893a:	2b3f      	cmp	r3, #63	@ 0x3f
 801893c:	d904      	bls.n	8018948 <RegionEU868AdrNext+0x54>
			{
				adrAckReq = true;
 801893e:	2301      	movs	r3, #1
 8018940:	77fb      	strb	r3, [r7, #31]
				txPower = EU868_MAX_TX_POWER;
 8018942:	2300      	movs	r3, #0
 8018944:	777b      	strb	r3, [r7, #29]
 8018946:	e001      	b.n	801894c <RegionEU868AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 8018948:	2300      	movs	r3, #0
 801894a:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (EU868_ADR_ACK_LIMIT + EU868_ADR_ACK_DELAY))
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	685b      	ldr	r3, [r3, #4]
 8018950:	2b5f      	cmp	r3, #95	@ 0x5f
 8018952:	d926      	bls.n	80189a2 <RegionEU868AdrNext+0xae>
			{
				if ((adrNext->AdrAckCounter % EU868_ADR_ACK_DELAY) == 1)
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	685b      	ldr	r3, [r3, #4]
 8018958:	f003 031f 	and.w	r3, r3, #31
 801895c:	2b01      	cmp	r3, #1
 801895e:	d120      	bne.n	80189a2 <RegionEU868AdrNext+0xae>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8018960:	2320      	movs	r3, #32
 8018962:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 8018964:	7fbb      	ldrb	r3, [r7, #30]
 8018966:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	7a9b      	ldrb	r3, [r3, #10]
 801896c:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionEU868GetPhyParam(&getPhy);
 801896e:	f107 0318 	add.w	r3, r7, #24
 8018972:	4618      	mov	r0, r3
 8018974:	f7ff fd5c 	bl	8018430 <RegionEU868GetPhyParam>
 8018978:	4603      	mov	r3, r0
 801897a:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	77bb      	strb	r3, [r7, #30]

					if (datarate == EU868_TX_MIN_DATARATE)
 8018980:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d10c      	bne.n	80189a2 <RegionEU868AdrNext+0xae>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 8018988:	2300      	movs	r3, #0
 801898a:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	781b      	ldrb	r3, [r3, #0]
 8018990:	2b00      	cmp	r3, #0
 8018992:	d006      	beq.n	80189a2 <RegionEU868AdrNext+0xae>
						{
							// Re-enable default channels
							ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 8018994:	4b08      	ldr	r3, [pc, #32]	@ (80189b8 <RegionEU868AdrNext+0xc4>)
 8018996:	881b      	ldrh	r3, [r3, #0]
 8018998:	f043 0307 	orr.w	r3, r3, #7
 801899c:	b29a      	uxth	r2, r3
 801899e:	4b06      	ldr	r3, [pc, #24]	@ (80189b8 <RegionEU868AdrNext+0xc4>)
 80189a0:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	*drOut = datarate;
 80189a2:	68bb      	ldr	r3, [r7, #8]
 80189a4:	7fba      	ldrb	r2, [r7, #30]
 80189a6:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	7f7a      	ldrb	r2, [r7, #29]
 80189ac:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 80189ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80189b0:	4618      	mov	r0, r3
 80189b2:	3720      	adds	r7, #32
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd80      	pop	{r7, pc}
 80189b8:	20006c9c 	.word	0x20006c9c

080189bc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b088      	sub	sp, #32
 80189c0:	af02      	add	r7, sp, #8
 80189c2:	60ba      	str	r2, [r7, #8]
 80189c4:	607b      	str	r3, [r7, #4]
 80189c6:	4603      	mov	r3, r0
 80189c8:	73fb      	strb	r3, [r7, #15]
 80189ca:	460b      	mov	r3, r1
 80189cc:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 80189ce:	f04f 0200 	mov.w	r2, #0
 80189d2:	f04f 0300 	mov.w	r3, #0
 80189d6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, EU868_RX_MAX_DATARATE);
 80189da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189de:	2b07      	cmp	r3, #7
 80189e0:	bfa8      	it	ge
 80189e2:	2307      	movge	r3, #7
 80189e4:	b25a      	sxtb	r2, r3
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7ff fbc5 	bl	8018180 <GetBandwidth>
 80189f6:	4603      	mov	r3, r0
 80189f8:	b2da      	uxtb	r2, r3
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	709a      	strb	r2, [r3, #2]

	if (rxConfigParams->Datarate == DR_7)
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018a04:	2b07      	cmp	r3, #7
 8018a06:	d10b      	bne.n	8018a20 <RegionEU868ComputeRxWindowParameters+0x64>
	{ // FSK
		tSymbol = RegionCommonComputeSymbolTimeFsk(DataratesEU868[rxConfigParams->Datarate]);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018a0e:	461a      	mov	r2, r3
 8018a10:	4b16      	ldr	r3, [pc, #88]	@ (8018a6c <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018a12:	5c9b      	ldrb	r3, [r3, r2]
 8018a14:	4618      	mov	r0, r3
 8018a16:	f7fd ffb3 	bl	8016980 <RegionCommonComputeSymbolTimeFsk>
 8018a1a:	ed87 0b04 	vstr	d0, [r7, #16]
 8018a1e:	e012      	b.n	8018a46 <RegionEU868ComputeRxWindowParameters+0x8a>
	}
	else
	{ // LoRa
		tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate]);
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018a26:	461a      	mov	r2, r3
 8018a28:	4b10      	ldr	r3, [pc, #64]	@ (8018a6c <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018a2a:	5c9a      	ldrb	r2, [r3, r2]
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018a32:	4619      	mov	r1, r3
 8018a34:	4b0e      	ldr	r3, [pc, #56]	@ (8018a70 <RegionEU868ComputeRxWindowParameters+0xb4>)
 8018a36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018a3a:	4619      	mov	r1, r3
 8018a3c:	4610      	mov	r0, r2
 8018a3e:	f7fd ff71 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 8018a42:	ed87 0b04 	vstr	d0, [r7, #16]
	}

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	f103 0208 	add.w	r2, r3, #8
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	330c      	adds	r3, #12
 8018a50:	7bb8      	ldrb	r0, [r7, #14]
 8018a52:	9300      	str	r3, [sp, #0]
 8018a54:	4613      	mov	r3, r2
 8018a56:	2203      	movs	r2, #3
 8018a58:	68b9      	ldr	r1, [r7, #8]
 8018a5a:	ed97 0b04 	vldr	d0, [r7, #16]
 8018a5e:	f7fd ffad 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 8018a62:	bf00      	nop
 8018a64:	3718      	adds	r7, #24
 8018a66:	46bd      	mov	sp, r7
 8018a68:	bd80      	pop	{r7, pc}
 8018a6a:	bf00      	nop
 8018a6c:	080252ec 	.word	0x080252ec
 8018a70:	080252f4 	.word	0x080252f4

08018a74 <RegionEU868RxConfig>:

bool RegionEU868RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 8018a74:	b590      	push	{r4, r7, lr}
 8018a76:	b091      	sub	sp, #68	@ 0x44
 8018a78:	af0a      	add	r7, sp, #40	@ 0x28
 8018a7a:	6078      	str	r0, [r7, #4]
 8018a7c:	6039      	str	r1, [r7, #0]
	RadioModems_t modem;
	int8_t dr = rxConfig->Datarate;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	785b      	ldrb	r3, [r3, #1]
 8018a82:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 8018a84:	2300      	movs	r3, #0
 8018a86:	75bb      	strb	r3, [r7, #22]
	int8_t phyDr = 0;
 8018a88:	2300      	movs	r3, #0
 8018a8a:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	685b      	ldr	r3, [r3, #4]
 8018a90:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 8018a92:	4b53      	ldr	r3, [pc, #332]	@ (8018be0 <RegionEU868RxConfig+0x16c>)
 8018a94:	689b      	ldr	r3, [r3, #8]
 8018a96:	4798      	blx	r3
 8018a98:	4603      	mov	r3, r0
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d001      	beq.n	8018aa2 <RegionEU868RxConfig+0x2e>
	{
		return false;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	e099      	b.n	8018bd6 <RegionEU868RxConfig+0x162>
	}

	if (rxConfig->Window == 0)
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	7cdb      	ldrb	r3, [r3, #19]
 8018aa6:	f083 0301 	eor.w	r3, r3, #1
 8018aaa:	b2db      	uxtb	r3, r3
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d023      	beq.n	8018af8 <RegionEU868RxConfig+0x84>
	{
		// Apply window 1 frequency
		frequency = Channels[rxConfig->Channel].Frequency;
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	781b      	ldrb	r3, [r3, #0]
 8018ab4:	4619      	mov	r1, r3
 8018ab6:	4a4b      	ldr	r2, [pc, #300]	@ (8018be4 <RegionEU868RxConfig+0x170>)
 8018ab8:	460b      	mov	r3, r1
 8018aba:	005b      	lsls	r3, r3, #1
 8018abc:	440b      	add	r3, r1
 8018abe:	009b      	lsls	r3, r3, #2
 8018ac0:	4413      	add	r3, r2
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	613b      	str	r3, [r7, #16]
		// Apply the alternative RX 1 window frequency, if it is available
		if (Channels[rxConfig->Channel].Rx1Frequency != 0)
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	781b      	ldrb	r3, [r3, #0]
 8018aca:	4619      	mov	r1, r3
 8018acc:	4a45      	ldr	r2, [pc, #276]	@ (8018be4 <RegionEU868RxConfig+0x170>)
 8018ace:	460b      	mov	r3, r1
 8018ad0:	005b      	lsls	r3, r3, #1
 8018ad2:	440b      	add	r3, r1
 8018ad4:	009b      	lsls	r3, r3, #2
 8018ad6:	4413      	add	r3, r2
 8018ad8:	3304      	adds	r3, #4
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d00b      	beq.n	8018af8 <RegionEU868RxConfig+0x84>
		{
			frequency = Channels[rxConfig->Channel].Rx1Frequency;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	781b      	ldrb	r3, [r3, #0]
 8018ae4:	4619      	mov	r1, r3
 8018ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8018be4 <RegionEU868RxConfig+0x170>)
 8018ae8:	460b      	mov	r3, r1
 8018aea:	005b      	lsls	r3, r3, #1
 8018aec:	440b      	add	r3, r1
 8018aee:	009b      	lsls	r3, r3, #2
 8018af0:	4413      	add	r3, r2
 8018af2:	3304      	adds	r3, #4
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	613b      	str	r3, [r7, #16]
		}
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesEU868[dr];
 8018af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018afc:	4a3a      	ldr	r2, [pc, #232]	@ (8018be8 <RegionEU868RxConfig+0x174>)
 8018afe:	5cd3      	ldrb	r3, [r2, r3]
 8018b00:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 8018b02:	4b37      	ldr	r3, [pc, #220]	@ (8018be0 <RegionEU868RxConfig+0x16c>)
 8018b04:	691b      	ldr	r3, [r3, #16]
 8018b06:	6938      	ldr	r0, [r7, #16]
 8018b08:	4798      	blx	r3

	// Radio configuration
	if (dr == DR_7)
 8018b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018b0e:	2b07      	cmp	r3, #7
 8018b10:	d125      	bne.n	8018b5e <RegionEU868RxConfig+0xea>
	{
		modem = MODEM_FSK;
 8018b12:	2300      	movs	r3, #0
 8018b14:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, 0, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
 8018b16:	4b32      	ldr	r3, [pc, #200]	@ (8018be0 <RegionEU868RxConfig+0x16c>)
 8018b18:	69dc      	ldr	r4, [r3, #28]
 8018b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018b1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018b22:	fb02 f303 	mul.w	r3, r2, r3
 8018b26:	461a      	mov	r2, r3
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	7c9b      	ldrb	r3, [r3, #18]
 8018b2c:	7df8      	ldrb	r0, [r7, #23]
 8018b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b30:	2300      	movs	r3, #0
 8018b32:	9308      	str	r3, [sp, #32]
 8018b34:	2300      	movs	r3, #0
 8018b36:	9307      	str	r3, [sp, #28]
 8018b38:	2300      	movs	r3, #0
 8018b3a:	9306      	str	r3, [sp, #24]
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	9305      	str	r3, [sp, #20]
 8018b40:	2300      	movs	r3, #0
 8018b42:	9304      	str	r3, [sp, #16]
 8018b44:	2300      	movs	r3, #0
 8018b46:	9303      	str	r3, [sp, #12]
 8018b48:	2300      	movs	r3, #0
 8018b4a:	9302      	str	r3, [sp, #8]
 8018b4c:	2305      	movs	r3, #5
 8018b4e:	9301      	str	r3, [sp, #4]
 8018b50:	4b26      	ldr	r3, [pc, #152]	@ (8018bec <RegionEU868RxConfig+0x178>)
 8018b52:	9300      	str	r3, [sp, #0]
 8018b54:	2300      	movs	r3, #0
 8018b56:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018b5a:	47a0      	blx	r4
 8018b5c:	e020      	b.n	8018ba0 <RegionEU868RxConfig+0x12c>
	}
	else
	{
		modem = MODEM_LORA;
 8018b5e:	2301      	movs	r3, #1
 8018b60:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 8018b62:	4b1f      	ldr	r3, [pc, #124]	@ (8018be0 <RegionEU868RxConfig+0x16c>)
 8018b64:	69dc      	ldr	r4, [r3, #28]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	789b      	ldrb	r3, [r3, #2]
 8018b6a:	4619      	mov	r1, r3
 8018b6c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	7c9b      	ldrb	r3, [r3, #18]
 8018b74:	7df8      	ldrb	r0, [r7, #23]
 8018b76:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b78:	2301      	movs	r3, #1
 8018b7a:	9308      	str	r3, [sp, #32]
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	9307      	str	r3, [sp, #28]
 8018b80:	2300      	movs	r3, #0
 8018b82:	9306      	str	r3, [sp, #24]
 8018b84:	2300      	movs	r3, #0
 8018b86:	9305      	str	r3, [sp, #20]
 8018b88:	2300      	movs	r3, #0
 8018b8a:	9304      	str	r3, [sp, #16]
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	9303      	str	r3, [sp, #12]
 8018b90:	2300      	movs	r3, #0
 8018b92:	9302      	str	r3, [sp, #8]
 8018b94:	2308      	movs	r3, #8
 8018b96:	9301      	str	r3, [sp, #4]
 8018b98:	2300      	movs	r3, #0
 8018b9a:	9300      	str	r3, [sp, #0]
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	47a0      	blx	r4
	}

	if (rxConfig->RepeaterSupport == true)
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	7c5b      	ldrb	r3, [r3, #17]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d005      	beq.n	8018bb4 <RegionEU868RxConfig+0x140>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bac:	4a10      	ldr	r2, [pc, #64]	@ (8018bf0 <RegionEU868RxConfig+0x17c>)
 8018bae:	5cd3      	ldrb	r3, [r2, r3]
 8018bb0:	75bb      	strb	r3, [r7, #22]
 8018bb2:	e004      	b.n	8018bbe <RegionEU868RxConfig+0x14a>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8018bf4 <RegionEU868RxConfig+0x180>)
 8018bba:	5cd3      	ldrb	r3, [r2, r3]
 8018bbc:	75bb      	strb	r3, [r7, #22]
	}

	Radio.SetMaxPayloadLength(modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 8018bbe:	4b08      	ldr	r3, [pc, #32]	@ (8018be0 <RegionEU868RxConfig+0x16c>)
 8018bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018bc2:	7dba      	ldrb	r2, [r7, #22]
 8018bc4:	320d      	adds	r2, #13
 8018bc6:	b2d1      	uxtb	r1, r2
 8018bc8:	7dfa      	ldrb	r2, [r7, #23]
 8018bca:	4610      	mov	r0, r2
 8018bcc:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 8018bce:	683b      	ldr	r3, [r7, #0]
 8018bd0:	7bfa      	ldrb	r2, [r7, #15]
 8018bd2:	701a      	strb	r2, [r3, #0]
	return true;
 8018bd4:	2301      	movs	r3, #1
}
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	371c      	adds	r7, #28
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd90      	pop	{r4, r7, pc}
 8018bde:	bf00      	nop
 8018be0:	08025450 	.word	0x08025450
 8018be4:	200077ac 	.word	0x200077ac
 8018be8:	080252ec 	.word	0x080252ec
 8018bec:	00014585 	.word	0x00014585
 8018bf0:	0802531c 	.word	0x0802531c
 8018bf4:	08025314 	.word	0x08025314

08018bf8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 8018bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bfa:	b093      	sub	sp, #76	@ 0x4c
 8018bfc:	af0a      	add	r7, sp, #40	@ 0x28
 8018bfe:	60f8      	str	r0, [r7, #12]
 8018c00:	60b9      	str	r1, [r7, #8]
 8018c02:	607a      	str	r2, [r7, #4]
	RadioModems_t modem;
	int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c0a:	461a      	mov	r2, r3
 8018c0c:	4b56      	ldr	r3, [pc, #344]	@ (8018d68 <RegionEU868TxConfig+0x170>)
 8018c0e:	5c9b      	ldrb	r3, [r3, r2]
 8018c10:	77bb      	strb	r3, [r7, #30]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	781b      	ldrb	r3, [r3, #0]
 8018c1c:	4619      	mov	r1, r3
 8018c1e:	4a53      	ldr	r2, [pc, #332]	@ (8018d6c <RegionEU868TxConfig+0x174>)
 8018c20:	460b      	mov	r3, r1
 8018c22:	005b      	lsls	r3, r3, #1
 8018c24:	440b      	add	r3, r1
 8018c26:	009b      	lsls	r3, r3, #2
 8018c28:	4413      	add	r3, r2
 8018c2a:	3309      	adds	r3, #9
 8018c2c:	781b      	ldrb	r3, [r3, #0]
 8018c2e:	4a50      	ldr	r2, [pc, #320]	@ (8018d70 <RegionEU868TxConfig+0x178>)
 8018c30:	015b      	lsls	r3, r3, #5
 8018c32:	4413      	add	r3, r2
 8018c34:	3302      	adds	r3, #2
 8018c36:	f993 1000 	ldrsb.w	r1, [r3]
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018c40:	4b4c      	ldr	r3, [pc, #304]	@ (8018d74 <RegionEU868TxConfig+0x17c>)
 8018c42:	f7ff fabd 	bl	80181c0 <LimitTxPower>
 8018c46:	4603      	mov	r3, r0
 8018c48:	777b      	strb	r3, [r7, #29]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7ff fa95 	bl	8018180 <GetBandwidth>
 8018c56:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 8018c58:	2300      	movs	r3, #0
 8018c5a:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	ed93 7a02 	vldr	s14, [r3, #8]
 8018c68:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018c6c:	eef0 0a47 	vmov.f32	s1, s14
 8018c70:	eeb0 0a67 	vmov.f32	s0, s15
 8018c74:	4618      	mov	r0, r3
 8018c76:	f7fd ff2d 	bl	8016ad4 <RegionCommonComputeTxPower>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 8018c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8018d78 <RegionEU868TxConfig+0x180>)
 8018c80:	691a      	ldr	r2, [r3, #16]
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	4618      	mov	r0, r3
 8018c88:	4938      	ldr	r1, [pc, #224]	@ (8018d6c <RegionEU868TxConfig+0x174>)
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	005b      	lsls	r3, r3, #1
 8018c8e:	4403      	add	r3, r0
 8018c90:	009b      	lsls	r3, r3, #2
 8018c92:	440b      	add	r3, r1
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4618      	mov	r0, r3
 8018c98:	4790      	blx	r2

	if (txConfig->Datarate == DR_7)
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ca0:	2b07      	cmp	r3, #7
 8018ca2:	d124      	bne.n	8018cee <RegionEU868TxConfig+0xf6>
	{ // High Speed FSK channel
		modem = MODEM_FSK;
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000);
 8018ca8:	4b33      	ldr	r3, [pc, #204]	@ (8018d78 <RegionEU868TxConfig+0x180>)
 8018caa:	6a1e      	ldr	r6, [r3, #32]
 8018cac:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018cb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018cb4:	fb02 f303 	mul.w	r3, r2, r3
 8018cb8:	461a      	mov	r2, r3
 8018cba:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018cbe:	7ff8      	ldrb	r0, [r7, #31]
 8018cc0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018cc4:	9308      	str	r3, [sp, #32]
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	9307      	str	r3, [sp, #28]
 8018cca:	2300      	movs	r3, #0
 8018ccc:	9306      	str	r3, [sp, #24]
 8018cce:	2300      	movs	r3, #0
 8018cd0:	9305      	str	r3, [sp, #20]
 8018cd2:	2301      	movs	r3, #1
 8018cd4:	9304      	str	r3, [sp, #16]
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	9303      	str	r3, [sp, #12]
 8018cda:	2305      	movs	r3, #5
 8018cdc:	9302      	str	r3, [sp, #8]
 8018cde:	2300      	movs	r3, #0
 8018ce0:	9301      	str	r3, [sp, #4]
 8018ce2:	9200      	str	r2, [sp, #0]
 8018ce4:	69bb      	ldr	r3, [r7, #24]
 8018ce6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8018cea:	47b0      	blx	r6
 8018cec:	e01d      	b.n	8018d2a <RegionEU868TxConfig+0x132>
	}
	else
	{
		modem = MODEM_LORA;
 8018cee:	2301      	movs	r3, #1
 8018cf0:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 8018cf2:	4b21      	ldr	r3, [pc, #132]	@ (8018d78 <RegionEU868TxConfig+0x180>)
 8018cf4:	6a1e      	ldr	r6, [r3, #32]
 8018cf6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018cfa:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018cfe:	7ff8      	ldrb	r0, [r7, #31]
 8018d00:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8018d04:	9208      	str	r2, [sp, #32]
 8018d06:	2200      	movs	r2, #0
 8018d08:	9207      	str	r2, [sp, #28]
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	9206      	str	r2, [sp, #24]
 8018d0e:	2200      	movs	r2, #0
 8018d10:	9205      	str	r2, [sp, #20]
 8018d12:	2201      	movs	r2, #1
 8018d14:	9204      	str	r2, [sp, #16]
 8018d16:	2200      	movs	r2, #0
 8018d18:	9203      	str	r2, [sp, #12]
 8018d1a:	2208      	movs	r2, #8
 8018d1c:	9202      	str	r2, [sp, #8]
 8018d1e:	2201      	movs	r2, #1
 8018d20:	9201      	str	r2, [sp, #4]
 8018d22:	9300      	str	r3, [sp, #0]
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	2200      	movs	r2, #0
 8018d28:	47b0      	blx	r6
	}

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(modem, txConfig->PktLen);
 8018d2a:	4b13      	ldr	r3, [pc, #76]	@ (8018d78 <RegionEU868TxConfig+0x180>)
 8018d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018d2e:	68fa      	ldr	r2, [r7, #12]
 8018d30:	8992      	ldrh	r2, [r2, #12]
 8018d32:	b2d1      	uxtb	r1, r2
 8018d34:	7ffa      	ldrb	r2, [r7, #31]
 8018d36:	4610      	mov	r0, r2
 8018d38:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(modem, txConfig->PktLen);
 8018d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8018d78 <RegionEU868TxConfig+0x180>)
 8018d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d3e:	68fa      	ldr	r2, [r7, #12]
 8018d40:	8992      	ldrh	r2, [r2, #12]
 8018d42:	b2d1      	uxtb	r1, r2
 8018d44:	7ffa      	ldrb	r2, [r7, #31]
 8018d46:	4610      	mov	r0, r2
 8018d48:	4798      	blx	r3
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	2200      	movs	r2, #0
 8018d4e:	461c      	mov	r4, r3
 8018d50:	4615      	mov	r5, r2
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	e9c3 4500 	strd	r4, r5, [r3]

	*txPower = txPowerLimited;
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	7f7a      	ldrb	r2, [r7, #29]
 8018d5c:	701a      	strb	r2, [r3, #0]
	return true;
 8018d5e:	2301      	movs	r3, #1
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3724      	adds	r7, #36	@ 0x24
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d68:	080252ec 	.word	0x080252ec
 8018d6c:	200077ac 	.word	0x200077ac
 8018d70:	20000170 	.word	0x20000170
 8018d74:	20006c9c 	.word	0x20006c9c
 8018d78:	08025450 	.word	0x08025450

08018d7c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 8018d7c:	b590      	push	{r4, r7, lr}
 8018d7e:	b093      	sub	sp, #76	@ 0x4c
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	60f8      	str	r0, [r7, #12]
 8018d84:	60b9      	str	r1, [r7, #8]
 8018d86:	607a      	str	r2, [r7, #4]
 8018d88:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 8018d8a:	2307      	movs	r3, #7
 8018d8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 8018d90:	2300      	movs	r3, #0
 8018d92:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t bytesProcessed = 0;
 8018d96:	2300      	movs	r3, #0
 8018d98:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t chMask = 0;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	877b      	strh	r3, [r7, #58]	@ 0x3a
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	while (bytesProcessed < linkAdrReq->PayloadSize)
 8018da0:	e083      	b.n	8018eaa <RegionEU868LinkAdrReq+0x12e>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	681a      	ldr	r2, [r3, #0]
 8018da6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8018daa:	4413      	add	r3, r2
 8018dac:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8018db0:	4611      	mov	r1, r2
 8018db2:	4618      	mov	r0, r3
 8018db4:	f7fd fcde 	bl	8016774 <RegionCommonParseLinkAdrReq>
 8018db8:	4603      	mov	r3, r0
 8018dba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		if (nextIndex == 0)
 8018dbe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d079      	beq.n	8018eba <RegionEU868LinkAdrReq+0x13e>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 8018dc6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018dca:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8018dce:	4413      	add	r3, r2
 8018dd0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 8018dd4:	2307      	movs	r3, #7
 8018dd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		// Setup temporary channels mask
		chMask = linkAdrParams.ChMask;
 8018dda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018dde:	877b      	strh	r3, [r7, #58]	@ 0x3a

		// Verify channels mask
		if ((linkAdrParams.ChMaskCtrl == 0) && (chMask == 0))
 8018de0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d109      	bne.n	8018dfc <RegionEU868LinkAdrReq+0x80>
 8018de8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d106      	bne.n	8018dfc <RegionEU868LinkAdrReq+0x80>
		{
			status &= 0xFE; // Channel mask KO
 8018dee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018df2:	f023 0301 	bic.w	r3, r3, #1
 8018df6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018dfa:	e056      	b.n	8018eaa <RegionEU868LinkAdrReq+0x12e>
		}
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 8018dfc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d003      	beq.n	8018e0c <RegionEU868LinkAdrReq+0x90>
 8018e04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018e08:	2b05      	cmp	r3, #5
 8018e0a:	d903      	bls.n	8018e14 <RegionEU868LinkAdrReq+0x98>
				 (linkAdrParams.ChMaskCtrl >= 7))
 8018e0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 8018e10:	2b06      	cmp	r3, #6
 8018e12:	d906      	bls.n	8018e22 <RegionEU868LinkAdrReq+0xa6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 8018e14:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018e18:	f023 0301 	bic.w	r3, r3, #1
 8018e1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8018e20:	e043      	b.n	8018eaa <RegionEU868LinkAdrReq+0x12e>
		}
		else
		{
			for (uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++)
 8018e22:	2300      	movs	r3, #0
 8018e24:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8018e28:	e03b      	b.n	8018ea2 <RegionEU868LinkAdrReq+0x126>
			{
				if (linkAdrParams.ChMaskCtrl == 6)
 8018e2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018e2e:	2b06      	cmp	r3, #6
 8018e30:	d117      	bne.n	8018e62 <RegionEU868LinkAdrReq+0xe6>
				{
					if (Channels[i].Frequency != 0)
 8018e32:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8018e36:	4959      	ldr	r1, [pc, #356]	@ (8018f9c <RegionEU868LinkAdrReq+0x220>)
 8018e38:	4613      	mov	r3, r2
 8018e3a:	005b      	lsls	r3, r3, #1
 8018e3c:	4413      	add	r3, r2
 8018e3e:	009b      	lsls	r3, r3, #2
 8018e40:	440b      	add	r3, r1
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d027      	beq.n	8018e98 <RegionEU868LinkAdrReq+0x11c>
					{
						chMask |= 1 << i;
 8018e48:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018e4c:	2201      	movs	r2, #1
 8018e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8018e52:	b21a      	sxth	r2, r3
 8018e54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018e56:	b21b      	sxth	r3, r3
 8018e58:	4313      	orrs	r3, r2
 8018e5a:	b21b      	sxth	r3, r3
 8018e5c:	b29b      	uxth	r3, r3
 8018e5e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8018e60:	e01a      	b.n	8018e98 <RegionEU868LinkAdrReq+0x11c>
					}
				}
				else
				{
					if (((chMask & (1 << i)) != 0) &&
 8018e62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018e64:	461a      	mov	r2, r3
 8018e66:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018e6a:	fa42 f303 	asr.w	r3, r2, r3
 8018e6e:	f003 0301 	and.w	r3, r3, #1
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d010      	beq.n	8018e98 <RegionEU868LinkAdrReq+0x11c>
						(Channels[i].Frequency == 0))
 8018e76:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8018e7a:	4948      	ldr	r1, [pc, #288]	@ (8018f9c <RegionEU868LinkAdrReq+0x220>)
 8018e7c:	4613      	mov	r3, r2
 8018e7e:	005b      	lsls	r3, r3, #1
 8018e80:	4413      	add	r3, r2
 8018e82:	009b      	lsls	r3, r3, #2
 8018e84:	440b      	add	r3, r1
 8018e86:	681b      	ldr	r3, [r3, #0]
					if (((chMask & (1 << i)) != 0) &&
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d105      	bne.n	8018e98 <RegionEU868LinkAdrReq+0x11c>
					{					// Trying to enable an undefined channel
						status &= 0xFE; // Channel mask KO
 8018e8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018e90:	f023 0301 	bic.w	r3, r3, #1
 8018e94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			for (uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++)
 8018e98:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018e9c:	3301      	adds	r3, #1
 8018e9e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8018ea2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8018ea6:	2b0f      	cmp	r3, #15
 8018ea8:	d9bf      	bls.n	8018e2a <RegionEU868LinkAdrReq+0xae>
	while (bytesProcessed < linkAdrReq->PayloadSize)
 8018eaa:	68fb      	ldr	r3, [r7, #12]
 8018eac:	791b      	ldrb	r3, [r3, #4]
 8018eae:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	f4ff af75 	bcc.w	8018da2 <RegionEU868LinkAdrReq+0x26>
 8018eb8:	e000      	b.n	8018ebc <RegionEU868LinkAdrReq+0x140>
			break; // break loop, since no more request has been found
 8018eba:	bf00      	nop
			}
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	795b      	ldrb	r3, [r3, #5]
 8018ec6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionEU868GetPhyParam(&getPhy);
 8018eca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7ff faae 	bl	8018430 <RegionEU868GetPhyParam>
 8018ed4:	4603      	mov	r3, r0
 8018ed6:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 8018ed8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018edc:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	799b      	ldrb	r3, [r3, #6]
 8018ee2:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018ee4:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8018ee8:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018eea:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8018eee:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018ef0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8018ef4:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8018efc:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018f04:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	7a5b      	ldrb	r3, [r3, #9]
 8018f0a:	b25b      	sxtb	r3, r3
 8018f0c:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018f0e:	2310      	movs	r3, #16
 8018f10:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = &chMask;
 8018f12:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8018f16:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 8018f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f1a:	b25b      	sxtb	r3, r3
 8018f1c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018f20:	2307      	movs	r3, #7
 8018f22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 8018f26:	4b1d      	ldr	r3, [pc, #116]	@ (8018f9c <RegionEU868LinkAdrReq+0x220>)
 8018f28:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018f2a:	2307      	movs	r3, #7
 8018f2c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018f30:	2300      	movs	r3, #0
 8018f32:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 8018f36:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8018f3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f3e:	1c9a      	adds	r2, r3, #2
 8018f40:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8018f44:	1c59      	adds	r1, r3, #1
 8018f46:	f107 0014 	add.w	r0, r7, #20
 8018f4a:	4623      	mov	r3, r4
 8018f4c:	f7fd fc64 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 8018f50:	4603      	mov	r3, r0
 8018f52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	// Update channelsMask if everything is correct
	if (status == 0x07)
 8018f56:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018f5a:	2b07      	cmp	r3, #7
 8018f5c:	d107      	bne.n	8018f6e <RegionEU868LinkAdrReq+0x1f2>
	{
		// Set the channels mask to a default value
		memset(ChannelsMask, 0, sizeof(ChannelsMask));
 8018f5e:	220c      	movs	r2, #12
 8018f60:	2100      	movs	r1, #0
 8018f62:	480f      	ldr	r0, [pc, #60]	@ (8018fa0 <RegionEU868LinkAdrReq+0x224>)
 8018f64:	f009 f972 	bl	802224c <memset>
		// Update the channels mask
		ChannelsMask[0] = chMask;
 8018f68:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8018fa0 <RegionEU868LinkAdrReq+0x224>)
 8018f6c:	801a      	strh	r2, [r3, #0]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 8018f6e:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 8018f76:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 8018f7e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018f82:	683b      	ldr	r3, [r7, #0]
 8018f84:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 8018f86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018f88:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8018f8c:	701a      	strb	r2, [r3, #0]

	return status;
 8018f8e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8018f92:	4618      	mov	r0, r3
 8018f94:	374c      	adds	r7, #76	@ 0x4c
 8018f96:	46bd      	mov	sp, r7
 8018f98:	bd90      	pop	{r4, r7, pc}
 8018f9a:	bf00      	nop
 8018f9c:	200077ac 	.word	0x200077ac
 8018fa0:	20006c9c 	.word	0x20006c9c

08018fa4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b084      	sub	sp, #16
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 8018fac:	2307      	movs	r3, #7
 8018fae:	73fb      	strb	r3, [r7, #15]

	// Verify radio frequency
	if (Radio.CheckRfFrequency(rxParamSetupReq->Frequency) == false)
 8018fb0:	4b19      	ldr	r3, [pc, #100]	@ (8019018 <RegionEU868RxParamSetupReq+0x74>)
 8018fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	6852      	ldr	r2, [r2, #4]
 8018fb8:	4610      	mov	r0, r2
 8018fba:	4798      	blx	r3
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	f083 0301 	eor.w	r3, r3, #1
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d003      	beq.n	8018fd0 <RegionEU868RxParamSetupReq+0x2c>
	{
		status &= 0xFE; // Channel frequency KO
 8018fc8:	7bfb      	ldrb	r3, [r7, #15]
 8018fca:	f023 0301 	bic.w	r3, r3, #1
 8018fce:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE) == false)
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8018fd6:	2207      	movs	r2, #7
 8018fd8:	2100      	movs	r1, #0
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7fd f9c4 	bl	8016368 <RegionCommonValueInRange>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d103      	bne.n	8018fee <RegionEU868RxParamSetupReq+0x4a>
	{
		status &= 0xFD; // Datarate KO
 8018fe6:	7bfb      	ldrb	r3, [r7, #15]
 8018fe8:	f023 0302 	bic.w	r3, r3, #2
 8018fec:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET) == false)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ff4:	2205      	movs	r2, #5
 8018ff6:	2100      	movs	r1, #0
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f7fd f9b5 	bl	8016368 <RegionCommonValueInRange>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	d103      	bne.n	801900c <RegionEU868RxParamSetupReq+0x68>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 8019004:	7bfb      	ldrb	r3, [r7, #15]
 8019006:	f023 0304 	bic.w	r3, r3, #4
 801900a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 801900c:	7bfb      	ldrb	r3, [r7, #15]
}
 801900e:	4618      	mov	r0, r3
 8019010:	3710      	adds	r7, #16
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}
 8019016:	bf00      	nop
 8019018:	08025450 	.word	0x08025450

0801901c <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b086      	sub	sp, #24
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 8019024:	2303      	movs	r3, #3
 8019026:	75fb      	strb	r3, [r7, #23]
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	if (newChannelReq->NewChannel->Frequency == 0)
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d114      	bne.n	801905c <RegionEU868NewChannelReq+0x40>
	{
		channelRemove.ChannelId = newChannelReq->ChannelId;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019038:	b2db      	uxtb	r3, r3
 801903a:	723b      	strb	r3, [r7, #8]

		// Remove
		if (RegionEU868ChannelsRemove(&channelRemove) == false)
 801903c:	f107 0308 	add.w	r3, r7, #8
 8019040:	4618      	mov	r0, r3
 8019042:	f000 faaf 	bl	80195a4 <RegionEU868ChannelsRemove>
 8019046:	4603      	mov	r3, r0
 8019048:	f083 0301 	eor.w	r3, r3, #1
 801904c:	b2db      	uxtb	r3, r3
 801904e:	2b00      	cmp	r3, #0
 8019050:	d057      	beq.n	8019102 <RegionEU868NewChannelReq+0xe6>
		{
			status &= 0xFC;
 8019052:	7dfb      	ldrb	r3, [r7, #23]
 8019054:	f023 0303 	bic.w	r3, r3, #3
 8019058:	75fb      	strb	r3, [r7, #23]
 801905a:	e052      	b.n	8019102 <RegionEU868NewChannelReq+0xe6>
	else
	{
		// Workaround Chirpstack bug that requests wrong max DR
		LOG_LIB("EU868", "Requested DR was %d", newChannelReq->NewChannel->DrRange.Fields.Max);

		if (newChannelReq->NewChannel->DrRange.Fields.Max < 0)
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	7a1b      	ldrb	r3, [r3, #8]
 8019062:	f343 1303 	sbfx	r3, r3, #4, #4
 8019066:	b25b      	sxtb	r3, r3
 8019068:	2b00      	cmp	r3, #0
 801906a:	da14      	bge.n	8019096 <RegionEU868NewChannelReq+0x7a>
		{
			LOG_LIB("EU868", "Requested DR was %d, changed to %d", newChannelReq->NewChannel->DrRange.Fields.Max, abs(newChannelReq->NewChannel->DrRange.Fields.Max));
			newChannelReq->NewChannel->DrRange.Fields.Max = abs(newChannelReq->NewChannel->DrRange.Fields.Max);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681b      	ldr	r3, [r3, #0]
 8019070:	7a1b      	ldrb	r3, [r3, #8]
 8019072:	f343 1303 	sbfx	r3, r3, #4, #4
 8019076:	b25b      	sxtb	r3, r3
 8019078:	2b00      	cmp	r3, #0
 801907a:	bfb8      	it	lt
 801907c:	425b      	neglt	r3, r3
 801907e:	b2d9      	uxtb	r1, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681a      	ldr	r2, [r3, #0]
 8019084:	460b      	mov	r3, r1
 8019086:	011b      	lsls	r3, r3, #4
 8019088:	b25b      	sxtb	r3, r3
 801908a:	111b      	asrs	r3, r3, #4
 801908c:	b259      	sxtb	r1, r3
 801908e:	7a13      	ldrb	r3, [r2, #8]
 8019090:	f361 1307 	bfi	r3, r1, #4, #4
 8019094:	7213      	strb	r3, [r2, #8]
		}

		channelAdd.NewChannel = newChannelReq->NewChannel;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	60fb      	str	r3, [r7, #12]
		channelAdd.ChannelId = newChannelReq->ChannelId;
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80190a2:	b2db      	uxtb	r3, r3
 80190a4:	743b      	strb	r3, [r7, #16]

		switch (RegionEU868ChannelAdd(&channelAdd))
 80190a6:	f107 030c 	add.w	r3, r7, #12
 80190aa:	4618      	mov	r0, r3
 80190ac:	f000 f9b4 	bl	8019418 <RegionEU868ChannelAdd>
 80190b0:	4603      	mov	r3, r0
 80190b2:	2b06      	cmp	r3, #6
 80190b4:	d81f      	bhi.n	80190f6 <RegionEU868NewChannelReq+0xda>
 80190b6:	a201      	add	r2, pc, #4	@ (adr r2, 80190bc <RegionEU868NewChannelReq+0xa0>)
 80190b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190bc:	08019101 	.word	0x08019101
 80190c0:	080190f7 	.word	0x080190f7
 80190c4:	080190f7 	.word	0x080190f7
 80190c8:	080190f7 	.word	0x080190f7
 80190cc:	080190d9 	.word	0x080190d9
 80190d0:	080190e3 	.word	0x080190e3
 80190d4:	080190ed 	.word	0x080190ed
			break;
		}
		case LORAMAC_STATUS_FREQUENCY_INVALID:
		{
			LOG_LIB("EU868", "New Channel Request frequency invalid");
			status &= 0xFE;
 80190d8:	7dfb      	ldrb	r3, [r7, #23]
 80190da:	f023 0301 	bic.w	r3, r3, #1
 80190de:	75fb      	strb	r3, [r7, #23]
			break;
 80190e0:	e00f      	b.n	8019102 <RegionEU868NewChannelReq+0xe6>
		}
		case LORAMAC_STATUS_DATARATE_INVALID:
		{
			LOG_LIB("EU868", "New Channel Request DR invalid");
			status &= 0xFD;
 80190e2:	7dfb      	ldrb	r3, [r7, #23]
 80190e4:	f023 0302 	bic.w	r3, r3, #2
 80190e8:	75fb      	strb	r3, [r7, #23]
			break;
 80190ea:	e00a      	b.n	8019102 <RegionEU868NewChannelReq+0xe6>
		}
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		{
			LOG_LIB("EU868", "New Channel Request frequency & DR invalid");
			status &= 0xFC;
 80190ec:	7dfb      	ldrb	r3, [r7, #23]
 80190ee:	f023 0303 	bic.w	r3, r3, #3
 80190f2:	75fb      	strb	r3, [r7, #23]
			break;
 80190f4:	e005      	b.n	8019102 <RegionEU868NewChannelReq+0xe6>
		}
		default:
		{
			LOG_LIB("EU868", "New Channel Request unknown failure");
			status &= 0xFC;
 80190f6:	7dfb      	ldrb	r3, [r7, #23]
 80190f8:	f023 0303 	bic.w	r3, r3, #3
 80190fc:	75fb      	strb	r3, [r7, #23]
			break;
 80190fe:	e000      	b.n	8019102 <RegionEU868NewChannelReq+0xe6>
			break;
 8019100:	bf00      	nop
		}
		}
	}

	return status;
 8019102:	7dfb      	ldrb	r3, [r7, #23]
}
 8019104:	4618      	mov	r0, r3
 8019106:	3718      	adds	r7, #24
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 801910c:	b480      	push	{r7}
 801910e:	b083      	sub	sp, #12
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
	return -1;
 8019114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019118:	4618      	mov	r0, r3
 801911a:	370c      	adds	r7, #12
 801911c:	46bd      	mov	sp, r7
 801911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019122:	4770      	bx	lr

08019124 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b084      	sub	sp, #16
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 801912c:	2303      	movs	r3, #3
 801912e:	73fb      	strb	r3, [r7, #15]
	uint8_t band = 0;
 8019130:	2300      	movs	r3, #0
 8019132:	73bb      	strb	r3, [r7, #14]

	// Verify if the frequency is supported
	if (VerifyTxFreq(dlChannelReq->Rx1Frequency, &band) == false)
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	685b      	ldr	r3, [r3, #4]
 8019138:	f107 020e 	add.w	r2, r7, #14
 801913c:	4611      	mov	r1, r2
 801913e:	4618      	mov	r0, r3
 8019140:	f7ff f85a 	bl	80181f8 <VerifyTxFreq>
 8019144:	4603      	mov	r3, r0
 8019146:	f083 0301 	eor.w	r3, r3, #1
 801914a:	b2db      	uxtb	r3, r3
 801914c:	2b00      	cmp	r3, #0
 801914e:	d003      	beq.n	8019158 <RegionEU868DlChannelReq+0x34>
	{
		status &= 0xFE;
 8019150:	7bfb      	ldrb	r3, [r7, #15]
 8019152:	f023 0301 	bic.w	r3, r3, #1
 8019156:	73fb      	strb	r3, [r7, #15]
	}

	// Verify if an uplink frequency exists
	if (Channels[dlChannelReq->ChannelId].Frequency == 0)
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	781b      	ldrb	r3, [r3, #0]
 801915c:	4619      	mov	r1, r3
 801915e:	4a11      	ldr	r2, [pc, #68]	@ (80191a4 <RegionEU868DlChannelReq+0x80>)
 8019160:	460b      	mov	r3, r1
 8019162:	005b      	lsls	r3, r3, #1
 8019164:	440b      	add	r3, r1
 8019166:	009b      	lsls	r3, r3, #2
 8019168:	4413      	add	r3, r2
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d103      	bne.n	8019178 <RegionEU868DlChannelReq+0x54>
	{
		status &= 0xFD;
 8019170:	7bfb      	ldrb	r3, [r7, #15]
 8019172:	f023 0302 	bic.w	r3, r3, #2
 8019176:	73fb      	strb	r3, [r7, #15]
	}

	// Apply Rx1 frequency, if the status is OK
	if (status == 0x03)
 8019178:	7bfb      	ldrb	r3, [r7, #15]
 801917a:	2b03      	cmp	r3, #3
 801917c:	d10c      	bne.n	8019198 <RegionEU868DlChannelReq+0x74>
	{
		Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	4618      	mov	r0, r3
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	685a      	ldr	r2, [r3, #4]
 8019188:	4906      	ldr	r1, [pc, #24]	@ (80191a4 <RegionEU868DlChannelReq+0x80>)
 801918a:	4603      	mov	r3, r0
 801918c:	005b      	lsls	r3, r3, #1
 801918e:	4403      	add	r3, r0
 8019190:	009b      	lsls	r3, r3, #2
 8019192:	440b      	add	r3, r1
 8019194:	3304      	adds	r3, #4
 8019196:	601a      	str	r2, [r3, #0]
	}

	return status;
 8019198:	7bfb      	ldrb	r3, [r7, #15]
}
 801919a:	4618      	mov	r0, r3
 801919c:	3710      	adds	r7, #16
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd80      	pop	{r7, pc}
 80191a2:	bf00      	nop
 80191a4:	200077ac 	.word	0x200077ac

080191a8 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr(AlternateDrParams_t *alternateDr)
{
 80191a8:	b480      	push	{r7}
 80191aa:	b085      	sub	sp, #20
 80191ac:	af00      	add	r7, sp, #0
 80191ae:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 80191b0:	2300      	movs	r3, #0
 80191b2:	73fb      	strb	r3, [r7, #15]

	if ((alternateDr->NbTrials % 48) == 0)
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	881a      	ldrh	r2, [r3, #0]
 80191b8:	4b23      	ldr	r3, [pc, #140]	@ (8019248 <RegionEU868AlternateDr+0xa0>)
 80191ba:	fba3 1302 	umull	r1, r3, r3, r2
 80191be:	0959      	lsrs	r1, r3, #5
 80191c0:	460b      	mov	r3, r1
 80191c2:	005b      	lsls	r3, r3, #1
 80191c4:	440b      	add	r3, r1
 80191c6:	011b      	lsls	r3, r3, #4
 80191c8:	1ad3      	subs	r3, r2, r3
 80191ca:	b29b      	uxth	r3, r3
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d102      	bne.n	80191d6 <RegionEU868AlternateDr+0x2e>
	{
		datarate = DR_0;
 80191d0:	2300      	movs	r3, #0
 80191d2:	73fb      	strb	r3, [r7, #15]
 80191d4:	e030      	b.n	8019238 <RegionEU868AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 32) == 0)
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	881b      	ldrh	r3, [r3, #0]
 80191da:	f003 031f 	and.w	r3, r3, #31
 80191de:	b29b      	uxth	r3, r3
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d102      	bne.n	80191ea <RegionEU868AlternateDr+0x42>
	{
		datarate = DR_1;
 80191e4:	2301      	movs	r3, #1
 80191e6:	73fb      	strb	r3, [r7, #15]
 80191e8:	e026      	b.n	8019238 <RegionEU868AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 24) == 0)
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	881a      	ldrh	r2, [r3, #0]
 80191ee:	4b16      	ldr	r3, [pc, #88]	@ (8019248 <RegionEU868AlternateDr+0xa0>)
 80191f0:	fba3 1302 	umull	r1, r3, r3, r2
 80191f4:	0919      	lsrs	r1, r3, #4
 80191f6:	460b      	mov	r3, r1
 80191f8:	005b      	lsls	r3, r3, #1
 80191fa:	440b      	add	r3, r1
 80191fc:	00db      	lsls	r3, r3, #3
 80191fe:	1ad3      	subs	r3, r2, r3
 8019200:	b29b      	uxth	r3, r3
 8019202:	2b00      	cmp	r3, #0
 8019204:	d102      	bne.n	801920c <RegionEU868AlternateDr+0x64>
	{
		datarate = DR_2;
 8019206:	2302      	movs	r3, #2
 8019208:	73fb      	strb	r3, [r7, #15]
 801920a:	e015      	b.n	8019238 <RegionEU868AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 16) == 0)
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	881b      	ldrh	r3, [r3, #0]
 8019210:	f003 030f 	and.w	r3, r3, #15
 8019214:	b29b      	uxth	r3, r3
 8019216:	2b00      	cmp	r3, #0
 8019218:	d102      	bne.n	8019220 <RegionEU868AlternateDr+0x78>
	{
		datarate = DR_3;
 801921a:	2303      	movs	r3, #3
 801921c:	73fb      	strb	r3, [r7, #15]
 801921e:	e00b      	b.n	8019238 <RegionEU868AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 8) == 0)
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	881b      	ldrh	r3, [r3, #0]
 8019224:	f003 0307 	and.w	r3, r3, #7
 8019228:	b29b      	uxth	r3, r3
 801922a:	2b00      	cmp	r3, #0
 801922c:	d102      	bne.n	8019234 <RegionEU868AlternateDr+0x8c>
	{
		datarate = DR_4;
 801922e:	2304      	movs	r3, #4
 8019230:	73fb      	strb	r3, [r7, #15]
 8019232:	e001      	b.n	8019238 <RegionEU868AlternateDr+0x90>
	}
	else
	{
		datarate = DR_5;
 8019234:	2305      	movs	r3, #5
 8019236:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 8019238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801923c:	4618      	mov	r0, r3
 801923e:	3714      	adds	r7, #20
 8019240:	46bd      	mov	sp, r7
 8019242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019246:	4770      	bx	lr
 8019248:	aaaaaaab 	.word	0xaaaaaaab

0801924c <RegionEU868CalcBackOff>:

void RegionEU868CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b08a      	sub	sp, #40	@ 0x28
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 8019254:	4b11      	ldr	r3, [pc, #68]	@ (801929c <RegionEU868CalcBackOff+0x50>)
 8019256:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 8019258:	4b11      	ldr	r3, [pc, #68]	@ (80192a0 <RegionEU868CalcBackOff+0x54>)
 801925a:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	785b      	ldrb	r3, [r3, #1]
 8019260:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	781b      	ldrb	r3, [r3, #0]
 8019266:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	789b      	ldrb	r3, [r3, #2]
 801926c:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	78db      	ldrb	r3, [r3, #3]
 8019272:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801927a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8019284:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 8019288:	f107 0308 	add.w	r3, r7, #8
 801928c:	4618      	mov	r0, r3
 801928e:	f7fd fc53 	bl	8016b38 <RegionCommonCalcBackOff>
}
 8019292:	bf00      	nop
 8019294:	3728      	adds	r7, #40	@ 0x28
 8019296:	46bd      	mov	sp, r7
 8019298:	bd80      	pop	{r7, pc}
 801929a:	bf00      	nop
 801929c:	200077ac 	.word	0x200077ac
 80192a0:	20000170 	.word	0x20000170

080192a4 <RegionEU868NextChannel>:

bool RegionEU868NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 80192a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80192a8:	b092      	sub	sp, #72	@ 0x48
 80192aa:	af04      	add	r7, sp, #16
 80192ac:	60f8      	str	r0, [r7, #12]
 80192ae:	60b9      	str	r1, [r7, #8]
 80192b0:	607a      	str	r2, [r7, #4]
 80192b2:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 80192b4:	2300      	movs	r3, #0
 80192b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t delayTx = 0;
 80192ba:	2300      	movs	r3, #0
 80192bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = {0};
 80192c0:	2300      	movs	r3, #0
 80192c2:	617b      	str	r3, [r7, #20]
 80192c4:	f107 0318 	add.w	r3, r7, #24
 80192c8:	2200      	movs	r2, #0
 80192ca:	601a      	str	r2, [r3, #0]
 80192cc:	605a      	str	r2, [r3, #4]
 80192ce:	609a      	str	r2, [r3, #8]
	TimerTime_t nextTxDelay = 0;
 80192d0:	f04f 0200 	mov.w	r2, #0
 80192d4:	f04f 0300 	mov.w	r3, #0
 80192d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if (RegionCommonCountChannels(ChannelsMask, 0, 1) == 0)
 80192dc:	2201      	movs	r2, #1
 80192de:	2100      	movs	r1, #0
 80192e0:	484a      	ldr	r0, [pc, #296]	@ (801940c <RegionEU868NextChannel+0x168>)
 80192e2:	f7fd f894 	bl	801640e <RegionCommonCountChannels>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d106      	bne.n	80192fa <RegionEU868NextChannel+0x56>
	{ // Reactivate default channels
		ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 80192ec:	4b47      	ldr	r3, [pc, #284]	@ (801940c <RegionEU868NextChannel+0x168>)
 80192ee:	881b      	ldrh	r3, [r3, #0]
 80192f0:	f043 0307 	orr.w	r3, r3, #7
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	4b45      	ldr	r3, [pc, #276]	@ (801940c <RegionEU868NextChannel+0x168>)
 80192f8:	801a      	strh	r2, [r3, #0]
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019306:	4610      	mov	r0, r2
 8019308:	4619      	mov	r1, r3
 801930a:	f007 fea7 	bl	802105c <util_timer_get_elapsedtime>
 801930e:	4602      	mov	r2, r0
 8019310:	460b      	mov	r3, r1
 8019312:	42a2      	cmp	r2, r4
 8019314:	41ab      	sbcs	r3, r5
 8019316:	d326      	bcc.n	8019366 <RegionEU868NextChannel+0xc2>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 8019318:	6839      	ldr	r1, [r7, #0]
 801931a:	f04f 0200 	mov.w	r2, #0
 801931e:	f04f 0300 	mov.w	r3, #0
 8019322:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, EU868_MAX_NB_BANDS);
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	7c58      	ldrb	r0, [r3, #17]
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	7c99      	ldrb	r1, [r3, #18]
 801932e:	2305      	movs	r3, #5
 8019330:	4a37      	ldr	r2, [pc, #220]	@ (8019410 <RegionEU868NextChannel+0x16c>)
 8019332:	f7fd f8e0 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 8019336:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Joined, nextChanParams->Datarate,
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	7c58      	ldrb	r0, [r3, #17]
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8019344:	b2d9      	uxtb	r1, r3
 8019346:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 801934a:	9302      	str	r3, [sp, #8]
 801934c:	f107 0314 	add.w	r3, r7, #20
 8019350:	9301      	str	r3, [sp, #4]
 8019352:	4b2f      	ldr	r3, [pc, #188]	@ (8019410 <RegionEU868NextChannel+0x16c>)
 8019354:	9300      	str	r3, [sp, #0]
 8019356:	4b2f      	ldr	r3, [pc, #188]	@ (8019414 <RegionEU868NextChannel+0x170>)
 8019358:	4a2c      	ldr	r2, [pc, #176]	@ (801940c <RegionEU868NextChannel+0x168>)
 801935a:	f7fe ffc3 	bl	80182e4 <CountNbOfEnabledChannels>
 801935e:	4603      	mov	r3, r0
 8019360:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8019364:	e017      	b.n	8019396 <RegionEU868NextChannel+0xf2>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 8019366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801936a:	3301      	adds	r3, #1
 801936c:	b2db      	uxtb	r3, r3
 801936e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	e9d3 4500 	ldrd	r4, r5, [r3]
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801937e:	4610      	mov	r0, r2
 8019380:	4619      	mov	r1, r3
 8019382:	f007 fe6b 	bl	802105c <util_timer_get_elapsedtime>
 8019386:	4602      	mov	r2, r0
 8019388:	460b      	mov	r3, r1
 801938a:	ebb4 0802 	subs.w	r8, r4, r2
 801938e:	eb65 0903 	sbc.w	r9, r5, r3
 8019392:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}

	if (nbEnabledChannels > 0)
 8019396:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801939a:	2b00      	cmp	r3, #0
 801939c:	d016      	beq.n	80193cc <RegionEU868NextChannel+0x128>
	{
		// We found a valid channel
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 801939e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80193a2:	3b01      	subs	r3, #1
 80193a4:	4619      	mov	r1, r3
 80193a6:	2000      	movs	r0, #0
 80193a8:	f007 fbe4 	bl	8020b74 <randr>
 80193ac:	4603      	mov	r3, r0
 80193ae:	3338      	adds	r3, #56	@ 0x38
 80193b0:	443b      	add	r3, r7
 80193b2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	701a      	strb	r2, [r3, #0]
		LOG_LIB("EU868", "Using channel %d, frequency %ld", channel[0], Channels[channel[0]].Frequency);
		*time = 0;
 80193ba:	6879      	ldr	r1, [r7, #4]
 80193bc:	f04f 0200 	mov.w	r2, #0
 80193c0:	f04f 0300 	mov.w	r3, #0
 80193c4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 80193c8:	2301      	movs	r3, #1
 80193ca:	e019      	b.n	8019400 <RegionEU868NextChannel+0x15c>
	}
	else
	{
		if (delayTx > 0)
 80193cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d006      	beq.n	80193e2 <RegionEU868NextChannel+0x13e>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 80193d4:	6879      	ldr	r1, [r7, #4]
 80193d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80193da:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80193de:	2301      	movs	r3, #1
 80193e0:	e00e      	b.n	8019400 <RegionEU868NextChannel+0x15c>
		}
		// Datarate not supported by any channel, restore defaults
		ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 80193e2:	4b0a      	ldr	r3, [pc, #40]	@ (801940c <RegionEU868NextChannel+0x168>)
 80193e4:	881b      	ldrh	r3, [r3, #0]
 80193e6:	f043 0307 	orr.w	r3, r3, #7
 80193ea:	b29a      	uxth	r2, r3
 80193ec:	4b07      	ldr	r3, [pc, #28]	@ (801940c <RegionEU868NextChannel+0x168>)
 80193ee:	801a      	strh	r2, [r3, #0]
		*time = 0;
 80193f0:	6879      	ldr	r1, [r7, #4]
 80193f2:	f04f 0200 	mov.w	r2, #0
 80193f6:	f04f 0300 	mov.w	r3, #0
 80193fa:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 80193fe:	2300      	movs	r3, #0
	}
}
 8019400:	4618      	mov	r0, r3
 8019402:	3738      	adds	r7, #56	@ 0x38
 8019404:	46bd      	mov	sp, r7
 8019406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801940a:	bf00      	nop
 801940c:	20006c9c 	.word	0x20006c9c
 8019410:	20000170 	.word	0x20000170
 8019414:	200077ac 	.word	0x200077ac

08019418 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd(ChannelAddParams_t *channelAdd)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
	uint8_t band = 0;
 8019420:	2300      	movs	r3, #0
 8019422:	733b      	strb	r3, [r7, #12]
	bool drInvalid = false;
 8019424:	2300      	movs	r3, #0
 8019426:	73fb      	strb	r3, [r7, #15]
	bool freqInvalid = false;
 8019428:	2300      	movs	r3, #0
 801942a:	73bb      	strb	r3, [r7, #14]
	uint8_t id = channelAdd->ChannelId;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	791b      	ldrb	r3, [r3, #4]
 8019430:	737b      	strb	r3, [r7, #13]

	if (id >= EU868_MAX_NB_CHANNELS)
 8019432:	7b7b      	ldrb	r3, [r7, #13]
 8019434:	2b0f      	cmp	r3, #15
 8019436:	d901      	bls.n	801943c <RegionEU868ChannelAdd+0x24>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 8019438:	2303      	movs	r3, #3
 801943a:	e0aa      	b.n	8019592 <RegionEU868ChannelAdd+0x17a>
	}

	// Validate the datarate range
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE) == false)
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	7a1b      	ldrb	r3, [r3, #8]
 8019442:	f343 0303 	sbfx	r3, r3, #0, #4
 8019446:	b25b      	sxtb	r3, r3
 8019448:	2207      	movs	r2, #7
 801944a:	2100      	movs	r1, #0
 801944c:	4618      	mov	r0, r3
 801944e:	f7fc ff8b 	bl	8016368 <RegionCommonValueInRange>
 8019452:	4603      	mov	r3, r0
 8019454:	2b00      	cmp	r3, #0
 8019456:	d101      	bne.n	801945c <RegionEU868ChannelAdd+0x44>
	{
		drInvalid = true;
 8019458:	2301      	movs	r3, #1
 801945a:	73fb      	strb	r3, [r7, #15]
	}
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE) == false)
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	7a1b      	ldrb	r3, [r3, #8]
 8019462:	f343 1303 	sbfx	r3, r3, #4, #4
 8019466:	b25b      	sxtb	r3, r3
 8019468:	2207      	movs	r2, #7
 801946a:	2100      	movs	r1, #0
 801946c:	4618      	mov	r0, r3
 801946e:	f7fc ff7b 	bl	8016368 <RegionCommonValueInRange>
 8019472:	4603      	mov	r3, r0
 8019474:	2b00      	cmp	r3, #0
 8019476:	d101      	bne.n	801947c <RegionEU868ChannelAdd+0x64>
	{
		drInvalid = true;
 8019478:	2301      	movs	r3, #1
 801947a:	73fb      	strb	r3, [r7, #15]
	}
	if (channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max)
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	7a1b      	ldrb	r3, [r3, #8]
 8019482:	f343 0303 	sbfx	r3, r3, #0, #4
 8019486:	b25a      	sxtb	r2, r3
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	7a1b      	ldrb	r3, [r3, #8]
 801948e:	f343 1303 	sbfx	r3, r3, #4, #4
 8019492:	b25b      	sxtb	r3, r3
 8019494:	429a      	cmp	r2, r3
 8019496:	dd01      	ble.n	801949c <RegionEU868ChannelAdd+0x84>
	{
		drInvalid = true;
 8019498:	2301      	movs	r3, #1
 801949a:	73fb      	strb	r3, [r7, #15]
	}

	// Default channels don't accept all values
	if (id < EU868_NUMB_DEFAULT_CHANNELS)
 801949c:	7b7b      	ldrb	r3, [r7, #13]
 801949e:	2b02      	cmp	r3, #2
 80194a0:	d828      	bhi.n	80194f4 <RegionEU868ChannelAdd+0xdc>
	{
		// Validate the datarate range for min: must be DR_0
		if (channelAdd->NewChannel->DrRange.Fields.Min > DR_0)
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	7a1b      	ldrb	r3, [r3, #8]
 80194a8:	f343 0303 	sbfx	r3, r3, #0, #4
 80194ac:	b25b      	sxtb	r3, r3
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	dd01      	ble.n	80194b6 <RegionEU868ChannelAdd+0x9e>
		{
			drInvalid = true;
 80194b2:	2301      	movs	r3, #1
 80194b4:	73fb      	strb	r3, [r7, #15]
		}
		// Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
		if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, DR_5, EU868_TX_MAX_DATARATE) == false)
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	7a1b      	ldrb	r3, [r3, #8]
 80194bc:	f343 1303 	sbfx	r3, r3, #4, #4
 80194c0:	b25b      	sxtb	r3, r3
 80194c2:	2207      	movs	r2, #7
 80194c4:	2105      	movs	r1, #5
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7fc ff4e 	bl	8016368 <RegionCommonValueInRange>
 80194cc:	4603      	mov	r3, r0
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d101      	bne.n	80194d6 <RegionEU868ChannelAdd+0xbe>
		{
			drInvalid = true;
 80194d2:	2301      	movs	r3, #1
 80194d4:	73fb      	strb	r3, [r7, #15]
		}
		// We are not allowed to change the frequency
		if (channelAdd->NewChannel->Frequency != Channels[id].Frequency)
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	6819      	ldr	r1, [r3, #0]
 80194dc:	7b7a      	ldrb	r2, [r7, #13]
 80194de:	482f      	ldr	r0, [pc, #188]	@ (801959c <RegionEU868ChannelAdd+0x184>)
 80194e0:	4613      	mov	r3, r2
 80194e2:	005b      	lsls	r3, r3, #1
 80194e4:	4413      	add	r3, r2
 80194e6:	009b      	lsls	r3, r3, #2
 80194e8:	4403      	add	r3, r0
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	4299      	cmp	r1, r3
 80194ee:	d001      	beq.n	80194f4 <RegionEU868ChannelAdd+0xdc>
		{
			freqInvalid = true;
 80194f0:	2301      	movs	r3, #1
 80194f2:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check frequency
	if (freqInvalid == false)
 80194f4:	7bbb      	ldrb	r3, [r7, #14]
 80194f6:	f083 0301 	eor.w	r3, r3, #1
 80194fa:	b2db      	uxtb	r3, r3
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d010      	beq.n	8019522 <RegionEU868ChannelAdd+0x10a>
	{
		if (VerifyTxFreq(channelAdd->NewChannel->Frequency, &band) == false)
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	f107 020c 	add.w	r2, r7, #12
 801950a:	4611      	mov	r1, r2
 801950c:	4618      	mov	r0, r3
 801950e:	f7fe fe73 	bl	80181f8 <VerifyTxFreq>
 8019512:	4603      	mov	r3, r0
 8019514:	f083 0301 	eor.w	r3, r3, #1
 8019518:	b2db      	uxtb	r3, r3
 801951a:	2b00      	cmp	r3, #0
 801951c:	d001      	beq.n	8019522 <RegionEU868ChannelAdd+0x10a>
		{
			freqInvalid = true;
 801951e:	2301      	movs	r3, #1
 8019520:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check status
	if ((drInvalid == true) && (freqInvalid == true))
 8019522:	7bfb      	ldrb	r3, [r7, #15]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d004      	beq.n	8019532 <RegionEU868ChannelAdd+0x11a>
 8019528:	7bbb      	ldrb	r3, [r7, #14]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d001      	beq.n	8019532 <RegionEU868ChannelAdd+0x11a>
	{
		return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801952e:	2306      	movs	r3, #6
 8019530:	e02f      	b.n	8019592 <RegionEU868ChannelAdd+0x17a>
	}
	if (drInvalid == true)
 8019532:	7bfb      	ldrb	r3, [r7, #15]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d001      	beq.n	801953c <RegionEU868ChannelAdd+0x124>
	{
		return LORAMAC_STATUS_DATARATE_INVALID;
 8019538:	2305      	movs	r3, #5
 801953a:	e02a      	b.n	8019592 <RegionEU868ChannelAdd+0x17a>
	}
	if (freqInvalid == true)
 801953c:	7bbb      	ldrb	r3, [r7, #14]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d001      	beq.n	8019546 <RegionEU868ChannelAdd+0x12e>
	{
		return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019542:	2304      	movs	r3, #4
 8019544:	e025      	b.n	8019592 <RegionEU868ChannelAdd+0x17a>
	}

	memcpy(&(Channels[id]), channelAdd->NewChannel, sizeof(Channels[id]));
 8019546:	7b7a      	ldrb	r2, [r7, #13]
 8019548:	4613      	mov	r3, r2
 801954a:	005b      	lsls	r3, r3, #1
 801954c:	4413      	add	r3, r2
 801954e:	009b      	lsls	r3, r3, #2
 8019550:	4a12      	ldr	r2, [pc, #72]	@ (801959c <RegionEU868ChannelAdd+0x184>)
 8019552:	1898      	adds	r0, r3, r2
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	220c      	movs	r2, #12
 801955a:	4619      	mov	r1, r3
 801955c:	f008 ff05 	bl	802236a <memcpy>
	Channels[id].Band = band;
 8019560:	7b7a      	ldrb	r2, [r7, #13]
 8019562:	7b38      	ldrb	r0, [r7, #12]
 8019564:	490d      	ldr	r1, [pc, #52]	@ (801959c <RegionEU868ChannelAdd+0x184>)
 8019566:	4613      	mov	r3, r2
 8019568:	005b      	lsls	r3, r3, #1
 801956a:	4413      	add	r3, r2
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	440b      	add	r3, r1
 8019570:	3309      	adds	r3, #9
 8019572:	4602      	mov	r2, r0
 8019574:	701a      	strb	r2, [r3, #0]
	ChannelsMask[0] |= (1 << id);
 8019576:	4b0a      	ldr	r3, [pc, #40]	@ (80195a0 <RegionEU868ChannelAdd+0x188>)
 8019578:	881b      	ldrh	r3, [r3, #0]
 801957a:	b21a      	sxth	r2, r3
 801957c:	7b7b      	ldrb	r3, [r7, #13]
 801957e:	2101      	movs	r1, #1
 8019580:	fa01 f303 	lsl.w	r3, r1, r3
 8019584:	b21b      	sxth	r3, r3
 8019586:	4313      	orrs	r3, r2
 8019588:	b21b      	sxth	r3, r3
 801958a:	b29a      	uxth	r2, r3
 801958c:	4b04      	ldr	r3, [pc, #16]	@ (80195a0 <RegionEU868ChannelAdd+0x188>)
 801958e:	801a      	strh	r2, [r3, #0]
	return LORAMAC_STATUS_OK;
 8019590:	2300      	movs	r3, #0
}
 8019592:	4618      	mov	r0, r3
 8019594:	3710      	adds	r7, #16
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
 801959a:	bf00      	nop
 801959c:	200077ac 	.word	0x200077ac
 80195a0:	20006c9c 	.word	0x20006c9c

080195a4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove(ChannelRemoveParams_t *channelRemove)
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b086      	sub	sp, #24
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
	uint8_t id = channelRemove->ChannelId;
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	781b      	ldrb	r3, [r3, #0]
 80195b0:	75fb      	strb	r3, [r7, #23]

	if (id < EU868_NUMB_DEFAULT_CHANNELS)
 80195b2:	7dfb      	ldrb	r3, [r7, #23]
 80195b4:	2b02      	cmp	r3, #2
 80195b6:	d801      	bhi.n	80195bc <RegionEU868ChannelsRemove+0x18>
	{
		return false;
 80195b8:	2300      	movs	r3, #0
 80195ba:	e012      	b.n	80195e2 <RegionEU868ChannelsRemove+0x3e>
	}

	// Remove the channel from the list of channels
	Channels[id] = (ChannelParams_t){0, 0, {0}, 0};
 80195bc:	7dfa      	ldrb	r2, [r7, #23]
 80195be:	490b      	ldr	r1, [pc, #44]	@ (80195ec <RegionEU868ChannelsRemove+0x48>)
 80195c0:	4613      	mov	r3, r2
 80195c2:	005b      	lsls	r3, r3, #1
 80195c4:	4413      	add	r3, r2
 80195c6:	009b      	lsls	r3, r3, #2
 80195c8:	440b      	add	r3, r1
 80195ca:	461a      	mov	r2, r3
 80195cc:	2300      	movs	r3, #0
 80195ce:	6013      	str	r3, [r2, #0]
 80195d0:	6053      	str	r3, [r2, #4]
 80195d2:	6093      	str	r3, [r2, #8]

	return RegionCommonChanDisable(ChannelsMask, id, EU868_MAX_NB_CHANNELS);
 80195d4:	7dfb      	ldrb	r3, [r7, #23]
 80195d6:	2210      	movs	r2, #16
 80195d8:	4619      	mov	r1, r3
 80195da:	4805      	ldr	r0, [pc, #20]	@ (80195f0 <RegionEU868ChannelsRemove+0x4c>)
 80195dc:	f7fc fee2 	bl	80163a4 <RegionCommonChanDisable>
 80195e0:	4603      	mov	r3, r0
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3718      	adds	r7, #24
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
 80195ea:	bf00      	nop
 80195ec:	200077ac 	.word	0x200077ac
 80195f0:	20006c9c 	.word	0x20006c9c

080195f4 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b084      	sub	sp, #16
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	781b      	ldrb	r3, [r3, #0]
 8019606:	4619      	mov	r1, r3
 8019608:	4a1f      	ldr	r2, [pc, #124]	@ (8019688 <RegionEU868SetContinuousWave+0x94>)
 801960a:	460b      	mov	r3, r1
 801960c:	005b      	lsls	r3, r3, #1
 801960e:	440b      	add	r3, r1
 8019610:	009b      	lsls	r3, r3, #2
 8019612:	4413      	add	r3, r2
 8019614:	3309      	adds	r3, #9
 8019616:	781b      	ldrb	r3, [r3, #0]
 8019618:	4a1c      	ldr	r2, [pc, #112]	@ (801968c <RegionEU868SetContinuousWave+0x98>)
 801961a:	015b      	lsls	r3, r3, #5
 801961c:	4413      	add	r3, r2
 801961e:	3302      	adds	r3, #2
 8019620:	f993 1000 	ldrsb.w	r1, [r3]
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801962a:	4b19      	ldr	r3, [pc, #100]	@ (8019690 <RegionEU868SetContinuousWave+0x9c>)
 801962c:	f7fe fdc8 	bl	80181c0 <LimitTxPower>
 8019630:	4603      	mov	r3, r0
 8019632:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 8019634:	2300      	movs	r3, #0
 8019636:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	4619      	mov	r1, r3
 801963e:	4a12      	ldr	r2, [pc, #72]	@ (8019688 <RegionEU868SetContinuousWave+0x94>)
 8019640:	460b      	mov	r3, r1
 8019642:	005b      	lsls	r3, r3, #1
 8019644:	440b      	add	r3, r1
 8019646:	009b      	lsls	r3, r3, #2
 8019648:	4413      	add	r3, r2
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	edd3 7a01 	vldr	s15, [r3, #4]
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	ed93 7a02 	vldr	s14, [r3, #8]
 801965a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801965e:	eef0 0a47 	vmov.f32	s1, s14
 8019662:	eeb0 0a67 	vmov.f32	s0, s15
 8019666:	4618      	mov	r0, r3
 8019668:	f7fd fa34 	bl	8016ad4 <RegionCommonComputeTxPower>
 801966c:	4603      	mov	r3, r0
 801966e:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 8019670:	4b08      	ldr	r3, [pc, #32]	@ (8019694 <RegionEU868SetContinuousWave+0xa0>)
 8019672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019674:	687a      	ldr	r2, [r7, #4]
 8019676:	8992      	ldrh	r2, [r2, #12]
 8019678:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801967c:	68b8      	ldr	r0, [r7, #8]
 801967e:	4798      	blx	r3
}
 8019680:	bf00      	nop
 8019682:	3710      	adds	r7, #16
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}
 8019688:	200077ac 	.word	0x200077ac
 801968c:	20000170 	.word	0x20000170
 8019690:	20006c9c 	.word	0x20006c9c
 8019694:	08025450 	.word	0x08025450

08019698 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 8019698:	b480      	push	{r7}
 801969a:	b085      	sub	sp, #20
 801969c:	af00      	add	r7, sp, #0
 801969e:	4603      	mov	r3, r0
 80196a0:	71fb      	strb	r3, [r7, #7]
 80196a2:	460b      	mov	r3, r1
 80196a4:	71bb      	strb	r3, [r7, #6]
 80196a6:	4613      	mov	r3, r2
 80196a8:	717b      	strb	r3, [r7, #5]
	int8_t datarate = dr - drOffset;
 80196aa:	79ba      	ldrb	r2, [r7, #6]
 80196ac:	797b      	ldrb	r3, [r7, #5]
 80196ae:	1ad3      	subs	r3, r2, r3
 80196b0:	b2db      	uxtb	r3, r3
 80196b2:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 80196b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	da01      	bge.n	80196c0 <RegionEU868ApplyDrOffset+0x28>
	{
		datarate = DR_0;
 80196bc:	2300      	movs	r3, #0
 80196be:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 80196c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80196c2:	4618      	mov	r0, r3
 80196c4:	3714      	adds	r7, #20
 80196c6:	46bd      	mov	sp, r7
 80196c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196cc:	4770      	bx	lr

080196ce <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 80196ce:	b480      	push	{r7}
 80196d0:	b085      	sub	sp, #20
 80196d2:	af00      	add	r7, sp, #0
 80196d4:	4603      	mov	r3, r0
 80196d6:	460a      	mov	r2, r1
 80196d8:	71fb      	strb	r3, [r7, #7]
 80196da:	4613      	mov	r3, r2
 80196dc:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 80196de:	2300      	movs	r3, #0
 80196e0:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 80196e2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80196e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80196ea:	429a      	cmp	r2, r3
 80196ec:	d102      	bne.n	80196f4 <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 80196ee:	79bb      	ldrb	r3, [r7, #6]
 80196f0:	73fb      	strb	r3, [r7, #15]
 80196f2:	e009      	b.n	8019708 <GetNextLowerTxDr+0x3a>
	}
	else if (dr == DR_7)
 80196f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80196f8:	2b07      	cmp	r3, #7
 80196fa:	d102      	bne.n	8019702 <GetNextLowerTxDr+0x34>
	{
		nextLowerDr = DR_5;
 80196fc:	2305      	movs	r3, #5
 80196fe:	73fb      	strb	r3, [r7, #15]
 8019700:	e002      	b.n	8019708 <GetNextLowerTxDr+0x3a>
	}
	else
	{
		nextLowerDr = dr - 1;
 8019702:	79fb      	ldrb	r3, [r7, #7]
 8019704:	3b01      	subs	r3, #1
 8019706:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 8019708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801970c:	4618      	mov	r0, r3
 801970e:	3714      	adds	r7, #20
 8019710:	46bd      	mov	sp, r7
 8019712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019716:	4770      	bx	lr

08019718 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 8019718:	b480      	push	{r7}
 801971a:	b083      	sub	sp, #12
 801971c:	af00      	add	r7, sp, #0
 801971e:	6078      	str	r0, [r7, #4]
	switch (BandwidthsIN865[drIndex])
 8019720:	4a0a      	ldr	r2, [pc, #40]	@ (801974c <GetBandwidth+0x34>)
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019728:	4a09      	ldr	r2, [pc, #36]	@ (8019750 <GetBandwidth+0x38>)
 801972a:	4293      	cmp	r3, r2
 801972c:	d004      	beq.n	8019738 <GetBandwidth+0x20>
 801972e:	4a09      	ldr	r2, [pc, #36]	@ (8019754 <GetBandwidth+0x3c>)
 8019730:	4293      	cmp	r3, r2
 8019732:	d003      	beq.n	801973c <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 8019734:	2300      	movs	r3, #0
 8019736:	e002      	b.n	801973e <GetBandwidth+0x26>
	case 250000:
		return 1;
 8019738:	2301      	movs	r3, #1
 801973a:	e000      	b.n	801973e <GetBandwidth+0x26>
	case 500000:
		return 2;
 801973c:	2302      	movs	r3, #2
	}
}
 801973e:	4618      	mov	r0, r3
 8019740:	370c      	adds	r7, #12
 8019742:	46bd      	mov	sp, r7
 8019744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019748:	4770      	bx	lr
 801974a:	bf00      	nop
 801974c:	0802532c 	.word	0x0802532c
 8019750:	0003d090 	.word	0x0003d090
 8019754:	0007a120 	.word	0x0007a120

08019758 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 8019758:	b480      	push	{r7}
 801975a:	b085      	sub	sp, #20
 801975c:	af00      	add	r7, sp, #0
 801975e:	603b      	str	r3, [r7, #0]
 8019760:	4603      	mov	r3, r0
 8019762:	71fb      	strb	r3, [r7, #7]
 8019764:	460b      	mov	r3, r1
 8019766:	71bb      	strb	r3, [r7, #6]
 8019768:	4613      	mov	r3, r2
 801976a:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 801976c:	79fb      	ldrb	r3, [r7, #7]
 801976e:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 8019770:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8019774:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019778:	4293      	cmp	r3, r2
 801977a:	bfb8      	it	lt
 801977c:	4613      	movlt	r3, r2
 801977e:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 8019780:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019784:	4618      	mov	r0, r3
 8019786:	3714      	adds	r7, #20
 8019788:	46bd      	mov	sp, r7
 801978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978e:	4770      	bx	lr

08019790 <VerifyTxFreq>:

static bool VerifyTxFreq(uint32_t freq, uint8_t *band)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b082      	sub	sp, #8
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
 8019798:	6039      	str	r1, [r7, #0]
	// Check radio driver support
	if (Radio.CheckRfFrequency(freq) == false)
 801979a:	4b0d      	ldr	r3, [pc, #52]	@ (80197d0 <VerifyTxFreq+0x40>)
 801979c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801979e:	6878      	ldr	r0, [r7, #4]
 80197a0:	4798      	blx	r3
 80197a2:	4603      	mov	r3, r0
 80197a4:	f083 0301 	eor.w	r3, r3, #1
 80197a8:	b2db      	uxtb	r3, r3
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d001      	beq.n	80197b2 <VerifyTxFreq+0x22>
	{
		return false;
 80197ae:	2300      	movs	r3, #0
 80197b0:	e00a      	b.n	80197c8 <VerifyTxFreq+0x38>
	}

	if ((freq < 865000000) || (freq > 867000000))
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	4a07      	ldr	r2, [pc, #28]	@ (80197d4 <VerifyTxFreq+0x44>)
 80197b6:	4293      	cmp	r3, r2
 80197b8:	d903      	bls.n	80197c2 <VerifyTxFreq+0x32>
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	4a06      	ldr	r2, [pc, #24]	@ (80197d8 <VerifyTxFreq+0x48>)
 80197be:	4293      	cmp	r3, r2
 80197c0:	d901      	bls.n	80197c6 <VerifyTxFreq+0x36>
	{
		return false;
 80197c2:	2300      	movs	r3, #0
 80197c4:	e000      	b.n	80197c8 <VerifyTxFreq+0x38>
	}
	return true;
 80197c6:	2301      	movs	r3, #1
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3708      	adds	r7, #8
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	08025450 	.word	0x08025450
 80197d4:	338eda3f 	.word	0x338eda3f
 80197d8:	33ad5ec0 	.word	0x33ad5ec0

080197dc <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(bool joined, uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b086      	sub	sp, #24
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	60ba      	str	r2, [r7, #8]
 80197e4:	607b      	str	r3, [r7, #4]
 80197e6:	4603      	mov	r3, r0
 80197e8:	73fb      	strb	r3, [r7, #15]
 80197ea:	460b      	mov	r3, r1
 80197ec:	73bb      	strb	r3, [r7, #14]
	uint8_t nbEnabledChannels = 0;
 80197ee:	2300      	movs	r3, #0
 80197f0:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 80197f2:	2300      	movs	r3, #0
 80197f4:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++)
 80197f6:	2300      	movs	r3, #0
 80197f8:	757b      	strb	r3, [r7, #21]
 80197fa:	2300      	movs	r3, #0
 80197fc:	753b      	strb	r3, [r7, #20]
 80197fe:	e086      	b.n	801990e <CountNbOfEnabledChannels+0x132>
	{
		for (uint8_t j = 0; j < 16; j++)
 8019800:	2300      	movs	r3, #0
 8019802:	74fb      	strb	r3, [r7, #19]
 8019804:	e07a      	b.n	80198fc <CountNbOfEnabledChannels+0x120>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 8019806:	7d3b      	ldrb	r3, [r7, #20]
 8019808:	005b      	lsls	r3, r3, #1
 801980a:	68ba      	ldr	r2, [r7, #8]
 801980c:	4413      	add	r3, r2
 801980e:	881b      	ldrh	r3, [r3, #0]
 8019810:	461a      	mov	r2, r3
 8019812:	7cfb      	ldrb	r3, [r7, #19]
 8019814:	fa42 f303 	asr.w	r3, r2, r3
 8019818:	f003 0301 	and.w	r3, r3, #1
 801981c:	2b00      	cmp	r3, #0
 801981e:	d06a      	beq.n	80198f6 <CountNbOfEnabledChannels+0x11a>
			{
				if (channels[i + j].Frequency == 0)
 8019820:	7d7a      	ldrb	r2, [r7, #21]
 8019822:	7cfb      	ldrb	r3, [r7, #19]
 8019824:	4413      	add	r3, r2
 8019826:	461a      	mov	r2, r3
 8019828:	4613      	mov	r3, r2
 801982a:	005b      	lsls	r3, r3, #1
 801982c:	4413      	add	r3, r2
 801982e:	009b      	lsls	r3, r3, #2
 8019830:	461a      	mov	r2, r3
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	4413      	add	r3, r2
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d057      	beq.n	80198ec <CountNbOfEnabledChannels+0x110>
				{ // Check if the channel is enabled
					continue;
				}
				if (joined == false)
 801983c:	7bfb      	ldrb	r3, [r7, #15]
 801983e:	f083 0301 	eor.w	r3, r3, #1
 8019842:	b2db      	uxtb	r3, r3
 8019844:	2b00      	cmp	r3, #0
 8019846:	d007      	beq.n	8019858 <CountNbOfEnabledChannels+0x7c>
				{
					if ((IN865_JOIN_CHANNELS & (1 << j)) == 0)
 8019848:	7cfb      	ldrb	r3, [r7, #19]
 801984a:	2207      	movs	r2, #7
 801984c:	fa42 f303 	asr.w	r3, r2, r3
 8019850:	f003 0301 	and.w	r3, r3, #1
 8019854:	2b00      	cmp	r3, #0
 8019856:	d04b      	beq.n	80198f0 <CountNbOfEnabledChannels+0x114>
					{
						continue;
					}
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 8019858:	f997 000e 	ldrsb.w	r0, [r7, #14]
 801985c:	7d7a      	ldrb	r2, [r7, #21]
 801985e:	7cfb      	ldrb	r3, [r7, #19]
 8019860:	4413      	add	r3, r2
 8019862:	461a      	mov	r2, r3
 8019864:	4613      	mov	r3, r2
 8019866:	005b      	lsls	r3, r3, #1
 8019868:	4413      	add	r3, r2
 801986a:	009b      	lsls	r3, r3, #2
 801986c:	461a      	mov	r2, r3
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	4413      	add	r3, r2
 8019872:	7a1b      	ldrb	r3, [r3, #8]
 8019874:	f343 0303 	sbfx	r3, r3, #0, #4
 8019878:	b25b      	sxtb	r3, r3
 801987a:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 801987c:	7d7a      	ldrb	r2, [r7, #21]
 801987e:	7cfb      	ldrb	r3, [r7, #19]
 8019880:	4413      	add	r3, r2
 8019882:	461a      	mov	r2, r3
 8019884:	4613      	mov	r3, r2
 8019886:	005b      	lsls	r3, r3, #1
 8019888:	4413      	add	r3, r2
 801988a:	009b      	lsls	r3, r3, #2
 801988c:	461a      	mov	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	4413      	add	r3, r2
 8019892:	7a1b      	ldrb	r3, [r3, #8]
 8019894:	f343 1303 	sbfx	r3, r3, #4, #4
 8019898:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 801989a:	461a      	mov	r2, r3
 801989c:	f7fc fd64 	bl	8016368 <RegionCommonValueInRange>
 80198a0:	4603      	mov	r3, r0
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d026      	beq.n	80198f4 <CountNbOfEnabledChannels+0x118>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 80198a6:	7d7a      	ldrb	r2, [r7, #21]
 80198a8:	7cfb      	ldrb	r3, [r7, #19]
 80198aa:	4413      	add	r3, r2
 80198ac:	461a      	mov	r2, r3
 80198ae:	4613      	mov	r3, r2
 80198b0:	005b      	lsls	r3, r3, #1
 80198b2:	4413      	add	r3, r2
 80198b4:	009b      	lsls	r3, r3, #2
 80198b6:	461a      	mov	r2, r3
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	4413      	add	r3, r2
 80198bc:	7a5b      	ldrb	r3, [r3, #9]
 80198be:	015b      	lsls	r3, r3, #5
 80198c0:	6a3a      	ldr	r2, [r7, #32]
 80198c2:	4413      	add	r3, r2
 80198c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80198c8:	4313      	orrs	r3, r2
 80198ca:	d003      	beq.n	80198d4 <CountNbOfEnabledChannels+0xf8>
				{ // Check if the band is available for transmission
					delayTransmission++;
 80198cc:	7dbb      	ldrb	r3, [r7, #22]
 80198ce:	3301      	adds	r3, #1
 80198d0:	75bb      	strb	r3, [r7, #22]
					continue;
 80198d2:	e010      	b.n	80198f6 <CountNbOfEnabledChannels+0x11a>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 80198d4:	7dfb      	ldrb	r3, [r7, #23]
 80198d6:	1c5a      	adds	r2, r3, #1
 80198d8:	75fa      	strb	r2, [r7, #23]
 80198da:	461a      	mov	r2, r3
 80198dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198de:	4413      	add	r3, r2
 80198e0:	7d79      	ldrb	r1, [r7, #21]
 80198e2:	7cfa      	ldrb	r2, [r7, #19]
 80198e4:	440a      	add	r2, r1
 80198e6:	b2d2      	uxtb	r2, r2
 80198e8:	701a      	strb	r2, [r3, #0]
 80198ea:	e004      	b.n	80198f6 <CountNbOfEnabledChannels+0x11a>
					continue;
 80198ec:	bf00      	nop
 80198ee:	e002      	b.n	80198f6 <CountNbOfEnabledChannels+0x11a>
						continue;
 80198f0:	bf00      	nop
 80198f2:	e000      	b.n	80198f6 <CountNbOfEnabledChannels+0x11a>
					continue;
 80198f4:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 80198f6:	7cfb      	ldrb	r3, [r7, #19]
 80198f8:	3301      	adds	r3, #1
 80198fa:	74fb      	strb	r3, [r7, #19]
 80198fc:	7cfb      	ldrb	r3, [r7, #19]
 80198fe:	2b0f      	cmp	r3, #15
 8019900:	d981      	bls.n	8019806 <CountNbOfEnabledChannels+0x2a>
	for (uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++)
 8019902:	7d7b      	ldrb	r3, [r7, #21]
 8019904:	3310      	adds	r3, #16
 8019906:	757b      	strb	r3, [r7, #21]
 8019908:	7d3b      	ldrb	r3, [r7, #20]
 801990a:	3301      	adds	r3, #1
 801990c:	753b      	strb	r3, [r7, #20]
 801990e:	7d7b      	ldrb	r3, [r7, #21]
 8019910:	2b0f      	cmp	r3, #15
 8019912:	f67f af75 	bls.w	8019800 <CountNbOfEnabledChannels+0x24>
			}
		}
	}

	*delayTx = delayTransmission;
 8019916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019918:	7dba      	ldrb	r2, [r7, #22]
 801991a:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 801991c:	7dfb      	ldrb	r3, [r7, #23]
}
 801991e:	4618      	mov	r0, r3
 8019920:	3718      	adds	r7, #24
 8019922:	46bd      	mov	sp, r7
 8019924:	bd80      	pop	{r7, pc}
	...

08019928 <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam(GetPhyParams_t *getPhy)
{
 8019928:	b580      	push	{r7, lr}
 801992a:	b084      	sub	sp, #16
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 8019930:	2300      	movs	r3, #0
 8019932:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	781b      	ldrb	r3, [r3, #0]
 8019938:	2b20      	cmp	r3, #32
 801993a:	f200 80b1 	bhi.w	8019aa0 <RegionIN865GetPhyParam+0x178>
 801993e:	a201      	add	r2, pc, #4	@ (adr r2, 8019944 <RegionIN865GetPhyParam+0x1c>)
 8019940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019944:	080199c9 	.word	0x080199c9
 8019948:	080199cf 	.word	0x080199cf
 801994c:	08019aa1 	.word	0x08019aa1
 8019950:	08019aa1 	.word	0x08019aa1
 8019954:	08019aa1 	.word	0x08019aa1
 8019958:	080199d5 	.word	0x080199d5
 801995c:	08019aa1 	.word	0x08019aa1
 8019960:	08019aa1 	.word	0x08019aa1
 8019964:	080199ef 	.word	0x080199ef
 8019968:	080199f5 	.word	0x080199f5
 801996c:	08019a05 	.word	0x08019a05
 8019970:	08019a15 	.word	0x08019a15
 8019974:	08019a1b 	.word	0x08019a1b
 8019978:	08019a23 	.word	0x08019a23
 801997c:	08019a2b 	.word	0x08019a2b
 8019980:	08019a33 	.word	0x08019a33
 8019984:	08019a3b 	.word	0x08019a3b
 8019988:	08019a43 	.word	0x08019a43
 801998c:	08019a4b 	.word	0x08019a4b
 8019990:	08019a5f 	.word	0x08019a5f
 8019994:	08019a65 	.word	0x08019a65
 8019998:	08019a6b 	.word	0x08019a6b
 801999c:	08019a71 	.word	0x08019a71
 80199a0:	08019a77 	.word	0x08019a77
 80199a4:	08019a7d 	.word	0x08019a7d
 80199a8:	08019a83 	.word	0x08019a83
 80199ac:	08019a89 	.word	0x08019a89
 80199b0:	08019a89 	.word	0x08019a89
 80199b4:	08019a8f 	.word	0x08019a8f
 80199b8:	08019a95 	.word	0x08019a95
 80199bc:	08019a9b 	.word	0x08019a9b
 80199c0:	08019a9b 	.word	0x08019a9b
 80199c4:	080199db 	.word	0x080199db
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = IN865_RX_MIN_DATARATE;
 80199c8:	2300      	movs	r3, #0
 80199ca:	60fb      	str	r3, [r7, #12]
		break;
 80199cc:	e069      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = IN865_TX_MIN_DATARATE;
 80199ce:	2300      	movs	r3, #0
 80199d0:	60fb      	str	r3, [r7, #12]
		break;
 80199d2:	e066      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = IN865_DEFAULT_DATARATE;
 80199d4:	2300      	movs	r3, #0
 80199d6:	60fb      	str	r3, [r7, #12]
		break;
 80199d8:	e063      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, IN865_TX_MIN_DATARATE);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80199e0:	2100      	movs	r1, #0
 80199e2:	4618      	mov	r0, r3
 80199e4:	f7ff fe73 	bl	80196ce <GetNextLowerTxDr>
 80199e8:	4603      	mov	r3, r0
 80199ea:	60fb      	str	r3, [r7, #12]
		break;
 80199ec:	e059      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = IN865_DEFAULT_TX_POWER;
 80199ee:	2300      	movs	r3, #0
 80199f0:	60fb      	str	r3, [r7, #12]
		break;
 80199f2:	e056      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80199fa:	461a      	mov	r2, r3
 80199fc:	4b2b      	ldr	r3, [pc, #172]	@ (8019aac <RegionIN865GetPhyParam+0x184>)
 80199fe:	5c9b      	ldrb	r3, [r3, r2]
 8019a00:	60fb      	str	r3, [r7, #12]
		break;
 8019a02:	e04e      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019a0a:	461a      	mov	r2, r3
 8019a0c:	4b28      	ldr	r3, [pc, #160]	@ (8019ab0 <RegionIN865GetPhyParam+0x188>)
 8019a0e:	5c9b      	ldrb	r3, [r3, r2]
 8019a10:	60fb      	str	r3, [r7, #12]
		break;
 8019a12:	e046      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 8019a14:	2301      	movs	r3, #1
 8019a16:	60fb      	str	r3, [r7, #12]
		break;
 8019a18:	e043      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = IN865_MAX_RX_WINDOW;
 8019a1a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8019a1e:	60fb      	str	r3, [r7, #12]
		break;
 8019a20:	e03f      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = IN865_RECEIVE_DELAY1;
 8019a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019a26:	60fb      	str	r3, [r7, #12]
		break;
 8019a28:	e03b      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = IN865_RECEIVE_DELAY2;
 8019a2a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8019a2e:	60fb      	str	r3, [r7, #12]
		break;
 8019a30:	e037      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 8019a32:	f241 3388 	movw	r3, #5000	@ 0x1388
 8019a36:	60fb      	str	r3, [r7, #12]
		break;
 8019a38:	e033      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 8019a3a:	f241 7370 	movw	r3, #6000	@ 0x1770
 8019a3e:	60fb      	str	r3, [r7, #12]
		break;
 8019a40:	e02f      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = IN865_MAX_FCNT_GAP;
 8019a42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019a46:	60fb      	str	r3, [r7, #12]
		break;
 8019a48:	e02b      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (IN865_ACKTIMEOUT + randr(-IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND));
 8019a4a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8019a4e:	4819      	ldr	r0, [pc, #100]	@ (8019ab4 <RegionIN865GetPhyParam+0x18c>)
 8019a50:	f007 f890 	bl	8020b74 <randr>
 8019a54:	4603      	mov	r3, r0
 8019a56:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8019a5a:	60fb      	str	r3, [r7, #12]
		break;
 8019a5c:	e021      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 8019a5e:	2300      	movs	r3, #0
 8019a60:	60fb      	str	r3, [r7, #12]
		break;
 8019a62:	e01e      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = IN865_RX_WND_2_FREQ;
 8019a64:	4b14      	ldr	r3, [pc, #80]	@ (8019ab8 <RegionIN865GetPhyParam+0x190>)
 8019a66:	60fb      	str	r3, [r7, #12]
		break;
 8019a68:	e01b      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = IN865_RX_WND_2_DR;
 8019a6a:	2302      	movs	r3, #2
 8019a6c:	60fb      	str	r3, [r7, #12]
		break;
 8019a6e:	e018      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 8019a70:	4b12      	ldr	r3, [pc, #72]	@ (8019abc <RegionIN865GetPhyParam+0x194>)
 8019a72:	60fb      	str	r3, [r7, #12]
		break;
 8019a74:	e015      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 8019a76:	4b12      	ldr	r3, [pc, #72]	@ (8019ac0 <RegionIN865GetPhyParam+0x198>)
 8019a78:	60fb      	str	r3, [r7, #12]
		break;
 8019a7a:	e012      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = IN865_MAX_NB_CHANNELS;
 8019a7c:	2310      	movs	r3, #16
 8019a7e:	60fb      	str	r3, [r7, #12]
		break;
 8019a80:	e00f      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 8019a82:	4b10      	ldr	r3, [pc, #64]	@ (8019ac4 <RegionIN865GetPhyParam+0x19c>)
 8019a84:	60fb      	str	r3, [r7, #12]
		break;
 8019a86:	e00c      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 8019a88:	2300      	movs	r3, #0
 8019a8a:	60fb      	str	r3, [r7, #12]
		break;
 8019a8c:	e009      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 8019a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8019ac8 <RegionIN865GetPhyParam+0x1a0>)
 8019a90:	60fb      	str	r3, [r7, #12]
		break;
 8019a92:	e006      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 8019a94:	4b0d      	ldr	r3, [pc, #52]	@ (8019acc <RegionIN865GetPhyParam+0x1a4>)
 8019a96:	60fb      	str	r3, [r7, #12]
		break;
 8019a98:	e003      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 48;
 8019a9a:	2330      	movs	r3, #48	@ 0x30
 8019a9c:	60fb      	str	r3, [r7, #12]
		break;
 8019a9e:	e000      	b.n	8019aa2 <RegionIN865GetPhyParam+0x17a>
	}
	default:
	{
		break;
 8019aa0:	bf00      	nop
	}
	}

	return phyParam;
 8019aa2:	68fb      	ldr	r3, [r7, #12]
}
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	3710      	adds	r7, #16
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}
 8019aac:	0802534c 	.word	0x0802534c
 8019ab0:	08025354 	.word	0x08025354
 8019ab4:	fffffc18 	.word	0xfffffc18
 8019ab8:	33a680f0 	.word	0x33a680f0
 8019abc:	20006c9c 	.word	0x20006c9c
 8019ac0:	20006ca8 	.word	0x20006ca8
 8019ac4:	2000786c 	.word	0x2000786c
 8019ac8:	41f00000 	.word	0x41f00000
 8019acc:	4009999a 	.word	0x4009999a

08019ad0 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b082      	sub	sp, #8
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	7858      	ldrb	r0, [r3, #1]
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	781b      	ldrb	r3, [r3, #0]
 8019ae0:	4619      	mov	r1, r3
 8019ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8019b0c <RegionIN865SetBandTxDone+0x3c>)
 8019ae4:	460b      	mov	r3, r1
 8019ae6:	005b      	lsls	r3, r3, #1
 8019ae8:	440b      	add	r3, r1
 8019aea:	009b      	lsls	r3, r3, #2
 8019aec:	4413      	add	r3, r2
 8019aee:	3309      	adds	r3, #9
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	015b      	lsls	r3, r3, #5
 8019af4:	4a06      	ldr	r2, [pc, #24]	@ (8019b10 <RegionIN865SetBandTxDone+0x40>)
 8019af6:	1899      	adds	r1, r3, r2
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8019afe:	f7fc fcd9 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 8019b02:	bf00      	nop
 8019b04:	3708      	adds	r7, #8
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}
 8019b0a:	bf00      	nop
 8019b0c:	2000786c 	.word	0x2000786c
 8019b10:	20000210 	.word	0x20000210

08019b14 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults(InitType_t type)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b08c      	sub	sp, #48	@ 0x30
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	71fb      	strb	r3, [r7, #7]
	switch (type)
 8019b1e:	79fb      	ldrb	r3, [r7, #7]
 8019b20:	2b02      	cmp	r3, #2
 8019b22:	d029      	beq.n	8019b78 <RegionIN865InitDefaults+0x64>
 8019b24:	2b02      	cmp	r3, #2
 8019b26:	dc2d      	bgt.n	8019b84 <RegionIN865InitDefaults+0x70>
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d002      	beq.n	8019b32 <RegionIN865InitDefaults+0x1e>
 8019b2c:	2b01      	cmp	r3, #1
 8019b2e:	d01a      	beq.n	8019b66 <RegionIN865InitDefaults+0x52>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
		break;
	}
	default:
	{
		break;
 8019b30:	e028      	b.n	8019b84 <RegionIN865InitDefaults+0x70>
		Channels[0] = (ChannelParams_t)IN865_LC1;
 8019b32:	4b17      	ldr	r3, [pc, #92]	@ (8019b90 <RegionIN865InitDefaults+0x7c>)
 8019b34:	4a17      	ldr	r2, [pc, #92]	@ (8019b94 <RegionIN865InitDefaults+0x80>)
 8019b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[1] = (ChannelParams_t)IN865_LC2;
 8019b3c:	4b14      	ldr	r3, [pc, #80]	@ (8019b90 <RegionIN865InitDefaults+0x7c>)
 8019b3e:	4a16      	ldr	r2, [pc, #88]	@ (8019b98 <RegionIN865InitDefaults+0x84>)
 8019b40:	330c      	adds	r3, #12
 8019b42:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[2] = (ChannelParams_t)IN865_LC3;
 8019b48:	4b11      	ldr	r3, [pc, #68]	@ (8019b90 <RegionIN865InitDefaults+0x7c>)
 8019b4a:	4a14      	ldr	r2, [pc, #80]	@ (8019b9c <RegionIN865InitDefaults+0x88>)
 8019b4c:	3318      	adds	r3, #24
 8019b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ChannelsDefaultMask[0] = LC(1) + LC(2) + LC(3);
 8019b54:	4b12      	ldr	r3, [pc, #72]	@ (8019ba0 <RegionIN865InitDefaults+0x8c>)
 8019b56:	2207      	movs	r2, #7
 8019b58:	801a      	strh	r2, [r3, #0]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8019b5a:	2201      	movs	r2, #1
 8019b5c:	4910      	ldr	r1, [pc, #64]	@ (8019ba0 <RegionIN865InitDefaults+0x8c>)
 8019b5e:	4811      	ldr	r0, [pc, #68]	@ (8019ba4 <RegionIN865InitDefaults+0x90>)
 8019b60:	f7fc fc81 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8019b64:	e00f      	b.n	8019b86 <RegionIN865InitDefaults+0x72>
		ChannelsMask[0] |= ChannelsDefaultMask[0];
 8019b66:	4b0f      	ldr	r3, [pc, #60]	@ (8019ba4 <RegionIN865InitDefaults+0x90>)
 8019b68:	881a      	ldrh	r2, [r3, #0]
 8019b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8019ba0 <RegionIN865InitDefaults+0x8c>)
 8019b6c:	881b      	ldrh	r3, [r3, #0]
 8019b6e:	4313      	orrs	r3, r2
 8019b70:	b29a      	uxth	r2, r3
 8019b72:	4b0c      	ldr	r3, [pc, #48]	@ (8019ba4 <RegionIN865InitDefaults+0x90>)
 8019b74:	801a      	strh	r2, [r3, #0]
		break;
 8019b76:	e006      	b.n	8019b86 <RegionIN865InitDefaults+0x72>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 8019b78:	2201      	movs	r2, #1
 8019b7a:	4909      	ldr	r1, [pc, #36]	@ (8019ba0 <RegionIN865InitDefaults+0x8c>)
 8019b7c:	4809      	ldr	r0, [pc, #36]	@ (8019ba4 <RegionIN865InitDefaults+0x90>)
 8019b7e:	f7fc fc72 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8019b82:	e000      	b.n	8019b86 <RegionIN865InitDefaults+0x72>
		break;
 8019b84:	bf00      	nop
	}
	}
}
 8019b86:	bf00      	nop
 8019b88:	3730      	adds	r7, #48	@ 0x30
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	bd80      	pop	{r7, pc}
 8019b8e:	bf00      	nop
 8019b90:	2000786c 	.word	0x2000786c
 8019b94:	08024b58 	.word	0x08024b58
 8019b98:	08024b64 	.word	0x08024b64
 8019b9c:	08024b70 	.word	0x08024b70
 8019ba0:	20006ca8 	.word	0x20006ca8
 8019ba4:	20006c9c 	.word	0x20006c9c

08019ba8 <RegionIN865Verify>:

bool RegionIN865Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b082      	sub	sp, #8
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
 8019bb0:	460b      	mov	r3, r1
 8019bb2:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 8019bb4:	78fb      	ldrb	r3, [r7, #3]
 8019bb6:	3b04      	subs	r3, #4
 8019bb8:	2b1a      	cmp	r3, #26
 8019bba:	d87d      	bhi.n	8019cb8 <RegionIN865Verify+0x110>
 8019bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8019bc4 <RegionIN865Verify+0x1c>)
 8019bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bc2:	bf00      	nop
 8019bc4:	08019c31 	.word	0x08019c31
 8019bc8:	08019c4f 	.word	0x08019c4f
 8019bcc:	08019c6d 	.word	0x08019c6d
 8019bd0:	08019c8b 	.word	0x08019c8b
 8019bd4:	08019c8b 	.word	0x08019c8b
 8019bd8:	08019cb9 	.word	0x08019cb9
 8019bdc:	08019cb9 	.word	0x08019cb9
 8019be0:	08019ca9 	.word	0x08019ca9
 8019be4:	08019cb9 	.word	0x08019cb9
 8019be8:	08019cb9 	.word	0x08019cb9
 8019bec:	08019cb9 	.word	0x08019cb9
 8019bf0:	08019cb9 	.word	0x08019cb9
 8019bf4:	08019cb9 	.word	0x08019cb9
 8019bf8:	08019cb9 	.word	0x08019cb9
 8019bfc:	08019cb9 	.word	0x08019cb9
 8019c00:	08019cb9 	.word	0x08019cb9
 8019c04:	08019cb9 	.word	0x08019cb9
 8019c08:	08019cb9 	.word	0x08019cb9
 8019c0c:	08019cb9 	.word	0x08019cb9
 8019c10:	08019cb9 	.word	0x08019cb9
 8019c14:	08019cb9 	.word	0x08019cb9
 8019c18:	08019cb9 	.word	0x08019cb9
 8019c1c:	08019cb9 	.word	0x08019cb9
 8019c20:	08019cb9 	.word	0x08019cb9
 8019c24:	08019cb9 	.word	0x08019cb9
 8019c28:	08019cb9 	.word	0x08019cb9
 8019c2c:	08019cad 	.word	0x08019cad
	{
	case PHY_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	f993 3000 	ldrsb.w	r3, [r3]
 8019c36:	2207      	movs	r2, #7
 8019c38:	2100      	movs	r1, #0
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	f7fc fb94 	bl	8016368 <RegionCommonValueInRange>
 8019c40:	4603      	mov	r3, r0
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	bf14      	ite	ne
 8019c46:	2301      	movne	r3, #1
 8019c48:	2300      	moveq	r3, #0
 8019c4a:	b2db      	uxtb	r3, r3
 8019c4c:	e038      	b.n	8019cc0 <RegionIN865Verify+0x118>
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	f993 3000 	ldrsb.w	r3, [r3]
 8019c54:	2205      	movs	r2, #5
 8019c56:	2100      	movs	r1, #0
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f7fc fb85 	bl	8016368 <RegionCommonValueInRange>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	bf14      	ite	ne
 8019c64:	2301      	movne	r3, #1
 8019c66:	2300      	moveq	r3, #0
 8019c68:	b2db      	uxtb	r3, r3
 8019c6a:	e029      	b.n	8019cc0 <RegionIN865Verify+0x118>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8019c72:	2207      	movs	r2, #7
 8019c74:	2100      	movs	r1, #0
 8019c76:	4618      	mov	r0, r3
 8019c78:	f7fc fb76 	bl	8016368 <RegionCommonValueInRange>
 8019c7c:	4603      	mov	r3, r0
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	bf14      	ite	ne
 8019c82:	2301      	movne	r3, #1
 8019c84:	2300      	moveq	r3, #0
 8019c86:	b2db      	uxtb	r3, r3
 8019c88:	e01a      	b.n	8019cc0 <RegionIN865Verify+0x118>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER);
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8019c90:	220a      	movs	r2, #10
 8019c92:	2100      	movs	r1, #0
 8019c94:	4618      	mov	r0, r3
 8019c96:	f7fc fb67 	bl	8016368 <RegionCommonValueInRange>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	bf14      	ite	ne
 8019ca0:	2301      	movne	r3, #1
 8019ca2:	2300      	moveq	r3, #0
 8019ca4:	b2db      	uxtb	r3, r3
 8019ca6:	e00b      	b.n	8019cc0 <RegionIN865Verify+0x118>
	}
	case PHY_DUTY_CYCLE:
	{
		return IN865_DUTY_CYCLE_ENABLED;
 8019ca8:	2301      	movs	r3, #1
 8019caa:	e009      	b.n	8019cc0 <RegionIN865Verify+0x118>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 48)
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	781b      	ldrb	r3, [r3, #0]
 8019cb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8019cb2:	d803      	bhi.n	8019cbc <RegionIN865Verify+0x114>
		{
			return false;
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	e003      	b.n	8019cc0 <RegionIN865Verify+0x118>
		}
		break;
	}
	default:
		return false;
 8019cb8:	2300      	movs	r3, #0
 8019cba:	e001      	b.n	8019cc0 <RegionIN865Verify+0x118>
		break;
 8019cbc:	bf00      	nop
	}
	return true;
 8019cbe:	2301      	movs	r3, #1
}
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	3708      	adds	r7, #8
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bd80      	pop	{r7, pc}

08019cc8 <RegionIN865ApplyCFList>:

void RegionIN865ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 8019cc8:	b580      	push	{r7, lr}
 8019cca:	b08a      	sub	sp, #40	@ 0x28
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	6078      	str	r0, [r7, #4]
	ChannelParams_t newChannel;
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	// Setup default datarate range
	newChannel.DrRange.Value = (DR_5 << 4) | DR_0;
 8019cd0:	2350      	movs	r3, #80	@ 0x50
 8019cd2:	f887 3020 	strb.w	r3, [r7, #32]

	// Size of the optional CF list
	if (applyCFList->Size != 16)
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	791b      	ldrb	r3, [r3, #4]
 8019cda:	2b10      	cmp	r3, #16
 8019cdc:	d15c      	bne.n	8019d98 <RegionIN865ApplyCFList+0xd0>
	{
		return;
	}

	// Last byte is RFU, don't take it into account
	for (uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i += 3, chanIdx++)
 8019cde:	2300      	movs	r3, #0
 8019ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019ce4:	2303      	movs	r3, #3
 8019ce6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019cea:	e050      	b.n	8019d8e <RegionIN865ApplyCFList+0xc6>
	{
		if (chanIdx < (IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS))
 8019cec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019cf0:	2b07      	cmp	r3, #7
 8019cf2:	d824      	bhi.n	8019d3e <RegionIN865ApplyCFList+0x76>
		{
			// Channel frequency
			newChannel.Frequency = (uint32_t)applyCFList->Payload[i];
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	681a      	ldr	r2, [r3, #0]
 8019cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019cfc:	4413      	add	r3, r2
 8019cfe:	781b      	ldrb	r3, [r3, #0]
 8019d00:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 1] << 8);
 8019d02:	69ba      	ldr	r2, [r7, #24]
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6819      	ldr	r1, [r3, #0]
 8019d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d0c:	3301      	adds	r3, #1
 8019d0e:	440b      	add	r3, r1
 8019d10:	781b      	ldrb	r3, [r3, #0]
 8019d12:	021b      	lsls	r3, r3, #8
 8019d14:	4313      	orrs	r3, r2
 8019d16:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 2] << 16);
 8019d18:	69ba      	ldr	r2, [r7, #24]
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	6819      	ldr	r1, [r3, #0]
 8019d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d22:	3302      	adds	r3, #2
 8019d24:	440b      	add	r3, r1
 8019d26:	781b      	ldrb	r3, [r3, #0]
 8019d28:	041b      	lsls	r3, r3, #16
 8019d2a:	4313      	orrs	r3, r2
 8019d2c:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency *= 100;
 8019d2e:	69bb      	ldr	r3, [r7, #24]
 8019d30:	2264      	movs	r2, #100	@ 0x64
 8019d32:	fb02 f303 	mul.w	r3, r2, r3
 8019d36:	61bb      	str	r3, [r7, #24]

			// Initialize alternative frequency to 0
			newChannel.Rx1Frequency = 0;
 8019d38:	2300      	movs	r3, #0
 8019d3a:	61fb      	str	r3, [r7, #28]
 8019d3c:	e006      	b.n	8019d4c <RegionIN865ApplyCFList+0x84>
		}
		else
		{
			newChannel.Frequency = 0;
 8019d3e:	2300      	movs	r3, #0
 8019d40:	61bb      	str	r3, [r7, #24]
			newChannel.DrRange.Value = 0;
 8019d42:	2300      	movs	r3, #0
 8019d44:	f887 3020 	strb.w	r3, [r7, #32]
			newChannel.Rx1Frequency = 0;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	61fb      	str	r3, [r7, #28]
		}

		if (newChannel.Frequency != 0)
 8019d4c:	69bb      	ldr	r3, [r7, #24]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d00b      	beq.n	8019d6a <RegionIN865ApplyCFList+0xa2>
		{
			channelAdd.NewChannel = &newChannel;
 8019d52:	f107 0318 	add.w	r3, r7, #24
 8019d56:	613b      	str	r3, [r7, #16]
			channelAdd.ChannelId = chanIdx;
 8019d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019d5c:	753b      	strb	r3, [r7, #20]

			// Try to add all channels
			RegionIN865ChannelAdd(&channelAdd);
 8019d5e:	f107 0310 	add.w	r3, r7, #16
 8019d62:	4618      	mov	r0, r3
 8019d64:	f000 fda6 	bl	801a8b4 <RegionIN865ChannelAdd>
 8019d68:	e007      	b.n	8019d7a <RegionIN865ApplyCFList+0xb2>
		}
		else
		{
			channelRemove.ChannelId = chanIdx;
 8019d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019d6e:	733b      	strb	r3, [r7, #12]

			RegionIN865ChannelsRemove(&channelRemove);
 8019d70:	f107 030c 	add.w	r3, r7, #12
 8019d74:	4618      	mov	r0, r3
 8019d76:	f000 fe63 	bl	801aa40 <RegionIN865ChannelsRemove>
	for (uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i += 3, chanIdx++)
 8019d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d7e:	3303      	adds	r3, #3
 8019d80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019d84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019d88:	3301      	adds	r3, #1
 8019d8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8019d8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019d92:	2b0f      	cmp	r3, #15
 8019d94:	d9aa      	bls.n	8019cec <RegionIN865ApplyCFList+0x24>
 8019d96:	e000      	b.n	8019d9a <RegionIN865ApplyCFList+0xd2>
		return;
 8019d98:	bf00      	nop
		}
	}
}
 8019d9a:	3728      	adds	r7, #40	@ 0x28
 8019d9c:	46bd      	mov	sp, r7
 8019d9e:	bd80      	pop	{r7, pc}

08019da0 <RegionIN865ChanMaskSet>:

bool RegionIN865ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	791b      	ldrb	r3, [r3, #4]
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d002      	beq.n	8019db6 <RegionIN865ChanMaskSet+0x16>
 8019db0:	2b01      	cmp	r3, #1
 8019db2:	d008      	beq.n	8019dc6 <RegionIN865ChanMaskSet+0x26>
 8019db4:	e00f      	b.n	8019dd6 <RegionIN865ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 1);
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	2201      	movs	r2, #1
 8019dbc:	4619      	mov	r1, r3
 8019dbe:	4809      	ldr	r0, [pc, #36]	@ (8019de4 <RegionIN865ChanMaskSet+0x44>)
 8019dc0:	f7fc fb51 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8019dc4:	e009      	b.n	8019dda <RegionIN865ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681b      	ldr	r3, [r3, #0]
 8019dca:	2201      	movs	r2, #1
 8019dcc:	4619      	mov	r1, r3
 8019dce:	4806      	ldr	r0, [pc, #24]	@ (8019de8 <RegionIN865ChanMaskSet+0x48>)
 8019dd0:	f7fc fb49 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 8019dd4:	e001      	b.n	8019dda <RegionIN865ChanMaskSet+0x3a>
	}
	default:
		return false;
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	e000      	b.n	8019ddc <RegionIN865ChanMaskSet+0x3c>
	}
	return true;
 8019dda:	2301      	movs	r3, #1
}
 8019ddc:	4618      	mov	r0, r3
 8019dde:	3708      	adds	r7, #8
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bd80      	pop	{r7, pc}
 8019de4:	20006c9c 	.word	0x20006c9c
 8019de8:	20006ca8 	.word	0x20006ca8

08019dec <RegionIN865AdrNext>:

bool RegionIN865AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b088      	sub	sp, #32
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	60f8      	str	r0, [r7, #12]
 8019df4:	60b9      	str	r1, [r7, #8]
 8019df6:	607a      	str	r2, [r7, #4]
 8019df8:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	7a1b      	ldrb	r3, [r3, #8]
 8019e02:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	7a5b      	ldrb	r3, [r3, #9]
 8019e08:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	685a      	ldr	r2, [r3, #4]
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 8019e12:	68fb      	ldr	r3, [r7, #12]
 8019e14:	785b      	ldrb	r3, [r3, #1]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d03f      	beq.n	8019e9a <RegionIN865AdrNext+0xae>
	{
		if (datarate == IN865_TX_MIN_DATARATE)
 8019e1a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d105      	bne.n	8019e2e <RegionIN865AdrNext+0x42>
		{
			*adrAckCounter = 0;
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	2200      	movs	r2, #0
 8019e26:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 8019e28:	2300      	movs	r3, #0
 8019e2a:	77fb      	strb	r3, [r7, #31]
 8019e2c:	e035      	b.n	8019e9a <RegionIN865AdrNext+0xae>
		}
		else
		{
			if (adrNext->AdrAckCounter >= IN865_ADR_ACK_LIMIT)
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	685b      	ldr	r3, [r3, #4]
 8019e32:	2b3f      	cmp	r3, #63	@ 0x3f
 8019e34:	d904      	bls.n	8019e40 <RegionIN865AdrNext+0x54>
			{
				adrAckReq = true;
 8019e36:	2301      	movs	r3, #1
 8019e38:	77fb      	strb	r3, [r7, #31]
				txPower = IN865_MAX_TX_POWER;
 8019e3a:	2300      	movs	r3, #0
 8019e3c:	777b      	strb	r3, [r7, #29]
 8019e3e:	e001      	b.n	8019e44 <RegionIN865AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 8019e40:	2300      	movs	r3, #0
 8019e42:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (IN865_ADR_ACK_LIMIT + IN865_ADR_ACK_DELAY))
 8019e44:	68fb      	ldr	r3, [r7, #12]
 8019e46:	685b      	ldr	r3, [r3, #4]
 8019e48:	2b5f      	cmp	r3, #95	@ 0x5f
 8019e4a:	d926      	bls.n	8019e9a <RegionIN865AdrNext+0xae>
			{
				if ((adrNext->AdrAckCounter % IN865_ADR_ACK_DELAY) == 1)
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	685b      	ldr	r3, [r3, #4]
 8019e50:	f003 031f 	and.w	r3, r3, #31
 8019e54:	2b01      	cmp	r3, #1
 8019e56:	d120      	bne.n	8019e9a <RegionIN865AdrNext+0xae>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8019e58:	2320      	movs	r3, #32
 8019e5a:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 8019e5c:	7fbb      	ldrb	r3, [r7, #30]
 8019e5e:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	7a9b      	ldrb	r3, [r3, #10]
 8019e64:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionIN865GetPhyParam(&getPhy);
 8019e66:	f107 0318 	add.w	r3, r7, #24
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f7ff fd5c 	bl	8019928 <RegionIN865GetPhyParam>
 8019e70:	4603      	mov	r3, r0
 8019e72:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 8019e74:	697b      	ldr	r3, [r7, #20]
 8019e76:	77bb      	strb	r3, [r7, #30]

					if (datarate == IN865_TX_MIN_DATARATE)
 8019e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d10c      	bne.n	8019e9a <RegionIN865AdrNext+0xae>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 8019e80:	2300      	movs	r3, #0
 8019e82:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	781b      	ldrb	r3, [r3, #0]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d006      	beq.n	8019e9a <RegionIN865AdrNext+0xae>
						{
							// Re-enable default channels
							ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 8019e8c:	4b08      	ldr	r3, [pc, #32]	@ (8019eb0 <RegionIN865AdrNext+0xc4>)
 8019e8e:	881b      	ldrh	r3, [r3, #0]
 8019e90:	f043 0307 	orr.w	r3, r3, #7
 8019e94:	b29a      	uxth	r2, r3
 8019e96:	4b06      	ldr	r3, [pc, #24]	@ (8019eb0 <RegionIN865AdrNext+0xc4>)
 8019e98:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	*drOut = datarate;
 8019e9a:	68bb      	ldr	r3, [r7, #8]
 8019e9c:	7fba      	ldrb	r2, [r7, #30]
 8019e9e:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	7f7a      	ldrb	r2, [r7, #29]
 8019ea4:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 8019ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3720      	adds	r7, #32
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}
 8019eb0:	20006c9c 	.word	0x20006c9c

08019eb4 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b088      	sub	sp, #32
 8019eb8:	af02      	add	r7, sp, #8
 8019eba:	60ba      	str	r2, [r7, #8]
 8019ebc:	607b      	str	r3, [r7, #4]
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	73fb      	strb	r3, [r7, #15]
 8019ec2:	460b      	mov	r3, r1
 8019ec4:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 8019ec6:	f04f 0200 	mov.w	r2, #0
 8019eca:	f04f 0300 	mov.w	r3, #0
 8019ece:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, IN865_RX_MAX_DATARATE);
 8019ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ed6:	2b07      	cmp	r3, #7
 8019ed8:	bfa8      	it	ge
 8019eda:	2307      	movge	r3, #7
 8019edc:	b25a      	sxtb	r2, r3
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7ff fc15 	bl	8019718 <GetBandwidth>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	b2da      	uxtb	r2, r3
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	709a      	strb	r2, [r3, #2]

	if (rxConfigParams->Datarate == DR_7)
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019efc:	2b07      	cmp	r3, #7
 8019efe:	d10b      	bne.n	8019f18 <RegionIN865ComputeRxWindowParameters+0x64>
	{ // FSK
		tSymbol = RegionCommonComputeSymbolTimeFsk(DataratesIN865[rxConfigParams->Datarate]);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019f06:	461a      	mov	r2, r3
 8019f08:	4b16      	ldr	r3, [pc, #88]	@ (8019f64 <RegionIN865ComputeRxWindowParameters+0xb0>)
 8019f0a:	5c9b      	ldrb	r3, [r3, r2]
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	f7fc fd37 	bl	8016980 <RegionCommonComputeSymbolTimeFsk>
 8019f12:	ed87 0b04 	vstr	d0, [r7, #16]
 8019f16:	e012      	b.n	8019f3e <RegionIN865ComputeRxWindowParameters+0x8a>
	}
	else
	{ // LoRa
		tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate]);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019f1e:	461a      	mov	r2, r3
 8019f20:	4b10      	ldr	r3, [pc, #64]	@ (8019f64 <RegionIN865ComputeRxWindowParameters+0xb0>)
 8019f22:	5c9a      	ldrb	r2, [r3, r2]
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019f2a:	4619      	mov	r1, r3
 8019f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8019f68 <RegionIN865ComputeRxWindowParameters+0xb4>)
 8019f2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019f32:	4619      	mov	r1, r3
 8019f34:	4610      	mov	r0, r2
 8019f36:	f7fc fcf5 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 8019f3a:	ed87 0b04 	vstr	d0, [r7, #16]
	}

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	f103 0208 	add.w	r2, r3, #8
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	330c      	adds	r3, #12
 8019f48:	7bb8      	ldrb	r0, [r7, #14]
 8019f4a:	9300      	str	r3, [sp, #0]
 8019f4c:	4613      	mov	r3, r2
 8019f4e:	2203      	movs	r2, #3
 8019f50:	68b9      	ldr	r1, [r7, #8]
 8019f52:	ed97 0b04 	vldr	d0, [r7, #16]
 8019f56:	f7fc fd31 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 8019f5a:	bf00      	nop
 8019f5c:	3718      	adds	r7, #24
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}
 8019f62:	bf00      	nop
 8019f64:	08025324 	.word	0x08025324
 8019f68:	0802532c 	.word	0x0802532c

08019f6c <RegionIN865RxConfig>:

bool RegionIN865RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 8019f6c:	b590      	push	{r4, r7, lr}
 8019f6e:	b091      	sub	sp, #68	@ 0x44
 8019f70:	af0a      	add	r7, sp, #40	@ 0x28
 8019f72:	6078      	str	r0, [r7, #4]
 8019f74:	6039      	str	r1, [r7, #0]
	RadioModems_t modem;
	int8_t dr = rxConfig->Datarate;
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	785b      	ldrb	r3, [r3, #1]
 8019f7a:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	75bb      	strb	r3, [r7, #22]
	int8_t phyDr = 0;
 8019f80:	2300      	movs	r3, #0
 8019f82:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	685b      	ldr	r3, [r3, #4]
 8019f88:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 8019f8a:	4b53      	ldr	r3, [pc, #332]	@ (801a0d8 <RegionIN865RxConfig+0x16c>)
 8019f8c:	689b      	ldr	r3, [r3, #8]
 8019f8e:	4798      	blx	r3
 8019f90:	4603      	mov	r3, r0
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d001      	beq.n	8019f9a <RegionIN865RxConfig+0x2e>
	{
		return false;
 8019f96:	2300      	movs	r3, #0
 8019f98:	e099      	b.n	801a0ce <RegionIN865RxConfig+0x162>
	}

	if (rxConfig->Window == 0)
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	7cdb      	ldrb	r3, [r3, #19]
 8019f9e:	f083 0301 	eor.w	r3, r3, #1
 8019fa2:	b2db      	uxtb	r3, r3
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d023      	beq.n	8019ff0 <RegionIN865RxConfig+0x84>
	{
		// Apply window 1 frequency
		frequency = Channels[rxConfig->Channel].Frequency;
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	781b      	ldrb	r3, [r3, #0]
 8019fac:	4619      	mov	r1, r3
 8019fae:	4a4b      	ldr	r2, [pc, #300]	@ (801a0dc <RegionIN865RxConfig+0x170>)
 8019fb0:	460b      	mov	r3, r1
 8019fb2:	005b      	lsls	r3, r3, #1
 8019fb4:	440b      	add	r3, r1
 8019fb6:	009b      	lsls	r3, r3, #2
 8019fb8:	4413      	add	r3, r2
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	613b      	str	r3, [r7, #16]
		// Apply the alternative RX 1 window frequency, if it is available
		if (Channels[rxConfig->Channel].Rx1Frequency != 0)
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	4619      	mov	r1, r3
 8019fc4:	4a45      	ldr	r2, [pc, #276]	@ (801a0dc <RegionIN865RxConfig+0x170>)
 8019fc6:	460b      	mov	r3, r1
 8019fc8:	005b      	lsls	r3, r3, #1
 8019fca:	440b      	add	r3, r1
 8019fcc:	009b      	lsls	r3, r3, #2
 8019fce:	4413      	add	r3, r2
 8019fd0:	3304      	adds	r3, #4
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d00b      	beq.n	8019ff0 <RegionIN865RxConfig+0x84>
		{
			frequency = Channels[rxConfig->Channel].Rx1Frequency;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	781b      	ldrb	r3, [r3, #0]
 8019fdc:	4619      	mov	r1, r3
 8019fde:	4a3f      	ldr	r2, [pc, #252]	@ (801a0dc <RegionIN865RxConfig+0x170>)
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	005b      	lsls	r3, r3, #1
 8019fe4:	440b      	add	r3, r1
 8019fe6:	009b      	lsls	r3, r3, #2
 8019fe8:	4413      	add	r3, r2
 8019fea:	3304      	adds	r3, #4
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	613b      	str	r3, [r7, #16]
		}
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesIN865[dr];
 8019ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019ff4:	4a3a      	ldr	r2, [pc, #232]	@ (801a0e0 <RegionIN865RxConfig+0x174>)
 8019ff6:	5cd3      	ldrb	r3, [r2, r3]
 8019ff8:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 8019ffa:	4b37      	ldr	r3, [pc, #220]	@ (801a0d8 <RegionIN865RxConfig+0x16c>)
 8019ffc:	691b      	ldr	r3, [r3, #16]
 8019ffe:	6938      	ldr	r0, [r7, #16]
 801a000:	4798      	blx	r3

	// Radio configuration
	if (dr == DR_7)
 801a002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a006:	2b07      	cmp	r3, #7
 801a008:	d125      	bne.n	801a056 <RegionIN865RxConfig+0xea>
	{
		modem = MODEM_FSK;
 801a00a:	2300      	movs	r3, #0
 801a00c:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, 0, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
 801a00e:	4b32      	ldr	r3, [pc, #200]	@ (801a0d8 <RegionIN865RxConfig+0x16c>)
 801a010:	69dc      	ldr	r4, [r3, #28]
 801a012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a016:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a01a:	fb02 f303 	mul.w	r3, r2, r3
 801a01e:	461a      	mov	r2, r3
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	7c9b      	ldrb	r3, [r3, #18]
 801a024:	7df8      	ldrb	r0, [r7, #23]
 801a026:	9309      	str	r3, [sp, #36]	@ 0x24
 801a028:	2300      	movs	r3, #0
 801a02a:	9308      	str	r3, [sp, #32]
 801a02c:	2300      	movs	r3, #0
 801a02e:	9307      	str	r3, [sp, #28]
 801a030:	2300      	movs	r3, #0
 801a032:	9306      	str	r3, [sp, #24]
 801a034:	2301      	movs	r3, #1
 801a036:	9305      	str	r3, [sp, #20]
 801a038:	2300      	movs	r3, #0
 801a03a:	9304      	str	r3, [sp, #16]
 801a03c:	2300      	movs	r3, #0
 801a03e:	9303      	str	r3, [sp, #12]
 801a040:	2300      	movs	r3, #0
 801a042:	9302      	str	r3, [sp, #8]
 801a044:	2305      	movs	r3, #5
 801a046:	9301      	str	r3, [sp, #4]
 801a048:	4b26      	ldr	r3, [pc, #152]	@ (801a0e4 <RegionIN865RxConfig+0x178>)
 801a04a:	9300      	str	r3, [sp, #0]
 801a04c:	2300      	movs	r3, #0
 801a04e:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801a052:	47a0      	blx	r4
 801a054:	e020      	b.n	801a098 <RegionIN865RxConfig+0x12c>
	}
	else
	{
		modem = MODEM_LORA;
 801a056:	2301      	movs	r3, #1
 801a058:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 801a05a:	4b1f      	ldr	r3, [pc, #124]	@ (801a0d8 <RegionIN865RxConfig+0x16c>)
 801a05c:	69dc      	ldr	r4, [r3, #28]
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	789b      	ldrb	r3, [r3, #2]
 801a062:	4619      	mov	r1, r3
 801a064:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	7c9b      	ldrb	r3, [r3, #18]
 801a06c:	7df8      	ldrb	r0, [r7, #23]
 801a06e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a070:	2301      	movs	r3, #1
 801a072:	9308      	str	r3, [sp, #32]
 801a074:	2300      	movs	r3, #0
 801a076:	9307      	str	r3, [sp, #28]
 801a078:	2300      	movs	r3, #0
 801a07a:	9306      	str	r3, [sp, #24]
 801a07c:	2300      	movs	r3, #0
 801a07e:	9305      	str	r3, [sp, #20]
 801a080:	2300      	movs	r3, #0
 801a082:	9304      	str	r3, [sp, #16]
 801a084:	2300      	movs	r3, #0
 801a086:	9303      	str	r3, [sp, #12]
 801a088:	2300      	movs	r3, #0
 801a08a:	9302      	str	r3, [sp, #8]
 801a08c:	2308      	movs	r3, #8
 801a08e:	9301      	str	r3, [sp, #4]
 801a090:	2300      	movs	r3, #0
 801a092:	9300      	str	r3, [sp, #0]
 801a094:	2301      	movs	r3, #1
 801a096:	47a0      	blx	r4
	}

	if (rxConfig->RepeaterSupport == true)
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	7c5b      	ldrb	r3, [r3, #17]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d005      	beq.n	801a0ac <RegionIN865RxConfig+0x140>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 801a0a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0a4:	4a10      	ldr	r2, [pc, #64]	@ (801a0e8 <RegionIN865RxConfig+0x17c>)
 801a0a6:	5cd3      	ldrb	r3, [r2, r3]
 801a0a8:	75bb      	strb	r3, [r7, #22]
 801a0aa:	e004      	b.n	801a0b6 <RegionIN865RxConfig+0x14a>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateIN865[dr];
 801a0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0b0:	4a0e      	ldr	r2, [pc, #56]	@ (801a0ec <RegionIN865RxConfig+0x180>)
 801a0b2:	5cd3      	ldrb	r3, [r2, r3]
 801a0b4:	75bb      	strb	r3, [r7, #22]
	}
	Radio.SetMaxPayloadLength(modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 801a0b6:	4b08      	ldr	r3, [pc, #32]	@ (801a0d8 <RegionIN865RxConfig+0x16c>)
 801a0b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a0ba:	7dba      	ldrb	r2, [r7, #22]
 801a0bc:	320d      	adds	r2, #13
 801a0be:	b2d1      	uxtb	r1, r2
 801a0c0:	7dfa      	ldrb	r2, [r7, #23]
 801a0c2:	4610      	mov	r0, r2
 801a0c4:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 801a0c6:	683b      	ldr	r3, [r7, #0]
 801a0c8:	7bfa      	ldrb	r2, [r7, #15]
 801a0ca:	701a      	strb	r2, [r3, #0]
	return true;
 801a0cc:	2301      	movs	r3, #1
}
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	371c      	adds	r7, #28
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd90      	pop	{r4, r7, pc}
 801a0d6:	bf00      	nop
 801a0d8:	08025450 	.word	0x08025450
 801a0dc:	2000786c 	.word	0x2000786c
 801a0e0:	08025324 	.word	0x08025324
 801a0e4:	00014585 	.word	0x00014585
 801a0e8:	08025354 	.word	0x08025354
 801a0ec:	0802534c 	.word	0x0802534c

0801a0f0 <RegionIN865TxConfig>:

bool RegionIN865TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 801a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0f2:	b093      	sub	sp, #76	@ 0x4c
 801a0f4:	af0a      	add	r7, sp, #40	@ 0x28
 801a0f6:	60f8      	str	r0, [r7, #12]
 801a0f8:	60b9      	str	r1, [r7, #8]
 801a0fa:	607a      	str	r2, [r7, #4]
	RadioModems_t modem;
	int8_t phyDr = DataratesIN865[txConfig->Datarate];
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a102:	461a      	mov	r2, r3
 801a104:	4b56      	ldr	r3, [pc, #344]	@ (801a260 <RegionIN865TxConfig+0x170>)
 801a106:	5c9b      	ldrb	r3, [r3, r2]
 801a108:	77bb      	strb	r3, [r7, #30]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	781b      	ldrb	r3, [r3, #0]
 801a114:	4619      	mov	r1, r3
 801a116:	4a53      	ldr	r2, [pc, #332]	@ (801a264 <RegionIN865TxConfig+0x174>)
 801a118:	460b      	mov	r3, r1
 801a11a:	005b      	lsls	r3, r3, #1
 801a11c:	440b      	add	r3, r1
 801a11e:	009b      	lsls	r3, r3, #2
 801a120:	4413      	add	r3, r2
 801a122:	3309      	adds	r3, #9
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	4a50      	ldr	r2, [pc, #320]	@ (801a268 <RegionIN865TxConfig+0x178>)
 801a128:	015b      	lsls	r3, r3, #5
 801a12a:	4413      	add	r3, r2
 801a12c:	3302      	adds	r3, #2
 801a12e:	f993 1000 	ldrsb.w	r1, [r3]
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801a138:	4b4c      	ldr	r3, [pc, #304]	@ (801a26c <RegionIN865TxConfig+0x17c>)
 801a13a:	f7ff fb0d 	bl	8019758 <LimitTxPower>
 801a13e:	4603      	mov	r3, r0
 801a140:	777b      	strb	r3, [r7, #29]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 801a142:	68fb      	ldr	r3, [r7, #12]
 801a144:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a148:	4618      	mov	r0, r3
 801a14a:	f7ff fae5 	bl	8019718 <GetBandwidth>
 801a14e:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 801a150:	2300      	movs	r3, #0
 801a152:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	edd3 7a01 	vldr	s15, [r3, #4]
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	ed93 7a02 	vldr	s14, [r3, #8]
 801a160:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801a164:	eef0 0a47 	vmov.f32	s1, s14
 801a168:	eeb0 0a67 	vmov.f32	s0, s15
 801a16c:	4618      	mov	r0, r3
 801a16e:	f7fc fcb1 	bl	8016ad4 <RegionCommonComputeTxPower>
 801a172:	4603      	mov	r3, r0
 801a174:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 801a176:	4b3e      	ldr	r3, [pc, #248]	@ (801a270 <RegionIN865TxConfig+0x180>)
 801a178:	691a      	ldr	r2, [r3, #16]
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	781b      	ldrb	r3, [r3, #0]
 801a17e:	4618      	mov	r0, r3
 801a180:	4938      	ldr	r1, [pc, #224]	@ (801a264 <RegionIN865TxConfig+0x174>)
 801a182:	4603      	mov	r3, r0
 801a184:	005b      	lsls	r3, r3, #1
 801a186:	4403      	add	r3, r0
 801a188:	009b      	lsls	r3, r3, #2
 801a18a:	440b      	add	r3, r1
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	4618      	mov	r0, r3
 801a190:	4790      	blx	r2

	if (txConfig->Datarate == DR_7)
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a198:	2b07      	cmp	r3, #7
 801a19a:	d124      	bne.n	801a1e6 <RegionIN865TxConfig+0xf6>
	{ // High Speed FSK channel
		modem = MODEM_FSK;
 801a19c:	2300      	movs	r3, #0
 801a19e:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000);
 801a1a0:	4b33      	ldr	r3, [pc, #204]	@ (801a270 <RegionIN865TxConfig+0x180>)
 801a1a2:	6a1e      	ldr	r6, [r3, #32]
 801a1a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801a1a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a1ac:	fb02 f303 	mul.w	r3, r2, r3
 801a1b0:	461a      	mov	r2, r3
 801a1b2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801a1b6:	7ff8      	ldrb	r0, [r7, #31]
 801a1b8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801a1bc:	9308      	str	r3, [sp, #32]
 801a1be:	2300      	movs	r3, #0
 801a1c0:	9307      	str	r3, [sp, #28]
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	9306      	str	r3, [sp, #24]
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	9305      	str	r3, [sp, #20]
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	9304      	str	r3, [sp, #16]
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	9303      	str	r3, [sp, #12]
 801a1d2:	2305      	movs	r3, #5
 801a1d4:	9302      	str	r3, [sp, #8]
 801a1d6:	2300      	movs	r3, #0
 801a1d8:	9301      	str	r3, [sp, #4]
 801a1da:	9200      	str	r2, [sp, #0]
 801a1dc:	69bb      	ldr	r3, [r7, #24]
 801a1de:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801a1e2:	47b0      	blx	r6
 801a1e4:	e01d      	b.n	801a222 <RegionIN865TxConfig+0x132>
	}
	else
	{
		modem = MODEM_LORA;
 801a1e6:	2301      	movs	r3, #1
 801a1e8:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 801a1ea:	4b21      	ldr	r3, [pc, #132]	@ (801a270 <RegionIN865TxConfig+0x180>)
 801a1ec:	6a1e      	ldr	r6, [r3, #32]
 801a1ee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801a1f2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801a1f6:	7ff8      	ldrb	r0, [r7, #31]
 801a1f8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801a1fc:	9208      	str	r2, [sp, #32]
 801a1fe:	2200      	movs	r2, #0
 801a200:	9207      	str	r2, [sp, #28]
 801a202:	2200      	movs	r2, #0
 801a204:	9206      	str	r2, [sp, #24]
 801a206:	2200      	movs	r2, #0
 801a208:	9205      	str	r2, [sp, #20]
 801a20a:	2201      	movs	r2, #1
 801a20c:	9204      	str	r2, [sp, #16]
 801a20e:	2200      	movs	r2, #0
 801a210:	9203      	str	r2, [sp, #12]
 801a212:	2208      	movs	r2, #8
 801a214:	9202      	str	r2, [sp, #8]
 801a216:	2201      	movs	r2, #1
 801a218:	9201      	str	r2, [sp, #4]
 801a21a:	9300      	str	r3, [sp, #0]
 801a21c:	69bb      	ldr	r3, [r7, #24]
 801a21e:	2200      	movs	r2, #0
 801a220:	47b0      	blx	r6
	}

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(modem, txConfig->PktLen);
 801a222:	4b13      	ldr	r3, [pc, #76]	@ (801a270 <RegionIN865TxConfig+0x180>)
 801a224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a226:	68fa      	ldr	r2, [r7, #12]
 801a228:	8992      	ldrh	r2, [r2, #12]
 801a22a:	b2d1      	uxtb	r1, r2
 801a22c:	7ffa      	ldrb	r2, [r7, #31]
 801a22e:	4610      	mov	r0, r2
 801a230:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(modem, txConfig->PktLen);
 801a232:	4b0f      	ldr	r3, [pc, #60]	@ (801a270 <RegionIN865TxConfig+0x180>)
 801a234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a236:	68fa      	ldr	r2, [r7, #12]
 801a238:	8992      	ldrh	r2, [r2, #12]
 801a23a:	b2d1      	uxtb	r1, r2
 801a23c:	7ffa      	ldrb	r2, [r7, #31]
 801a23e:	4610      	mov	r0, r2
 801a240:	4798      	blx	r3
 801a242:	4603      	mov	r3, r0
 801a244:	2200      	movs	r2, #0
 801a246:	461c      	mov	r4, r3
 801a248:	4615      	mov	r5, r2
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	e9c3 4500 	strd	r4, r5, [r3]

	*txPower = txPowerLimited;
 801a250:	68bb      	ldr	r3, [r7, #8]
 801a252:	7f7a      	ldrb	r2, [r7, #29]
 801a254:	701a      	strb	r2, [r3, #0]
	return true;
 801a256:	2301      	movs	r3, #1
}
 801a258:	4618      	mov	r0, r3
 801a25a:	3724      	adds	r7, #36	@ 0x24
 801a25c:	46bd      	mov	sp, r7
 801a25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a260:	08025324 	.word	0x08025324
 801a264:	2000786c 	.word	0x2000786c
 801a268:	20000210 	.word	0x20000210
 801a26c:	20006c9c 	.word	0x20006c9c
 801a270:	08025450 	.word	0x08025450

0801a274 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 801a274:	b590      	push	{r4, r7, lr}
 801a276:	b093      	sub	sp, #76	@ 0x4c
 801a278:	af00      	add	r7, sp, #0
 801a27a:	60f8      	str	r0, [r7, #12]
 801a27c:	60b9      	str	r1, [r7, #8]
 801a27e:	607a      	str	r2, [r7, #4]
 801a280:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 801a282:	2307      	movs	r3, #7
 801a284:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 801a288:	2300      	movs	r3, #0
 801a28a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t bytesProcessed = 0;
 801a28e:	2300      	movs	r3, #0
 801a290:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t chMask = 0;
 801a294:	2300      	movs	r3, #0
 801a296:	877b      	strh	r3, [r7, #58]	@ 0x3a
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	while (bytesProcessed < linkAdrReq->PayloadSize)
 801a298:	e083      	b.n	801a3a2 <RegionIN865LinkAdrReq+0x12e>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	681a      	ldr	r2, [r3, #0]
 801a29e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801a2a2:	4413      	add	r3, r2
 801a2a4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801a2a8:	4611      	mov	r1, r2
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7fc fa62 	bl	8016774 <RegionCommonParseLinkAdrReq>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		if (nextIndex == 0)
 801a2b6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d079      	beq.n	801a3b2 <RegionIN865LinkAdrReq+0x13e>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 801a2be:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801a2c2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801a2c6:	4413      	add	r3, r2
 801a2c8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 801a2cc:	2307      	movs	r3, #7
 801a2ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		// Setup temporary channels mask
		chMask = linkAdrParams.ChMask;
 801a2d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801a2d6:	877b      	strh	r3, [r7, #58]	@ 0x3a

		// Verify channels mask
		if ((linkAdrParams.ChMaskCtrl == 0) && (chMask == 0))
 801a2d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d109      	bne.n	801a2f4 <RegionIN865LinkAdrReq+0x80>
 801a2e0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d106      	bne.n	801a2f4 <RegionIN865LinkAdrReq+0x80>
		{
			status &= 0xFE; // Channel mask KO
 801a2e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801a2ea:	f023 0301 	bic.w	r3, r3, #1
 801a2ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801a2f2:	e056      	b.n	801a3a2 <RegionIN865LinkAdrReq+0x12e>
		}
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 801a2f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d003      	beq.n	801a304 <RegionIN865LinkAdrReq+0x90>
 801a2fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a300:	2b05      	cmp	r3, #5
 801a302:	d903      	bls.n	801a30c <RegionIN865LinkAdrReq+0x98>
				 (linkAdrParams.ChMaskCtrl >= 7))
 801a304:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 801a308:	2b06      	cmp	r3, #6
 801a30a:	d906      	bls.n	801a31a <RegionIN865LinkAdrReq+0xa6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 801a30c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801a310:	f023 0301 	bic.w	r3, r3, #1
 801a314:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801a318:	e043      	b.n	801a3a2 <RegionIN865LinkAdrReq+0x12e>
		}
		else
		{
			for (uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++)
 801a31a:	2300      	movs	r3, #0
 801a31c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801a320:	e03b      	b.n	801a39a <RegionIN865LinkAdrReq+0x126>
			{
				if (linkAdrParams.ChMaskCtrl == 6)
 801a322:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801a326:	2b06      	cmp	r3, #6
 801a328:	d117      	bne.n	801a35a <RegionIN865LinkAdrReq+0xe6>
				{
					if (Channels[i].Frequency != 0)
 801a32a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801a32e:	4959      	ldr	r1, [pc, #356]	@ (801a494 <RegionIN865LinkAdrReq+0x220>)
 801a330:	4613      	mov	r3, r2
 801a332:	005b      	lsls	r3, r3, #1
 801a334:	4413      	add	r3, r2
 801a336:	009b      	lsls	r3, r3, #2
 801a338:	440b      	add	r3, r1
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d027      	beq.n	801a390 <RegionIN865LinkAdrReq+0x11c>
					{
						chMask |= 1 << i;
 801a340:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801a344:	2201      	movs	r2, #1
 801a346:	fa02 f303 	lsl.w	r3, r2, r3
 801a34a:	b21a      	sxth	r2, r3
 801a34c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a34e:	b21b      	sxth	r3, r3
 801a350:	4313      	orrs	r3, r2
 801a352:	b21b      	sxth	r3, r3
 801a354:	b29b      	uxth	r3, r3
 801a356:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801a358:	e01a      	b.n	801a390 <RegionIN865LinkAdrReq+0x11c>
					}
				}
				else
				{
					if (((chMask & (1 << i)) != 0) &&
 801a35a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a35c:	461a      	mov	r2, r3
 801a35e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801a362:	fa42 f303 	asr.w	r3, r2, r3
 801a366:	f003 0301 	and.w	r3, r3, #1
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d010      	beq.n	801a390 <RegionIN865LinkAdrReq+0x11c>
						(Channels[i].Frequency == 0))
 801a36e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801a372:	4948      	ldr	r1, [pc, #288]	@ (801a494 <RegionIN865LinkAdrReq+0x220>)
 801a374:	4613      	mov	r3, r2
 801a376:	005b      	lsls	r3, r3, #1
 801a378:	4413      	add	r3, r2
 801a37a:	009b      	lsls	r3, r3, #2
 801a37c:	440b      	add	r3, r1
 801a37e:	681b      	ldr	r3, [r3, #0]
					if (((chMask & (1 << i)) != 0) &&
 801a380:	2b00      	cmp	r3, #0
 801a382:	d105      	bne.n	801a390 <RegionIN865LinkAdrReq+0x11c>
					{					// Trying to enable an undefined channel
						status &= 0xFE; // Channel mask KO
 801a384:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801a388:	f023 0301 	bic.w	r3, r3, #1
 801a38c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			for (uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++)
 801a390:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801a394:	3301      	adds	r3, #1
 801a396:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801a39a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801a39e:	2b0f      	cmp	r3, #15
 801a3a0:	d9bf      	bls.n	801a322 <RegionIN865LinkAdrReq+0xae>
	while (bytesProcessed < linkAdrReq->PayloadSize)
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	791b      	ldrb	r3, [r3, #4]
 801a3a6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	f4ff af75 	bcc.w	801a29a <RegionIN865LinkAdrReq+0x26>
 801a3b0:	e000      	b.n	801a3b4 <RegionIN865LinkAdrReq+0x140>
			break; // break loop, since no more request has been found
 801a3b2:	bf00      	nop
			}
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	795b      	ldrb	r3, [r3, #5]
 801a3be:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionIN865GetPhyParam(&getPhy);
 801a3c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f7ff faae 	bl	8019928 <RegionIN865GetPhyParam>
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 801a3d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801a3d4:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	799b      	ldrb	r3, [r3, #6]
 801a3da:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801a3dc:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801a3e0:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801a3e2:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 801a3e6:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801a3e8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801a3ec:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801a3f4:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801a3fc:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	7a5b      	ldrb	r3, [r3, #9]
 801a402:	b25b      	sxtb	r3, r3
 801a404:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 801a406:	2310      	movs	r3, #16
 801a408:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = &chMask;
 801a40a:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 801a40e:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 801a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a412:	b25b      	sxtb	r3, r3
 801a414:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 801a418:	2307      	movs	r3, #7
 801a41a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 801a41e:	4b1d      	ldr	r3, [pc, #116]	@ (801a494 <RegionIN865LinkAdrReq+0x220>)
 801a420:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 801a422:	230a      	movs	r3, #10
 801a424:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 801a428:	2300      	movs	r3, #0
 801a42a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 801a42e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 801a432:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801a436:	1c9a      	adds	r2, r3, #2
 801a438:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801a43c:	1c59      	adds	r1, r3, #1
 801a43e:	f107 0014 	add.w	r0, r7, #20
 801a442:	4623      	mov	r3, r4
 801a444:	f7fc f9e8 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 801a448:	4603      	mov	r3, r0
 801a44a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	// Update channelsMask if everything is correct
	if (status == 0x07)
 801a44e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801a452:	2b07      	cmp	r3, #7
 801a454:	d107      	bne.n	801a466 <RegionIN865LinkAdrReq+0x1f2>
	{
		// Set the channels mask to a default value
		memset(ChannelsMask, 0, sizeof(ChannelsMask));
 801a456:	220c      	movs	r2, #12
 801a458:	2100      	movs	r1, #0
 801a45a:	480f      	ldr	r0, [pc, #60]	@ (801a498 <RegionIN865LinkAdrReq+0x224>)
 801a45c:	f007 fef6 	bl	802224c <memset>
		// Update the channels mask
		ChannelsMask[0] = chMask;
 801a460:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a462:	4b0d      	ldr	r3, [pc, #52]	@ (801a498 <RegionIN865LinkAdrReq+0x224>)
 801a464:	801a      	strh	r2, [r3, #0]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 801a466:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 801a46a:	68bb      	ldr	r3, [r7, #8]
 801a46c:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 801a46e:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 801a476:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 801a47e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a480:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801a484:	701a      	strb	r2, [r3, #0]

	return status;
 801a486:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801a48a:	4618      	mov	r0, r3
 801a48c:	374c      	adds	r7, #76	@ 0x4c
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd90      	pop	{r4, r7, pc}
 801a492:	bf00      	nop
 801a494:	2000786c 	.word	0x2000786c
 801a498:	20006c9c 	.word	0x20006c9c

0801a49c <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b084      	sub	sp, #16
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 801a4a4:	2307      	movs	r3, #7
 801a4a6:	73fb      	strb	r3, [r7, #15]

	// Verify radio frequency
	if (Radio.CheckRfFrequency(rxParamSetupReq->Frequency) == false)
 801a4a8:	4b19      	ldr	r3, [pc, #100]	@ (801a510 <RegionIN865RxParamSetupReq+0x74>)
 801a4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4ac:	687a      	ldr	r2, [r7, #4]
 801a4ae:	6852      	ldr	r2, [r2, #4]
 801a4b0:	4610      	mov	r0, r2
 801a4b2:	4798      	blx	r3
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	f083 0301 	eor.w	r3, r3, #1
 801a4ba:	b2db      	uxtb	r3, r3
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d003      	beq.n	801a4c8 <RegionIN865RxParamSetupReq+0x2c>
	{
		status &= 0xFE; // Channel frequency KO
 801a4c0:	7bfb      	ldrb	r3, [r7, #15]
 801a4c2:	f023 0301 	bic.w	r3, r3, #1
 801a4c6:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE) == false)
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	f993 3000 	ldrsb.w	r3, [r3]
 801a4ce:	2207      	movs	r2, #7
 801a4d0:	2100      	movs	r1, #0
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	f7fb ff48 	bl	8016368 <RegionCommonValueInRange>
 801a4d8:	4603      	mov	r3, r0
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d103      	bne.n	801a4e6 <RegionIN865RxParamSetupReq+0x4a>
	{
		status &= 0xFD; // Datarate KO
 801a4de:	7bfb      	ldrb	r3, [r7, #15]
 801a4e0:	f023 0302 	bic.w	r3, r3, #2
 801a4e4:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET) == false)
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a4ec:	2207      	movs	r2, #7
 801a4ee:	2100      	movs	r1, #0
 801a4f0:	4618      	mov	r0, r3
 801a4f2:	f7fb ff39 	bl	8016368 <RegionCommonValueInRange>
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d103      	bne.n	801a504 <RegionIN865RxParamSetupReq+0x68>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 801a4fc:	7bfb      	ldrb	r3, [r7, #15]
 801a4fe:	f023 0304 	bic.w	r3, r3, #4
 801a502:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 801a504:	7bfb      	ldrb	r3, [r7, #15]
}
 801a506:	4618      	mov	r0, r3
 801a508:	3710      	adds	r7, #16
 801a50a:	46bd      	mov	sp, r7
 801a50c:	bd80      	pop	{r7, pc}
 801a50e:	bf00      	nop
 801a510:	08025450 	.word	0x08025450

0801a514 <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 801a514:	b580      	push	{r7, lr}
 801a516:	b086      	sub	sp, #24
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 801a51c:	2303      	movs	r3, #3
 801a51e:	75fb      	strb	r3, [r7, #23]
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	if (newChannelReq->NewChannel->Frequency == 0)
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	681b      	ldr	r3, [r3, #0]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d114      	bne.n	801a554 <RegionIN865NewChannelReq+0x40>
	{
		channelRemove.ChannelId = newChannelReq->ChannelId;
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801a530:	b2db      	uxtb	r3, r3
 801a532:	723b      	strb	r3, [r7, #8]

		// Remove
		if (RegionIN865ChannelsRemove(&channelRemove) == false)
 801a534:	f107 0308 	add.w	r3, r7, #8
 801a538:	4618      	mov	r0, r3
 801a53a:	f000 fa81 	bl	801aa40 <RegionIN865ChannelsRemove>
 801a53e:	4603      	mov	r3, r0
 801a540:	f083 0301 	eor.w	r3, r3, #1
 801a544:	b2db      	uxtb	r3, r3
 801a546:	2b00      	cmp	r3, #0
 801a548:	d03b      	beq.n	801a5c2 <RegionIN865NewChannelReq+0xae>
		{
			status &= 0xFC;
 801a54a:	7dfb      	ldrb	r3, [r7, #23]
 801a54c:	f023 0303 	bic.w	r3, r3, #3
 801a550:	75fb      	strb	r3, [r7, #23]
 801a552:	e036      	b.n	801a5c2 <RegionIN865NewChannelReq+0xae>
		}
	}
	else
	{
		channelAdd.NewChannel = newChannelReq->NewChannel;
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	60fb      	str	r3, [r7, #12]
		channelAdd.ChannelId = newChannelReq->ChannelId;
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801a560:	b2db      	uxtb	r3, r3
 801a562:	743b      	strb	r3, [r7, #16]

		switch (RegionIN865ChannelAdd(&channelAdd))
 801a564:	f107 030c 	add.w	r3, r7, #12
 801a568:	4618      	mov	r0, r3
 801a56a:	f000 f9a3 	bl	801a8b4 <RegionIN865ChannelAdd>
 801a56e:	4603      	mov	r3, r0
 801a570:	2b06      	cmp	r3, #6
 801a572:	d820      	bhi.n	801a5b6 <RegionIN865NewChannelReq+0xa2>
 801a574:	a201      	add	r2, pc, #4	@ (adr r2, 801a57c <RegionIN865NewChannelReq+0x68>)
 801a576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a57a:	bf00      	nop
 801a57c:	0801a5c1 	.word	0x0801a5c1
 801a580:	0801a5b7 	.word	0x0801a5b7
 801a584:	0801a5b7 	.word	0x0801a5b7
 801a588:	0801a5b7 	.word	0x0801a5b7
 801a58c:	0801a599 	.word	0x0801a599
 801a590:	0801a5a3 	.word	0x0801a5a3
 801a594:	0801a5ad 	.word	0x0801a5ad
		{
			break;
		}
		case LORAMAC_STATUS_FREQUENCY_INVALID:
		{
			status &= 0xFE;
 801a598:	7dfb      	ldrb	r3, [r7, #23]
 801a59a:	f023 0301 	bic.w	r3, r3, #1
 801a59e:	75fb      	strb	r3, [r7, #23]
			break;
 801a5a0:	e00f      	b.n	801a5c2 <RegionIN865NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_DATARATE_INVALID:
		{
			status &= 0xFD;
 801a5a2:	7dfb      	ldrb	r3, [r7, #23]
 801a5a4:	f023 0302 	bic.w	r3, r3, #2
 801a5a8:	75fb      	strb	r3, [r7, #23]
			break;
 801a5aa:	e00a      	b.n	801a5c2 <RegionIN865NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		{
			status &= 0xFC;
 801a5ac:	7dfb      	ldrb	r3, [r7, #23]
 801a5ae:	f023 0303 	bic.w	r3, r3, #3
 801a5b2:	75fb      	strb	r3, [r7, #23]
			break;
 801a5b4:	e005      	b.n	801a5c2 <RegionIN865NewChannelReq+0xae>
		}
		default:
		{
			status &= 0xFC;
 801a5b6:	7dfb      	ldrb	r3, [r7, #23]
 801a5b8:	f023 0303 	bic.w	r3, r3, #3
 801a5bc:	75fb      	strb	r3, [r7, #23]
			break;
 801a5be:	e000      	b.n	801a5c2 <RegionIN865NewChannelReq+0xae>
			break;
 801a5c0:	bf00      	nop
		}
		}
	}

	return status;
 801a5c2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	3718      	adds	r7, #24
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}

0801a5cc <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 801a5cc:	b480      	push	{r7}
 801a5ce:	b083      	sub	sp, #12
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
	return -1;
 801a5d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a5d8:	4618      	mov	r0, r3
 801a5da:	370c      	adds	r7, #12
 801a5dc:	46bd      	mov	sp, r7
 801a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e2:	4770      	bx	lr

0801a5e4 <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b084      	sub	sp, #16
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 801a5ec:	2303      	movs	r3, #3
 801a5ee:	73fb      	strb	r3, [r7, #15]
	uint8_t band = 0;
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	73bb      	strb	r3, [r7, #14]

	// Verify if the frequency is supported
	if (VerifyTxFreq(dlChannelReq->Rx1Frequency, &band) == false)
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	f107 020e 	add.w	r2, r7, #14
 801a5fc:	4611      	mov	r1, r2
 801a5fe:	4618      	mov	r0, r3
 801a600:	f7ff f8c6 	bl	8019790 <VerifyTxFreq>
 801a604:	4603      	mov	r3, r0
 801a606:	f083 0301 	eor.w	r3, r3, #1
 801a60a:	b2db      	uxtb	r3, r3
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d003      	beq.n	801a618 <RegionIN865DlChannelReq+0x34>
	{
		status &= 0xFE;
 801a610:	7bfb      	ldrb	r3, [r7, #15]
 801a612:	f023 0301 	bic.w	r3, r3, #1
 801a616:	73fb      	strb	r3, [r7, #15]
	}

	// Verify if an uplink frequency exists
	if (Channels[dlChannelReq->ChannelId].Frequency == 0)
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	781b      	ldrb	r3, [r3, #0]
 801a61c:	4619      	mov	r1, r3
 801a61e:	4a11      	ldr	r2, [pc, #68]	@ (801a664 <RegionIN865DlChannelReq+0x80>)
 801a620:	460b      	mov	r3, r1
 801a622:	005b      	lsls	r3, r3, #1
 801a624:	440b      	add	r3, r1
 801a626:	009b      	lsls	r3, r3, #2
 801a628:	4413      	add	r3, r2
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d103      	bne.n	801a638 <RegionIN865DlChannelReq+0x54>
	{
		status &= 0xFD;
 801a630:	7bfb      	ldrb	r3, [r7, #15]
 801a632:	f023 0302 	bic.w	r3, r3, #2
 801a636:	73fb      	strb	r3, [r7, #15]
	}

	// Apply Rx1 frequency, if the status is OK
	if (status == 0x03)
 801a638:	7bfb      	ldrb	r3, [r7, #15]
 801a63a:	2b03      	cmp	r3, #3
 801a63c:	d10c      	bne.n	801a658 <RegionIN865DlChannelReq+0x74>
	{
		Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	781b      	ldrb	r3, [r3, #0]
 801a642:	4618      	mov	r0, r3
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	685a      	ldr	r2, [r3, #4]
 801a648:	4906      	ldr	r1, [pc, #24]	@ (801a664 <RegionIN865DlChannelReq+0x80>)
 801a64a:	4603      	mov	r3, r0
 801a64c:	005b      	lsls	r3, r3, #1
 801a64e:	4403      	add	r3, r0
 801a650:	009b      	lsls	r3, r3, #2
 801a652:	440b      	add	r3, r1
 801a654:	3304      	adds	r3, #4
 801a656:	601a      	str	r2, [r3, #0]
	}

	return status;
 801a658:	7bfb      	ldrb	r3, [r7, #15]
}
 801a65a:	4618      	mov	r0, r3
 801a65c:	3710      	adds	r7, #16
 801a65e:	46bd      	mov	sp, r7
 801a660:	bd80      	pop	{r7, pc}
 801a662:	bf00      	nop
 801a664:	2000786c 	.word	0x2000786c

0801a668 <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr(AlternateDrParams_t *alternateDr)
{
 801a668:	b480      	push	{r7}
 801a66a:	b085      	sub	sp, #20
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 801a670:	2300      	movs	r3, #0
 801a672:	73fb      	strb	r3, [r7, #15]

	if ((alternateDr->NbTrials % 48) == 0)
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	881a      	ldrh	r2, [r3, #0]
 801a678:	4b23      	ldr	r3, [pc, #140]	@ (801a708 <RegionIN865AlternateDr+0xa0>)
 801a67a:	fba3 1302 	umull	r1, r3, r3, r2
 801a67e:	0959      	lsrs	r1, r3, #5
 801a680:	460b      	mov	r3, r1
 801a682:	005b      	lsls	r3, r3, #1
 801a684:	440b      	add	r3, r1
 801a686:	011b      	lsls	r3, r3, #4
 801a688:	1ad3      	subs	r3, r2, r3
 801a68a:	b29b      	uxth	r3, r3
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d102      	bne.n	801a696 <RegionIN865AlternateDr+0x2e>
	{
		datarate = DR_0;
 801a690:	2300      	movs	r3, #0
 801a692:	73fb      	strb	r3, [r7, #15]
 801a694:	e030      	b.n	801a6f8 <RegionIN865AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 32) == 0)
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	881b      	ldrh	r3, [r3, #0]
 801a69a:	f003 031f 	and.w	r3, r3, #31
 801a69e:	b29b      	uxth	r3, r3
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d102      	bne.n	801a6aa <RegionIN865AlternateDr+0x42>
	{
		datarate = DR_1;
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	73fb      	strb	r3, [r7, #15]
 801a6a8:	e026      	b.n	801a6f8 <RegionIN865AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 24) == 0)
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	881a      	ldrh	r2, [r3, #0]
 801a6ae:	4b16      	ldr	r3, [pc, #88]	@ (801a708 <RegionIN865AlternateDr+0xa0>)
 801a6b0:	fba3 1302 	umull	r1, r3, r3, r2
 801a6b4:	0919      	lsrs	r1, r3, #4
 801a6b6:	460b      	mov	r3, r1
 801a6b8:	005b      	lsls	r3, r3, #1
 801a6ba:	440b      	add	r3, r1
 801a6bc:	00db      	lsls	r3, r3, #3
 801a6be:	1ad3      	subs	r3, r2, r3
 801a6c0:	b29b      	uxth	r3, r3
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d102      	bne.n	801a6cc <RegionIN865AlternateDr+0x64>
	{
		datarate = DR_2;
 801a6c6:	2302      	movs	r3, #2
 801a6c8:	73fb      	strb	r3, [r7, #15]
 801a6ca:	e015      	b.n	801a6f8 <RegionIN865AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 16) == 0)
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	881b      	ldrh	r3, [r3, #0]
 801a6d0:	f003 030f 	and.w	r3, r3, #15
 801a6d4:	b29b      	uxth	r3, r3
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d102      	bne.n	801a6e0 <RegionIN865AlternateDr+0x78>
	{
		datarate = DR_3;
 801a6da:	2303      	movs	r3, #3
 801a6dc:	73fb      	strb	r3, [r7, #15]
 801a6de:	e00b      	b.n	801a6f8 <RegionIN865AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 8) == 0)
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	881b      	ldrh	r3, [r3, #0]
 801a6e4:	f003 0307 	and.w	r3, r3, #7
 801a6e8:	b29b      	uxth	r3, r3
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d102      	bne.n	801a6f4 <RegionIN865AlternateDr+0x8c>
	{
		datarate = DR_4;
 801a6ee:	2304      	movs	r3, #4
 801a6f0:	73fb      	strb	r3, [r7, #15]
 801a6f2:	e001      	b.n	801a6f8 <RegionIN865AlternateDr+0x90>
	}
	else
	{
		datarate = DR_5;
 801a6f4:	2305      	movs	r3, #5
 801a6f6:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 801a6f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	3714      	adds	r7, #20
 801a700:	46bd      	mov	sp, r7
 801a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a706:	4770      	bx	lr
 801a708:	aaaaaaab 	.word	0xaaaaaaab

0801a70c <RegionIN865CalcBackOff>:

void RegionIN865CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b08a      	sub	sp, #40	@ 0x28
 801a710:	af00      	add	r7, sp, #0
 801a712:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 801a714:	4b11      	ldr	r3, [pc, #68]	@ (801a75c <RegionIN865CalcBackOff+0x50>)
 801a716:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 801a718:	4b11      	ldr	r3, [pc, #68]	@ (801a760 <RegionIN865CalcBackOff+0x54>)
 801a71a:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	785b      	ldrb	r3, [r3, #1]
 801a720:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	781b      	ldrb	r3, [r3, #0]
 801a726:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	789b      	ldrb	r3, [r3, #2]
 801a72c:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	78db      	ldrb	r3, [r3, #3]
 801a732:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a73a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801a744:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 801a748:	f107 0308 	add.w	r3, r7, #8
 801a74c:	4618      	mov	r0, r3
 801a74e:	f7fc f9f3 	bl	8016b38 <RegionCommonCalcBackOff>
}
 801a752:	bf00      	nop
 801a754:	3728      	adds	r7, #40	@ 0x28
 801a756:	46bd      	mov	sp, r7
 801a758:	bd80      	pop	{r7, pc}
 801a75a:	bf00      	nop
 801a75c:	2000786c 	.word	0x2000786c
 801a760:	20000210 	.word	0x20000210

0801a764 <RegionIN865NextChannel>:

bool RegionIN865NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 801a764:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a768:	b092      	sub	sp, #72	@ 0x48
 801a76a:	af04      	add	r7, sp, #16
 801a76c:	60f8      	str	r0, [r7, #12]
 801a76e:	60b9      	str	r1, [r7, #8]
 801a770:	607a      	str	r2, [r7, #4]
 801a772:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 801a774:	2300      	movs	r3, #0
 801a776:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t delayTx = 0;
 801a77a:	2300      	movs	r3, #0
 801a77c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = {0};
 801a780:	2300      	movs	r3, #0
 801a782:	617b      	str	r3, [r7, #20]
 801a784:	f107 0318 	add.w	r3, r7, #24
 801a788:	2200      	movs	r2, #0
 801a78a:	601a      	str	r2, [r3, #0]
 801a78c:	605a      	str	r2, [r3, #4]
 801a78e:	609a      	str	r2, [r3, #8]
	TimerTime_t nextTxDelay = 0;
 801a790:	f04f 0200 	mov.w	r2, #0
 801a794:	f04f 0300 	mov.w	r3, #0
 801a798:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if (RegionCommonCountChannels(ChannelsMask, 0, 1) == 0)
 801a79c:	2201      	movs	r2, #1
 801a79e:	2100      	movs	r1, #0
 801a7a0:	4841      	ldr	r0, [pc, #260]	@ (801a8a8 <RegionIN865NextChannel+0x144>)
 801a7a2:	f7fb fe34 	bl	801640e <RegionCommonCountChannels>
	{	// Reactivate default channels
		//ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a7b2:	4610      	mov	r0, r2
 801a7b4:	4619      	mov	r1, r3
 801a7b6:	f006 fc51 	bl	802105c <util_timer_get_elapsedtime>
 801a7ba:	4602      	mov	r2, r0
 801a7bc:	460b      	mov	r3, r1
 801a7be:	42a2      	cmp	r2, r4
 801a7c0:	41ab      	sbcs	r3, r5
 801a7c2:	d326      	bcc.n	801a812 <RegionIN865NextChannel+0xae>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 801a7c4:	6839      	ldr	r1, [r7, #0]
 801a7c6:	f04f 0200 	mov.w	r2, #0
 801a7ca:	f04f 0300 	mov.w	r3, #0
 801a7ce:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, IN865_MAX_NB_BANDS);
 801a7d2:	68fb      	ldr	r3, [r7, #12]
 801a7d4:	7c58      	ldrb	r0, [r3, #17]
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	7c99      	ldrb	r1, [r3, #18]
 801a7da:	2301      	movs	r3, #1
 801a7dc:	4a33      	ldr	r2, [pc, #204]	@ (801a8ac <RegionIN865NextChannel+0x148>)
 801a7de:	f7fb fe8a 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 801a7e2:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Joined, nextChanParams->Datarate,
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	7c58      	ldrb	r0, [r3, #17]
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801a7f0:	b2d9      	uxtb	r1, r3
 801a7f2:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 801a7f6:	9302      	str	r3, [sp, #8]
 801a7f8:	f107 0314 	add.w	r3, r7, #20
 801a7fc:	9301      	str	r3, [sp, #4]
 801a7fe:	4b2b      	ldr	r3, [pc, #172]	@ (801a8ac <RegionIN865NextChannel+0x148>)
 801a800:	9300      	str	r3, [sp, #0]
 801a802:	4b2b      	ldr	r3, [pc, #172]	@ (801a8b0 <RegionIN865NextChannel+0x14c>)
 801a804:	4a28      	ldr	r2, [pc, #160]	@ (801a8a8 <RegionIN865NextChannel+0x144>)
 801a806:	f7fe ffe9 	bl	80197dc <CountNbOfEnabledChannels>
 801a80a:	4603      	mov	r3, r0
 801a80c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801a810:	e017      	b.n	801a842 <RegionIN865NextChannel+0xde>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 801a812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a816:	3301      	adds	r3, #1
 801a818:	b2db      	uxtb	r3, r3
 801a81a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	e9d3 4500 	ldrd	r4, r5, [r3]
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801a82a:	4610      	mov	r0, r2
 801a82c:	4619      	mov	r1, r3
 801a82e:	f006 fc15 	bl	802105c <util_timer_get_elapsedtime>
 801a832:	4602      	mov	r2, r0
 801a834:	460b      	mov	r3, r1
 801a836:	ebb4 0802 	subs.w	r8, r4, r2
 801a83a:	eb65 0903 	sbc.w	r9, r5, r3
 801a83e:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}

	if (nbEnabledChannels > 0)
 801a842:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a846:	2b00      	cmp	r3, #0
 801a848:	d016      	beq.n	801a878 <RegionIN865NextChannel+0x114>
	{
		// We found a valid channel
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 801a84a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801a84e:	3b01      	subs	r3, #1
 801a850:	4619      	mov	r1, r3
 801a852:	2000      	movs	r0, #0
 801a854:	f006 f98e 	bl	8020b74 <randr>
 801a858:	4603      	mov	r3, r0
 801a85a:	3338      	adds	r3, #56	@ 0x38
 801a85c:	443b      	add	r3, r7
 801a85e:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 801a862:	68bb      	ldr	r3, [r7, #8]
 801a864:	701a      	strb	r2, [r3, #0]

		*time = 0;
 801a866:	6879      	ldr	r1, [r7, #4]
 801a868:	f04f 0200 	mov.w	r2, #0
 801a86c:	f04f 0300 	mov.w	r3, #0
 801a870:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 801a874:	2301      	movs	r3, #1
 801a876:	e012      	b.n	801a89e <RegionIN865NextChannel+0x13a>
	}
	else
	{
		if (delayTx > 0)
 801a878:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d006      	beq.n	801a88e <RegionIN865NextChannel+0x12a>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 801a880:	6879      	ldr	r1, [r7, #4]
 801a882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801a886:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 801a88a:	2301      	movs	r3, #1
 801a88c:	e007      	b.n	801a89e <RegionIN865NextChannel+0x13a>
		}
		// Datarate not supported by any channel, restore defaults
		//ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
		*time = 0;
 801a88e:	6879      	ldr	r1, [r7, #4]
 801a890:	f04f 0200 	mov.w	r2, #0
 801a894:	f04f 0300 	mov.w	r3, #0
 801a898:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 801a89c:	2300      	movs	r3, #0
	}
}
 801a89e:	4618      	mov	r0, r3
 801a8a0:	3738      	adds	r7, #56	@ 0x38
 801a8a2:	46bd      	mov	sp, r7
 801a8a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a8a8:	20006c9c 	.word	0x20006c9c
 801a8ac:	20000210 	.word	0x20000210
 801a8b0:	2000786c 	.word	0x2000786c

0801a8b4 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd(ChannelAddParams_t *channelAdd)
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b084      	sub	sp, #16
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
	uint8_t band = 0;
 801a8bc:	2300      	movs	r3, #0
 801a8be:	733b      	strb	r3, [r7, #12]
	bool drInvalid = false;
 801a8c0:	2300      	movs	r3, #0
 801a8c2:	73fb      	strb	r3, [r7, #15]
	bool freqInvalid = false;
 801a8c4:	2300      	movs	r3, #0
 801a8c6:	73bb      	strb	r3, [r7, #14]
	uint8_t id = channelAdd->ChannelId;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	791b      	ldrb	r3, [r3, #4]
 801a8cc:	737b      	strb	r3, [r7, #13]

	if (id >= IN865_MAX_NB_CHANNELS)
 801a8ce:	7b7b      	ldrb	r3, [r7, #13]
 801a8d0:	2b0f      	cmp	r3, #15
 801a8d2:	d901      	bls.n	801a8d8 <RegionIN865ChannelAdd+0x24>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 801a8d4:	2303      	movs	r3, #3
 801a8d6:	e0aa      	b.n	801aa2e <RegionIN865ChannelAdd+0x17a>
	}

	// Validate the datarate range
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE) == false)
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	7a1b      	ldrb	r3, [r3, #8]
 801a8de:	f343 0303 	sbfx	r3, r3, #0, #4
 801a8e2:	b25b      	sxtb	r3, r3
 801a8e4:	2207      	movs	r2, #7
 801a8e6:	2100      	movs	r1, #0
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	f7fb fd3d 	bl	8016368 <RegionCommonValueInRange>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d101      	bne.n	801a8f8 <RegionIN865ChannelAdd+0x44>
	{
		drInvalid = true;
 801a8f4:	2301      	movs	r3, #1
 801a8f6:	73fb      	strb	r3, [r7, #15]
	}
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE) == false)
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	7a1b      	ldrb	r3, [r3, #8]
 801a8fe:	f343 1303 	sbfx	r3, r3, #4, #4
 801a902:	b25b      	sxtb	r3, r3
 801a904:	2207      	movs	r2, #7
 801a906:	2100      	movs	r1, #0
 801a908:	4618      	mov	r0, r3
 801a90a:	f7fb fd2d 	bl	8016368 <RegionCommonValueInRange>
 801a90e:	4603      	mov	r3, r0
 801a910:	2b00      	cmp	r3, #0
 801a912:	d101      	bne.n	801a918 <RegionIN865ChannelAdd+0x64>
	{
		drInvalid = true;
 801a914:	2301      	movs	r3, #1
 801a916:	73fb      	strb	r3, [r7, #15]
	}
	if (channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max)
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	7a1b      	ldrb	r3, [r3, #8]
 801a91e:	f343 0303 	sbfx	r3, r3, #0, #4
 801a922:	b25a      	sxtb	r2, r3
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	7a1b      	ldrb	r3, [r3, #8]
 801a92a:	f343 1303 	sbfx	r3, r3, #4, #4
 801a92e:	b25b      	sxtb	r3, r3
 801a930:	429a      	cmp	r2, r3
 801a932:	dd01      	ble.n	801a938 <RegionIN865ChannelAdd+0x84>
	{
		drInvalid = true;
 801a934:	2301      	movs	r3, #1
 801a936:	73fb      	strb	r3, [r7, #15]
	}

	// Default channels don't accept all values
	if (id < IN865_NUMB_DEFAULT_CHANNELS)
 801a938:	7b7b      	ldrb	r3, [r7, #13]
 801a93a:	2b02      	cmp	r3, #2
 801a93c:	d828      	bhi.n	801a990 <RegionIN865ChannelAdd+0xdc>
	{
		// Validate the datarate range for min: must be DR_0
		if (channelAdd->NewChannel->DrRange.Fields.Min > DR_0)
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	7a1b      	ldrb	r3, [r3, #8]
 801a944:	f343 0303 	sbfx	r3, r3, #0, #4
 801a948:	b25b      	sxtb	r3, r3
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	dd01      	ble.n	801a952 <RegionIN865ChannelAdd+0x9e>
		{
			drInvalid = true;
 801a94e:	2301      	movs	r3, #1
 801a950:	73fb      	strb	r3, [r7, #15]
		}
		// Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
		if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, DR_5, IN865_TX_MAX_DATARATE) == false)
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	7a1b      	ldrb	r3, [r3, #8]
 801a958:	f343 1303 	sbfx	r3, r3, #4, #4
 801a95c:	b25b      	sxtb	r3, r3
 801a95e:	2207      	movs	r2, #7
 801a960:	2105      	movs	r1, #5
 801a962:	4618      	mov	r0, r3
 801a964:	f7fb fd00 	bl	8016368 <RegionCommonValueInRange>
 801a968:	4603      	mov	r3, r0
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d101      	bne.n	801a972 <RegionIN865ChannelAdd+0xbe>
		{
			drInvalid = true;
 801a96e:	2301      	movs	r3, #1
 801a970:	73fb      	strb	r3, [r7, #15]
		}
		// We are not allowed to change the frequency
		if (channelAdd->NewChannel->Frequency != Channels[id].Frequency)
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	6819      	ldr	r1, [r3, #0]
 801a978:	7b7a      	ldrb	r2, [r7, #13]
 801a97a:	482f      	ldr	r0, [pc, #188]	@ (801aa38 <RegionIN865ChannelAdd+0x184>)
 801a97c:	4613      	mov	r3, r2
 801a97e:	005b      	lsls	r3, r3, #1
 801a980:	4413      	add	r3, r2
 801a982:	009b      	lsls	r3, r3, #2
 801a984:	4403      	add	r3, r0
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	4299      	cmp	r1, r3
 801a98a:	d001      	beq.n	801a990 <RegionIN865ChannelAdd+0xdc>
		{
			freqInvalid = true;
 801a98c:	2301      	movs	r3, #1
 801a98e:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check frequency
	if (freqInvalid == false)
 801a990:	7bbb      	ldrb	r3, [r7, #14]
 801a992:	f083 0301 	eor.w	r3, r3, #1
 801a996:	b2db      	uxtb	r3, r3
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d010      	beq.n	801a9be <RegionIN865ChannelAdd+0x10a>
	{
		if (VerifyTxFreq(channelAdd->NewChannel->Frequency, &band) == false)
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	f107 020c 	add.w	r2, r7, #12
 801a9a6:	4611      	mov	r1, r2
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	f7fe fef1 	bl	8019790 <VerifyTxFreq>
 801a9ae:	4603      	mov	r3, r0
 801a9b0:	f083 0301 	eor.w	r3, r3, #1
 801a9b4:	b2db      	uxtb	r3, r3
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d001      	beq.n	801a9be <RegionIN865ChannelAdd+0x10a>
		{
			freqInvalid = true;
 801a9ba:	2301      	movs	r3, #1
 801a9bc:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check status
	if ((drInvalid == true) && (freqInvalid == true))
 801a9be:	7bfb      	ldrb	r3, [r7, #15]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d004      	beq.n	801a9ce <RegionIN865ChannelAdd+0x11a>
 801a9c4:	7bbb      	ldrb	r3, [r7, #14]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d001      	beq.n	801a9ce <RegionIN865ChannelAdd+0x11a>
	{
		return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801a9ca:	2306      	movs	r3, #6
 801a9cc:	e02f      	b.n	801aa2e <RegionIN865ChannelAdd+0x17a>
	}
	if (drInvalid == true)
 801a9ce:	7bfb      	ldrb	r3, [r7, #15]
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d001      	beq.n	801a9d8 <RegionIN865ChannelAdd+0x124>
	{
		return LORAMAC_STATUS_DATARATE_INVALID;
 801a9d4:	2305      	movs	r3, #5
 801a9d6:	e02a      	b.n	801aa2e <RegionIN865ChannelAdd+0x17a>
	}
	if (freqInvalid == true)
 801a9d8:	7bbb      	ldrb	r3, [r7, #14]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d001      	beq.n	801a9e2 <RegionIN865ChannelAdd+0x12e>
	{
		return LORAMAC_STATUS_FREQUENCY_INVALID;
 801a9de:	2304      	movs	r3, #4
 801a9e0:	e025      	b.n	801aa2e <RegionIN865ChannelAdd+0x17a>
	}

	memcpy(&(Channels[id]), channelAdd->NewChannel, sizeof(Channels[id]));
 801a9e2:	7b7a      	ldrb	r2, [r7, #13]
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	005b      	lsls	r3, r3, #1
 801a9e8:	4413      	add	r3, r2
 801a9ea:	009b      	lsls	r3, r3, #2
 801a9ec:	4a12      	ldr	r2, [pc, #72]	@ (801aa38 <RegionIN865ChannelAdd+0x184>)
 801a9ee:	1898      	adds	r0, r3, r2
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	220c      	movs	r2, #12
 801a9f6:	4619      	mov	r1, r3
 801a9f8:	f007 fcb7 	bl	802236a <memcpy>
	Channels[id].Band = band;
 801a9fc:	7b7a      	ldrb	r2, [r7, #13]
 801a9fe:	7b38      	ldrb	r0, [r7, #12]
 801aa00:	490d      	ldr	r1, [pc, #52]	@ (801aa38 <RegionIN865ChannelAdd+0x184>)
 801aa02:	4613      	mov	r3, r2
 801aa04:	005b      	lsls	r3, r3, #1
 801aa06:	4413      	add	r3, r2
 801aa08:	009b      	lsls	r3, r3, #2
 801aa0a:	440b      	add	r3, r1
 801aa0c:	3309      	adds	r3, #9
 801aa0e:	4602      	mov	r2, r0
 801aa10:	701a      	strb	r2, [r3, #0]
	ChannelsMask[0] |= (1 << id);
 801aa12:	4b0a      	ldr	r3, [pc, #40]	@ (801aa3c <RegionIN865ChannelAdd+0x188>)
 801aa14:	881b      	ldrh	r3, [r3, #0]
 801aa16:	b21a      	sxth	r2, r3
 801aa18:	7b7b      	ldrb	r3, [r7, #13]
 801aa1a:	2101      	movs	r1, #1
 801aa1c:	fa01 f303 	lsl.w	r3, r1, r3
 801aa20:	b21b      	sxth	r3, r3
 801aa22:	4313      	orrs	r3, r2
 801aa24:	b21b      	sxth	r3, r3
 801aa26:	b29a      	uxth	r2, r3
 801aa28:	4b04      	ldr	r3, [pc, #16]	@ (801aa3c <RegionIN865ChannelAdd+0x188>)
 801aa2a:	801a      	strh	r2, [r3, #0]
	return LORAMAC_STATUS_OK;
 801aa2c:	2300      	movs	r3, #0
}
 801aa2e:	4618      	mov	r0, r3
 801aa30:	3710      	adds	r7, #16
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}
 801aa36:	bf00      	nop
 801aa38:	2000786c 	.word	0x2000786c
 801aa3c:	20006c9c 	.word	0x20006c9c

0801aa40 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove(ChannelRemoveParams_t *channelRemove)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b086      	sub	sp, #24
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
	uint8_t id = channelRemove->ChannelId;
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	75fb      	strb	r3, [r7, #23]

	if (id < IN865_NUMB_DEFAULT_CHANNELS)
 801aa4e:	7dfb      	ldrb	r3, [r7, #23]
 801aa50:	2b02      	cmp	r3, #2
 801aa52:	d801      	bhi.n	801aa58 <RegionIN865ChannelsRemove+0x18>
	{
		return false;
 801aa54:	2300      	movs	r3, #0
 801aa56:	e012      	b.n	801aa7e <RegionIN865ChannelsRemove+0x3e>
	}

	// Remove the channel from the list of channels
	Channels[id] = (ChannelParams_t){0, 0, {0}, 0};
 801aa58:	7dfa      	ldrb	r2, [r7, #23]
 801aa5a:	490b      	ldr	r1, [pc, #44]	@ (801aa88 <RegionIN865ChannelsRemove+0x48>)
 801aa5c:	4613      	mov	r3, r2
 801aa5e:	005b      	lsls	r3, r3, #1
 801aa60:	4413      	add	r3, r2
 801aa62:	009b      	lsls	r3, r3, #2
 801aa64:	440b      	add	r3, r1
 801aa66:	461a      	mov	r2, r3
 801aa68:	2300      	movs	r3, #0
 801aa6a:	6013      	str	r3, [r2, #0]
 801aa6c:	6053      	str	r3, [r2, #4]
 801aa6e:	6093      	str	r3, [r2, #8]

	return RegionCommonChanDisable(ChannelsMask, id, IN865_MAX_NB_CHANNELS);
 801aa70:	7dfb      	ldrb	r3, [r7, #23]
 801aa72:	2210      	movs	r2, #16
 801aa74:	4619      	mov	r1, r3
 801aa76:	4805      	ldr	r0, [pc, #20]	@ (801aa8c <RegionIN865ChannelsRemove+0x4c>)
 801aa78:	f7fb fc94 	bl	80163a4 <RegionCommonChanDisable>
 801aa7c:	4603      	mov	r3, r0
}
 801aa7e:	4618      	mov	r0, r3
 801aa80:	3718      	adds	r7, #24
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd80      	pop	{r7, pc}
 801aa86:	bf00      	nop
 801aa88:	2000786c 	.word	0x2000786c
 801aa8c:	20006c9c 	.word	0x20006c9c

0801aa90 <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b084      	sub	sp, #16
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	781b      	ldrb	r3, [r3, #0]
 801aaa2:	4619      	mov	r1, r3
 801aaa4:	4a1f      	ldr	r2, [pc, #124]	@ (801ab24 <RegionIN865SetContinuousWave+0x94>)
 801aaa6:	460b      	mov	r3, r1
 801aaa8:	005b      	lsls	r3, r3, #1
 801aaaa:	440b      	add	r3, r1
 801aaac:	009b      	lsls	r3, r3, #2
 801aaae:	4413      	add	r3, r2
 801aab0:	3309      	adds	r3, #9
 801aab2:	781b      	ldrb	r3, [r3, #0]
 801aab4:	4a1c      	ldr	r2, [pc, #112]	@ (801ab28 <RegionIN865SetContinuousWave+0x98>)
 801aab6:	015b      	lsls	r3, r3, #5
 801aab8:	4413      	add	r3, r2
 801aaba:	3302      	adds	r3, #2
 801aabc:	f993 1000 	ldrsb.w	r1, [r3]
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801aac6:	4b19      	ldr	r3, [pc, #100]	@ (801ab2c <RegionIN865SetContinuousWave+0x9c>)
 801aac8:	f7fe fe46 	bl	8019758 <LimitTxPower>
 801aacc:	4603      	mov	r3, r0
 801aace:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 801aad0:	2300      	movs	r3, #0
 801aad2:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	781b      	ldrb	r3, [r3, #0]
 801aad8:	4619      	mov	r1, r3
 801aada:	4a12      	ldr	r2, [pc, #72]	@ (801ab24 <RegionIN865SetContinuousWave+0x94>)
 801aadc:	460b      	mov	r3, r1
 801aade:	005b      	lsls	r3, r3, #1
 801aae0:	440b      	add	r3, r1
 801aae2:	009b      	lsls	r3, r3, #2
 801aae4:	4413      	add	r3, r2
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	edd3 7a01 	vldr	s15, [r3, #4]
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	ed93 7a02 	vldr	s14, [r3, #8]
 801aaf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aafa:	eef0 0a47 	vmov.f32	s1, s14
 801aafe:	eeb0 0a67 	vmov.f32	s0, s15
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7fb ffe6 	bl	8016ad4 <RegionCommonComputeTxPower>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 801ab0c:	4b08      	ldr	r3, [pc, #32]	@ (801ab30 <RegionIN865SetContinuousWave+0xa0>)
 801ab0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab10:	687a      	ldr	r2, [r7, #4]
 801ab12:	8992      	ldrh	r2, [r2, #12]
 801ab14:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801ab18:	68b8      	ldr	r0, [r7, #8]
 801ab1a:	4798      	blx	r3
}
 801ab1c:	bf00      	nop
 801ab1e:	3710      	adds	r7, #16
 801ab20:	46bd      	mov	sp, r7
 801ab22:	bd80      	pop	{r7, pc}
 801ab24:	2000786c 	.word	0x2000786c
 801ab28:	20000210 	.word	0x20000210
 801ab2c:	20006c9c 	.word	0x20006c9c
 801ab30:	08025450 	.word	0x08025450

0801ab34 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 801ab34:	b480      	push	{r7}
 801ab36:	b083      	sub	sp, #12
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	71fb      	strb	r3, [r7, #7]
 801ab3e:	460b      	mov	r3, r1
 801ab40:	71bb      	strb	r3, [r7, #6]
 801ab42:	4613      	mov	r3, r2
 801ab44:	717b      	strb	r3, [r7, #5]
	// Apply offset formula
	return T_MIN(DR_5, T_MAX(DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset]));
 801ab46:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab4a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 801ab4e:	490b      	ldr	r1, [pc, #44]	@ (801ab7c <RegionIN865ApplyDrOffset+0x48>)
 801ab50:	568a      	ldrsb	r2, [r1, r2]
 801ab52:	1a9b      	subs	r3, r3, r2
 801ab54:	2b05      	cmp	r3, #5
 801ab56:	dc0a      	bgt.n	801ab6e <RegionIN865ApplyDrOffset+0x3a>
 801ab58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab5c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 801ab60:	4906      	ldr	r1, [pc, #24]	@ (801ab7c <RegionIN865ApplyDrOffset+0x48>)
 801ab62:	568a      	ldrsb	r2, [r1, r2]
 801ab64:	1a9b      	subs	r3, r3, r2
 801ab66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab6a:	b2db      	uxtb	r3, r3
 801ab6c:	e000      	b.n	801ab70 <RegionIN865ApplyDrOffset+0x3c>
 801ab6e:	2305      	movs	r3, #5
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	370c      	adds	r7, #12
 801ab74:	46bd      	mov	sp, r7
 801ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab7a:	4770      	bx	lr
 801ab7c:	0802535c 	.word	0x0802535c

0801ab80 <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 801ab80:	b480      	push	{r7}
 801ab82:	b085      	sub	sp, #20
 801ab84:	af00      	add	r7, sp, #0
 801ab86:	4603      	mov	r3, r0
 801ab88:	460a      	mov	r2, r1
 801ab8a:	71fb      	strb	r3, [r7, #7]
 801ab8c:	4613      	mov	r3, r2
 801ab8e:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 801ab90:	2300      	movs	r3, #0
 801ab92:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 801ab94:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801ab98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab9c:	429a      	cmp	r2, r3
 801ab9e:	d102      	bne.n	801aba6 <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 801aba0:	79bb      	ldrb	r3, [r7, #6]
 801aba2:	73fb      	strb	r3, [r7, #15]
 801aba4:	e002      	b.n	801abac <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 801aba6:	79fb      	ldrb	r3, [r7, #7]
 801aba8:	3b01      	subs	r3, #1
 801abaa:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 801abac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801abb0:	4618      	mov	r0, r3
 801abb2:	3714      	adds	r7, #20
 801abb4:	46bd      	mov	sp, r7
 801abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abba:	4770      	bx	lr

0801abbc <GetMaxEIRP>:

static int8_t GetMaxEIRP(uint32_t freq)
{
 801abbc:	b480      	push	{r7}
 801abbe:	b083      	sub	sp, #12
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
	if (freq >= 922100000)
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	4a06      	ldr	r2, [pc, #24]	@ (801abe0 <GetMaxEIRP+0x24>)
 801abc8:	4293      	cmp	r3, r2
 801abca:	d901      	bls.n	801abd0 <GetMaxEIRP+0x14>
	{ // Limit to 14dBm
		return KR920_DEFAULT_MAX_EIRP_HIGH;
 801abcc:	230e      	movs	r3, #14
 801abce:	e000      	b.n	801abd2 <GetMaxEIRP+0x16>
	}
	// Limit to 10dBm
	return KR920_DEFAULT_MAX_EIRP_LOW;
 801abd0:	230a      	movs	r3, #10
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	370c      	adds	r7, #12
 801abd6:	46bd      	mov	sp, r7
 801abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abdc:	4770      	bx	lr
 801abde:	bf00      	nop
 801abe0:	36f6211f 	.word	0x36f6211f

0801abe4 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 801abe4:	b480      	push	{r7}
 801abe6:	b083      	sub	sp, #12
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
	switch (BandwidthsKR920[drIndex])
 801abec:	4a0a      	ldr	r2, [pc, #40]	@ (801ac18 <GetBandwidth+0x34>)
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801abf4:	4a09      	ldr	r2, [pc, #36]	@ (801ac1c <GetBandwidth+0x38>)
 801abf6:	4293      	cmp	r3, r2
 801abf8:	d004      	beq.n	801ac04 <GetBandwidth+0x20>
 801abfa:	4a09      	ldr	r2, [pc, #36]	@ (801ac20 <GetBandwidth+0x3c>)
 801abfc:	4293      	cmp	r3, r2
 801abfe:	d003      	beq.n	801ac08 <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 801ac00:	2300      	movs	r3, #0
 801ac02:	e002      	b.n	801ac0a <GetBandwidth+0x26>
	case 250000:
		return 1;
 801ac04:	2301      	movs	r3, #1
 801ac06:	e000      	b.n	801ac0a <GetBandwidth+0x26>
	case 500000:
		return 2;
 801ac08:	2302      	movs	r3, #2
	}
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	370c      	adds	r7, #12
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac14:	4770      	bx	lr
 801ac16:	bf00      	nop
 801ac18:	0802536c 	.word	0x0802536c
 801ac1c:	0003d090 	.word	0x0003d090
 801ac20:	0007a120 	.word	0x0007a120

0801ac24 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 801ac24:	b480      	push	{r7}
 801ac26:	b085      	sub	sp, #20
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	603b      	str	r3, [r7, #0]
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	71fb      	strb	r3, [r7, #7]
 801ac30:	460b      	mov	r3, r1
 801ac32:	71bb      	strb	r3, [r7, #6]
 801ac34:	4613      	mov	r3, r2
 801ac36:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 801ac38:	79fb      	ldrb	r3, [r7, #7]
 801ac3a:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 801ac3c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801ac40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ac44:	4293      	cmp	r3, r2
 801ac46:	bfb8      	it	lt
 801ac48:	4613      	movlt	r3, r2
 801ac4a:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 801ac4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ac50:	4618      	mov	r0, r3
 801ac52:	3714      	adds	r7, #20
 801ac54:	46bd      	mov	sp, r7
 801ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5a:	4770      	bx	lr

0801ac5c <VerifyTxFreq>:

static bool VerifyTxFreq(uint32_t freq)
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b084      	sub	sp, #16
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	6078      	str	r0, [r7, #4]
	uint32_t tmpFreq = freq;
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	60fb      	str	r3, [r7, #12]

	// Check radio driver support
	if (Radio.CheckRfFrequency(tmpFreq) == false)
 801ac68:	4b15      	ldr	r3, [pc, #84]	@ (801acc0 <VerifyTxFreq+0x64>)
 801ac6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac6c:	68f8      	ldr	r0, [r7, #12]
 801ac6e:	4798      	blx	r3
 801ac70:	4603      	mov	r3, r0
 801ac72:	f083 0301 	eor.w	r3, r3, #1
 801ac76:	b2db      	uxtb	r3, r3
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d001      	beq.n	801ac80 <VerifyTxFreq+0x24>
	{
		return false;
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	e01a      	b.n	801acb6 <VerifyTxFreq+0x5a>
	}

	// Verify if the frequency is valid. The frequency must be in a specified
	// range and can be set to specific values.
	if ((tmpFreq >= 920900000) && (tmpFreq <= 923300000))
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	4a10      	ldr	r2, [pc, #64]	@ (801acc4 <VerifyTxFreq+0x68>)
 801ac84:	4293      	cmp	r3, r2
 801ac86:	d915      	bls.n	801acb4 <VerifyTxFreq+0x58>
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	4a0f      	ldr	r2, [pc, #60]	@ (801acc8 <VerifyTxFreq+0x6c>)
 801ac8c:	4293      	cmp	r3, r2
 801ac8e:	d811      	bhi.n	801acb4 <VerifyTxFreq+0x58>
	{
		// Range ok, check for specific value
		tmpFreq -= 920900000;
 801ac90:	68fa      	ldr	r2, [r7, #12]
 801ac92:	4b0e      	ldr	r3, [pc, #56]	@ (801accc <VerifyTxFreq+0x70>)
 801ac94:	4413      	add	r3, r2
 801ac96:	60fb      	str	r3, [r7, #12]
		if ((tmpFreq % 200000) == 0)
 801ac98:	68fa      	ldr	r2, [r7, #12]
 801ac9a:	0993      	lsrs	r3, r2, #6
 801ac9c:	490c      	ldr	r1, [pc, #48]	@ (801acd0 <VerifyTxFreq+0x74>)
 801ac9e:	fba1 1303 	umull	r1, r3, r1, r3
 801aca2:	099b      	lsrs	r3, r3, #6
 801aca4:	490b      	ldr	r1, [pc, #44]	@ (801acd4 <VerifyTxFreq+0x78>)
 801aca6:	fb01 f303 	mul.w	r3, r1, r3
 801acaa:	1ad3      	subs	r3, r2, r3
 801acac:	2b00      	cmp	r3, #0
 801acae:	d101      	bne.n	801acb4 <VerifyTxFreq+0x58>
		{
			return true;
 801acb0:	2301      	movs	r3, #1
 801acb2:	e000      	b.n	801acb6 <VerifyTxFreq+0x5a>
		}
	}
	return false;
 801acb4:	2300      	movs	r3, #0
}
 801acb6:	4618      	mov	r0, r3
 801acb8:	3710      	adds	r7, #16
 801acba:	46bd      	mov	sp, r7
 801acbc:	bd80      	pop	{r7, pc}
 801acbe:	bf00      	nop
 801acc0:	08025450 	.word	0x08025450
 801acc4:	36e3d19f 	.word	0x36e3d19f
 801acc8:	370870a0 	.word	0x370870a0
 801accc:	c91c2e60 	.word	0xc91c2e60
 801acd0:	053e2d63 	.word	0x053e2d63
 801acd4:	00030d40 	.word	0x00030d40

0801acd8 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(bool joined, uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b086      	sub	sp, #24
 801acdc:	af00      	add	r7, sp, #0
 801acde:	60ba      	str	r2, [r7, #8]
 801ace0:	607b      	str	r3, [r7, #4]
 801ace2:	4603      	mov	r3, r0
 801ace4:	73fb      	strb	r3, [r7, #15]
 801ace6:	460b      	mov	r3, r1
 801ace8:	73bb      	strb	r3, [r7, #14]
	uint8_t nbEnabledChannels = 0;
 801acea:	2300      	movs	r3, #0
 801acec:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 801acee:	2300      	movs	r3, #0
 801acf0:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < KR920_MAX_NB_CHANNELS; i += 16, k++)
 801acf2:	2300      	movs	r3, #0
 801acf4:	757b      	strb	r3, [r7, #21]
 801acf6:	2300      	movs	r3, #0
 801acf8:	753b      	strb	r3, [r7, #20]
 801acfa:	e086      	b.n	801ae0a <CountNbOfEnabledChannels+0x132>
	{
		for (uint8_t j = 0; j < 16; j++)
 801acfc:	2300      	movs	r3, #0
 801acfe:	74fb      	strb	r3, [r7, #19]
 801ad00:	e07a      	b.n	801adf8 <CountNbOfEnabledChannels+0x120>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 801ad02:	7d3b      	ldrb	r3, [r7, #20]
 801ad04:	005b      	lsls	r3, r3, #1
 801ad06:	68ba      	ldr	r2, [r7, #8]
 801ad08:	4413      	add	r3, r2
 801ad0a:	881b      	ldrh	r3, [r3, #0]
 801ad0c:	461a      	mov	r2, r3
 801ad0e:	7cfb      	ldrb	r3, [r7, #19]
 801ad10:	fa42 f303 	asr.w	r3, r2, r3
 801ad14:	f003 0301 	and.w	r3, r3, #1
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d06a      	beq.n	801adf2 <CountNbOfEnabledChannels+0x11a>
			{
				if (channels[i + j].Frequency == 0)
 801ad1c:	7d7a      	ldrb	r2, [r7, #21]
 801ad1e:	7cfb      	ldrb	r3, [r7, #19]
 801ad20:	4413      	add	r3, r2
 801ad22:	461a      	mov	r2, r3
 801ad24:	4613      	mov	r3, r2
 801ad26:	005b      	lsls	r3, r3, #1
 801ad28:	4413      	add	r3, r2
 801ad2a:	009b      	lsls	r3, r3, #2
 801ad2c:	461a      	mov	r2, r3
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	4413      	add	r3, r2
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d057      	beq.n	801ade8 <CountNbOfEnabledChannels+0x110>
				{ // Check if the channel is enabled
					continue;
				}
				if (joined == false)
 801ad38:	7bfb      	ldrb	r3, [r7, #15]
 801ad3a:	f083 0301 	eor.w	r3, r3, #1
 801ad3e:	b2db      	uxtb	r3, r3
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d007      	beq.n	801ad54 <CountNbOfEnabledChannels+0x7c>
				{
					if ((KR920_JOIN_CHANNELS & (1 << j)) == 0)
 801ad44:	7cfb      	ldrb	r3, [r7, #19]
 801ad46:	2207      	movs	r2, #7
 801ad48:	fa42 f303 	asr.w	r3, r2, r3
 801ad4c:	f003 0301 	and.w	r3, r3, #1
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d04b      	beq.n	801adec <CountNbOfEnabledChannels+0x114>
					{
						continue;
					}
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 801ad54:	f997 000e 	ldrsb.w	r0, [r7, #14]
 801ad58:	7d7a      	ldrb	r2, [r7, #21]
 801ad5a:	7cfb      	ldrb	r3, [r7, #19]
 801ad5c:	4413      	add	r3, r2
 801ad5e:	461a      	mov	r2, r3
 801ad60:	4613      	mov	r3, r2
 801ad62:	005b      	lsls	r3, r3, #1
 801ad64:	4413      	add	r3, r2
 801ad66:	009b      	lsls	r3, r3, #2
 801ad68:	461a      	mov	r2, r3
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	4413      	add	r3, r2
 801ad6e:	7a1b      	ldrb	r3, [r3, #8]
 801ad70:	f343 0303 	sbfx	r3, r3, #0, #4
 801ad74:	b25b      	sxtb	r3, r3
 801ad76:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 801ad78:	7d7a      	ldrb	r2, [r7, #21]
 801ad7a:	7cfb      	ldrb	r3, [r7, #19]
 801ad7c:	4413      	add	r3, r2
 801ad7e:	461a      	mov	r2, r3
 801ad80:	4613      	mov	r3, r2
 801ad82:	005b      	lsls	r3, r3, #1
 801ad84:	4413      	add	r3, r2
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	461a      	mov	r2, r3
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	4413      	add	r3, r2
 801ad8e:	7a1b      	ldrb	r3, [r3, #8]
 801ad90:	f343 1303 	sbfx	r3, r3, #4, #4
 801ad94:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 801ad96:	461a      	mov	r2, r3
 801ad98:	f7fb fae6 	bl	8016368 <RegionCommonValueInRange>
 801ad9c:	4603      	mov	r3, r0
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d026      	beq.n	801adf0 <CountNbOfEnabledChannels+0x118>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 801ada2:	7d7a      	ldrb	r2, [r7, #21]
 801ada4:	7cfb      	ldrb	r3, [r7, #19]
 801ada6:	4413      	add	r3, r2
 801ada8:	461a      	mov	r2, r3
 801adaa:	4613      	mov	r3, r2
 801adac:	005b      	lsls	r3, r3, #1
 801adae:	4413      	add	r3, r2
 801adb0:	009b      	lsls	r3, r3, #2
 801adb2:	461a      	mov	r2, r3
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	4413      	add	r3, r2
 801adb8:	7a5b      	ldrb	r3, [r3, #9]
 801adba:	015b      	lsls	r3, r3, #5
 801adbc:	6a3a      	ldr	r2, [r7, #32]
 801adbe:	4413      	add	r3, r2
 801adc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801adc4:	4313      	orrs	r3, r2
 801adc6:	d003      	beq.n	801add0 <CountNbOfEnabledChannels+0xf8>
				{ // Check if the band is available for transmission
					delayTransmission++;
 801adc8:	7dbb      	ldrb	r3, [r7, #22]
 801adca:	3301      	adds	r3, #1
 801adcc:	75bb      	strb	r3, [r7, #22]
					continue;
 801adce:	e010      	b.n	801adf2 <CountNbOfEnabledChannels+0x11a>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 801add0:	7dfb      	ldrb	r3, [r7, #23]
 801add2:	1c5a      	adds	r2, r3, #1
 801add4:	75fa      	strb	r2, [r7, #23]
 801add6:	461a      	mov	r2, r3
 801add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801adda:	4413      	add	r3, r2
 801addc:	7d79      	ldrb	r1, [r7, #21]
 801adde:	7cfa      	ldrb	r2, [r7, #19]
 801ade0:	440a      	add	r2, r1
 801ade2:	b2d2      	uxtb	r2, r2
 801ade4:	701a      	strb	r2, [r3, #0]
 801ade6:	e004      	b.n	801adf2 <CountNbOfEnabledChannels+0x11a>
					continue;
 801ade8:	bf00      	nop
 801adea:	e002      	b.n	801adf2 <CountNbOfEnabledChannels+0x11a>
						continue;
 801adec:	bf00      	nop
 801adee:	e000      	b.n	801adf2 <CountNbOfEnabledChannels+0x11a>
					continue;
 801adf0:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 801adf2:	7cfb      	ldrb	r3, [r7, #19]
 801adf4:	3301      	adds	r3, #1
 801adf6:	74fb      	strb	r3, [r7, #19]
 801adf8:	7cfb      	ldrb	r3, [r7, #19]
 801adfa:	2b0f      	cmp	r3, #15
 801adfc:	d981      	bls.n	801ad02 <CountNbOfEnabledChannels+0x2a>
	for (uint8_t i = 0, k = 0; i < KR920_MAX_NB_CHANNELS; i += 16, k++)
 801adfe:	7d7b      	ldrb	r3, [r7, #21]
 801ae00:	3310      	adds	r3, #16
 801ae02:	757b      	strb	r3, [r7, #21]
 801ae04:	7d3b      	ldrb	r3, [r7, #20]
 801ae06:	3301      	adds	r3, #1
 801ae08:	753b      	strb	r3, [r7, #20]
 801ae0a:	7d7b      	ldrb	r3, [r7, #21]
 801ae0c:	2b0f      	cmp	r3, #15
 801ae0e:	f67f af75 	bls.w	801acfc <CountNbOfEnabledChannels+0x24>
			}
		}
	}

	*delayTx = delayTransmission;
 801ae12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae14:	7dba      	ldrb	r2, [r7, #22]
 801ae16:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 801ae18:	7dfb      	ldrb	r3, [r7, #23]
}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	3718      	adds	r7, #24
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bd80      	pop	{r7, pc}
	...

0801ae24 <RegionKR920GetPhyParam>:

PhyParam_t RegionKR920GetPhyParam(GetPhyParams_t *getPhy)
{
 801ae24:	b580      	push	{r7, lr}
 801ae26:	b084      	sub	sp, #16
 801ae28:	af00      	add	r7, sp, #0
 801ae2a:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	781b      	ldrb	r3, [r3, #0]
 801ae34:	2b20      	cmp	r3, #32
 801ae36:	f200 80b1 	bhi.w	801af9c <RegionKR920GetPhyParam+0x178>
 801ae3a:	a201      	add	r2, pc, #4	@ (adr r2, 801ae40 <RegionKR920GetPhyParam+0x1c>)
 801ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae40:	0801aec5 	.word	0x0801aec5
 801ae44:	0801aecb 	.word	0x0801aecb
 801ae48:	0801af9d 	.word	0x0801af9d
 801ae4c:	0801af9d 	.word	0x0801af9d
 801ae50:	0801af9d 	.word	0x0801af9d
 801ae54:	0801aed1 	.word	0x0801aed1
 801ae58:	0801af9d 	.word	0x0801af9d
 801ae5c:	0801af9d 	.word	0x0801af9d
 801ae60:	0801aeeb 	.word	0x0801aeeb
 801ae64:	0801aef1 	.word	0x0801aef1
 801ae68:	0801af01 	.word	0x0801af01
 801ae6c:	0801af11 	.word	0x0801af11
 801ae70:	0801af17 	.word	0x0801af17
 801ae74:	0801af1f 	.word	0x0801af1f
 801ae78:	0801af27 	.word	0x0801af27
 801ae7c:	0801af2f 	.word	0x0801af2f
 801ae80:	0801af37 	.word	0x0801af37
 801ae84:	0801af3f 	.word	0x0801af3f
 801ae88:	0801af47 	.word	0x0801af47
 801ae8c:	0801af5b 	.word	0x0801af5b
 801ae90:	0801af61 	.word	0x0801af61
 801ae94:	0801af67 	.word	0x0801af67
 801ae98:	0801af6d 	.word	0x0801af6d
 801ae9c:	0801af73 	.word	0x0801af73
 801aea0:	0801af79 	.word	0x0801af79
 801aea4:	0801af7f 	.word	0x0801af7f
 801aea8:	0801af85 	.word	0x0801af85
 801aeac:	0801af85 	.word	0x0801af85
 801aeb0:	0801af8b 	.word	0x0801af8b
 801aeb4:	0801af91 	.word	0x0801af91
 801aeb8:	0801af97 	.word	0x0801af97
 801aebc:	0801af97 	.word	0x0801af97
 801aec0:	0801aed7 	.word	0x0801aed7
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = KR920_RX_MIN_DATARATE;
 801aec4:	2300      	movs	r3, #0
 801aec6:	60fb      	str	r3, [r7, #12]
		break;
 801aec8:	e069      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = KR920_TX_MIN_DATARATE;
 801aeca:	2300      	movs	r3, #0
 801aecc:	60fb      	str	r3, [r7, #12]
		break;
 801aece:	e066      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = KR920_DEFAULT_DATARATE;
 801aed0:	2300      	movs	r3, #0
 801aed2:	60fb      	str	r3, [r7, #12]
		break;
 801aed4:	e063      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, KR920_TX_MIN_DATARATE);
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aedc:	2100      	movs	r1, #0
 801aede:	4618      	mov	r0, r3
 801aee0:	f7ff fe4e 	bl	801ab80 <GetNextLowerTxDr>
 801aee4:	4603      	mov	r3, r0
 801aee6:	60fb      	str	r3, [r7, #12]
		break;
 801aee8:	e059      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = KR920_DEFAULT_TX_POWER;
 801aeea:	2300      	movs	r3, #0
 801aeec:	60fb      	str	r3, [r7, #12]
		break;
 801aeee:	e056      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateKR920[getPhy->Datarate];
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aef6:	461a      	mov	r2, r3
 801aef8:	4b2b      	ldr	r3, [pc, #172]	@ (801afa8 <RegionKR920GetPhyParam+0x184>)
 801aefa:	5c9b      	ldrb	r3, [r3, r2]
 801aefc:	60fb      	str	r3, [r7, #12]
		break;
 801aefe:	e04e      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterKR920[getPhy->Datarate];
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801af06:	461a      	mov	r2, r3
 801af08:	4b28      	ldr	r3, [pc, #160]	@ (801afac <RegionKR920GetPhyParam+0x188>)
 801af0a:	5c9b      	ldrb	r3, [r3, r2]
 801af0c:	60fb      	str	r3, [r7, #12]
		break;
 801af0e:	e046      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = KR920_DUTY_CYCLE_ENABLED;
 801af10:	2300      	movs	r3, #0
 801af12:	60fb      	str	r3, [r7, #12]
		break;
 801af14:	e043      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = KR920_MAX_RX_WINDOW;
 801af16:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801af1a:	60fb      	str	r3, [r7, #12]
		break;
 801af1c:	e03f      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = KR920_RECEIVE_DELAY1;
 801af1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801af22:	60fb      	str	r3, [r7, #12]
		break;
 801af24:	e03b      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = KR920_RECEIVE_DELAY2;
 801af26:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801af2a:	60fb      	str	r3, [r7, #12]
		break;
 801af2c:	e037      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = KR920_JOIN_ACCEPT_DELAY1;
 801af2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801af32:	60fb      	str	r3, [r7, #12]
		break;
 801af34:	e033      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = KR920_JOIN_ACCEPT_DELAY2;
 801af36:	f241 7370 	movw	r3, #6000	@ 0x1770
 801af3a:	60fb      	str	r3, [r7, #12]
		break;
 801af3c:	e02f      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = KR920_MAX_FCNT_GAP;
 801af3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801af42:	60fb      	str	r3, [r7, #12]
		break;
 801af44:	e02b      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (KR920_ACKTIMEOUT + randr(-KR920_ACK_TIMEOUT_RND, KR920_ACK_TIMEOUT_RND));
 801af46:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801af4a:	4819      	ldr	r0, [pc, #100]	@ (801afb0 <RegionKR920GetPhyParam+0x18c>)
 801af4c:	f005 fe12 	bl	8020b74 <randr>
 801af50:	4603      	mov	r3, r0
 801af52:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801af56:	60fb      	str	r3, [r7, #12]
		break;
 801af58:	e021      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = KR920_DEFAULT_RX1_DR_OFFSET;
 801af5a:	2300      	movs	r3, #0
 801af5c:	60fb      	str	r3, [r7, #12]
		break;
 801af5e:	e01e      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = KR920_RX_WND_2_FREQ;
 801af60:	4b14      	ldr	r3, [pc, #80]	@ (801afb4 <RegionKR920GetPhyParam+0x190>)
 801af62:	60fb      	str	r3, [r7, #12]
		break;
 801af64:	e01b      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = KR920_RX_WND_2_DR;
 801af66:	2300      	movs	r3, #0
 801af68:	60fb      	str	r3, [r7, #12]
		break;
 801af6a:	e018      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 801af6c:	4b12      	ldr	r3, [pc, #72]	@ (801afb8 <RegionKR920GetPhyParam+0x194>)
 801af6e:	60fb      	str	r3, [r7, #12]
		break;
 801af70:	e015      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 801af72:	4b12      	ldr	r3, [pc, #72]	@ (801afbc <RegionKR920GetPhyParam+0x198>)
 801af74:	60fb      	str	r3, [r7, #12]
		break;
 801af76:	e012      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = KR920_MAX_NB_CHANNELS;
 801af78:	2310      	movs	r3, #16
 801af7a:	60fb      	str	r3, [r7, #12]
		break;
 801af7c:	e00f      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 801af7e:	4b10      	ldr	r3, [pc, #64]	@ (801afc0 <RegionKR920GetPhyParam+0x19c>)
 801af80:	60fb      	str	r3, [r7, #12]
		break;
 801af82:	e00c      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 801af84:	2300      	movs	r3, #0
 801af86:	60fb      	str	r3, [r7, #12]
		break;
 801af88:	e009      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	{
		// We set the higher maximum EIRP as default value.
		// The reason for this is, that the frequency may
		// change during a channel selection for the next uplink.
		// The value has to be recalculated in the TX configuration.
		phyParam.fValue = KR920_DEFAULT_MAX_EIRP_HIGH;
 801af8a:	4b0e      	ldr	r3, [pc, #56]	@ (801afc4 <RegionKR920GetPhyParam+0x1a0>)
 801af8c:	60fb      	str	r3, [r7, #12]
		break;
 801af8e:	e006      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = KR920_DEFAULT_ANTENNA_GAIN;
 801af90:	4b0d      	ldr	r3, [pc, #52]	@ (801afc8 <RegionKR920GetPhyParam+0x1a4>)
 801af92:	60fb      	str	r3, [r7, #12]
		break;
 801af94:	e003      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 48;
 801af96:	2330      	movs	r3, #48	@ 0x30
 801af98:	60fb      	str	r3, [r7, #12]
		break;
 801af9a:	e000      	b.n	801af9e <RegionKR920GetPhyParam+0x17a>
	}
	default:
	{
		break;
 801af9c:	bf00      	nop
	}
	}

	return phyParam;
 801af9e:	68fb      	ldr	r3, [r7, #12]
}
 801afa0:	4618      	mov	r0, r3
 801afa2:	3710      	adds	r7, #16
 801afa4:	46bd      	mov	sp, r7
 801afa6:	bd80      	pop	{r7, pc}
 801afa8:	08025384 	.word	0x08025384
 801afac:	0802538c 	.word	0x0802538c
 801afb0:	fffffc18 	.word	0xfffffc18
 801afb4:	36f313e0 	.word	0x36f313e0
 801afb8:	20006c9c 	.word	0x20006c9c
 801afbc:	20006ca8 	.word	0x20006ca8
 801afc0:	2000792c 	.word	0x2000792c
 801afc4:	41600000 	.word	0x41600000
 801afc8:	4009999a 	.word	0x4009999a

0801afcc <RegionKR920SetBandTxDone>:

void RegionKR920SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	7858      	ldrb	r0, [r3, #1]
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	781b      	ldrb	r3, [r3, #0]
 801afdc:	4619      	mov	r1, r3
 801afde:	4a0a      	ldr	r2, [pc, #40]	@ (801b008 <RegionKR920SetBandTxDone+0x3c>)
 801afe0:	460b      	mov	r3, r1
 801afe2:	005b      	lsls	r3, r3, #1
 801afe4:	440b      	add	r3, r1
 801afe6:	009b      	lsls	r3, r3, #2
 801afe8:	4413      	add	r3, r2
 801afea:	3309      	adds	r3, #9
 801afec:	781b      	ldrb	r3, [r3, #0]
 801afee:	015b      	lsls	r3, r3, #5
 801aff0:	4a06      	ldr	r2, [pc, #24]	@ (801b00c <RegionKR920SetBandTxDone+0x40>)
 801aff2:	1899      	adds	r1, r3, r2
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801affa:	f7fb fa5b 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 801affe:	bf00      	nop
 801b000:	3708      	adds	r7, #8
 801b002:	46bd      	mov	sp, r7
 801b004:	bd80      	pop	{r7, pc}
 801b006:	bf00      	nop
 801b008:	2000792c 	.word	0x2000792c
 801b00c:	20000230 	.word	0x20000230

0801b010 <RegionKR920InitDefaults>:

void RegionKR920InitDefaults(InitType_t type)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b098      	sub	sp, #96	@ 0x60
 801b014:	af00      	add	r7, sp, #0
 801b016:	4603      	mov	r3, r0
 801b018:	71fb      	strb	r3, [r7, #7]
	switch (type)
 801b01a:	79fb      	ldrb	r3, [r7, #7]
 801b01c:	2b02      	cmp	r3, #2
 801b01e:	d041      	beq.n	801b0a4 <RegionKR920InitDefaults+0x94>
 801b020:	2b02      	cmp	r3, #2
 801b022:	dc45      	bgt.n	801b0b0 <RegionKR920InitDefaults+0xa0>
 801b024:	2b00      	cmp	r3, #0
 801b026:	d002      	beq.n	801b02e <RegionKR920InitDefaults+0x1e>
 801b028:	2b01      	cmp	r3, #1
 801b02a:	d032      	beq.n	801b092 <RegionKR920InitDefaults+0x82>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
		break;
	}
	default:
	{
		break;
 801b02c:	e040      	b.n	801b0b0 <RegionKR920InitDefaults+0xa0>
		Channels[0] = (ChannelParams_t)KR920_LC1;
 801b02e:	4b23      	ldr	r3, [pc, #140]	@ (801b0bc <RegionKR920InitDefaults+0xac>)
 801b030:	4a23      	ldr	r2, [pc, #140]	@ (801b0c0 <RegionKR920InitDefaults+0xb0>)
 801b032:	ca07      	ldmia	r2, {r0, r1, r2}
 801b034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[1] = (ChannelParams_t)KR920_LC2;
 801b038:	4b20      	ldr	r3, [pc, #128]	@ (801b0bc <RegionKR920InitDefaults+0xac>)
 801b03a:	4a22      	ldr	r2, [pc, #136]	@ (801b0c4 <RegionKR920InitDefaults+0xb4>)
 801b03c:	330c      	adds	r3, #12
 801b03e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[2] = (ChannelParams_t)KR920_LC3;
 801b044:	4b1d      	ldr	r3, [pc, #116]	@ (801b0bc <RegionKR920InitDefaults+0xac>)
 801b046:	4a20      	ldr	r2, [pc, #128]	@ (801b0c8 <RegionKR920InitDefaults+0xb8>)
 801b048:	3318      	adds	r3, #24
 801b04a:	ca07      	ldmia	r2, {r0, r1, r2}
 801b04c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[3] = (ChannelParams_t)KR920_LC4;
 801b050:	4b1a      	ldr	r3, [pc, #104]	@ (801b0bc <RegionKR920InitDefaults+0xac>)
 801b052:	4a1e      	ldr	r2, [pc, #120]	@ (801b0cc <RegionKR920InitDefaults+0xbc>)
 801b054:	3324      	adds	r3, #36	@ 0x24
 801b056:	ca07      	ldmia	r2, {r0, r1, r2}
 801b058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[4] = (ChannelParams_t)KR920_LC5;
 801b05c:	4b17      	ldr	r3, [pc, #92]	@ (801b0bc <RegionKR920InitDefaults+0xac>)
 801b05e:	4a1c      	ldr	r2, [pc, #112]	@ (801b0d0 <RegionKR920InitDefaults+0xc0>)
 801b060:	3330      	adds	r3, #48	@ 0x30
 801b062:	ca07      	ldmia	r2, {r0, r1, r2}
 801b064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[5] = (ChannelParams_t)KR920_LC6;
 801b068:	4b14      	ldr	r3, [pc, #80]	@ (801b0bc <RegionKR920InitDefaults+0xac>)
 801b06a:	4a1a      	ldr	r2, [pc, #104]	@ (801b0d4 <RegionKR920InitDefaults+0xc4>)
 801b06c:	333c      	adds	r3, #60	@ 0x3c
 801b06e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b070:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[6] = (ChannelParams_t)KR920_LC7;
 801b074:	4b11      	ldr	r3, [pc, #68]	@ (801b0bc <RegionKR920InitDefaults+0xac>)
 801b076:	4a18      	ldr	r2, [pc, #96]	@ (801b0d8 <RegionKR920InitDefaults+0xc8>)
 801b078:	3348      	adds	r3, #72	@ 0x48
 801b07a:	ca07      	ldmia	r2, {r0, r1, r2}
 801b07c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ChannelsDefaultMask[0] = LC(1) + LC(2) + LC(3) + LC(4) + LC(5) + LC(6) + LC(7) + LC(8);
 801b080:	4b16      	ldr	r3, [pc, #88]	@ (801b0dc <RegionKR920InitDefaults+0xcc>)
 801b082:	22ff      	movs	r2, #255	@ 0xff
 801b084:	801a      	strh	r2, [r3, #0]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 801b086:	2201      	movs	r2, #1
 801b088:	4914      	ldr	r1, [pc, #80]	@ (801b0dc <RegionKR920InitDefaults+0xcc>)
 801b08a:	4815      	ldr	r0, [pc, #84]	@ (801b0e0 <RegionKR920InitDefaults+0xd0>)
 801b08c:	f7fb f9eb 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801b090:	e00f      	b.n	801b0b2 <RegionKR920InitDefaults+0xa2>
		ChannelsMask[0] |= ChannelsDefaultMask[0];
 801b092:	4b13      	ldr	r3, [pc, #76]	@ (801b0e0 <RegionKR920InitDefaults+0xd0>)
 801b094:	881a      	ldrh	r2, [r3, #0]
 801b096:	4b11      	ldr	r3, [pc, #68]	@ (801b0dc <RegionKR920InitDefaults+0xcc>)
 801b098:	881b      	ldrh	r3, [r3, #0]
 801b09a:	4313      	orrs	r3, r2
 801b09c:	b29a      	uxth	r2, r3
 801b09e:	4b10      	ldr	r3, [pc, #64]	@ (801b0e0 <RegionKR920InitDefaults+0xd0>)
 801b0a0:	801a      	strh	r2, [r3, #0]
		break;
 801b0a2:	e006      	b.n	801b0b2 <RegionKR920InitDefaults+0xa2>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 801b0a4:	2201      	movs	r2, #1
 801b0a6:	490d      	ldr	r1, [pc, #52]	@ (801b0dc <RegionKR920InitDefaults+0xcc>)
 801b0a8:	480d      	ldr	r0, [pc, #52]	@ (801b0e0 <RegionKR920InitDefaults+0xd0>)
 801b0aa:	f7fb f9dc 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801b0ae:	e000      	b.n	801b0b2 <RegionKR920InitDefaults+0xa2>
		break;
 801b0b0:	bf00      	nop
	}
	}
}
 801b0b2:	bf00      	nop
 801b0b4:	3760      	adds	r7, #96	@ 0x60
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	bd80      	pop	{r7, pc}
 801b0ba:	bf00      	nop
 801b0bc:	2000792c 	.word	0x2000792c
 801b0c0:	08024b7c 	.word	0x08024b7c
 801b0c4:	08024b88 	.word	0x08024b88
 801b0c8:	08024b94 	.word	0x08024b94
 801b0cc:	08024ba0 	.word	0x08024ba0
 801b0d0:	08024bac 	.word	0x08024bac
 801b0d4:	08024bb8 	.word	0x08024bb8
 801b0d8:	08024bc4 	.word	0x08024bc4
 801b0dc:	20006ca8 	.word	0x20006ca8
 801b0e0:	20006c9c 	.word	0x20006c9c

0801b0e4 <RegionKR920Verify>:

bool RegionKR920Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b082      	sub	sp, #8
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
 801b0ec:	460b      	mov	r3, r1
 801b0ee:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 801b0f0:	78fb      	ldrb	r3, [r7, #3]
 801b0f2:	3b04      	subs	r3, #4
 801b0f4:	2b1a      	cmp	r3, #26
 801b0f6:	d87d      	bhi.n	801b1f4 <RegionKR920Verify+0x110>
 801b0f8:	a201      	add	r2, pc, #4	@ (adr r2, 801b100 <RegionKR920Verify+0x1c>)
 801b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0fe:	bf00      	nop
 801b100:	0801b16d 	.word	0x0801b16d
 801b104:	0801b18b 	.word	0x0801b18b
 801b108:	0801b1a9 	.word	0x0801b1a9
 801b10c:	0801b1c7 	.word	0x0801b1c7
 801b110:	0801b1c7 	.word	0x0801b1c7
 801b114:	0801b1f5 	.word	0x0801b1f5
 801b118:	0801b1f5 	.word	0x0801b1f5
 801b11c:	0801b1e5 	.word	0x0801b1e5
 801b120:	0801b1f5 	.word	0x0801b1f5
 801b124:	0801b1f5 	.word	0x0801b1f5
 801b128:	0801b1f5 	.word	0x0801b1f5
 801b12c:	0801b1f5 	.word	0x0801b1f5
 801b130:	0801b1f5 	.word	0x0801b1f5
 801b134:	0801b1f5 	.word	0x0801b1f5
 801b138:	0801b1f5 	.word	0x0801b1f5
 801b13c:	0801b1f5 	.word	0x0801b1f5
 801b140:	0801b1f5 	.word	0x0801b1f5
 801b144:	0801b1f5 	.word	0x0801b1f5
 801b148:	0801b1f5 	.word	0x0801b1f5
 801b14c:	0801b1f5 	.word	0x0801b1f5
 801b150:	0801b1f5 	.word	0x0801b1f5
 801b154:	0801b1f5 	.word	0x0801b1f5
 801b158:	0801b1f5 	.word	0x0801b1f5
 801b15c:	0801b1f5 	.word	0x0801b1f5
 801b160:	0801b1f5 	.word	0x0801b1f5
 801b164:	0801b1f5 	.word	0x0801b1f5
 801b168:	0801b1e9 	.word	0x0801b1e9
	{
	case PHY_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE);
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	f993 3000 	ldrsb.w	r3, [r3]
 801b172:	2205      	movs	r2, #5
 801b174:	2100      	movs	r1, #0
 801b176:	4618      	mov	r0, r3
 801b178:	f7fb f8f6 	bl	8016368 <RegionCommonValueInRange>
 801b17c:	4603      	mov	r3, r0
 801b17e:	2b00      	cmp	r3, #0
 801b180:	bf14      	ite	ne
 801b182:	2301      	movne	r3, #1
 801b184:	2300      	moveq	r3, #0
 801b186:	b2db      	uxtb	r3, r3
 801b188:	e038      	b.n	801b1fc <RegionKR920Verify+0x118>
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	f993 3000 	ldrsb.w	r3, [r3]
 801b190:	2205      	movs	r2, #5
 801b192:	2100      	movs	r1, #0
 801b194:	4618      	mov	r0, r3
 801b196:	f7fb f8e7 	bl	8016368 <RegionCommonValueInRange>
 801b19a:	4603      	mov	r3, r0
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	bf14      	ite	ne
 801b1a0:	2301      	movne	r3, #1
 801b1a2:	2300      	moveq	r3, #0
 801b1a4:	b2db      	uxtb	r3, r3
 801b1a6:	e029      	b.n	801b1fc <RegionKR920Verify+0x118>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE);
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	f993 3000 	ldrsb.w	r3, [r3]
 801b1ae:	2205      	movs	r2, #5
 801b1b0:	2100      	movs	r1, #0
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f7fb f8d8 	bl	8016368 <RegionCommonValueInRange>
 801b1b8:	4603      	mov	r3, r0
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	bf14      	ite	ne
 801b1be:	2301      	movne	r3, #1
 801b1c0:	2300      	moveq	r3, #0
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	e01a      	b.n	801b1fc <RegionKR920Verify+0x118>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, KR920_MAX_TX_POWER, KR920_MIN_TX_POWER);
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	f993 3000 	ldrsb.w	r3, [r3]
 801b1cc:	2207      	movs	r2, #7
 801b1ce:	2100      	movs	r1, #0
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7fb f8c9 	bl	8016368 <RegionCommonValueInRange>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	bf14      	ite	ne
 801b1dc:	2301      	movne	r3, #1
 801b1de:	2300      	moveq	r3, #0
 801b1e0:	b2db      	uxtb	r3, r3
 801b1e2:	e00b      	b.n	801b1fc <RegionKR920Verify+0x118>
	}
	case PHY_DUTY_CYCLE:
	{
		return KR920_DUTY_CYCLE_ENABLED;
 801b1e4:	2300      	movs	r3, #0
 801b1e6:	e009      	b.n	801b1fc <RegionKR920Verify+0x118>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 48)
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	781b      	ldrb	r3, [r3, #0]
 801b1ec:	2b2f      	cmp	r3, #47	@ 0x2f
 801b1ee:	d803      	bhi.n	801b1f8 <RegionKR920Verify+0x114>
		{
			return false;
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	e003      	b.n	801b1fc <RegionKR920Verify+0x118>
		}
		break;
	}
	default:
		return false;
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	e001      	b.n	801b1fc <RegionKR920Verify+0x118>
		break;
 801b1f8:	bf00      	nop
	}
	return true;
 801b1fa:	2301      	movs	r3, #1
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3708      	adds	r7, #8
 801b200:	46bd      	mov	sp, r7
 801b202:	bd80      	pop	{r7, pc}

0801b204 <RegionKR920ApplyCFList>:

void RegionKR920ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 801b204:	b580      	push	{r7, lr}
 801b206:	b08a      	sub	sp, #40	@ 0x28
 801b208:	af00      	add	r7, sp, #0
 801b20a:	6078      	str	r0, [r7, #4]
	ChannelParams_t newChannel;
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	// Setup default datarate range
	newChannel.DrRange.Value = (DR_5 << 4) | DR_0;
 801b20c:	2350      	movs	r3, #80	@ 0x50
 801b20e:	f887 3020 	strb.w	r3, [r7, #32]

	// Size of the optional CF list
	if (applyCFList->Size != 16)
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	791b      	ldrb	r3, [r3, #4]
 801b216:	2b10      	cmp	r3, #16
 801b218:	d15c      	bne.n	801b2d4 <RegionKR920ApplyCFList+0xd0>
	{
		return;
	}

	// Last byte is RFU, don't take it into account
	for (uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i += 3, chanIdx++)
 801b21a:	2300      	movs	r3, #0
 801b21c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b220:	2307      	movs	r3, #7
 801b222:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b226:	e050      	b.n	801b2ca <RegionKR920ApplyCFList+0xc6>
	{
		if (chanIdx < (KR920_NUMB_CHANNELS_CF_LIST + KR920_NUMB_DEFAULT_CHANNELS))
 801b228:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b22c:	2b0b      	cmp	r3, #11
 801b22e:	d824      	bhi.n	801b27a <RegionKR920ApplyCFList+0x76>
		{
			// Channel frequency
			newChannel.Frequency = (uint32_t)applyCFList->Payload[i];
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681a      	ldr	r2, [r3, #0]
 801b234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b238:	4413      	add	r3, r2
 801b23a:	781b      	ldrb	r3, [r3, #0]
 801b23c:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 1] << 8);
 801b23e:	69ba      	ldr	r2, [r7, #24]
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6819      	ldr	r1, [r3, #0]
 801b244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b248:	3301      	adds	r3, #1
 801b24a:	440b      	add	r3, r1
 801b24c:	781b      	ldrb	r3, [r3, #0]
 801b24e:	021b      	lsls	r3, r3, #8
 801b250:	4313      	orrs	r3, r2
 801b252:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 2] << 16);
 801b254:	69ba      	ldr	r2, [r7, #24]
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	6819      	ldr	r1, [r3, #0]
 801b25a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b25e:	3302      	adds	r3, #2
 801b260:	440b      	add	r3, r1
 801b262:	781b      	ldrb	r3, [r3, #0]
 801b264:	041b      	lsls	r3, r3, #16
 801b266:	4313      	orrs	r3, r2
 801b268:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency *= 100;
 801b26a:	69bb      	ldr	r3, [r7, #24]
 801b26c:	2264      	movs	r2, #100	@ 0x64
 801b26e:	fb02 f303 	mul.w	r3, r2, r3
 801b272:	61bb      	str	r3, [r7, #24]

			// Initialize alternative frequency to 0
			newChannel.Rx1Frequency = 0;
 801b274:	2300      	movs	r3, #0
 801b276:	61fb      	str	r3, [r7, #28]
 801b278:	e006      	b.n	801b288 <RegionKR920ApplyCFList+0x84>
		}
		else
		{
			newChannel.Frequency = 0;
 801b27a:	2300      	movs	r3, #0
 801b27c:	61bb      	str	r3, [r7, #24]
			newChannel.DrRange.Value = 0;
 801b27e:	2300      	movs	r3, #0
 801b280:	f887 3020 	strb.w	r3, [r7, #32]
			newChannel.Rx1Frequency = 0;
 801b284:	2300      	movs	r3, #0
 801b286:	61fb      	str	r3, [r7, #28]
		}

		if (newChannel.Frequency != 0)
 801b288:	69bb      	ldr	r3, [r7, #24]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d00b      	beq.n	801b2a6 <RegionKR920ApplyCFList+0xa2>
		{
			channelAdd.NewChannel = &newChannel;
 801b28e:	f107 0318 	add.w	r3, r7, #24
 801b292:	613b      	str	r3, [r7, #16]
			channelAdd.ChannelId = chanIdx;
 801b294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b298:	753b      	strb	r3, [r7, #20]

			// Try to add all channels
			RegionKR920ChannelAdd(&channelAdd);
 801b29a:	f107 0310 	add.w	r3, r7, #16
 801b29e:	4618      	mov	r0, r3
 801b2a0:	f000 fd48 	bl	801bd34 <RegionKR920ChannelAdd>
 801b2a4:	e007      	b.n	801b2b6 <RegionKR920ApplyCFList+0xb2>
		}
		else
		{
			channelRemove.ChannelId = chanIdx;
 801b2a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b2aa:	733b      	strb	r3, [r7, #12]

			RegionKR920ChannelsRemove(&channelRemove);
 801b2ac:	f107 030c 	add.w	r3, r7, #12
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f000 fde7 	bl	801be84 <RegionKR920ChannelsRemove>
	for (uint8_t i = 0, chanIdx = KR920_NUMB_DEFAULT_CHANNELS; chanIdx < KR920_MAX_NB_CHANNELS; i += 3, chanIdx++)
 801b2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b2ba:	3303      	adds	r3, #3
 801b2bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b2c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b2c4:	3301      	adds	r3, #1
 801b2c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801b2ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b2ce:	2b0f      	cmp	r3, #15
 801b2d0:	d9aa      	bls.n	801b228 <RegionKR920ApplyCFList+0x24>
 801b2d2:	e000      	b.n	801b2d6 <RegionKR920ApplyCFList+0xd2>
		return;
 801b2d4:	bf00      	nop
		}
	}
}
 801b2d6:	3728      	adds	r7, #40	@ 0x28
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	bd80      	pop	{r7, pc}

0801b2dc <RegionKR920ChanMaskSet>:

bool RegionKR920ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b082      	sub	sp, #8
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	791b      	ldrb	r3, [r3, #4]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d002      	beq.n	801b2f2 <RegionKR920ChanMaskSet+0x16>
 801b2ec:	2b01      	cmp	r3, #1
 801b2ee:	d008      	beq.n	801b302 <RegionKR920ChanMaskSet+0x26>
 801b2f0:	e00f      	b.n	801b312 <RegionKR920ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 1);
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	2201      	movs	r2, #1
 801b2f8:	4619      	mov	r1, r3
 801b2fa:	4809      	ldr	r0, [pc, #36]	@ (801b320 <RegionKR920ChanMaskSet+0x44>)
 801b2fc:	f7fb f8b3 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801b300:	e009      	b.n	801b316 <RegionKR920ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1);
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	2201      	movs	r2, #1
 801b308:	4619      	mov	r1, r3
 801b30a:	4806      	ldr	r0, [pc, #24]	@ (801b324 <RegionKR920ChanMaskSet+0x48>)
 801b30c:	f7fb f8ab 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801b310:	e001      	b.n	801b316 <RegionKR920ChanMaskSet+0x3a>
	}
	default:
		return false;
 801b312:	2300      	movs	r3, #0
 801b314:	e000      	b.n	801b318 <RegionKR920ChanMaskSet+0x3c>
	}
	return true;
 801b316:	2301      	movs	r3, #1
}
 801b318:	4618      	mov	r0, r3
 801b31a:	3708      	adds	r7, #8
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bd80      	pop	{r7, pc}
 801b320:	20006c9c 	.word	0x20006c9c
 801b324:	20006ca8 	.word	0x20006ca8

0801b328 <RegionKR920AdrNext>:

bool RegionKR920AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b088      	sub	sp, #32
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	60f8      	str	r0, [r7, #12]
 801b330:	60b9      	str	r1, [r7, #8]
 801b332:	607a      	str	r2, [r7, #4]
 801b334:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 801b336:	2300      	movs	r3, #0
 801b338:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	7a1b      	ldrb	r3, [r3, #8]
 801b33e:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 801b340:	68fb      	ldr	r3, [r7, #12]
 801b342:	7a5b      	ldrb	r3, [r3, #9]
 801b344:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	685a      	ldr	r2, [r3, #4]
 801b34a:	683b      	ldr	r3, [r7, #0]
 801b34c:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	785b      	ldrb	r3, [r3, #1]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d03f      	beq.n	801b3d6 <RegionKR920AdrNext+0xae>
	{
		if (datarate == KR920_TX_MIN_DATARATE)
 801b356:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d105      	bne.n	801b36a <RegionKR920AdrNext+0x42>
		{
			*adrAckCounter = 0;
 801b35e:	683b      	ldr	r3, [r7, #0]
 801b360:	2200      	movs	r2, #0
 801b362:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 801b364:	2300      	movs	r3, #0
 801b366:	77fb      	strb	r3, [r7, #31]
 801b368:	e035      	b.n	801b3d6 <RegionKR920AdrNext+0xae>
		}
		else
		{
			if (adrNext->AdrAckCounter >= KR920_ADR_ACK_LIMIT)
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	685b      	ldr	r3, [r3, #4]
 801b36e:	2b3f      	cmp	r3, #63	@ 0x3f
 801b370:	d904      	bls.n	801b37c <RegionKR920AdrNext+0x54>
			{
				adrAckReq = true;
 801b372:	2301      	movs	r3, #1
 801b374:	77fb      	strb	r3, [r7, #31]
				txPower = KR920_MAX_TX_POWER;
 801b376:	2300      	movs	r3, #0
 801b378:	777b      	strb	r3, [r7, #29]
 801b37a:	e001      	b.n	801b380 <RegionKR920AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 801b37c:	2300      	movs	r3, #0
 801b37e:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (KR920_ADR_ACK_LIMIT + KR920_ADR_ACK_DELAY))
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	2b5f      	cmp	r3, #95	@ 0x5f
 801b386:	d926      	bls.n	801b3d6 <RegionKR920AdrNext+0xae>
			{
				if ((adrNext->AdrAckCounter % KR920_ADR_ACK_DELAY) == 1)
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	685b      	ldr	r3, [r3, #4]
 801b38c:	f003 031f 	and.w	r3, r3, #31
 801b390:	2b01      	cmp	r3, #1
 801b392:	d120      	bne.n	801b3d6 <RegionKR920AdrNext+0xae>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801b394:	2320      	movs	r3, #32
 801b396:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 801b398:	7fbb      	ldrb	r3, [r7, #30]
 801b39a:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	7a9b      	ldrb	r3, [r3, #10]
 801b3a0:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionKR920GetPhyParam(&getPhy);
 801b3a2:	f107 0318 	add.w	r3, r7, #24
 801b3a6:	4618      	mov	r0, r3
 801b3a8:	f7ff fd3c 	bl	801ae24 <RegionKR920GetPhyParam>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 801b3b0:	697b      	ldr	r3, [r7, #20]
 801b3b2:	77bb      	strb	r3, [r7, #30]

					if (datarate == KR920_TX_MIN_DATARATE)
 801b3b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d10c      	bne.n	801b3d6 <RegionKR920AdrNext+0xae>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 801b3bc:	2300      	movs	r3, #0
 801b3be:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 801b3c0:	68fb      	ldr	r3, [r7, #12]
 801b3c2:	781b      	ldrb	r3, [r3, #0]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d006      	beq.n	801b3d6 <RegionKR920AdrNext+0xae>
						{
							// Re-enable default channels
							ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
 801b3c8:	4b08      	ldr	r3, [pc, #32]	@ (801b3ec <RegionKR920AdrNext+0xc4>)
 801b3ca:	881b      	ldrh	r3, [r3, #0]
 801b3cc:	f043 0307 	orr.w	r3, r3, #7
 801b3d0:	b29a      	uxth	r2, r3
 801b3d2:	4b06      	ldr	r3, [pc, #24]	@ (801b3ec <RegionKR920AdrNext+0xc4>)
 801b3d4:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	*drOut = datarate;
 801b3d6:	68bb      	ldr	r3, [r7, #8]
 801b3d8:	7fba      	ldrb	r2, [r7, #30]
 801b3da:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	7f7a      	ldrb	r2, [r7, #29]
 801b3e0:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 801b3e2:	7ffb      	ldrb	r3, [r7, #31]
}
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	3720      	adds	r7, #32
 801b3e8:	46bd      	mov	sp, r7
 801b3ea:	bd80      	pop	{r7, pc}
 801b3ec:	20006c9c 	.word	0x20006c9c

0801b3f0 <RegionKR920ComputeRxWindowParameters>:

void RegionKR920ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b088      	sub	sp, #32
 801b3f4:	af02      	add	r7, sp, #8
 801b3f6:	60ba      	str	r2, [r7, #8]
 801b3f8:	607b      	str	r3, [r7, #4]
 801b3fa:	4603      	mov	r3, r0
 801b3fc:	73fb      	strb	r3, [r7, #15]
 801b3fe:	460b      	mov	r3, r1
 801b400:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 801b402:	f04f 0200 	mov.w	r2, #0
 801b406:	f04f 0300 	mov.w	r3, #0
 801b40a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, KR920_RX_MAX_DATARATE);
 801b40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b412:	2b05      	cmp	r3, #5
 801b414:	bfa8      	it	ge
 801b416:	2305      	movge	r3, #5
 801b418:	b25a      	sxtb	r2, r3
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b424:	4618      	mov	r0, r3
 801b426:	f7ff fbdd 	bl	801abe4 <GetBandwidth>
 801b42a:	4603      	mov	r3, r0
 801b42c:	b2da      	uxtb	r2, r3
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	709a      	strb	r2, [r3, #2]

	tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesKR920[rxConfigParams->Datarate], BandwidthsKR920[rxConfigParams->Datarate]);
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b438:	461a      	mov	r2, r3
 801b43a:	4b10      	ldr	r3, [pc, #64]	@ (801b47c <RegionKR920ComputeRxWindowParameters+0x8c>)
 801b43c:	5c9a      	ldrb	r2, [r3, r2]
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b444:	4619      	mov	r1, r3
 801b446:	4b0e      	ldr	r3, [pc, #56]	@ (801b480 <RegionKR920ComputeRxWindowParameters+0x90>)
 801b448:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b44c:	4619      	mov	r1, r3
 801b44e:	4610      	mov	r0, r2
 801b450:	f7fb fa68 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 801b454:	ed87 0b04 	vstr	d0, [r7, #16]

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	f103 0208 	add.w	r2, r3, #8
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	330c      	adds	r3, #12
 801b462:	7bb8      	ldrb	r0, [r7, #14]
 801b464:	9300      	str	r3, [sp, #0]
 801b466:	4613      	mov	r3, r2
 801b468:	2203      	movs	r2, #3
 801b46a:	68b9      	ldr	r1, [r7, #8]
 801b46c:	ed97 0b04 	vldr	d0, [r7, #16]
 801b470:	f7fb faa4 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 801b474:	bf00      	nop
 801b476:	3718      	adds	r7, #24
 801b478:	46bd      	mov	sp, r7
 801b47a:	bd80      	pop	{r7, pc}
 801b47c:	08025364 	.word	0x08025364
 801b480:	0802536c 	.word	0x0802536c

0801b484 <RegionKR920RxConfig>:

bool RegionKR920RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 801b484:	b590      	push	{r4, r7, lr}
 801b486:	b08f      	sub	sp, #60	@ 0x3c
 801b488:	af0a      	add	r7, sp, #40	@ 0x28
 801b48a:	6078      	str	r0, [r7, #4]
 801b48c:	6039      	str	r1, [r7, #0]
	int8_t dr = rxConfig->Datarate;
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	785b      	ldrb	r3, [r3, #1]
 801b492:	72fb      	strb	r3, [r7, #11]
	uint8_t maxPayload = 0;
 801b494:	2300      	movs	r3, #0
 801b496:	72bb      	strb	r3, [r7, #10]
	int8_t phyDr = 0;
 801b498:	2300      	movs	r3, #0
 801b49a:	727b      	strb	r3, [r7, #9]
	uint32_t frequency = rxConfig->Frequency;
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	685b      	ldr	r3, [r3, #4]
 801b4a0:	60fb      	str	r3, [r7, #12]

	if (Radio.GetStatus() != RF_IDLE)
 801b4a2:	4b38      	ldr	r3, [pc, #224]	@ (801b584 <RegionKR920RxConfig+0x100>)
 801b4a4:	689b      	ldr	r3, [r3, #8]
 801b4a6:	4798      	blx	r3
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d001      	beq.n	801b4b2 <RegionKR920RxConfig+0x2e>
	{
		return false;
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	e063      	b.n	801b57a <RegionKR920RxConfig+0xf6>
	}

	if (rxConfig->Window == 0)
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	7cdb      	ldrb	r3, [r3, #19]
 801b4b6:	f083 0301 	eor.w	r3, r3, #1
 801b4ba:	b2db      	uxtb	r3, r3
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d023      	beq.n	801b508 <RegionKR920RxConfig+0x84>
	{
		// Apply window 1 frequency
		frequency = Channels[rxConfig->Channel].Frequency;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	781b      	ldrb	r3, [r3, #0]
 801b4c4:	4619      	mov	r1, r3
 801b4c6:	4a30      	ldr	r2, [pc, #192]	@ (801b588 <RegionKR920RxConfig+0x104>)
 801b4c8:	460b      	mov	r3, r1
 801b4ca:	005b      	lsls	r3, r3, #1
 801b4cc:	440b      	add	r3, r1
 801b4ce:	009b      	lsls	r3, r3, #2
 801b4d0:	4413      	add	r3, r2
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	60fb      	str	r3, [r7, #12]
		// Apply the alternative RX 1 window frequency, if it is available
		if (Channels[rxConfig->Channel].Rx1Frequency != 0)
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	781b      	ldrb	r3, [r3, #0]
 801b4da:	4619      	mov	r1, r3
 801b4dc:	4a2a      	ldr	r2, [pc, #168]	@ (801b588 <RegionKR920RxConfig+0x104>)
 801b4de:	460b      	mov	r3, r1
 801b4e0:	005b      	lsls	r3, r3, #1
 801b4e2:	440b      	add	r3, r1
 801b4e4:	009b      	lsls	r3, r3, #2
 801b4e6:	4413      	add	r3, r2
 801b4e8:	3304      	adds	r3, #4
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d00b      	beq.n	801b508 <RegionKR920RxConfig+0x84>
		{
			frequency = Channels[rxConfig->Channel].Rx1Frequency;
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	781b      	ldrb	r3, [r3, #0]
 801b4f4:	4619      	mov	r1, r3
 801b4f6:	4a24      	ldr	r2, [pc, #144]	@ (801b588 <RegionKR920RxConfig+0x104>)
 801b4f8:	460b      	mov	r3, r1
 801b4fa:	005b      	lsls	r3, r3, #1
 801b4fc:	440b      	add	r3, r1
 801b4fe:	009b      	lsls	r3, r3, #2
 801b500:	4413      	add	r3, r2
 801b502:	3304      	adds	r3, #4
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	60fb      	str	r3, [r7, #12]
		}
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesKR920[dr];
 801b508:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b50c:	4a1f      	ldr	r2, [pc, #124]	@ (801b58c <RegionKR920RxConfig+0x108>)
 801b50e:	5cd3      	ldrb	r3, [r2, r3]
 801b510:	727b      	strb	r3, [r7, #9]

	Radio.SetChannel(frequency);
 801b512:	4b1c      	ldr	r3, [pc, #112]	@ (801b584 <RegionKR920RxConfig+0x100>)
 801b514:	691b      	ldr	r3, [r3, #16]
 801b516:	68f8      	ldr	r0, [r7, #12]
 801b518:	4798      	blx	r3

	// Radio configuration
	// Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
	// RAKwireless symbTimeout changed after tests done by RAKwireless
	Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 801b51a:	4b1a      	ldr	r3, [pc, #104]	@ (801b584 <RegionKR920RxConfig+0x100>)
 801b51c:	69dc      	ldr	r4, [r3, #28]
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	789b      	ldrb	r3, [r3, #2]
 801b522:	4619      	mov	r1, r3
 801b524:	f997 2009 	ldrsb.w	r2, [r7, #9]
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	7c9b      	ldrb	r3, [r3, #18]
 801b52c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b52e:	2301      	movs	r3, #1
 801b530:	9308      	str	r3, [sp, #32]
 801b532:	2300      	movs	r3, #0
 801b534:	9307      	str	r3, [sp, #28]
 801b536:	2300      	movs	r3, #0
 801b538:	9306      	str	r3, [sp, #24]
 801b53a:	2300      	movs	r3, #0
 801b53c:	9305      	str	r3, [sp, #20]
 801b53e:	2300      	movs	r3, #0
 801b540:	9304      	str	r3, [sp, #16]
 801b542:	2300      	movs	r3, #0
 801b544:	9303      	str	r3, [sp, #12]
 801b546:	2300      	movs	r3, #0
 801b548:	9302      	str	r3, [sp, #8]
 801b54a:	2308      	movs	r3, #8
 801b54c:	9301      	str	r3, [sp, #4]
 801b54e:	2300      	movs	r3, #0
 801b550:	9300      	str	r3, [sp, #0]
 801b552:	2301      	movs	r3, #1
 801b554:	2001      	movs	r0, #1
 801b556:	47a0      	blx	r4
	maxPayload = MaxPayloadOfDatarateKR920[dr];
 801b558:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801b55c:	4a0c      	ldr	r2, [pc, #48]	@ (801b590 <RegionKR920RxConfig+0x10c>)
 801b55e:	5cd3      	ldrb	r3, [r2, r3]
 801b560:	72bb      	strb	r3, [r7, #10]
	Radio.SetMaxPayloadLength(MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 801b562:	4b08      	ldr	r3, [pc, #32]	@ (801b584 <RegionKR920RxConfig+0x100>)
 801b564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b566:	7aba      	ldrb	r2, [r7, #10]
 801b568:	320d      	adds	r2, #13
 801b56a:	b2d2      	uxtb	r2, r2
 801b56c:	4611      	mov	r1, r2
 801b56e:	2001      	movs	r0, #1
 801b570:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 801b572:	683b      	ldr	r3, [r7, #0]
 801b574:	7afa      	ldrb	r2, [r7, #11]
 801b576:	701a      	strb	r2, [r3, #0]
	return true;
 801b578:	2301      	movs	r3, #1
}
 801b57a:	4618      	mov	r0, r3
 801b57c:	3714      	adds	r7, #20
 801b57e:	46bd      	mov	sp, r7
 801b580:	bd90      	pop	{r4, r7, pc}
 801b582:	bf00      	nop
 801b584:	08025450 	.word	0x08025450
 801b588:	2000792c 	.word	0x2000792c
 801b58c:	08025364 	.word	0x08025364
 801b590:	08025384 	.word	0x08025384

0801b594 <RegionKR920TxConfig>:

bool RegionKR920TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 801b594:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b596:	b093      	sub	sp, #76	@ 0x4c
 801b598:	af0a      	add	r7, sp, #40	@ 0x28
 801b59a:	60f8      	str	r0, [r7, #12]
 801b59c:	60b9      	str	r1, [r7, #8]
 801b59e:	607a      	str	r2, [r7, #4]
	int8_t phyDr = DataratesKR920[txConfig->Datarate];
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b5a6:	461a      	mov	r2, r3
 801b5a8:	4b50      	ldr	r3, [pc, #320]	@ (801b6ec <RegionKR920TxConfig+0x158>)
 801b5aa:	5c9b      	ldrb	r3, [r3, r2]
 801b5ac:	77fb      	strb	r3, [r7, #31]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	781b      	ldrb	r3, [r3, #0]
 801b5b8:	4619      	mov	r1, r3
 801b5ba:	4a4d      	ldr	r2, [pc, #308]	@ (801b6f0 <RegionKR920TxConfig+0x15c>)
 801b5bc:	460b      	mov	r3, r1
 801b5be:	005b      	lsls	r3, r3, #1
 801b5c0:	440b      	add	r3, r1
 801b5c2:	009b      	lsls	r3, r3, #2
 801b5c4:	4413      	add	r3, r2
 801b5c6:	3309      	adds	r3, #9
 801b5c8:	781b      	ldrb	r3, [r3, #0]
 801b5ca:	4a4a      	ldr	r2, [pc, #296]	@ (801b6f4 <RegionKR920TxConfig+0x160>)
 801b5cc:	015b      	lsls	r3, r3, #5
 801b5ce:	4413      	add	r3, r2
 801b5d0:	3302      	adds	r3, #2
 801b5d2:	f993 1000 	ldrsb.w	r1, [r3]
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801b5dc:	4b46      	ldr	r3, [pc, #280]	@ (801b6f8 <RegionKR920TxConfig+0x164>)
 801b5de:	f7ff fb21 	bl	801ac24 <LimitTxPower>
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	77bb      	strb	r3, [r7, #30]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b5ec:	4618      	mov	r0, r3
 801b5ee:	f7ff faf9 	bl	801abe4 <GetBandwidth>
 801b5f2:	61b8      	str	r0, [r7, #24]
	float maxEIRP = GetMaxEIRP(Channels[txConfig->Channel].Frequency);
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	781b      	ldrb	r3, [r3, #0]
 801b5f8:	4619      	mov	r1, r3
 801b5fa:	4a3d      	ldr	r2, [pc, #244]	@ (801b6f0 <RegionKR920TxConfig+0x15c>)
 801b5fc:	460b      	mov	r3, r1
 801b5fe:	005b      	lsls	r3, r3, #1
 801b600:	440b      	add	r3, r1
 801b602:	009b      	lsls	r3, r3, #2
 801b604:	4413      	add	r3, r2
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	4618      	mov	r0, r3
 801b60a:	f7ff fad7 	bl	801abbc <GetMaxEIRP>
 801b60e:	4603      	mov	r3, r0
 801b610:	ee07 3a90 	vmov	s15, r3
 801b614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b618:	edc7 7a05 	vstr	s15, [r7, #20]
	int8_t phyTxPower = 0;
 801b61c:	2300      	movs	r3, #0
 801b61e:	74fb      	strb	r3, [r7, #19]

	// Take the minimum between the maxEIRP and txConfig->MaxEirp.
	// The value of txConfig->MaxEirp could have changed during runtime, e.g. due to a MAC command.
	maxEIRP = T_MIN(txConfig->MaxEirp, maxEIRP);
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	edd3 7a01 	vldr	s15, [r3, #4]
 801b626:	ed97 7a05 	vldr	s14, [r7, #20]
 801b62a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b632:	dd02      	ble.n	801b63a <RegionKR920TxConfig+0xa6>
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	685b      	ldr	r3, [r3, #4]
 801b638:	e000      	b.n	801b63c <RegionKR920TxConfig+0xa8>
 801b63a:	697b      	ldr	r3, [r7, #20]
 801b63c:	617b      	str	r3, [r7, #20]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, maxEIRP, txConfig->AntennaGain);
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	edd3 7a02 	vldr	s15, [r3, #8]
 801b644:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801b648:	eef0 0a67 	vmov.f32	s1, s15
 801b64c:	ed97 0a05 	vldr	s0, [r7, #20]
 801b650:	4618      	mov	r0, r3
 801b652:	f7fb fa3f 	bl	8016ad4 <RegionCommonComputeTxPower>
 801b656:	4603      	mov	r3, r0
 801b658:	74fb      	strb	r3, [r7, #19]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 801b65a:	4b28      	ldr	r3, [pc, #160]	@ (801b6fc <RegionKR920TxConfig+0x168>)
 801b65c:	691a      	ldr	r2, [r3, #16]
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	781b      	ldrb	r3, [r3, #0]
 801b662:	4618      	mov	r0, r3
 801b664:	4922      	ldr	r1, [pc, #136]	@ (801b6f0 <RegionKR920TxConfig+0x15c>)
 801b666:	4603      	mov	r3, r0
 801b668:	005b      	lsls	r3, r3, #1
 801b66a:	4403      	add	r3, r0
 801b66c:	009b      	lsls	r3, r3, #2
 801b66e:	440b      	add	r3, r1
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	4618      	mov	r0, r3
 801b674:	4790      	blx	r2

	Radio.SetTxConfig(MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 801b676:	4b21      	ldr	r3, [pc, #132]	@ (801b6fc <RegionKR920TxConfig+0x168>)
 801b678:	6a1e      	ldr	r6, [r3, #32]
 801b67a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b67e:	f997 1013 	ldrsb.w	r1, [r7, #19]
 801b682:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801b686:	9208      	str	r2, [sp, #32]
 801b688:	2200      	movs	r2, #0
 801b68a:	9207      	str	r2, [sp, #28]
 801b68c:	2200      	movs	r2, #0
 801b68e:	9206      	str	r2, [sp, #24]
 801b690:	2200      	movs	r2, #0
 801b692:	9205      	str	r2, [sp, #20]
 801b694:	2201      	movs	r2, #1
 801b696:	9204      	str	r2, [sp, #16]
 801b698:	2200      	movs	r2, #0
 801b69a:	9203      	str	r2, [sp, #12]
 801b69c:	2208      	movs	r2, #8
 801b69e:	9202      	str	r2, [sp, #8]
 801b6a0:	2201      	movs	r2, #1
 801b6a2:	9201      	str	r2, [sp, #4]
 801b6a4:	9300      	str	r3, [sp, #0]
 801b6a6:	69bb      	ldr	r3, [r7, #24]
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	2001      	movs	r0, #1
 801b6ac:	47b0      	blx	r6

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(MODEM_LORA, txConfig->PktLen);
 801b6ae:	4b13      	ldr	r3, [pc, #76]	@ (801b6fc <RegionKR920TxConfig+0x168>)
 801b6b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b6b2:	68fa      	ldr	r2, [r7, #12]
 801b6b4:	8992      	ldrh	r2, [r2, #12]
 801b6b6:	b2d2      	uxtb	r2, r2
 801b6b8:	4611      	mov	r1, r2
 801b6ba:	2001      	movs	r0, #1
 801b6bc:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(MODEM_LORA, txConfig->PktLen);
 801b6be:	4b0f      	ldr	r3, [pc, #60]	@ (801b6fc <RegionKR920TxConfig+0x168>)
 801b6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b6c2:	68fa      	ldr	r2, [r7, #12]
 801b6c4:	8992      	ldrh	r2, [r2, #12]
 801b6c6:	b2d2      	uxtb	r2, r2
 801b6c8:	4611      	mov	r1, r2
 801b6ca:	2001      	movs	r0, #1
 801b6cc:	4798      	blx	r3
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	2200      	movs	r2, #0
 801b6d2:	461c      	mov	r4, r3
 801b6d4:	4615      	mov	r5, r2
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	e9c3 4500 	strd	r4, r5, [r3]

	*txPower = txPowerLimited;
 801b6dc:	68bb      	ldr	r3, [r7, #8]
 801b6de:	7fba      	ldrb	r2, [r7, #30]
 801b6e0:	701a      	strb	r2, [r3, #0]
	return true;
 801b6e2:	2301      	movs	r3, #1
}
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	3724      	adds	r7, #36	@ 0x24
 801b6e8:	46bd      	mov	sp, r7
 801b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6ec:	08025364 	.word	0x08025364
 801b6f0:	2000792c 	.word	0x2000792c
 801b6f4:	20000230 	.word	0x20000230
 801b6f8:	20006c9c 	.word	0x20006c9c
 801b6fc:	08025450 	.word	0x08025450

0801b700 <RegionKR920LinkAdrReq>:

uint8_t RegionKR920LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 801b700:	b590      	push	{r4, r7, lr}
 801b702:	b093      	sub	sp, #76	@ 0x4c
 801b704:	af00      	add	r7, sp, #0
 801b706:	60f8      	str	r0, [r7, #12]
 801b708:	60b9      	str	r1, [r7, #8]
 801b70a:	607a      	str	r2, [r7, #4]
 801b70c:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 801b70e:	2307      	movs	r3, #7
 801b710:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 801b714:	2300      	movs	r3, #0
 801b716:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t bytesProcessed = 0;
 801b71a:	2300      	movs	r3, #0
 801b71c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t chMask = 0;
 801b720:	2300      	movs	r3, #0
 801b722:	877b      	strh	r3, [r7, #58]	@ 0x3a
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	while (bytesProcessed < linkAdrReq->PayloadSize)
 801b724:	e083      	b.n	801b82e <RegionKR920LinkAdrReq+0x12e>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	681a      	ldr	r2, [r3, #0]
 801b72a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801b72e:	4413      	add	r3, r2
 801b730:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801b734:	4611      	mov	r1, r2
 801b736:	4618      	mov	r0, r3
 801b738:	f7fb f81c 	bl	8016774 <RegionCommonParseLinkAdrReq>
 801b73c:	4603      	mov	r3, r0
 801b73e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		if (nextIndex == 0)
 801b742:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b746:	2b00      	cmp	r3, #0
 801b748:	d079      	beq.n	801b83e <RegionKR920LinkAdrReq+0x13e>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 801b74a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801b74e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801b752:	4413      	add	r3, r2
 801b754:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 801b758:	2307      	movs	r3, #7
 801b75a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		// Setup temporary channels mask
		chMask = linkAdrParams.ChMask;
 801b75e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801b762:	877b      	strh	r3, [r7, #58]	@ 0x3a

		// Verify channels mask
		if ((linkAdrParams.ChMaskCtrl == 0) && (chMask == 0))
 801b764:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d109      	bne.n	801b780 <RegionKR920LinkAdrReq+0x80>
 801b76c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d106      	bne.n	801b780 <RegionKR920LinkAdrReq+0x80>
		{
			status &= 0xFE; // Channel mask KO
 801b772:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b776:	f023 0301 	bic.w	r3, r3, #1
 801b77a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801b77e:	e056      	b.n	801b82e <RegionKR920LinkAdrReq+0x12e>
		}
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 801b780:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b784:	2b00      	cmp	r3, #0
 801b786:	d003      	beq.n	801b790 <RegionKR920LinkAdrReq+0x90>
 801b788:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b78c:	2b05      	cmp	r3, #5
 801b78e:	d903      	bls.n	801b798 <RegionKR920LinkAdrReq+0x98>
				 (linkAdrParams.ChMaskCtrl >= 7))
 801b790:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 801b794:	2b06      	cmp	r3, #6
 801b796:	d906      	bls.n	801b7a6 <RegionKR920LinkAdrReq+0xa6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 801b798:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b79c:	f023 0301 	bic.w	r3, r3, #1
 801b7a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801b7a4:	e043      	b.n	801b82e <RegionKR920LinkAdrReq+0x12e>
		}
		else
		{
			for (uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++)
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801b7ac:	e03b      	b.n	801b826 <RegionKR920LinkAdrReq+0x126>
			{
				if (linkAdrParams.ChMaskCtrl == 6)
 801b7ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801b7b2:	2b06      	cmp	r3, #6
 801b7b4:	d117      	bne.n	801b7e6 <RegionKR920LinkAdrReq+0xe6>
				{
					if (Channels[i].Frequency != 0)
 801b7b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801b7ba:	4959      	ldr	r1, [pc, #356]	@ (801b920 <RegionKR920LinkAdrReq+0x220>)
 801b7bc:	4613      	mov	r3, r2
 801b7be:	005b      	lsls	r3, r3, #1
 801b7c0:	4413      	add	r3, r2
 801b7c2:	009b      	lsls	r3, r3, #2
 801b7c4:	440b      	add	r3, r1
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d027      	beq.n	801b81c <RegionKR920LinkAdrReq+0x11c>
					{
						chMask |= 1 << i;
 801b7cc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801b7d0:	2201      	movs	r2, #1
 801b7d2:	fa02 f303 	lsl.w	r3, r2, r3
 801b7d6:	b21a      	sxth	r2, r3
 801b7d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b7da:	b21b      	sxth	r3, r3
 801b7dc:	4313      	orrs	r3, r2
 801b7de:	b21b      	sxth	r3, r3
 801b7e0:	b29b      	uxth	r3, r3
 801b7e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801b7e4:	e01a      	b.n	801b81c <RegionKR920LinkAdrReq+0x11c>
					}
				}
				else
				{
					if (((chMask & (1 << i)) != 0) &&
 801b7e6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801b7e8:	461a      	mov	r2, r3
 801b7ea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801b7ee:	fa42 f303 	asr.w	r3, r2, r3
 801b7f2:	f003 0301 	and.w	r3, r3, #1
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d010      	beq.n	801b81c <RegionKR920LinkAdrReq+0x11c>
						(Channels[i].Frequency == 0))
 801b7fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801b7fe:	4948      	ldr	r1, [pc, #288]	@ (801b920 <RegionKR920LinkAdrReq+0x220>)
 801b800:	4613      	mov	r3, r2
 801b802:	005b      	lsls	r3, r3, #1
 801b804:	4413      	add	r3, r2
 801b806:	009b      	lsls	r3, r3, #2
 801b808:	440b      	add	r3, r1
 801b80a:	681b      	ldr	r3, [r3, #0]
					if (((chMask & (1 << i)) != 0) &&
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d105      	bne.n	801b81c <RegionKR920LinkAdrReq+0x11c>
					{					// Trying to enable an undefined channel
						status &= 0xFE; // Channel mask KO
 801b810:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b814:	f023 0301 	bic.w	r3, r3, #1
 801b818:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			for (uint8_t i = 0; i < KR920_MAX_NB_CHANNELS; i++)
 801b81c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801b820:	3301      	adds	r3, #1
 801b822:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801b826:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801b82a:	2b0f      	cmp	r3, #15
 801b82c:	d9bf      	bls.n	801b7ae <RegionKR920LinkAdrReq+0xae>
	while (bytesProcessed < linkAdrReq->PayloadSize)
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	791b      	ldrb	r3, [r3, #4]
 801b832:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801b836:	429a      	cmp	r2, r3
 801b838:	f4ff af75 	bcc.w	801b726 <RegionKR920LinkAdrReq+0x26>
 801b83c:	e000      	b.n	801b840 <RegionKR920LinkAdrReq+0x140>
			break; // break loop, since no more request has been found
 801b83e:	bf00      	nop
			}
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 801b840:	2301      	movs	r3, #1
 801b842:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	795b      	ldrb	r3, [r3, #5]
 801b84a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionKR920GetPhyParam(&getPhy);
 801b84e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b852:	4618      	mov	r0, r3
 801b854:	f7ff fae6 	bl	801ae24 <RegionKR920GetPhyParam>
 801b858:	4603      	mov	r3, r0
 801b85a:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 801b85c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b860:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	799b      	ldrb	r3, [r3, #6]
 801b866:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801b868:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801b86c:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801b86e:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 801b872:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801b874:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801b878:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801b880:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801b882:	68fb      	ldr	r3, [r7, #12]
 801b884:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b888:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801b88a:	68fb      	ldr	r3, [r7, #12]
 801b88c:	7a5b      	ldrb	r3, [r3, #9]
 801b88e:	b25b      	sxtb	r3, r3
 801b890:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = KR920_MAX_NB_CHANNELS;
 801b892:	2310      	movs	r3, #16
 801b894:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = &chMask;
 801b896:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 801b89a:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 801b89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b89e:	b25b      	sxtb	r3, r3
 801b8a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = KR920_TX_MAX_DATARATE;
 801b8a4:	2305      	movs	r3, #5
 801b8a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 801b8aa:	4b1d      	ldr	r3, [pc, #116]	@ (801b920 <RegionKR920LinkAdrReq+0x220>)
 801b8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = KR920_MIN_TX_POWER;
 801b8ae:	2307      	movs	r3, #7
 801b8b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = KR920_MAX_TX_POWER;
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 801b8ba:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 801b8be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801b8c2:	1c9a      	adds	r2, r3, #2
 801b8c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801b8c8:	1c59      	adds	r1, r3, #1
 801b8ca:	f107 0014 	add.w	r0, r7, #20
 801b8ce:	4623      	mov	r3, r4
 801b8d0:	f7fa ffa2 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 801b8d4:	4603      	mov	r3, r0
 801b8d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	// Update channelsMask if everything is correct
	if (status == 0x07)
 801b8da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801b8de:	2b07      	cmp	r3, #7
 801b8e0:	d107      	bne.n	801b8f2 <RegionKR920LinkAdrReq+0x1f2>
	{
		// Set the channels mask to a default value
		memset(ChannelsMask, 0, sizeof(ChannelsMask));
 801b8e2:	220c      	movs	r2, #12
 801b8e4:	2100      	movs	r1, #0
 801b8e6:	480f      	ldr	r0, [pc, #60]	@ (801b924 <RegionKR920LinkAdrReq+0x224>)
 801b8e8:	f006 fcb0 	bl	802224c <memset>
		// Update the channels mask
		ChannelsMask[0] = chMask;
 801b8ec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801b8ee:	4b0d      	ldr	r3, [pc, #52]	@ (801b924 <RegionKR920LinkAdrReq+0x224>)
 801b8f0:	801a      	strh	r2, [r3, #0]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 801b8f2:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 801b8f6:	68bb      	ldr	r3, [r7, #8]
 801b8f8:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 801b8fa:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 801b902:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801b906:	683b      	ldr	r3, [r7, #0]
 801b908:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 801b90a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b90c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801b910:	701a      	strb	r2, [r3, #0]

	return status;
 801b912:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801b916:	4618      	mov	r0, r3
 801b918:	374c      	adds	r7, #76	@ 0x4c
 801b91a:	46bd      	mov	sp, r7
 801b91c:	bd90      	pop	{r4, r7, pc}
 801b91e:	bf00      	nop
 801b920:	2000792c 	.word	0x2000792c
 801b924:	20006c9c 	.word	0x20006c9c

0801b928 <RegionKR920RxParamSetupReq>:

uint8_t RegionKR920RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b084      	sub	sp, #16
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 801b930:	2307      	movs	r3, #7
 801b932:	73fb      	strb	r3, [r7, #15]

	// Verify radio frequency
	if (Radio.CheckRfFrequency(rxParamSetupReq->Frequency) == false)
 801b934:	4b19      	ldr	r3, [pc, #100]	@ (801b99c <RegionKR920RxParamSetupReq+0x74>)
 801b936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b938:	687a      	ldr	r2, [r7, #4]
 801b93a:	6852      	ldr	r2, [r2, #4]
 801b93c:	4610      	mov	r0, r2
 801b93e:	4798      	blx	r3
 801b940:	4603      	mov	r3, r0
 801b942:	f083 0301 	eor.w	r3, r3, #1
 801b946:	b2db      	uxtb	r3, r3
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d003      	beq.n	801b954 <RegionKR920RxParamSetupReq+0x2c>
	{
		status &= 0xFE; // Channel frequency KO
 801b94c:	7bfb      	ldrb	r3, [r7, #15]
 801b94e:	f023 0301 	bic.w	r3, r3, #1
 801b952:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, KR920_RX_MIN_DATARATE, KR920_RX_MAX_DATARATE) == false)
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	f993 3000 	ldrsb.w	r3, [r3]
 801b95a:	2205      	movs	r2, #5
 801b95c:	2100      	movs	r1, #0
 801b95e:	4618      	mov	r0, r3
 801b960:	f7fa fd02 	bl	8016368 <RegionCommonValueInRange>
 801b964:	4603      	mov	r3, r0
 801b966:	2b00      	cmp	r3, #0
 801b968:	d103      	bne.n	801b972 <RegionKR920RxParamSetupReq+0x4a>
	{
		status &= 0xFD; // Datarate KO
 801b96a:	7bfb      	ldrb	r3, [r7, #15]
 801b96c:	f023 0302 	bic.w	r3, r3, #2
 801b970:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, KR920_MIN_RX1_DR_OFFSET, KR920_MAX_RX1_DR_OFFSET) == false)
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b978:	2205      	movs	r2, #5
 801b97a:	2100      	movs	r1, #0
 801b97c:	4618      	mov	r0, r3
 801b97e:	f7fa fcf3 	bl	8016368 <RegionCommonValueInRange>
 801b982:	4603      	mov	r3, r0
 801b984:	2b00      	cmp	r3, #0
 801b986:	d103      	bne.n	801b990 <RegionKR920RxParamSetupReq+0x68>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 801b988:	7bfb      	ldrb	r3, [r7, #15]
 801b98a:	f023 0304 	bic.w	r3, r3, #4
 801b98e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 801b990:	7bfb      	ldrb	r3, [r7, #15]
}
 801b992:	4618      	mov	r0, r3
 801b994:	3710      	adds	r7, #16
 801b996:	46bd      	mov	sp, r7
 801b998:	bd80      	pop	{r7, pc}
 801b99a:	bf00      	nop
 801b99c:	08025450 	.word	0x08025450

0801b9a0 <RegionKR920NewChannelReq>:

uint8_t RegionKR920NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b086      	sub	sp, #24
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 801b9a8:	2303      	movs	r3, #3
 801b9aa:	75fb      	strb	r3, [r7, #23]
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	if (newChannelReq->NewChannel->Frequency == 0)
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d114      	bne.n	801b9e0 <RegionKR920NewChannelReq+0x40>
	{
		channelRemove.ChannelId = newChannelReq->ChannelId;
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801b9bc:	b2db      	uxtb	r3, r3
 801b9be:	723b      	strb	r3, [r7, #8]

		// Remove
		if (RegionKR920ChannelsRemove(&channelRemove) == false)
 801b9c0:	f107 0308 	add.w	r3, r7, #8
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	f000 fa5d 	bl	801be84 <RegionKR920ChannelsRemove>
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	f083 0301 	eor.w	r3, r3, #1
 801b9d0:	b2db      	uxtb	r3, r3
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d03b      	beq.n	801ba4e <RegionKR920NewChannelReq+0xae>
		{
			status &= 0xFC;
 801b9d6:	7dfb      	ldrb	r3, [r7, #23]
 801b9d8:	f023 0303 	bic.w	r3, r3, #3
 801b9dc:	75fb      	strb	r3, [r7, #23]
 801b9de:	e036      	b.n	801ba4e <RegionKR920NewChannelReq+0xae>
		}
	}
	else
	{
		channelAdd.NewChannel = newChannelReq->NewChannel;
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	60fb      	str	r3, [r7, #12]
		channelAdd.ChannelId = newChannelReq->ChannelId;
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801b9ec:	b2db      	uxtb	r3, r3
 801b9ee:	743b      	strb	r3, [r7, #16]

		switch (RegionKR920ChannelAdd(&channelAdd))
 801b9f0:	f107 030c 	add.w	r3, r7, #12
 801b9f4:	4618      	mov	r0, r3
 801b9f6:	f000 f99d 	bl	801bd34 <RegionKR920ChannelAdd>
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	2b06      	cmp	r3, #6
 801b9fe:	d820      	bhi.n	801ba42 <RegionKR920NewChannelReq+0xa2>
 801ba00:	a201      	add	r2, pc, #4	@ (adr r2, 801ba08 <RegionKR920NewChannelReq+0x68>)
 801ba02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba06:	bf00      	nop
 801ba08:	0801ba4d 	.word	0x0801ba4d
 801ba0c:	0801ba43 	.word	0x0801ba43
 801ba10:	0801ba43 	.word	0x0801ba43
 801ba14:	0801ba43 	.word	0x0801ba43
 801ba18:	0801ba25 	.word	0x0801ba25
 801ba1c:	0801ba2f 	.word	0x0801ba2f
 801ba20:	0801ba39 	.word	0x0801ba39
		{
			break;
		}
		case LORAMAC_STATUS_FREQUENCY_INVALID:
		{
			status &= 0xFE;
 801ba24:	7dfb      	ldrb	r3, [r7, #23]
 801ba26:	f023 0301 	bic.w	r3, r3, #1
 801ba2a:	75fb      	strb	r3, [r7, #23]
			break;
 801ba2c:	e00f      	b.n	801ba4e <RegionKR920NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_DATARATE_INVALID:
		{
			status &= 0xFD;
 801ba2e:	7dfb      	ldrb	r3, [r7, #23]
 801ba30:	f023 0302 	bic.w	r3, r3, #2
 801ba34:	75fb      	strb	r3, [r7, #23]
			break;
 801ba36:	e00a      	b.n	801ba4e <RegionKR920NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		{
			status &= 0xFC;
 801ba38:	7dfb      	ldrb	r3, [r7, #23]
 801ba3a:	f023 0303 	bic.w	r3, r3, #3
 801ba3e:	75fb      	strb	r3, [r7, #23]
			break;
 801ba40:	e005      	b.n	801ba4e <RegionKR920NewChannelReq+0xae>
		}
		default:
		{
			status &= 0xFC;
 801ba42:	7dfb      	ldrb	r3, [r7, #23]
 801ba44:	f023 0303 	bic.w	r3, r3, #3
 801ba48:	75fb      	strb	r3, [r7, #23]
			break;
 801ba4a:	e000      	b.n	801ba4e <RegionKR920NewChannelReq+0xae>
			break;
 801ba4c:	bf00      	nop
		}
		}
	}

	return status;
 801ba4e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ba50:	4618      	mov	r0, r3
 801ba52:	3718      	adds	r7, #24
 801ba54:	46bd      	mov	sp, r7
 801ba56:	bd80      	pop	{r7, pc}

0801ba58 <RegionKR920TxParamSetupReq>:

int8_t RegionKR920TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 801ba58:	b480      	push	{r7}
 801ba5a:	b083      	sub	sp, #12
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
	return -1;
 801ba60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801ba64:	4618      	mov	r0, r3
 801ba66:	370c      	adds	r7, #12
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba6e:	4770      	bx	lr

0801ba70 <RegionKR920DlChannelReq>:

uint8_t RegionKR920DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b084      	sub	sp, #16
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 801ba78:	2303      	movs	r3, #3
 801ba7a:	73fb      	strb	r3, [r7, #15]

	// Verify if the frequency is supported
	if (VerifyTxFreq(dlChannelReq->Rx1Frequency) == false)
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	685b      	ldr	r3, [r3, #4]
 801ba80:	4618      	mov	r0, r3
 801ba82:	f7ff f8eb 	bl	801ac5c <VerifyTxFreq>
 801ba86:	4603      	mov	r3, r0
 801ba88:	f083 0301 	eor.w	r3, r3, #1
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d003      	beq.n	801ba9a <RegionKR920DlChannelReq+0x2a>
	{
		status &= 0xFE;
 801ba92:	7bfb      	ldrb	r3, [r7, #15]
 801ba94:	f023 0301 	bic.w	r3, r3, #1
 801ba98:	73fb      	strb	r3, [r7, #15]
	}

	// Verify if an uplink frequency exists
	if (Channels[dlChannelReq->ChannelId].Frequency == 0)
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	781b      	ldrb	r3, [r3, #0]
 801ba9e:	4619      	mov	r1, r3
 801baa0:	4a10      	ldr	r2, [pc, #64]	@ (801bae4 <RegionKR920DlChannelReq+0x74>)
 801baa2:	460b      	mov	r3, r1
 801baa4:	005b      	lsls	r3, r3, #1
 801baa6:	440b      	add	r3, r1
 801baa8:	009b      	lsls	r3, r3, #2
 801baaa:	4413      	add	r3, r2
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d103      	bne.n	801baba <RegionKR920DlChannelReq+0x4a>
	{
		status &= 0xFD;
 801bab2:	7bfb      	ldrb	r3, [r7, #15]
 801bab4:	f023 0302 	bic.w	r3, r3, #2
 801bab8:	73fb      	strb	r3, [r7, #15]
	}

	// Apply Rx1 frequency, if the status is OK
	if (status == 0x03)
 801baba:	7bfb      	ldrb	r3, [r7, #15]
 801babc:	2b03      	cmp	r3, #3
 801babe:	d10c      	bne.n	801bada <RegionKR920DlChannelReq+0x6a>
	{
		Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	781b      	ldrb	r3, [r3, #0]
 801bac4:	4618      	mov	r0, r3
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	685a      	ldr	r2, [r3, #4]
 801baca:	4906      	ldr	r1, [pc, #24]	@ (801bae4 <RegionKR920DlChannelReq+0x74>)
 801bacc:	4603      	mov	r3, r0
 801bace:	005b      	lsls	r3, r3, #1
 801bad0:	4403      	add	r3, r0
 801bad2:	009b      	lsls	r3, r3, #2
 801bad4:	440b      	add	r3, r1
 801bad6:	3304      	adds	r3, #4
 801bad8:	601a      	str	r2, [r3, #0]
	}

	return status;
 801bada:	7bfb      	ldrb	r3, [r7, #15]
}
 801badc:	4618      	mov	r0, r3
 801bade:	3710      	adds	r7, #16
 801bae0:	46bd      	mov	sp, r7
 801bae2:	bd80      	pop	{r7, pc}
 801bae4:	2000792c 	.word	0x2000792c

0801bae8 <RegionKR920AlternateDr>:

int8_t RegionKR920AlternateDr(AlternateDrParams_t *alternateDr)
{
 801bae8:	b480      	push	{r7}
 801baea:	b085      	sub	sp, #20
 801baec:	af00      	add	r7, sp, #0
 801baee:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 801baf0:	2300      	movs	r3, #0
 801baf2:	73fb      	strb	r3, [r7, #15]

	if ((alternateDr->NbTrials % 48) == 0)
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	881a      	ldrh	r2, [r3, #0]
 801baf8:	4b23      	ldr	r3, [pc, #140]	@ (801bb88 <RegionKR920AlternateDr+0xa0>)
 801bafa:	fba3 1302 	umull	r1, r3, r3, r2
 801bafe:	0959      	lsrs	r1, r3, #5
 801bb00:	460b      	mov	r3, r1
 801bb02:	005b      	lsls	r3, r3, #1
 801bb04:	440b      	add	r3, r1
 801bb06:	011b      	lsls	r3, r3, #4
 801bb08:	1ad3      	subs	r3, r2, r3
 801bb0a:	b29b      	uxth	r3, r3
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d102      	bne.n	801bb16 <RegionKR920AlternateDr+0x2e>
	{
		datarate = DR_0;
 801bb10:	2300      	movs	r3, #0
 801bb12:	73fb      	strb	r3, [r7, #15]
 801bb14:	e030      	b.n	801bb78 <RegionKR920AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 32) == 0)
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	881b      	ldrh	r3, [r3, #0]
 801bb1a:	f003 031f 	and.w	r3, r3, #31
 801bb1e:	b29b      	uxth	r3, r3
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d102      	bne.n	801bb2a <RegionKR920AlternateDr+0x42>
	{
		datarate = DR_1;
 801bb24:	2301      	movs	r3, #1
 801bb26:	73fb      	strb	r3, [r7, #15]
 801bb28:	e026      	b.n	801bb78 <RegionKR920AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 24) == 0)
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	881a      	ldrh	r2, [r3, #0]
 801bb2e:	4b16      	ldr	r3, [pc, #88]	@ (801bb88 <RegionKR920AlternateDr+0xa0>)
 801bb30:	fba3 1302 	umull	r1, r3, r3, r2
 801bb34:	0919      	lsrs	r1, r3, #4
 801bb36:	460b      	mov	r3, r1
 801bb38:	005b      	lsls	r3, r3, #1
 801bb3a:	440b      	add	r3, r1
 801bb3c:	00db      	lsls	r3, r3, #3
 801bb3e:	1ad3      	subs	r3, r2, r3
 801bb40:	b29b      	uxth	r3, r3
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d102      	bne.n	801bb4c <RegionKR920AlternateDr+0x64>
	{
		datarate = DR_2;
 801bb46:	2302      	movs	r3, #2
 801bb48:	73fb      	strb	r3, [r7, #15]
 801bb4a:	e015      	b.n	801bb78 <RegionKR920AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 16) == 0)
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	881b      	ldrh	r3, [r3, #0]
 801bb50:	f003 030f 	and.w	r3, r3, #15
 801bb54:	b29b      	uxth	r3, r3
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d102      	bne.n	801bb60 <RegionKR920AlternateDr+0x78>
	{
		datarate = DR_3;
 801bb5a:	2303      	movs	r3, #3
 801bb5c:	73fb      	strb	r3, [r7, #15]
 801bb5e:	e00b      	b.n	801bb78 <RegionKR920AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 8) == 0)
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	881b      	ldrh	r3, [r3, #0]
 801bb64:	f003 0307 	and.w	r3, r3, #7
 801bb68:	b29b      	uxth	r3, r3
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d102      	bne.n	801bb74 <RegionKR920AlternateDr+0x8c>
	{
		datarate = DR_4;
 801bb6e:	2304      	movs	r3, #4
 801bb70:	73fb      	strb	r3, [r7, #15]
 801bb72:	e001      	b.n	801bb78 <RegionKR920AlternateDr+0x90>
	}
	else
	{
		datarate = DR_5;
 801bb74:	2305      	movs	r3, #5
 801bb76:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 801bb78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bb7c:	4618      	mov	r0, r3
 801bb7e:	3714      	adds	r7, #20
 801bb80:	46bd      	mov	sp, r7
 801bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb86:	4770      	bx	lr
 801bb88:	aaaaaaab 	.word	0xaaaaaaab

0801bb8c <RegionKR920CalcBackOff>:

void RegionKR920CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 801bb8c:	b580      	push	{r7, lr}
 801bb8e:	b08a      	sub	sp, #40	@ 0x28
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 801bb94:	4b11      	ldr	r3, [pc, #68]	@ (801bbdc <RegionKR920CalcBackOff+0x50>)
 801bb96:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 801bb98:	4b11      	ldr	r3, [pc, #68]	@ (801bbe0 <RegionKR920CalcBackOff+0x54>)
 801bb9a:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	785b      	ldrb	r3, [r3, #1]
 801bba0:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	781b      	ldrb	r3, [r3, #0]
 801bba6:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	789b      	ldrb	r3, [r3, #2]
 801bbac:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	78db      	ldrb	r3, [r3, #3]
 801bbb2:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bbba:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801bbc4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 801bbc8:	f107 0308 	add.w	r3, r7, #8
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f7fa ffb3 	bl	8016b38 <RegionCommonCalcBackOff>
}
 801bbd2:	bf00      	nop
 801bbd4:	3728      	adds	r7, #40	@ 0x28
 801bbd6:	46bd      	mov	sp, r7
 801bbd8:	bd80      	pop	{r7, pc}
 801bbda:	bf00      	nop
 801bbdc:	2000792c 	.word	0x2000792c
 801bbe0:	20000230 	.word	0x20000230

0801bbe4 <RegionKR920NextChannel>:

bool RegionKR920NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 801bbe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bbe8:	b092      	sub	sp, #72	@ 0x48
 801bbea:	af04      	add	r7, sp, #16
 801bbec:	60f8      	str	r0, [r7, #12]
 801bbee:	60b9      	str	r1, [r7, #8]
 801bbf0:	607a      	str	r2, [r7, #4]
 801bbf2:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 801bbf4:	2300      	movs	r3, #0
 801bbf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t delayTx = 0;
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t enabledChannels[KR920_MAX_NB_CHANNELS] = {0};
 801bc00:	2300      	movs	r3, #0
 801bc02:	617b      	str	r3, [r7, #20]
 801bc04:	f107 0318 	add.w	r3, r7, #24
 801bc08:	2200      	movs	r2, #0
 801bc0a:	601a      	str	r2, [r3, #0]
 801bc0c:	605a      	str	r2, [r3, #4]
 801bc0e:	609a      	str	r2, [r3, #8]
	TimerTime_t nextTxDelay = 0;
 801bc10:	f04f 0200 	mov.w	r2, #0
 801bc14:	f04f 0300 	mov.w	r3, #0
 801bc18:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if (RegionCommonCountChannels(ChannelsMask, 0, 1) == 0)
 801bc1c:	2201      	movs	r2, #1
 801bc1e:	2100      	movs	r1, #0
 801bc20:	4841      	ldr	r0, [pc, #260]	@ (801bd28 <RegionKR920NextChannel+0x144>)
 801bc22:	f7fa fbf4 	bl	801640e <RegionCommonCountChannels>
	{	// Reactivate default channels
		//ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	e9d3 4500 	ldrd	r4, r5, [r3]
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bc32:	4610      	mov	r0, r2
 801bc34:	4619      	mov	r1, r3
 801bc36:	f005 fa11 	bl	802105c <util_timer_get_elapsedtime>
 801bc3a:	4602      	mov	r2, r0
 801bc3c:	460b      	mov	r3, r1
 801bc3e:	42a2      	cmp	r2, r4
 801bc40:	41ab      	sbcs	r3, r5
 801bc42:	d326      	bcc.n	801bc92 <RegionKR920NextChannel+0xae>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 801bc44:	6839      	ldr	r1, [r7, #0]
 801bc46:	f04f 0200 	mov.w	r2, #0
 801bc4a:	f04f 0300 	mov.w	r3, #0
 801bc4e:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, KR920_MAX_NB_BANDS);
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	7c58      	ldrb	r0, [r3, #17]
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	7c99      	ldrb	r1, [r3, #18]
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	4a33      	ldr	r2, [pc, #204]	@ (801bd2c <RegionKR920NextChannel+0x148>)
 801bc5e:	f7fa fc4a 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 801bc62:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Joined, nextChanParams->Datarate,
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	7c58      	ldrb	r0, [r3, #17]
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801bc70:	b2d9      	uxtb	r1, r3
 801bc72:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 801bc76:	9302      	str	r3, [sp, #8]
 801bc78:	f107 0314 	add.w	r3, r7, #20
 801bc7c:	9301      	str	r3, [sp, #4]
 801bc7e:	4b2b      	ldr	r3, [pc, #172]	@ (801bd2c <RegionKR920NextChannel+0x148>)
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	4b2b      	ldr	r3, [pc, #172]	@ (801bd30 <RegionKR920NextChannel+0x14c>)
 801bc84:	4a28      	ldr	r2, [pc, #160]	@ (801bd28 <RegionKR920NextChannel+0x144>)
 801bc86:	f7ff f827 	bl	801acd8 <CountNbOfEnabledChannels>
 801bc8a:	4603      	mov	r3, r0
 801bc8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801bc90:	e017      	b.n	801bcc2 <RegionKR920NextChannel+0xde>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 801bc92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bc96:	3301      	adds	r3, #1
 801bc98:	b2db      	uxtb	r3, r3
 801bc9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	e9d3 4500 	ldrd	r4, r5, [r3]
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801bcaa:	4610      	mov	r0, r2
 801bcac:	4619      	mov	r1, r3
 801bcae:	f005 f9d5 	bl	802105c <util_timer_get_elapsedtime>
 801bcb2:	4602      	mov	r2, r0
 801bcb4:	460b      	mov	r3, r1
 801bcb6:	ebb4 0802 	subs.w	r8, r4, r2
 801bcba:	eb65 0903 	sbc.w	r9, r5, r3
 801bcbe:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}

	if (nbEnabledChannels > 0)
 801bcc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d016      	beq.n	801bcf8 <RegionKR920NextChannel+0x114>
	{
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 801bcca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801bcce:	3b01      	subs	r3, #1
 801bcd0:	4619      	mov	r1, r3
 801bcd2:	2000      	movs	r0, #0
 801bcd4:	f004 ff4e 	bl	8020b74 <randr>
 801bcd8:	4603      	mov	r3, r0
 801bcda:	3338      	adds	r3, #56	@ 0x38
 801bcdc:	443b      	add	r3, r7
 801bcde:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 801bce2:	68bb      	ldr	r3, [r7, #8]
 801bce4:	701a      	strb	r2, [r3, #0]
		*time = 0;
 801bce6:	6879      	ldr	r1, [r7, #4]
 801bce8:	f04f 0200 	mov.w	r2, #0
 801bcec:	f04f 0300 	mov.w	r3, #0
 801bcf0:	e9c1 2300 	strd	r2, r3, [r1]

		return true;
 801bcf4:	2301      	movs	r3, #1
 801bcf6:	e012      	b.n	801bd1e <RegionKR920NextChannel+0x13a>
            return false;
#endif
	}
	else
	{
		if (delayTx > 0)
 801bcf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d006      	beq.n	801bd0e <RegionKR920NextChannel+0x12a>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 801bd00:	6879      	ldr	r1, [r7, #4]
 801bd02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801bd06:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 801bd0a:	2301      	movs	r3, #1
 801bd0c:	e007      	b.n	801bd1e <RegionKR920NextChannel+0x13a>
		}
		// Datarate not supported by any channel, restore defaults
		//ChannelsMask[0] |= LC(1) + LC(2) + LC(3);
		*time = 0;
 801bd0e:	6879      	ldr	r1, [r7, #4]
 801bd10:	f04f 0200 	mov.w	r2, #0
 801bd14:	f04f 0300 	mov.w	r3, #0
 801bd18:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 801bd1c:	2300      	movs	r3, #0
	}
}
 801bd1e:	4618      	mov	r0, r3
 801bd20:	3738      	adds	r7, #56	@ 0x38
 801bd22:	46bd      	mov	sp, r7
 801bd24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801bd28:	20006c9c 	.word	0x20006c9c
 801bd2c:	20000230 	.word	0x20000230
 801bd30:	2000792c 	.word	0x2000792c

0801bd34 <RegionKR920ChannelAdd>:

LoRaMacStatus_t RegionKR920ChannelAdd(ChannelAddParams_t *channelAdd)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b084      	sub	sp, #16
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	6078      	str	r0, [r7, #4]
	uint8_t band = 0;
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	737b      	strb	r3, [r7, #13]
	bool drInvalid = false;
 801bd40:	2300      	movs	r3, #0
 801bd42:	73fb      	strb	r3, [r7, #15]
	bool freqInvalid = false;
 801bd44:	2300      	movs	r3, #0
 801bd46:	73bb      	strb	r3, [r7, #14]
	uint8_t id = channelAdd->ChannelId;
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	791b      	ldrb	r3, [r3, #4]
 801bd4c:	733b      	strb	r3, [r7, #12]

	if (id >= KR920_MAX_NB_CHANNELS)
 801bd4e:	7b3b      	ldrb	r3, [r7, #12]
 801bd50:	2b0f      	cmp	r3, #15
 801bd52:	d901      	bls.n	801bd58 <RegionKR920ChannelAdd+0x24>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 801bd54:	2303      	movs	r3, #3
 801bd56:	e08c      	b.n	801be72 <RegionKR920ChannelAdd+0x13e>
	}

	// Validate the datarate range
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Min, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE) == false)
 801bd58:	687b      	ldr	r3, [r7, #4]
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	7a1b      	ldrb	r3, [r3, #8]
 801bd5e:	f343 0303 	sbfx	r3, r3, #0, #4
 801bd62:	b25b      	sxtb	r3, r3
 801bd64:	2205      	movs	r2, #5
 801bd66:	2100      	movs	r1, #0
 801bd68:	4618      	mov	r0, r3
 801bd6a:	f7fa fafd 	bl	8016368 <RegionCommonValueInRange>
 801bd6e:	4603      	mov	r3, r0
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d101      	bne.n	801bd78 <RegionKR920ChannelAdd+0x44>
	{
		drInvalid = true;
 801bd74:	2301      	movs	r3, #1
 801bd76:	73fb      	strb	r3, [r7, #15]
	}
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, KR920_TX_MIN_DATARATE, KR920_TX_MAX_DATARATE) == false)
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	7a1b      	ldrb	r3, [r3, #8]
 801bd7e:	f343 1303 	sbfx	r3, r3, #4, #4
 801bd82:	b25b      	sxtb	r3, r3
 801bd84:	2205      	movs	r2, #5
 801bd86:	2100      	movs	r1, #0
 801bd88:	4618      	mov	r0, r3
 801bd8a:	f7fa faed 	bl	8016368 <RegionCommonValueInRange>
 801bd8e:	4603      	mov	r3, r0
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d101      	bne.n	801bd98 <RegionKR920ChannelAdd+0x64>
	{
		drInvalid = true;
 801bd94:	2301      	movs	r3, #1
 801bd96:	73fb      	strb	r3, [r7, #15]
	}
	if (channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max)
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	7a1b      	ldrb	r3, [r3, #8]
 801bd9e:	f343 0303 	sbfx	r3, r3, #0, #4
 801bda2:	b25a      	sxtb	r2, r3
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	7a1b      	ldrb	r3, [r3, #8]
 801bdaa:	f343 1303 	sbfx	r3, r3, #4, #4
 801bdae:	b25b      	sxtb	r3, r3
 801bdb0:	429a      	cmp	r2, r3
 801bdb2:	dd01      	ble.n	801bdb8 <RegionKR920ChannelAdd+0x84>
	{
		drInvalid = true;
 801bdb4:	2301      	movs	r3, #1
 801bdb6:	73fb      	strb	r3, [r7, #15]
	}

	// Default channels don't accept all values
	if (id < KR920_NUMB_DEFAULT_CHANNELS)
 801bdb8:	7b3b      	ldrb	r3, [r7, #12]
 801bdba:	2b06      	cmp	r3, #6
 801bdbc:	d80e      	bhi.n	801bddc <RegionKR920ChannelAdd+0xa8>
	{
		// All datarates are supported
		// We are not allowed to change the frequency
		if (channelAdd->NewChannel->Frequency != Channels[id].Frequency)
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	6819      	ldr	r1, [r3, #0]
 801bdc4:	7b3a      	ldrb	r2, [r7, #12]
 801bdc6:	482d      	ldr	r0, [pc, #180]	@ (801be7c <RegionKR920ChannelAdd+0x148>)
 801bdc8:	4613      	mov	r3, r2
 801bdca:	005b      	lsls	r3, r3, #1
 801bdcc:	4413      	add	r3, r2
 801bdce:	009b      	lsls	r3, r3, #2
 801bdd0:	4403      	add	r3, r0
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	4299      	cmp	r1, r3
 801bdd6:	d001      	beq.n	801bddc <RegionKR920ChannelAdd+0xa8>
		{
			freqInvalid = true;
 801bdd8:	2301      	movs	r3, #1
 801bdda:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check frequency
	if (freqInvalid == false)
 801bddc:	7bbb      	ldrb	r3, [r7, #14]
 801bdde:	f083 0301 	eor.w	r3, r3, #1
 801bde2:	b2db      	uxtb	r3, r3
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d00d      	beq.n	801be04 <RegionKR920ChannelAdd+0xd0>
	{
		if (VerifyTxFreq(channelAdd->NewChannel->Frequency) == false)
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	4618      	mov	r0, r3
 801bdf0:	f7fe ff34 	bl	801ac5c <VerifyTxFreq>
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	f083 0301 	eor.w	r3, r3, #1
 801bdfa:	b2db      	uxtb	r3, r3
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d001      	beq.n	801be04 <RegionKR920ChannelAdd+0xd0>
		{
			freqInvalid = true;
 801be00:	2301      	movs	r3, #1
 801be02:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check status
	if ((drInvalid == true) && (freqInvalid == true))
 801be04:	7bfb      	ldrb	r3, [r7, #15]
 801be06:	2b00      	cmp	r3, #0
 801be08:	d004      	beq.n	801be14 <RegionKR920ChannelAdd+0xe0>
 801be0a:	7bbb      	ldrb	r3, [r7, #14]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d001      	beq.n	801be14 <RegionKR920ChannelAdd+0xe0>
	{
		return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801be10:	2306      	movs	r3, #6
 801be12:	e02e      	b.n	801be72 <RegionKR920ChannelAdd+0x13e>
	}
	if (drInvalid == true)
 801be14:	7bfb      	ldrb	r3, [r7, #15]
 801be16:	2b00      	cmp	r3, #0
 801be18:	d001      	beq.n	801be1e <RegionKR920ChannelAdd+0xea>
	{
		return LORAMAC_STATUS_DATARATE_INVALID;
 801be1a:	2305      	movs	r3, #5
 801be1c:	e029      	b.n	801be72 <RegionKR920ChannelAdd+0x13e>
	}
	if (freqInvalid == true)
 801be1e:	7bbb      	ldrb	r3, [r7, #14]
 801be20:	2b00      	cmp	r3, #0
 801be22:	d001      	beq.n	801be28 <RegionKR920ChannelAdd+0xf4>
	{
		return LORAMAC_STATUS_FREQUENCY_INVALID;
 801be24:	2304      	movs	r3, #4
 801be26:	e024      	b.n	801be72 <RegionKR920ChannelAdd+0x13e>
	}

	memcpy(&(Channels[id]), channelAdd->NewChannel, sizeof(Channels[id]));
 801be28:	7b3a      	ldrb	r2, [r7, #12]
 801be2a:	4613      	mov	r3, r2
 801be2c:	005b      	lsls	r3, r3, #1
 801be2e:	4413      	add	r3, r2
 801be30:	009b      	lsls	r3, r3, #2
 801be32:	4a12      	ldr	r2, [pc, #72]	@ (801be7c <RegionKR920ChannelAdd+0x148>)
 801be34:	1898      	adds	r0, r3, r2
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	220c      	movs	r2, #12
 801be3c:	4619      	mov	r1, r3
 801be3e:	f006 fa94 	bl	802236a <memcpy>
	Channels[id].Band = band;
 801be42:	7b3a      	ldrb	r2, [r7, #12]
 801be44:	490d      	ldr	r1, [pc, #52]	@ (801be7c <RegionKR920ChannelAdd+0x148>)
 801be46:	4613      	mov	r3, r2
 801be48:	005b      	lsls	r3, r3, #1
 801be4a:	4413      	add	r3, r2
 801be4c:	009b      	lsls	r3, r3, #2
 801be4e:	440b      	add	r3, r1
 801be50:	3309      	adds	r3, #9
 801be52:	7b7a      	ldrb	r2, [r7, #13]
 801be54:	701a      	strb	r2, [r3, #0]
	ChannelsMask[0] |= (1 << id);
 801be56:	4b0a      	ldr	r3, [pc, #40]	@ (801be80 <RegionKR920ChannelAdd+0x14c>)
 801be58:	881b      	ldrh	r3, [r3, #0]
 801be5a:	b21a      	sxth	r2, r3
 801be5c:	7b3b      	ldrb	r3, [r7, #12]
 801be5e:	2101      	movs	r1, #1
 801be60:	fa01 f303 	lsl.w	r3, r1, r3
 801be64:	b21b      	sxth	r3, r3
 801be66:	4313      	orrs	r3, r2
 801be68:	b21b      	sxth	r3, r3
 801be6a:	b29a      	uxth	r2, r3
 801be6c:	4b04      	ldr	r3, [pc, #16]	@ (801be80 <RegionKR920ChannelAdd+0x14c>)
 801be6e:	801a      	strh	r2, [r3, #0]
	return LORAMAC_STATUS_OK;
 801be70:	2300      	movs	r3, #0
}
 801be72:	4618      	mov	r0, r3
 801be74:	3710      	adds	r7, #16
 801be76:	46bd      	mov	sp, r7
 801be78:	bd80      	pop	{r7, pc}
 801be7a:	bf00      	nop
 801be7c:	2000792c 	.word	0x2000792c
 801be80:	20006c9c 	.word	0x20006c9c

0801be84 <RegionKR920ChannelsRemove>:

bool RegionKR920ChannelsRemove(ChannelRemoveParams_t *channelRemove)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b086      	sub	sp, #24
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
	uint8_t id = channelRemove->ChannelId;
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	781b      	ldrb	r3, [r3, #0]
 801be90:	75fb      	strb	r3, [r7, #23]

	if (id < KR920_NUMB_DEFAULT_CHANNELS)
 801be92:	7dfb      	ldrb	r3, [r7, #23]
 801be94:	2b06      	cmp	r3, #6
 801be96:	d801      	bhi.n	801be9c <RegionKR920ChannelsRemove+0x18>
	{
		return false;
 801be98:	2300      	movs	r3, #0
 801be9a:	e012      	b.n	801bec2 <RegionKR920ChannelsRemove+0x3e>
	}

	// Remove the channel from the list of channels
	Channels[id] = (ChannelParams_t){0, 0, {0}, 0};
 801be9c:	7dfa      	ldrb	r2, [r7, #23]
 801be9e:	490b      	ldr	r1, [pc, #44]	@ (801becc <RegionKR920ChannelsRemove+0x48>)
 801bea0:	4613      	mov	r3, r2
 801bea2:	005b      	lsls	r3, r3, #1
 801bea4:	4413      	add	r3, r2
 801bea6:	009b      	lsls	r3, r3, #2
 801bea8:	440b      	add	r3, r1
 801beaa:	461a      	mov	r2, r3
 801beac:	2300      	movs	r3, #0
 801beae:	6013      	str	r3, [r2, #0]
 801beb0:	6053      	str	r3, [r2, #4]
 801beb2:	6093      	str	r3, [r2, #8]

	return RegionCommonChanDisable(ChannelsMask, id, KR920_MAX_NB_CHANNELS);
 801beb4:	7dfb      	ldrb	r3, [r7, #23]
 801beb6:	2210      	movs	r2, #16
 801beb8:	4619      	mov	r1, r3
 801beba:	4805      	ldr	r0, [pc, #20]	@ (801bed0 <RegionKR920ChannelsRemove+0x4c>)
 801bebc:	f7fa fa72 	bl	80163a4 <RegionCommonChanDisable>
 801bec0:	4603      	mov	r3, r0
}
 801bec2:	4618      	mov	r0, r3
 801bec4:	3718      	adds	r7, #24
 801bec6:	46bd      	mov	sp, r7
 801bec8:	bd80      	pop	{r7, pc}
 801beca:	bf00      	nop
 801becc:	2000792c 	.word	0x2000792c
 801bed0:	20006c9c 	.word	0x20006c9c

0801bed4 <RegionKR920SetContinuousWave>:

void RegionKR920SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b086      	sub	sp, #24
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 801bedc:	687b      	ldr	r3, [r7, #4]
 801bede:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	781b      	ldrb	r3, [r3, #0]
 801bee6:	4619      	mov	r1, r3
 801bee8:	4a2f      	ldr	r2, [pc, #188]	@ (801bfa8 <RegionKR920SetContinuousWave+0xd4>)
 801beea:	460b      	mov	r3, r1
 801beec:	005b      	lsls	r3, r3, #1
 801beee:	440b      	add	r3, r1
 801bef0:	009b      	lsls	r3, r3, #2
 801bef2:	4413      	add	r3, r2
 801bef4:	3309      	adds	r3, #9
 801bef6:	781b      	ldrb	r3, [r3, #0]
 801bef8:	4a2c      	ldr	r2, [pc, #176]	@ (801bfac <RegionKR920SetContinuousWave+0xd8>)
 801befa:	015b      	lsls	r3, r3, #5
 801befc:	4413      	add	r3, r2
 801befe:	3302      	adds	r3, #2
 801bf00:	f993 1000 	ldrsb.w	r1, [r3]
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801bf0a:	4b29      	ldr	r3, [pc, #164]	@ (801bfb0 <RegionKR920SetContinuousWave+0xdc>)
 801bf0c:	f7fe fe8a 	bl	801ac24 <LimitTxPower>
 801bf10:	4603      	mov	r3, r0
 801bf12:	75fb      	strb	r3, [r7, #23]
	float maxEIRP = GetMaxEIRP(Channels[continuousWave->Channel].Frequency);
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	781b      	ldrb	r3, [r3, #0]
 801bf18:	4619      	mov	r1, r3
 801bf1a:	4a23      	ldr	r2, [pc, #140]	@ (801bfa8 <RegionKR920SetContinuousWave+0xd4>)
 801bf1c:	460b      	mov	r3, r1
 801bf1e:	005b      	lsls	r3, r3, #1
 801bf20:	440b      	add	r3, r1
 801bf22:	009b      	lsls	r3, r3, #2
 801bf24:	4413      	add	r3, r2
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	4618      	mov	r0, r3
 801bf2a:	f7fe fe47 	bl	801abbc <GetMaxEIRP>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	ee07 3a90 	vmov	s15, r3
 801bf34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bf38:	edc7 7a04 	vstr	s15, [r7, #16]
	int8_t phyTxPower = 0;
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	73fb      	strb	r3, [r7, #15]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	781b      	ldrb	r3, [r3, #0]
 801bf44:	4619      	mov	r1, r3
 801bf46:	4a18      	ldr	r2, [pc, #96]	@ (801bfa8 <RegionKR920SetContinuousWave+0xd4>)
 801bf48:	460b      	mov	r3, r1
 801bf4a:	005b      	lsls	r3, r3, #1
 801bf4c:	440b      	add	r3, r1
 801bf4e:	009b      	lsls	r3, r3, #2
 801bf50:	4413      	add	r3, r2
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	60bb      	str	r3, [r7, #8]

	// Take the minimum between the maxEIRP and continuousWave->MaxEirp.
	// The value of continuousWave->MaxEirp could have changed during runtime, e.g. due to a MAC command.
	maxEIRP = T_MIN(continuousWave->MaxEirp, maxEIRP);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	edd3 7a01 	vldr	s15, [r3, #4]
 801bf5c:	ed97 7a04 	vldr	s14, [r7, #16]
 801bf60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801bf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf68:	dd02      	ble.n	801bf70 <RegionKR920SetContinuousWave+0x9c>
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	685b      	ldr	r3, [r3, #4]
 801bf6e:	e000      	b.n	801bf72 <RegionKR920SetContinuousWave+0x9e>
 801bf70:	693b      	ldr	r3, [r7, #16]
 801bf72:	613b      	str	r3, [r7, #16]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, maxEIRP, continuousWave->AntennaGain);
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	edd3 7a02 	vldr	s15, [r3, #8]
 801bf7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bf7e:	eef0 0a67 	vmov.f32	s1, s15
 801bf82:	ed97 0a04 	vldr	s0, [r7, #16]
 801bf86:	4618      	mov	r0, r3
 801bf88:	f7fa fda4 	bl	8016ad4 <RegionCommonComputeTxPower>
 801bf8c:	4603      	mov	r3, r0
 801bf8e:	73fb      	strb	r3, [r7, #15]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 801bf90:	4b08      	ldr	r3, [pc, #32]	@ (801bfb4 <RegionKR920SetContinuousWave+0xe0>)
 801bf92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bf94:	687a      	ldr	r2, [r7, #4]
 801bf96:	8992      	ldrh	r2, [r2, #12]
 801bf98:	f997 100f 	ldrsb.w	r1, [r7, #15]
 801bf9c:	68b8      	ldr	r0, [r7, #8]
 801bf9e:	4798      	blx	r3
}
 801bfa0:	bf00      	nop
 801bfa2:	3718      	adds	r7, #24
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}
 801bfa8:	2000792c 	.word	0x2000792c
 801bfac:	20000230 	.word	0x20000230
 801bfb0:	20006c9c 	.word	0x20006c9c
 801bfb4:	08025450 	.word	0x08025450

0801bfb8 <RegionKR920ApplyDrOffset>:

uint8_t RegionKR920ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 801bfb8:	b480      	push	{r7}
 801bfba:	b085      	sub	sp, #20
 801bfbc:	af00      	add	r7, sp, #0
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	71fb      	strb	r3, [r7, #7]
 801bfc2:	460b      	mov	r3, r1
 801bfc4:	71bb      	strb	r3, [r7, #6]
 801bfc6:	4613      	mov	r3, r2
 801bfc8:	717b      	strb	r3, [r7, #5]
	int8_t datarate = dr - drOffset;
 801bfca:	79ba      	ldrb	r2, [r7, #6]
 801bfcc:	797b      	ldrb	r3, [r7, #5]
 801bfce:	1ad3      	subs	r3, r2, r3
 801bfd0:	b2db      	uxtb	r3, r3
 801bfd2:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 801bfd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	da01      	bge.n	801bfe0 <RegionKR920ApplyDrOffset+0x28>
	{
		datarate = DR_0;
 801bfdc:	2300      	movs	r3, #0
 801bfde:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 801bfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	3714      	adds	r7, #20
 801bfe6:	46bd      	mov	sp, r7
 801bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfec:	4770      	bx	lr

0801bfee <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 801bfee:	b480      	push	{r7}
 801bff0:	b085      	sub	sp, #20
 801bff2:	af00      	add	r7, sp, #0
 801bff4:	4603      	mov	r3, r0
 801bff6:	460a      	mov	r2, r1
 801bff8:	71fb      	strb	r3, [r7, #7]
 801bffa:	4613      	mov	r3, r2
 801bffc:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 801bffe:	2300      	movs	r3, #0
 801c000:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 801c002:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c006:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c00a:	429a      	cmp	r2, r3
 801c00c:	d102      	bne.n	801c014 <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 801c00e:	79bb      	ldrb	r3, [r7, #6]
 801c010:	73fb      	strb	r3, [r7, #15]
 801c012:	e002      	b.n	801c01a <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 801c014:	79fb      	ldrb	r3, [r7, #7]
 801c016:	3b01      	subs	r3, #1
 801c018:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 801c01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c01e:	4618      	mov	r0, r3
 801c020:	3714      	adds	r7, #20
 801c022:	46bd      	mov	sp, r7
 801c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c028:	4770      	bx	lr
	...

0801c02c <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 801c02c:	b480      	push	{r7}
 801c02e:	b083      	sub	sp, #12
 801c030:	af00      	add	r7, sp, #0
 801c032:	6078      	str	r0, [r7, #4]
	switch (BandwidthsRU864[drIndex])
 801c034:	4a0a      	ldr	r2, [pc, #40]	@ (801c060 <GetBandwidth+0x34>)
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c03c:	4a09      	ldr	r2, [pc, #36]	@ (801c064 <GetBandwidth+0x38>)
 801c03e:	4293      	cmp	r3, r2
 801c040:	d004      	beq.n	801c04c <GetBandwidth+0x20>
 801c042:	4a09      	ldr	r2, [pc, #36]	@ (801c068 <GetBandwidth+0x3c>)
 801c044:	4293      	cmp	r3, r2
 801c046:	d003      	beq.n	801c050 <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 801c048:	2300      	movs	r3, #0
 801c04a:	e002      	b.n	801c052 <GetBandwidth+0x26>
	case 250000:
		return 1;
 801c04c:	2301      	movs	r3, #1
 801c04e:	e000      	b.n	801c052 <GetBandwidth+0x26>
	case 500000:
		return 2;
 801c050:	2302      	movs	r3, #2
	}
}
 801c052:	4618      	mov	r0, r3
 801c054:	370c      	adds	r7, #12
 801c056:	46bd      	mov	sp, r7
 801c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c05c:	4770      	bx	lr
 801c05e:	bf00      	nop
 801c060:	0802539c 	.word	0x0802539c
 801c064:	0003d090 	.word	0x0003d090
 801c068:	0007a120 	.word	0x0007a120

0801c06c <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 801c06c:	b480      	push	{r7}
 801c06e:	b085      	sub	sp, #20
 801c070:	af00      	add	r7, sp, #0
 801c072:	603b      	str	r3, [r7, #0]
 801c074:	4603      	mov	r3, r0
 801c076:	71fb      	strb	r3, [r7, #7]
 801c078:	460b      	mov	r3, r1
 801c07a:	71bb      	strb	r3, [r7, #6]
 801c07c:	4613      	mov	r3, r2
 801c07e:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 801c080:	79fb      	ldrb	r3, [r7, #7]
 801c082:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 801c084:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c088:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c08c:	4293      	cmp	r3, r2
 801c08e:	bfb8      	it	lt
 801c090:	4613      	movlt	r3, r2
 801c092:	73fb      	strb	r3, [r7, #15]

	return txPowerResult;
 801c094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c098:	4618      	mov	r0, r3
 801c09a:	3714      	adds	r7, #20
 801c09c:	46bd      	mov	sp, r7
 801c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0a2:	4770      	bx	lr

0801c0a4 <VerifyTxFreq>:

static bool VerifyTxFreq(uint32_t freq)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b082      	sub	sp, #8
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
	// Check radio driver support
	if (Radio.CheckRfFrequency(freq) == false)
 801c0ac:	4b0d      	ldr	r3, [pc, #52]	@ (801c0e4 <VerifyTxFreq+0x40>)
 801c0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c0b0:	6878      	ldr	r0, [r7, #4]
 801c0b2:	4798      	blx	r3
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	f083 0301 	eor.w	r3, r3, #1
 801c0ba:	b2db      	uxtb	r3, r3
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d001      	beq.n	801c0c4 <VerifyTxFreq+0x20>
	{
		return false;
 801c0c0:	2300      	movs	r3, #0
 801c0c2:	e00a      	b.n	801c0da <VerifyTxFreq+0x36>
	}

	if ((freq < 864000000) || (freq > 870000000))
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	4a08      	ldr	r2, [pc, #32]	@ (801c0e8 <VerifyTxFreq+0x44>)
 801c0c8:	4293      	cmp	r3, r2
 801c0ca:	d303      	bcc.n	801c0d4 <VerifyTxFreq+0x30>
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	4a07      	ldr	r2, [pc, #28]	@ (801c0ec <VerifyTxFreq+0x48>)
 801c0d0:	4293      	cmp	r3, r2
 801c0d2:	d901      	bls.n	801c0d8 <VerifyTxFreq+0x34>
	{
		return false;
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	e000      	b.n	801c0da <VerifyTxFreq+0x36>
	}
	return true;
 801c0d8:	2301      	movs	r3, #1
}
 801c0da:	4618      	mov	r0, r3
 801c0dc:	3708      	adds	r7, #8
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	bd80      	pop	{r7, pc}
 801c0e2:	bf00      	nop
 801c0e4:	08025450 	.word	0x08025450
 801c0e8:	337f9800 	.word	0x337f9800
 801c0ec:	33db2580 	.word	0x33db2580

0801c0f0 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(bool joined, uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 801c0f0:	b580      	push	{r7, lr}
 801c0f2:	b086      	sub	sp, #24
 801c0f4:	af00      	add	r7, sp, #0
 801c0f6:	60ba      	str	r2, [r7, #8]
 801c0f8:	607b      	str	r3, [r7, #4]
 801c0fa:	4603      	mov	r3, r0
 801c0fc:	73fb      	strb	r3, [r7, #15]
 801c0fe:	460b      	mov	r3, r1
 801c100:	73bb      	strb	r3, [r7, #14]
	uint8_t nbEnabledChannels = 0;
 801c102:	2300      	movs	r3, #0
 801c104:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 801c106:	2300      	movs	r3, #0
 801c108:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < RU864_MAX_NB_CHANNELS; i += 16, k++)
 801c10a:	2300      	movs	r3, #0
 801c10c:	757b      	strb	r3, [r7, #21]
 801c10e:	2300      	movs	r3, #0
 801c110:	753b      	strb	r3, [r7, #20]
 801c112:	e086      	b.n	801c222 <CountNbOfEnabledChannels+0x132>
	{
		for (uint8_t j = 0; j < 16; j++)
 801c114:	2300      	movs	r3, #0
 801c116:	74fb      	strb	r3, [r7, #19]
 801c118:	e07a      	b.n	801c210 <CountNbOfEnabledChannels+0x120>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 801c11a:	7d3b      	ldrb	r3, [r7, #20]
 801c11c:	005b      	lsls	r3, r3, #1
 801c11e:	68ba      	ldr	r2, [r7, #8]
 801c120:	4413      	add	r3, r2
 801c122:	881b      	ldrh	r3, [r3, #0]
 801c124:	461a      	mov	r2, r3
 801c126:	7cfb      	ldrb	r3, [r7, #19]
 801c128:	fa42 f303 	asr.w	r3, r2, r3
 801c12c:	f003 0301 	and.w	r3, r3, #1
 801c130:	2b00      	cmp	r3, #0
 801c132:	d06a      	beq.n	801c20a <CountNbOfEnabledChannels+0x11a>
			{
				if (channels[i + j].Frequency == 0)
 801c134:	7d7a      	ldrb	r2, [r7, #21]
 801c136:	7cfb      	ldrb	r3, [r7, #19]
 801c138:	4413      	add	r3, r2
 801c13a:	461a      	mov	r2, r3
 801c13c:	4613      	mov	r3, r2
 801c13e:	005b      	lsls	r3, r3, #1
 801c140:	4413      	add	r3, r2
 801c142:	009b      	lsls	r3, r3, #2
 801c144:	461a      	mov	r2, r3
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	4413      	add	r3, r2
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d057      	beq.n	801c200 <CountNbOfEnabledChannels+0x110>
				{ // Check if the channel is enabled
					continue;
				}
				if (joined == false)
 801c150:	7bfb      	ldrb	r3, [r7, #15]
 801c152:	f083 0301 	eor.w	r3, r3, #1
 801c156:	b2db      	uxtb	r3, r3
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d007      	beq.n	801c16c <CountNbOfEnabledChannels+0x7c>
				{
					if ((RU864_JOIN_CHANNELS & (1 << j)) == 0)
 801c15c:	7cfb      	ldrb	r3, [r7, #19]
 801c15e:	2203      	movs	r2, #3
 801c160:	fa42 f303 	asr.w	r3, r2, r3
 801c164:	f003 0301 	and.w	r3, r3, #1
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d04b      	beq.n	801c204 <CountNbOfEnabledChannels+0x114>
					{
						continue;
					}
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 801c16c:	f997 000e 	ldrsb.w	r0, [r7, #14]
 801c170:	7d7a      	ldrb	r2, [r7, #21]
 801c172:	7cfb      	ldrb	r3, [r7, #19]
 801c174:	4413      	add	r3, r2
 801c176:	461a      	mov	r2, r3
 801c178:	4613      	mov	r3, r2
 801c17a:	005b      	lsls	r3, r3, #1
 801c17c:	4413      	add	r3, r2
 801c17e:	009b      	lsls	r3, r3, #2
 801c180:	461a      	mov	r2, r3
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	4413      	add	r3, r2
 801c186:	7a1b      	ldrb	r3, [r3, #8]
 801c188:	f343 0303 	sbfx	r3, r3, #0, #4
 801c18c:	b25b      	sxtb	r3, r3
 801c18e:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 801c190:	7d7a      	ldrb	r2, [r7, #21]
 801c192:	7cfb      	ldrb	r3, [r7, #19]
 801c194:	4413      	add	r3, r2
 801c196:	461a      	mov	r2, r3
 801c198:	4613      	mov	r3, r2
 801c19a:	005b      	lsls	r3, r3, #1
 801c19c:	4413      	add	r3, r2
 801c19e:	009b      	lsls	r3, r3, #2
 801c1a0:	461a      	mov	r2, r3
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	4413      	add	r3, r2
 801c1a6:	7a1b      	ldrb	r3, [r3, #8]
 801c1a8:	f343 1303 	sbfx	r3, r3, #4, #4
 801c1ac:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 801c1ae:	461a      	mov	r2, r3
 801c1b0:	f7fa f8da 	bl	8016368 <RegionCommonValueInRange>
 801c1b4:	4603      	mov	r3, r0
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d026      	beq.n	801c208 <CountNbOfEnabledChannels+0x118>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 801c1ba:	7d7a      	ldrb	r2, [r7, #21]
 801c1bc:	7cfb      	ldrb	r3, [r7, #19]
 801c1be:	4413      	add	r3, r2
 801c1c0:	461a      	mov	r2, r3
 801c1c2:	4613      	mov	r3, r2
 801c1c4:	005b      	lsls	r3, r3, #1
 801c1c6:	4413      	add	r3, r2
 801c1c8:	009b      	lsls	r3, r3, #2
 801c1ca:	461a      	mov	r2, r3
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	4413      	add	r3, r2
 801c1d0:	7a5b      	ldrb	r3, [r3, #9]
 801c1d2:	015b      	lsls	r3, r3, #5
 801c1d4:	6a3a      	ldr	r2, [r7, #32]
 801c1d6:	4413      	add	r3, r2
 801c1d8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801c1dc:	4313      	orrs	r3, r2
 801c1de:	d003      	beq.n	801c1e8 <CountNbOfEnabledChannels+0xf8>
				{ // Check if the band is available for transmission
					delayTransmission++;
 801c1e0:	7dbb      	ldrb	r3, [r7, #22]
 801c1e2:	3301      	adds	r3, #1
 801c1e4:	75bb      	strb	r3, [r7, #22]
					continue;
 801c1e6:	e010      	b.n	801c20a <CountNbOfEnabledChannels+0x11a>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 801c1e8:	7dfb      	ldrb	r3, [r7, #23]
 801c1ea:	1c5a      	adds	r2, r3, #1
 801c1ec:	75fa      	strb	r2, [r7, #23]
 801c1ee:	461a      	mov	r2, r3
 801c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1f2:	4413      	add	r3, r2
 801c1f4:	7d79      	ldrb	r1, [r7, #21]
 801c1f6:	7cfa      	ldrb	r2, [r7, #19]
 801c1f8:	440a      	add	r2, r1
 801c1fa:	b2d2      	uxtb	r2, r2
 801c1fc:	701a      	strb	r2, [r3, #0]
 801c1fe:	e004      	b.n	801c20a <CountNbOfEnabledChannels+0x11a>
					continue;
 801c200:	bf00      	nop
 801c202:	e002      	b.n	801c20a <CountNbOfEnabledChannels+0x11a>
						continue;
 801c204:	bf00      	nop
 801c206:	e000      	b.n	801c20a <CountNbOfEnabledChannels+0x11a>
					continue;
 801c208:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 801c20a:	7cfb      	ldrb	r3, [r7, #19]
 801c20c:	3301      	adds	r3, #1
 801c20e:	74fb      	strb	r3, [r7, #19]
 801c210:	7cfb      	ldrb	r3, [r7, #19]
 801c212:	2b0f      	cmp	r3, #15
 801c214:	d981      	bls.n	801c11a <CountNbOfEnabledChannels+0x2a>
	for (uint8_t i = 0, k = 0; i < RU864_MAX_NB_CHANNELS; i += 16, k++)
 801c216:	7d7b      	ldrb	r3, [r7, #21]
 801c218:	3310      	adds	r3, #16
 801c21a:	757b      	strb	r3, [r7, #21]
 801c21c:	7d3b      	ldrb	r3, [r7, #20]
 801c21e:	3301      	adds	r3, #1
 801c220:	753b      	strb	r3, [r7, #20]
 801c222:	7d7b      	ldrb	r3, [r7, #21]
 801c224:	2b0f      	cmp	r3, #15
 801c226:	f67f af75 	bls.w	801c114 <CountNbOfEnabledChannels+0x24>
			}
		}
	}

	*delayTx = delayTransmission;
 801c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c22c:	7dba      	ldrb	r2, [r7, #22]
 801c22e:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 801c230:	7dfb      	ldrb	r3, [r7, #23]
}
 801c232:	4618      	mov	r0, r3
 801c234:	3718      	adds	r7, #24
 801c236:	46bd      	mov	sp, r7
 801c238:	bd80      	pop	{r7, pc}
	...

0801c23c <RegionRU864GetPhyParam>:

PhyParam_t RegionRU864GetPhyParam(GetPhyParams_t *getPhy)
{
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b084      	sub	sp, #16
 801c240:	af00      	add	r7, sp, #0
 801c242:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 801c244:	2300      	movs	r3, #0
 801c246:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	781b      	ldrb	r3, [r3, #0]
 801c24c:	2b20      	cmp	r3, #32
 801c24e:	f200 80b3 	bhi.w	801c3b8 <RegionRU864GetPhyParam+0x17c>
 801c252:	a201      	add	r2, pc, #4	@ (adr r2, 801c258 <RegionRU864GetPhyParam+0x1c>)
 801c254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c258:	0801c2dd 	.word	0x0801c2dd
 801c25c:	0801c2e3 	.word	0x0801c2e3
 801c260:	0801c3b9 	.word	0x0801c3b9
 801c264:	0801c3b9 	.word	0x0801c3b9
 801c268:	0801c3b9 	.word	0x0801c3b9
 801c26c:	0801c2e9 	.word	0x0801c2e9
 801c270:	0801c3b9 	.word	0x0801c3b9
 801c274:	0801c3b9 	.word	0x0801c3b9
 801c278:	0801c303 	.word	0x0801c303
 801c27c:	0801c309 	.word	0x0801c309
 801c280:	0801c319 	.word	0x0801c319
 801c284:	0801c329 	.word	0x0801c329
 801c288:	0801c32f 	.word	0x0801c32f
 801c28c:	0801c337 	.word	0x0801c337
 801c290:	0801c33f 	.word	0x0801c33f
 801c294:	0801c347 	.word	0x0801c347
 801c298:	0801c34f 	.word	0x0801c34f
 801c29c:	0801c357 	.word	0x0801c357
 801c2a0:	0801c35f 	.word	0x0801c35f
 801c2a4:	0801c373 	.word	0x0801c373
 801c2a8:	0801c379 	.word	0x0801c379
 801c2ac:	0801c381 	.word	0x0801c381
 801c2b0:	0801c387 	.word	0x0801c387
 801c2b4:	0801c38d 	.word	0x0801c38d
 801c2b8:	0801c393 	.word	0x0801c393
 801c2bc:	0801c399 	.word	0x0801c399
 801c2c0:	0801c39f 	.word	0x0801c39f
 801c2c4:	0801c39f 	.word	0x0801c39f
 801c2c8:	0801c3a5 	.word	0x0801c3a5
 801c2cc:	0801c3ad 	.word	0x0801c3ad
 801c2d0:	0801c3b3 	.word	0x0801c3b3
 801c2d4:	0801c3b3 	.word	0x0801c3b3
 801c2d8:	0801c2ef 	.word	0x0801c2ef
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = RU864_RX_MIN_DATARATE;
 801c2dc:	2300      	movs	r3, #0
 801c2de:	60fb      	str	r3, [r7, #12]
		break;
 801c2e0:	e06b      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = RU864_TX_MIN_DATARATE;
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	60fb      	str	r3, [r7, #12]
		break;
 801c2e6:	e068      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = RU864_DEFAULT_DATARATE;
 801c2e8:	2302      	movs	r3, #2
 801c2ea:	60fb      	str	r3, [r7, #12]
		break;
 801c2ec:	e065      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, RU864_TX_MIN_DATARATE);
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c2f4:	2100      	movs	r1, #0
 801c2f6:	4618      	mov	r0, r3
 801c2f8:	f7ff fe79 	bl	801bfee <GetNextLowerTxDr>
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	60fb      	str	r3, [r7, #12]
		break;
 801c300:	e05b      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = RU864_DEFAULT_TX_POWER;
 801c302:	2300      	movs	r3, #0
 801c304:	60fb      	str	r3, [r7, #12]
		break;
 801c306:	e058      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateRU864[getPhy->Datarate];
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c30e:	461a      	mov	r2, r3
 801c310:	4b2c      	ldr	r3, [pc, #176]	@ (801c3c4 <RegionRU864GetPhyParam+0x188>)
 801c312:	5c9b      	ldrb	r3, [r3, r2]
 801c314:	60fb      	str	r3, [r7, #12]
		break;
 801c316:	e050      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterRU864[getPhy->Datarate];
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c31e:	461a      	mov	r2, r3
 801c320:	4b29      	ldr	r3, [pc, #164]	@ (801c3c8 <RegionRU864GetPhyParam+0x18c>)
 801c322:	5c9b      	ldrb	r3, [r3, r2]
 801c324:	60fb      	str	r3, [r7, #12]
		break;
 801c326:	e048      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = RU864_DUTY_CYCLE_ENABLED;
 801c328:	2300      	movs	r3, #0
 801c32a:	60fb      	str	r3, [r7, #12]
		break;
 801c32c:	e045      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = RU864_MAX_RX_WINDOW;
 801c32e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801c332:	60fb      	str	r3, [r7, #12]
		break;
 801c334:	e041      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = RU864_RECEIVE_DELAY1;
 801c336:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801c33a:	60fb      	str	r3, [r7, #12]
		break;
 801c33c:	e03d      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = RU864_RECEIVE_DELAY2;
 801c33e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801c342:	60fb      	str	r3, [r7, #12]
		break;
 801c344:	e039      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = RU864_JOIN_ACCEPT_DELAY1;
 801c346:	f241 3388 	movw	r3, #5000	@ 0x1388
 801c34a:	60fb      	str	r3, [r7, #12]
		break;
 801c34c:	e035      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = RU864_JOIN_ACCEPT_DELAY2;
 801c34e:	f241 7370 	movw	r3, #6000	@ 0x1770
 801c352:	60fb      	str	r3, [r7, #12]
		break;
 801c354:	e031      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = RU864_MAX_FCNT_GAP;
 801c356:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801c35a:	60fb      	str	r3, [r7, #12]
		break;
 801c35c:	e02d      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (RU864_ACKTIMEOUT + randr(-RU864_ACK_TIMEOUT_RND, RU864_ACK_TIMEOUT_RND));
 801c35e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801c362:	481a      	ldr	r0, [pc, #104]	@ (801c3cc <RegionRU864GetPhyParam+0x190>)
 801c364:	f004 fc06 	bl	8020b74 <randr>
 801c368:	4603      	mov	r3, r0
 801c36a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801c36e:	60fb      	str	r3, [r7, #12]
		break;
 801c370:	e023      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = RU864_DEFAULT_RX1_DR_OFFSET;
 801c372:	2300      	movs	r3, #0
 801c374:	60fb      	str	r3, [r7, #12]
		break;
 801c376:	e020      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = RU864_RX_WND_2_FREQ;
 801c378:	4b15      	ldr	r3, [pc, #84]	@ (801c3d0 <RegionRU864GetPhyParam+0x194>)
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	60fb      	str	r3, [r7, #12]
		break;
 801c37e:	e01c      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = RU864_RX_WND_2_DR;
 801c380:	2302      	movs	r3, #2
 801c382:	60fb      	str	r3, [r7, #12]
		break;
 801c384:	e019      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 801c386:	4b13      	ldr	r3, [pc, #76]	@ (801c3d4 <RegionRU864GetPhyParam+0x198>)
 801c388:	60fb      	str	r3, [r7, #12]
		break;
 801c38a:	e016      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 801c38c:	4b12      	ldr	r3, [pc, #72]	@ (801c3d8 <RegionRU864GetPhyParam+0x19c>)
 801c38e:	60fb      	str	r3, [r7, #12]
		break;
 801c390:	e013      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = RU864_MAX_NB_CHANNELS;
 801c392:	2310      	movs	r3, #16
 801c394:	60fb      	str	r3, [r7, #12]
		break;
 801c396:	e010      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 801c398:	4b10      	ldr	r3, [pc, #64]	@ (801c3dc <RegionRU864GetPhyParam+0x1a0>)
 801c39a:	60fb      	str	r3, [r7, #12]
		break;
 801c39c:	e00d      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 801c39e:	2300      	movs	r3, #0
 801c3a0:	60fb      	str	r3, [r7, #12]
		break;
 801c3a2:	e00a      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_MAX_EIRP:
	{
		phyParam.fValue = RU864_DEFAULT_MAX_EIRP;
 801c3a4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 801c3a8:	60fb      	str	r3, [r7, #12]
		break;
 801c3aa:	e006      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = RU864_DEFAULT_ANTENNA_GAIN;
 801c3ac:	4b0c      	ldr	r3, [pc, #48]	@ (801c3e0 <RegionRU864GetPhyParam+0x1a4>)
 801c3ae:	60fb      	str	r3, [r7, #12]
		break;
 801c3b0:	e003      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 1;
 801c3b2:	2301      	movs	r3, #1
 801c3b4:	60fb      	str	r3, [r7, #12]
		break;
 801c3b6:	e000      	b.n	801c3ba <RegionRU864GetPhyParam+0x17e>
	}
	default:
	{
		break;
 801c3b8:	bf00      	nop
	}
	}

	return phyParam;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
}
 801c3bc:	4618      	mov	r0, r3
 801c3be:	3710      	adds	r7, #16
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	080253bc 	.word	0x080253bc
 801c3c8:	080253c4 	.word	0x080253c4
 801c3cc:	fffffc18 	.word	0xfffffc18
 801c3d0:	20000250 	.word	0x20000250
 801c3d4:	20006c9c 	.word	0x20006c9c
 801c3d8:	20006ca8 	.word	0x20006ca8
 801c3dc:	200079ec 	.word	0x200079ec
 801c3e0:	4009999a 	.word	0x4009999a

0801c3e4 <RegionRU864SetBandTxDone>:

void RegionRU864SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 801c3e4:	b580      	push	{r7, lr}
 801c3e6:	b082      	sub	sp, #8
 801c3e8:	af00      	add	r7, sp, #0
 801c3ea:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	7858      	ldrb	r0, [r3, #1]
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	781b      	ldrb	r3, [r3, #0]
 801c3f4:	4619      	mov	r1, r3
 801c3f6:	4a0a      	ldr	r2, [pc, #40]	@ (801c420 <RegionRU864SetBandTxDone+0x3c>)
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	005b      	lsls	r3, r3, #1
 801c3fc:	440b      	add	r3, r1
 801c3fe:	009b      	lsls	r3, r3, #2
 801c400:	4413      	add	r3, r2
 801c402:	3309      	adds	r3, #9
 801c404:	781b      	ldrb	r3, [r3, #0]
 801c406:	015b      	lsls	r3, r3, #5
 801c408:	4a06      	ldr	r2, [pc, #24]	@ (801c424 <RegionRU864SetBandTxDone+0x40>)
 801c40a:	1899      	adds	r1, r3, r2
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801c412:	f7fa f84f 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 801c416:	bf00      	nop
 801c418:	3708      	adds	r7, #8
 801c41a:	46bd      	mov	sp, r7
 801c41c:	bd80      	pop	{r7, pc}
 801c41e:	bf00      	nop
 801c420:	200079ec 	.word	0x200079ec
 801c424:	20000258 	.word	0x20000258

0801c428 <RegionRU864InitDefaults>:

void RegionRU864InitDefaults(InitType_t type)
{
 801c428:	b580      	push	{r7, lr}
 801c42a:	b094      	sub	sp, #80	@ 0x50
 801c42c:	af00      	add	r7, sp, #0
 801c42e:	4603      	mov	r3, r0
 801c430:	71fb      	strb	r3, [r7, #7]
	switch (type)
 801c432:	79fb      	ldrb	r3, [r7, #7]
 801c434:	2b02      	cmp	r3, #2
 801c436:	d03e      	beq.n	801c4b6 <RegionRU864InitDefaults+0x8e>
 801c438:	2b02      	cmp	r3, #2
 801c43a:	dc42      	bgt.n	801c4c2 <RegionRU864InitDefaults+0x9a>
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d002      	beq.n	801c446 <RegionRU864InitDefaults+0x1e>
 801c440:	2b01      	cmp	r3, #1
 801c442:	d02f      	beq.n	801c4a4 <RegionRU864InitDefaults+0x7c>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
		break;
	}
	default:
	{
		break;
 801c444:	e03d      	b.n	801c4c2 <RegionRU864InitDefaults+0x9a>
		Channels[0] = (ChannelParams_t)RU864_LC1;
 801c446:	4b21      	ldr	r3, [pc, #132]	@ (801c4cc <RegionRU864InitDefaults+0xa4>)
 801c448:	4a21      	ldr	r2, [pc, #132]	@ (801c4d0 <RegionRU864InitDefaults+0xa8>)
 801c44a:	ca07      	ldmia	r2, {r0, r1, r2}
 801c44c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[1] = (ChannelParams_t)RU864_LC2;
 801c450:	4b1e      	ldr	r3, [pc, #120]	@ (801c4cc <RegionRU864InitDefaults+0xa4>)
 801c452:	4a20      	ldr	r2, [pc, #128]	@ (801c4d4 <RegionRU864InitDefaults+0xac>)
 801c454:	330c      	adds	r3, #12
 801c456:	ca07      	ldmia	r2, {r0, r1, r2}
 801c458:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[2] = (ChannelParams_t)RU864_LC3;
 801c45c:	4b1b      	ldr	r3, [pc, #108]	@ (801c4cc <RegionRU864InitDefaults+0xa4>)
 801c45e:	4a1e      	ldr	r2, [pc, #120]	@ (801c4d8 <RegionRU864InitDefaults+0xb0>)
 801c460:	3318      	adds	r3, #24
 801c462:	ca07      	ldmia	r2, {r0, r1, r2}
 801c464:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[3] = (ChannelParams_t)RU864_LC4;
 801c468:	4b18      	ldr	r3, [pc, #96]	@ (801c4cc <RegionRU864InitDefaults+0xa4>)
 801c46a:	4a1c      	ldr	r2, [pc, #112]	@ (801c4dc <RegionRU864InitDefaults+0xb4>)
 801c46c:	3324      	adds	r3, #36	@ 0x24
 801c46e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c470:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[4] = (ChannelParams_t)RU864_LC5;
 801c474:	4b15      	ldr	r3, [pc, #84]	@ (801c4cc <RegionRU864InitDefaults+0xa4>)
 801c476:	4a1a      	ldr	r2, [pc, #104]	@ (801c4e0 <RegionRU864InitDefaults+0xb8>)
 801c478:	3330      	adds	r3, #48	@ 0x30
 801c47a:	ca07      	ldmia	r2, {r0, r1, r2}
 801c47c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		Channels[5] = (ChannelParams_t)RU864_LC6;
 801c480:	4b12      	ldr	r3, [pc, #72]	@ (801c4cc <RegionRU864InitDefaults+0xa4>)
 801c482:	4a18      	ldr	r2, [pc, #96]	@ (801c4e4 <RegionRU864InitDefaults+0xbc>)
 801c484:	333c      	adds	r3, #60	@ 0x3c
 801c486:	ca07      	ldmia	r2, {r0, r1, r2}
 801c488:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ChannelsDefaultMask[0] = LC(1) + LC(2); // + LC(3) + LC(4) + LC(5) + LC(6) + LC(7) + LC(8);
 801c48c:	4b16      	ldr	r3, [pc, #88]	@ (801c4e8 <RegionRU864InitDefaults+0xc0>)
 801c48e:	2203      	movs	r2, #3
 801c490:	801a      	strh	r2, [r3, #0]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 801c492:	2201      	movs	r2, #1
 801c494:	4914      	ldr	r1, [pc, #80]	@ (801c4e8 <RegionRU864InitDefaults+0xc0>)
 801c496:	4815      	ldr	r0, [pc, #84]	@ (801c4ec <RegionRU864InitDefaults+0xc4>)
 801c498:	f7f9 ffe5 	bl	8016466 <RegionCommonChanMaskCopy>
		RU864_RX_WND_2_FREQ = 869100000;
 801c49c:	4b14      	ldr	r3, [pc, #80]	@ (801c4f0 <RegionRU864InitDefaults+0xc8>)
 801c49e:	4a15      	ldr	r2, [pc, #84]	@ (801c4f4 <RegionRU864InitDefaults+0xcc>)
 801c4a0:	601a      	str	r2, [r3, #0]
		break;
 801c4a2:	e00f      	b.n	801c4c4 <RegionRU864InitDefaults+0x9c>
		ChannelsMask[0] |= ChannelsDefaultMask[0];
 801c4a4:	4b11      	ldr	r3, [pc, #68]	@ (801c4ec <RegionRU864InitDefaults+0xc4>)
 801c4a6:	881a      	ldrh	r2, [r3, #0]
 801c4a8:	4b0f      	ldr	r3, [pc, #60]	@ (801c4e8 <RegionRU864InitDefaults+0xc0>)
 801c4aa:	881b      	ldrh	r3, [r3, #0]
 801c4ac:	4313      	orrs	r3, r2
 801c4ae:	b29a      	uxth	r2, r3
 801c4b0:	4b0e      	ldr	r3, [pc, #56]	@ (801c4ec <RegionRU864InitDefaults+0xc4>)
 801c4b2:	801a      	strh	r2, [r3, #0]
		break;
 801c4b4:	e006      	b.n	801c4c4 <RegionRU864InitDefaults+0x9c>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 1);
 801c4b6:	2201      	movs	r2, #1
 801c4b8:	490b      	ldr	r1, [pc, #44]	@ (801c4e8 <RegionRU864InitDefaults+0xc0>)
 801c4ba:	480c      	ldr	r0, [pc, #48]	@ (801c4ec <RegionRU864InitDefaults+0xc4>)
 801c4bc:	f7f9 ffd3 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801c4c0:	e000      	b.n	801c4c4 <RegionRU864InitDefaults+0x9c>
		break;
 801c4c2:	bf00      	nop
	}
	}
}
 801c4c4:	bf00      	nop
 801c4c6:	3750      	adds	r7, #80	@ 0x50
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bd80      	pop	{r7, pc}
 801c4cc:	200079ec 	.word	0x200079ec
 801c4d0:	08024bd0 	.word	0x08024bd0
 801c4d4:	08024bdc 	.word	0x08024bdc
 801c4d8:	08024be8 	.word	0x08024be8
 801c4dc:	08024bf4 	.word	0x08024bf4
 801c4e0:	08024c00 	.word	0x08024c00
 801c4e4:	08024c0c 	.word	0x08024c0c
 801c4e8:	20006ca8 	.word	0x20006ca8
 801c4ec:	20006c9c 	.word	0x20006c9c
 801c4f0:	20000250 	.word	0x20000250
 801c4f4:	33cd69e0 	.word	0x33cd69e0

0801c4f8 <RegionRU864Verify>:

bool RegionRU864Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 801c4f8:	b580      	push	{r7, lr}
 801c4fa:	b082      	sub	sp, #8
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	6078      	str	r0, [r7, #4]
 801c500:	460b      	mov	r3, r1
 801c502:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 801c504:	78fb      	ldrb	r3, [r7, #3]
 801c506:	3b04      	subs	r3, #4
 801c508:	2b1a      	cmp	r3, #26
 801c50a:	d879      	bhi.n	801c600 <RegionRU864Verify+0x108>
 801c50c:	a201      	add	r2, pc, #4	@ (adr r2, 801c514 <RegionRU864Verify+0x1c>)
 801c50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c512:	bf00      	nop
 801c514:	0801c581 	.word	0x0801c581
 801c518:	0801c59f 	.word	0x0801c59f
 801c51c:	0801c5bd 	.word	0x0801c5bd
 801c520:	0801c5db 	.word	0x0801c5db
 801c524:	0801c5db 	.word	0x0801c5db
 801c528:	0801c601 	.word	0x0801c601
 801c52c:	0801c601 	.word	0x0801c601
 801c530:	0801c5f9 	.word	0x0801c5f9
 801c534:	0801c601 	.word	0x0801c601
 801c538:	0801c601 	.word	0x0801c601
 801c53c:	0801c601 	.word	0x0801c601
 801c540:	0801c601 	.word	0x0801c601
 801c544:	0801c601 	.word	0x0801c601
 801c548:	0801c601 	.word	0x0801c601
 801c54c:	0801c601 	.word	0x0801c601
 801c550:	0801c601 	.word	0x0801c601
 801c554:	0801c601 	.word	0x0801c601
 801c558:	0801c601 	.word	0x0801c601
 801c55c:	0801c601 	.word	0x0801c601
 801c560:	0801c601 	.word	0x0801c601
 801c564:	0801c601 	.word	0x0801c601
 801c568:	0801c601 	.word	0x0801c601
 801c56c:	0801c601 	.word	0x0801c601
 801c570:	0801c601 	.word	0x0801c601
 801c574:	0801c601 	.word	0x0801c601
 801c578:	0801c601 	.word	0x0801c601
 801c57c:	0801c5fd 	.word	0x0801c5fd
	{
	case PHY_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE);
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	f993 3000 	ldrsb.w	r3, [r3]
 801c586:	2207      	movs	r2, #7
 801c588:	2100      	movs	r1, #0
 801c58a:	4618      	mov	r0, r3
 801c58c:	f7f9 feec 	bl	8016368 <RegionCommonValueInRange>
 801c590:	4603      	mov	r3, r0
 801c592:	2b00      	cmp	r3, #0
 801c594:	bf14      	ite	ne
 801c596:	2301      	movne	r3, #1
 801c598:	2300      	moveq	r3, #0
 801c59a:	b2db      	uxtb	r3, r3
 801c59c:	e031      	b.n	801c602 <RegionRU864Verify+0x10a>
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	f993 3000 	ldrsb.w	r3, [r3]
 801c5a4:	2205      	movs	r2, #5
 801c5a6:	2100      	movs	r1, #0
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	f7f9 fedd 	bl	8016368 <RegionCommonValueInRange>
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	bf14      	ite	ne
 801c5b4:	2301      	movne	r3, #1
 801c5b6:	2300      	moveq	r3, #0
 801c5b8:	b2db      	uxtb	r3, r3
 801c5ba:	e022      	b.n	801c602 <RegionRU864Verify+0x10a>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE);
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	f993 3000 	ldrsb.w	r3, [r3]
 801c5c2:	2207      	movs	r2, #7
 801c5c4:	2100      	movs	r1, #0
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	f7f9 fece 	bl	8016368 <RegionCommonValueInRange>
 801c5cc:	4603      	mov	r3, r0
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	bf14      	ite	ne
 801c5d2:	2301      	movne	r3, #1
 801c5d4:	2300      	moveq	r3, #0
 801c5d6:	b2db      	uxtb	r3, r3
 801c5d8:	e013      	b.n	801c602 <RegionRU864Verify+0x10a>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, RU864_MAX_TX_POWER, RU864_MIN_TX_POWER);
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	f993 3000 	ldrsb.w	r3, [r3]
 801c5e0:	2207      	movs	r2, #7
 801c5e2:	2100      	movs	r1, #0
 801c5e4:	4618      	mov	r0, r3
 801c5e6:	f7f9 febf 	bl	8016368 <RegionCommonValueInRange>
 801c5ea:	4603      	mov	r3, r0
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	bf14      	ite	ne
 801c5f0:	2301      	movne	r3, #1
 801c5f2:	2300      	moveq	r3, #0
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	e004      	b.n	801c602 <RegionRU864Verify+0x10a>
	}
	case PHY_DUTY_CYCLE:
	{
		return RU864_DUTY_CYCLE_ENABLED;
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	e002      	b.n	801c602 <RegionRU864Verify+0x10a>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		return true;
 801c5fc:	2301      	movs	r3, #1
 801c5fe:	e000      	b.n	801c602 <RegionRU864Verify+0x10a>
	}
	default:
		return false;
 801c600:	2300      	movs	r3, #0
	}
}
 801c602:	4618      	mov	r0, r3
 801c604:	3708      	adds	r7, #8
 801c606:	46bd      	mov	sp, r7
 801c608:	bd80      	pop	{r7, pc}
 801c60a:	bf00      	nop

0801c60c <RegionRU864ApplyCFList>:

void RegionRU864ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b08a      	sub	sp, #40	@ 0x28
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
	ChannelParams_t newChannel;
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	// Setup default datarate range
	newChannel.DrRange.Value = (DR_5 << 4) | DR_0;
 801c614:	2350      	movs	r3, #80	@ 0x50
 801c616:	f887 3020 	strb.w	r3, [r7, #32]

	// Size of the optional CF list
	if (applyCFList->Size != 16)
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	791b      	ldrb	r3, [r3, #4]
 801c61e:	2b10      	cmp	r3, #16
 801c620:	d15c      	bne.n	801c6dc <RegionRU864ApplyCFList+0xd0>
	{
		return;
	}

	// Last byte is RFU, don't take it into account
	for (uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i += 3, chanIdx++)
 801c622:	2300      	movs	r3, #0
 801c624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c628:	2308      	movs	r3, #8
 801c62a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c62e:	e050      	b.n	801c6d2 <RegionRU864ApplyCFList+0xc6>
	{
		if (chanIdx < (RU864_NUMB_CHANNELS_CF_LIST + RU864_NUMB_DEFAULT_CHANNELS))
 801c630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c634:	2b0c      	cmp	r3, #12
 801c636:	d824      	bhi.n	801c682 <RegionRU864ApplyCFList+0x76>
		{
			// Channel frequency
			newChannel.Frequency = (uint32_t)applyCFList->Payload[i];
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	681a      	ldr	r2, [r3, #0]
 801c63c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c640:	4413      	add	r3, r2
 801c642:	781b      	ldrb	r3, [r3, #0]
 801c644:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 1] << 8);
 801c646:	69ba      	ldr	r2, [r7, #24]
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	6819      	ldr	r1, [r3, #0]
 801c64c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c650:	3301      	adds	r3, #1
 801c652:	440b      	add	r3, r1
 801c654:	781b      	ldrb	r3, [r3, #0]
 801c656:	021b      	lsls	r3, r3, #8
 801c658:	4313      	orrs	r3, r2
 801c65a:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency |= ((uint32_t)applyCFList->Payload[i + 2] << 16);
 801c65c:	69ba      	ldr	r2, [r7, #24]
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	6819      	ldr	r1, [r3, #0]
 801c662:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c666:	3302      	adds	r3, #2
 801c668:	440b      	add	r3, r1
 801c66a:	781b      	ldrb	r3, [r3, #0]
 801c66c:	041b      	lsls	r3, r3, #16
 801c66e:	4313      	orrs	r3, r2
 801c670:	61bb      	str	r3, [r7, #24]
			newChannel.Frequency *= 100;
 801c672:	69bb      	ldr	r3, [r7, #24]
 801c674:	2264      	movs	r2, #100	@ 0x64
 801c676:	fb02 f303 	mul.w	r3, r2, r3
 801c67a:	61bb      	str	r3, [r7, #24]

			// Initialize alternative frequency to 0
			newChannel.Rx1Frequency = 0;
 801c67c:	2300      	movs	r3, #0
 801c67e:	61fb      	str	r3, [r7, #28]
 801c680:	e006      	b.n	801c690 <RegionRU864ApplyCFList+0x84>
			LOG_LIB("RU864", "Apply CF list: new channel at Freq = %d", newChannel.Frequency);
		}
		else
		{
			newChannel.Frequency = 0;
 801c682:	2300      	movs	r3, #0
 801c684:	61bb      	str	r3, [r7, #24]
			newChannel.DrRange.Value = 0;
 801c686:	2300      	movs	r3, #0
 801c688:	f887 3020 	strb.w	r3, [r7, #32]
			newChannel.Rx1Frequency = 0;
 801c68c:	2300      	movs	r3, #0
 801c68e:	61fb      	str	r3, [r7, #28]
		}

		if (newChannel.Frequency != 0)
 801c690:	69bb      	ldr	r3, [r7, #24]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d00b      	beq.n	801c6ae <RegionRU864ApplyCFList+0xa2>
		{
			channelAdd.NewChannel = &newChannel;
 801c696:	f107 0318 	add.w	r3, r7, #24
 801c69a:	613b      	str	r3, [r7, #16]
			channelAdd.ChannelId = chanIdx;
 801c69c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c6a0:	753b      	strb	r3, [r7, #20]

			// Try to add all channels
			RegionRU864ChannelAdd(&channelAdd);
 801c6a2:	f107 0310 	add.w	r3, r7, #16
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f000 fdd0 	bl	801d24c <RegionRU864ChannelAdd>
 801c6ac:	e007      	b.n	801c6be <RegionRU864ApplyCFList+0xb2>
		}
		else
		{
			channelRemove.ChannelId = chanIdx;
 801c6ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c6b2:	733b      	strb	r3, [r7, #12]

			RegionRU864ChannelsRemove(&channelRemove);
 801c6b4:	f107 030c 	add.w	r3, r7, #12
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	f000 fe89 	bl	801d3d0 <RegionRU864ChannelsRemove>
	for (uint8_t i = 0, chanIdx = RU864_NUMB_DEFAULT_CHANNELS; chanIdx < RU864_MAX_NB_CHANNELS; i += 3, chanIdx++)
 801c6be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c6c2:	3303      	adds	r3, #3
 801c6c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801c6c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c6cc:	3301      	adds	r3, #1
 801c6ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801c6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801c6d6:	2b0f      	cmp	r3, #15
 801c6d8:	d9aa      	bls.n	801c630 <RegionRU864ApplyCFList+0x24>
 801c6da:	e000      	b.n	801c6de <RegionRU864ApplyCFList+0xd2>
		return;
 801c6dc:	bf00      	nop
		}
	}
}
 801c6de:	3728      	adds	r7, #40	@ 0x28
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd80      	pop	{r7, pc}

0801c6e4 <RegionRU864ChanMaskSet>:

bool RegionRU864ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b082      	sub	sp, #8
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
	switch (chanMaskSet->ChannelsMaskType)
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	791b      	ldrb	r3, [r3, #4]
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d002      	beq.n	801c6fa <RegionRU864ChanMaskSet+0x16>
 801c6f4:	2b01      	cmp	r3, #1
 801c6f6:	d008      	beq.n	801c70a <RegionRU864ChanMaskSet+0x26>
 801c6f8:	e00f      	b.n	801c71a <RegionRU864ChanMaskSet+0x36>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 1);
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	2201      	movs	r2, #1
 801c700:	4619      	mov	r1, r3
 801c702:	4809      	ldr	r0, [pc, #36]	@ (801c728 <RegionRU864ChanMaskSet+0x44>)
 801c704:	f7f9 feaf 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801c708:	e009      	b.n	801c71e <RegionRU864ChanMaskSet+0x3a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1);
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	2201      	movs	r2, #1
 801c710:	4619      	mov	r1, r3
 801c712:	4806      	ldr	r0, [pc, #24]	@ (801c72c <RegionRU864ChanMaskSet+0x48>)
 801c714:	f7f9 fea7 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801c718:	e001      	b.n	801c71e <RegionRU864ChanMaskSet+0x3a>
	}
	default:
		return false;
 801c71a:	2300      	movs	r3, #0
 801c71c:	e000      	b.n	801c720 <RegionRU864ChanMaskSet+0x3c>
	}
	return true;
 801c71e:	2301      	movs	r3, #1
}
 801c720:	4618      	mov	r0, r3
 801c722:	3708      	adds	r7, #8
 801c724:	46bd      	mov	sp, r7
 801c726:	bd80      	pop	{r7, pc}
 801c728:	20006c9c 	.word	0x20006c9c
 801c72c:	20006ca8 	.word	0x20006ca8

0801c730 <RegionRU864AdrNext>:

bool RegionRU864AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b088      	sub	sp, #32
 801c734:	af00      	add	r7, sp, #0
 801c736:	60f8      	str	r0, [r7, #12]
 801c738:	60b9      	str	r1, [r7, #8]
 801c73a:	607a      	str	r2, [r7, #4]
 801c73c:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 801c73e:	2300      	movs	r3, #0
 801c740:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	7a1b      	ldrb	r3, [r3, #8]
 801c746:	77bb      	strb	r3, [r7, #30]
	int8_t minTxDatarate = 0;
 801c748:	2300      	movs	r3, #0
 801c74a:	773b      	strb	r3, [r7, #28]
	int8_t txPower = adrNext->TxPower;
 801c74c:	68fb      	ldr	r3, [r7, #12]
 801c74e:	7a5b      	ldrb	r3, [r3, #9]
 801c750:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 801c752:	2301      	movs	r3, #1
 801c754:	763b      	strb	r3, [r7, #24]
	getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	7a9b      	ldrb	r3, [r3, #10]
 801c75a:	76bb      	strb	r3, [r7, #26]
	phyParam = RegionRU864GetPhyParam(&getPhy);
 801c75c:	f107 0318 	add.w	r3, r7, #24
 801c760:	4618      	mov	r0, r3
 801c762:	f7ff fd6b 	bl	801c23c <RegionRU864GetPhyParam>
 801c766:	4603      	mov	r3, r0
 801c768:	617b      	str	r3, [r7, #20]
	minTxDatarate = phyParam.Value;
 801c76a:	697b      	ldr	r3, [r7, #20]
 801c76c:	773b      	strb	r3, [r7, #28]

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	685a      	ldr	r2, [r3, #4]
 801c772:	683b      	ldr	r3, [r7, #0]
 801c774:	601a      	str	r2, [r3, #0]

	// Apply the minimum possible datarate.
	datarate = T_MAX(datarate, minTxDatarate);
 801c776:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c77a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801c77e:	4293      	cmp	r3, r2
 801c780:	bfb8      	it	lt
 801c782:	4613      	movlt	r3, r2
 801c784:	77bb      	strb	r3, [r7, #30]

	if (adrNext->AdrEnabled == true)
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	785b      	ldrb	r3, [r3, #1]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	d043      	beq.n	801c816 <RegionRU864AdrNext+0xe6>
	{
		if (datarate == minTxDatarate)
 801c78e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c792:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801c796:	429a      	cmp	r2, r3
 801c798:	d105      	bne.n	801c7a6 <RegionRU864AdrNext+0x76>
		{
			*adrAckCounter = 0;
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	2200      	movs	r2, #0
 801c79e:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 801c7a0:	2300      	movs	r3, #0
 801c7a2:	77fb      	strb	r3, [r7, #31]
 801c7a4:	e037      	b.n	801c816 <RegionRU864AdrNext+0xe6>
		}
		else
		{
			if (adrNext->AdrAckCounter >= RU864_ADR_ACK_LIMIT)
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	685b      	ldr	r3, [r3, #4]
 801c7aa:	2b3f      	cmp	r3, #63	@ 0x3f
 801c7ac:	d904      	bls.n	801c7b8 <RegionRU864AdrNext+0x88>
			{
				adrAckReq = true;
 801c7ae:	2301      	movs	r3, #1
 801c7b0:	77fb      	strb	r3, [r7, #31]
				txPower = RU864_MAX_TX_POWER;
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	777b      	strb	r3, [r7, #29]
 801c7b6:	e001      	b.n	801c7bc <RegionRU864AdrNext+0x8c>
			}
			else
			{
				adrAckReq = false;
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (RU864_ADR_ACK_LIMIT + RU864_ADR_ACK_DELAY))
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	2b5f      	cmp	r3, #95	@ 0x5f
 801c7c2:	d928      	bls.n	801c816 <RegionRU864AdrNext+0xe6>
			{
				if ((adrNext->AdrAckCounter % RU864_ADR_ACK_DELAY) == 1)
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	685b      	ldr	r3, [r3, #4]
 801c7c8:	f003 031f 	and.w	r3, r3, #31
 801c7cc:	2b01      	cmp	r3, #1
 801c7ce:	d122      	bne.n	801c816 <RegionRU864AdrNext+0xe6>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801c7d0:	2320      	movs	r3, #32
 801c7d2:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 801c7d4:	7fbb      	ldrb	r3, [r7, #30]
 801c7d6:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	7a9b      	ldrb	r3, [r3, #10]
 801c7dc:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionRU864GetPhyParam(&getPhy);
 801c7de:	f107 0318 	add.w	r3, r7, #24
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f7ff fd2a 	bl	801c23c <RegionRU864GetPhyParam>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 801c7ec:	697b      	ldr	r3, [r7, #20]
 801c7ee:	77bb      	strb	r3, [r7, #30]

					if (datarate == minTxDatarate)
 801c7f0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c7f4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801c7f8:	429a      	cmp	r2, r3
 801c7fa:	d10c      	bne.n	801c816 <RegionRU864AdrNext+0xe6>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 801c7fc:	2300      	movs	r3, #0
 801c7fe:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	781b      	ldrb	r3, [r3, #0]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d006      	beq.n	801c816 <RegionRU864AdrNext+0xe6>
						{
							// Re-enable default channels
							ChannelsMask[0] |= LC(1) + LC(2);
 801c808:	4b08      	ldr	r3, [pc, #32]	@ (801c82c <RegionRU864AdrNext+0xfc>)
 801c80a:	881b      	ldrh	r3, [r3, #0]
 801c80c:	f043 0303 	orr.w	r3, r3, #3
 801c810:	b29a      	uxth	r2, r3
 801c812:	4b06      	ldr	r3, [pc, #24]	@ (801c82c <RegionRU864AdrNext+0xfc>)
 801c814:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}

	*drOut = datarate;
 801c816:	68bb      	ldr	r3, [r7, #8]
 801c818:	7fba      	ldrb	r2, [r7, #30]
 801c81a:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	7f7a      	ldrb	r2, [r7, #29]
 801c820:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 801c822:	7ffb      	ldrb	r3, [r7, #31]
}
 801c824:	4618      	mov	r0, r3
 801c826:	3720      	adds	r7, #32
 801c828:	46bd      	mov	sp, r7
 801c82a:	bd80      	pop	{r7, pc}
 801c82c:	20006c9c 	.word	0x20006c9c

0801c830 <RegionRU864ComputeRxWindowParameters>:

void RegionRU864ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 801c830:	b580      	push	{r7, lr}
 801c832:	b088      	sub	sp, #32
 801c834:	af02      	add	r7, sp, #8
 801c836:	60ba      	str	r2, [r7, #8]
 801c838:	607b      	str	r3, [r7, #4]
 801c83a:	4603      	mov	r3, r0
 801c83c:	73fb      	strb	r3, [r7, #15]
 801c83e:	460b      	mov	r3, r1
 801c840:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 801c842:	f04f 0200 	mov.w	r2, #0
 801c846:	f04f 0300 	mov.w	r3, #0
 801c84a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, RU864_RX_MAX_DATARATE);
 801c84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c852:	2b07      	cmp	r3, #7
 801c854:	bfa8      	it	ge
 801c856:	2307      	movge	r3, #7
 801c858:	b25a      	sxtb	r2, r3
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c864:	4618      	mov	r0, r3
 801c866:	f7ff fbe1 	bl	801c02c <GetBandwidth>
 801c86a:	4603      	mov	r3, r0
 801c86c:	b2da      	uxtb	r2, r3
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	709a      	strb	r2, [r3, #2]

	if (rxConfigParams->Datarate == DR_7)
 801c872:	687b      	ldr	r3, [r7, #4]
 801c874:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c878:	2b07      	cmp	r3, #7
 801c87a:	d10b      	bne.n	801c894 <RegionRU864ComputeRxWindowParameters+0x64>
	{ // FSK
		tSymbol = RegionCommonComputeSymbolTimeFsk(DataratesRU864[rxConfigParams->Datarate]);
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c882:	461a      	mov	r2, r3
 801c884:	4b16      	ldr	r3, [pc, #88]	@ (801c8e0 <RegionRU864ComputeRxWindowParameters+0xb0>)
 801c886:	5c9b      	ldrb	r3, [r3, r2]
 801c888:	4618      	mov	r0, r3
 801c88a:	f7fa f879 	bl	8016980 <RegionCommonComputeSymbolTimeFsk>
 801c88e:	ed87 0b04 	vstr	d0, [r7, #16]
 801c892:	e012      	b.n	801c8ba <RegionRU864ComputeRxWindowParameters+0x8a>
	}
	else
	{ // LoRa
		tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesRU864[rxConfigParams->Datarate], BandwidthsRU864[rxConfigParams->Datarate]);
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c89a:	461a      	mov	r2, r3
 801c89c:	4b10      	ldr	r3, [pc, #64]	@ (801c8e0 <RegionRU864ComputeRxWindowParameters+0xb0>)
 801c89e:	5c9a      	ldrb	r2, [r3, r2]
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801c8a6:	4619      	mov	r1, r3
 801c8a8:	4b0e      	ldr	r3, [pc, #56]	@ (801c8e4 <RegionRU864ComputeRxWindowParameters+0xb4>)
 801c8aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c8ae:	4619      	mov	r1, r3
 801c8b0:	4610      	mov	r0, r2
 801c8b2:	f7fa f837 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 801c8b6:	ed87 0b04 	vstr	d0, [r7, #16]
	}

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	f103 0208 	add.w	r2, r3, #8
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	330c      	adds	r3, #12
 801c8c4:	7bb8      	ldrb	r0, [r7, #14]
 801c8c6:	9300      	str	r3, [sp, #0]
 801c8c8:	4613      	mov	r3, r2
 801c8ca:	2203      	movs	r2, #3
 801c8cc:	68b9      	ldr	r1, [r7, #8]
 801c8ce:	ed97 0b04 	vldr	d0, [r7, #16]
 801c8d2:	f7fa f873 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 801c8d6:	bf00      	nop
 801c8d8:	3718      	adds	r7, #24
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
 801c8de:	bf00      	nop
 801c8e0:	08025394 	.word	0x08025394
 801c8e4:	0802539c 	.word	0x0802539c

0801c8e8 <RegionRU864RxConfig>:

bool RegionRU864RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 801c8e8:	b590      	push	{r4, r7, lr}
 801c8ea:	b091      	sub	sp, #68	@ 0x44
 801c8ec:	af0a      	add	r7, sp, #40	@ 0x28
 801c8ee:	6078      	str	r0, [r7, #4]
 801c8f0:	6039      	str	r1, [r7, #0]
	RadioModems_t modem;
	int8_t dr = rxConfig->Datarate;
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	785b      	ldrb	r3, [r3, #1]
 801c8f6:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	75bb      	strb	r3, [r7, #22]
	int8_t phyDr = 0;
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	685b      	ldr	r3, [r3, #4]
 801c904:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 801c906:	4b53      	ldr	r3, [pc, #332]	@ (801ca54 <RegionRU864RxConfig+0x16c>)
 801c908:	689b      	ldr	r3, [r3, #8]
 801c90a:	4798      	blx	r3
 801c90c:	4603      	mov	r3, r0
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d001      	beq.n	801c916 <RegionRU864RxConfig+0x2e>
	{
		return false;
 801c912:	2300      	movs	r3, #0
 801c914:	e099      	b.n	801ca4a <RegionRU864RxConfig+0x162>
	}

	if (rxConfig->Window == 0)
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	7cdb      	ldrb	r3, [r3, #19]
 801c91a:	f083 0301 	eor.w	r3, r3, #1
 801c91e:	b2db      	uxtb	r3, r3
 801c920:	2b00      	cmp	r3, #0
 801c922:	d023      	beq.n	801c96c <RegionRU864RxConfig+0x84>
	{
		// Apply window 1 frequency
		frequency = Channels[rxConfig->Channel].Frequency;
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	781b      	ldrb	r3, [r3, #0]
 801c928:	4619      	mov	r1, r3
 801c92a:	4a4b      	ldr	r2, [pc, #300]	@ (801ca58 <RegionRU864RxConfig+0x170>)
 801c92c:	460b      	mov	r3, r1
 801c92e:	005b      	lsls	r3, r3, #1
 801c930:	440b      	add	r3, r1
 801c932:	009b      	lsls	r3, r3, #2
 801c934:	4413      	add	r3, r2
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	613b      	str	r3, [r7, #16]
		// Apply the alternative RX 1 window frequency, if it is available
		if (Channels[rxConfig->Channel].Rx1Frequency != 0)
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	781b      	ldrb	r3, [r3, #0]
 801c93e:	4619      	mov	r1, r3
 801c940:	4a45      	ldr	r2, [pc, #276]	@ (801ca58 <RegionRU864RxConfig+0x170>)
 801c942:	460b      	mov	r3, r1
 801c944:	005b      	lsls	r3, r3, #1
 801c946:	440b      	add	r3, r1
 801c948:	009b      	lsls	r3, r3, #2
 801c94a:	4413      	add	r3, r2
 801c94c:	3304      	adds	r3, #4
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	2b00      	cmp	r3, #0
 801c952:	d00b      	beq.n	801c96c <RegionRU864RxConfig+0x84>
		{
			frequency = Channels[rxConfig->Channel].Rx1Frequency;
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	781b      	ldrb	r3, [r3, #0]
 801c958:	4619      	mov	r1, r3
 801c95a:	4a3f      	ldr	r2, [pc, #252]	@ (801ca58 <RegionRU864RxConfig+0x170>)
 801c95c:	460b      	mov	r3, r1
 801c95e:	005b      	lsls	r3, r3, #1
 801c960:	440b      	add	r3, r1
 801c962:	009b      	lsls	r3, r3, #2
 801c964:	4413      	add	r3, r2
 801c966:	3304      	adds	r3, #4
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	613b      	str	r3, [r7, #16]
		}
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesRU864[dr];
 801c96c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c970:	4a3a      	ldr	r2, [pc, #232]	@ (801ca5c <RegionRU864RxConfig+0x174>)
 801c972:	5cd3      	ldrb	r3, [r2, r3]
 801c974:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 801c976:	4b37      	ldr	r3, [pc, #220]	@ (801ca54 <RegionRU864RxConfig+0x16c>)
 801c978:	691b      	ldr	r3, [r3, #16]
 801c97a:	6938      	ldr	r0, [r7, #16]
 801c97c:	4798      	blx	r3

	// Radio configuration
	if (dr == DR_7)
 801c97e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c982:	2b07      	cmp	r3, #7
 801c984:	d125      	bne.n	801c9d2 <RegionRU864RxConfig+0xea>
	{
		modem = MODEM_FSK;
 801c986:	2300      	movs	r3, #0
 801c988:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, 50000, phyDr * 1000, 0, 83333, 5, 0, false, 0, true, 0, 0, false, rxConfig->RxContinuous);
 801c98a:	4b32      	ldr	r3, [pc, #200]	@ (801ca54 <RegionRU864RxConfig+0x16c>)
 801c98c:	69dc      	ldr	r4, [r3, #28]
 801c98e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c992:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801c996:	fb02 f303 	mul.w	r3, r2, r3
 801c99a:	461a      	mov	r2, r3
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	7c9b      	ldrb	r3, [r3, #18]
 801c9a0:	7df8      	ldrb	r0, [r7, #23]
 801c9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9a4:	2300      	movs	r3, #0
 801c9a6:	9308      	str	r3, [sp, #32]
 801c9a8:	2300      	movs	r3, #0
 801c9aa:	9307      	str	r3, [sp, #28]
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	9306      	str	r3, [sp, #24]
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	9305      	str	r3, [sp, #20]
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	9304      	str	r3, [sp, #16]
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	9303      	str	r3, [sp, #12]
 801c9bc:	2300      	movs	r3, #0
 801c9be:	9302      	str	r3, [sp, #8]
 801c9c0:	2305      	movs	r3, #5
 801c9c2:	9301      	str	r3, [sp, #4]
 801c9c4:	4b26      	ldr	r3, [pc, #152]	@ (801ca60 <RegionRU864RxConfig+0x178>)
 801c9c6:	9300      	str	r3, [sp, #0]
 801c9c8:	2300      	movs	r3, #0
 801c9ca:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801c9ce:	47a0      	blx	r4
 801c9d0:	e020      	b.n	801ca14 <RegionRU864RxConfig+0x12c>
	}
	else
	{
		modem = MODEM_LORA;
 801c9d2:	2301      	movs	r3, #1
 801c9d4:	75fb      	strb	r3, [r7, #23]
		// Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
		// RAKwireless symbTimeout changed after tests done by RAKwireless
		Radio.SetRxConfig(modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 801c9d6:	4b1f      	ldr	r3, [pc, #124]	@ (801ca54 <RegionRU864RxConfig+0x16c>)
 801c9d8:	69dc      	ldr	r4, [r3, #28]
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	789b      	ldrb	r3, [r3, #2]
 801c9de:	4619      	mov	r1, r3
 801c9e0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	7c9b      	ldrb	r3, [r3, #18]
 801c9e8:	7df8      	ldrb	r0, [r7, #23]
 801c9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9ec:	2301      	movs	r3, #1
 801c9ee:	9308      	str	r3, [sp, #32]
 801c9f0:	2300      	movs	r3, #0
 801c9f2:	9307      	str	r3, [sp, #28]
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	9306      	str	r3, [sp, #24]
 801c9f8:	2300      	movs	r3, #0
 801c9fa:	9305      	str	r3, [sp, #20]
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	9304      	str	r3, [sp, #16]
 801ca00:	2300      	movs	r3, #0
 801ca02:	9303      	str	r3, [sp, #12]
 801ca04:	2300      	movs	r3, #0
 801ca06:	9302      	str	r3, [sp, #8]
 801ca08:	2308      	movs	r3, #8
 801ca0a:	9301      	str	r3, [sp, #4]
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	9300      	str	r3, [sp, #0]
 801ca10:	2301      	movs	r3, #1
 801ca12:	47a0      	blx	r4
	}

	// Check for repeater support
	if (rxConfig->RepeaterSupport == true)
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	7c5b      	ldrb	r3, [r3, #17]
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d005      	beq.n	801ca28 <RegionRU864RxConfig+0x140>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterRU864[dr];
 801ca1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ca20:	4a10      	ldr	r2, [pc, #64]	@ (801ca64 <RegionRU864RxConfig+0x17c>)
 801ca22:	5cd3      	ldrb	r3, [r2, r3]
 801ca24:	75bb      	strb	r3, [r7, #22]
 801ca26:	e004      	b.n	801ca32 <RegionRU864RxConfig+0x14a>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateRU864[dr];
 801ca28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ca2c:	4a0e      	ldr	r2, [pc, #56]	@ (801ca68 <RegionRU864RxConfig+0x180>)
 801ca2e:	5cd3      	ldrb	r3, [r2, r3]
 801ca30:	75bb      	strb	r3, [r7, #22]
	}

	Radio.SetMaxPayloadLength(modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 801ca32:	4b08      	ldr	r3, [pc, #32]	@ (801ca54 <RegionRU864RxConfig+0x16c>)
 801ca34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ca36:	7dba      	ldrb	r2, [r7, #22]
 801ca38:	320d      	adds	r2, #13
 801ca3a:	b2d1      	uxtb	r1, r2
 801ca3c:	7dfa      	ldrb	r2, [r7, #23]
 801ca3e:	4610      	mov	r0, r2
 801ca40:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	7bfa      	ldrb	r2, [r7, #15]
 801ca46:	701a      	strb	r2, [r3, #0]
	return true;
 801ca48:	2301      	movs	r3, #1
}
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	371c      	adds	r7, #28
 801ca4e:	46bd      	mov	sp, r7
 801ca50:	bd90      	pop	{r4, r7, pc}
 801ca52:	bf00      	nop
 801ca54:	08025450 	.word	0x08025450
 801ca58:	200079ec 	.word	0x200079ec
 801ca5c:	08025394 	.word	0x08025394
 801ca60:	00014585 	.word	0x00014585
 801ca64:	080253c4 	.word	0x080253c4
 801ca68:	080253bc 	.word	0x080253bc

0801ca6c <RegionRU864TxConfig>:

bool RegionRU864TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 801ca6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca6e:	b093      	sub	sp, #76	@ 0x4c
 801ca70:	af0a      	add	r7, sp, #40	@ 0x28
 801ca72:	60f8      	str	r0, [r7, #12]
 801ca74:	60b9      	str	r1, [r7, #8]
 801ca76:	607a      	str	r2, [r7, #4]
	RadioModems_t modem;
	int8_t phyDr = DataratesRU864[txConfig->Datarate];
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ca7e:	461a      	mov	r2, r3
 801ca80:	4b56      	ldr	r3, [pc, #344]	@ (801cbdc <RegionRU864TxConfig+0x170>)
 801ca82:	5c9b      	ldrb	r3, [r3, r2]
 801ca84:	77bb      	strb	r3, [r7, #30]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	781b      	ldrb	r3, [r3, #0]
 801ca90:	4619      	mov	r1, r3
 801ca92:	4a53      	ldr	r2, [pc, #332]	@ (801cbe0 <RegionRU864TxConfig+0x174>)
 801ca94:	460b      	mov	r3, r1
 801ca96:	005b      	lsls	r3, r3, #1
 801ca98:	440b      	add	r3, r1
 801ca9a:	009b      	lsls	r3, r3, #2
 801ca9c:	4413      	add	r3, r2
 801ca9e:	3309      	adds	r3, #9
 801caa0:	781b      	ldrb	r3, [r3, #0]
 801caa2:	4a50      	ldr	r2, [pc, #320]	@ (801cbe4 <RegionRU864TxConfig+0x178>)
 801caa4:	015b      	lsls	r3, r3, #5
 801caa6:	4413      	add	r3, r2
 801caa8:	3302      	adds	r3, #2
 801caaa:	f993 1000 	ldrsb.w	r1, [r3]
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801cab4:	4b4c      	ldr	r3, [pc, #304]	@ (801cbe8 <RegionRU864TxConfig+0x17c>)
 801cab6:	f7ff fad9 	bl	801c06c <LimitTxPower>
 801caba:	4603      	mov	r3, r0
 801cabc:	777b      	strb	r3, [r7, #29]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801cac4:	4618      	mov	r0, r3
 801cac6:	f7ff fab1 	bl	801c02c <GetBandwidth>
 801caca:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 801cacc:	2300      	movs	r3, #0
 801cace:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain);
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	edd3 7a01 	vldr	s15, [r3, #4]
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	ed93 7a02 	vldr	s14, [r3, #8]
 801cadc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801cae0:	eef0 0a47 	vmov.f32	s1, s14
 801cae4:	eeb0 0a67 	vmov.f32	s0, s15
 801cae8:	4618      	mov	r0, r3
 801caea:	f7f9 fff3 	bl	8016ad4 <RegionCommonComputeTxPower>
 801caee:	4603      	mov	r3, r0
 801caf0:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 801caf2:	4b3e      	ldr	r3, [pc, #248]	@ (801cbec <RegionRU864TxConfig+0x180>)
 801caf4:	691a      	ldr	r2, [r3, #16]
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	781b      	ldrb	r3, [r3, #0]
 801cafa:	4618      	mov	r0, r3
 801cafc:	4938      	ldr	r1, [pc, #224]	@ (801cbe0 <RegionRU864TxConfig+0x174>)
 801cafe:	4603      	mov	r3, r0
 801cb00:	005b      	lsls	r3, r3, #1
 801cb02:	4403      	add	r3, r0
 801cb04:	009b      	lsls	r3, r3, #2
 801cb06:	440b      	add	r3, r1
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	4790      	blx	r2

	if (txConfig->Datarate == DR_7)
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801cb14:	2b07      	cmp	r3, #7
 801cb16:	d124      	bne.n	801cb62 <RegionRU864TxConfig+0xf6>
	{ // High Speed FSK channel
		modem = MODEM_FSK;
 801cb18:	2300      	movs	r3, #0
 801cb1a:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 3000);
 801cb1c:	4b33      	ldr	r3, [pc, #204]	@ (801cbec <RegionRU864TxConfig+0x180>)
 801cb1e:	6a1e      	ldr	r6, [r3, #32]
 801cb20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801cb24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801cb28:	fb02 f303 	mul.w	r3, r2, r3
 801cb2c:	461a      	mov	r2, r3
 801cb2e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801cb32:	7ff8      	ldrb	r0, [r7, #31]
 801cb34:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801cb38:	9308      	str	r3, [sp, #32]
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	9307      	str	r3, [sp, #28]
 801cb3e:	2300      	movs	r3, #0
 801cb40:	9306      	str	r3, [sp, #24]
 801cb42:	2300      	movs	r3, #0
 801cb44:	9305      	str	r3, [sp, #20]
 801cb46:	2301      	movs	r3, #1
 801cb48:	9304      	str	r3, [sp, #16]
 801cb4a:	2300      	movs	r3, #0
 801cb4c:	9303      	str	r3, [sp, #12]
 801cb4e:	2305      	movs	r3, #5
 801cb50:	9302      	str	r3, [sp, #8]
 801cb52:	2300      	movs	r3, #0
 801cb54:	9301      	str	r3, [sp, #4]
 801cb56:	9200      	str	r2, [sp, #0]
 801cb58:	69bb      	ldr	r3, [r7, #24]
 801cb5a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801cb5e:	47b0      	blx	r6
 801cb60:	e01d      	b.n	801cb9e <RegionRU864TxConfig+0x132>
	}
	else
	{
		modem = MODEM_LORA;
 801cb62:	2301      	movs	r3, #1
 801cb64:	77fb      	strb	r3, [r7, #31]
		Radio.SetTxConfig(modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 801cb66:	4b21      	ldr	r3, [pc, #132]	@ (801cbec <RegionRU864TxConfig+0x180>)
 801cb68:	6a1e      	ldr	r6, [r3, #32]
 801cb6a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801cb6e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801cb72:	7ff8      	ldrb	r0, [r7, #31]
 801cb74:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801cb78:	9208      	str	r2, [sp, #32]
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	9207      	str	r2, [sp, #28]
 801cb7e:	2200      	movs	r2, #0
 801cb80:	9206      	str	r2, [sp, #24]
 801cb82:	2200      	movs	r2, #0
 801cb84:	9205      	str	r2, [sp, #20]
 801cb86:	2201      	movs	r2, #1
 801cb88:	9204      	str	r2, [sp, #16]
 801cb8a:	2200      	movs	r2, #0
 801cb8c:	9203      	str	r2, [sp, #12]
 801cb8e:	2208      	movs	r2, #8
 801cb90:	9202      	str	r2, [sp, #8]
 801cb92:	2201      	movs	r2, #1
 801cb94:	9201      	str	r2, [sp, #4]
 801cb96:	9300      	str	r3, [sp, #0]
 801cb98:	69bb      	ldr	r3, [r7, #24]
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	47b0      	blx	r6
	}

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(modem, txConfig->PktLen);
 801cb9e:	4b13      	ldr	r3, [pc, #76]	@ (801cbec <RegionRU864TxConfig+0x180>)
 801cba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cba2:	68fa      	ldr	r2, [r7, #12]
 801cba4:	8992      	ldrh	r2, [r2, #12]
 801cba6:	b2d1      	uxtb	r1, r2
 801cba8:	7ffa      	ldrb	r2, [r7, #31]
 801cbaa:	4610      	mov	r0, r2
 801cbac:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(modem, txConfig->PktLen);
 801cbae:	4b0f      	ldr	r3, [pc, #60]	@ (801cbec <RegionRU864TxConfig+0x180>)
 801cbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cbb2:	68fa      	ldr	r2, [r7, #12]
 801cbb4:	8992      	ldrh	r2, [r2, #12]
 801cbb6:	b2d1      	uxtb	r1, r2
 801cbb8:	7ffa      	ldrb	r2, [r7, #31]
 801cbba:	4610      	mov	r0, r2
 801cbbc:	4798      	blx	r3
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	2200      	movs	r2, #0
 801cbc2:	461c      	mov	r4, r3
 801cbc4:	4615      	mov	r5, r2
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	e9c3 4500 	strd	r4, r5, [r3]

	*txPower = txPowerLimited;
 801cbcc:	68bb      	ldr	r3, [r7, #8]
 801cbce:	7f7a      	ldrb	r2, [r7, #29]
 801cbd0:	701a      	strb	r2, [r3, #0]
	return true;
 801cbd2:	2301      	movs	r3, #1
}
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	3724      	adds	r7, #36	@ 0x24
 801cbd8:	46bd      	mov	sp, r7
 801cbda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbdc:	08025394 	.word	0x08025394
 801cbe0:	200079ec 	.word	0x200079ec
 801cbe4:	20000258 	.word	0x20000258
 801cbe8:	20006c9c 	.word	0x20006c9c
 801cbec:	08025450 	.word	0x08025450

0801cbf0 <RegionRU864LinkAdrReq>:

uint8_t RegionRU864LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 801cbf0:	b590      	push	{r4, r7, lr}
 801cbf2:	b093      	sub	sp, #76	@ 0x4c
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	60f8      	str	r0, [r7, #12]
 801cbf8:	60b9      	str	r1, [r7, #8]
 801cbfa:	607a      	str	r2, [r7, #4]
 801cbfc:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 801cbfe:	2307      	movs	r3, #7
 801cc00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 801cc04:	2300      	movs	r3, #0
 801cc06:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	uint8_t bytesProcessed = 0;
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint16_t chMask = 0;
 801cc10:	2300      	movs	r3, #0
 801cc12:	877b      	strh	r3, [r7, #58]	@ 0x3a
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	while (bytesProcessed < linkAdrReq->PayloadSize)
 801cc14:	e083      	b.n	801cd1e <RegionRU864LinkAdrReq+0x12e>
	{
		// Get ADR request parameters
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 801cc16:	68fb      	ldr	r3, [r7, #12]
 801cc18:	681a      	ldr	r2, [r3, #0]
 801cc1a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801cc1e:	4413      	add	r3, r2
 801cc20:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801cc24:	4611      	mov	r1, r2
 801cc26:	4618      	mov	r0, r3
 801cc28:	f7f9 fda4 	bl	8016774 <RegionCommonParseLinkAdrReq>
 801cc2c:	4603      	mov	r3, r0
 801cc2e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		if (nextIndex == 0)
 801cc32:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d079      	beq.n	801cd2e <RegionRU864LinkAdrReq+0x13e>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 801cc3a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801cc3e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801cc42:	4413      	add	r3, r2
 801cc44:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 801cc48:	2307      	movs	r3, #7
 801cc4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

		// Setup temporary channels mask
		chMask = linkAdrParams.ChMask;
 801cc4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cc52:	877b      	strh	r3, [r7, #58]	@ 0x3a

		// Verify channels mask
		if ((linkAdrParams.ChMaskCtrl == 0) && (chMask == 0))
 801cc54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d109      	bne.n	801cc70 <RegionRU864LinkAdrReq+0x80>
 801cc5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d106      	bne.n	801cc70 <RegionRU864LinkAdrReq+0x80>
		{
			status &= 0xFE; // Channel mask KO
 801cc62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cc66:	f023 0301 	bic.w	r3, r3, #1
 801cc6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801cc6e:	e056      	b.n	801cd1e <RegionRU864LinkAdrReq+0x12e>
		}
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 801cc70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d003      	beq.n	801cc80 <RegionRU864LinkAdrReq+0x90>
 801cc78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cc7c:	2b05      	cmp	r3, #5
 801cc7e:	d903      	bls.n	801cc88 <RegionRU864LinkAdrReq+0x98>
				 (linkAdrParams.ChMaskCtrl >= 7))
 801cc80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
		else if (((linkAdrParams.ChMaskCtrl >= 1) && (linkAdrParams.ChMaskCtrl <= 5)) ||
 801cc84:	2b06      	cmp	r3, #6
 801cc86:	d906      	bls.n	801cc96 <RegionRU864LinkAdrReq+0xa6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 801cc88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cc8c:	f023 0301 	bic.w	r3, r3, #1
 801cc90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801cc94:	e043      	b.n	801cd1e <RegionRU864LinkAdrReq+0x12e>
		}
		else
		{
			for (uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++)
 801cc96:	2300      	movs	r3, #0
 801cc98:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801cc9c:	e03b      	b.n	801cd16 <RegionRU864LinkAdrReq+0x126>
			{
				if (linkAdrParams.ChMaskCtrl == 6)
 801cc9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801cca2:	2b06      	cmp	r3, #6
 801cca4:	d117      	bne.n	801ccd6 <RegionRU864LinkAdrReq+0xe6>
				{
					if (Channels[i].Frequency != 0)
 801cca6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801ccaa:	4959      	ldr	r1, [pc, #356]	@ (801ce10 <RegionRU864LinkAdrReq+0x220>)
 801ccac:	4613      	mov	r3, r2
 801ccae:	005b      	lsls	r3, r3, #1
 801ccb0:	4413      	add	r3, r2
 801ccb2:	009b      	lsls	r3, r3, #2
 801ccb4:	440b      	add	r3, r1
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d027      	beq.n	801cd0c <RegionRU864LinkAdrReq+0x11c>
					{
						chMask |= 1 << i;
 801ccbc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801ccc0:	2201      	movs	r2, #1
 801ccc2:	fa02 f303 	lsl.w	r3, r2, r3
 801ccc6:	b21a      	sxth	r2, r3
 801ccc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ccca:	b21b      	sxth	r3, r3
 801cccc:	4313      	orrs	r3, r2
 801ccce:	b21b      	sxth	r3, r3
 801ccd0:	b29b      	uxth	r3, r3
 801ccd2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801ccd4:	e01a      	b.n	801cd0c <RegionRU864LinkAdrReq+0x11c>
					}
				}
				else
				{
					if (((chMask & (1 << i)) != 0) &&
 801ccd6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ccd8:	461a      	mov	r2, r3
 801ccda:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801ccde:	fa42 f303 	asr.w	r3, r2, r3
 801cce2:	f003 0301 	and.w	r3, r3, #1
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	d010      	beq.n	801cd0c <RegionRU864LinkAdrReq+0x11c>
						(Channels[i].Frequency == 0))
 801ccea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801ccee:	4948      	ldr	r1, [pc, #288]	@ (801ce10 <RegionRU864LinkAdrReq+0x220>)
 801ccf0:	4613      	mov	r3, r2
 801ccf2:	005b      	lsls	r3, r3, #1
 801ccf4:	4413      	add	r3, r2
 801ccf6:	009b      	lsls	r3, r3, #2
 801ccf8:	440b      	add	r3, r1
 801ccfa:	681b      	ldr	r3, [r3, #0]
					if (((chMask & (1 << i)) != 0) &&
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d105      	bne.n	801cd0c <RegionRU864LinkAdrReq+0x11c>
					{					// Trying to enable an undefined channel
						status &= 0xFE; // Channel mask KO
 801cd00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cd04:	f023 0301 	bic.w	r3, r3, #1
 801cd08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			for (uint8_t i = 0; i < RU864_MAX_NB_CHANNELS; i++)
 801cd0c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801cd10:	3301      	adds	r3, #1
 801cd12:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801cd16:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801cd1a:	2b0f      	cmp	r3, #15
 801cd1c:	d9bf      	bls.n	801cc9e <RegionRU864LinkAdrReq+0xae>
	while (bytesProcessed < linkAdrReq->PayloadSize)
 801cd1e:	68fb      	ldr	r3, [r7, #12]
 801cd20:	791b      	ldrb	r3, [r3, #4]
 801cd22:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801cd26:	429a      	cmp	r2, r3
 801cd28:	f4ff af75 	bcc.w	801cc16 <RegionRU864LinkAdrReq+0x26>
 801cd2c:	e000      	b.n	801cd30 <RegionRU864LinkAdrReq+0x140>
			break; // break loop, since no more request has been found
 801cd2e:	bf00      	nop
			}
		}
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 801cd30:	2301      	movs	r3, #1
 801cd32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801cd36:	68fb      	ldr	r3, [r7, #12]
 801cd38:	795b      	ldrb	r3, [r3, #5]
 801cd3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionRU864GetPhyParam(&getPhy);
 801cd3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801cd42:	4618      	mov	r0, r3
 801cd44:	f7ff fa7a 	bl	801c23c <RegionRU864GetPhyParam>
 801cd48:	4603      	mov	r3, r0
 801cd4a:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 801cd4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cd50:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801cd52:	68fb      	ldr	r3, [r7, #12]
 801cd54:	799b      	ldrb	r3, [r3, #6]
 801cd56:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801cd58:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801cd5c:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801cd5e:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 801cd62:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801cd64:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801cd68:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801cd70:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801cd78:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	7a5b      	ldrb	r3, [r3, #9]
 801cd7e:	b25b      	sxtb	r3, r3
 801cd80:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = RU864_MAX_NB_CHANNELS;
 801cd82:	2310      	movs	r3, #16
 801cd84:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = &chMask;
 801cd86:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 801cd8a:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 801cd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd8e:	b25b      	sxtb	r3, r3
 801cd90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = RU864_TX_MAX_DATARATE;
 801cd94:	2307      	movs	r3, #7
 801cd96:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 801cd9a:	4b1d      	ldr	r3, [pc, #116]	@ (801ce10 <RegionRU864LinkAdrReq+0x220>)
 801cd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = RU864_MIN_TX_POWER;
 801cd9e:	2307      	movs	r3, #7
 801cda0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = RU864_MAX_TX_POWER;
 801cda4:	2300      	movs	r3, #0
 801cda6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 801cdaa:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 801cdae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801cdb2:	1c9a      	adds	r2, r3, #2
 801cdb4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801cdb8:	1c59      	adds	r1, r3, #1
 801cdba:	f107 0014 	add.w	r0, r7, #20
 801cdbe:	4623      	mov	r3, r4
 801cdc0:	f7f9 fd2a 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 801cdc4:	4603      	mov	r3, r0
 801cdc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	// Update channelsMask if everything is correct
	if (status == 0x07)
 801cdca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801cdce:	2b07      	cmp	r3, #7
 801cdd0:	d107      	bne.n	801cde2 <RegionRU864LinkAdrReq+0x1f2>
	{
		// Set the channels mask to a default value
		memset(ChannelsMask, 0, sizeof(ChannelsMask));
 801cdd2:	220c      	movs	r2, #12
 801cdd4:	2100      	movs	r1, #0
 801cdd6:	480f      	ldr	r0, [pc, #60]	@ (801ce14 <RegionRU864LinkAdrReq+0x224>)
 801cdd8:	f005 fa38 	bl	802224c <memset>
		// Update the channels mask
		ChannelsMask[0] = chMask;
 801cddc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801cdde:	4b0d      	ldr	r3, [pc, #52]	@ (801ce14 <RegionRU864LinkAdrReq+0x224>)
 801cde0:	801a      	strh	r2, [r3, #0]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 801cde2:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 801cde6:	68bb      	ldr	r3, [r7, #8]
 801cde8:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 801cdea:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 801cdf2:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801cdf6:	683b      	ldr	r3, [r7, #0]
 801cdf8:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 801cdfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cdfc:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801ce00:	701a      	strb	r2, [r3, #0]

	return status;
 801ce02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	374c      	adds	r7, #76	@ 0x4c
 801ce0a:	46bd      	mov	sp, r7
 801ce0c:	bd90      	pop	{r4, r7, pc}
 801ce0e:	bf00      	nop
 801ce10:	200079ec 	.word	0x200079ec
 801ce14:	20006c9c 	.word	0x20006c9c

0801ce18 <RegionRU864RxParamSetupReq>:

uint8_t RegionRU864RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b084      	sub	sp, #16
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 801ce20:	2307      	movs	r3, #7
 801ce22:	73fb      	strb	r3, [r7, #15]

	// Verify radio frequency
	if (Radio.CheckRfFrequency(rxParamSetupReq->Frequency) == false)
 801ce24:	4b19      	ldr	r3, [pc, #100]	@ (801ce8c <RegionRU864RxParamSetupReq+0x74>)
 801ce26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ce28:	687a      	ldr	r2, [r7, #4]
 801ce2a:	6852      	ldr	r2, [r2, #4]
 801ce2c:	4610      	mov	r0, r2
 801ce2e:	4798      	blx	r3
 801ce30:	4603      	mov	r3, r0
 801ce32:	f083 0301 	eor.w	r3, r3, #1
 801ce36:	b2db      	uxtb	r3, r3
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d003      	beq.n	801ce44 <RegionRU864RxParamSetupReq+0x2c>
	{
		status &= 0xFE; // Channel frequency KO
 801ce3c:	7bfb      	ldrb	r3, [r7, #15]
 801ce3e:	f023 0301 	bic.w	r3, r3, #1
 801ce42:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, RU864_RX_MIN_DATARATE, RU864_RX_MAX_DATARATE) == false)
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	f993 3000 	ldrsb.w	r3, [r3]
 801ce4a:	2207      	movs	r2, #7
 801ce4c:	2100      	movs	r1, #0
 801ce4e:	4618      	mov	r0, r3
 801ce50:	f7f9 fa8a 	bl	8016368 <RegionCommonValueInRange>
 801ce54:	4603      	mov	r3, r0
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d103      	bne.n	801ce62 <RegionRU864RxParamSetupReq+0x4a>
	{
		status &= 0xFD; // Datarate KO
 801ce5a:	7bfb      	ldrb	r3, [r7, #15]
 801ce5c:	f023 0302 	bic.w	r3, r3, #2
 801ce60:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, RU864_MIN_RX1_DR_OFFSET, RU864_MAX_RX1_DR_OFFSET) == false)
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ce68:	2207      	movs	r2, #7
 801ce6a:	2100      	movs	r1, #0
 801ce6c:	4618      	mov	r0, r3
 801ce6e:	f7f9 fa7b 	bl	8016368 <RegionCommonValueInRange>
 801ce72:	4603      	mov	r3, r0
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d103      	bne.n	801ce80 <RegionRU864RxParamSetupReq+0x68>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 801ce78:	7bfb      	ldrb	r3, [r7, #15]
 801ce7a:	f023 0304 	bic.w	r3, r3, #4
 801ce7e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 801ce80:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce82:	4618      	mov	r0, r3
 801ce84:	3710      	adds	r7, #16
 801ce86:	46bd      	mov	sp, r7
 801ce88:	bd80      	pop	{r7, pc}
 801ce8a:	bf00      	nop
 801ce8c:	08025450 	.word	0x08025450

0801ce90 <RegionRU864NewChannelReq>:

uint8_t RegionRU864NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 801ce90:	b580      	push	{r7, lr}
 801ce92:	b086      	sub	sp, #24
 801ce94:	af00      	add	r7, sp, #0
 801ce96:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 801ce98:	2303      	movs	r3, #3
 801ce9a:	75fb      	strb	r3, [r7, #23]
	ChannelAddParams_t channelAdd;
	ChannelRemoveParams_t channelRemove;

	if (newChannelReq->NewChannel->Frequency == 0)
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d114      	bne.n	801ced0 <RegionRU864NewChannelReq+0x40>
	{
		channelRemove.ChannelId = newChannelReq->ChannelId;
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801ceac:	b2db      	uxtb	r3, r3
 801ceae:	723b      	strb	r3, [r7, #8]

		// Remove
		if (RegionRU864ChannelsRemove(&channelRemove) == false)
 801ceb0:	f107 0308 	add.w	r3, r7, #8
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f000 fa8b 	bl	801d3d0 <RegionRU864ChannelsRemove>
 801ceba:	4603      	mov	r3, r0
 801cebc:	f083 0301 	eor.w	r3, r3, #1
 801cec0:	b2db      	uxtb	r3, r3
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d03b      	beq.n	801cf3e <RegionRU864NewChannelReq+0xae>
		{
			status &= 0xFC;
 801cec6:	7dfb      	ldrb	r3, [r7, #23]
 801cec8:	f023 0303 	bic.w	r3, r3, #3
 801cecc:	75fb      	strb	r3, [r7, #23]
 801cece:	e036      	b.n	801cf3e <RegionRU864NewChannelReq+0xae>
		}
	}
	else
	{
		channelAdd.NewChannel = newChannelReq->NewChannel;
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	60fb      	str	r3, [r7, #12]
		channelAdd.ChannelId = newChannelReq->ChannelId;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801cedc:	b2db      	uxtb	r3, r3
 801cede:	743b      	strb	r3, [r7, #16]

		switch (RegionRU864ChannelAdd(&channelAdd))
 801cee0:	f107 030c 	add.w	r3, r7, #12
 801cee4:	4618      	mov	r0, r3
 801cee6:	f000 f9b1 	bl	801d24c <RegionRU864ChannelAdd>
 801ceea:	4603      	mov	r3, r0
 801ceec:	2b06      	cmp	r3, #6
 801ceee:	d820      	bhi.n	801cf32 <RegionRU864NewChannelReq+0xa2>
 801cef0:	a201      	add	r2, pc, #4	@ (adr r2, 801cef8 <RegionRU864NewChannelReq+0x68>)
 801cef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cef6:	bf00      	nop
 801cef8:	0801cf3d 	.word	0x0801cf3d
 801cefc:	0801cf33 	.word	0x0801cf33
 801cf00:	0801cf33 	.word	0x0801cf33
 801cf04:	0801cf33 	.word	0x0801cf33
 801cf08:	0801cf15 	.word	0x0801cf15
 801cf0c:	0801cf1f 	.word	0x0801cf1f
 801cf10:	0801cf29 	.word	0x0801cf29
		{
			break;
		}
		case LORAMAC_STATUS_FREQUENCY_INVALID:
		{
			status &= 0xFE;
 801cf14:	7dfb      	ldrb	r3, [r7, #23]
 801cf16:	f023 0301 	bic.w	r3, r3, #1
 801cf1a:	75fb      	strb	r3, [r7, #23]
			break;
 801cf1c:	e00f      	b.n	801cf3e <RegionRU864NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_DATARATE_INVALID:
		{
			status &= 0xFD;
 801cf1e:	7dfb      	ldrb	r3, [r7, #23]
 801cf20:	f023 0302 	bic.w	r3, r3, #2
 801cf24:	75fb      	strb	r3, [r7, #23]
			break;
 801cf26:	e00a      	b.n	801cf3e <RegionRU864NewChannelReq+0xae>
		}
		case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
		{
			status &= 0xFC;
 801cf28:	7dfb      	ldrb	r3, [r7, #23]
 801cf2a:	f023 0303 	bic.w	r3, r3, #3
 801cf2e:	75fb      	strb	r3, [r7, #23]
			break;
 801cf30:	e005      	b.n	801cf3e <RegionRU864NewChannelReq+0xae>
		}
		default:
		{
			status &= 0xFC;
 801cf32:	7dfb      	ldrb	r3, [r7, #23]
 801cf34:	f023 0303 	bic.w	r3, r3, #3
 801cf38:	75fb      	strb	r3, [r7, #23]
			break;
 801cf3a:	e000      	b.n	801cf3e <RegionRU864NewChannelReq+0xae>
			break;
 801cf3c:	bf00      	nop
		}
		}
	}

	return status;
 801cf3e:	7dfb      	ldrb	r3, [r7, #23]
}
 801cf40:	4618      	mov	r0, r3
 801cf42:	3718      	adds	r7, #24
 801cf44:	46bd      	mov	sp, r7
 801cf46:	bd80      	pop	{r7, pc}

0801cf48 <RegionRU864TxParamSetupReq>:

int8_t RegionRU864TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 801cf48:	b480      	push	{r7}
 801cf4a:	b083      	sub	sp, #12
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	6078      	str	r0, [r7, #4]
	// Accept the request
	return 0;
 801cf50:	2300      	movs	r3, #0
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	370c      	adds	r7, #12
 801cf56:	46bd      	mov	sp, r7
 801cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf5c:	4770      	bx	lr
	...

0801cf60 <RegionRU864DlChannelReq>:

uint8_t RegionRU864DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b084      	sub	sp, #16
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x03;
 801cf68:	2303      	movs	r3, #3
 801cf6a:	73fb      	strb	r3, [r7, #15]

	// Verify if the frequency is supported
	if (VerifyTxFreq(dlChannelReq->Rx1Frequency) == false)
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	685b      	ldr	r3, [r3, #4]
 801cf70:	4618      	mov	r0, r3
 801cf72:	f7ff f897 	bl	801c0a4 <VerifyTxFreq>
 801cf76:	4603      	mov	r3, r0
 801cf78:	f083 0301 	eor.w	r3, r3, #1
 801cf7c:	b2db      	uxtb	r3, r3
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d003      	beq.n	801cf8a <RegionRU864DlChannelReq+0x2a>
	{
		status &= 0xFE;
 801cf82:	7bfb      	ldrb	r3, [r7, #15]
 801cf84:	f023 0301 	bic.w	r3, r3, #1
 801cf88:	73fb      	strb	r3, [r7, #15]
	}

	// Verify if an uplink frequency exists
	if (Channels[dlChannelReq->ChannelId].Frequency == 0)
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	781b      	ldrb	r3, [r3, #0]
 801cf8e:	4619      	mov	r1, r3
 801cf90:	4a10      	ldr	r2, [pc, #64]	@ (801cfd4 <RegionRU864DlChannelReq+0x74>)
 801cf92:	460b      	mov	r3, r1
 801cf94:	005b      	lsls	r3, r3, #1
 801cf96:	440b      	add	r3, r1
 801cf98:	009b      	lsls	r3, r3, #2
 801cf9a:	4413      	add	r3, r2
 801cf9c:	681b      	ldr	r3, [r3, #0]
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d103      	bne.n	801cfaa <RegionRU864DlChannelReq+0x4a>
	{
		status &= 0xFD;
 801cfa2:	7bfb      	ldrb	r3, [r7, #15]
 801cfa4:	f023 0302 	bic.w	r3, r3, #2
 801cfa8:	73fb      	strb	r3, [r7, #15]
	}

	// Apply Rx1 frequency, if the status is OK
	if (status == 0x03)
 801cfaa:	7bfb      	ldrb	r3, [r7, #15]
 801cfac:	2b03      	cmp	r3, #3
 801cfae:	d10c      	bne.n	801cfca <RegionRU864DlChannelReq+0x6a>
	{
		Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	781b      	ldrb	r3, [r3, #0]
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	685a      	ldr	r2, [r3, #4]
 801cfba:	4906      	ldr	r1, [pc, #24]	@ (801cfd4 <RegionRU864DlChannelReq+0x74>)
 801cfbc:	4603      	mov	r3, r0
 801cfbe:	005b      	lsls	r3, r3, #1
 801cfc0:	4403      	add	r3, r0
 801cfc2:	009b      	lsls	r3, r3, #2
 801cfc4:	440b      	add	r3, r1
 801cfc6:	3304      	adds	r3, #4
 801cfc8:	601a      	str	r2, [r3, #0]
	}

	return status;
 801cfca:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfcc:	4618      	mov	r0, r3
 801cfce:	3710      	adds	r7, #16
 801cfd0:	46bd      	mov	sp, r7
 801cfd2:	bd80      	pop	{r7, pc}
 801cfd4:	200079ec 	.word	0x200079ec

0801cfd8 <RegionRU864AlternateDr>:

int8_t RegionRU864AlternateDr(AlternateDrParams_t *alternateDr)
{
 801cfd8:	b480      	push	{r7}
 801cfda:	b085      	sub	sp, #20
 801cfdc:	af00      	add	r7, sp, #0
 801cfde:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	73fb      	strb	r3, [r7, #15]

	if ((alternateDr->NbTrials % 48) == 0)
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	881a      	ldrh	r2, [r3, #0]
 801cfe8:	4b23      	ldr	r3, [pc, #140]	@ (801d078 <RegionRU864AlternateDr+0xa0>)
 801cfea:	fba3 1302 	umull	r1, r3, r3, r2
 801cfee:	0959      	lsrs	r1, r3, #5
 801cff0:	460b      	mov	r3, r1
 801cff2:	005b      	lsls	r3, r3, #1
 801cff4:	440b      	add	r3, r1
 801cff6:	011b      	lsls	r3, r3, #4
 801cff8:	1ad3      	subs	r3, r2, r3
 801cffa:	b29b      	uxth	r3, r3
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d102      	bne.n	801d006 <RegionRU864AlternateDr+0x2e>
	{
		datarate = DR_0;
 801d000:	2300      	movs	r3, #0
 801d002:	73fb      	strb	r3, [r7, #15]
 801d004:	e030      	b.n	801d068 <RegionRU864AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 32) == 0)
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	881b      	ldrh	r3, [r3, #0]
 801d00a:	f003 031f 	and.w	r3, r3, #31
 801d00e:	b29b      	uxth	r3, r3
 801d010:	2b00      	cmp	r3, #0
 801d012:	d102      	bne.n	801d01a <RegionRU864AlternateDr+0x42>
	{
		datarate = DR_1;
 801d014:	2301      	movs	r3, #1
 801d016:	73fb      	strb	r3, [r7, #15]
 801d018:	e026      	b.n	801d068 <RegionRU864AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 24) == 0)
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	881a      	ldrh	r2, [r3, #0]
 801d01e:	4b16      	ldr	r3, [pc, #88]	@ (801d078 <RegionRU864AlternateDr+0xa0>)
 801d020:	fba3 1302 	umull	r1, r3, r3, r2
 801d024:	0919      	lsrs	r1, r3, #4
 801d026:	460b      	mov	r3, r1
 801d028:	005b      	lsls	r3, r3, #1
 801d02a:	440b      	add	r3, r1
 801d02c:	00db      	lsls	r3, r3, #3
 801d02e:	1ad3      	subs	r3, r2, r3
 801d030:	b29b      	uxth	r3, r3
 801d032:	2b00      	cmp	r3, #0
 801d034:	d102      	bne.n	801d03c <RegionRU864AlternateDr+0x64>
	{
		datarate = DR_2;
 801d036:	2302      	movs	r3, #2
 801d038:	73fb      	strb	r3, [r7, #15]
 801d03a:	e015      	b.n	801d068 <RegionRU864AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 16) == 0)
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	881b      	ldrh	r3, [r3, #0]
 801d040:	f003 030f 	and.w	r3, r3, #15
 801d044:	b29b      	uxth	r3, r3
 801d046:	2b00      	cmp	r3, #0
 801d048:	d102      	bne.n	801d050 <RegionRU864AlternateDr+0x78>
	{
		datarate = DR_3;
 801d04a:	2303      	movs	r3, #3
 801d04c:	73fb      	strb	r3, [r7, #15]
 801d04e:	e00b      	b.n	801d068 <RegionRU864AlternateDr+0x90>
	}
	else if ((alternateDr->NbTrials % 8) == 0)
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	881b      	ldrh	r3, [r3, #0]
 801d054:	f003 0307 	and.w	r3, r3, #7
 801d058:	b29b      	uxth	r3, r3
 801d05a:	2b00      	cmp	r3, #0
 801d05c:	d102      	bne.n	801d064 <RegionRU864AlternateDr+0x8c>
	{
		datarate = DR_4;
 801d05e:	2304      	movs	r3, #4
 801d060:	73fb      	strb	r3, [r7, #15]
 801d062:	e001      	b.n	801d068 <RegionRU864AlternateDr+0x90>
	}
	else
	{
		datarate = DR_5;
 801d064:	2305      	movs	r3, #5
 801d066:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 801d068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d06c:	4618      	mov	r0, r3
 801d06e:	3714      	adds	r7, #20
 801d070:	46bd      	mov	sp, r7
 801d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d076:	4770      	bx	lr
 801d078:	aaaaaaab 	.word	0xaaaaaaab

0801d07c <RegionRU864CalcBackOff>:

void RegionRU864CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 801d07c:	b580      	push	{r7, lr}
 801d07e:	b08a      	sub	sp, #40	@ 0x28
 801d080:	af00      	add	r7, sp, #0
 801d082:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 801d084:	4b11      	ldr	r3, [pc, #68]	@ (801d0cc <RegionRU864CalcBackOff+0x50>)
 801d086:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 801d088:	4b11      	ldr	r3, [pc, #68]	@ (801d0d0 <RegionRU864CalcBackOff+0x54>)
 801d08a:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	785b      	ldrb	r3, [r3, #1]
 801d090:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	781b      	ldrb	r3, [r3, #0]
 801d096:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	789b      	ldrb	r3, [r3, #2]
 801d09c:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	78db      	ldrb	r3, [r3, #3]
 801d0a2:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d0aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801d0b4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 801d0b8:	f107 0308 	add.w	r3, r7, #8
 801d0bc:	4618      	mov	r0, r3
 801d0be:	f7f9 fd3b 	bl	8016b38 <RegionCommonCalcBackOff>
}
 801d0c2:	bf00      	nop
 801d0c4:	3728      	adds	r7, #40	@ 0x28
 801d0c6:	46bd      	mov	sp, r7
 801d0c8:	bd80      	pop	{r7, pc}
 801d0ca:	bf00      	nop
 801d0cc:	200079ec 	.word	0x200079ec
 801d0d0:	20000258 	.word	0x20000258

0801d0d4 <RegionRU864NextChannel>:

bool RegionRU864NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 801d0d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801d0d8:	b092      	sub	sp, #72	@ 0x48
 801d0da:	af04      	add	r7, sp, #16
 801d0dc:	60f8      	str	r0, [r7, #12]
 801d0de:	60b9      	str	r1, [r7, #8]
 801d0e0:	607a      	str	r2, [r7, #4]
 801d0e2:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t delayTx = 0;
 801d0ea:	2300      	movs	r3, #0
 801d0ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t enabledChannels[RU864_MAX_NB_CHANNELS] = {0};
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	617b      	str	r3, [r7, #20]
 801d0f4:	f107 0318 	add.w	r3, r7, #24
 801d0f8:	2200      	movs	r2, #0
 801d0fa:	601a      	str	r2, [r3, #0]
 801d0fc:	605a      	str	r2, [r3, #4]
 801d0fe:	609a      	str	r2, [r3, #8]
	TimerTime_t nextTxDelay = 0;
 801d100:	f04f 0200 	mov.w	r2, #0
 801d104:	f04f 0300 	mov.w	r3, #0
 801d108:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	if (RegionCommonCountChannels(ChannelsMask, 0, 1) == 0)
 801d10c:	2201      	movs	r2, #1
 801d10e:	2100      	movs	r1, #0
 801d110:	484b      	ldr	r0, [pc, #300]	@ (801d240 <RegionRU864NextChannel+0x16c>)
 801d112:	f7f9 f97c 	bl	801640e <RegionCommonCountChannels>
 801d116:	4603      	mov	r3, r0
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d106      	bne.n	801d12a <RegionRU864NextChannel+0x56>
	{																	  // Reactivate default channels
		ChannelsMask[0] |= LC(1) + LC(2) + LC(3) + LC(4) + LC(5) + LC(6); //+ LC( 7 )+ LC( 8 );
 801d11c:	4b48      	ldr	r3, [pc, #288]	@ (801d240 <RegionRU864NextChannel+0x16c>)
 801d11e:	881b      	ldrh	r3, [r3, #0]
 801d120:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 801d124:	b29a      	uxth	r2, r3
 801d126:	4b46      	ldr	r3, [pc, #280]	@ (801d240 <RegionRU864NextChannel+0x16c>)
 801d128:	801a      	strh	r2, [r3, #0]
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 801d12a:	68fb      	ldr	r3, [r7, #12]
 801d12c:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d136:	4610      	mov	r0, r2
 801d138:	4619      	mov	r1, r3
 801d13a:	f003 ff8f 	bl	802105c <util_timer_get_elapsedtime>
 801d13e:	4602      	mov	r2, r0
 801d140:	460b      	mov	r3, r1
 801d142:	42a2      	cmp	r2, r4
 801d144:	41ab      	sbcs	r3, r5
 801d146:	d326      	bcc.n	801d196 <RegionRU864NextChannel+0xc2>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 801d148:	6839      	ldr	r1, [r7, #0]
 801d14a:	f04f 0200 	mov.w	r2, #0
 801d14e:	f04f 0300 	mov.w	r3, #0
 801d152:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, RU864_MAX_NB_BANDS);
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	7c58      	ldrb	r0, [r3, #17]
 801d15a:	68fb      	ldr	r3, [r7, #12]
 801d15c:	7c99      	ldrb	r1, [r3, #18]
 801d15e:	2301      	movs	r3, #1
 801d160:	4a38      	ldr	r2, [pc, #224]	@ (801d244 <RegionRU864NextChannel+0x170>)
 801d162:	f7f9 f9c8 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 801d166:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Joined, nextChanParams->Datarate,
 801d16a:	68fb      	ldr	r3, [r7, #12]
 801d16c:	7c58      	ldrb	r0, [r3, #17]
 801d16e:	68fb      	ldr	r3, [r7, #12]
 801d170:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801d174:	b2d9      	uxtb	r1, r3
 801d176:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 801d17a:	9302      	str	r3, [sp, #8]
 801d17c:	f107 0314 	add.w	r3, r7, #20
 801d180:	9301      	str	r3, [sp, #4]
 801d182:	4b30      	ldr	r3, [pc, #192]	@ (801d244 <RegionRU864NextChannel+0x170>)
 801d184:	9300      	str	r3, [sp, #0]
 801d186:	4b30      	ldr	r3, [pc, #192]	@ (801d248 <RegionRU864NextChannel+0x174>)
 801d188:	4a2d      	ldr	r2, [pc, #180]	@ (801d240 <RegionRU864NextChannel+0x16c>)
 801d18a:	f7fe ffb1 	bl	801c0f0 <CountNbOfEnabledChannels>
 801d18e:	4603      	mov	r3, r0
 801d190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801d194:	e017      	b.n	801d1c6 <RegionRU864NextChannel+0xf2>
													 ChannelsMask, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 801d196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d19a:	3301      	adds	r3, #1
 801d19c:	b2db      	uxtb	r3, r3
 801d19e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 801d1a2:	68fb      	ldr	r3, [r7, #12]
 801d1a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d1ae:	4610      	mov	r0, r2
 801d1b0:	4619      	mov	r1, r3
 801d1b2:	f003 ff53 	bl	802105c <util_timer_get_elapsedtime>
 801d1b6:	4602      	mov	r2, r0
 801d1b8:	460b      	mov	r3, r1
 801d1ba:	ebb4 0802 	subs.w	r8, r4, r2
 801d1be:	eb65 0903 	sbc.w	r9, r5, r3
 801d1c2:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28
	}

	if (nbEnabledChannels > 0)
 801d1c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d016      	beq.n	801d1fc <RegionRU864NextChannel+0x128>
	{
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 801d1ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d1d2:	3b01      	subs	r3, #1
 801d1d4:	4619      	mov	r1, r3
 801d1d6:	2000      	movs	r0, #0
 801d1d8:	f003 fccc 	bl	8020b74 <randr>
 801d1dc:	4603      	mov	r3, r0
 801d1de:	3338      	adds	r3, #56	@ 0x38
 801d1e0:	443b      	add	r3, r7
 801d1e2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 801d1e6:	68bb      	ldr	r3, [r7, #8]
 801d1e8:	701a      	strb	r2, [r3, #0]
		*time = 0;
 801d1ea:	6879      	ldr	r1, [r7, #4]
 801d1ec:	f04f 0200 	mov.w	r2, #0
 801d1f0:	f04f 0300 	mov.w	r3, #0
 801d1f4:	e9c1 2300 	strd	r2, r3, [r1]

		return true;
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	e01c      	b.n	801d236 <RegionRU864NextChannel+0x162>
	}
	else
	{
		if (delayTx > 0)
 801d1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d200:	2b00      	cmp	r3, #0
 801d202:	d006      	beq.n	801d212 <RegionRU864NextChannel+0x13e>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 801d204:	6879      	ldr	r1, [r7, #4]
 801d206:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801d20a:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 801d20e:	2301      	movs	r3, #1
 801d210:	e011      	b.n	801d236 <RegionRU864NextChannel+0x162>
		}
		LOG_LIB("RU864", "RegionRU864NextChannel Datarate not supported by any channel");
		vTaskDelay(100);
 801d212:	2064      	movs	r0, #100	@ 0x64
 801d214:	f7eb fad4 	bl	80087c0 <vTaskDelay>
		// Datarate not supported by any channel, restore defaults
		ChannelsMask[0] |= LC(1) + LC(2);
 801d218:	4b09      	ldr	r3, [pc, #36]	@ (801d240 <RegionRU864NextChannel+0x16c>)
 801d21a:	881b      	ldrh	r3, [r3, #0]
 801d21c:	f043 0303 	orr.w	r3, r3, #3
 801d220:	b29a      	uxth	r2, r3
 801d222:	4b07      	ldr	r3, [pc, #28]	@ (801d240 <RegionRU864NextChannel+0x16c>)
 801d224:	801a      	strh	r2, [r3, #0]
		*time = 0;
 801d226:	6879      	ldr	r1, [r7, #4]
 801d228:	f04f 0200 	mov.w	r2, #0
 801d22c:	f04f 0300 	mov.w	r3, #0
 801d230:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 801d234:	2300      	movs	r3, #0
	}
}
 801d236:	4618      	mov	r0, r3
 801d238:	3738      	adds	r7, #56	@ 0x38
 801d23a:	46bd      	mov	sp, r7
 801d23c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801d240:	20006c9c 	.word	0x20006c9c
 801d244:	20000258 	.word	0x20000258
 801d248:	200079ec 	.word	0x200079ec

0801d24c <RegionRU864ChannelAdd>:

LoRaMacStatus_t RegionRU864ChannelAdd(ChannelAddParams_t *channelAdd)
{
 801d24c:	b580      	push	{r7, lr}
 801d24e:	b084      	sub	sp, #16
 801d250:	af00      	add	r7, sp, #0
 801d252:	6078      	str	r0, [r7, #4]
	uint8_t band = 0;
 801d254:	2300      	movs	r3, #0
 801d256:	737b      	strb	r3, [r7, #13]
	bool drInvalid = false;
 801d258:	2300      	movs	r3, #0
 801d25a:	73fb      	strb	r3, [r7, #15]
	bool freqInvalid = false;
 801d25c:	2300      	movs	r3, #0
 801d25e:	73bb      	strb	r3, [r7, #14]
	uint8_t id = channelAdd->ChannelId;
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	791b      	ldrb	r3, [r3, #4]
 801d264:	733b      	strb	r3, [r7, #12]

	if (id >= RU864_MAX_NB_CHANNELS)
 801d266:	7b3b      	ldrb	r3, [r7, #12]
 801d268:	2b0f      	cmp	r3, #15
 801d26a:	d901      	bls.n	801d270 <RegionRU864ChannelAdd+0x24>
	{
		return LORAMAC_STATUS_PARAMETER_INVALID;
 801d26c:	2303      	movs	r3, #3
 801d26e:	e0a6      	b.n	801d3be <RegionRU864ChannelAdd+0x172>
	}

	// Validate the datarate range
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Min, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE) == false)
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	7a1b      	ldrb	r3, [r3, #8]
 801d276:	f343 0303 	sbfx	r3, r3, #0, #4
 801d27a:	b25b      	sxtb	r3, r3
 801d27c:	2207      	movs	r2, #7
 801d27e:	2100      	movs	r1, #0
 801d280:	4618      	mov	r0, r3
 801d282:	f7f9 f871 	bl	8016368 <RegionCommonValueInRange>
 801d286:	4603      	mov	r3, r0
 801d288:	2b00      	cmp	r3, #0
 801d28a:	d101      	bne.n	801d290 <RegionRU864ChannelAdd+0x44>
	{
		drInvalid = true;
 801d28c:	2301      	movs	r3, #1
 801d28e:	73fb      	strb	r3, [r7, #15]
	}
	if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, RU864_TX_MIN_DATARATE, RU864_TX_MAX_DATARATE) == false)
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	7a1b      	ldrb	r3, [r3, #8]
 801d296:	f343 1303 	sbfx	r3, r3, #4, #4
 801d29a:	b25b      	sxtb	r3, r3
 801d29c:	2207      	movs	r2, #7
 801d29e:	2100      	movs	r1, #0
 801d2a0:	4618      	mov	r0, r3
 801d2a2:	f7f9 f861 	bl	8016368 <RegionCommonValueInRange>
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	d101      	bne.n	801d2b0 <RegionRU864ChannelAdd+0x64>
	{
		drInvalid = true;
 801d2ac:	2301      	movs	r3, #1
 801d2ae:	73fb      	strb	r3, [r7, #15]
	}
	if (channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max)
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	681b      	ldr	r3, [r3, #0]
 801d2b4:	7a1b      	ldrb	r3, [r3, #8]
 801d2b6:	f343 0303 	sbfx	r3, r3, #0, #4
 801d2ba:	b25a      	sxtb	r2, r3
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	7a1b      	ldrb	r3, [r3, #8]
 801d2c2:	f343 1303 	sbfx	r3, r3, #4, #4
 801d2c6:	b25b      	sxtb	r3, r3
 801d2c8:	429a      	cmp	r2, r3
 801d2ca:	dd01      	ble.n	801d2d0 <RegionRU864ChannelAdd+0x84>
	{
		drInvalid = true;
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	73fb      	strb	r3, [r7, #15]
	}

	// Default channels don't accept all values
	if (id < RU864_NUMB_DEFAULT_CHANNELS)
 801d2d0:	7b3b      	ldrb	r3, [r7, #12]
 801d2d2:	2b07      	cmp	r3, #7
 801d2d4:	d828      	bhi.n	801d328 <RegionRU864ChannelAdd+0xdc>
		if (channelAdd->NewChannel->DrRange.Fields.Min != DR_2)
		{
			drInvalid = true;
		}
#else
		if (channelAdd->NewChannel->DrRange.Fields.Min > DR_0)
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	7a1b      	ldrb	r3, [r3, #8]
 801d2dc:	f343 0303 	sbfx	r3, r3, #0, #4
 801d2e0:	b25b      	sxtb	r3, r3
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	dd01      	ble.n	801d2ea <RegionRU864ChannelAdd+0x9e>
		{
			drInvalid = true;
 801d2e6:	2301      	movs	r3, #1
 801d2e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
		// Validate the datarate range for max: must be DR_5 <= Max <= TX_MAX_DATARATE
		if (RegionCommonValueInRange(channelAdd->NewChannel->DrRange.Fields.Max, DR_5, RU864_TX_MAX_DATARATE) == false)
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	7a1b      	ldrb	r3, [r3, #8]
 801d2f0:	f343 1303 	sbfx	r3, r3, #4, #4
 801d2f4:	b25b      	sxtb	r3, r3
 801d2f6:	2207      	movs	r2, #7
 801d2f8:	2105      	movs	r1, #5
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7f9 f834 	bl	8016368 <RegionCommonValueInRange>
 801d300:	4603      	mov	r3, r0
 801d302:	2b00      	cmp	r3, #0
 801d304:	d101      	bne.n	801d30a <RegionRU864ChannelAdd+0xbe>
		{
			drInvalid = true;
 801d306:	2301      	movs	r3, #1
 801d308:	73fb      	strb	r3, [r7, #15]
		}
		// We are not allowed to change the frequency
		if (channelAdd->NewChannel->Frequency != Channels[id].Frequency)
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	6819      	ldr	r1, [r3, #0]
 801d310:	7b3a      	ldrb	r2, [r7, #12]
 801d312:	482d      	ldr	r0, [pc, #180]	@ (801d3c8 <RegionRU864ChannelAdd+0x17c>)
 801d314:	4613      	mov	r3, r2
 801d316:	005b      	lsls	r3, r3, #1
 801d318:	4413      	add	r3, r2
 801d31a:	009b      	lsls	r3, r3, #2
 801d31c:	4403      	add	r3, r0
 801d31e:	681b      	ldr	r3, [r3, #0]
 801d320:	4299      	cmp	r1, r3
 801d322:	d001      	beq.n	801d328 <RegionRU864ChannelAdd+0xdc>
		{
			freqInvalid = true;
 801d324:	2301      	movs	r3, #1
 801d326:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check frequency
	if (freqInvalid == false)
 801d328:	7bbb      	ldrb	r3, [r7, #14]
 801d32a:	f083 0301 	eor.w	r3, r3, #1
 801d32e:	b2db      	uxtb	r3, r3
 801d330:	2b00      	cmp	r3, #0
 801d332:	d00d      	beq.n	801d350 <RegionRU864ChannelAdd+0x104>
	{
		if (VerifyTxFreq(channelAdd->NewChannel->Frequency) == false)
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	681b      	ldr	r3, [r3, #0]
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	4618      	mov	r0, r3
 801d33c:	f7fe feb2 	bl	801c0a4 <VerifyTxFreq>
 801d340:	4603      	mov	r3, r0
 801d342:	f083 0301 	eor.w	r3, r3, #1
 801d346:	b2db      	uxtb	r3, r3
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d001      	beq.n	801d350 <RegionRU864ChannelAdd+0x104>
		{
			freqInvalid = true;
 801d34c:	2301      	movs	r3, #1
 801d34e:	73bb      	strb	r3, [r7, #14]
		}
	}

	// Check status
	if ((drInvalid == true) && (freqInvalid == true))
 801d350:	7bfb      	ldrb	r3, [r7, #15]
 801d352:	2b00      	cmp	r3, #0
 801d354:	d004      	beq.n	801d360 <RegionRU864ChannelAdd+0x114>
 801d356:	7bbb      	ldrb	r3, [r7, #14]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d001      	beq.n	801d360 <RegionRU864ChannelAdd+0x114>
	{
		return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801d35c:	2306      	movs	r3, #6
 801d35e:	e02e      	b.n	801d3be <RegionRU864ChannelAdd+0x172>
	}
	if (drInvalid == true)
 801d360:	7bfb      	ldrb	r3, [r7, #15]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d001      	beq.n	801d36a <RegionRU864ChannelAdd+0x11e>
	{
		return LORAMAC_STATUS_DATARATE_INVALID;
 801d366:	2305      	movs	r3, #5
 801d368:	e029      	b.n	801d3be <RegionRU864ChannelAdd+0x172>
	}
	if (freqInvalid == true)
 801d36a:	7bbb      	ldrb	r3, [r7, #14]
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d001      	beq.n	801d374 <RegionRU864ChannelAdd+0x128>
	{
		return LORAMAC_STATUS_FREQUENCY_INVALID;
 801d370:	2304      	movs	r3, #4
 801d372:	e024      	b.n	801d3be <RegionRU864ChannelAdd+0x172>
	}

	memcpy(&(Channels[id]), channelAdd->NewChannel, sizeof(Channels[id]));
 801d374:	7b3a      	ldrb	r2, [r7, #12]
 801d376:	4613      	mov	r3, r2
 801d378:	005b      	lsls	r3, r3, #1
 801d37a:	4413      	add	r3, r2
 801d37c:	009b      	lsls	r3, r3, #2
 801d37e:	4a12      	ldr	r2, [pc, #72]	@ (801d3c8 <RegionRU864ChannelAdd+0x17c>)
 801d380:	1898      	adds	r0, r3, r2
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	220c      	movs	r2, #12
 801d388:	4619      	mov	r1, r3
 801d38a:	f004 ffee 	bl	802236a <memcpy>
	Channels[id].Band = band;
 801d38e:	7b3a      	ldrb	r2, [r7, #12]
 801d390:	490d      	ldr	r1, [pc, #52]	@ (801d3c8 <RegionRU864ChannelAdd+0x17c>)
 801d392:	4613      	mov	r3, r2
 801d394:	005b      	lsls	r3, r3, #1
 801d396:	4413      	add	r3, r2
 801d398:	009b      	lsls	r3, r3, #2
 801d39a:	440b      	add	r3, r1
 801d39c:	3309      	adds	r3, #9
 801d39e:	7b7a      	ldrb	r2, [r7, #13]
 801d3a0:	701a      	strb	r2, [r3, #0]
	ChannelsMask[0] |= (1 << id);
 801d3a2:	4b0a      	ldr	r3, [pc, #40]	@ (801d3cc <RegionRU864ChannelAdd+0x180>)
 801d3a4:	881b      	ldrh	r3, [r3, #0]
 801d3a6:	b21a      	sxth	r2, r3
 801d3a8:	7b3b      	ldrb	r3, [r7, #12]
 801d3aa:	2101      	movs	r1, #1
 801d3ac:	fa01 f303 	lsl.w	r3, r1, r3
 801d3b0:	b21b      	sxth	r3, r3
 801d3b2:	4313      	orrs	r3, r2
 801d3b4:	b21b      	sxth	r3, r3
 801d3b6:	b29a      	uxth	r2, r3
 801d3b8:	4b04      	ldr	r3, [pc, #16]	@ (801d3cc <RegionRU864ChannelAdd+0x180>)
 801d3ba:	801a      	strh	r2, [r3, #0]
	return LORAMAC_STATUS_OK;
 801d3bc:	2300      	movs	r3, #0
}
 801d3be:	4618      	mov	r0, r3
 801d3c0:	3710      	adds	r7, #16
 801d3c2:	46bd      	mov	sp, r7
 801d3c4:	bd80      	pop	{r7, pc}
 801d3c6:	bf00      	nop
 801d3c8:	200079ec 	.word	0x200079ec
 801d3cc:	20006c9c 	.word	0x20006c9c

0801d3d0 <RegionRU864ChannelsRemove>:

bool RegionRU864ChannelsRemove(ChannelRemoveParams_t *channelRemove)
{
 801d3d0:	b580      	push	{r7, lr}
 801d3d2:	b086      	sub	sp, #24
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
	uint8_t id = channelRemove->ChannelId;
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	781b      	ldrb	r3, [r3, #0]
 801d3dc:	75fb      	strb	r3, [r7, #23]

	if (id < RU864_NUMB_DEFAULT_CHANNELS)
 801d3de:	7dfb      	ldrb	r3, [r7, #23]
 801d3e0:	2b07      	cmp	r3, #7
 801d3e2:	d801      	bhi.n	801d3e8 <RegionRU864ChannelsRemove+0x18>
	{
		return false;
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	e012      	b.n	801d40e <RegionRU864ChannelsRemove+0x3e>
	}

	// Remove the channel from the list of channels
	Channels[id] = (ChannelParams_t){0, 0, {0}, 0};
 801d3e8:	7dfa      	ldrb	r2, [r7, #23]
 801d3ea:	490b      	ldr	r1, [pc, #44]	@ (801d418 <RegionRU864ChannelsRemove+0x48>)
 801d3ec:	4613      	mov	r3, r2
 801d3ee:	005b      	lsls	r3, r3, #1
 801d3f0:	4413      	add	r3, r2
 801d3f2:	009b      	lsls	r3, r3, #2
 801d3f4:	440b      	add	r3, r1
 801d3f6:	461a      	mov	r2, r3
 801d3f8:	2300      	movs	r3, #0
 801d3fa:	6013      	str	r3, [r2, #0]
 801d3fc:	6053      	str	r3, [r2, #4]
 801d3fe:	6093      	str	r3, [r2, #8]

	return RegionCommonChanDisable(ChannelsMask, id, RU864_MAX_NB_CHANNELS);
 801d400:	7dfb      	ldrb	r3, [r7, #23]
 801d402:	2210      	movs	r2, #16
 801d404:	4619      	mov	r1, r3
 801d406:	4805      	ldr	r0, [pc, #20]	@ (801d41c <RegionRU864ChannelsRemove+0x4c>)
 801d408:	f7f8 ffcc 	bl	80163a4 <RegionCommonChanDisable>
 801d40c:	4603      	mov	r3, r0
}
 801d40e:	4618      	mov	r0, r3
 801d410:	3718      	adds	r7, #24
 801d412:	46bd      	mov	sp, r7
 801d414:	bd80      	pop	{r7, pc}
 801d416:	bf00      	nop
 801d418:	200079ec 	.word	0x200079ec
 801d41c:	20006c9c 	.word	0x20006c9c

0801d420 <RegionRU864SetContinuousWave>:

void RegionRU864SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	b084      	sub	sp, #16
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	781b      	ldrb	r3, [r3, #0]
 801d432:	4619      	mov	r1, r3
 801d434:	4a1f      	ldr	r2, [pc, #124]	@ (801d4b4 <RegionRU864SetContinuousWave+0x94>)
 801d436:	460b      	mov	r3, r1
 801d438:	005b      	lsls	r3, r3, #1
 801d43a:	440b      	add	r3, r1
 801d43c:	009b      	lsls	r3, r3, #2
 801d43e:	4413      	add	r3, r2
 801d440:	3309      	adds	r3, #9
 801d442:	781b      	ldrb	r3, [r3, #0]
 801d444:	4a1c      	ldr	r2, [pc, #112]	@ (801d4b8 <RegionRU864SetContinuousWave+0x98>)
 801d446:	015b      	lsls	r3, r3, #5
 801d448:	4413      	add	r3, r2
 801d44a:	3302      	adds	r3, #2
 801d44c:	f993 1000 	ldrsb.w	r1, [r3]
 801d450:	687b      	ldr	r3, [r7, #4]
 801d452:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801d456:	4b19      	ldr	r3, [pc, #100]	@ (801d4bc <RegionRU864SetContinuousWave+0x9c>)
 801d458:	f7fe fe08 	bl	801c06c <LimitTxPower>
 801d45c:	4603      	mov	r3, r0
 801d45e:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 801d460:	2300      	movs	r3, #0
 801d462:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	781b      	ldrb	r3, [r3, #0]
 801d468:	4619      	mov	r1, r3
 801d46a:	4a12      	ldr	r2, [pc, #72]	@ (801d4b4 <RegionRU864SetContinuousWave+0x94>)
 801d46c:	460b      	mov	r3, r1
 801d46e:	005b      	lsls	r3, r3, #1
 801d470:	440b      	add	r3, r1
 801d472:	009b      	lsls	r3, r3, #2
 801d474:	4413      	add	r3, r2
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain);
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	edd3 7a01 	vldr	s15, [r3, #4]
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	ed93 7a02 	vldr	s14, [r3, #8]
 801d486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d48a:	eef0 0a47 	vmov.f32	s1, s14
 801d48e:	eeb0 0a67 	vmov.f32	s0, s15
 801d492:	4618      	mov	r0, r3
 801d494:	f7f9 fb1e 	bl	8016ad4 <RegionCommonComputeTxPower>
 801d498:	4603      	mov	r3, r0
 801d49a:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 801d49c:	4b08      	ldr	r3, [pc, #32]	@ (801d4c0 <RegionRU864SetContinuousWave+0xa0>)
 801d49e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d4a0:	687a      	ldr	r2, [r7, #4]
 801d4a2:	8992      	ldrh	r2, [r2, #12]
 801d4a4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801d4a8:	68b8      	ldr	r0, [r7, #8]
 801d4aa:	4798      	blx	r3
}
 801d4ac:	bf00      	nop
 801d4ae:	3710      	adds	r7, #16
 801d4b0:	46bd      	mov	sp, r7
 801d4b2:	bd80      	pop	{r7, pc}
 801d4b4:	200079ec 	.word	0x200079ec
 801d4b8:	20000258 	.word	0x20000258
 801d4bc:	20006c9c 	.word	0x20006c9c
 801d4c0:	08025450 	.word	0x08025450

0801d4c4 <RegionRU864ApplyDrOffset>:

uint8_t RegionRU864ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 801d4c4:	b480      	push	{r7}
 801d4c6:	b085      	sub	sp, #20
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	4603      	mov	r3, r0
 801d4cc:	71fb      	strb	r3, [r7, #7]
 801d4ce:	460b      	mov	r3, r1
 801d4d0:	71bb      	strb	r3, [r7, #6]
 801d4d2:	4613      	mov	r3, r2
 801d4d4:	717b      	strb	r3, [r7, #5]
	int8_t datarate = dr - drOffset;
 801d4d6:	79ba      	ldrb	r2, [r7, #6]
 801d4d8:	797b      	ldrb	r3, [r7, #5]
 801d4da:	1ad3      	subs	r3, r2, r3
 801d4dc:	b2db      	uxtb	r3, r3
 801d4de:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 801d4e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	da01      	bge.n	801d4ec <RegionRU864ApplyDrOffset+0x28>
	{
		datarate = DR_0;
 801d4e8:	2300      	movs	r3, #0
 801d4ea:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 801d4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	3714      	adds	r7, #20
 801d4f2:	46bd      	mov	sp, r7
 801d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f8:	4770      	bx	lr

0801d4fa <GetNextLowerTxDr>:
 */
extern uint16_t ChannelsDefaultMask[];

// Static functions
static int8_t GetNextLowerTxDr(int8_t dr, int8_t minDr)
{
 801d4fa:	b480      	push	{r7}
 801d4fc:	b085      	sub	sp, #20
 801d4fe:	af00      	add	r7, sp, #0
 801d500:	4603      	mov	r3, r0
 801d502:	460a      	mov	r2, r1
 801d504:	71fb      	strb	r3, [r7, #7]
 801d506:	4613      	mov	r3, r2
 801d508:	71bb      	strb	r3, [r7, #6]
	uint8_t nextLowerDr = 0;
 801d50a:	2300      	movs	r3, #0
 801d50c:	73fb      	strb	r3, [r7, #15]

	if (dr == minDr)
 801d50e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801d512:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d516:	429a      	cmp	r2, r3
 801d518:	d102      	bne.n	801d520 <GetNextLowerTxDr+0x26>
	{
		nextLowerDr = minDr;
 801d51a:	79bb      	ldrb	r3, [r7, #6]
 801d51c:	73fb      	strb	r3, [r7, #15]
 801d51e:	e002      	b.n	801d526 <GetNextLowerTxDr+0x2c>
	}
	else
	{
		nextLowerDr = dr - 1;
 801d520:	79fb      	ldrb	r3, [r7, #7]
 801d522:	3b01      	subs	r3, #1
 801d524:	73fb      	strb	r3, [r7, #15]
	}
	return nextLowerDr;
 801d526:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d52a:	4618      	mov	r0, r3
 801d52c:	3714      	adds	r7, #20
 801d52e:	46bd      	mov	sp, r7
 801d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d534:	4770      	bx	lr
	...

0801d538 <GetBandwidth>:

static uint32_t GetBandwidth(uint32_t drIndex)
{
 801d538:	b480      	push	{r7}
 801d53a:	b083      	sub	sp, #12
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	6078      	str	r0, [r7, #4]
	switch (BandwidthsUS915[drIndex])
 801d540:	4a0a      	ldr	r2, [pc, #40]	@ (801d56c <GetBandwidth+0x34>)
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d548:	4a09      	ldr	r2, [pc, #36]	@ (801d570 <GetBandwidth+0x38>)
 801d54a:	4293      	cmp	r3, r2
 801d54c:	d004      	beq.n	801d558 <GetBandwidth+0x20>
 801d54e:	4a09      	ldr	r2, [pc, #36]	@ (801d574 <GetBandwidth+0x3c>)
 801d550:	4293      	cmp	r3, r2
 801d552:	d003      	beq.n	801d55c <GetBandwidth+0x24>
	{
	default:
	case 125000:
		return 0;
 801d554:	2300      	movs	r3, #0
 801d556:	e002      	b.n	801d55e <GetBandwidth+0x26>
	case 250000:
		return 1;
 801d558:	2301      	movs	r3, #1
 801d55a:	e000      	b.n	801d55e <GetBandwidth+0x26>
	case 500000:
		return 2;
 801d55c:	2302      	movs	r3, #2
	}
}
 801d55e:	4618      	mov	r0, r3
 801d560:	370c      	adds	r7, #12
 801d562:	46bd      	mov	sp, r7
 801d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d568:	4770      	bx	lr
 801d56a:	bf00      	nop
 801d56c:	080253dc 	.word	0x080253dc
 801d570:	0003d090 	.word	0x0003d090
 801d574:	0007a120 	.word	0x0007a120

0801d578 <LimitTxPower>:

static int8_t LimitTxPower(int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t *channelsMask)
{
 801d578:	b580      	push	{r7, lr}
 801d57a:	b084      	sub	sp, #16
 801d57c:	af00      	add	r7, sp, #0
 801d57e:	603b      	str	r3, [r7, #0]
 801d580:	4603      	mov	r3, r0
 801d582:	71fb      	strb	r3, [r7, #7]
 801d584:	460b      	mov	r3, r1
 801d586:	71bb      	strb	r3, [r7, #6]
 801d588:	4613      	mov	r3, r2
 801d58a:	717b      	strb	r3, [r7, #5]
	int8_t txPowerResult = txPower;
 801d58c:	79fb      	ldrb	r3, [r7, #7]
 801d58e:	73fb      	strb	r3, [r7, #15]

	// Limit tx power to the band max
	txPowerResult = T_MAX(txPower, maxBandTxPower);
 801d590:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801d594:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801d598:	4293      	cmp	r3, r2
 801d59a:	bfb8      	it	lt
 801d59c:	4613      	movlt	r3, r2
 801d59e:	73fb      	strb	r3, [r7, #15]

	if (datarate == DR_4)
 801d5a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801d5a4:	2b04      	cmp	r3, #4
 801d5a6:	d106      	bne.n	801d5b6 <LimitTxPower+0x3e>
	{ // Limit tx power to max 26dBm
		txPowerResult = T_MAX(txPower, TX_POWER_2);
 801d5a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d5ac:	2b02      	cmp	r3, #2
 801d5ae:	bfb8      	it	lt
 801d5b0:	2302      	movlt	r3, #2
 801d5b2:	73fb      	strb	r3, [r7, #15]
 801d5b4:	e00d      	b.n	801d5d2 <LimitTxPower+0x5a>
	}
	else
	{
		if (RegionCommonCountChannels(channelsMask, 0, 4) < 50)
 801d5b6:	2204      	movs	r2, #4
 801d5b8:	2100      	movs	r1, #0
 801d5ba:	6838      	ldr	r0, [r7, #0]
 801d5bc:	f7f8 ff27 	bl	801640e <RegionCommonCountChannels>
 801d5c0:	4603      	mov	r3, r0
 801d5c2:	2b31      	cmp	r3, #49	@ 0x31
 801d5c4:	d805      	bhi.n	801d5d2 <LimitTxPower+0x5a>
		{ // Limit tx power to max 21dBm
			txPowerResult = T_MAX(txPower, TX_POWER_5);
 801d5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d5ca:	2b05      	cmp	r3, #5
 801d5cc:	bfb8      	it	lt
 801d5ce:	2305      	movlt	r3, #5
 801d5d0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return txPowerResult;
 801d5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	3710      	adds	r7, #16
 801d5da:	46bd      	mov	sp, r7
 801d5dc:	bd80      	pop	{r7, pc}

0801d5de <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels(uint8_t datarate, uint16_t *channelsMask, ChannelParams_t *channels, Band_t *bands, uint8_t *enabledChannels, uint8_t *delayTx)
{
 801d5de:	b580      	push	{r7, lr}
 801d5e0:	b086      	sub	sp, #24
 801d5e2:	af00      	add	r7, sp, #0
 801d5e4:	60b9      	str	r1, [r7, #8]
 801d5e6:	607a      	str	r2, [r7, #4]
 801d5e8:	603b      	str	r3, [r7, #0]
 801d5ea:	4603      	mov	r3, r0
 801d5ec:	73fb      	strb	r3, [r7, #15]
	uint8_t nbEnabledChannels = 0;
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	75fb      	strb	r3, [r7, #23]
	uint8_t delayTransmission = 0;
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i = 0, k = 0; i < US915_MAX_NB_CHANNELS; i += 16, k++)
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	757b      	strb	r3, [r7, #21]
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	753b      	strb	r3, [r7, #20]
 801d5fe:	e076      	b.n	801d6ee <CountNbOfEnabledChannels+0x110>
	{
		for (uint8_t j = 0; j < 16; j++)
 801d600:	2300      	movs	r3, #0
 801d602:	74fb      	strb	r3, [r7, #19]
 801d604:	e06a      	b.n	801d6dc <CountNbOfEnabledChannels+0xfe>
		{
			if ((channelsMask[k] & (1 << j)) != 0)
 801d606:	7d3b      	ldrb	r3, [r7, #20]
 801d608:	005b      	lsls	r3, r3, #1
 801d60a:	68ba      	ldr	r2, [r7, #8]
 801d60c:	4413      	add	r3, r2
 801d60e:	881b      	ldrh	r3, [r3, #0]
 801d610:	461a      	mov	r2, r3
 801d612:	7cfb      	ldrb	r3, [r7, #19]
 801d614:	fa42 f303 	asr.w	r3, r2, r3
 801d618:	f003 0301 	and.w	r3, r3, #1
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d05a      	beq.n	801d6d6 <CountNbOfEnabledChannels+0xf8>
			{
				if (channels[i + j].Frequency == 0)
 801d620:	7d7a      	ldrb	r2, [r7, #21]
 801d622:	7cfb      	ldrb	r3, [r7, #19]
 801d624:	4413      	add	r3, r2
 801d626:	461a      	mov	r2, r3
 801d628:	4613      	mov	r3, r2
 801d62a:	005b      	lsls	r3, r3, #1
 801d62c:	4413      	add	r3, r2
 801d62e:	009b      	lsls	r3, r3, #2
 801d630:	461a      	mov	r2, r3
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	4413      	add	r3, r2
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d049      	beq.n	801d6d0 <CountNbOfEnabledChannels+0xf2>
				{ // Check if the channel is enabled
					continue;
				}
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 801d63c:	f997 000f 	ldrsb.w	r0, [r7, #15]
 801d640:	7d7a      	ldrb	r2, [r7, #21]
 801d642:	7cfb      	ldrb	r3, [r7, #19]
 801d644:	4413      	add	r3, r2
 801d646:	461a      	mov	r2, r3
 801d648:	4613      	mov	r3, r2
 801d64a:	005b      	lsls	r3, r3, #1
 801d64c:	4413      	add	r3, r2
 801d64e:	009b      	lsls	r3, r3, #2
 801d650:	461a      	mov	r2, r3
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	4413      	add	r3, r2
 801d656:	7a1b      	ldrb	r3, [r3, #8]
 801d658:	f343 0303 	sbfx	r3, r3, #0, #4
 801d65c:	b25b      	sxtb	r3, r3
 801d65e:	4619      	mov	r1, r3
											 channels[i + j].DrRange.Fields.Max) == false)
 801d660:	7d7a      	ldrb	r2, [r7, #21]
 801d662:	7cfb      	ldrb	r3, [r7, #19]
 801d664:	4413      	add	r3, r2
 801d666:	461a      	mov	r2, r3
 801d668:	4613      	mov	r3, r2
 801d66a:	005b      	lsls	r3, r3, #1
 801d66c:	4413      	add	r3, r2
 801d66e:	009b      	lsls	r3, r3, #2
 801d670:	461a      	mov	r2, r3
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	4413      	add	r3, r2
 801d676:	7a1b      	ldrb	r3, [r3, #8]
 801d678:	f343 1303 	sbfx	r3, r3, #4, #4
 801d67c:	b25b      	sxtb	r3, r3
				if (RegionCommonValueInRange(datarate, channels[i + j].DrRange.Fields.Min,
 801d67e:	461a      	mov	r2, r3
 801d680:	f7f8 fe72 	bl	8016368 <RegionCommonValueInRange>
 801d684:	4603      	mov	r3, r0
 801d686:	2b00      	cmp	r3, #0
 801d688:	d024      	beq.n	801d6d4 <CountNbOfEnabledChannels+0xf6>
				{ // Check if the current channel selection supports the given datarate
					continue;
				}
				if (bands[channels[i + j].Band].TimeOff > 0)
 801d68a:	7d7a      	ldrb	r2, [r7, #21]
 801d68c:	7cfb      	ldrb	r3, [r7, #19]
 801d68e:	4413      	add	r3, r2
 801d690:	461a      	mov	r2, r3
 801d692:	4613      	mov	r3, r2
 801d694:	005b      	lsls	r3, r3, #1
 801d696:	4413      	add	r3, r2
 801d698:	009b      	lsls	r3, r3, #2
 801d69a:	461a      	mov	r2, r3
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	4413      	add	r3, r2
 801d6a0:	7a5b      	ldrb	r3, [r3, #9]
 801d6a2:	015b      	lsls	r3, r3, #5
 801d6a4:	683a      	ldr	r2, [r7, #0]
 801d6a6:	4413      	add	r3, r2
 801d6a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801d6ac:	4313      	orrs	r3, r2
 801d6ae:	d003      	beq.n	801d6b8 <CountNbOfEnabledChannels+0xda>
				{ // Check if the band is available for transmission
					delayTransmission++;
 801d6b0:	7dbb      	ldrb	r3, [r7, #22]
 801d6b2:	3301      	adds	r3, #1
 801d6b4:	75bb      	strb	r3, [r7, #22]
					continue;
 801d6b6:	e00e      	b.n	801d6d6 <CountNbOfEnabledChannels+0xf8>
				}
				enabledChannels[nbEnabledChannels++] = i + j;
 801d6b8:	7dfb      	ldrb	r3, [r7, #23]
 801d6ba:	1c5a      	adds	r2, r3, #1
 801d6bc:	75fa      	strb	r2, [r7, #23]
 801d6be:	461a      	mov	r2, r3
 801d6c0:	6a3b      	ldr	r3, [r7, #32]
 801d6c2:	4413      	add	r3, r2
 801d6c4:	7d79      	ldrb	r1, [r7, #21]
 801d6c6:	7cfa      	ldrb	r2, [r7, #19]
 801d6c8:	440a      	add	r2, r1
 801d6ca:	b2d2      	uxtb	r2, r2
 801d6cc:	701a      	strb	r2, [r3, #0]
 801d6ce:	e002      	b.n	801d6d6 <CountNbOfEnabledChannels+0xf8>
					continue;
 801d6d0:	bf00      	nop
 801d6d2:	e000      	b.n	801d6d6 <CountNbOfEnabledChannels+0xf8>
					continue;
 801d6d4:	bf00      	nop
		for (uint8_t j = 0; j < 16; j++)
 801d6d6:	7cfb      	ldrb	r3, [r7, #19]
 801d6d8:	3301      	adds	r3, #1
 801d6da:	74fb      	strb	r3, [r7, #19]
 801d6dc:	7cfb      	ldrb	r3, [r7, #19]
 801d6de:	2b0f      	cmp	r3, #15
 801d6e0:	d991      	bls.n	801d606 <CountNbOfEnabledChannels+0x28>
	for (uint8_t i = 0, k = 0; i < US915_MAX_NB_CHANNELS; i += 16, k++)
 801d6e2:	7d7b      	ldrb	r3, [r7, #21]
 801d6e4:	3310      	adds	r3, #16
 801d6e6:	757b      	strb	r3, [r7, #21]
 801d6e8:	7d3b      	ldrb	r3, [r7, #20]
 801d6ea:	3301      	adds	r3, #1
 801d6ec:	753b      	strb	r3, [r7, #20]
 801d6ee:	7d7b      	ldrb	r3, [r7, #21]
 801d6f0:	2b47      	cmp	r3, #71	@ 0x47
 801d6f2:	d985      	bls.n	801d600 <CountNbOfEnabledChannels+0x22>
			}
		}
	}

	*delayTx = delayTransmission;
 801d6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6f6:	7dba      	ldrb	r2, [r7, #22]
 801d6f8:	701a      	strb	r2, [r3, #0]
	return nbEnabledChannels;
 801d6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 801d6fc:	4618      	mov	r0, r3
 801d6fe:	3718      	adds	r7, #24
 801d700:	46bd      	mov	sp, r7
 801d702:	bd80      	pop	{r7, pc}

0801d704 <RegionUS915GetPhyParam>:

PhyParam_t RegionUS915GetPhyParam(GetPhyParams_t *getPhy)
{
 801d704:	b580      	push	{r7, lr}
 801d706:	b084      	sub	sp, #16
 801d708:	af00      	add	r7, sp, #0
 801d70a:	6078      	str	r0, [r7, #4]
	PhyParam_t phyParam = {0};
 801d70c:	2300      	movs	r3, #0
 801d70e:	60fb      	str	r3, [r7, #12]

	switch (getPhy->Attribute)
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	781b      	ldrb	r3, [r3, #0]
 801d714:	2b20      	cmp	r3, #32
 801d716:	f200 80af 	bhi.w	801d878 <RegionUS915GetPhyParam+0x174>
 801d71a:	a201      	add	r2, pc, #4	@ (adr r2, 801d720 <RegionUS915GetPhyParam+0x1c>)
 801d71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d720:	0801d7a5 	.word	0x0801d7a5
 801d724:	0801d7ab 	.word	0x0801d7ab
 801d728:	0801d879 	.word	0x0801d879
 801d72c:	0801d879 	.word	0x0801d879
 801d730:	0801d879 	.word	0x0801d879
 801d734:	0801d7b1 	.word	0x0801d7b1
 801d738:	0801d879 	.word	0x0801d879
 801d73c:	0801d879 	.word	0x0801d879
 801d740:	0801d7cb 	.word	0x0801d7cb
 801d744:	0801d7d1 	.word	0x0801d7d1
 801d748:	0801d7e1 	.word	0x0801d7e1
 801d74c:	0801d7f1 	.word	0x0801d7f1
 801d750:	0801d7f7 	.word	0x0801d7f7
 801d754:	0801d7ff 	.word	0x0801d7ff
 801d758:	0801d807 	.word	0x0801d807
 801d75c:	0801d80f 	.word	0x0801d80f
 801d760:	0801d817 	.word	0x0801d817
 801d764:	0801d81f 	.word	0x0801d81f
 801d768:	0801d827 	.word	0x0801d827
 801d76c:	0801d83b 	.word	0x0801d83b
 801d770:	0801d841 	.word	0x0801d841
 801d774:	0801d847 	.word	0x0801d847
 801d778:	0801d84d 	.word	0x0801d84d
 801d77c:	0801d853 	.word	0x0801d853
 801d780:	0801d859 	.word	0x0801d859
 801d784:	0801d85f 	.word	0x0801d85f
 801d788:	0801d865 	.word	0x0801d865
 801d78c:	0801d865 	.word	0x0801d865
 801d790:	0801d86b 	.word	0x0801d86b
 801d794:	0801d86b 	.word	0x0801d86b
 801d798:	0801d873 	.word	0x0801d873
 801d79c:	0801d873 	.word	0x0801d873
 801d7a0:	0801d7b7 	.word	0x0801d7b7
	{
	case PHY_MIN_RX_DR:
	{
		phyParam.Value = US915_RX_MIN_DATARATE;
 801d7a4:	2308      	movs	r3, #8
 801d7a6:	60fb      	str	r3, [r7, #12]
		break;
 801d7a8:	e067      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_MIN_TX_DR:
	{
		phyParam.Value = US915_TX_MIN_DATARATE;
 801d7aa:	2300      	movs	r3, #0
 801d7ac:	60fb      	str	r3, [r7, #12]
		break;
 801d7ae:	e064      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DEF_TX_DR:
	{
		phyParam.Value = US915_DEFAULT_DATARATE;
 801d7b0:	2300      	movs	r3, #0
 801d7b2:	60fb      	str	r3, [r7, #12]
		break;
 801d7b4:	e061      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_NEXT_LOWER_TX_DR:
	{
		phyParam.Value = GetNextLowerTxDr(getPhy->Datarate, US915_TX_MIN_DATARATE);
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d7bc:	2100      	movs	r1, #0
 801d7be:	4618      	mov	r0, r3
 801d7c0:	f7ff fe9b 	bl	801d4fa <GetNextLowerTxDr>
 801d7c4:	4603      	mov	r3, r0
 801d7c6:	60fb      	str	r3, [r7, #12]
		break;
 801d7c8:	e057      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DEF_TX_POWER:
	{
		phyParam.Value = US915_DEFAULT_TX_POWER;
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	60fb      	str	r3, [r7, #12]
		break;
 801d7ce:	e054      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_MAX_PAYLOAD:
	{
		phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d7d6:	461a      	mov	r2, r3
 801d7d8:	4b2a      	ldr	r3, [pc, #168]	@ (801d884 <RegionUS915GetPhyParam+0x180>)
 801d7da:	5c9b      	ldrb	r3, [r3, r2]
 801d7dc:	60fb      	str	r3, [r7, #12]
		break;
 801d7de:	e04c      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_MAX_PAYLOAD_REPEATER:
	{
		phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801d7e6:	461a      	mov	r2, r3
 801d7e8:	4b27      	ldr	r3, [pc, #156]	@ (801d888 <RegionUS915GetPhyParam+0x184>)
 801d7ea:	5c9b      	ldrb	r3, [r3, r2]
 801d7ec:	60fb      	str	r3, [r7, #12]
		break;
 801d7ee:	e044      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DUTY_CYCLE:
	{
		phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801d7f0:	2300      	movs	r3, #0
 801d7f2:	60fb      	str	r3, [r7, #12]
		break;
 801d7f4:	e041      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_MAX_RX_WINDOW:
	{
		phyParam.Value = US915_MAX_RX_WINDOW;
 801d7f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 801d7fa:	60fb      	str	r3, [r7, #12]
		break;
 801d7fc:	e03d      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_RECEIVE_DELAY1:
	{
		phyParam.Value = US915_RECEIVE_DELAY1;
 801d7fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d802:	60fb      	str	r3, [r7, #12]
		break;
 801d804:	e039      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_RECEIVE_DELAY2:
	{
		phyParam.Value = US915_RECEIVE_DELAY2;
 801d806:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801d80a:	60fb      	str	r3, [r7, #12]
		break;
 801d80c:	e035      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_JOIN_ACCEPT_DELAY1:
	{
		phyParam.Value = US915_JOIN_ACCEPT_DELAY1;
 801d80e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801d812:	60fb      	str	r3, [r7, #12]
		break;
 801d814:	e031      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_JOIN_ACCEPT_DELAY2:
	{
		phyParam.Value = US915_JOIN_ACCEPT_DELAY2;
 801d816:	f241 7370 	movw	r3, #6000	@ 0x1770
 801d81a:	60fb      	str	r3, [r7, #12]
		break;
 801d81c:	e02d      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_MAX_FCNT_GAP:
	{
		phyParam.Value = US915_MAX_FCNT_GAP;
 801d81e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801d822:	60fb      	str	r3, [r7, #12]
		break;
 801d824:	e029      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_ACK_TIMEOUT:
	{
		phyParam.Value = (US915_ACKTIMEOUT + randr(-US915_ACK_TIMEOUT_RND, US915_ACK_TIMEOUT_RND));
 801d826:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d82a:	4818      	ldr	r0, [pc, #96]	@ (801d88c <RegionUS915GetPhyParam+0x188>)
 801d82c:	f003 f9a2 	bl	8020b74 <randr>
 801d830:	4603      	mov	r3, r0
 801d832:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801d836:	60fb      	str	r3, [r7, #12]
		break;
 801d838:	e01f      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DEF_DR1_OFFSET:
	{
		phyParam.Value = US915_DEFAULT_RX1_DR_OFFSET;
 801d83a:	2300      	movs	r3, #0
 801d83c:	60fb      	str	r3, [r7, #12]
		break;
 801d83e:	e01c      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DEF_RX2_FREQUENCY:
	{
		phyParam.Value = US915_RX_WND_2_FREQ;
 801d840:	4b13      	ldr	r3, [pc, #76]	@ (801d890 <RegionUS915GetPhyParam+0x18c>)
 801d842:	60fb      	str	r3, [r7, #12]
		break;
 801d844:	e019      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DEF_RX2_DR:
	{
		phyParam.Value = US915_RX_WND_2_DR;
 801d846:	2308      	movs	r3, #8
 801d848:	60fb      	str	r3, [r7, #12]
		break;
 801d84a:	e016      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_CHANNELS_MASK:
	{
		phyParam.ChannelsMask = ChannelsMask;
 801d84c:	4b11      	ldr	r3, [pc, #68]	@ (801d894 <RegionUS915GetPhyParam+0x190>)
 801d84e:	60fb      	str	r3, [r7, #12]
		break;
 801d850:	e013      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_CHANNELS_DEFAULT_MASK:
	{
		phyParam.ChannelsMask = ChannelsDefaultMask;
 801d852:	4b11      	ldr	r3, [pc, #68]	@ (801d898 <RegionUS915GetPhyParam+0x194>)
 801d854:	60fb      	str	r3, [r7, #12]
		break;
 801d856:	e010      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_MAX_NB_CHANNELS:
	{
		phyParam.Value = US915_MAX_NB_CHANNELS;
 801d858:	2348      	movs	r3, #72	@ 0x48
 801d85a:	60fb      	str	r3, [r7, #12]
		break;
 801d85c:	e00d      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_CHANNELS:
	{
		phyParam.Channels = Channels;
 801d85e:	4b0f      	ldr	r3, [pc, #60]	@ (801d89c <RegionUS915GetPhyParam+0x198>)
 801d860:	60fb      	str	r3, [r7, #12]
		break;
 801d862:	e00a      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DEF_UPLINK_DWELL_TIME:
	case PHY_DEF_DOWNLINK_DWELL_TIME:
	{
		phyParam.Value = 0;
 801d864:	2300      	movs	r3, #0
 801d866:	60fb      	str	r3, [r7, #12]
		break;
 801d868:	e007      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_DEF_MAX_EIRP:
	case PHY_DEF_ANTENNA_GAIN:
	{
		phyParam.fValue = 0;
 801d86a:	f04f 0300 	mov.w	r3, #0
 801d86e:	60fb      	str	r3, [r7, #12]
		break;
 801d870:	e003      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	case PHY_NB_JOIN_TRIALS:
	case PHY_DEF_NB_JOIN_TRIALS:
	{
		phyParam.Value = 2;
 801d872:	2302      	movs	r3, #2
 801d874:	60fb      	str	r3, [r7, #12]
		break;
 801d876:	e000      	b.n	801d87a <RegionUS915GetPhyParam+0x176>
	}
	default:
	{
		break;
 801d878:	bf00      	nop
	}
	}

	return phyParam;
 801d87a:	68fb      	ldr	r3, [r7, #12]
}
 801d87c:	4618      	mov	r0, r3
 801d87e:	3710      	adds	r7, #16
 801d880:	46bd      	mov	sp, r7
 801d882:	bd80      	pop	{r7, pc}
 801d884:	08025430 	.word	0x08025430
 801d888:	08025440 	.word	0x08025440
 801d88c:	fffffc18 	.word	0xfffffc18
 801d890:	370870a0 	.word	0x370870a0
 801d894:	20006c9c 	.word	0x20006c9c
 801d898:	20006ca8 	.word	0x20006ca8
 801d89c:	20007aac 	.word	0x20007aac

0801d8a0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone(SetBandTxDoneParams_t *txDone)
{
 801d8a0:	b580      	push	{r7, lr}
 801d8a2:	b082      	sub	sp, #8
 801d8a4:	af00      	add	r7, sp, #0
 801d8a6:	6078      	str	r0, [r7, #4]
	RegionCommonSetBandTxDone(txDone->Joined, &Bands[Channels[txDone->Channel].Band], txDone->LastTxDoneTime);
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	7858      	ldrb	r0, [r3, #1]
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	781b      	ldrb	r3, [r3, #0]
 801d8b0:	4619      	mov	r1, r3
 801d8b2:	4a0a      	ldr	r2, [pc, #40]	@ (801d8dc <RegionUS915SetBandTxDone+0x3c>)
 801d8b4:	460b      	mov	r3, r1
 801d8b6:	005b      	lsls	r3, r3, #1
 801d8b8:	440b      	add	r3, r1
 801d8ba:	009b      	lsls	r3, r3, #2
 801d8bc:	4413      	add	r3, r2
 801d8be:	3309      	adds	r3, #9
 801d8c0:	781b      	ldrb	r3, [r3, #0]
 801d8c2:	015b      	lsls	r3, r3, #5
 801d8c4:	4a06      	ldr	r2, [pc, #24]	@ (801d8e0 <RegionUS915SetBandTxDone+0x40>)
 801d8c6:	1899      	adds	r1, r3, r2
 801d8c8:	687b      	ldr	r3, [r7, #4]
 801d8ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801d8ce:	f7f8 fdf1 	bl	80164b4 <RegionCommonSetBandTxDone>
}
 801d8d2:	bf00      	nop
 801d8d4:	3708      	adds	r7, #8
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bd80      	pop	{r7, pc}
 801d8da:	bf00      	nop
 801d8dc:	20007aac 	.word	0x20007aac
 801d8e0:	20000278 	.word	0x20000278

0801d8e4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults(InitType_t type)
{
 801d8e4:	b580      	push	{r7, lr}
 801d8e6:	b084      	sub	sp, #16
 801d8e8:	af00      	add	r7, sp, #0
 801d8ea:	4603      	mov	r3, r0
 801d8ec:	71fb      	strb	r3, [r7, #7]
	switch (type)
 801d8ee:	79fb      	ldrb	r3, [r7, #7]
 801d8f0:	2b02      	cmp	r3, #2
 801d8f2:	f000 809f 	beq.w	801da34 <RegionUS915InitDefaults+0x150>
 801d8f6:	2b02      	cmp	r3, #2
 801d8f8:	f300 80a7 	bgt.w	801da4a <RegionUS915InitDefaults+0x166>
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	d002      	beq.n	801d906 <RegionUS915InitDefaults+0x22>
 801d900:	2b01      	cmp	r3, #1
 801d902:	d07a      	beq.n	801d9fa <RegionUS915InitDefaults+0x116>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 6);
		break;
	}
	default:
	{
		break;
 801d904:	e0a1      	b.n	801da4a <RegionUS915InitDefaults+0x166>
		for (uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++)
 801d906:	2300      	movs	r3, #0
 801d908:	73fb      	strb	r3, [r7, #15]
 801d90a:	e025      	b.n	801d958 <RegionUS915InitDefaults+0x74>
			Channels[i].Frequency = 902300000 + i * 200000;
 801d90c:	7bfb      	ldrb	r3, [r7, #15]
 801d90e:	4a51      	ldr	r2, [pc, #324]	@ (801da54 <RegionUS915InitDefaults+0x170>)
 801d910:	fb03 f202 	mul.w	r2, r3, r2
 801d914:	4b50      	ldr	r3, [pc, #320]	@ (801da58 <RegionUS915InitDefaults+0x174>)
 801d916:	4413      	add	r3, r2
 801d918:	7bfa      	ldrb	r2, [r7, #15]
 801d91a:	4618      	mov	r0, r3
 801d91c:	494f      	ldr	r1, [pc, #316]	@ (801da5c <RegionUS915InitDefaults+0x178>)
 801d91e:	4613      	mov	r3, r2
 801d920:	005b      	lsls	r3, r3, #1
 801d922:	4413      	add	r3, r2
 801d924:	009b      	lsls	r3, r3, #2
 801d926:	440b      	add	r3, r1
 801d928:	6018      	str	r0, [r3, #0]
			Channels[i].DrRange.Value = (DR_3 << 4) | DR_0;
 801d92a:	7bfa      	ldrb	r2, [r7, #15]
 801d92c:	494b      	ldr	r1, [pc, #300]	@ (801da5c <RegionUS915InitDefaults+0x178>)
 801d92e:	4613      	mov	r3, r2
 801d930:	005b      	lsls	r3, r3, #1
 801d932:	4413      	add	r3, r2
 801d934:	009b      	lsls	r3, r3, #2
 801d936:	440b      	add	r3, r1
 801d938:	3308      	adds	r3, #8
 801d93a:	2230      	movs	r2, #48	@ 0x30
 801d93c:	701a      	strb	r2, [r3, #0]
			Channels[i].Band = 0;
 801d93e:	7bfa      	ldrb	r2, [r7, #15]
 801d940:	4946      	ldr	r1, [pc, #280]	@ (801da5c <RegionUS915InitDefaults+0x178>)
 801d942:	4613      	mov	r3, r2
 801d944:	005b      	lsls	r3, r3, #1
 801d946:	4413      	add	r3, r2
 801d948:	009b      	lsls	r3, r3, #2
 801d94a:	440b      	add	r3, r1
 801d94c:	3309      	adds	r3, #9
 801d94e:	2200      	movs	r2, #0
 801d950:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++)
 801d952:	7bfb      	ldrb	r3, [r7, #15]
 801d954:	3301      	adds	r3, #1
 801d956:	73fb      	strb	r3, [r7, #15]
 801d958:	7bfb      	ldrb	r3, [r7, #15]
 801d95a:	2b3f      	cmp	r3, #63	@ 0x3f
 801d95c:	d9d6      	bls.n	801d90c <RegionUS915InitDefaults+0x28>
		for (uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++)
 801d95e:	2340      	movs	r3, #64	@ 0x40
 801d960:	73bb      	strb	r3, [r7, #14]
 801d962:	e026      	b.n	801d9b2 <RegionUS915InitDefaults+0xce>
			Channels[i].Frequency = 903000000 + (i - (US915_MAX_NB_CHANNELS - 8)) * 1600000;
 801d964:	7bbb      	ldrb	r3, [r7, #14]
 801d966:	3b40      	subs	r3, #64	@ 0x40
 801d968:	4a3d      	ldr	r2, [pc, #244]	@ (801da60 <RegionUS915InitDefaults+0x17c>)
 801d96a:	fb03 f202 	mul.w	r2, r3, r2
 801d96e:	4b3d      	ldr	r3, [pc, #244]	@ (801da64 <RegionUS915InitDefaults+0x180>)
 801d970:	4413      	add	r3, r2
 801d972:	7bba      	ldrb	r2, [r7, #14]
 801d974:	4618      	mov	r0, r3
 801d976:	4939      	ldr	r1, [pc, #228]	@ (801da5c <RegionUS915InitDefaults+0x178>)
 801d978:	4613      	mov	r3, r2
 801d97a:	005b      	lsls	r3, r3, #1
 801d97c:	4413      	add	r3, r2
 801d97e:	009b      	lsls	r3, r3, #2
 801d980:	440b      	add	r3, r1
 801d982:	6018      	str	r0, [r3, #0]
			Channels[i].DrRange.Value = (DR_4 << 4) | DR_4;
 801d984:	7bba      	ldrb	r2, [r7, #14]
 801d986:	4935      	ldr	r1, [pc, #212]	@ (801da5c <RegionUS915InitDefaults+0x178>)
 801d988:	4613      	mov	r3, r2
 801d98a:	005b      	lsls	r3, r3, #1
 801d98c:	4413      	add	r3, r2
 801d98e:	009b      	lsls	r3, r3, #2
 801d990:	440b      	add	r3, r1
 801d992:	3308      	adds	r3, #8
 801d994:	2244      	movs	r2, #68	@ 0x44
 801d996:	701a      	strb	r2, [r3, #0]
			Channels[i].Band = 0;
 801d998:	7bba      	ldrb	r2, [r7, #14]
 801d99a:	4930      	ldr	r1, [pc, #192]	@ (801da5c <RegionUS915InitDefaults+0x178>)
 801d99c:	4613      	mov	r3, r2
 801d99e:	005b      	lsls	r3, r3, #1
 801d9a0:	4413      	add	r3, r2
 801d9a2:	009b      	lsls	r3, r3, #2
 801d9a4:	440b      	add	r3, r1
 801d9a6:	3309      	adds	r3, #9
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++)
 801d9ac:	7bbb      	ldrb	r3, [r7, #14]
 801d9ae:	3301      	adds	r3, #1
 801d9b0:	73bb      	strb	r3, [r7, #14]
 801d9b2:	7bbb      	ldrb	r3, [r7, #14]
 801d9b4:	2b47      	cmp	r3, #71	@ 0x47
 801d9b6:	d9d5      	bls.n	801d964 <RegionUS915InitDefaults+0x80>
		ChannelsDefaultMask[0] = 0xFFFF;
 801d9b8:	4b2b      	ldr	r3, [pc, #172]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d9be:	801a      	strh	r2, [r3, #0]
		ChannelsDefaultMask[1] = 0xFFFF;
 801d9c0:	4b29      	ldr	r3, [pc, #164]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d9c6:	805a      	strh	r2, [r3, #2]
		ChannelsDefaultMask[2] = 0xFFFF;
 801d9c8:	4b27      	ldr	r3, [pc, #156]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d9ce:	809a      	strh	r2, [r3, #4]
		ChannelsDefaultMask[3] = 0xFFFF;
 801d9d0:	4b25      	ldr	r3, [pc, #148]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d9d6:	80da      	strh	r2, [r3, #6]
		ChannelsDefaultMask[4] = 0x00FF;
 801d9d8:	4b23      	ldr	r3, [pc, #140]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9da:	22ff      	movs	r2, #255	@ 0xff
 801d9dc:	811a      	strh	r2, [r3, #8]
		ChannelsDefaultMask[5] = 0x0000;
 801d9de:	4b22      	ldr	r3, [pc, #136]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9e0:	2200      	movs	r2, #0
 801d9e2:	815a      	strh	r2, [r3, #10]
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 801d9e4:	2206      	movs	r2, #6
 801d9e6:	4920      	ldr	r1, [pc, #128]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9e8:	4820      	ldr	r0, [pc, #128]	@ (801da6c <RegionUS915InitDefaults+0x188>)
 801d9ea:	f7f8 fd3c 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 6);
 801d9ee:	2206      	movs	r2, #6
 801d9f0:	491e      	ldr	r1, [pc, #120]	@ (801da6c <RegionUS915InitDefaults+0x188>)
 801d9f2:	481f      	ldr	r0, [pc, #124]	@ (801da70 <RegionUS915InitDefaults+0x18c>)
 801d9f4:	f7f8 fd37 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801d9f8:	e028      	b.n	801da4c <RegionUS915InitDefaults+0x168>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 801d9fa:	2206      	movs	r2, #6
 801d9fc:	491a      	ldr	r1, [pc, #104]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801d9fe:	481b      	ldr	r0, [pc, #108]	@ (801da6c <RegionUS915InitDefaults+0x188>)
 801da00:	f7f8 fd31 	bl	8016466 <RegionCommonChanMaskCopy>
		for (uint8_t i = 0; i < 6; i++)
 801da04:	2300      	movs	r3, #0
 801da06:	737b      	strb	r3, [r7, #13]
 801da08:	e010      	b.n	801da2c <RegionUS915InitDefaults+0x148>
			ChannelsMaskRemaining[i] &= ChannelsMask[i];
 801da0a:	7b7b      	ldrb	r3, [r7, #13]
 801da0c:	4a18      	ldr	r2, [pc, #96]	@ (801da70 <RegionUS915InitDefaults+0x18c>)
 801da0e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801da12:	7b7b      	ldrb	r3, [r7, #13]
 801da14:	4a15      	ldr	r2, [pc, #84]	@ (801da6c <RegionUS915InitDefaults+0x188>)
 801da16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801da1a:	7b7b      	ldrb	r3, [r7, #13]
 801da1c:	400a      	ands	r2, r1
 801da1e:	b291      	uxth	r1, r2
 801da20:	4a13      	ldr	r2, [pc, #76]	@ (801da70 <RegionUS915InitDefaults+0x18c>)
 801da22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 6; i++)
 801da26:	7b7b      	ldrb	r3, [r7, #13]
 801da28:	3301      	adds	r3, #1
 801da2a:	737b      	strb	r3, [r7, #13]
 801da2c:	7b7b      	ldrb	r3, [r7, #13]
 801da2e:	2b05      	cmp	r3, #5
 801da30:	d9eb      	bls.n	801da0a <RegionUS915InitDefaults+0x126>
		break;
 801da32:	e00b      	b.n	801da4c <RegionUS915InitDefaults+0x168>
		RegionCommonChanMaskCopy(ChannelsMask, ChannelsDefaultMask, 6);
 801da34:	2206      	movs	r2, #6
 801da36:	490c      	ldr	r1, [pc, #48]	@ (801da68 <RegionUS915InitDefaults+0x184>)
 801da38:	480c      	ldr	r0, [pc, #48]	@ (801da6c <RegionUS915InitDefaults+0x188>)
 801da3a:	f7f8 fd14 	bl	8016466 <RegionCommonChanMaskCopy>
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 6);
 801da3e:	2206      	movs	r2, #6
 801da40:	490a      	ldr	r1, [pc, #40]	@ (801da6c <RegionUS915InitDefaults+0x188>)
 801da42:	480b      	ldr	r0, [pc, #44]	@ (801da70 <RegionUS915InitDefaults+0x18c>)
 801da44:	f7f8 fd0f 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801da48:	e000      	b.n	801da4c <RegionUS915InitDefaults+0x168>
		break;
 801da4a:	bf00      	nop
	}
	}
}
 801da4c:	bf00      	nop
 801da4e:	3710      	adds	r7, #16
 801da50:	46bd      	mov	sp, r7
 801da52:	bd80      	pop	{r7, pc}
 801da54:	00030d40 	.word	0x00030d40
 801da58:	35c80160 	.word	0x35c80160
 801da5c:	20007aac 	.word	0x20007aac
 801da60:	00186a00 	.word	0x00186a00
 801da64:	35d2afc0 	.word	0x35d2afc0
 801da68:	20006ca8 	.word	0x20006ca8
 801da6c:	20006c9c 	.word	0x20006c9c
 801da70:	20006cb4 	.word	0x20006cb4

0801da74 <RegionUS915Verify>:

bool RegionUS915Verify(VerifyParams_t *verify, PhyAttribute_t phyAttribute)
{
 801da74:	b580      	push	{r7, lr}
 801da76:	b082      	sub	sp, #8
 801da78:	af00      	add	r7, sp, #0
 801da7a:	6078      	str	r0, [r7, #4]
 801da7c:	460b      	mov	r3, r1
 801da7e:	70fb      	strb	r3, [r7, #3]
	switch (phyAttribute)
 801da80:	78fb      	ldrb	r3, [r7, #3]
 801da82:	3b04      	subs	r3, #4
 801da84:	2b1a      	cmp	r3, #26
 801da86:	d87d      	bhi.n	801db84 <RegionUS915Verify+0x110>
 801da88:	a201      	add	r2, pc, #4	@ (adr r2, 801da90 <RegionUS915Verify+0x1c>)
 801da8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da8e:	bf00      	nop
 801da90:	0801dafd 	.word	0x0801dafd
 801da94:	0801db1b 	.word	0x0801db1b
 801da98:	0801db39 	.word	0x0801db39
 801da9c:	0801db57 	.word	0x0801db57
 801daa0:	0801db57 	.word	0x0801db57
 801daa4:	0801db85 	.word	0x0801db85
 801daa8:	0801db85 	.word	0x0801db85
 801daac:	0801db75 	.word	0x0801db75
 801dab0:	0801db85 	.word	0x0801db85
 801dab4:	0801db85 	.word	0x0801db85
 801dab8:	0801db85 	.word	0x0801db85
 801dabc:	0801db85 	.word	0x0801db85
 801dac0:	0801db85 	.word	0x0801db85
 801dac4:	0801db85 	.word	0x0801db85
 801dac8:	0801db85 	.word	0x0801db85
 801dacc:	0801db85 	.word	0x0801db85
 801dad0:	0801db85 	.word	0x0801db85
 801dad4:	0801db85 	.word	0x0801db85
 801dad8:	0801db85 	.word	0x0801db85
 801dadc:	0801db85 	.word	0x0801db85
 801dae0:	0801db85 	.word	0x0801db85
 801dae4:	0801db85 	.word	0x0801db85
 801dae8:	0801db85 	.word	0x0801db85
 801daec:	0801db85 	.word	0x0801db85
 801daf0:	0801db85 	.word	0x0801db85
 801daf4:	0801db85 	.word	0x0801db85
 801daf8:	0801db79 	.word	0x0801db79
	{
	case PHY_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE);
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	f993 3000 	ldrsb.w	r3, [r3]
 801db02:	2204      	movs	r2, #4
 801db04:	2100      	movs	r1, #0
 801db06:	4618      	mov	r0, r3
 801db08:	f7f8 fc2e 	bl	8016368 <RegionCommonValueInRange>
 801db0c:	4603      	mov	r3, r0
 801db0e:	2b00      	cmp	r3, #0
 801db10:	bf14      	ite	ne
 801db12:	2301      	movne	r3, #1
 801db14:	2300      	moveq	r3, #0
 801db16:	b2db      	uxtb	r3, r3
 801db18:	e038      	b.n	801db8c <RegionUS915Verify+0x118>
	}
	case PHY_DEF_TX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, DR_0, DR_5);
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	f993 3000 	ldrsb.w	r3, [r3]
 801db20:	2205      	movs	r2, #5
 801db22:	2100      	movs	r1, #0
 801db24:	4618      	mov	r0, r3
 801db26:	f7f8 fc1f 	bl	8016368 <RegionCommonValueInRange>
 801db2a:	4603      	mov	r3, r0
 801db2c:	2b00      	cmp	r3, #0
 801db2e:	bf14      	ite	ne
 801db30:	2301      	movne	r3, #1
 801db32:	2300      	moveq	r3, #0
 801db34:	b2db      	uxtb	r3, r3
 801db36:	e029      	b.n	801db8c <RegionUS915Verify+0x118>
	}
	case PHY_RX_DR:
	{
		return RegionCommonValueInRange(verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE);
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	f993 3000 	ldrsb.w	r3, [r3]
 801db3e:	220d      	movs	r2, #13
 801db40:	2108      	movs	r1, #8
 801db42:	4618      	mov	r0, r3
 801db44:	f7f8 fc10 	bl	8016368 <RegionCommonValueInRange>
 801db48:	4603      	mov	r3, r0
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	bf14      	ite	ne
 801db4e:	2301      	movne	r3, #1
 801db50:	2300      	moveq	r3, #0
 801db52:	b2db      	uxtb	r3, r3
 801db54:	e01a      	b.n	801db8c <RegionUS915Verify+0x118>
	}
	case PHY_DEF_TX_POWER:
	case PHY_TX_POWER:
	{
		// Remark: switched min and max!
		return RegionCommonValueInRange(verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER);
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	f993 3000 	ldrsb.w	r3, [r3]
 801db5c:	220e      	movs	r2, #14
 801db5e:	2100      	movs	r1, #0
 801db60:	4618      	mov	r0, r3
 801db62:	f7f8 fc01 	bl	8016368 <RegionCommonValueInRange>
 801db66:	4603      	mov	r3, r0
 801db68:	2b00      	cmp	r3, #0
 801db6a:	bf14      	ite	ne
 801db6c:	2301      	movne	r3, #1
 801db6e:	2300      	moveq	r3, #0
 801db70:	b2db      	uxtb	r3, r3
 801db72:	e00b      	b.n	801db8c <RegionUS915Verify+0x118>
	}
	case PHY_DUTY_CYCLE:
	{
		return US915_DUTY_CYCLE_ENABLED;
 801db74:	2300      	movs	r3, #0
 801db76:	e009      	b.n	801db8c <RegionUS915Verify+0x118>
	}
	case PHY_NB_JOIN_TRIALS:
	{
		if (verify->NbJoinTrials < 2)
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	781b      	ldrb	r3, [r3, #0]
 801db7c:	2b01      	cmp	r3, #1
 801db7e:	d803      	bhi.n	801db88 <RegionUS915Verify+0x114>
		{
			return false;
 801db80:	2300      	movs	r3, #0
 801db82:	e003      	b.n	801db8c <RegionUS915Verify+0x118>
		}
		break;
	}
	default:
		return false;
 801db84:	2300      	movs	r3, #0
 801db86:	e001      	b.n	801db8c <RegionUS915Verify+0x118>
		break;
 801db88:	bf00      	nop
	}
	return true;
 801db8a:	2301      	movs	r3, #1
}
 801db8c:	4618      	mov	r0, r3
 801db8e:	3708      	adds	r7, #8
 801db90:	46bd      	mov	sp, r7
 801db92:	bd80      	pop	{r7, pc}

0801db94 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList(ApplyCFListParams_t *applyCFList)
{
 801db94:	b480      	push	{r7}
 801db96:	b083      	sub	sp, #12
 801db98:	af00      	add	r7, sp, #0
 801db9a:	6078      	str	r0, [r7, #4]
	return;
 801db9c:	bf00      	nop
}
 801db9e:	370c      	adds	r7, #12
 801dba0:	46bd      	mov	sp, r7
 801dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dba6:	4770      	bx	lr

0801dba8 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet(ChanMaskSetParams_t *chanMaskSet)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b084      	sub	sp, #16
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
	uint8_t nbChannels = RegionCommonCountChannels(chanMaskSet->ChannelsMaskIn, 0, 4);
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	681b      	ldr	r3, [r3, #0]
 801dbb4:	2204      	movs	r2, #4
 801dbb6:	2100      	movs	r1, #0
 801dbb8:	4618      	mov	r0, r3
 801dbba:	f7f8 fc28 	bl	801640e <RegionCommonCountChannels>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	73bb      	strb	r3, [r7, #14]

	// Check the number of active channels
	if ((nbChannels < 2) &&
 801dbc2:	7bbb      	ldrb	r3, [r7, #14]
 801dbc4:	2b01      	cmp	r3, #1
 801dbc6:	d804      	bhi.n	801dbd2 <RegionUS915ChanMaskSet+0x2a>
 801dbc8:	7bbb      	ldrb	r3, [r7, #14]
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d001      	beq.n	801dbd2 <RegionUS915ChanMaskSet+0x2a>
		(nbChannels > 0))
	{
		return false;
 801dbce:	2300      	movs	r3, #0
 801dbd0:	e030      	b.n	801dc34 <RegionUS915ChanMaskSet+0x8c>
	}

	switch (chanMaskSet->ChannelsMaskType)
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	791b      	ldrb	r3, [r3, #4]
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	d002      	beq.n	801dbe0 <RegionUS915ChanMaskSet+0x38>
 801dbda:	2b01      	cmp	r3, #1
 801dbdc:	d01f      	beq.n	801dc1e <RegionUS915ChanMaskSet+0x76>
 801dbde:	e026      	b.n	801dc2e <RegionUS915ChanMaskSet+0x86>
	{
	case CHANNELS_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsMask, chanMaskSet->ChannelsMaskIn, 6);
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	2206      	movs	r2, #6
 801dbe6:	4619      	mov	r1, r3
 801dbe8:	4814      	ldr	r0, [pc, #80]	@ (801dc3c <RegionUS915ChanMaskSet+0x94>)
 801dbea:	f7f8 fc3c 	bl	8016466 <RegionCommonChanMaskCopy>

		for (uint8_t i = 0; i < 6; i++)
 801dbee:	2300      	movs	r3, #0
 801dbf0:	73fb      	strb	r3, [r7, #15]
 801dbf2:	e010      	b.n	801dc16 <RegionUS915ChanMaskSet+0x6e>
		{ // Copy-And the channels mask
			ChannelsMaskRemaining[i] &= ChannelsMask[i];
 801dbf4:	7bfb      	ldrb	r3, [r7, #15]
 801dbf6:	4a12      	ldr	r2, [pc, #72]	@ (801dc40 <RegionUS915ChanMaskSet+0x98>)
 801dbf8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 801dbfc:	7bfb      	ldrb	r3, [r7, #15]
 801dbfe:	4a0f      	ldr	r2, [pc, #60]	@ (801dc3c <RegionUS915ChanMaskSet+0x94>)
 801dc00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801dc04:	7bfb      	ldrb	r3, [r7, #15]
 801dc06:	400a      	ands	r2, r1
 801dc08:	b291      	uxth	r1, r2
 801dc0a:	4a0d      	ldr	r2, [pc, #52]	@ (801dc40 <RegionUS915ChanMaskSet+0x98>)
 801dc0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < 6; i++)
 801dc10:	7bfb      	ldrb	r3, [r7, #15]
 801dc12:	3301      	adds	r3, #1
 801dc14:	73fb      	strb	r3, [r7, #15]
 801dc16:	7bfb      	ldrb	r3, [r7, #15]
 801dc18:	2b05      	cmp	r3, #5
 801dc1a:	d9eb      	bls.n	801dbf4 <RegionUS915ChanMaskSet+0x4c>
		}
		break;
 801dc1c:	e009      	b.n	801dc32 <RegionUS915ChanMaskSet+0x8a>
	}
	case CHANNELS_DEFAULT_MASK:
	{
		RegionCommonChanMaskCopy(ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6);
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	2206      	movs	r2, #6
 801dc24:	4619      	mov	r1, r3
 801dc26:	4807      	ldr	r0, [pc, #28]	@ (801dc44 <RegionUS915ChanMaskSet+0x9c>)
 801dc28:	f7f8 fc1d 	bl	8016466 <RegionCommonChanMaskCopy>
		break;
 801dc2c:	e001      	b.n	801dc32 <RegionUS915ChanMaskSet+0x8a>
	}
	default:
		return false;
 801dc2e:	2300      	movs	r3, #0
 801dc30:	e000      	b.n	801dc34 <RegionUS915ChanMaskSet+0x8c>
	}
	return true;
 801dc32:	2301      	movs	r3, #1
}
 801dc34:	4618      	mov	r0, r3
 801dc36:	3710      	adds	r7, #16
 801dc38:	46bd      	mov	sp, r7
 801dc3a:	bd80      	pop	{r7, pc}
 801dc3c:	20006c9c 	.word	0x20006c9c
 801dc40:	20006cb4 	.word	0x20006cb4
 801dc44:	20006ca8 	.word	0x20006ca8

0801dc48 <RegionUS915AdrNext>:

bool RegionUS915AdrNext(AdrNextParams_t *adrNext, int8_t *drOut, int8_t *txPowOut, uint32_t *adrAckCounter)
{
 801dc48:	b580      	push	{r7, lr}
 801dc4a:	b088      	sub	sp, #32
 801dc4c:	af00      	add	r7, sp, #0
 801dc4e:	60f8      	str	r0, [r7, #12]
 801dc50:	60b9      	str	r1, [r7, #8]
 801dc52:	607a      	str	r2, [r7, #4]
 801dc54:	603b      	str	r3, [r7, #0]
	bool adrAckReq = false;
 801dc56:	2300      	movs	r3, #0
 801dc58:	77fb      	strb	r3, [r7, #31]
	int8_t datarate = adrNext->Datarate;
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	7a1b      	ldrb	r3, [r3, #8]
 801dc5e:	77bb      	strb	r3, [r7, #30]
	int8_t txPower = adrNext->TxPower;
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	7a5b      	ldrb	r3, [r3, #9]
 801dc64:	777b      	strb	r3, [r7, #29]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;

	// Report back the adr ack counter
	*adrAckCounter = adrNext->AdrAckCounter;
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	685a      	ldr	r2, [r3, #4]
 801dc6a:	683b      	ldr	r3, [r7, #0]
 801dc6c:	601a      	str	r2, [r3, #0]

	if (adrNext->AdrEnabled == true)
 801dc6e:	68fb      	ldr	r3, [r7, #12]
 801dc70:	785b      	ldrb	r3, [r3, #1]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d04e      	beq.n	801dd14 <RegionUS915AdrNext+0xcc>
	{
		if (datarate == US915_TX_MIN_DATARATE)
 801dc76:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d105      	bne.n	801dc8a <RegionUS915AdrNext+0x42>
		{
			*adrAckCounter = 0;
 801dc7e:	683b      	ldr	r3, [r7, #0]
 801dc80:	2200      	movs	r2, #0
 801dc82:	601a      	str	r2, [r3, #0]
			adrAckReq = false;
 801dc84:	2300      	movs	r3, #0
 801dc86:	77fb      	strb	r3, [r7, #31]
 801dc88:	e044      	b.n	801dd14 <RegionUS915AdrNext+0xcc>
		}
		else
		{
			if (adrNext->AdrAckCounter >= US915_ADR_ACK_LIMIT)
 801dc8a:	68fb      	ldr	r3, [r7, #12]
 801dc8c:	685b      	ldr	r3, [r3, #4]
 801dc8e:	2b3f      	cmp	r3, #63	@ 0x3f
 801dc90:	d904      	bls.n	801dc9c <RegionUS915AdrNext+0x54>
			{
				adrAckReq = true;
 801dc92:	2301      	movs	r3, #1
 801dc94:	77fb      	strb	r3, [r7, #31]
				txPower = US915_MAX_TX_POWER;
 801dc96:	2300      	movs	r3, #0
 801dc98:	777b      	strb	r3, [r7, #29]
 801dc9a:	e001      	b.n	801dca0 <RegionUS915AdrNext+0x58>
			}
			else
			{
				adrAckReq = false;
 801dc9c:	2300      	movs	r3, #0
 801dc9e:	77fb      	strb	r3, [r7, #31]
			}
			if (adrNext->AdrAckCounter >= (US915_ADR_ACK_LIMIT + US915_ADR_ACK_DELAY))
 801dca0:	68fb      	ldr	r3, [r7, #12]
 801dca2:	685b      	ldr	r3, [r3, #4]
 801dca4:	2b5f      	cmp	r3, #95	@ 0x5f
 801dca6:	d935      	bls.n	801dd14 <RegionUS915AdrNext+0xcc>
			{
				if ((adrNext->AdrAckCounter % US915_ADR_ACK_DELAY) == 1)
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	685b      	ldr	r3, [r3, #4]
 801dcac:	f003 031f 	and.w	r3, r3, #31
 801dcb0:	2b01      	cmp	r3, #1
 801dcb2:	d12f      	bne.n	801dd14 <RegionUS915AdrNext+0xcc>
				{
					// Decrease the datarate
					getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801dcb4:	2320      	movs	r3, #32
 801dcb6:	763b      	strb	r3, [r7, #24]
					getPhy.Datarate = datarate;
 801dcb8:	7fbb      	ldrb	r3, [r7, #30]
 801dcba:	767b      	strb	r3, [r7, #25]
					getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801dcbc:	68fb      	ldr	r3, [r7, #12]
 801dcbe:	7a9b      	ldrb	r3, [r3, #10]
 801dcc0:	76bb      	strb	r3, [r7, #26]
					phyParam = RegionUS915GetPhyParam(&getPhy);
 801dcc2:	f107 0318 	add.w	r3, r7, #24
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	f7ff fd1c 	bl	801d704 <RegionUS915GetPhyParam>
 801dccc:	4603      	mov	r3, r0
 801dcce:	617b      	str	r3, [r7, #20]
					datarate = phyParam.Value;
 801dcd0:	697b      	ldr	r3, [r7, #20]
 801dcd2:	77bb      	strb	r3, [r7, #30]

					if (datarate == US915_TX_MIN_DATARATE)
 801dcd4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d11b      	bne.n	801dd14 <RegionUS915AdrNext+0xcc>
					{
						// We must set adrAckReq to false as soon as we reach the lowest datarate
						adrAckReq = false;
 801dcdc:	2300      	movs	r3, #0
 801dcde:	77fb      	strb	r3, [r7, #31]
						if (adrNext->UpdateChanMask == true)
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	781b      	ldrb	r3, [r3, #0]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d015      	beq.n	801dd14 <RegionUS915AdrNext+0xcc>
						{
							// Re-enable default channels
							ChannelsMask[0] = 0xFFFF;
 801dce8:	4b10      	ldr	r3, [pc, #64]	@ (801dd2c <RegionUS915AdrNext+0xe4>)
 801dcea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dcee:	801a      	strh	r2, [r3, #0]
							ChannelsMask[1] = 0xFFFF;
 801dcf0:	4b0e      	ldr	r3, [pc, #56]	@ (801dd2c <RegionUS915AdrNext+0xe4>)
 801dcf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dcf6:	805a      	strh	r2, [r3, #2]
							ChannelsMask[2] = 0xFFFF;
 801dcf8:	4b0c      	ldr	r3, [pc, #48]	@ (801dd2c <RegionUS915AdrNext+0xe4>)
 801dcfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dcfe:	809a      	strh	r2, [r3, #4]
							ChannelsMask[3] = 0xFFFF;
 801dd00:	4b0a      	ldr	r3, [pc, #40]	@ (801dd2c <RegionUS915AdrNext+0xe4>)
 801dd02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dd06:	80da      	strh	r2, [r3, #6]
							ChannelsMask[4] = 0x00FF;
 801dd08:	4b08      	ldr	r3, [pc, #32]	@ (801dd2c <RegionUS915AdrNext+0xe4>)
 801dd0a:	22ff      	movs	r2, #255	@ 0xff
 801dd0c:	811a      	strh	r2, [r3, #8]
							ChannelsMask[5] = 0x0000;
 801dd0e:	4b07      	ldr	r3, [pc, #28]	@ (801dd2c <RegionUS915AdrNext+0xe4>)
 801dd10:	2200      	movs	r2, #0
 801dd12:	815a      	strh	r2, [r3, #10]
				}
			}
		}
	}

	*drOut = datarate;
 801dd14:	68bb      	ldr	r3, [r7, #8]
 801dd16:	7fba      	ldrb	r2, [r7, #30]
 801dd18:	701a      	strb	r2, [r3, #0]
	*txPowOut = txPower;
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	7f7a      	ldrb	r2, [r7, #29]
 801dd1e:	701a      	strb	r2, [r3, #0]
	return adrAckReq;
 801dd20:	7ffb      	ldrb	r3, [r7, #31]
}
 801dd22:	4618      	mov	r0, r3
 801dd24:	3720      	adds	r7, #32
 801dd26:	46bd      	mov	sp, r7
 801dd28:	bd80      	pop	{r7, pc}
 801dd2a:	bf00      	nop
 801dd2c:	20006c9c 	.word	0x20006c9c

0801dd30 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters(int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams)
{
 801dd30:	b580      	push	{r7, lr}
 801dd32:	b088      	sub	sp, #32
 801dd34:	af02      	add	r7, sp, #8
 801dd36:	60ba      	str	r2, [r7, #8]
 801dd38:	607b      	str	r3, [r7, #4]
 801dd3a:	4603      	mov	r3, r0
 801dd3c:	73fb      	strb	r3, [r7, #15]
 801dd3e:	460b      	mov	r3, r1
 801dd40:	73bb      	strb	r3, [r7, #14]
	double tSymbol = 0.0;
 801dd42:	f04f 0200 	mov.w	r2, #0
 801dd46:	f04f 0300 	mov.w	r3, #0
 801dd4a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Get the datarate, perform a boundary check
	rxConfigParams->Datarate = T_MIN(datarate, US915_RX_MAX_DATARATE);
 801dd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dd52:	2b0d      	cmp	r3, #13
 801dd54:	bfa8      	it	ge
 801dd56:	230d      	movge	r3, #13
 801dd58:	b25a      	sxtb	r2, r3
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	705a      	strb	r2, [r3, #1]
	rxConfigParams->Bandwidth = GetBandwidth(rxConfigParams->Datarate);
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7ff fbe7 	bl	801d538 <GetBandwidth>
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	b2da      	uxtb	r2, r3
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	709a      	strb	r2, [r3, #2]

	tSymbol = RegionCommonComputeSymbolTimeLoRa(DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate]);
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd78:	461a      	mov	r2, r3
 801dd7a:	4b10      	ldr	r3, [pc, #64]	@ (801ddbc <RegionUS915ComputeRxWindowParameters+0x8c>)
 801dd7c:	5c9a      	ldrb	r2, [r3, r2]
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd84:	4619      	mov	r1, r3
 801dd86:	4b0e      	ldr	r3, [pc, #56]	@ (801ddc0 <RegionUS915ComputeRxWindowParameters+0x90>)
 801dd88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801dd8c:	4619      	mov	r1, r3
 801dd8e:	4610      	mov	r0, r2
 801dd90:	f7f8 fdc8 	bl	8016924 <RegionCommonComputeSymbolTimeLoRa>
 801dd94:	ed87 0b04 	vstr	d0, [r7, #16]

	RegionCommonComputeRxWindowParameters(tSymbol, minRxSymbols, rxError, RADIO_WAKEUP_TIME, &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset);
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	f103 0208 	add.w	r2, r3, #8
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	330c      	adds	r3, #12
 801dda2:	7bb8      	ldrb	r0, [r7, #14]
 801dda4:	9300      	str	r3, [sp, #0]
 801dda6:	4613      	mov	r3, r2
 801dda8:	2203      	movs	r2, #3
 801ddaa:	68b9      	ldr	r1, [r7, #8]
 801ddac:	ed97 0b04 	vldr	d0, [r7, #16]
 801ddb0:	f7f8 fe04 	bl	80169bc <RegionCommonComputeRxWindowParameters>
}
 801ddb4:	bf00      	nop
 801ddb6:	3718      	adds	r7, #24
 801ddb8:	46bd      	mov	sp, r7
 801ddba:	bd80      	pop	{r7, pc}
 801ddbc:	080253cc 	.word	0x080253cc
 801ddc0:	080253dc 	.word	0x080253dc

0801ddc4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig(RxConfigParams_t *rxConfig, int8_t *datarate)
{
 801ddc4:	b590      	push	{r4, r7, lr}
 801ddc6:	b091      	sub	sp, #68	@ 0x44
 801ddc8:	af0a      	add	r7, sp, #40	@ 0x28
 801ddca:	6078      	str	r0, [r7, #4]
 801ddcc:	6039      	str	r1, [r7, #0]
	int8_t dr = rxConfig->Datarate;
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	785b      	ldrb	r3, [r3, #1]
 801ddd2:	73fb      	strb	r3, [r7, #15]
	uint8_t maxPayload = 0;
 801ddd4:	2300      	movs	r3, #0
 801ddd6:	75fb      	strb	r3, [r7, #23]
	int8_t phyDr = 0;
 801ddd8:	2300      	movs	r3, #0
 801ddda:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = rxConfig->Frequency;
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	685b      	ldr	r3, [r3, #4]
 801dde0:	613b      	str	r3, [r7, #16]

	if (Radio.GetStatus() != RF_IDLE)
 801dde2:	4b30      	ldr	r3, [pc, #192]	@ (801dea4 <RegionUS915RxConfig+0xe0>)
 801dde4:	689b      	ldr	r3, [r3, #8]
 801dde6:	4798      	blx	r3
 801dde8:	4603      	mov	r3, r0
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d001      	beq.n	801ddf2 <RegionUS915RxConfig+0x2e>
	{
		return false;
 801ddee:	2300      	movs	r3, #0
 801ddf0:	e053      	b.n	801de9a <RegionUS915RxConfig+0xd6>
	}

	if (rxConfig->Window == 0)
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	7cdb      	ldrb	r3, [r3, #19]
 801ddf6:	f083 0301 	eor.w	r3, r3, #1
 801ddfa:	b2db      	uxtb	r3, r3
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	d009      	beq.n	801de14 <RegionUS915RxConfig+0x50>
	{
		// Apply window 1 frequency
		frequency = US915_FIRST_RX1_CHANNEL + (rxConfig->Channel % 8) * US915_STEPWIDTH_RX1_CHANNEL;
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	781b      	ldrb	r3, [r3, #0]
 801de04:	f003 0307 	and.w	r3, r3, #7
 801de08:	4a27      	ldr	r2, [pc, #156]	@ (801dea8 <RegionUS915RxConfig+0xe4>)
 801de0a:	fb03 f202 	mul.w	r2, r3, r2
 801de0e:	4b27      	ldr	r3, [pc, #156]	@ (801deac <RegionUS915RxConfig+0xe8>)
 801de10:	4413      	add	r3, r2
 801de12:	613b      	str	r3, [r7, #16]
	}

	// Read the physical datarate from the datarates table
	phyDr = DataratesUS915[dr];
 801de14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de18:	4a25      	ldr	r2, [pc, #148]	@ (801deb0 <RegionUS915RxConfig+0xec>)
 801de1a:	5cd3      	ldrb	r3, [r2, r3]
 801de1c:	73bb      	strb	r3, [r7, #14]

	Radio.SetChannel(frequency);
 801de1e:	4b21      	ldr	r3, [pc, #132]	@ (801dea4 <RegionUS915RxConfig+0xe0>)
 801de20:	691b      	ldr	r3, [r3, #16]
 801de22:	6938      	ldr	r0, [r7, #16]
 801de24:	4798      	blx	r3

	// Radio configuration
	// Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
	// RAKwireless symbTimeout changed after tests done by RAKwireless
	Radio.SetRxConfig(MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, 0, false, 0, false, 0, 0, true, rxConfig->RxContinuous);
 801de26:	4b1f      	ldr	r3, [pc, #124]	@ (801dea4 <RegionUS915RxConfig+0xe0>)
 801de28:	69dc      	ldr	r4, [r3, #28]
 801de2a:	687b      	ldr	r3, [r7, #4]
 801de2c:	789b      	ldrb	r3, [r3, #2]
 801de2e:	4619      	mov	r1, r3
 801de30:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	7c9b      	ldrb	r3, [r3, #18]
 801de38:	9309      	str	r3, [sp, #36]	@ 0x24
 801de3a:	2301      	movs	r3, #1
 801de3c:	9308      	str	r3, [sp, #32]
 801de3e:	2300      	movs	r3, #0
 801de40:	9307      	str	r3, [sp, #28]
 801de42:	2300      	movs	r3, #0
 801de44:	9306      	str	r3, [sp, #24]
 801de46:	2300      	movs	r3, #0
 801de48:	9305      	str	r3, [sp, #20]
 801de4a:	2300      	movs	r3, #0
 801de4c:	9304      	str	r3, [sp, #16]
 801de4e:	2300      	movs	r3, #0
 801de50:	9303      	str	r3, [sp, #12]
 801de52:	2300      	movs	r3, #0
 801de54:	9302      	str	r3, [sp, #8]
 801de56:	2308      	movs	r3, #8
 801de58:	9301      	str	r3, [sp, #4]
 801de5a:	2300      	movs	r3, #0
 801de5c:	9300      	str	r3, [sp, #0]
 801de5e:	2301      	movs	r3, #1
 801de60:	2001      	movs	r0, #1
 801de62:	47a0      	blx	r4

	if (rxConfig->RepeaterSupport == true)
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	7c5b      	ldrb	r3, [r3, #17]
 801de68:	2b00      	cmp	r3, #0
 801de6a:	d005      	beq.n	801de78 <RegionUS915RxConfig+0xb4>
	{
		maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801de6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de70:	4a10      	ldr	r2, [pc, #64]	@ (801deb4 <RegionUS915RxConfig+0xf0>)
 801de72:	5cd3      	ldrb	r3, [r2, r3]
 801de74:	75fb      	strb	r3, [r7, #23]
 801de76:	e004      	b.n	801de82 <RegionUS915RxConfig+0xbe>
	}
	else
	{
		maxPayload = MaxPayloadOfDatarateUS915[dr];
 801de78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de7c:	4a0e      	ldr	r2, [pc, #56]	@ (801deb8 <RegionUS915RxConfig+0xf4>)
 801de7e:	5cd3      	ldrb	r3, [r2, r3]
 801de80:	75fb      	strb	r3, [r7, #23]
	}
	Radio.SetMaxPayloadLength(MODEM_LORA, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD);
 801de82:	4b08      	ldr	r3, [pc, #32]	@ (801dea4 <RegionUS915RxConfig+0xe0>)
 801de84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801de86:	7dfa      	ldrb	r2, [r7, #23]
 801de88:	320d      	adds	r2, #13
 801de8a:	b2d2      	uxtb	r2, r2
 801de8c:	4611      	mov	r1, r2
 801de8e:	2001      	movs	r0, #1
 801de90:	4798      	blx	r3

	*datarate = (uint8_t)dr;
 801de92:	683b      	ldr	r3, [r7, #0]
 801de94:	7bfa      	ldrb	r2, [r7, #15]
 801de96:	701a      	strb	r2, [r3, #0]
	return true;
 801de98:	2301      	movs	r3, #1
}
 801de9a:	4618      	mov	r0, r3
 801de9c:	371c      	adds	r7, #28
 801de9e:	46bd      	mov	sp, r7
 801dea0:	bd90      	pop	{r4, r7, pc}
 801dea2:	bf00      	nop
 801dea4:	08025450 	.word	0x08025450
 801dea8:	000927c0 	.word	0x000927c0
 801deac:	370870a0 	.word	0x370870a0
 801deb0:	080253cc 	.word	0x080253cc
 801deb4:	08025440 	.word	0x08025440
 801deb8:	08025430 	.word	0x08025430

0801debc <RegionUS915TxConfig>:

bool RegionUS915TxConfig(TxConfigParams_t *txConfig, int8_t *txPower, TimerTime_t *txTimeOnAir)
{
 801debc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801debe:	b093      	sub	sp, #76	@ 0x4c
 801dec0:	af0a      	add	r7, sp, #40	@ 0x28
 801dec2:	60f8      	str	r0, [r7, #12]
 801dec4:	60b9      	str	r1, [r7, #8]
 801dec6:	607a      	str	r2, [r7, #4]
	int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dece:	461a      	mov	r2, r3
 801ded0:	4b3d      	ldr	r3, [pc, #244]	@ (801dfc8 <RegionUS915TxConfig+0x10c>)
 801ded2:	5c9b      	ldrb	r3, [r3, r2]
 801ded4:	77fb      	strb	r3, [r7, #31]
	int8_t txPowerLimited = LimitTxPower(txConfig->TxPower, Bands[Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, ChannelsMask);
 801ded6:	68fb      	ldr	r3, [r7, #12]
 801ded8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	781b      	ldrb	r3, [r3, #0]
 801dee0:	4619      	mov	r1, r3
 801dee2:	4a3a      	ldr	r2, [pc, #232]	@ (801dfcc <RegionUS915TxConfig+0x110>)
 801dee4:	460b      	mov	r3, r1
 801dee6:	005b      	lsls	r3, r3, #1
 801dee8:	440b      	add	r3, r1
 801deea:	009b      	lsls	r3, r3, #2
 801deec:	4413      	add	r3, r2
 801deee:	3309      	adds	r3, #9
 801def0:	781b      	ldrb	r3, [r3, #0]
 801def2:	4a37      	ldr	r2, [pc, #220]	@ (801dfd0 <RegionUS915TxConfig+0x114>)
 801def4:	015b      	lsls	r3, r3, #5
 801def6:	4413      	add	r3, r2
 801def8:	3302      	adds	r3, #2
 801defa:	f993 1000 	ldrsb.w	r1, [r3]
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801df04:	4b33      	ldr	r3, [pc, #204]	@ (801dfd4 <RegionUS915TxConfig+0x118>)
 801df06:	f7ff fb37 	bl	801d578 <LimitTxPower>
 801df0a:	4603      	mov	r3, r0
 801df0c:	77bb      	strb	r3, [r7, #30]
	uint32_t bandwidth = GetBandwidth(txConfig->Datarate);
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801df14:	4618      	mov	r0, r3
 801df16:	f7ff fb0f 	bl	801d538 <GetBandwidth>
 801df1a:	61b8      	str	r0, [r7, #24]
	int8_t phyTxPower = 0;
 801df1c:	2300      	movs	r3, #0
 801df1e:	75fb      	strb	r3, [r7, #23]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, US915_DEFAULT_MAX_ERP, 0);
 801df20:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801df24:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 801dfd8 <RegionUS915TxConfig+0x11c>
 801df28:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 801df2c:	4618      	mov	r0, r3
 801df2e:	f7f8 fdd1 	bl	8016ad4 <RegionCommonComputeTxPower>
 801df32:	4603      	mov	r3, r0
 801df34:	75fb      	strb	r3, [r7, #23]

	// Setup the radio frequency
	Radio.SetChannel(Channels[txConfig->Channel].Frequency);
 801df36:	4b29      	ldr	r3, [pc, #164]	@ (801dfdc <RegionUS915TxConfig+0x120>)
 801df38:	691a      	ldr	r2, [r3, #16]
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	781b      	ldrb	r3, [r3, #0]
 801df3e:	4618      	mov	r0, r3
 801df40:	4922      	ldr	r1, [pc, #136]	@ (801dfcc <RegionUS915TxConfig+0x110>)
 801df42:	4603      	mov	r3, r0
 801df44:	005b      	lsls	r3, r3, #1
 801df46:	4403      	add	r3, r0
 801df48:	009b      	lsls	r3, r3, #2
 801df4a:	440b      	add	r3, r1
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	4618      	mov	r0, r3
 801df50:	4790      	blx	r2
	Radio.SetTxConfig(MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 3000);
 801df52:	4b22      	ldr	r3, [pc, #136]	@ (801dfdc <RegionUS915TxConfig+0x120>)
 801df54:	6a1e      	ldr	r6, [r3, #32]
 801df56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801df5a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801df5e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 801df62:	9208      	str	r2, [sp, #32]
 801df64:	2200      	movs	r2, #0
 801df66:	9207      	str	r2, [sp, #28]
 801df68:	2200      	movs	r2, #0
 801df6a:	9206      	str	r2, [sp, #24]
 801df6c:	2200      	movs	r2, #0
 801df6e:	9205      	str	r2, [sp, #20]
 801df70:	2201      	movs	r2, #1
 801df72:	9204      	str	r2, [sp, #16]
 801df74:	2200      	movs	r2, #0
 801df76:	9203      	str	r2, [sp, #12]
 801df78:	2208      	movs	r2, #8
 801df7a:	9202      	str	r2, [sp, #8]
 801df7c:	2201      	movs	r2, #1
 801df7e:	9201      	str	r2, [sp, #4]
 801df80:	9300      	str	r3, [sp, #0]
 801df82:	69bb      	ldr	r3, [r7, #24]
 801df84:	2200      	movs	r2, #0
 801df86:	2001      	movs	r0, #1
 801df88:	47b0      	blx	r6

	// Setup maximum payload lenght of the radio driver
	Radio.SetMaxPayloadLength(MODEM_LORA, txConfig->PktLen);
 801df8a:	4b14      	ldr	r3, [pc, #80]	@ (801dfdc <RegionUS915TxConfig+0x120>)
 801df8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801df8e:	68fa      	ldr	r2, [r7, #12]
 801df90:	8992      	ldrh	r2, [r2, #12]
 801df92:	b2d2      	uxtb	r2, r2
 801df94:	4611      	mov	r1, r2
 801df96:	2001      	movs	r0, #1
 801df98:	4798      	blx	r3
	// Get the time-on-air of the next tx frame
	*txTimeOnAir = Radio.TimeOnAir(MODEM_LORA, txConfig->PktLen);
 801df9a:	4b10      	ldr	r3, [pc, #64]	@ (801dfdc <RegionUS915TxConfig+0x120>)
 801df9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801df9e:	68fa      	ldr	r2, [r7, #12]
 801dfa0:	8992      	ldrh	r2, [r2, #12]
 801dfa2:	b2d2      	uxtb	r2, r2
 801dfa4:	4611      	mov	r1, r2
 801dfa6:	2001      	movs	r0, #1
 801dfa8:	4798      	blx	r3
 801dfaa:	4603      	mov	r3, r0
 801dfac:	2200      	movs	r2, #0
 801dfae:	461c      	mov	r4, r3
 801dfb0:	4615      	mov	r5, r2
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	e9c3 4500 	strd	r4, r5, [r3]
	*txPower = txPowerLimited;
 801dfb8:	68bb      	ldr	r3, [r7, #8]
 801dfba:	7fba      	ldrb	r2, [r7, #30]
 801dfbc:	701a      	strb	r2, [r3, #0]

	return true;
 801dfbe:	2301      	movs	r3, #1
}
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	3724      	adds	r7, #36	@ 0x24
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfc8:	080253cc 	.word	0x080253cc
 801dfcc:	20007aac 	.word	0x20007aac
 801dfd0:	20000278 	.word	0x20000278
 801dfd4:	20006c9c 	.word	0x20006c9c
 801dfd8:	00000000 	.word	0x00000000
 801dfdc:	08025450 	.word	0x08025450

0801dfe0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq(LinkAdrReqParams_t *linkAdrReq, int8_t *drOut, int8_t *txPowOut, uint8_t *nbRepOut, uint8_t *nbBytesParsed)
{
 801dfe0:	b590      	push	{r4, r7, lr}
 801dfe2:	b095      	sub	sp, #84	@ 0x54
 801dfe4:	af00      	add	r7, sp, #0
 801dfe6:	60f8      	str	r0, [r7, #12]
 801dfe8:	60b9      	str	r1, [r7, #8]
 801dfea:	607a      	str	r2, [r7, #4]
 801dfec:	603b      	str	r3, [r7, #0]
	uint8_t status = 0x07;
 801dfee:	2307      	movs	r3, #7
 801dff0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	RegionCommonLinkAdrParams_t linkAdrParams;
	uint8_t nextIndex = 0;
 801dff4:	2300      	movs	r3, #0
 801dff6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
	uint8_t bytesProcessed = 0;
 801dffa:	2300      	movs	r3, #0
 801dffc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	uint16_t channelsMask[6] = {0, 0, 0, 0, 0, 0};
 801e000:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801e004:	2200      	movs	r2, #0
 801e006:	601a      	str	r2, [r3, #0]
 801e008:	605a      	str	r2, [r3, #4]
 801e00a:	609a      	str	r2, [r3, #8]
	GetPhyParams_t getPhy;
	PhyParam_t phyParam;
	RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

	// Initialize local copy of channels mask
	RegionCommonChanMaskCopy(channelsMask, ChannelsMask, 6);
 801e00c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801e010:	2206      	movs	r2, #6
 801e012:	4986      	ldr	r1, [pc, #536]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e014:	4618      	mov	r0, r3
 801e016:	f7f8 fa26 	bl	8016466 <RegionCommonChanMaskCopy>

	while (bytesProcessed < linkAdrReq->PayloadSize)
 801e01a:	e055      	b.n	801e0c8 <RegionUS915LinkAdrReq+0xe8>
	{
		nextIndex = RegionCommonParseLinkAdrReq(&(linkAdrReq->Payload[bytesProcessed]), &linkAdrParams);
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	681a      	ldr	r2, [r3, #0]
 801e020:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 801e024:	4413      	add	r3, r2
 801e026:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 801e02a:	4611      	mov	r1, r2
 801e02c:	4618      	mov	r0, r3
 801e02e:	f7f8 fba1 	bl	8016774 <RegionCommonParseLinkAdrReq>
 801e032:	4603      	mov	r3, r0
 801e034:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

		if (nextIndex == 0)
 801e038:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d04a      	beq.n	801e0d6 <RegionUS915LinkAdrReq+0xf6>
			break; // break loop, since no more request has been found

		// Update bytes processed
		bytesProcessed += nextIndex;
 801e040:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 801e044:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 801e048:	4413      	add	r3, r2
 801e04a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

		// Revert status, as we only check the last ADR request for the channel mask KO
		status = 0x07;
 801e04e:	2307      	movs	r3, #7
 801e050:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

		if (linkAdrParams.ChMaskCtrl == 6)
 801e054:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801e058:	2b06      	cmp	r3, #6
 801e05a:	d110      	bne.n	801e07e <RegionUS915LinkAdrReq+0x9e>
		{
			// Enable all 125 kHz channels
			channelsMask[0] = 0xFFFF;
 801e05c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e060:	873b      	strh	r3, [r7, #56]	@ 0x38
			channelsMask[1] = 0xFFFF;
 801e062:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e066:	877b      	strh	r3, [r7, #58]	@ 0x3a
			channelsMask[2] = 0xFFFF;
 801e068:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e06c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			channelsMask[3] = 0xFFFF;
 801e06e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801e072:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			// Apply chMask to channels 64 to 71
			channelsMask[4] = linkAdrParams.ChMask;
 801e074:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801e078:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801e07c:	e024      	b.n	801e0c8 <RegionUS915LinkAdrReq+0xe8>
		}
		else if (linkAdrParams.ChMaskCtrl == 7)
 801e07e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801e082:	2b07      	cmp	r3, #7
 801e084:	d10c      	bne.n	801e0a0 <RegionUS915LinkAdrReq+0xc0>
		{
			// Disable all 125 kHz channels
			channelsMask[0] = 0x0000;
 801e086:	2300      	movs	r3, #0
 801e088:	873b      	strh	r3, [r7, #56]	@ 0x38
			channelsMask[1] = 0x0000;
 801e08a:	2300      	movs	r3, #0
 801e08c:	877b      	strh	r3, [r7, #58]	@ 0x3a
			channelsMask[2] = 0x0000;
 801e08e:	2300      	movs	r3, #0
 801e090:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			channelsMask[3] = 0x0000;
 801e092:	2300      	movs	r3, #0
 801e094:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			// Apply chMask to channels 64 to 71
			channelsMask[4] = linkAdrParams.ChMask;
 801e096:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801e09a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801e09e:	e013      	b.n	801e0c8 <RegionUS915LinkAdrReq+0xe8>
		}
		else if (linkAdrParams.ChMaskCtrl == 5)
 801e0a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801e0a4:	2b05      	cmp	r3, #5
 801e0a6:	d106      	bne.n	801e0b6 <RegionUS915LinkAdrReq+0xd6>
		{
			// RFU
			status &= 0xFE; // Channel mask KO
 801e0a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801e0ac:	f023 0301 	bic.w	r3, r3, #1
 801e0b0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801e0b4:	e008      	b.n	801e0c8 <RegionUS915LinkAdrReq+0xe8>
		}
		else
		{
			channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801e0b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801e0ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801e0be:	005b      	lsls	r3, r3, #1
 801e0c0:	3350      	adds	r3, #80	@ 0x50
 801e0c2:	443b      	add	r3, r7
 801e0c4:	f823 2c18 	strh.w	r2, [r3, #-24]
	while (bytesProcessed < linkAdrReq->PayloadSize)
 801e0c8:	68fb      	ldr	r3, [r7, #12]
 801e0ca:	791b      	ldrb	r3, [r3, #4]
 801e0cc:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 801e0d0:	429a      	cmp	r2, r3
 801e0d2:	d3a3      	bcc.n	801e01c <RegionUS915LinkAdrReq+0x3c>
 801e0d4:	e000      	b.n	801e0d8 <RegionUS915LinkAdrReq+0xf8>
			break; // break loop, since no more request has been found
 801e0d6:	bf00      	nop
		}
	}

	// FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
	if ((linkAdrParams.Datarate < DR_4) && (RegionCommonCountChannels(channelsMask, 0, 4) < 2))
 801e0d8:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 801e0dc:	2b03      	cmp	r3, #3
 801e0de:	dc0f      	bgt.n	801e100 <RegionUS915LinkAdrReq+0x120>
 801e0e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801e0e4:	2204      	movs	r2, #4
 801e0e6:	2100      	movs	r1, #0
 801e0e8:	4618      	mov	r0, r3
 801e0ea:	f7f8 f990 	bl	801640e <RegionCommonCountChannels>
 801e0ee:	4603      	mov	r3, r0
 801e0f0:	2b01      	cmp	r3, #1
 801e0f2:	d805      	bhi.n	801e100 <RegionUS915LinkAdrReq+0x120>
	{
		status &= 0xFE; // Channel mask KO
 801e0f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801e0f8:	f023 0301 	bic.w	r3, r3, #1
 801e0fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	}

	// Get the minimum possible datarate
	getPhy.Attribute = PHY_MIN_TX_DR;
 801e100:	2301      	movs	r3, #1
 801e102:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	795b      	ldrb	r3, [r3, #5]
 801e10a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	phyParam = RegionUS915GetPhyParam(&getPhy);
 801e10e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e112:	4618      	mov	r0, r3
 801e114:	f7ff faf6 	bl	801d704 <RegionUS915GetPhyParam>
 801e118:	4603      	mov	r3, r0
 801e11a:	633b      	str	r3, [r7, #48]	@ 0x30

	linkAdrVerifyParams.Status = status;
 801e11c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801e120:	753b      	strb	r3, [r7, #20]
	linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	799b      	ldrb	r3, [r3, #6]
 801e126:	757b      	strb	r3, [r7, #21]
	linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801e128:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 801e12c:	75bb      	strb	r3, [r7, #22]
	linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801e12e:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 801e132:	75fb      	strb	r3, [r7, #23]
	linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801e134:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801e138:	763b      	strb	r3, [r7, #24]
	linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801e13a:	68fb      	ldr	r3, [r7, #12]
 801e13c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 801e140:	767b      	strb	r3, [r7, #25]
	linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801e148:	76bb      	strb	r3, [r7, #26]
	linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	7a5b      	ldrb	r3, [r3, #9]
 801e14e:	b25b      	sxtb	r3, r3
 801e150:	76fb      	strb	r3, [r7, #27]
	linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801e152:	2348      	movs	r3, #72	@ 0x48
 801e154:	773b      	strb	r3, [r7, #28]
	linkAdrVerifyParams.ChannelsMask = channelsMask;
 801e156:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801e15a:	623b      	str	r3, [r7, #32]
	linkAdrVerifyParams.MinDatarate = (int8_t)phyParam.Value;
 801e15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e15e:	b25b      	sxtb	r3, r3
 801e160:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801e164:	2304      	movs	r3, #4
 801e166:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	linkAdrVerifyParams.Channels = Channels;
 801e16a:	4b31      	ldr	r3, [pc, #196]	@ (801e230 <RegionUS915LinkAdrReq+0x250>)
 801e16c:	62bb      	str	r3, [r7, #40]	@ 0x28
	linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801e16e:	230e      	movs	r3, #14
 801e170:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801e174:	2300      	movs	r3, #0
 801e176:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// Verify the parameters and update, if necessary
	status = RegionCommonLinkAdrReqVerifyParams(&linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep);
 801e17a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 801e17e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801e182:	1c9a      	adds	r2, r3, #2
 801e184:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801e188:	1c59      	adds	r1, r3, #1
 801e18a:	f107 0014 	add.w	r0, r7, #20
 801e18e:	4623      	mov	r3, r4
 801e190:	f7f8 fb42 	bl	8016818 <RegionCommonLinkAdrReqVerifyParams>
 801e194:	4603      	mov	r3, r0
 801e196:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Update channelsMask if everything is correct
	if (status == 0x07)
 801e19a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801e19e:	2b07      	cmp	r3, #7
 801e1a0:	d12e      	bne.n	801e200 <RegionUS915LinkAdrReq+0x220>
	{
		// Copy Mask
		RegionCommonChanMaskCopy(ChannelsMask, channelsMask, 6);
 801e1a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801e1a6:	2206      	movs	r2, #6
 801e1a8:	4619      	mov	r1, r3
 801e1aa:	4820      	ldr	r0, [pc, #128]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e1ac:	f7f8 f95b 	bl	8016466 <RegionCommonChanMaskCopy>

		ChannelsMaskRemaining[0] &= ChannelsMask[0];
 801e1b0:	4b20      	ldr	r3, [pc, #128]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1b2:	881a      	ldrh	r2, [r3, #0]
 801e1b4:	4b1d      	ldr	r3, [pc, #116]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e1b6:	881b      	ldrh	r3, [r3, #0]
 801e1b8:	4013      	ands	r3, r2
 801e1ba:	b29a      	uxth	r2, r3
 801e1bc:	4b1d      	ldr	r3, [pc, #116]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1be:	801a      	strh	r2, [r3, #0]
		ChannelsMaskRemaining[1] &= ChannelsMask[1];
 801e1c0:	4b1c      	ldr	r3, [pc, #112]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1c2:	885a      	ldrh	r2, [r3, #2]
 801e1c4:	4b19      	ldr	r3, [pc, #100]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e1c6:	885b      	ldrh	r3, [r3, #2]
 801e1c8:	4013      	ands	r3, r2
 801e1ca:	b29a      	uxth	r2, r3
 801e1cc:	4b19      	ldr	r3, [pc, #100]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1ce:	805a      	strh	r2, [r3, #2]
		ChannelsMaskRemaining[2] &= ChannelsMask[2];
 801e1d0:	4b18      	ldr	r3, [pc, #96]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1d2:	889a      	ldrh	r2, [r3, #4]
 801e1d4:	4b15      	ldr	r3, [pc, #84]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e1d6:	889b      	ldrh	r3, [r3, #4]
 801e1d8:	4013      	ands	r3, r2
 801e1da:	b29a      	uxth	r2, r3
 801e1dc:	4b15      	ldr	r3, [pc, #84]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1de:	809a      	strh	r2, [r3, #4]
		ChannelsMaskRemaining[3] &= ChannelsMask[3];
 801e1e0:	4b14      	ldr	r3, [pc, #80]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1e2:	88da      	ldrh	r2, [r3, #6]
 801e1e4:	4b11      	ldr	r3, [pc, #68]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e1e6:	88db      	ldrh	r3, [r3, #6]
 801e1e8:	4013      	ands	r3, r2
 801e1ea:	b29a      	uxth	r2, r3
 801e1ec:	4b11      	ldr	r3, [pc, #68]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1ee:	80da      	strh	r2, [r3, #6]
		ChannelsMaskRemaining[4] = ChannelsMask[4];
 801e1f0:	4b0e      	ldr	r3, [pc, #56]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e1f2:	891a      	ldrh	r2, [r3, #8]
 801e1f4:	4b0f      	ldr	r3, [pc, #60]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1f6:	811a      	strh	r2, [r3, #8]
		ChannelsMaskRemaining[5] = ChannelsMask[5];
 801e1f8:	4b0c      	ldr	r3, [pc, #48]	@ (801e22c <RegionUS915LinkAdrReq+0x24c>)
 801e1fa:	895a      	ldrh	r2, [r3, #10]
 801e1fc:	4b0d      	ldr	r3, [pc, #52]	@ (801e234 <RegionUS915LinkAdrReq+0x254>)
 801e1fe:	815a      	strh	r2, [r3, #10]
	}

	// Update status variables
	*drOut = linkAdrParams.Datarate;
 801e200:	f997 2045 	ldrsb.w	r2, [r7, #69]	@ 0x45
 801e204:	68bb      	ldr	r3, [r7, #8]
 801e206:	701a      	strb	r2, [r3, #0]
	*txPowOut = linkAdrParams.TxPower;
 801e208:	f997 2046 	ldrsb.w	r2, [r7, #70]	@ 0x46
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	701a      	strb	r2, [r3, #0]
	*nbRepOut = linkAdrParams.NbRep;
 801e210:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801e214:	683b      	ldr	r3, [r7, #0]
 801e216:	701a      	strb	r2, [r3, #0]
	*nbBytesParsed = bytesProcessed;
 801e218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e21a:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 801e21e:	701a      	strb	r2, [r3, #0]

	return status;
 801e220:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801e224:	4618      	mov	r0, r3
 801e226:	3754      	adds	r7, #84	@ 0x54
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd90      	pop	{r4, r7, pc}
 801e22c:	20006c9c 	.word	0x20006c9c
 801e230:	20007aac 	.word	0x20007aac
 801e234:	20006cb4 	.word	0x20006cb4

0801e238 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq(RxParamSetupReqParams_t *rxParamSetupReq)
{
 801e238:	b580      	push	{r7, lr}
 801e23a:	b084      	sub	sp, #16
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x07;
 801e240:	2307      	movs	r3, #7
 801e242:	73fb      	strb	r3, [r7, #15]
	uint32_t freq = rxParamSetupReq->Frequency;
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	685b      	ldr	r3, [r3, #4]
 801e248:	60bb      	str	r3, [r7, #8]

	// Verify radio frequency
	if ((Radio.CheckRfFrequency(freq) == false) ||
 801e24a:	4b2d      	ldr	r3, [pc, #180]	@ (801e300 <RegionUS915RxParamSetupReq+0xc8>)
 801e24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e24e:	68b8      	ldr	r0, [r7, #8]
 801e250:	4798      	blx	r3
 801e252:	4603      	mov	r3, r0
 801e254:	f083 0301 	eor.w	r3, r3, #1
 801e258:	b2db      	uxtb	r3, r3
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d114      	bne.n	801e288 <RegionUS915RxParamSetupReq+0x50>
 801e25e:	68bb      	ldr	r3, [r7, #8]
 801e260:	4a28      	ldr	r2, [pc, #160]	@ (801e304 <RegionUS915RxParamSetupReq+0xcc>)
 801e262:	4293      	cmp	r3, r2
 801e264:	d910      	bls.n	801e288 <RegionUS915RxParamSetupReq+0x50>
		(freq < US915_FIRST_RX1_CHANNEL) ||
 801e266:	68bb      	ldr	r3, [r7, #8]
 801e268:	4a27      	ldr	r2, [pc, #156]	@ (801e308 <RegionUS915RxParamSetupReq+0xd0>)
 801e26a:	4293      	cmp	r3, r2
 801e26c:	d80c      	bhi.n	801e288 <RegionUS915RxParamSetupReq+0x50>
		(freq > US915_LAST_RX1_CHANNEL) ||
		(((freq - (uint32_t)US915_FIRST_RX1_CHANNEL) % (uint32_t)US915_STEPWIDTH_RX1_CHANNEL) != 0))
 801e26e:	68ba      	ldr	r2, [r7, #8]
 801e270:	4b26      	ldr	r3, [pc, #152]	@ (801e30c <RegionUS915RxParamSetupReq+0xd4>)
 801e272:	4413      	add	r3, r2
 801e274:	4a26      	ldr	r2, [pc, #152]	@ (801e310 <RegionUS915RxParamSetupReq+0xd8>)
 801e276:	fba2 1203 	umull	r1, r2, r2, r3
 801e27a:	0c92      	lsrs	r2, r2, #18
 801e27c:	4925      	ldr	r1, [pc, #148]	@ (801e314 <RegionUS915RxParamSetupReq+0xdc>)
 801e27e:	fb01 f202 	mul.w	r2, r1, r2
 801e282:	1a9a      	subs	r2, r3, r2
		(freq > US915_LAST_RX1_CHANNEL) ||
 801e284:	2a00      	cmp	r2, #0
 801e286:	d003      	beq.n	801e290 <RegionUS915RxParamSetupReq+0x58>
	{
		status &= 0xFE; // Channel frequency KO
 801e288:	7bfb      	ldrb	r3, [r7, #15]
 801e28a:	f023 0301 	bic.w	r3, r3, #1
 801e28e:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate
	if (RegionCommonValueInRange(rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE) == false)
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	f993 3000 	ldrsb.w	r3, [r3]
 801e296:	220d      	movs	r2, #13
 801e298:	2108      	movs	r1, #8
 801e29a:	4618      	mov	r0, r3
 801e29c:	f7f8 f864 	bl	8016368 <RegionCommonValueInRange>
 801e2a0:	4603      	mov	r3, r0
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d103      	bne.n	801e2ae <RegionUS915RxParamSetupReq+0x76>
	{
		status &= 0xFD; // Datarate KO
 801e2a6:	7bfb      	ldrb	r3, [r7, #15]
 801e2a8:	f023 0302 	bic.w	r3, r3, #2
 801e2ac:	73fb      	strb	r3, [r7, #15]
	}
	if ((RegionCommonValueInRange(rxParamSetupReq->Datarate, DR_5, DR_7) == true) ||
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	f993 3000 	ldrsb.w	r3, [r3]
 801e2b4:	2207      	movs	r2, #7
 801e2b6:	2105      	movs	r1, #5
 801e2b8:	4618      	mov	r0, r3
 801e2ba:	f7f8 f855 	bl	8016368 <RegionCommonValueInRange>
 801e2be:	4603      	mov	r3, r0
 801e2c0:	2b01      	cmp	r3, #1
 801e2c2:	d004      	beq.n	801e2ce <RegionUS915RxParamSetupReq+0x96>
		(rxParamSetupReq->Datarate > DR_13))
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	f993 3000 	ldrsb.w	r3, [r3]
	if ((RegionCommonValueInRange(rxParamSetupReq->Datarate, DR_5, DR_7) == true) ||
 801e2ca:	2b0d      	cmp	r3, #13
 801e2cc:	dd03      	ble.n	801e2d6 <RegionUS915RxParamSetupReq+0x9e>
	{
		status &= 0xFD; // Datarate KO
 801e2ce:	7bfb      	ldrb	r3, [r7, #15]
 801e2d0:	f023 0302 	bic.w	r3, r3, #2
 801e2d4:	73fb      	strb	r3, [r7, #15]
	}

	// Verify datarate offset
	if (RegionCommonValueInRange(rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET) == false)
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e2dc:	2203      	movs	r2, #3
 801e2de:	2100      	movs	r1, #0
 801e2e0:	4618      	mov	r0, r3
 801e2e2:	f7f8 f841 	bl	8016368 <RegionCommonValueInRange>
 801e2e6:	4603      	mov	r3, r0
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d103      	bne.n	801e2f4 <RegionUS915RxParamSetupReq+0xbc>
	{
		status &= 0xFB; // Rx1DrOffset range KO
 801e2ec:	7bfb      	ldrb	r3, [r7, #15]
 801e2ee:	f023 0304 	bic.w	r3, r3, #4
 801e2f2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 801e2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e2f6:	4618      	mov	r0, r3
 801e2f8:	3710      	adds	r7, #16
 801e2fa:	46bd      	mov	sp, r7
 801e2fc:	bd80      	pop	{r7, pc}
 801e2fe:	bf00      	nop
 801e300:	08025450 	.word	0x08025450
 801e304:	3708709f 	.word	0x3708709f
 801e308:	374886e0 	.word	0x374886e0
 801e30c:	c8f78f60 	.word	0xc8f78f60
 801e310:	6fd91d85 	.word	0x6fd91d85
 801e314:	000927c0 	.word	0x000927c0

0801e318 <RegionUS915NewChannelReq>:

uint8_t RegionUS915NewChannelReq(NewChannelReqParams_t *newChannelReq)
{
 801e318:	b480      	push	{r7}
 801e31a:	b083      	sub	sp, #12
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	6078      	str	r0, [r7, #4]
	// Datarate and frequency KO
	return 0;
 801e320:	2300      	movs	r3, #0
}
 801e322:	4618      	mov	r0, r3
 801e324:	370c      	adds	r7, #12
 801e326:	46bd      	mov	sp, r7
 801e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e32c:	4770      	bx	lr

0801e32e <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq(TxParamSetupReqParams_t *txParamSetupReq)
{
 801e32e:	b480      	push	{r7}
 801e330:	b083      	sub	sp, #12
 801e332:	af00      	add	r7, sp, #0
 801e334:	6078      	str	r0, [r7, #4]
	return -1;
 801e336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801e33a:	4618      	mov	r0, r3
 801e33c:	370c      	adds	r7, #12
 801e33e:	46bd      	mov	sp, r7
 801e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e344:	4770      	bx	lr

0801e346 <RegionUS915DlChannelReq>:

uint8_t RegionUS915DlChannelReq(DlChannelReqParams_t *dlChannelReq)
{
 801e346:	b480      	push	{r7}
 801e348:	b083      	sub	sp, #12
 801e34a:	af00      	add	r7, sp, #0
 801e34c:	6078      	str	r0, [r7, #4]
	return 0;
 801e34e:	2300      	movs	r3, #0
}
 801e350:	4618      	mov	r0, r3
 801e352:	370c      	adds	r7, #12
 801e354:	46bd      	mov	sp, r7
 801e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e35a:	4770      	bx	lr

0801e35c <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr(AlternateDrParams_t *alternateDr)
{
 801e35c:	b480      	push	{r7}
 801e35e:	b085      	sub	sp, #20
 801e360:	af00      	add	r7, sp, #0
 801e362:	6078      	str	r0, [r7, #4]
	int8_t datarate = 0;
 801e364:	2300      	movs	r3, #0
 801e366:	73fb      	strb	r3, [r7, #15]

	// Re-enable 500 kHz default channels
	ChannelsMask[4] = 0x00FF;
 801e368:	4b0e      	ldr	r3, [pc, #56]	@ (801e3a4 <RegionUS915AlternateDr+0x48>)
 801e36a:	22ff      	movs	r2, #255	@ 0xff
 801e36c:	811a      	strh	r2, [r3, #8]

	// Alternates the data rate according to the channel sequence:
	// Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
	if (alternateDr->NbTrials % 9 == 0)
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	881a      	ldrh	r2, [r3, #0]
 801e372:	4b0d      	ldr	r3, [pc, #52]	@ (801e3a8 <RegionUS915AlternateDr+0x4c>)
 801e374:	fba3 1302 	umull	r1, r3, r3, r2
 801e378:	0859      	lsrs	r1, r3, #1
 801e37a:	460b      	mov	r3, r1
 801e37c:	00db      	lsls	r3, r3, #3
 801e37e:	440b      	add	r3, r1
 801e380:	1ad3      	subs	r3, r2, r3
 801e382:	b29b      	uxth	r3, r3
 801e384:	2b00      	cmp	r3, #0
 801e386:	d102      	bne.n	801e38e <RegionUS915AlternateDr+0x32>
	{
		// Use DR_4 every 9th times.
		datarate = DR_4;
 801e388:	2304      	movs	r3, #4
 801e38a:	73fb      	strb	r3, [r7, #15]
 801e38c:	e001      	b.n	801e392 <RegionUS915AlternateDr+0x36>
	}
	else
	{
		datarate = DR_0;
 801e38e:	2300      	movs	r3, #0
 801e390:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 801e392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801e396:	4618      	mov	r0, r3
 801e398:	3714      	adds	r7, #20
 801e39a:	46bd      	mov	sp, r7
 801e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3a0:	4770      	bx	lr
 801e3a2:	bf00      	nop
 801e3a4:	20006c9c 	.word	0x20006c9c
 801e3a8:	38e38e39 	.word	0x38e38e39

0801e3ac <RegionUS915CalcBackOff>:

void RegionUS915CalcBackOff(CalcBackOffParams_t *calcBackOff)
{
 801e3ac:	b580      	push	{r7, lr}
 801e3ae:	b08a      	sub	sp, #40	@ 0x28
 801e3b0:	af00      	add	r7, sp, #0
 801e3b2:	6078      	str	r0, [r7, #4]
	RegionCommonCalcBackOffParams_t calcBackOffParams;

	calcBackOffParams.Channels = Channels;
 801e3b4:	4b11      	ldr	r3, [pc, #68]	@ (801e3fc <RegionUS915CalcBackOff+0x50>)
 801e3b6:	60bb      	str	r3, [r7, #8]
	calcBackOffParams.Bands = Bands;
 801e3b8:	4b11      	ldr	r3, [pc, #68]	@ (801e400 <RegionUS915CalcBackOff+0x54>)
 801e3ba:	60fb      	str	r3, [r7, #12]
	calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	785b      	ldrb	r3, [r3, #1]
 801e3c0:	743b      	strb	r3, [r7, #16]
	calcBackOffParams.Joined = calcBackOff->Joined;
 801e3c2:	687b      	ldr	r3, [r7, #4]
 801e3c4:	781b      	ldrb	r3, [r3, #0]
 801e3c6:	747b      	strb	r3, [r7, #17]
	calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	789b      	ldrb	r3, [r3, #2]
 801e3cc:	74bb      	strb	r3, [r7, #18]
	calcBackOffParams.Channel = calcBackOff->Channel;
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	78db      	ldrb	r3, [r3, #3]
 801e3d2:	74fb      	strb	r3, [r7, #19]
	calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e3da:	e9c7 2306 	strd	r2, r3, [r7, #24]
	calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801e3e4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	RegionCommonCalcBackOff(&calcBackOffParams);
 801e3e8:	f107 0308 	add.w	r3, r7, #8
 801e3ec:	4618      	mov	r0, r3
 801e3ee:	f7f8 fba3 	bl	8016b38 <RegionCommonCalcBackOff>
}
 801e3f2:	bf00      	nop
 801e3f4:	3728      	adds	r7, #40	@ 0x28
 801e3f6:	46bd      	mov	sp, r7
 801e3f8:	bd80      	pop	{r7, pc}
 801e3fa:	bf00      	nop
 801e3fc:	20007aac 	.word	0x20007aac
 801e400:	20000278 	.word	0x20000278

0801e404 <RegionUS915NextChannel>:

bool RegionUS915NextChannel(NextChanParams_t *nextChanParams, uint8_t *channel, TimerTime_t *time, TimerTime_t *aggregatedTimeOff)
{
 801e404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e408:	b09e      	sub	sp, #120	@ 0x78
 801e40a:	af02      	add	r7, sp, #8
 801e40c:	60f8      	str	r0, [r7, #12]
 801e40e:	60b9      	str	r1, [r7, #8]
 801e410:	607a      	str	r2, [r7, #4]
 801e412:	603b      	str	r3, [r7, #0]
	uint8_t nbEnabledChannels = 0;
 801e414:	2300      	movs	r3, #0
 801e416:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t delayTx = 0;
 801e41a:	2300      	movs	r3, #0
 801e41c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = {0};
 801e420:	2300      	movs	r3, #0
 801e422:	617b      	str	r3, [r7, #20]
 801e424:	f107 0318 	add.w	r3, r7, #24
 801e428:	2244      	movs	r2, #68	@ 0x44
 801e42a:	2100      	movs	r1, #0
 801e42c:	4618      	mov	r0, r3
 801e42e:	f003 ff0d 	bl	802224c <memset>
	TimerTime_t nextTxDelay = 0;
 801e432:	f04f 0200 	mov.w	r2, #0
 801e436:	f04f 0300 	mov.w	r3, #0
 801e43a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	// Count 125kHz channels
	if (RegionCommonCountChannels(ChannelsMaskRemaining, 0, 4) == 0)
 801e43e:	2204      	movs	r2, #4
 801e440:	2100      	movs	r1, #0
 801e442:	484f      	ldr	r0, [pc, #316]	@ (801e580 <RegionUS915NextChannel+0x17c>)
 801e444:	f7f7 ffe3 	bl	801640e <RegionCommonCountChannels>
 801e448:	4603      	mov	r3, r0
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d104      	bne.n	801e458 <RegionUS915NextChannel+0x54>
	{ // Reactivate default channels
		RegionCommonChanMaskCopy(ChannelsMaskRemaining, ChannelsMask, 4);
 801e44e:	2204      	movs	r2, #4
 801e450:	494c      	ldr	r1, [pc, #304]	@ (801e584 <RegionUS915NextChannel+0x180>)
 801e452:	484b      	ldr	r0, [pc, #300]	@ (801e580 <RegionUS915NextChannel+0x17c>)
 801e454:	f7f8 f807 	bl	8016466 <RegionCommonChanMaskCopy>
	}
	// Check other channels
	if (nextChanParams->Datarate >= DR_4)
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801e45e:	2b03      	cmp	r3, #3
 801e460:	dd08      	ble.n	801e474 <RegionUS915NextChannel+0x70>
	{
		if ((ChannelsMaskRemaining[4] & 0x00FF) == 0)
 801e462:	4b47      	ldr	r3, [pc, #284]	@ (801e580 <RegionUS915NextChannel+0x17c>)
 801e464:	891b      	ldrh	r3, [r3, #8]
 801e466:	b2db      	uxtb	r3, r3
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d103      	bne.n	801e474 <RegionUS915NextChannel+0x70>
		{
			ChannelsMaskRemaining[4] = ChannelsMask[4];
 801e46c:	4b45      	ldr	r3, [pc, #276]	@ (801e584 <RegionUS915NextChannel+0x180>)
 801e46e:	891a      	ldrh	r2, [r3, #8]
 801e470:	4b43      	ldr	r3, [pc, #268]	@ (801e580 <RegionUS915NextChannel+0x17c>)
 801e472:	811a      	strh	r2, [r3, #8]
		}
	}

	if (nextChanParams->AggrTimeOff <= TimerGetElapsedTime(nextChanParams->LastAggrTx))
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	e9d3 4500 	ldrd	r4, r5, [r3]
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e480:	4610      	mov	r0, r2
 801e482:	4619      	mov	r1, r3
 801e484:	f002 fdea 	bl	802105c <util_timer_get_elapsedtime>
 801e488:	4602      	mov	r2, r0
 801e48a:	460b      	mov	r3, r1
 801e48c:	42a2      	cmp	r2, r4
 801e48e:	41ab      	sbcs	r3, r5
 801e490:	d323      	bcc.n	801e4da <RegionUS915NextChannel+0xd6>
	{
		// Reset Aggregated time off
		*aggregatedTimeOff = 0;
 801e492:	6839      	ldr	r1, [r7, #0]
 801e494:	f04f 0200 	mov.w	r2, #0
 801e498:	f04f 0300 	mov.w	r3, #0
 801e49c:	e9c1 2300 	strd	r2, r3, [r1]

		// Update bands Time OFF
		nextTxDelay = RegionCommonUpdateBandTimeOff(nextChanParams->Joined, nextChanParams->DutyCycleEnabled, Bands, US915_MAX_NB_BANDS);
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	7c58      	ldrb	r0, [r3, #17]
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	7c99      	ldrb	r1, [r3, #18]
 801e4a8:	2301      	movs	r3, #1
 801e4aa:	4a37      	ldr	r2, [pc, #220]	@ (801e588 <RegionUS915NextChannel+0x184>)
 801e4ac:	f7f8 f823 	bl	80164f6 <RegionCommonUpdateBandTimeOff>
 801e4b0:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60

		// Search how many channels are enabled
		nbEnabledChannels = CountNbOfEnabledChannels(nextChanParams->Datarate,
 801e4b4:	68fb      	ldr	r3, [r7, #12]
 801e4b6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 801e4ba:	b2d8      	uxtb	r0, r3
 801e4bc:	f107 035f 	add.w	r3, r7, #95	@ 0x5f
 801e4c0:	9301      	str	r3, [sp, #4]
 801e4c2:	f107 0314 	add.w	r3, r7, #20
 801e4c6:	9300      	str	r3, [sp, #0]
 801e4c8:	4b2f      	ldr	r3, [pc, #188]	@ (801e588 <RegionUS915NextChannel+0x184>)
 801e4ca:	4a30      	ldr	r2, [pc, #192]	@ (801e58c <RegionUS915NextChannel+0x188>)
 801e4cc:	492c      	ldr	r1, [pc, #176]	@ (801e580 <RegionUS915NextChannel+0x17c>)
 801e4ce:	f7ff f886 	bl	801d5de <CountNbOfEnabledChannels>
 801e4d2:	4603      	mov	r3, r0
 801e4d4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 801e4d8:	e017      	b.n	801e50a <RegionUS915NextChannel+0x106>
													 ChannelsMaskRemaining, Channels,
													 Bands, enabledChannels, &delayTx);
	}
	else
	{
		delayTx++;
 801e4da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e4de:	3301      	adds	r3, #1
 801e4e0:	b2db      	uxtb	r3, r3
 801e4e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		nextTxDelay = nextChanParams->AggrTimeOff - TimerGetElapsedTime(nextChanParams->LastAggrTx);
 801e4e6:	68fb      	ldr	r3, [r7, #12]
 801e4e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 801e4ec:	68fb      	ldr	r3, [r7, #12]
 801e4ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e4f2:	4610      	mov	r0, r2
 801e4f4:	4619      	mov	r1, r3
 801e4f6:	f002 fdb1 	bl	802105c <util_timer_get_elapsedtime>
 801e4fa:	4602      	mov	r2, r0
 801e4fc:	460b      	mov	r3, r1
 801e4fe:	ebb4 0802 	subs.w	r8, r4, r2
 801e502:	eb65 0903 	sbc.w	r9, r5, r3
 801e506:	e9c7 8918 	strd	r8, r9, [r7, #96]	@ 0x60
	}

	if (nbEnabledChannels > 0)
 801e50a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d01d      	beq.n	801e54e <RegionUS915NextChannel+0x14a>
	{
		// We found a valid channel
		*channel = enabledChannels[randr(0, nbEnabledChannels - 1)];
 801e512:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801e516:	3b01      	subs	r3, #1
 801e518:	4619      	mov	r1, r3
 801e51a:	2000      	movs	r0, #0
 801e51c:	f002 fb2a 	bl	8020b74 <randr>
 801e520:	4603      	mov	r3, r0
 801e522:	3370      	adds	r3, #112	@ 0x70
 801e524:	443b      	add	r3, r7
 801e526:	f813 2c5c 	ldrb.w	r2, [r3, #-92]
 801e52a:	68bb      	ldr	r3, [r7, #8]
 801e52c:	701a      	strb	r2, [r3, #0]
		// Disable the channel in the mask
		RegionCommonChanDisable(ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS - 8);
 801e52e:	68bb      	ldr	r3, [r7, #8]
 801e530:	781b      	ldrb	r3, [r3, #0]
 801e532:	2240      	movs	r2, #64	@ 0x40
 801e534:	4619      	mov	r1, r3
 801e536:	4812      	ldr	r0, [pc, #72]	@ (801e580 <RegionUS915NextChannel+0x17c>)
 801e538:	f7f7 ff34 	bl	80163a4 <RegionCommonChanDisable>

		*time = 0;
 801e53c:	6879      	ldr	r1, [r7, #4]
 801e53e:	f04f 0200 	mov.w	r2, #0
 801e542:	f04f 0300 	mov.w	r3, #0
 801e546:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 801e54a:	2301      	movs	r3, #1
 801e54c:	e012      	b.n	801e574 <RegionUS915NextChannel+0x170>
	}
	else
	{
		if (delayTx > 0)
 801e54e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801e552:	2b00      	cmp	r3, #0
 801e554:	d006      	beq.n	801e564 <RegionUS915NextChannel+0x160>
		{
			// Delay transmission due to AggregatedTimeOff or to a band time off
			*time = nextTxDelay;
 801e556:	6879      	ldr	r1, [r7, #4]
 801e558:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 801e55c:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 801e560:	2301      	movs	r3, #1
 801e562:	e007      	b.n	801e574 <RegionUS915NextChannel+0x170>
		}
		// Datarate not supported by any channel
		*time = 0;
 801e564:	6879      	ldr	r1, [r7, #4]
 801e566:	f04f 0200 	mov.w	r2, #0
 801e56a:	f04f 0300 	mov.w	r3, #0
 801e56e:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 801e572:	2300      	movs	r3, #0
	}
}
 801e574:	4618      	mov	r0, r3
 801e576:	3770      	adds	r7, #112	@ 0x70
 801e578:	46bd      	mov	sp, r7
 801e57a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e57e:	bf00      	nop
 801e580:	20006cb4 	.word	0x20006cb4
 801e584:	20006c9c 	.word	0x20006c9c
 801e588:	20000278 	.word	0x20000278
 801e58c:	20007aac 	.word	0x20007aac

0801e590 <RegionUS915SetContinuousWave>:
{
	return false; // LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave(ContinuousWaveParams_t *continuousWave)
{
 801e590:	b580      	push	{r7, lr}
 801e592:	b084      	sub	sp, #16
 801e594:	af00      	add	r7, sp, #0
 801e596:	6078      	str	r0, [r7, #4]
	int8_t txPowerLimited = LimitTxPower(continuousWave->TxPower, Bands[Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, ChannelsMask);
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	781b      	ldrb	r3, [r3, #0]
 801e5a2:	4619      	mov	r1, r3
 801e5a4:	4a1c      	ldr	r2, [pc, #112]	@ (801e618 <RegionUS915SetContinuousWave+0x88>)
 801e5a6:	460b      	mov	r3, r1
 801e5a8:	005b      	lsls	r3, r3, #1
 801e5aa:	440b      	add	r3, r1
 801e5ac:	009b      	lsls	r3, r3, #2
 801e5ae:	4413      	add	r3, r2
 801e5b0:	3309      	adds	r3, #9
 801e5b2:	781b      	ldrb	r3, [r3, #0]
 801e5b4:	4a19      	ldr	r2, [pc, #100]	@ (801e61c <RegionUS915SetContinuousWave+0x8c>)
 801e5b6:	015b      	lsls	r3, r3, #5
 801e5b8:	4413      	add	r3, r2
 801e5ba:	3302      	adds	r3, #2
 801e5bc:	f993 1000 	ldrsb.w	r1, [r3]
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801e5c6:	4b16      	ldr	r3, [pc, #88]	@ (801e620 <RegionUS915SetContinuousWave+0x90>)
 801e5c8:	f7fe ffd6 	bl	801d578 <LimitTxPower>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	73fb      	strb	r3, [r7, #15]
	int8_t phyTxPower = 0;
 801e5d0:	2300      	movs	r3, #0
 801e5d2:	73bb      	strb	r3, [r7, #14]
	uint32_t frequency = Channels[continuousWave->Channel].Frequency;
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	781b      	ldrb	r3, [r3, #0]
 801e5d8:	4619      	mov	r1, r3
 801e5da:	4a0f      	ldr	r2, [pc, #60]	@ (801e618 <RegionUS915SetContinuousWave+0x88>)
 801e5dc:	460b      	mov	r3, r1
 801e5de:	005b      	lsls	r3, r3, #1
 801e5e0:	440b      	add	r3, r1
 801e5e2:	009b      	lsls	r3, r3, #2
 801e5e4:	4413      	add	r3, r2
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	60bb      	str	r3, [r7, #8]

	// Calculate physical TX power
	phyTxPower = RegionCommonComputeTxPower(txPowerLimited, US915_DEFAULT_MAX_ERP, 0);
 801e5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e5ee:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 801e624 <RegionUS915SetContinuousWave+0x94>
 801e5f2:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	f7f8 fa6c 	bl	8016ad4 <RegionCommonComputeTxPower>
 801e5fc:	4603      	mov	r3, r0
 801e5fe:	73bb      	strb	r3, [r7, #14]

	Radio.SetTxContinuousWave(frequency, phyTxPower, continuousWave->Timeout);
 801e600:	4b09      	ldr	r3, [pc, #36]	@ (801e628 <RegionUS915SetContinuousWave+0x98>)
 801e602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e604:	687a      	ldr	r2, [r7, #4]
 801e606:	8992      	ldrh	r2, [r2, #12]
 801e608:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801e60c:	68b8      	ldr	r0, [r7, #8]
 801e60e:	4798      	blx	r3
}
 801e610:	bf00      	nop
 801e612:	3710      	adds	r7, #16
 801e614:	46bd      	mov	sp, r7
 801e616:	bd80      	pop	{r7, pc}
 801e618:	20007aac 	.word	0x20007aac
 801e61c:	20000278 	.word	0x20000278
 801e620:	20006c9c 	.word	0x20006c9c
 801e624:	00000000 	.word	0x00000000
 801e628:	08025450 	.word	0x08025450

0801e62c <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset(uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset)
{
 801e62c:	b480      	push	{r7}
 801e62e:	b085      	sub	sp, #20
 801e630:	af00      	add	r7, sp, #0
 801e632:	4603      	mov	r3, r0
 801e634:	71fb      	strb	r3, [r7, #7]
 801e636:	460b      	mov	r3, r1
 801e638:	71bb      	strb	r3, [r7, #6]
 801e63a:	4613      	mov	r3, r2
 801e63c:	717b      	strb	r3, [r7, #5]
	int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801e63e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801e642:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801e646:	4909      	ldr	r1, [pc, #36]	@ (801e66c <RegionUS915ApplyDrOffset+0x40>)
 801e648:	0092      	lsls	r2, r2, #2
 801e64a:	440a      	add	r2, r1
 801e64c:	4413      	add	r3, r2
 801e64e:	781b      	ldrb	r3, [r3, #0]
 801e650:	73fb      	strb	r3, [r7, #15]

	if (datarate < 0)
 801e652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e656:	2b00      	cmp	r3, #0
 801e658:	da01      	bge.n	801e65e <RegionUS915ApplyDrOffset+0x32>
	{
		datarate = DR_0;
 801e65a:	2300      	movs	r3, #0
 801e65c:	73fb      	strb	r3, [r7, #15]
	}
	return datarate;
 801e65e:	7bfb      	ldrb	r3, [r7, #15]
}
 801e660:	4618      	mov	r0, r3
 801e662:	3714      	adds	r7, #20
 801e664:	46bd      	mov	sp, r7
 801e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e66a:	4770      	bx	lr
 801e66c:	0802541c 	.word	0x0802541c

0801e670 <RadioGetFskBandwidthRegValue>:
 * Returns the known FSK bandwidth registers value
 *
 * @param  bandwidth Bandwidth value in Hz
 * @retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue(uint32_t bandwidth) {
 801e670:	b480      	push	{r7}
 801e672:	b085      	sub	sp, #20
 801e674:	af00      	add	r7, sp, #0
 801e676:	6078      	str	r0, [r7, #4]
	uint8_t i;

	if (bandwidth == 0) {
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d101      	bne.n	801e682 <RadioGetFskBandwidthRegValue+0x12>
		return (0x1F);
 801e67e:	231f      	movs	r3, #31
 801e680:	e01f      	b.n	801e6c2 <RadioGetFskBandwidthRegValue+0x52>
	}

	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 801e682:	2300      	movs	r3, #0
 801e684:	73fb      	strb	r3, [r7, #15]
 801e686:	e018      	b.n	801e6ba <RadioGetFskBandwidthRegValue+0x4a>
		if ((bandwidth >= FskBandwidths[i].bandwidth)
 801e688:	7bfb      	ldrb	r3, [r7, #15]
 801e68a:	4a11      	ldr	r2, [pc, #68]	@ (801e6d0 <RadioGetFskBandwidthRegValue+0x60>)
 801e68c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e690:	687a      	ldr	r2, [r7, #4]
 801e692:	429a      	cmp	r2, r3
 801e694:	d30e      	bcc.n	801e6b4 <RadioGetFskBandwidthRegValue+0x44>
				&& (bandwidth < FskBandwidths[i + 1].bandwidth)) {
 801e696:	7bfb      	ldrb	r3, [r7, #15]
 801e698:	3301      	adds	r3, #1
 801e69a:	4a0d      	ldr	r2, [pc, #52]	@ (801e6d0 <RadioGetFskBandwidthRegValue+0x60>)
 801e69c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e6a0:	687a      	ldr	r2, [r7, #4]
 801e6a2:	429a      	cmp	r2, r3
 801e6a4:	d206      	bcs.n	801e6b4 <RadioGetFskBandwidthRegValue+0x44>
			return FskBandwidths[i + 1].RegValue;
 801e6a6:	7bfb      	ldrb	r3, [r7, #15]
 801e6a8:	3301      	adds	r3, #1
 801e6aa:	4a09      	ldr	r2, [pc, #36]	@ (801e6d0 <RadioGetFskBandwidthRegValue+0x60>)
 801e6ac:	00db      	lsls	r3, r3, #3
 801e6ae:	4413      	add	r3, r2
 801e6b0:	791b      	ldrb	r3, [r3, #4]
 801e6b2:	e006      	b.n	801e6c2 <RadioGetFskBandwidthRegValue+0x52>
	for (i = 0; i < (sizeof(FskBandwidths) / sizeof(FskBandwidth_t)) - 1; i++) {
 801e6b4:	7bfb      	ldrb	r3, [r7, #15]
 801e6b6:	3301      	adds	r3, #1
 801e6b8:	73fb      	strb	r3, [r7, #15]
 801e6ba:	7bfb      	ldrb	r3, [r7, #15]
 801e6bc:	2b14      	cmp	r3, #20
 801e6be:	d9e3      	bls.n	801e688 <RadioGetFskBandwidthRegValue+0x18>
		}
	}
	// In case value not found, return bandwidth 0
	return (0x1F);
 801e6c0:	231f      	movs	r3, #31
	// ERROR: Value not found
	// while (1)
	// 	;
}
 801e6c2:	4618      	mov	r0, r3
 801e6c4:	3714      	adds	r7, #20
 801e6c6:	46bd      	mov	sp, r7
 801e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6cc:	4770      	bx	lr
 801e6ce:	bf00      	nop
 801e6d0:	080254cc 	.word	0x080254cc

0801e6d4 <RadioInit>:

void RadioInit(RadioEvents_t *events) {
 801e6d4:	b580      	push	{r7, lr}
 801e6d6:	b086      	sub	sp, #24
 801e6d8:	af04      	add	r7, sp, #16
 801e6da:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 801e6dc:	4a1d      	ldr	r2, [pc, #116]	@ (801e754 <RadioInit+0x80>)
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	6013      	str	r3, [r2, #0]
	SX126xInit();
 801e6e2:	f001 f977 	bl	801f9d4 <SX126xInit>
	SX126xSetStandby(STDBY_RC);
 801e6e6:	2000      	movs	r0, #0
 801e6e8:	f001 fab0 	bl	801fc4c <SX126xSetStandby>
	SX126xSetRegulatorMode(USE_LDO);
 801e6ec:	2000      	movs	r0, #0
 801e6ee:	f001 fb85 	bl	801fdfc <SX126xSetRegulatorMode>

	SX126xSetBufferBaseAddress(0x00, 0x00);
 801e6f2:	2100      	movs	r1, #0
 801e6f4:	2000      	movs	r0, #0
 801e6f6:	f001 fe7f 	bl	80203f8 <SX126xSetBufferBaseAddress>
	SX126xSetTxParams(0, RADIO_RAMP_200_US);
 801e6fa:	2104      	movs	r1, #4
 801e6fc:	2000      	movs	r0, #0
 801e6fe:	f001 fcb9 	bl	8020074 <SX126xSetTxParams>
	SX126xSetDioIrqParams(IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE,
 801e702:	2300      	movs	r3, #0
 801e704:	2200      	movs	r2, #0
 801e706:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801e70a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801e70e:	f001 fbed 	bl	801feec <SX126xSetDioIrqParams>
			IRQ_RADIO_NONE);

	// Initialize driver timeout timers
	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
 801e712:	2300      	movs	r3, #0
 801e714:	9302      	str	r3, [sp, #8]
 801e716:	4b10      	ldr	r3, [pc, #64]	@ (801e758 <RadioInit+0x84>)
 801e718:	9301      	str	r3, [sp, #4]
 801e71a:	2300      	movs	r3, #0
 801e71c:	9300      	str	r3, [sp, #0]
 801e71e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e722:	f04f 0300 	mov.w	r3, #0
 801e726:	480d      	ldr	r0, [pc, #52]	@ (801e75c <RadioInit+0x88>)
 801e728:	f002 fb4c 	bl	8020dc4 <util_timer_create>
	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);
 801e72c:	2300      	movs	r3, #0
 801e72e:	9302      	str	r3, [sp, #8]
 801e730:	4b0b      	ldr	r3, [pc, #44]	@ (801e760 <RadioInit+0x8c>)
 801e732:	9301      	str	r3, [sp, #4]
 801e734:	2300      	movs	r3, #0
 801e736:	9300      	str	r3, [sp, #0]
 801e738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e73c:	f04f 0300 	mov.w	r3, #0
 801e740:	4808      	ldr	r0, [pc, #32]	@ (801e764 <RadioInit+0x90>)
 801e742:	f002 fb3f 	bl	8020dc4 <util_timer_create>

	IrqFired = false;
 801e746:	4b08      	ldr	r3, [pc, #32]	@ (801e768 <RadioInit+0x94>)
 801e748:	2200      	movs	r2, #0
 801e74a:	701a      	strb	r2, [r3, #0]
}
 801e74c:	bf00      	nop
 801e74e:	3708      	adds	r7, #8
 801e750:	46bd      	mov	sp, r7
 801e752:	bd80      	pop	{r7, pc}
 801e754:	20007f7c 	.word	0x20007f7c
 801e758:	0801f591 	.word	0x0801f591
 801e75c:	20007e10 	.word	0x20007e10
 801e760:	0801f5c9 	.word	0x0801f5c9
 801e764:	20007e30 	.word	0x20007e30
 801e768:	20007f6f 	.word	0x20007f6f

0801e76c <RadioReInit>:

void RadioReInit(RadioEvents_t *events) {
 801e76c:	b580      	push	{r7, lr}
 801e76e:	b086      	sub	sp, #24
 801e770:	af04      	add	r7, sp, #16
 801e772:	6078      	str	r0, [r7, #4]
	RadioEvents = events;
 801e774:	4a12      	ldr	r2, [pc, #72]	@ (801e7c0 <RadioReInit+0x54>)
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	6013      	str	r3, [r2, #0]
	SX126xReInit();
 801e77a:	f001 f93c 	bl	801f9f6 <SX126xReInit>

	// Initialize driver timeout timers
	TimerInit(&TxTimeoutTimer, RadioOnTxTimeoutIrq);
 801e77e:	2300      	movs	r3, #0
 801e780:	9302      	str	r3, [sp, #8]
 801e782:	4b10      	ldr	r3, [pc, #64]	@ (801e7c4 <RadioReInit+0x58>)
 801e784:	9301      	str	r3, [sp, #4]
 801e786:	2300      	movs	r3, #0
 801e788:	9300      	str	r3, [sp, #0]
 801e78a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e78e:	f04f 0300 	mov.w	r3, #0
 801e792:	480d      	ldr	r0, [pc, #52]	@ (801e7c8 <RadioReInit+0x5c>)
 801e794:	f002 fb16 	bl	8020dc4 <util_timer_create>
	TimerInit(&RxTimeoutTimer, RadioOnRxTimeoutIrq);
 801e798:	2300      	movs	r3, #0
 801e79a:	9302      	str	r3, [sp, #8]
 801e79c:	4b0b      	ldr	r3, [pc, #44]	@ (801e7cc <RadioReInit+0x60>)
 801e79e:	9301      	str	r3, [sp, #4]
 801e7a0:	2300      	movs	r3, #0
 801e7a2:	9300      	str	r3, [sp, #0]
 801e7a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e7a8:	f04f 0300 	mov.w	r3, #0
 801e7ac:	4808      	ldr	r0, [pc, #32]	@ (801e7d0 <RadioReInit+0x64>)
 801e7ae:	f002 fb09 	bl	8020dc4 <util_timer_create>

	IrqFired = false;
 801e7b2:	4b08      	ldr	r3, [pc, #32]	@ (801e7d4 <RadioReInit+0x68>)
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	701a      	strb	r2, [r3, #0]
}
 801e7b8:	bf00      	nop
 801e7ba:	3708      	adds	r7, #8
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	bd80      	pop	{r7, pc}
 801e7c0:	20007f7c 	.word	0x20007f7c
 801e7c4:	0801f591 	.word	0x0801f591
 801e7c8:	20007e10 	.word	0x20007e10
 801e7cc:	0801f5c9 	.word	0x0801f5c9
 801e7d0:	20007e30 	.word	0x20007e30
 801e7d4:	20007f6f 	.word	0x20007f6f

0801e7d8 <RadioGetStatus>:

RadioState_t RadioGetStatus(void) {
 801e7d8:	b580      	push	{r7, lr}
 801e7da:	af00      	add	r7, sp, #0
	switch (SX126xGetOperatingMode()) {
 801e7dc:	f001 f912 	bl	801fa04 <SX126xGetOperatingMode>
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	2b07      	cmp	r3, #7
 801e7e4:	d00a      	beq.n	801e7fc <RadioGetStatus+0x24>
 801e7e6:	2b07      	cmp	r3, #7
 801e7e8:	dc0a      	bgt.n	801e800 <RadioGetStatus+0x28>
 801e7ea:	2b04      	cmp	r3, #4
 801e7ec:	d002      	beq.n	801e7f4 <RadioGetStatus+0x1c>
 801e7ee:	2b05      	cmp	r3, #5
 801e7f0:	d002      	beq.n	801e7f8 <RadioGetStatus+0x20>
 801e7f2:	e005      	b.n	801e800 <RadioGetStatus+0x28>
		case MODE_TX:
			return RF_TX_RUNNING;
 801e7f4:	2302      	movs	r3, #2
 801e7f6:	e004      	b.n	801e802 <RadioGetStatus+0x2a>
		case MODE_RX:
			return RF_RX_RUNNING;
 801e7f8:	2301      	movs	r3, #1
 801e7fa:	e002      	b.n	801e802 <RadioGetStatus+0x2a>
		case MODE_CAD:
			return RF_CAD;
 801e7fc:	2303      	movs	r3, #3
 801e7fe:	e000      	b.n	801e802 <RadioGetStatus+0x2a>
		default:
			return RF_IDLE;
 801e800:	2300      	movs	r3, #0
	}
}
 801e802:	4618      	mov	r0, r3
 801e804:	bd80      	pop	{r7, pc}
	...

0801e808 <RadioSetModem>:

void RadioSetModem(RadioModems_t modem) {
 801e808:	b580      	push	{r7, lr}
 801e80a:	b082      	sub	sp, #8
 801e80c:	af00      	add	r7, sp, #0
 801e80e:	4603      	mov	r3, r0
 801e810:	71fb      	strb	r3, [r7, #7]
	switch (modem) {
 801e812:	79fb      	ldrb	r3, [r7, #7]
 801e814:	2b01      	cmp	r3, #1
 801e816:	d009      	beq.n	801e82c <RadioSetModem+0x24>
		default:
		case MODEM_FSK:
			SX126xSetPacketType(PACKET_TYPE_GFSK);
 801e818:	2000      	movs	r0, #0
 801e81a:	f001 fc0b 	bl	8020034 <SX126xSetPacketType>
			// When switching to GFSK mode the LoRa SyncWord register value is reset
			// Thus, we also reset the RadioPublicNetwork variable
			RadioPublicNetwork.Current = false;
 801e81e:	4b10      	ldr	r3, [pc, #64]	@ (801e860 <RadioSetModem+0x58>)
 801e820:	2200      	movs	r2, #0
 801e822:	705a      	strb	r2, [r3, #1]
			_modem = modem;
 801e824:	4a0f      	ldr	r2, [pc, #60]	@ (801e864 <RadioSetModem+0x5c>)
 801e826:	79fb      	ldrb	r3, [r7, #7]
 801e828:	7013      	strb	r3, [r2, #0]
		break;
 801e82a:	e015      	b.n	801e858 <RadioSetModem+0x50>
		case MODEM_LORA:
			SX126xSetPacketType(PACKET_TYPE_LORA);
 801e82c:	2001      	movs	r0, #1
 801e82e:	f001 fc01 	bl	8020034 <SX126xSetPacketType>
			// Public/Private network register is reset when switching modems
			if (RadioPublicNetwork.Current != RadioPublicNetwork.Previous) {
 801e832:	4b0b      	ldr	r3, [pc, #44]	@ (801e860 <RadioSetModem+0x58>)
 801e834:	785a      	ldrb	r2, [r3, #1]
 801e836:	4b0a      	ldr	r3, [pc, #40]	@ (801e860 <RadioSetModem+0x58>)
 801e838:	781b      	ldrb	r3, [r3, #0]
 801e83a:	429a      	cmp	r2, r3
 801e83c:	d008      	beq.n	801e850 <RadioSetModem+0x48>
				RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 801e83e:	4b08      	ldr	r3, [pc, #32]	@ (801e860 <RadioSetModem+0x58>)
 801e840:	781a      	ldrb	r2, [r3, #0]
 801e842:	4b07      	ldr	r3, [pc, #28]	@ (801e860 <RadioSetModem+0x58>)
 801e844:	705a      	strb	r2, [r3, #1]
				RadioSetPublicNetwork(RadioPublicNetwork.Current);
 801e846:	4b06      	ldr	r3, [pc, #24]	@ (801e860 <RadioSetModem+0x58>)
 801e848:	785b      	ldrb	r3, [r3, #1]
 801e84a:	4618      	mov	r0, r3
 801e84c:	f000 fe6a 	bl	801f524 <RadioSetPublicNetwork>
			}
			_modem = modem;
 801e850:	4a04      	ldr	r2, [pc, #16]	@ (801e864 <RadioSetModem+0x5c>)
 801e852:	79fb      	ldrb	r3, [r7, #7]
 801e854:	7013      	strb	r3, [r2, #0]
		break;
 801e856:	bf00      	nop
	}
}
 801e858:	bf00      	nop
 801e85a:	3708      	adds	r7, #8
 801e85c:	46bd      	mov	sp, r7
 801e85e:	bd80      	pop	{r7, pc}
 801e860:	20007f78 	.word	0x20007f78
 801e864:	20007f72 	.word	0x20007f72

0801e868 <RadioSetChannel>:

void RadioSetChannel(uint32_t freq) {
 801e868:	b580      	push	{r7, lr}
 801e86a:	b082      	sub	sp, #8
 801e86c:	af00      	add	r7, sp, #0
 801e86e:	6078      	str	r0, [r7, #4]
	SX126xSetRfFrequency(freq);
 801e870:	6878      	ldr	r0, [r7, #4]
 801e872:	f001 fb99 	bl	801ffa8 <SX126xSetRfFrequency>
}
 801e876:	bf00      	nop
 801e878:	3708      	adds	r7, #8
 801e87a:	46bd      	mov	sp, r7
 801e87c:	bd80      	pop	{r7, pc}

0801e87e <RadioIsChannelFree>:

bool RadioIsChannelFree(RadioModems_t modem, uint32_t freq, int16_t rssiThresh,
		uint32_t maxCarrierSenseTime) {
 801e87e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e882:	b086      	sub	sp, #24
 801e884:	af00      	add	r7, sp, #0
 801e886:	60b9      	str	r1, [r7, #8]
 801e888:	607b      	str	r3, [r7, #4]
 801e88a:	4603      	mov	r3, r0
 801e88c:	73fb      	strb	r3, [r7, #15]
 801e88e:	4613      	mov	r3, r2
 801e890:	81bb      	strh	r3, [r7, #12]
	bool status = true;
 801e892:	2301      	movs	r3, #1
 801e894:	75fb      	strb	r3, [r7, #23]
	int16_t rssi = 0;
 801e896:	2300      	movs	r3, #0
 801e898:	82bb      	strh	r3, [r7, #20]
	uint32_t carrierSenseTime = 0;
 801e89a:	2300      	movs	r3, #0
 801e89c:	613b      	str	r3, [r7, #16]

	if (RadioGetStatus() != RF_IDLE) {
 801e89e:	f7ff ff9b 	bl	801e7d8 <RadioGetStatus>
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d001      	beq.n	801e8ac <RadioIsChannelFree+0x2e>
		return false;
 801e8a8:	2300      	movs	r3, #0
 801e8aa:	e036      	b.n	801e91a <RadioIsChannelFree+0x9c>
	}

	RadioSetModem(modem);
 801e8ac:	7bfb      	ldrb	r3, [r7, #15]
 801e8ae:	4618      	mov	r0, r3
 801e8b0:	f7ff ffaa 	bl	801e808 <RadioSetModem>

	RadioSetChannel(freq);
 801e8b4:	68b8      	ldr	r0, [r7, #8]
 801e8b6:	f7ff ffd7 	bl	801e868 <RadioSetChannel>

	RadioRx(0);
 801e8ba:	2000      	movs	r0, #0
 801e8bc:	f000 fcd2 	bl	801f264 <RadioRx>

	vTaskDelay(1);
 801e8c0:	2001      	movs	r0, #1
 801e8c2:	f7e9 ff7d 	bl	80087c0 <vTaskDelay>

	carrierSenseTime = TimerGetCurrentTime();
 801e8c6:	f002 fbbd 	bl	8021044 <util_timer_get_currenttime>
 801e8ca:	4602      	mov	r2, r0
 801e8cc:	460b      	mov	r3, r1
 801e8ce:	4613      	mov	r3, r2
 801e8d0:	613b      	str	r3, [r7, #16]

	// Perform carrier sense for maxCarrierSenseTime
	while (TimerGetElapsedTime(carrierSenseTime) < maxCarrierSenseTime) {
 801e8d2:	e00e      	b.n	801e8f2 <RadioIsChannelFree+0x74>
		rssi = RadioRssi(modem);
 801e8d4:	7bfb      	ldrb	r3, [r7, #15]
 801e8d6:	4618      	mov	r0, r3
 801e8d8:	f000 fda2 	bl	801f420 <RadioRssi>
 801e8dc:	4603      	mov	r3, r0
 801e8de:	82bb      	strh	r3, [r7, #20]

		if (rssi > rssiThresh) {
 801e8e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801e8e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801e8e8:	429a      	cmp	r2, r3
 801e8ea:	dd02      	ble.n	801e8f2 <RadioIsChannelFree+0x74>
			status = false;
 801e8ec:	2300      	movs	r3, #0
 801e8ee:	75fb      	strb	r3, [r7, #23]
			break;
 801e8f0:	e010      	b.n	801e914 <RadioIsChannelFree+0x96>
	while (TimerGetElapsedTime(carrierSenseTime) < maxCarrierSenseTime) {
 801e8f2:	693b      	ldr	r3, [r7, #16]
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	4698      	mov	r8, r3
 801e8f8:	4691      	mov	r9, r2
 801e8fa:	4640      	mov	r0, r8
 801e8fc:	4649      	mov	r1, r9
 801e8fe:	f002 fbad 	bl	802105c <util_timer_get_elapsedtime>
 801e902:	4602      	mov	r2, r0
 801e904:	460b      	mov	r3, r1
 801e906:	6879      	ldr	r1, [r7, #4]
 801e908:	2000      	movs	r0, #0
 801e90a:	460c      	mov	r4, r1
 801e90c:	4605      	mov	r5, r0
 801e90e:	42a2      	cmp	r2, r4
 801e910:	41ab      	sbcs	r3, r5
 801e912:	d3df      	bcc.n	801e8d4 <RadioIsChannelFree+0x56>
		}
	}
	RadioSleep();
 801e914:	f000 fc8c 	bl	801f230 <RadioSleep>
	return status;
 801e918:	7dfb      	ldrb	r3, [r7, #23]
}
 801e91a:	4618      	mov	r0, r3
 801e91c:	3718      	adds	r7, #24
 801e91e:	46bd      	mov	sp, r7
 801e920:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801e924 <RadioRandom>:

uint32_t RadioRandom(void) {
 801e924:	b580      	push	{r7, lr}
 801e926:	b082      	sub	sp, #8
 801e928:	af00      	add	r7, sp, #0
	uint32_t rnd = 0;
 801e92a:	2300      	movs	r3, #0
 801e92c:	607b      	str	r3, [r7, #4]

	/*
	 * Radio setup for random number generation
	 */
	// Set LoRa modem ON
	RadioSetModem(MODEM_LORA);
 801e92e:	2001      	movs	r0, #1
 801e930:	f7ff ff6a 	bl	801e808 <RadioSetModem>

	// Set radio in continuous reception
	SX126xSetRx(0);
 801e934:	2000      	movs	r0, #0
 801e936:	f001 f9c1 	bl	801fcbc <SX126xSetRx>

	rnd = SX126xGetRandom();
 801e93a:	f001 f95a 	bl	801fbf2 <SX126xGetRandom>
 801e93e:	6078      	str	r0, [r7, #4]
	RadioSleep();
 801e940:	f000 fc76 	bl	801f230 <RadioSleep>

	return rnd;
 801e944:	687b      	ldr	r3, [r7, #4]
}
 801e946:	4618      	mov	r0, r3
 801e948:	3708      	adds	r7, #8
 801e94a:	46bd      	mov	sp, r7
 801e94c:	bd80      	pop	{r7, pc}
	...

0801e950 <RadioSetRxConfig>:
void RadioSetRxConfig(RadioModems_t modem, uint32_t bandwidth,
		uint32_t datarate, uint8_t coderate, uint32_t bandwidthAfc,
		uint16_t preambleLen, uint16_t symbTimeout, bool fixLen,
		uint8_t payloadLen,
		bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, bool rxContinuous) {
 801e950:	b5b0      	push	{r4, r5, r7, lr}
 801e952:	b086      	sub	sp, #24
 801e954:	af00      	add	r7, sp, #0
 801e956:	60b9      	str	r1, [r7, #8]
 801e958:	607a      	str	r2, [r7, #4]
 801e95a:	461a      	mov	r2, r3
 801e95c:	4603      	mov	r3, r0
 801e95e:	73fb      	strb	r3, [r7, #15]
 801e960:	4613      	mov	r3, r2
 801e962:	73bb      	strb	r3, [r7, #14]

	RxContinuous = rxContinuous;
 801e964:	4aae      	ldr	r2, [pc, #696]	@ (801ec20 <RadioSetRxConfig+0x2d0>)
 801e966:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801e96a:	7013      	strb	r3, [r2, #0]
	if (rxContinuous == true) {
 801e96c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 801e970:	2b00      	cmp	r3, #0
 801e972:	d001      	beq.n	801e978 <RadioSetRxConfig+0x28>
		symbTimeout = 0;
 801e974:	2300      	movs	r3, #0
 801e976:	863b      	strh	r3, [r7, #48]	@ 0x30
	}
	if (fixLen == true) {
 801e978:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d004      	beq.n	801e98a <RadioSetRxConfig+0x3a>
		MaxPayloadLength = payloadLen;
 801e980:	4aa8      	ldr	r2, [pc, #672]	@ (801ec24 <RadioSetRxConfig+0x2d4>)
 801e982:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801e986:	7013      	strb	r3, [r2, #0]
 801e988:	e002      	b.n	801e990 <RadioSetRxConfig+0x40>
	}
	else {
		MaxPayloadLength = 0xFF;
 801e98a:	4ba6      	ldr	r3, [pc, #664]	@ (801ec24 <RadioSetRxConfig+0x2d4>)
 801e98c:	22ff      	movs	r2, #255	@ 0xff
 801e98e:	701a      	strb	r2, [r3, #0]
	}

	switch (modem) {
 801e990:	7bfb      	ldrb	r3, [r7, #15]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d003      	beq.n	801e99e <RadioSetRxConfig+0x4e>
 801e996:	2b01      	cmp	r3, #1
 801e998:	f000 80a4 	beq.w	801eae4 <RadioSetRxConfig+0x194>
			// Timeout Max, Timeout handled directly in SetRx function
			RxTimeout = RXTIMEOUT_LORA_MAX;

		break;
	}
}
 801e99c:	e13b      	b.n	801ec16 <RadioSetRxConfig+0x2c6>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 801e99e:	2000      	movs	r0, #0
 801e9a0:	f001 fa0e 	bl	801fdc0 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801e9a4:	4ba0      	ldr	r3, [pc, #640]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9a6:	2200      	movs	r2, #0
 801e9a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 801e9ac:	4a9e      	ldr	r2, [pc, #632]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	6453      	str	r3, [r2, #68]	@ 0x44
			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 801e9b2:	4b9d      	ldr	r3, [pc, #628]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9b4:	220b      	movs	r2, #11
 801e9b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					RadioGetFskBandwidthRegValue(bandwidth);
 801e9ba:	68b8      	ldr	r0, [r7, #8]
 801e9bc:	f7ff fe58 	bl	801e670 <RadioGetFskBandwidthRegValue>
 801e9c0:	4603      	mov	r3, r0
 801e9c2:	461a      	mov	r2, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 801e9c4:	4b98      	ldr	r3, [pc, #608]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801e9ca:	4b97      	ldr	r3, [pc, #604]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9cc:	2200      	movs	r2, #0
 801e9ce:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 801e9d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801e9d2:	00db      	lsls	r3, r3, #3
 801e9d4:	b29a      	uxth	r2, r3
 801e9d6:	4b94      	ldr	r3, [pc, #592]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9d8:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 801e9da:	4b93      	ldr	r3, [pc, #588]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9dc:	2204      	movs	r2, #4
 801e9de:	771a      	strb	r2, [r3, #28]
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801e9e0:	4b91      	ldr	r3, [pc, #580]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9e2:	2218      	movs	r2, #24
 801e9e4:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 801e9e6:	4b90      	ldr	r3, [pc, #576]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9e8:	2200      	movs	r2, #0
 801e9ea:	779a      	strb	r2, [r3, #30]
							RADIO_PACKET_FIXED_LENGTH :
 801e9ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801e9f0:	f083 0301 	eor.w	r3, r3, #1
 801e9f4:	b2db      	uxtb	r3, r3
 801e9f6:	461a      	mov	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 801e9f8:	4b8b      	ldr	r3, [pc, #556]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801e9fa:	77da      	strb	r2, [r3, #31]
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801e9fc:	4b89      	ldr	r3, [pc, #548]	@ (801ec24 <RadioSetRxConfig+0x2d4>)
 801e9fe:	781a      	ldrb	r2, [r3, #0]
 801ea00:	4b89      	ldr	r3, [pc, #548]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801ea02:	f883 2020 	strb.w	r2, [r3, #32]
			if (crcOn == true) {
 801ea06:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d004      	beq.n	801ea18 <RadioSetRxConfig+0xc8>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 801ea0e:	4b86      	ldr	r3, [pc, #536]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801ea10:	22f2      	movs	r2, #242	@ 0xf2
 801ea12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 801ea16:	e003      	b.n	801ea20 <RadioSetRxConfig+0xd0>
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801ea18:	4b83      	ldr	r3, [pc, #524]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801ea1a:	2201      	movs	r2, #1
 801ea1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801ea20:	4b81      	ldr	r3, [pc, #516]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801ea22:	2201      	movs	r2, #1
 801ea24:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			RadioStandby();
 801ea28:	f000 fc15 	bl	801f256 <RadioStandby>
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 801ea2c:	4b7e      	ldr	r3, [pc, #504]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801ea2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	bf14      	ite	ne
 801ea36:	2301      	movne	r3, #1
 801ea38:	2300      	moveq	r3, #0
 801ea3a:	b2db      	uxtb	r3, r3
 801ea3c:	4618      	mov	r0, r3
 801ea3e:	f7ff fee3 	bl	801e808 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 801ea42:	487a      	ldr	r0, [pc, #488]	@ (801ec2c <RadioSetRxConfig+0x2dc>)
 801ea44:	f001 fb80 	bl	8020148 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 801ea48:	4879      	ldr	r0, [pc, #484]	@ (801ec30 <RadioSetRxConfig+0x2e0>)
 801ea4a:	f001 fc1b 	bl	8020284 <SX126xSetPacketParams>
			syncWord[0] = 0xC1;
 801ea4e:	23c1      	movs	r3, #193	@ 0xc1
 801ea50:	743b      	strb	r3, [r7, #16]
			syncWord[1] = 0x94;
 801ea52:	2394      	movs	r3, #148	@ 0x94
 801ea54:	747b      	strb	r3, [r7, #17]
			syncWord[2] = 0xC1;
 801ea56:	23c1      	movs	r3, #193	@ 0xc1
 801ea58:	74bb      	strb	r3, [r7, #18]
			syncWord[3] = 0x00;
 801ea5a:	2300      	movs	r3, #0
 801ea5c:	74fb      	strb	r3, [r7, #19]
			syncWord[4] = 0x00;
 801ea5e:	2300      	movs	r3, #0
 801ea60:	753b      	strb	r3, [r7, #20]
			syncWord[5] = 0x00;
 801ea62:	2300      	movs	r3, #0
 801ea64:	757b      	strb	r3, [r7, #21]
			syncWord[6] = 0x00;
 801ea66:	2300      	movs	r3, #0
 801ea68:	75bb      	strb	r3, [r7, #22]
			syncWord[7] = 0x00;
 801ea6a:	2300      	movs	r3, #0
 801ea6c:	75fb      	strb	r3, [r7, #23]
			SX126xSetSyncWord(syncWord);
 801ea6e:	f107 0310 	add.w	r3, r7, #16
 801ea72:	4618      	mov	r0, r3
 801ea74:	f001 f83b 	bl	801faee <SX126xSetSyncWord>
			SX126xSetWhiteningSeed(0x01FF);
 801ea78:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801ea7c:	f001 f886 	bl	801fb8c <SX126xSetWhiteningSeed>
					* ((1.0 / (double) datarate) * 8.0) * 1000);
 801ea80:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801ea82:	4618      	mov	r0, r3
 801ea84:	f7e1 fd4e 	bl	8000524 <__aeabi_i2d>
 801ea88:	4604      	mov	r4, r0
 801ea8a:	460d      	mov	r5, r1
 801ea8c:	6878      	ldr	r0, [r7, #4]
 801ea8e:	f7e1 fd39 	bl	8000504 <__aeabi_ui2d>
 801ea92:	4602      	mov	r2, r0
 801ea94:	460b      	mov	r3, r1
 801ea96:	f04f 0000 	mov.w	r0, #0
 801ea9a:	4966      	ldr	r1, [pc, #408]	@ (801ec34 <RadioSetRxConfig+0x2e4>)
 801ea9c:	f7e1 fed6 	bl	800084c <__aeabi_ddiv>
 801eaa0:	4602      	mov	r2, r0
 801eaa2:	460b      	mov	r3, r1
 801eaa4:	4610      	mov	r0, r2
 801eaa6:	4619      	mov	r1, r3
 801eaa8:	f04f 0200 	mov.w	r2, #0
 801eaac:	4b62      	ldr	r3, [pc, #392]	@ (801ec38 <RadioSetRxConfig+0x2e8>)
 801eaae:	f7e1 fda3 	bl	80005f8 <__aeabi_dmul>
 801eab2:	4602      	mov	r2, r0
 801eab4:	460b      	mov	r3, r1
 801eab6:	4620      	mov	r0, r4
 801eab8:	4629      	mov	r1, r5
 801eaba:	f7e1 fd9d 	bl	80005f8 <__aeabi_dmul>
 801eabe:	4602      	mov	r2, r0
 801eac0:	460b      	mov	r3, r1
 801eac2:	4610      	mov	r0, r2
 801eac4:	4619      	mov	r1, r3
 801eac6:	f04f 0200 	mov.w	r2, #0
 801eaca:	4b5c      	ldr	r3, [pc, #368]	@ (801ec3c <RadioSetRxConfig+0x2ec>)
 801eacc:	f7e1 fd94 	bl	80005f8 <__aeabi_dmul>
 801ead0:	4602      	mov	r2, r0
 801ead2:	460b      	mov	r3, r1
			RxTimeout = (uint32_t) (symbTimeout
 801ead4:	4610      	mov	r0, r2
 801ead6:	4619      	mov	r1, r3
 801ead8:	f7e2 f866 	bl	8000ba8 <__aeabi_d2uiz>
 801eadc:	4603      	mov	r3, r0
 801eade:	4a58      	ldr	r2, [pc, #352]	@ (801ec40 <RadioSetRxConfig+0x2f0>)
 801eae0:	6013      	str	r3, [r2, #0]
		break;
 801eae2:	e098      	b.n	801ec16 <RadioSetRxConfig+0x2c6>
			SX126xSetStopRxTimerOnPreambleDetect(false);
 801eae4:	2000      	movs	r0, #0
 801eae6:	f001 f96b 	bl	801fdc0 <SX126xSetStopRxTimerOnPreambleDetect>
			SX126xSetLoRaSymbNumTimeout(symbTimeout);
 801eaea:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801eaec:	b2db      	uxtb	r3, r3
 801eaee:	4618      	mov	r0, r3
 801eaf0:	f001 f975 	bl	801fdde <SX126xSetLoRaSymbNumTimeout>
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801eaf4:	4b4c      	ldr	r3, [pc, #304]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eaf6:	2201      	movs	r2, #1
 801eaf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
					(RadioLoRaSpreadingFactors_t) datarate;
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	b2da      	uxtb	r2, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 801eb00:	4b49      	ldr	r3, [pc, #292]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
					Bandwidths[bandwidth];
 801eb06:	4a4f      	ldr	r2, [pc, #316]	@ (801ec44 <RadioSetRxConfig+0x2f4>)
 801eb08:	68bb      	ldr	r3, [r7, #8]
 801eb0a:	4413      	add	r3, r2
 801eb0c:	781a      	ldrb	r2, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 801eb0e:	4b46      	ldr	r3, [pc, #280]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 801eb14:	4a44      	ldr	r2, [pc, #272]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb16:	7bbb      	ldrb	r3, [r7, #14]
 801eb18:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 801eb1c:	68bb      	ldr	r3, [r7, #8]
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d105      	bne.n	801eb2e <RadioSetRxConfig+0x1de>
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	2b0b      	cmp	r3, #11
 801eb26:	d008      	beq.n	801eb3a <RadioSetRxConfig+0x1ea>
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	2b0c      	cmp	r3, #12
 801eb2c:	d005      	beq.n	801eb3a <RadioSetRxConfig+0x1ea>
					|| ((bandwidth == 1) && (datarate == 12))) {
 801eb2e:	68bb      	ldr	r3, [r7, #8]
 801eb30:	2b01      	cmp	r3, #1
 801eb32:	d107      	bne.n	801eb44 <RadioSetRxConfig+0x1f4>
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	2b0c      	cmp	r3, #12
 801eb38:	d104      	bne.n	801eb44 <RadioSetRxConfig+0x1f4>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801eb3a:	4b3b      	ldr	r3, [pc, #236]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb3c:	2201      	movs	r2, #1
 801eb3e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801eb42:	e003      	b.n	801eb4c <RadioSetRxConfig+0x1fc>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801eb44:	4b38      	ldr	r3, [pc, #224]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb46:	2200      	movs	r2, #0
 801eb48:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 801eb4c:	4b36      	ldr	r3, [pc, #216]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb4e:	2201      	movs	r2, #1
 801eb50:	761a      	strb	r2, [r3, #24]
			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 801eb52:	4b35      	ldr	r3, [pc, #212]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801eb58:	2b05      	cmp	r3, #5
 801eb5a:	d004      	beq.n	801eb66 <RadioSetRxConfig+0x216>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 801eb5c:	4b32      	ldr	r3, [pc, #200]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801eb62:	2b06      	cmp	r3, #6
 801eb64:	d10a      	bne.n	801eb7c <RadioSetRxConfig+0x22c>
				if (preambleLen < 12) {
 801eb66:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801eb68:	2b0b      	cmp	r3, #11
 801eb6a:	d803      	bhi.n	801eb74 <RadioSetRxConfig+0x224>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 801eb6c:	4b2e      	ldr	r3, [pc, #184]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb6e:	220c      	movs	r2, #12
 801eb70:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 801eb72:	e006      	b.n	801eb82 <RadioSetRxConfig+0x232>
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 801eb74:	4a2c      	ldr	r2, [pc, #176]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801eb78:	8493      	strh	r3, [r2, #36]	@ 0x24
				if (preambleLen < 12) {
 801eb7a:	e002      	b.n	801eb82 <RadioSetRxConfig+0x232>
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801eb7c:	4a2a      	ldr	r2, [pc, #168]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801eb80:	8493      	strh	r3, [r2, #36]	@ 0x24
					(RadioLoRaPacketLengthsMode_t) fixLen;
 801eb82:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
			SX126x.PacketParams.Params.LoRa.HeaderType =
 801eb86:	4b28      	ldr	r3, [pc, #160]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb88:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801eb8c:	4b25      	ldr	r3, [pc, #148]	@ (801ec24 <RadioSetRxConfig+0x2d4>)
 801eb8e:	781a      	ldrb	r2, [r3, #0]
 801eb90:	4b25      	ldr	r3, [pc, #148]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb92:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
					(RadioLoRaCrcModes_t) crcOn;
 801eb96:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
			SX126x.PacketParams.Params.LoRa.CrcMode =
 801eb9a:	4b23      	ldr	r3, [pc, #140]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eb9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					(RadioLoRaIQModes_t) iqInverted;
 801eba0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 801eba4:	4b20      	ldr	r3, [pc, #128]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801eba6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 801ebaa:	4b1f      	ldr	r3, [pc, #124]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801ebac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	bf14      	ite	ne
 801ebb4:	2301      	movne	r3, #1
 801ebb6:	2300      	moveq	r3, #0
 801ebb8:	b2db      	uxtb	r3, r3
 801ebba:	4618      	mov	r0, r3
 801ebbc:	f7ff fe24 	bl	801e808 <RadioSetModem>
			SX126xSetModulationParams(&SX126x.ModulationParams);
 801ebc0:	481a      	ldr	r0, [pc, #104]	@ (801ec2c <RadioSetRxConfig+0x2dc>)
 801ebc2:	f001 fac1 	bl	8020148 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 801ebc6:	481a      	ldr	r0, [pc, #104]	@ (801ec30 <RadioSetRxConfig+0x2e0>)
 801ebc8:	f001 fb5c 	bl	8020284 <SX126xSetPacketParams>
			if (SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED) {
 801ebcc:	4b16      	ldr	r3, [pc, #88]	@ (801ec28 <RadioSetRxConfig+0x2d8>)
 801ebce:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801ebd2:	2b01      	cmp	r3, #1
 801ebd4:	d10d      	bne.n	801ebf2 <RadioSetRxConfig+0x2a2>
						SX126xReadRegister(0x0736) & ~(1 << 2));
 801ebd6:	f240 7036 	movw	r0, #1846	@ 0x736
 801ebda:	f001 fe33 	bl	8020844 <SX126xReadRegister>
 801ebde:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0736,
 801ebe0:	f023 0304 	bic.w	r3, r3, #4
 801ebe4:	b2db      	uxtb	r3, r3
 801ebe6:	4619      	mov	r1, r3
 801ebe8:	f240 7036 	movw	r0, #1846	@ 0x736
 801ebec:	f001 fdde 	bl	80207ac <SX126xWriteRegister>
 801ebf0:	e00c      	b.n	801ec0c <RadioSetRxConfig+0x2bc>
						SX126xReadRegister(0x0736) | (1 << 2));
 801ebf2:	f240 7036 	movw	r0, #1846	@ 0x736
 801ebf6:	f001 fe25 	bl	8020844 <SX126xReadRegister>
 801ebfa:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0736,
 801ebfc:	f043 0304 	orr.w	r3, r3, #4
 801ec00:	b2db      	uxtb	r3, r3
 801ec02:	4619      	mov	r1, r3
 801ec04:	f240 7036 	movw	r0, #1846	@ 0x736
 801ec08:	f001 fdd0 	bl	80207ac <SX126xWriteRegister>
			RxTimeout = RXTIMEOUT_LORA_MAX;
 801ec0c:	4b0c      	ldr	r3, [pc, #48]	@ (801ec40 <RadioSetRxConfig+0x2f0>)
 801ec0e:	f44f 7260 	mov.w	r2, #896	@ 0x380
 801ec12:	601a      	str	r2, [r3, #0]
		break;
 801ec14:	bf00      	nop
}
 801ec16:	bf00      	nop
 801ec18:	3718      	adds	r7, #24
 801ec1a:	46bd      	mov	sp, r7
 801ec1c:	bdb0      	pop	{r4, r5, r7, pc}
 801ec1e:	bf00      	nop
 801ec20:	20007e58 	.word	0x20007e58
 801ec24:	20000328 	.word	0x20000328
 801ec28:	20007f80 	.word	0x20007f80
 801ec2c:	20007fc0 	.word	0x20007fc0
 801ec30:	20007f98 	.word	0x20007f98
 801ec34:	3ff00000 	.word	0x3ff00000
 801ec38:	40200000 	.word	0x40200000
 801ec3c:	408f4000 	.word	0x408f4000
 801ec40:	20007e54 	.word	0x20007e54
 801ec44:	0802557c 	.word	0x0802557c

0801ec48 <RadioSetTxConfig>:

void RadioSetTxConfig(RadioModems_t modem, int8_t power, uint32_t fdev,
		uint32_t bandwidth, uint32_t datarate, uint8_t coderate,
		uint16_t preambleLen,
		bool fixLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod,
		bool iqInverted, uint32_t timeout) {
 801ec48:	b580      	push	{r7, lr}
 801ec4a:	b086      	sub	sp, #24
 801ec4c:	af00      	add	r7, sp, #0
 801ec4e:	60ba      	str	r2, [r7, #8]
 801ec50:	607b      	str	r3, [r7, #4]
 801ec52:	4603      	mov	r3, r0
 801ec54:	73fb      	strb	r3, [r7, #15]
 801ec56:	460b      	mov	r3, r1
 801ec58:	73bb      	strb	r3, [r7, #14]

	switch (modem) {
 801ec5a:	7bfb      	ldrb	r3, [r7, #15]
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d002      	beq.n	801ec66 <RadioSetTxConfig+0x1e>
 801ec60:	2b01      	cmp	r3, #1
 801ec62:	d06d      	beq.n	801ed40 <RadioSetTxConfig+0xf8>
 801ec64:	e0dc      	b.n	801ee20 <RadioSetTxConfig+0x1d8>
		case MODEM_FSK:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ec66:	4b86      	ldr	r3, [pc, #536]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ec68:	2200      	movs	r2, #0
 801ec6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 801ec6e:	4a84      	ldr	r2, [pc, #528]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ec70:	6a3b      	ldr	r3, [r7, #32]
 801ec72:	6453      	str	r3, [r2, #68]	@ 0x44

			SX126x.ModulationParams.Params.Gfsk.ModulationShaping =
 801ec74:	4b82      	ldr	r3, [pc, #520]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ec76:	220b      	movs	r2, #11
 801ec78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
					MOD_SHAPING_G_BT_1;
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
					RadioGetFskBandwidthRegValue(bandwidth);
 801ec7c:	6878      	ldr	r0, [r7, #4]
 801ec7e:	f7ff fcf7 	bl	801e670 <RadioGetFskBandwidthRegValue>
 801ec82:	4603      	mov	r3, r0
 801ec84:	461a      	mov	r2, r3
			SX126x.ModulationParams.Params.Gfsk.Bandwidth =
 801ec86:	4b7e      	ldr	r3, [pc, #504]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ec88:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
			SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 801ec8c:	4a7c      	ldr	r2, [pc, #496]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ec8e:	68bb      	ldr	r3, [r7, #8]
 801ec90:	6493      	str	r3, [r2, #72]	@ 0x48

			SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ec92:	4b7b      	ldr	r3, [pc, #492]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ec94:	2200      	movs	r2, #0
 801ec96:	761a      	strb	r2, [r3, #24]
			SX126x.PacketParams.Params.Gfsk.PreambleLength = (preambleLen << 3); // convert byte into bit
 801ec98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801ec9a:	00db      	lsls	r3, r3, #3
 801ec9c:	b29a      	uxth	r2, r3
 801ec9e:	4b78      	ldr	r3, [pc, #480]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801eca0:	835a      	strh	r2, [r3, #26]
			SX126x.PacketParams.Params.Gfsk.PreambleMinDetect =
 801eca2:	4b77      	ldr	r3, [pc, #476]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801eca4:	2204      	movs	r2, #4
 801eca6:	771a      	strb	r2, [r3, #28]
					RADIO_PREAMBLE_DETECTOR_08_BITS;
			SX126x.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801eca8:	4b75      	ldr	r3, [pc, #468]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ecaa:	2218      	movs	r2, #24
 801ecac:	775a      	strb	r2, [r3, #29]
			SX126x.PacketParams.Params.Gfsk.AddrComp =
 801ecae:	4b74      	ldr	r3, [pc, #464]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ecb0:	2200      	movs	r2, #0
 801ecb2:	779a      	strb	r2, [r3, #30]
					RADIO_ADDRESSCOMP_FILT_OFF;
			SX126x.PacketParams.Params.Gfsk.HeaderType =
					(fixLen == true) ?
							RADIO_PACKET_FIXED_LENGTH :
 801ecb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801ecb8:	f083 0301 	eor.w	r3, r3, #1
 801ecbc:	b2db      	uxtb	r3, r3
 801ecbe:	461a      	mov	r2, r3
			SX126x.PacketParams.Params.Gfsk.HeaderType =
 801ecc0:	4b6f      	ldr	r3, [pc, #444]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ecc2:	77da      	strb	r2, [r3, #31]
							RADIO_PACKET_VARIABLE_LENGTH;

			if (crcOn == true) {
 801ecc4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	d004      	beq.n	801ecd6 <RadioSetTxConfig+0x8e>
				SX126x.PacketParams.Params.Gfsk.CrcLength =
 801eccc:	4b6c      	ldr	r3, [pc, #432]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ecce:	22f2      	movs	r2, #242	@ 0xf2
 801ecd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 801ecd4:	e003      	b.n	801ecde <RadioSetTxConfig+0x96>
						RADIO_CRC_2_BYTES_CCIT;
			}
			else {
				SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801ecd6:	4b6a      	ldr	r3, [pc, #424]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ecd8:	2201      	movs	r2, #1
 801ecda:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			}
			SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801ecde:	4b68      	ldr	r3, [pc, #416]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ece0:	2201      	movs	r2, #1
 801ece2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			RadioStandby();
 801ece6:	f000 fab6 	bl	801f256 <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 801ecea:	4b65      	ldr	r3, [pc, #404]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ecec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	bf14      	ite	ne
 801ecf4:	2301      	movne	r3, #1
 801ecf6:	2300      	moveq	r3, #0
 801ecf8:	b2db      	uxtb	r3, r3
 801ecfa:	4618      	mov	r0, r3
 801ecfc:	f7ff fd84 	bl	801e808 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 801ed00:	4860      	ldr	r0, [pc, #384]	@ (801ee84 <RadioSetTxConfig+0x23c>)
 801ed02:	f001 fa21 	bl	8020148 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 801ed06:	4860      	ldr	r0, [pc, #384]	@ (801ee88 <RadioSetTxConfig+0x240>)
 801ed08:	f001 fabc 	bl	8020284 <SX126xSetPacketParams>
			uint8_t syncWord[8];
			syncWord[0] = 0xC1;
 801ed0c:	23c1      	movs	r3, #193	@ 0xc1
 801ed0e:	743b      	strb	r3, [r7, #16]
			syncWord[1] = 0x94;
 801ed10:	2394      	movs	r3, #148	@ 0x94
 801ed12:	747b      	strb	r3, [r7, #17]
			syncWord[2] = 0xC1;
 801ed14:	23c1      	movs	r3, #193	@ 0xc1
 801ed16:	74bb      	strb	r3, [r7, #18]
			syncWord[3] = 0x00;
 801ed18:	2300      	movs	r3, #0
 801ed1a:	74fb      	strb	r3, [r7, #19]
			syncWord[4] = 0x00;
 801ed1c:	2300      	movs	r3, #0
 801ed1e:	753b      	strb	r3, [r7, #20]
			syncWord[5] = 0x00;
 801ed20:	2300      	movs	r3, #0
 801ed22:	757b      	strb	r3, [r7, #21]
			syncWord[6] = 0x00;
 801ed24:	2300      	movs	r3, #0
 801ed26:	75bb      	strb	r3, [r7, #22]
			syncWord[7] = 0x00;
 801ed28:	2300      	movs	r3, #0
 801ed2a:	75fb      	strb	r3, [r7, #23]
			SX126xSetSyncWord(syncWord);
 801ed2c:	f107 0310 	add.w	r3, r7, #16
 801ed30:	4618      	mov	r0, r3
 801ed32:	f000 fedc 	bl	801faee <SX126xSetSyncWord>
			// SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
			SX126xSetWhiteningSeed(0x01FF);
 801ed36:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801ed3a:	f000 ff27 	bl	801fb8c <SX126xSetWhiteningSeed>
		break;
 801ed3e:	e06f      	b.n	801ee20 <RadioSetTxConfig+0x1d8>

		case MODEM_LORA:
			SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ed40:	4b4f      	ldr	r3, [pc, #316]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ed42:	2201      	movs	r2, #1
 801ed44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
					(RadioLoRaSpreadingFactors_t) datarate;
 801ed48:	6a3b      	ldr	r3, [r7, #32]
 801ed4a:	b2da      	uxtb	r2, r3
			SX126x.ModulationParams.Params.LoRa.SpreadingFactor =
 801ed4c:	4b4c      	ldr	r3, [pc, #304]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ed4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
					Bandwidths[bandwidth];
 801ed52:	4a4e      	ldr	r2, [pc, #312]	@ (801ee8c <RadioSetTxConfig+0x244>)
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	4413      	add	r3, r2
 801ed58:	781a      	ldrb	r2, [r3, #0]
			SX126x.ModulationParams.Params.LoRa.Bandwidth =
 801ed5a:	4b49      	ldr	r3, [pc, #292]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ed5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			SX126x.ModulationParams.Params.LoRa.CodingRate =
 801ed60:	4a47      	ldr	r2, [pc, #284]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ed62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801ed66:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
					(RadioLoRaCodingRates_t) coderate;

			if (((bandwidth == 0) && ((datarate == 11) || (datarate == 12)))
 801ed6a:	687b      	ldr	r3, [r7, #4]
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d105      	bne.n	801ed7c <RadioSetTxConfig+0x134>
 801ed70:	6a3b      	ldr	r3, [r7, #32]
 801ed72:	2b0b      	cmp	r3, #11
 801ed74:	d008      	beq.n	801ed88 <RadioSetTxConfig+0x140>
 801ed76:	6a3b      	ldr	r3, [r7, #32]
 801ed78:	2b0c      	cmp	r3, #12
 801ed7a:	d005      	beq.n	801ed88 <RadioSetTxConfig+0x140>
					|| ((bandwidth == 1) && (datarate == 12))) {
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	2b01      	cmp	r3, #1
 801ed80:	d107      	bne.n	801ed92 <RadioSetTxConfig+0x14a>
 801ed82:	6a3b      	ldr	r3, [r7, #32]
 801ed84:	2b0c      	cmp	r3, #12
 801ed86:	d104      	bne.n	801ed92 <RadioSetTxConfig+0x14a>
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801ed88:	4b3d      	ldr	r3, [pc, #244]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ed8a:	2201      	movs	r2, #1
 801ed8c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 801ed90:	e003      	b.n	801ed9a <RadioSetTxConfig+0x152>
			}
			else {
				SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801ed92:	4b3b      	ldr	r3, [pc, #236]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ed94:	2200      	movs	r2, #0
 801ed96:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
			}

			SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 801ed9a:	4b39      	ldr	r3, [pc, #228]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ed9c:	2201      	movs	r2, #1
 801ed9e:	761a      	strb	r2, [r3, #24]

			if ((SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5)
 801eda0:	4b37      	ldr	r3, [pc, #220]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801eda2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801eda6:	2b05      	cmp	r3, #5
 801eda8:	d004      	beq.n	801edb4 <RadioSetTxConfig+0x16c>
					|| (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 801edaa:	4b35      	ldr	r3, [pc, #212]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801edb0:	2b06      	cmp	r3, #6
 801edb2:	d10a      	bne.n	801edca <RadioSetTxConfig+0x182>
							== LORA_SF6)) {
				if (preambleLen < 12) {
 801edb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801edb6:	2b0b      	cmp	r3, #11
 801edb8:	d803      	bhi.n	801edc2 <RadioSetTxConfig+0x17a>
					SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 801edba:	4b31      	ldr	r3, [pc, #196]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edbc:	220c      	movs	r2, #12
 801edbe:	849a      	strh	r2, [r3, #36]	@ 0x24
				if (preambleLen < 12) {
 801edc0:	e006      	b.n	801edd0 <RadioSetTxConfig+0x188>
				}
				else {
					SX126x.PacketParams.Params.LoRa.PreambleLength =
 801edc2:	4a2f      	ldr	r2, [pc, #188]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801edc6:	8493      	strh	r3, [r2, #36]	@ 0x24
				if (preambleLen < 12) {
 801edc8:	e002      	b.n	801edd0 <RadioSetTxConfig+0x188>
							preambleLen;
				}
			}
			else {
				SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801edca:	4a2d      	ldr	r2, [pc, #180]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edcc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801edce:	8493      	strh	r3, [r2, #36]	@ 0x24
			}

			SX126x.PacketParams.Params.LoRa.HeaderType =
					(RadioLoRaPacketLengthsMode_t) fixLen;
 801edd0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
			SX126x.PacketParams.Params.LoRa.HeaderType =
 801edd4:	4b2a      	ldr	r3, [pc, #168]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edd6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801edda:	4b2d      	ldr	r3, [pc, #180]	@ (801ee90 <RadioSetTxConfig+0x248>)
 801eddc:	781a      	ldrb	r2, [r3, #0]
 801edde:	4b28      	ldr	r3, [pc, #160]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ede0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			SX126x.PacketParams.Params.LoRa.CrcMode =
					(RadioLoRaCrcModes_t) crcOn;
 801ede4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
			SX126x.PacketParams.Params.LoRa.CrcMode =
 801ede8:	4b25      	ldr	r3, [pc, #148]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			SX126x.PacketParams.Params.LoRa.InvertIQ =
					(RadioLoRaIQModes_t) iqInverted;
 801edee:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
			SX126x.PacketParams.Params.LoRa.InvertIQ =
 801edf2:	4b23      	ldr	r3, [pc, #140]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edf4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

			RadioStandby();
 801edf8:	f000 fa2d 	bl	801f256 <RadioStandby>
			RadioSetModem(
					(SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK) ?
 801edfc:	4b20      	ldr	r3, [pc, #128]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801edfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
			RadioSetModem(
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	bf14      	ite	ne
 801ee06:	2301      	movne	r3, #1
 801ee08:	2300      	moveq	r3, #0
 801ee0a:	b2db      	uxtb	r3, r3
 801ee0c:	4618      	mov	r0, r3
 801ee0e:	f7ff fcfb 	bl	801e808 <RadioSetModem>
							MODEM_FSK : MODEM_LORA);
			SX126xSetModulationParams(&SX126x.ModulationParams);
 801ee12:	481c      	ldr	r0, [pc, #112]	@ (801ee84 <RadioSetTxConfig+0x23c>)
 801ee14:	f001 f998 	bl	8020148 <SX126xSetModulationParams>
			SX126xSetPacketParams(&SX126x.PacketParams);
 801ee18:	481b      	ldr	r0, [pc, #108]	@ (801ee88 <RadioSetTxConfig+0x240>)
 801ee1a:	f001 fa33 	bl	8020284 <SX126xSetPacketParams>
		break;
 801ee1e:	bf00      	nop
	}

	// WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see DS_SX1261-2_V1.2 datasheet chapter 15.1
	if ((modem == MODEM_LORA)
 801ee20:	7bfb      	ldrb	r3, [r7, #15]
 801ee22:	2b01      	cmp	r3, #1
 801ee24:	d112      	bne.n	801ee4c <RadioSetTxConfig+0x204>
			&& (SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500)) {
 801ee26:	4b16      	ldr	r3, [pc, #88]	@ (801ee80 <RadioSetTxConfig+0x238>)
 801ee28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801ee2c:	2b06      	cmp	r3, #6
 801ee2e:	d10d      	bne.n	801ee4c <RadioSetTxConfig+0x204>
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) & ~(1 << 2));
 801ee30:	f640 0089 	movw	r0, #2185	@ 0x889
 801ee34:	f001 fd06 	bl	8020844 <SX126xReadRegister>
 801ee38:	4603      	mov	r3, r0
 801ee3a:	f023 0304 	bic.w	r3, r3, #4
 801ee3e:	b2db      	uxtb	r3, r3
 801ee40:	4619      	mov	r1, r3
 801ee42:	f640 0089 	movw	r0, #2185	@ 0x889
 801ee46:	f001 fcb1 	bl	80207ac <SX126xWriteRegister>
 801ee4a:	e00c      	b.n	801ee66 <RadioSetTxConfig+0x21e>
	}
	else {
		// RegTxModulation = @address 0x0889
		SX126xWriteRegister(0x0889, SX126xReadRegister(0x0889) | (1 << 2));
 801ee4c:	f640 0089 	movw	r0, #2185	@ 0x889
 801ee50:	f001 fcf8 	bl	8020844 <SX126xReadRegister>
 801ee54:	4603      	mov	r3, r0
 801ee56:	f043 0304 	orr.w	r3, r3, #4
 801ee5a:	b2db      	uxtb	r3, r3
 801ee5c:	4619      	mov	r1, r3
 801ee5e:	f640 0089 	movw	r0, #2185	@ 0x889
 801ee62:	f001 fca3 	bl	80207ac <SX126xWriteRegister>
	}
	// WORKAROUND END

	SX126xSetRfTxPower(power);
 801ee66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ee6a:	4618      	mov	r0, r3
 801ee6c:	f001 fd6c 	bl	8020948 <SX126xSetRfTxPower>
	TxTimeout = timeout;
 801ee70:	4a08      	ldr	r2, [pc, #32]	@ (801ee94 <RadioSetTxConfig+0x24c>)
 801ee72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ee74:	6013      	str	r3, [r2, #0]
}
 801ee76:	bf00      	nop
 801ee78:	3718      	adds	r7, #24
 801ee7a:	46bd      	mov	sp, r7
 801ee7c:	bd80      	pop	{r7, pc}
 801ee7e:	bf00      	nop
 801ee80:	20007f80 	.word	0x20007f80
 801ee84:	20007fc0 	.word	0x20007fc0
 801ee88:	20007f98 	.word	0x20007f98
 801ee8c:	0802557c 	.word	0x0802557c
 801ee90:	20000328 	.word	0x20000328
 801ee94:	20007e50 	.word	0x20007e50

0801ee98 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency(uint32_t frequency) {
 801ee98:	b480      	push	{r7}
 801ee9a:	b083      	sub	sp, #12
 801ee9c:	af00      	add	r7, sp, #0
 801ee9e:	6078      	str	r0, [r7, #4]
	return true;
 801eea0:	2301      	movs	r3, #1
}
 801eea2:	4618      	mov	r0, r3
 801eea4:	370c      	adds	r7, #12
 801eea6:	46bd      	mov	sp, r7
 801eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eeac:	4770      	bx	lr
	...

0801eeb0 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir(RadioModems_t modem, uint8_t pktLen) {
 801eeb0:	b5b0      	push	{r4, r5, r7, lr}
 801eeb2:	b090      	sub	sp, #64	@ 0x40
 801eeb4:	af00      	add	r7, sp, #0
 801eeb6:	4603      	mov	r3, r0
 801eeb8:	460a      	mov	r2, r1
 801eeba:	71fb      	strb	r3, [r7, #7]
 801eebc:	4613      	mov	r3, r2
 801eebe:	71bb      	strb	r3, [r7, #6]
	uint32_t airTime = 0;
 801eec0:	2300      	movs	r3, #0
 801eec2:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch (modem) {
 801eec4:	79fb      	ldrb	r3, [r7, #7]
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d003      	beq.n	801eed2 <RadioTimeOnAir+0x22>
 801eeca:	2b01      	cmp	r3, #1
 801eecc:	f000 8095 	beq.w	801effa <RadioTimeOnAir+0x14a>
 801eed0:	e156      	b.n	801f180 <RadioTimeOnAir+0x2d0>
		case MODEM_FSK: {
			// CRC Length calculation, catering for each type of CRC Calc offered in libary
			uint8_t crcLength =
 801eed2:	4bb1      	ldr	r3, [pc, #708]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801eed4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 801eed8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					(uint8_t) (SX126x.PacketParams.Params.Gfsk.CrcLength);
			if ((crcLength == RADIO_CRC_2_BYTES)
 801eedc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801eee0:	2b02      	cmp	r3, #2
 801eee2:	d00b      	beq.n	801eefc <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_INV)
 801eee4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801eee8:	2b06      	cmp	r3, #6
 801eeea:	d007      	beq.n	801eefc <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_IBM)
 801eeec:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801eef0:	2bf1      	cmp	r3, #241	@ 0xf1
 801eef2:	d003      	beq.n	801eefc <RadioTimeOnAir+0x4c>
					|| (crcLength == RADIO_CRC_2_BYTES_CCIT)) {
 801eef4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801eef8:	2bf2      	cmp	r3, #242	@ 0xf2
 801eefa:	d103      	bne.n	801ef04 <RadioTimeOnAir+0x54>
				crcLength = 2;
 801eefc:	2302      	movs	r3, #2
 801eefe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801ef02:	e00e      	b.n	801ef22 <RadioTimeOnAir+0x72>
			}
			else if ((crcLength == RADIO_CRC_1_BYTES)
 801ef04:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d003      	beq.n	801ef14 <RadioTimeOnAir+0x64>
					|| (crcLength == RADIO_CRC_1_BYTES_INV)) {
 801ef0c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801ef10:	2b04      	cmp	r3, #4
 801ef12:	d103      	bne.n	801ef1c <RadioTimeOnAir+0x6c>
				crcLength = 1;
 801ef14:	2301      	movs	r3, #1
 801ef16:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 801ef1a:	e002      	b.n	801ef22 <RadioTimeOnAir+0x72>
			}
			else {
				crcLength = 0;
 801ef1c:	2300      	movs	r3, #0
 801ef1e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			}
			airTime =
					rint(
							(8
									* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 801ef22:	4b9d      	ldr	r3, [pc, #628]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801ef24:	8b5b      	ldrh	r3, [r3, #26]
 801ef26:	461a      	mov	r2, r3
											+ (SX126x.PacketParams.Params.Gfsk.SyncWordLength
 801ef28:	4b9b      	ldr	r3, [pc, #620]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801ef2a:	7f5b      	ldrb	r3, [r3, #29]
													>> 3)
 801ef2c:	08db      	lsrs	r3, r3, #3
 801ef2e:	b2db      	uxtb	r3, r3
											+ (SX126x.PacketParams.Params.Gfsk.SyncWordLength
 801ef30:	4413      	add	r3, r2
											+ ((SX126x.PacketParams.Params.Gfsk.HeaderType
 801ef32:	4618      	mov	r0, r3
 801ef34:	f7e1 faf6 	bl	8000524 <__aeabi_i2d>
 801ef38:	4602      	mov	r2, r0
 801ef3a:	460b      	mov	r3, r1
 801ef3c:	4996      	ldr	r1, [pc, #600]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801ef3e:	7fc9      	ldrb	r1, [r1, #31]
													== RADIO_PACKET_FIXED_LENGTH) ?
													0.0 : 1.0) + pktLen
 801ef40:	2900      	cmp	r1, #0
 801ef42:	d104      	bne.n	801ef4e <RadioTimeOnAir+0x9e>
 801ef44:	f04f 0000 	mov.w	r0, #0
 801ef48:	f04f 0100 	mov.w	r1, #0
 801ef4c:	e002      	b.n	801ef54 <RadioTimeOnAir+0xa4>
 801ef4e:	f04f 0000 	mov.w	r0, #0
 801ef52:	4992      	ldr	r1, [pc, #584]	@ (801f19c <RadioTimeOnAir+0x2ec>)
											+ ((SX126x.PacketParams.Params.Gfsk.HeaderType
 801ef54:	f7e1 f99a 	bl	800028c <__adddf3>
 801ef58:	4602      	mov	r2, r0
 801ef5a:	460b      	mov	r3, r1
 801ef5c:	4614      	mov	r4, r2
 801ef5e:	461d      	mov	r5, r3
													0.0 : 1.0) + pktLen
 801ef60:	79bb      	ldrb	r3, [r7, #6]
 801ef62:	4618      	mov	r0, r3
 801ef64:	f7e1 fade 	bl	8000524 <__aeabi_i2d>
 801ef68:	4602      	mov	r2, r0
 801ef6a:	460b      	mov	r3, r1
 801ef6c:	4620      	mov	r0, r4
 801ef6e:	4629      	mov	r1, r5
 801ef70:	f7e1 f98c 	bl	800028c <__adddf3>
 801ef74:	4602      	mov	r2, r0
 801ef76:	460b      	mov	r3, r1
 801ef78:	4614      	mov	r4, r2
 801ef7a:	461d      	mov	r5, r3
											+ (crcLength))
 801ef7c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801ef80:	4618      	mov	r0, r3
 801ef82:	f7e1 facf 	bl	8000524 <__aeabi_i2d>
 801ef86:	4602      	mov	r2, r0
 801ef88:	460b      	mov	r3, r1
 801ef8a:	4620      	mov	r0, r4
 801ef8c:	4629      	mov	r1, r5
 801ef8e:	f7e1 f97d 	bl	800028c <__adddf3>
 801ef92:	4602      	mov	r2, r0
 801ef94:	460b      	mov	r3, r1
 801ef96:	4610      	mov	r0, r2
 801ef98:	4619      	mov	r1, r3
									* (SX126x.PacketParams.Params.Gfsk.PreambleLength
 801ef9a:	f04f 0200 	mov.w	r2, #0
 801ef9e:	4b80      	ldr	r3, [pc, #512]	@ (801f1a0 <RadioTimeOnAir+0x2f0>)
 801efa0:	f7e1 fb2a 	bl	80005f8 <__aeabi_dmul>
 801efa4:	4602      	mov	r2, r0
 801efa6:	460b      	mov	r3, r1
 801efa8:	4614      	mov	r4, r2
 801efaa:	461d      	mov	r5, r3
									/ SX126x.ModulationParams.Params.Gfsk.BitRate)
 801efac:	4b7a      	ldr	r3, [pc, #488]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801efae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801efb0:	4618      	mov	r0, r3
 801efb2:	f7e1 faa7 	bl	8000504 <__aeabi_ui2d>
 801efb6:	4602      	mov	r2, r0
 801efb8:	460b      	mov	r3, r1
 801efba:	4620      	mov	r0, r4
 801efbc:	4629      	mov	r1, r5
 801efbe:	f7e1 fc45 	bl	800084c <__aeabi_ddiv>
 801efc2:	4602      	mov	r2, r0
 801efc4:	460b      	mov	r3, r1
 801efc6:	4610      	mov	r0, r2
 801efc8:	4619      	mov	r1, r3
					rint(
 801efca:	f04f 0200 	mov.w	r2, #0
 801efce:	4b75      	ldr	r3, [pc, #468]	@ (801f1a4 <RadioTimeOnAir+0x2f4>)
 801efd0:	f7e1 fb12 	bl	80005f8 <__aeabi_dmul>
 801efd4:	4602      	mov	r2, r0
 801efd6:	460b      	mov	r3, r1
 801efd8:	ec43 2b17 	vmov	d7, r2, r3
 801efdc:	eeb0 0a47 	vmov.f32	s0, s14
 801efe0:	eef0 0a67 	vmov.f32	s1, s15
 801efe4:	f005 fa3c 	bl	8024460 <rint>
 801efe8:	ec53 2b10 	vmov	r2, r3, d0
			airTime =
 801efec:	4610      	mov	r0, r2
 801efee:	4619      	mov	r1, r3
 801eff0:	f7e1 fdda 	bl	8000ba8 <__aeabi_d2uiz>
 801eff4:	4603      	mov	r3, r0
 801eff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
									* 1e3);
		}
		break;
 801eff8:	e0c2      	b.n	801f180 <RadioTimeOnAir+0x2d0>
		case MODEM_LORA: {
			double ts =
					RadioLoRaSymbTime[SX126x.ModulationParams.Params.LoRa.Bandwidth
 801effa:	4b67      	ldr	r3, [pc, #412]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801effc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
							- 4][12
 801f000:	1f1a      	subs	r2, r3, #4
							- SX126x.ModulationParams.Params.LoRa.SpreadingFactor];
 801f002:	4b65      	ldr	r3, [pc, #404]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f004:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801f008:	f1c3 010c 	rsb	r1, r3, #12
			double ts =
 801f00c:	4866      	ldr	r0, [pc, #408]	@ (801f1a8 <RadioTimeOnAir+0x2f8>)
 801f00e:	4613      	mov	r3, r2
 801f010:	005b      	lsls	r3, r3, #1
 801f012:	4413      	add	r3, r2
 801f014:	005b      	lsls	r3, r3, #1
 801f016:	440b      	add	r3, r1
 801f018:	00db      	lsls	r3, r3, #3
 801f01a:	4403      	add	r3, r0
 801f01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f020:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
			// time of preamble
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 801f024:	4b5c      	ldr	r3, [pc, #368]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f026:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
					+ 4.25) * ts;
 801f028:	4618      	mov	r0, r3
 801f02a:	f7e1 fa7b 	bl	8000524 <__aeabi_i2d>
 801f02e:	f04f 0200 	mov.w	r2, #0
 801f032:	4b5e      	ldr	r3, [pc, #376]	@ (801f1ac <RadioTimeOnAir+0x2fc>)
 801f034:	f7e1 f92a 	bl	800028c <__adddf3>
 801f038:	4602      	mov	r2, r0
 801f03a:	460b      	mov	r3, r1
			double tPreamble = (SX126x.PacketParams.Params.LoRa.PreambleLength
 801f03c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801f040:	f7e1 fada 	bl	80005f8 <__aeabi_dmul>
 801f044:	4602      	mov	r2, r0
 801f046:	460b      	mov	r3, r1
 801f048:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
			// Symbol length of payload and time
			double tmp =
					ceil(
							(8 * pktLen
									- 4
 801f04c:	79bb      	ldrb	r3, [r7, #6]
 801f04e:	005b      	lsls	r3, r3, #1
											* SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 801f050:	4a51      	ldr	r2, [pc, #324]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f052:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
									- 4
 801f056:	1a9b      	subs	r3, r3, r2
									+ 28
 801f058:	1dda      	adds	r2, r3, #7
									+ 16
											* SX126x.PacketParams.Params.LoRa.CrcMode
 801f05a:	4b4f      	ldr	r3, [pc, #316]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f05c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
									+ 16
 801f060:	009b      	lsls	r3, r3, #2
 801f062:	4413      	add	r3, r2
 801f064:	009a      	lsls	r2, r3, #2
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 801f066:	4b4c      	ldr	r3, [pc, #304]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f068:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
											== LORA_PACKET_FIXED_LENGTH) ?
											20 : 0))
 801f06c:	2b01      	cmp	r3, #1
 801f06e:	d101      	bne.n	801f074 <RadioTimeOnAir+0x1c4>
 801f070:	2314      	movs	r3, #20
 801f072:	e000      	b.n	801f076 <RadioTimeOnAir+0x1c6>
 801f074:	2300      	movs	r3, #0
									- ((SX126x.PacketParams.Params.LoRa.HeaderType
 801f076:	1ad3      	subs	r3, r2, r3
					ceil(
 801f078:	4618      	mov	r0, r3
 801f07a:	f7e1 fa53 	bl	8000524 <__aeabi_i2d>
 801f07e:	4604      	mov	r4, r0
 801f080:	460d      	mov	r5, r1
									/ (double) (4
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 801f082:	4b45      	ldr	r3, [pc, #276]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f084:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801f088:	461a      	mov	r2, r3
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 801f08a:	4b43      	ldr	r3, [pc, #268]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f08c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
															> 0) ? 2 : 0))))
 801f090:	2b00      	cmp	r3, #0
 801f092:	d001      	beq.n	801f098 <RadioTimeOnAir+0x1e8>
 801f094:	2302      	movs	r3, #2
 801f096:	e000      	b.n	801f09a <RadioTimeOnAir+0x1ea>
 801f098:	2300      	movs	r3, #0
													- ((SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize
 801f09a:	1ad3      	subs	r3, r2, r3
											* (SX126x.ModulationParams.Params.LoRa.SpreadingFactor
 801f09c:	009b      	lsls	r3, r3, #2
									/ (double) (4
 801f09e:	4618      	mov	r0, r3
 801f0a0:	f7e1 fa40 	bl	8000524 <__aeabi_i2d>
 801f0a4:	4602      	mov	r2, r0
 801f0a6:	460b      	mov	r3, r1
					ceil(
 801f0a8:	4620      	mov	r0, r4
 801f0aa:	4629      	mov	r1, r5
 801f0ac:	f7e1 fbce 	bl	800084c <__aeabi_ddiv>
 801f0b0:	4602      	mov	r2, r0
 801f0b2:	460b      	mov	r3, r1
 801f0b4:	ec43 2b17 	vmov	d7, r2, r3
 801f0b8:	eeb0 0a47 	vmov.f32	s0, s14
 801f0bc:	eef0 0a67 	vmov.f32	s1, s15
 801f0c0:	f005 f8d6 	bl	8024270 <ceil>
 801f0c4:	ec55 4b10 	vmov	r4, r5, d0
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 801f0c8:	4b33      	ldr	r3, [pc, #204]	@ (801f198 <RadioTimeOnAir+0x2e8>)
 801f0ca:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
									% 4) + 4);
 801f0ce:	f003 0303 	and.w	r3, r3, #3
 801f0d2:	3304      	adds	r3, #4
							* ((SX126x.ModulationParams.Params.LoRa.CodingRate
 801f0d4:	4618      	mov	r0, r3
 801f0d6:	f7e1 fa25 	bl	8000524 <__aeabi_i2d>
 801f0da:	4602      	mov	r2, r0
 801f0dc:	460b      	mov	r3, r1
			double tmp =
 801f0de:	4620      	mov	r0, r4
 801f0e0:	4629      	mov	r1, r5
 801f0e2:	f7e1 fa89 	bl	80005f8 <__aeabi_dmul>
 801f0e6:	4602      	mov	r2, r0
 801f0e8:	460b      	mov	r3, r1
 801f0ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
			double nPayload = 8 + ((tmp > 0) ? tmp : 0);
 801f0ee:	f04f 0200 	mov.w	r2, #0
 801f0f2:	f04f 0300 	mov.w	r3, #0
 801f0f6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801f0fa:	f7e1 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 801f0fe:	4603      	mov	r3, r0
 801f100:	2b00      	cmp	r3, #0
 801f102:	d002      	beq.n	801f10a <RadioTimeOnAir+0x25a>
 801f104:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801f108:	e003      	b.n	801f112 <RadioTimeOnAir+0x262>
 801f10a:	f04f 0000 	mov.w	r0, #0
 801f10e:	f04f 0100 	mov.w	r1, #0
 801f112:	f04f 0200 	mov.w	r2, #0
 801f116:	4b22      	ldr	r3, [pc, #136]	@ (801f1a0 <RadioTimeOnAir+0x2f0>)
 801f118:	f7e1 f8b8 	bl	800028c <__adddf3>
 801f11c:	4602      	mov	r2, r0
 801f11e:	460b      	mov	r3, r1
 801f120:	e9c7 2306 	strd	r2, r3, [r7, #24]
			double tPayload = nPayload * ts;
 801f124:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801f128:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801f12c:	f7e1 fa64 	bl	80005f8 <__aeabi_dmul>
 801f130:	4602      	mov	r2, r0
 801f132:	460b      	mov	r3, r1
 801f134:	e9c7 2304 	strd	r2, r3, [r7, #16]
			// Time on air
			double tOnAir = tPreamble + tPayload;
 801f138:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801f13c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 801f140:	f7e1 f8a4 	bl	800028c <__adddf3>
 801f144:	4602      	mov	r2, r0
 801f146:	460b      	mov	r3, r1
 801f148:	e9c7 2302 	strd	r2, r3, [r7, #8]
			// return milli seconds
			airTime = floor(tOnAir + 0.999);
 801f14c:	a310      	add	r3, pc, #64	@ (adr r3, 801f190 <RadioTimeOnAir+0x2e0>)
 801f14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f156:	f7e1 f899 	bl	800028c <__adddf3>
 801f15a:	4602      	mov	r2, r0
 801f15c:	460b      	mov	r3, r1
 801f15e:	ec43 2b17 	vmov	d7, r2, r3
 801f162:	eeb0 0a47 	vmov.f32	s0, s14
 801f166:	eef0 0a67 	vmov.f32	s1, s15
 801f16a:	f005 f8fd 	bl	8024368 <floor>
 801f16e:	ec53 2b10 	vmov	r2, r3, d0
 801f172:	4610      	mov	r0, r2
 801f174:	4619      	mov	r1, r3
 801f176:	f7e1 fd17 	bl	8000ba8 <__aeabi_d2uiz>
 801f17a:	4603      	mov	r3, r0
 801f17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		break;
 801f17e:	bf00      	nop
	}
	return airTime;
 801f180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801f182:	4618      	mov	r0, r3
 801f184:	3740      	adds	r7, #64	@ 0x40
 801f186:	46bd      	mov	sp, r7
 801f188:	bdb0      	pop	{r4, r5, r7, pc}
 801f18a:	bf00      	nop
 801f18c:	f3af 8000 	nop.w
 801f190:	d916872b 	.word	0xd916872b
 801f194:	3feff7ce 	.word	0x3feff7ce
 801f198:	20007f80 	.word	0x20007f80
 801f19c:	3ff00000 	.word	0x3ff00000
 801f1a0:	40200000 	.word	0x40200000
 801f1a4:	408f4000 	.word	0x408f4000
 801f1a8:	20000298 	.word	0x20000298
 801f1ac:	40110000 	.word	0x40110000

0801f1b0 <RadioSend>:
 *        the radio in transmission
 *
 * \param buffer     Buffer pointer
 * \param size       Buffer size
 */
void RadioSend(uint8_t *buffer, uint8_t size) {
 801f1b0:	b5b0      	push	{r4, r5, r7, lr}
 801f1b2:	b082      	sub	sp, #8
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	6078      	str	r0, [r7, #4]
 801f1b8:	460b      	mov	r3, r1
 801f1ba:	70fb      	strb	r3, [r7, #3]
	SX126xTXena();
 801f1bc:	f001 fbf3 	bl	80209a6 <SX126xTXena>
	SX126xSetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	2200      	movs	r2, #0
 801f1c4:	f240 2101 	movw	r1, #513	@ 0x201
 801f1c8:	f240 2001 	movw	r0, #513	@ 0x201
 801f1cc:	f000 fe8e 	bl	801feec <SX126xSetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (SX126xGetPacketType() == PACKET_TYPE_LORA) {
 801f1d0:	f000 ff44 	bl	802005c <SX126xGetPacketType>
 801f1d4:	4603      	mov	r3, r0
 801f1d6:	2b01      	cmp	r3, #1
 801f1d8:	d104      	bne.n	801f1e4 <RadioSend+0x34>
		SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 801f1da:	4a11      	ldr	r2, [pc, #68]	@ (801f220 <RadioSend+0x70>)
 801f1dc:	78fb      	ldrb	r3, [r7, #3]
 801f1de:	f882 3027 	strb.w	r3, [r2, #39]	@ 0x27
 801f1e2:	e003      	b.n	801f1ec <RadioSend+0x3c>
	}
	else {
		SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 801f1e4:	4a0e      	ldr	r2, [pc, #56]	@ (801f220 <RadioSend+0x70>)
 801f1e6:	78fb      	ldrb	r3, [r7, #3]
 801f1e8:	f882 3020 	strb.w	r3, [r2, #32]
	}
	SX126xSetPacketParams(&SX126x.PacketParams);
 801f1ec:	480d      	ldr	r0, [pc, #52]	@ (801f224 <RadioSend+0x74>)
 801f1ee:	f001 f849 	bl	8020284 <SX126xSetPacketParams>

	SX126xSendPayload(buffer, size, 0);
 801f1f2:	78fb      	ldrb	r3, [r7, #3]
 801f1f4:	2200      	movs	r2, #0
 801f1f6:	4619      	mov	r1, r3
 801f1f8:	6878      	ldr	r0, [r7, #4]
 801f1fa:	f000 fc65 	bl	801fac8 <SX126xSendPayload>
	TimerSetValue(&TxTimeoutTimer, TxTimeout);
 801f1fe:	4b0a      	ldr	r3, [pc, #40]	@ (801f228 <RadioSend+0x78>)
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	2200      	movs	r2, #0
 801f204:	461c      	mov	r4, r3
 801f206:	4615      	mov	r5, r2
 801f208:	4622      	mov	r2, r4
 801f20a:	462b      	mov	r3, r5
 801f20c:	4807      	ldr	r0, [pc, #28]	@ (801f22c <RadioSend+0x7c>)
 801f20e:	f001 fef3 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&TxTimeoutTimer);
 801f212:	4806      	ldr	r0, [pc, #24]	@ (801f22c <RadioSend+0x7c>)
 801f214:	f001 fe0c 	bl	8020e30 <util_timer_start>
}
 801f218:	bf00      	nop
 801f21a:	3708      	adds	r7, #8
 801f21c:	46bd      	mov	sp, r7
 801f21e:	bdb0      	pop	{r4, r5, r7, pc}
 801f220:	20007f80 	.word	0x20007f80
 801f224:	20007f98 	.word	0x20007f98
 801f228:	20007e50 	.word	0x20007e50
 801f22c:	20007e10 	.word	0x20007e10

0801f230 <RadioSleep>:

void RadioSleep(void) {
 801f230:	b580      	push	{r7, lr}
 801f232:	b082      	sub	sp, #8
 801f234:	af00      	add	r7, sp, #0
	SleepParams_t params = { 0 };
 801f236:	2300      	movs	r3, #0
 801f238:	713b      	strb	r3, [r7, #4]

	params.Fields.WarmStart = 1;
 801f23a:	793b      	ldrb	r3, [r7, #4]
 801f23c:	f043 0304 	orr.w	r3, r3, #4
 801f240:	713b      	strb	r3, [r7, #4]
	SX126xSetSleep(params);
 801f242:	7938      	ldrb	r0, [r7, #4]
 801f244:	f000 fcef 	bl	801fc26 <SX126xSetSleep>

	vTaskDelay(2);
 801f248:	2002      	movs	r0, #2
 801f24a:	f7e9 fab9 	bl	80087c0 <vTaskDelay>
}
 801f24e:	bf00      	nop
 801f250:	3708      	adds	r7, #8
 801f252:	46bd      	mov	sp, r7
 801f254:	bd80      	pop	{r7, pc}

0801f256 <RadioStandby>:

void RadioStandby(void) {
 801f256:	b580      	push	{r7, lr}
 801f258:	af00      	add	r7, sp, #0
	SX126xSetStandby(STDBY_RC);
 801f25a:	2000      	movs	r0, #0
 801f25c:	f000 fcf6 	bl	801fc4c <SX126xSetStandby>
}
 801f260:	bf00      	nop
 801f262:	bd80      	pop	{r7, pc}

0801f264 <RadioRx>:

void RadioRx(uint32_t timeout) {
 801f264:	b5b0      	push	{r4, r5, r7, lr}
 801f266:	b082      	sub	sp, #8
 801f268:	af00      	add	r7, sp, #0
 801f26a:	6078      	str	r0, [r7, #4]
	SX126xRXena();
 801f26c:	f001 fb94 	bl	8020998 <SX126xRXena>
	SX126xSetDioIrqParams(
 801f270:	2300      	movs	r3, #0
 801f272:	2200      	movs	r2, #0
 801f274:	f240 2162 	movw	r1, #610	@ 0x262
 801f278:	f240 2062 	movw	r0, #610	@ 0x262
 801f27c:	f000 fe36 	bl	801feec <SX126xSetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	// Even Continous mode is selected, put a timeout here
	if (timeout != 0) {
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	2b00      	cmp	r3, #0
 801f284:	d00b      	beq.n	801f29e <RadioRx+0x3a>
		TimerSetValue(&RxTimeoutTimer, timeout);
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	2200      	movs	r2, #0
 801f28a:	461c      	mov	r4, r3
 801f28c:	4615      	mov	r5, r2
 801f28e:	4622      	mov	r2, r4
 801f290:	462b      	mov	r3, r5
 801f292:	480c      	ldr	r0, [pc, #48]	@ (801f2c4 <RadioRx+0x60>)
 801f294:	f001 feb0 	bl	8020ff8 <util_timer_set_period>
		TimerStart(&RxTimeoutTimer);
 801f298:	480a      	ldr	r0, [pc, #40]	@ (801f2c4 <RadioRx+0x60>)
 801f29a:	f001 fdc9 	bl	8020e30 <util_timer_start>
	}
	if (RxContinuous == true) {
 801f29e:	4b0a      	ldr	r3, [pc, #40]	@ (801f2c8 <RadioRx+0x64>)
 801f2a0:	781b      	ldrb	r3, [r3, #0]
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	d004      	beq.n	801f2b0 <RadioRx+0x4c>
		SX126xSetRx(0xFFFFFF); // Rx Continuous
 801f2a6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801f2aa:	f000 fd07 	bl	801fcbc <SX126xSetRx>
	}
	else {
		SX126xSetRx(RxTimeout << 6);
	}
}
 801f2ae:	e005      	b.n	801f2bc <RadioRx+0x58>
		SX126xSetRx(RxTimeout << 6);
 801f2b0:	4b06      	ldr	r3, [pc, #24]	@ (801f2cc <RadioRx+0x68>)
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	019b      	lsls	r3, r3, #6
 801f2b6:	4618      	mov	r0, r3
 801f2b8:	f000 fd00 	bl	801fcbc <SX126xSetRx>
}
 801f2bc:	bf00      	nop
 801f2be:	3708      	adds	r7, #8
 801f2c0:	46bd      	mov	sp, r7
 801f2c2:	bdb0      	pop	{r4, r5, r7, pc}
 801f2c4:	20007e30 	.word	0x20007e30
 801f2c8:	20007e58 	.word	0x20007e58
 801f2cc:	20007e54 	.word	0x20007e54

0801f2d0 <RadioRxBoosted>:

void RadioRxBoosted(uint32_t timeout) {
 801f2d0:	b5b0      	push	{r4, r5, r7, lr}
 801f2d2:	b082      	sub	sp, #8
 801f2d4:	af00      	add	r7, sp, #0
 801f2d6:	6078      	str	r0, [r7, #4]
	SX126xSetDioIrqParams(
 801f2d8:	2300      	movs	r3, #0
 801f2da:	2200      	movs	r2, #0
 801f2dc:	f240 2162 	movw	r1, #610	@ 0x262
 801f2e0:	f240 2062 	movw	r0, #610	@ 0x262
 801f2e4:	f000 fe02 	bl	801feec <SX126xSetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_HEADER_ERROR | IRQ_CRC_ERROR, // IRQ_RADIO_ALL
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);

	if (RxContinuous == true) {
 801f2e8:	4b10      	ldr	r3, [pc, #64]	@ (801f32c <RadioRxBoosted+0x5c>)
 801f2ea:	781b      	ldrb	r3, [r3, #0]
 801f2ec:	2b00      	cmp	r3, #0
 801f2ee:	d013      	beq.n	801f318 <RadioRxBoosted+0x48>
		// Even Continous mode is selected, put a timeout here
		if (timeout != 0) {
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	2b00      	cmp	r3, #0
 801f2f4:	d00b      	beq.n	801f30e <RadioRxBoosted+0x3e>
			TimerSetValue(&RxTimeoutTimer, timeout);
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	2200      	movs	r2, #0
 801f2fa:	461c      	mov	r4, r3
 801f2fc:	4615      	mov	r5, r2
 801f2fe:	4622      	mov	r2, r4
 801f300:	462b      	mov	r3, r5
 801f302:	480b      	ldr	r0, [pc, #44]	@ (801f330 <RadioRxBoosted+0x60>)
 801f304:	f001 fe78 	bl	8020ff8 <util_timer_set_period>
			TimerStart(&RxTimeoutTimer);
 801f308:	4809      	ldr	r0, [pc, #36]	@ (801f330 <RadioRxBoosted+0x60>)
 801f30a:	f001 fd91 	bl	8020e30 <util_timer_start>
		}
		SX126xSetRxBoosted(0xFFFFFF); // Rx Continuous
 801f30e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 801f312:	f000 fcf5 	bl	801fd00 <SX126xSetRxBoosted>
	}
	else {
		SX126xSetRxBoosted(RxTimeout << 6);
	}
}
 801f316:	e005      	b.n	801f324 <RadioRxBoosted+0x54>
		SX126xSetRxBoosted(RxTimeout << 6);
 801f318:	4b06      	ldr	r3, [pc, #24]	@ (801f334 <RadioRxBoosted+0x64>)
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	019b      	lsls	r3, r3, #6
 801f31e:	4618      	mov	r0, r3
 801f320:	f000 fcee 	bl	801fd00 <SX126xSetRxBoosted>
}
 801f324:	bf00      	nop
 801f326:	3708      	adds	r7, #8
 801f328:	46bd      	mov	sp, r7
 801f32a:	bdb0      	pop	{r4, r5, r7, pc}
 801f32c:	20007e58 	.word	0x20007e58
 801f330:	20007e30 	.word	0x20007e30
 801f334:	20007e54 	.word	0x20007e54

0801f338 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime) {
 801f338:	b580      	push	{r7, lr}
 801f33a:	b082      	sub	sp, #8
 801f33c:	af00      	add	r7, sp, #0
 801f33e:	6078      	str	r0, [r7, #4]
 801f340:	6039      	str	r1, [r7, #0]
	SX126xSetDioIrqParams(IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT,
 801f342:	2300      	movs	r3, #0
 801f344:	2200      	movs	r2, #0
 801f346:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801f34a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801f34e:	f000 fdcd 	bl	801feec <SX126xSetDioIrqParams>
			IRQ_RADIO_ALL | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SX126xSetRxDutyCycle(rxTime, sleepTime);
 801f352:	6839      	ldr	r1, [r7, #0]
 801f354:	6878      	ldr	r0, [r7, #4]
 801f356:	f000 fcf5 	bl	801fd44 <SX126xSetRxDutyCycle>
}
 801f35a:	bf00      	nop
 801f35c:	3708      	adds	r7, #8
 801f35e:	46bd      	mov	sp, r7
 801f360:	bd80      	pop	{r7, pc}

0801f362 <RadioSetCadParams>:

void RadioSetCadParams(uint8_t cadSymbolNum, uint8_t cadDetPeak,
		uint8_t cadDetMin, uint8_t cadExitMode, uint32_t cadTimeout) {
 801f362:	b590      	push	{r4, r7, lr}
 801f364:	b085      	sub	sp, #20
 801f366:	af02      	add	r7, sp, #8
 801f368:	4604      	mov	r4, r0
 801f36a:	4608      	mov	r0, r1
 801f36c:	4611      	mov	r1, r2
 801f36e:	461a      	mov	r2, r3
 801f370:	4623      	mov	r3, r4
 801f372:	71fb      	strb	r3, [r7, #7]
 801f374:	4603      	mov	r3, r0
 801f376:	71bb      	strb	r3, [r7, #6]
 801f378:	460b      	mov	r3, r1
 801f37a:	717b      	strb	r3, [r7, #5]
 801f37c:	4613      	mov	r3, r2
 801f37e:	713b      	strb	r3, [r7, #4]
	SX126xSetCadParams((RadioLoRaCadSymbols_t) cadSymbolNum, cadDetPeak,
 801f380:	793c      	ldrb	r4, [r7, #4]
 801f382:	797a      	ldrb	r2, [r7, #5]
 801f384:	79b9      	ldrb	r1, [r7, #6]
 801f386:	79f8      	ldrb	r0, [r7, #7]
 801f388:	69bb      	ldr	r3, [r7, #24]
 801f38a:	9300      	str	r3, [sp, #0]
 801f38c:	4623      	mov	r3, r4
 801f38e:	f001 f801 	bl	8020394 <SX126xSetCadParams>
			cadDetMin, (RadioCadExitModes_t) cadExitMode, cadTimeout);
}
 801f392:	bf00      	nop
 801f394:	370c      	adds	r7, #12
 801f396:	46bd      	mov	sp, r7
 801f398:	bd90      	pop	{r4, r7, pc}

0801f39a <RadioStartCad>:

void RadioStartCad(void) {
 801f39a:	b580      	push	{r7, lr}
 801f39c:	af00      	add	r7, sp, #0
	SX126xRXena();
 801f39e:	f001 fafb 	bl	8020998 <SX126xRXena>
	SX126xSetDioIrqParams(IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED,
 801f3a2:	2300      	movs	r3, #0
 801f3a4:	2200      	movs	r2, #0
 801f3a6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801f3aa:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801f3ae:	f000 fd9d 	bl	801feec <SX126xSetDioIrqParams>
			IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
	SX126xSetCad();
 801f3b2:	f000 fcf0 	bl	801fd96 <SX126xSetCad>
}
 801f3b6:	bf00      	nop
 801f3b8:	bd80      	pop	{r7, pc}
	...

0801f3bc <RadioSetTxContinuousWave>:
 *
 * \param freq       Channel RF frequency
 * \param power      Sets the output power [dBm]
 * \param time       Transmission mode timeout [s]
 */
void RadioSetTxContinuousWave(uint32_t freq, int8_t power, uint16_t time) {
 801f3bc:	b580      	push	{r7, lr}
 801f3be:	b082      	sub	sp, #8
 801f3c0:	af00      	add	r7, sp, #0
 801f3c2:	6078      	str	r0, [r7, #4]
 801f3c4:	460b      	mov	r3, r1
 801f3c6:	70fb      	strb	r3, [r7, #3]
 801f3c8:	4613      	mov	r3, r2
 801f3ca:	803b      	strh	r3, [r7, #0]
	SX126xSetRfFrequency(freq);
 801f3cc:	6878      	ldr	r0, [r7, #4]
 801f3ce:	f000 fdeb 	bl	801ffa8 <SX126xSetRfFrequency>
	SX126xSetRfTxPower(power);
 801f3d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801f3d6:	4618      	mov	r0, r3
 801f3d8:	f001 fab6 	bl	8020948 <SX126xSetRfTxPower>
	SX126xSetTxContinuousWave();
 801f3dc:	f000 fce7 	bl	801fdae <SX126xSetTxContinuousWave>

	TimerSetValue(&TxTimeoutTimer, time * 1e3);
 801f3e0:	883b      	ldrh	r3, [r7, #0]
 801f3e2:	4618      	mov	r0, r3
 801f3e4:	f7e1 f89e 	bl	8000524 <__aeabi_i2d>
 801f3e8:	f04f 0200 	mov.w	r2, #0
 801f3ec:	4b0a      	ldr	r3, [pc, #40]	@ (801f418 <RadioSetTxContinuousWave+0x5c>)
 801f3ee:	f7e1 f903 	bl	80005f8 <__aeabi_dmul>
 801f3f2:	4602      	mov	r2, r0
 801f3f4:	460b      	mov	r3, r1
 801f3f6:	4610      	mov	r0, r2
 801f3f8:	4619      	mov	r1, r3
 801f3fa:	f7e1 fc0d 	bl	8000c18 <__aeabi_d2ulz>
 801f3fe:	4602      	mov	r2, r0
 801f400:	460b      	mov	r3, r1
 801f402:	4806      	ldr	r0, [pc, #24]	@ (801f41c <RadioSetTxContinuousWave+0x60>)
 801f404:	f001 fdf8 	bl	8020ff8 <util_timer_set_period>
	TimerStart(&TxTimeoutTimer);
 801f408:	4804      	ldr	r0, [pc, #16]	@ (801f41c <RadioSetTxContinuousWave+0x60>)
 801f40a:	f001 fd11 	bl	8020e30 <util_timer_start>
}
 801f40e:	bf00      	nop
 801f410:	3708      	adds	r7, #8
 801f412:	46bd      	mov	sp, r7
 801f414:	bd80      	pop	{r7, pc}
 801f416:	bf00      	nop
 801f418:	408f4000 	.word	0x408f4000
 801f41c:	20007e10 	.word	0x20007e10

0801f420 <RadioRssi>:

int16_t RadioRssi(RadioModems_t modem) {
 801f420:	b580      	push	{r7, lr}
 801f422:	b082      	sub	sp, #8
 801f424:	af00      	add	r7, sp, #0
 801f426:	4603      	mov	r3, r0
 801f428:	71fb      	strb	r3, [r7, #7]
	return SX126xGetRssiInst();
 801f42a:	f000 fffc 	bl	8020426 <SX126xGetRssiInst>
 801f42e:	4603      	mov	r3, r0
}
 801f430:	4618      	mov	r0, r3
 801f432:	3708      	adds	r7, #8
 801f434:	46bd      	mov	sp, r7
 801f436:	bd80      	pop	{r7, pc}

0801f438 <RadioWrite>:
 * \brief Writes the radio register at the specified address
 *
 * \param  addr Register address
 * \param  data New register value
 */
void RadioWrite(uint16_t addr, uint8_t data) {
 801f438:	b580      	push	{r7, lr}
 801f43a:	b082      	sub	sp, #8
 801f43c:	af00      	add	r7, sp, #0
 801f43e:	4603      	mov	r3, r0
 801f440:	460a      	mov	r2, r1
 801f442:	80fb      	strh	r3, [r7, #6]
 801f444:	4613      	mov	r3, r2
 801f446:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegister(addr, data);
 801f448:	797a      	ldrb	r2, [r7, #5]
 801f44a:	88fb      	ldrh	r3, [r7, #6]
 801f44c:	4611      	mov	r1, r2
 801f44e:	4618      	mov	r0, r3
 801f450:	f001 f9ac 	bl	80207ac <SX126xWriteRegister>
}
 801f454:	bf00      	nop
 801f456:	3708      	adds	r7, #8
 801f458:	46bd      	mov	sp, r7
 801f45a:	bd80      	pop	{r7, pc}

0801f45c <RadioRead>:
/*!
 * \brief Reads the radio register at the specified address
 *
 * \param  addr Register address
 */
uint8_t RadioRead(uint16_t addr) {
 801f45c:	b580      	push	{r7, lr}
 801f45e:	b082      	sub	sp, #8
 801f460:	af00      	add	r7, sp, #0
 801f462:	4603      	mov	r3, r0
 801f464:	80fb      	strh	r3, [r7, #6]
	return SX126xReadRegister(addr);
 801f466:	88fb      	ldrh	r3, [r7, #6]
 801f468:	4618      	mov	r0, r3
 801f46a:	f001 f9eb 	bl	8020844 <SX126xReadRegister>
 801f46e:	4603      	mov	r3, r0
}
 801f470:	4618      	mov	r0, r3
 801f472:	3708      	adds	r7, #8
 801f474:	46bd      	mov	sp, r7
 801f476:	bd80      	pop	{r7, pc}

0801f478 <RadioWriteBuffer>:

void RadioWriteBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 801f478:	b580      	push	{r7, lr}
 801f47a:	b082      	sub	sp, #8
 801f47c:	af00      	add	r7, sp, #0
 801f47e:	4603      	mov	r3, r0
 801f480:	6039      	str	r1, [r7, #0]
 801f482:	80fb      	strh	r3, [r7, #6]
 801f484:	4613      	mov	r3, r2
 801f486:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegisters(addr, buffer, size);
 801f488:	797b      	ldrb	r3, [r7, #5]
 801f48a:	b29a      	uxth	r2, r3
 801f48c:	88fb      	ldrh	r3, [r7, #6]
 801f48e:	6839      	ldr	r1, [r7, #0]
 801f490:	4618      	mov	r0, r3
 801f492:	f001 f953 	bl	802073c <SX126xWriteRegisters>
}
 801f496:	bf00      	nop
 801f498:	3708      	adds	r7, #8
 801f49a:	46bd      	mov	sp, r7
 801f49c:	bd80      	pop	{r7, pc}

0801f49e <RadioReadBuffer>:

void RadioReadBuffer(uint16_t addr, uint8_t *buffer, uint8_t size) {
 801f49e:	b580      	push	{r7, lr}
 801f4a0:	b082      	sub	sp, #8
 801f4a2:	af00      	add	r7, sp, #0
 801f4a4:	4603      	mov	r3, r0
 801f4a6:	6039      	str	r1, [r7, #0]
 801f4a8:	80fb      	strh	r3, [r7, #6]
 801f4aa:	4613      	mov	r3, r2
 801f4ac:	717b      	strb	r3, [r7, #5]
	SX126xReadRegisters(addr, buffer, size);
 801f4ae:	797b      	ldrb	r3, [r7, #5]
 801f4b0:	b29a      	uxth	r2, r3
 801f4b2:	88fb      	ldrh	r3, [r7, #6]
 801f4b4:	6839      	ldr	r1, [r7, #0]
 801f4b6:	4618      	mov	r0, r3
 801f4b8:	f001 f98a 	bl	80207d0 <SX126xReadRegisters>
}
 801f4bc:	bf00      	nop
 801f4be:	3708      	adds	r7, #8
 801f4c0:	46bd      	mov	sp, r7
 801f4c2:	bd80      	pop	{r7, pc}

0801f4c4 <RadioSetMaxPayloadLength>:

void RadioReadFifo(uint8_t *buffer, uint8_t size) {
	SX126xReadBuffer(0, buffer, size);
}

void RadioSetMaxPayloadLength(RadioModems_t modem, uint8_t max) {
 801f4c4:	b580      	push	{r7, lr}
 801f4c6:	b082      	sub	sp, #8
 801f4c8:	af00      	add	r7, sp, #0
 801f4ca:	4603      	mov	r3, r0
 801f4cc:	460a      	mov	r2, r1
 801f4ce:	71fb      	strb	r3, [r7, #7]
 801f4d0:	4613      	mov	r3, r2
 801f4d2:	71bb      	strb	r3, [r7, #6]
	if (modem == MODEM_LORA) {
 801f4d4:	79fb      	ldrb	r3, [r7, #7]
 801f4d6:	2b01      	cmp	r3, #1
 801f4d8:	d10b      	bne.n	801f4f2 <RadioSetMaxPayloadLength+0x2e>
		SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801f4da:	4a0f      	ldr	r2, [pc, #60]	@ (801f518 <RadioSetMaxPayloadLength+0x54>)
 801f4dc:	79bb      	ldrb	r3, [r7, #6]
 801f4de:	7013      	strb	r3, [r2, #0]
 801f4e0:	4b0d      	ldr	r3, [pc, #52]	@ (801f518 <RadioSetMaxPayloadLength+0x54>)
 801f4e2:	781a      	ldrb	r2, [r3, #0]
 801f4e4:	4b0d      	ldr	r3, [pc, #52]	@ (801f51c <RadioSetMaxPayloadLength+0x58>)
 801f4e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		SX126xSetPacketParams(&SX126x.PacketParams);
 801f4ea:	480d      	ldr	r0, [pc, #52]	@ (801f520 <RadioSetMaxPayloadLength+0x5c>)
 801f4ec:	f000 feca 	bl	8020284 <SX126xSetPacketParams>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
					max;
			SX126xSetPacketParams(&SX126x.PacketParams);
		}
	}
}
 801f4f0:	e00e      	b.n	801f510 <RadioSetMaxPayloadLength+0x4c>
		if (SX126x.PacketParams.Params.Gfsk.HeaderType
 801f4f2:	4b0a      	ldr	r3, [pc, #40]	@ (801f51c <RadioSetMaxPayloadLength+0x58>)
 801f4f4:	7fdb      	ldrb	r3, [r3, #31]
 801f4f6:	2b01      	cmp	r3, #1
 801f4f8:	d10a      	bne.n	801f510 <RadioSetMaxPayloadLength+0x4c>
			SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength =
 801f4fa:	4a07      	ldr	r2, [pc, #28]	@ (801f518 <RadioSetMaxPayloadLength+0x54>)
 801f4fc:	79bb      	ldrb	r3, [r7, #6]
 801f4fe:	7013      	strb	r3, [r2, #0]
 801f500:	4b05      	ldr	r3, [pc, #20]	@ (801f518 <RadioSetMaxPayloadLength+0x54>)
 801f502:	781a      	ldrb	r2, [r3, #0]
 801f504:	4b05      	ldr	r3, [pc, #20]	@ (801f51c <RadioSetMaxPayloadLength+0x58>)
 801f506:	f883 2020 	strb.w	r2, [r3, #32]
			SX126xSetPacketParams(&SX126x.PacketParams);
 801f50a:	4805      	ldr	r0, [pc, #20]	@ (801f520 <RadioSetMaxPayloadLength+0x5c>)
 801f50c:	f000 feba 	bl	8020284 <SX126xSetPacketParams>
}
 801f510:	bf00      	nop
 801f512:	3708      	adds	r7, #8
 801f514:	46bd      	mov	sp, r7
 801f516:	bd80      	pop	{r7, pc}
 801f518:	20000328 	.word	0x20000328
 801f51c:	20007f80 	.word	0x20007f80
 801f520:	20007f98 	.word	0x20007f98

0801f524 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork(bool enable) {
 801f524:	b580      	push	{r7, lr}
 801f526:	b082      	sub	sp, #8
 801f528:	af00      	add	r7, sp, #0
 801f52a:	4603      	mov	r3, r0
 801f52c:	71fb      	strb	r3, [r7, #7]
	RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 801f52e:	4a13      	ldr	r2, [pc, #76]	@ (801f57c <RadioSetPublicNetwork+0x58>)
 801f530:	79fb      	ldrb	r3, [r7, #7]
 801f532:	7013      	strb	r3, [r2, #0]
 801f534:	4b11      	ldr	r3, [pc, #68]	@ (801f57c <RadioSetPublicNetwork+0x58>)
 801f536:	781a      	ldrb	r2, [r3, #0]
 801f538:	4b10      	ldr	r3, [pc, #64]	@ (801f57c <RadioSetPublicNetwork+0x58>)
 801f53a:	705a      	strb	r2, [r3, #1]

	RadioSetModem(MODEM_LORA);
 801f53c:	2001      	movs	r0, #1
 801f53e:	f7ff f963 	bl	801e808 <RadioSetModem>
	if (enable == true) {
 801f542:	79fb      	ldrb	r3, [r7, #7]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d00a      	beq.n	801f55e <RadioSetPublicNetwork+0x3a>
		// Change LoRa modem SyncWord
		SX126xWriteRegister(REG_LR_SYNCWORD,
 801f548:	2134      	movs	r1, #52	@ 0x34
 801f54a:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801f54e:	f001 f92d 	bl	80207ac <SX126xWriteRegister>
				(LORA_MAC_PUBLIC_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 801f552:	2144      	movs	r1, #68	@ 0x44
 801f554:	f240 7041 	movw	r0, #1857	@ 0x741
 801f558:	f001 f928 	bl	80207ac <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD,
				(LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
				LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
	}
}
 801f55c:	e009      	b.n	801f572 <RadioSetPublicNetwork+0x4e>
		SX126xWriteRegister(REG_LR_SYNCWORD,
 801f55e:	2114      	movs	r1, #20
 801f560:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801f564:	f001 f922 	bl	80207ac <SX126xWriteRegister>
		SX126xWriteRegister(REG_LR_SYNCWORD + 1,
 801f568:	2124      	movs	r1, #36	@ 0x24
 801f56a:	f240 7041 	movw	r0, #1857	@ 0x741
 801f56e:	f001 f91d 	bl	80207ac <SX126xWriteRegister>
}
 801f572:	bf00      	nop
 801f574:	3708      	adds	r7, #8
 801f576:	46bd      	mov	sp, r7
 801f578:	bd80      	pop	{r7, pc}
 801f57a:	bf00      	nop
 801f57c:	20007f78 	.word	0x20007f78

0801f580 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime(void) {
 801f580:	b480      	push	{r7}
 801f582:	af00      	add	r7, sp, #0
	return (RADIO_WAKEUP_TIME);
 801f584:	2303      	movs	r3, #3
}
 801f586:	4618      	mov	r0, r3
 801f588:	46bd      	mov	sp, r7
 801f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f58e:	4770      	bx	lr

0801f590 <RadioOnTxTimeoutIrq>:

void RadioOnTxTimeoutIrq(void *arg) {
 801f590:	b580      	push	{r7, lr}
 801f592:	b082      	sub	sp, #8
 801f594:	af00      	add	r7, sp, #0
 801f596:	6078      	str	r0, [r7, #4]
	// if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL))
	// {
	// 	RadioEvents->TxTimeout();
	// }
	BoardDisableIrq();
 801f598:	f001 faa5 	bl	8020ae6 <BoardDisableIrq>
	TimerTxTimeout = true;
 801f59c:	4b08      	ldr	r3, [pc, #32]	@ (801f5c0 <RadioOnTxTimeoutIrq+0x30>)
 801f59e:	2201      	movs	r2, #1
 801f5a0:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 801f5a2:	f001 faa9 	bl	8020af8 <BoardEnableIrq>
	TimerStop(&TxTimeoutTimer);
 801f5a6:	4807      	ldr	r0, [pc, #28]	@ (801f5c4 <RadioOnTxTimeoutIrq+0x34>)
 801f5a8:	f001 fcbe 	bl	8020f28 <util_timer_stop>

	RadioBgIrqProcess();
 801f5ac:	f000 f840 	bl	801f630 <RadioBgIrqProcess>
	RadioStandby();
 801f5b0:	f7ff fe51 	bl	801f256 <RadioStandby>
	RadioSleep();
 801f5b4:	f7ff fe3c 	bl	801f230 <RadioSleep>
}
 801f5b8:	bf00      	nop
 801f5ba:	3708      	adds	r7, #8
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	bd80      	pop	{r7, pc}
 801f5c0:	20007f71 	.word	0x20007f71
 801f5c4:	20007e10 	.word	0x20007e10

0801f5c8 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq(void *arg) {
 801f5c8:	b580      	push	{r7, lr}
 801f5ca:	b082      	sub	sp, #8
 801f5cc:	af00      	add	r7, sp, #0
 801f5ce:	6078      	str	r0, [r7, #4]
	// if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL))
	// {
	// 	RadioEvents->RxTimeout();
	// }
	BoardDisableIrq();
 801f5d0:	f001 fa89 	bl	8020ae6 <BoardDisableIrq>
	TimerRxTimeout = true;
 801f5d4:	4b08      	ldr	r3, [pc, #32]	@ (801f5f8 <RadioOnRxTimeoutIrq+0x30>)
 801f5d6:	2201      	movs	r2, #1
 801f5d8:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 801f5da:	f001 fa8d 	bl	8020af8 <BoardEnableIrq>
	TimerStop(&RxTimeoutTimer);
 801f5de:	4807      	ldr	r0, [pc, #28]	@ (801f5fc <RadioOnRxTimeoutIrq+0x34>)
 801f5e0:	f001 fca2 	bl	8020f28 <util_timer_stop>

	RadioBgIrqProcess();
 801f5e4:	f000 f824 	bl	801f630 <RadioBgIrqProcess>
	RadioStandby();
 801f5e8:	f7ff fe35 	bl	801f256 <RadioStandby>
	RadioSleep();
 801f5ec:	f7ff fe20 	bl	801f230 <RadioSleep>
}
 801f5f0:	bf00      	nop
 801f5f2:	3708      	adds	r7, #8
 801f5f4:	46bd      	mov	sp, r7
 801f5f6:	bd80      	pop	{r7, pc}
 801f5f8:	20007f70 	.word	0x20007f70
 801f5fc:	20007e30 	.word	0x20007e30

0801f600 <RadioOnDioIrq>:



static BaseType_t xHigherPriorityTaskWoken = pdTRUE;

void RadioOnDioIrq(void){
 801f600:	b580      	push	{r7, lr}
 801f602:	af00      	add	r7, sp, #0
	BoardDisableIrq();
 801f604:	f001 fa6f 	bl	8020ae6 <BoardDisableIrq>
	IrqFired = true;
 801f608:	4b06      	ldr	r3, [pc, #24]	@ (801f624 <RadioOnDioIrq+0x24>)
 801f60a:	2201      	movs	r2, #1
 801f60c:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 801f60e:	f001 fa73 	bl	8020af8 <BoardEnableIrq>
	xSemaphoreGiveFromISR(_lora_sem, &xHigherPriorityTaskWoken);
 801f612:	4b05      	ldr	r3, [pc, #20]	@ (801f628 <RadioOnDioIrq+0x28>)
 801f614:	681b      	ldr	r3, [r3, #0]
 801f616:	4905      	ldr	r1, [pc, #20]	@ (801f62c <RadioOnDioIrq+0x2c>)
 801f618:	4618      	mov	r0, r3
 801f61a:	f7e8 faab 	bl	8007b74 <xQueueGiveFromISR>
}
 801f61e:	bf00      	nop
 801f620:	bd80      	pop	{r7, pc}
 801f622:	bf00      	nop
 801f624:	20007f6f 	.word	0x20007f6f
 801f628:	20007f74 	.word	0x20007f74
 801f62c:	2000032c 	.word	0x2000032c

0801f630 <RadioBgIrqProcess>:

void RadioBgIrqProcess(void) {
 801f630:	b590      	push	{r4, r7, lr}
 801f632:	b083      	sub	sp, #12
 801f634:	af00      	add	r7, sp, #0
	bool rx_timeout_handled = false;
 801f636:	2300      	movs	r3, #0
 801f638:	71fb      	strb	r3, [r7, #7]
	bool tx_timeout_handled = false;
 801f63a:	2300      	movs	r3, #0
 801f63c:	71bb      	strb	r3, [r7, #6]
	if (IrqFired == true) {
 801f63e:	4b6c      	ldr	r3, [pc, #432]	@ (801f7f0 <RadioBgIrqProcess+0x1c0>)
 801f640:	781b      	ldrb	r3, [r3, #0]
 801f642:	2b00      	cmp	r3, #0
 801f644:	f000 812d 	beq.w	801f8a2 <RadioBgIrqProcess+0x272>
		BoardDisableIrq();
 801f648:	f001 fa4d 	bl	8020ae6 <BoardDisableIrq>
		IrqFired = false;
 801f64c:	4b68      	ldr	r3, [pc, #416]	@ (801f7f0 <RadioBgIrqProcess+0x1c0>)
 801f64e:	2200      	movs	r2, #0
 801f650:	701a      	strb	r2, [r3, #0]
		BoardEnableIrq();
 801f652:	f001 fa51 	bl	8020af8 <BoardEnableIrq>

		uint16_t irqRegs = SX126xGetIrqStatus();
 801f656:	f000 fc83 	bl	801ff60 <SX126xGetIrqStatus>
 801f65a:	4603      	mov	r3, r0
 801f65c:	80bb      	strh	r3, [r7, #4]
		SX126xClearIrqStatus(IRQ_RADIO_ALL);
 801f65e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801f662:	f000 ff75 	bl	8020550 <SX126xClearIrqStatus>

		if ((irqRegs & IRQ_TX_DONE) == IRQ_TX_DONE) {
 801f666:	88bb      	ldrh	r3, [r7, #4]
 801f668:	f003 0301 	and.w	r3, r3, #1
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d014      	beq.n	801f69a <RadioBgIrqProcess+0x6a>
			tx_timeout_handled = true;
 801f670:	2301      	movs	r3, #1
 801f672:	71bb      	strb	r3, [r7, #6]
			TimerStop(&TxTimeoutTimer);
 801f674:	485f      	ldr	r0, [pc, #380]	@ (801f7f4 <RadioBgIrqProcess+0x1c4>)
 801f676:	f001 fc57 	bl	8020f28 <util_timer_stop>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 801f67a:	2001      	movs	r0, #1
 801f67c:	f000 f9ce 	bl	801fa1c <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->TxDone != NULL)) {
 801f680:	4b5d      	ldr	r3, [pc, #372]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d008      	beq.n	801f69a <RadioBgIrqProcess+0x6a>
 801f688:	4b5b      	ldr	r3, [pc, #364]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f68a:	681b      	ldr	r3, [r3, #0]
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d003      	beq.n	801f69a <RadioBgIrqProcess+0x6a>
				RadioEvents->TxDone();
 801f692:	4b59      	ldr	r3, [pc, #356]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	681b      	ldr	r3, [r3, #0]
 801f698:	4798      	blx	r3
			}
		}

		if ((irqRegs & IRQ_RX_DONE) == IRQ_RX_DONE) {
 801f69a:	88bb      	ldrh	r3, [r7, #4]
 801f69c:	f003 0302 	and.w	r3, r3, #2
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d066      	beq.n	801f772 <RadioBgIrqProcess+0x142>
			uint8_t size;

			rx_timeout_handled = true;
 801f6a4:	2301      	movs	r3, #1
 801f6a6:	71fb      	strb	r3, [r7, #7]
			TimerStop(&RxTimeoutTimer);
 801f6a8:	4854      	ldr	r0, [pc, #336]	@ (801f7fc <RadioBgIrqProcess+0x1cc>)
 801f6aa:	f001 fc3d 	bl	8020f28 <util_timer_stop>
			if (RxContinuous == false) {
 801f6ae:	4b54      	ldr	r3, [pc, #336]	@ (801f800 <RadioBgIrqProcess+0x1d0>)
 801f6b0:	781b      	ldrb	r3, [r3, #0]
 801f6b2:	f083 0301 	eor.w	r3, r3, #1
 801f6b6:	b2db      	uxtb	r3, r3
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	d014      	beq.n	801f6e6 <RadioBgIrqProcess+0xb6>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 801f6bc:	2001      	movs	r0, #1
 801f6be:	f000 f9ad 	bl	801fa1c <SX126xSetOperatingMode>

				// WORKAROUND - Implicit Header Mode Timeout Behavior, see DS_SX1261-2_V1.2 datasheet chapter 15.3
				// RegRtcControl = @address 0x0902
				SX126xWriteRegister(0x0902, 0x00);
 801f6c2:	2100      	movs	r1, #0
 801f6c4:	f640 1002 	movw	r0, #2306	@ 0x902
 801f6c8:	f001 f870 	bl	80207ac <SX126xWriteRegister>
				// RegEventMask = @address 0x0944
				SX126xWriteRegister(0x0944,
						SX126xReadRegister(0x0944) | (1 << 1));
 801f6cc:	f640 1044 	movw	r0, #2372	@ 0x944
 801f6d0:	f001 f8b8 	bl	8020844 <SX126xReadRegister>
 801f6d4:	4603      	mov	r3, r0
				SX126xWriteRegister(0x0944,
 801f6d6:	f043 0302 	orr.w	r3, r3, #2
 801f6da:	b2db      	uxtb	r3, r3
 801f6dc:	4619      	mov	r1, r3
 801f6de:	f640 1044 	movw	r0, #2372	@ 0x944
 801f6e2:	f001 f863 	bl	80207ac <SX126xWriteRegister>
				// WORKAROUND END
			}
			memset(RadioRxPayload, 0, 255);
 801f6e6:	22ff      	movs	r2, #255	@ 0xff
 801f6e8:	2100      	movs	r1, #0
 801f6ea:	4846      	ldr	r0, [pc, #280]	@ (801f804 <RadioBgIrqProcess+0x1d4>)
 801f6ec:	f002 fdae 	bl	802224c <memset>

			if ((irqRegs & IRQ_CRC_ERROR) == IRQ_CRC_ERROR) {
 801f6f0:	88bb      	ldrh	r3, [r7, #4]
 801f6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d01b      	beq.n	801f732 <RadioBgIrqProcess+0x102>
				LOG_LIB("RADIO", "IRQ_CRC_ERROR");

				uint8_t size;
				// Discard buffer
				memset(RadioRxPayload, 0, 255);
 801f6fa:	22ff      	movs	r2, #255	@ 0xff
 801f6fc:	2100      	movs	r1, #0
 801f6fe:	4841      	ldr	r0, [pc, #260]	@ (801f804 <RadioBgIrqProcess+0x1d4>)
 801f700:	f002 fda4 	bl	802224c <memset>
				SX126xGetPayload(RadioRxPayload, &size, 255);
 801f704:	1cbb      	adds	r3, r7, #2
 801f706:	22ff      	movs	r2, #255	@ 0xff
 801f708:	4619      	mov	r1, r3
 801f70a:	483e      	ldr	r0, [pc, #248]	@ (801f804 <RadioBgIrqProcess+0x1d4>)
 801f70c:	f000 f9ba 	bl	801fa84 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 801f710:	483d      	ldr	r0, [pc, #244]	@ (801f808 <RadioBgIrqProcess+0x1d8>)
 801f712:	f000 fecb 	bl	80204ac <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxError)) {
 801f716:	4b38      	ldr	r3, [pc, #224]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d029      	beq.n	801f772 <RadioBgIrqProcess+0x142>
 801f71e:	4b36      	ldr	r3, [pc, #216]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	691b      	ldr	r3, [r3, #16]
 801f724:	2b00      	cmp	r3, #0
 801f726:	d024      	beq.n	801f772 <RadioBgIrqProcess+0x142>
					RadioEvents->RxError();
 801f728:	4b33      	ldr	r3, [pc, #204]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f72a:	681b      	ldr	r3, [r3, #0]
 801f72c:	691b      	ldr	r3, [r3, #16]
 801f72e:	4798      	blx	r3
 801f730:	e01f      	b.n	801f772 <RadioBgIrqProcess+0x142>
				}
			}
			else {
				SX126xGetPayload(RadioRxPayload, &size, 255);
 801f732:	1cfb      	adds	r3, r7, #3
 801f734:	22ff      	movs	r2, #255	@ 0xff
 801f736:	4619      	mov	r1, r3
 801f738:	4832      	ldr	r0, [pc, #200]	@ (801f804 <RadioBgIrqProcess+0x1d4>)
 801f73a:	f000 f9a3 	bl	801fa84 <SX126xGetPayload>
				SX126xGetPacketStatus(&RadioPktStatus);
 801f73e:	4832      	ldr	r0, [pc, #200]	@ (801f808 <RadioBgIrqProcess+0x1d8>)
 801f740:	f000 feb4 	bl	80204ac <SX126xGetPacketStatus>
				if ((RadioEvents != NULL) && (RadioEvents->RxDone != NULL)) {
 801f744:	4b2c      	ldr	r3, [pc, #176]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d012      	beq.n	801f772 <RadioBgIrqProcess+0x142>
 801f74c:	4b2a      	ldr	r3, [pc, #168]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	689b      	ldr	r3, [r3, #8]
 801f752:	2b00      	cmp	r3, #0
 801f754:	d00d      	beq.n	801f772 <RadioBgIrqProcess+0x142>
					RadioEvents->RxDone(RadioRxPayload, size,
 801f756:	4b28      	ldr	r3, [pc, #160]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f758:	681b      	ldr	r3, [r3, #0]
 801f75a:	689c      	ldr	r4, [r3, #8]
 801f75c:	78fb      	ldrb	r3, [r7, #3]
 801f75e:	4619      	mov	r1, r3
							RadioPktStatus.Params.LoRa.RssiPkt,
 801f760:	4b29      	ldr	r3, [pc, #164]	@ (801f808 <RadioBgIrqProcess+0x1d8>)
 801f762:	f993 300c 	ldrsb.w	r3, [r3, #12]
					RadioEvents->RxDone(RadioRxPayload, size,
 801f766:	461a      	mov	r2, r3
 801f768:	4b27      	ldr	r3, [pc, #156]	@ (801f808 <RadioBgIrqProcess+0x1d8>)
 801f76a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 801f76e:	4825      	ldr	r0, [pc, #148]	@ (801f804 <RadioBgIrqProcess+0x1d4>)
 801f770:	47a0      	blx	r4
							RadioPktStatus.Params.LoRa.SnrPkt);
				}
			}
		}

		if ((irqRegs & IRQ_CAD_DONE) == IRQ_CAD_DONE) {
 801f772:	88bb      	ldrh	r3, [r7, #4]
 801f774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801f778:	2b00      	cmp	r3, #0
 801f77a:	d018      	beq.n	801f7ae <RadioBgIrqProcess+0x17e>
			//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
			SX126xSetOperatingMode(MODE_STDBY_RC);
 801f77c:	2001      	movs	r0, #1
 801f77e:	f000 f94d 	bl	801fa1c <SX126xSetOperatingMode>
			if ((RadioEvents != NULL) && (RadioEvents->CadDone != NULL)) {
 801f782:	4b1d      	ldr	r3, [pc, #116]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d011      	beq.n	801f7ae <RadioBgIrqProcess+0x17e>
 801f78a:	4b1b      	ldr	r3, [pc, #108]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	69db      	ldr	r3, [r3, #28]
 801f790:	2b00      	cmp	r3, #0
 801f792:	d00c      	beq.n	801f7ae <RadioBgIrqProcess+0x17e>
				RadioEvents->CadDone(
 801f794:	4b18      	ldr	r3, [pc, #96]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	69db      	ldr	r3, [r3, #28]
						((irqRegs & IRQ_CAD_ACTIVITY_DETECTED)
 801f79a:	88ba      	ldrh	r2, [r7, #4]
 801f79c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
				RadioEvents->CadDone(
 801f7a0:	2a00      	cmp	r2, #0
 801f7a2:	bf14      	ite	ne
 801f7a4:	2201      	movne	r2, #1
 801f7a6:	2200      	moveq	r2, #0
 801f7a8:	b2d2      	uxtb	r2, r2
 801f7aa:	4610      	mov	r0, r2
 801f7ac:	4798      	blx	r3
								== IRQ_CAD_ACTIVITY_DETECTED));
			}
		}

		if ((irqRegs & IRQ_RX_TX_TIMEOUT) == IRQ_RX_TX_TIMEOUT) {
 801f7ae:	88bb      	ldrh	r3, [r7, #4]
 801f7b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	d043      	beq.n	801f840 <RadioBgIrqProcess+0x210>
			if (SX126xGetOperatingMode() == MODE_TX) {
 801f7b8:	f000 f924 	bl	801fa04 <SX126xGetOperatingMode>
 801f7bc:	4603      	mov	r3, r0
 801f7be:	2b04      	cmp	r3, #4
 801f7c0:	d124      	bne.n	801f80c <RadioBgIrqProcess+0x1dc>
				LOG_LIB("RADIO", "IRQ_TX_TIMEOUT");
				tx_timeout_handled = true;
 801f7c2:	2301      	movs	r3, #1
 801f7c4:	71bb      	strb	r3, [r7, #6]
				TimerStop(&TxTimeoutTimer);
 801f7c6:	480b      	ldr	r0, [pc, #44]	@ (801f7f4 <RadioBgIrqProcess+0x1c4>)
 801f7c8:	f001 fbae 	bl	8020f28 <util_timer_stop>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 801f7cc:	2001      	movs	r0, #1
 801f7ce:	f000 f925 	bl	801fa1c <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 801f7d2:	4b09      	ldr	r3, [pc, #36]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f7d4:	681b      	ldr	r3, [r3, #0]
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d032      	beq.n	801f840 <RadioBgIrqProcess+0x210>
 801f7da:	4b07      	ldr	r3, [pc, #28]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	685b      	ldr	r3, [r3, #4]
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d02d      	beq.n	801f840 <RadioBgIrqProcess+0x210>
					RadioEvents->TxTimeout();
 801f7e4:	4b04      	ldr	r3, [pc, #16]	@ (801f7f8 <RadioBgIrqProcess+0x1c8>)
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	685b      	ldr	r3, [r3, #4]
 801f7ea:	4798      	blx	r3
 801f7ec:	e028      	b.n	801f840 <RadioBgIrqProcess+0x210>
 801f7ee:	bf00      	nop
 801f7f0:	20007f6f 	.word	0x20007f6f
 801f7f4:	20007e10 	.word	0x20007e10
 801f7f8:	20007f7c 	.word	0x20007f7c
 801f7fc:	20007e30 	.word	0x20007e30
 801f800:	20007e58 	.word	0x20007e58
 801f804:	20007e70 	.word	0x20007e70
 801f808:	20007e5c 	.word	0x20007e5c
				}
			}
			else if (SX126xGetOperatingMode() == MODE_RX) {
 801f80c:	f000 f8fa 	bl	801fa04 <SX126xGetOperatingMode>
 801f810:	4603      	mov	r3, r0
 801f812:	2b05      	cmp	r3, #5
 801f814:	d114      	bne.n	801f840 <RadioBgIrqProcess+0x210>
				LOG_LIB("RADIO", "IRQ_RX_TIMEOUT");
				rx_timeout_handled = true;
 801f816:	2301      	movs	r3, #1
 801f818:	71fb      	strb	r3, [r7, #7]
				TimerStop(&RxTimeoutTimer);
 801f81a:	4841      	ldr	r0, [pc, #260]	@ (801f920 <RadioBgIrqProcess+0x2f0>)
 801f81c:	f001 fb84 	bl	8020f28 <util_timer_stop>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 801f820:	2001      	movs	r0, #1
 801f822:	f000 f8fb 	bl	801fa1c <SX126xSetOperatingMode>
				if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 801f826:	4b3f      	ldr	r3, [pc, #252]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d008      	beq.n	801f840 <RadioBgIrqProcess+0x210>
 801f82e:	4b3d      	ldr	r3, [pc, #244]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	68db      	ldr	r3, [r3, #12]
 801f834:	2b00      	cmp	r3, #0
 801f836:	d003      	beq.n	801f840 <RadioBgIrqProcess+0x210>
					RadioEvents->RxTimeout();
 801f838:	4b3a      	ldr	r3, [pc, #232]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	68db      	ldr	r3, [r3, #12]
 801f83e:	4798      	blx	r3
				}
			}
		}

		if ((irqRegs & IRQ_PREAMBLE_DETECTED) == IRQ_PREAMBLE_DETECTED) {
 801f840:	88bb      	ldrh	r3, [r7, #4]
 801f842:	f003 0304 	and.w	r3, r3, #4
 801f846:	2b00      	cmp	r3, #0
 801f848:	d00c      	beq.n	801f864 <RadioBgIrqProcess+0x234>
			LOG_LIB("RADIO", "IRQ_PREAMBLE_DETECTED");
			if ((RadioEvents != NULL) && (RadioEvents->PreAmpDetect != NULL)) {
 801f84a:	4b36      	ldr	r3, [pc, #216]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d008      	beq.n	801f864 <RadioBgIrqProcess+0x234>
 801f852:	4b34      	ldr	r3, [pc, #208]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f854:	681b      	ldr	r3, [r3, #0]
 801f856:	695b      	ldr	r3, [r3, #20]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d003      	beq.n	801f864 <RadioBgIrqProcess+0x234>
				RadioEvents->PreAmpDetect();
 801f85c:	4b31      	ldr	r3, [pc, #196]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f85e:	681b      	ldr	r3, [r3, #0]
 801f860:	695b      	ldr	r3, [r3, #20]
 801f862:	4798      	blx	r3

		if ((irqRegs & IRQ_HEADER_VALID) == IRQ_HEADER_VALID) {
			//__NOP( );
		}

		if ((irqRegs & IRQ_HEADER_ERROR) == IRQ_HEADER_ERROR) {
 801f864:	88bb      	ldrh	r3, [r7, #4]
 801f866:	f003 0320 	and.w	r3, r3, #32
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	d019      	beq.n	801f8a2 <RadioBgIrqProcess+0x272>
			LOG_LIB("RADIO", "RadioIrqProcess => IRQ_HEADER_ERROR");

			TimerStop(&RxTimeoutTimer);
 801f86e:	482c      	ldr	r0, [pc, #176]	@ (801f920 <RadioBgIrqProcess+0x2f0>)
 801f870:	f001 fb5a 	bl	8020f28 <util_timer_stop>
			if (RxContinuous == false) {
 801f874:	4b2c      	ldr	r3, [pc, #176]	@ (801f928 <RadioBgIrqProcess+0x2f8>)
 801f876:	781b      	ldrb	r3, [r3, #0]
 801f878:	f083 0301 	eor.w	r3, r3, #1
 801f87c:	b2db      	uxtb	r3, r3
 801f87e:	2b00      	cmp	r3, #0
 801f880:	d002      	beq.n	801f888 <RadioBgIrqProcess+0x258>
				//!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
				SX126xSetOperatingMode(MODE_STDBY_RC);
 801f882:	2001      	movs	r0, #1
 801f884:	f000 f8ca 	bl	801fa1c <SX126xSetOperatingMode>
			}
			if ((RadioEvents != NULL) && (RadioEvents->RxError != NULL)) {
 801f888:	4b26      	ldr	r3, [pc, #152]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d008      	beq.n	801f8a2 <RadioBgIrqProcess+0x272>
 801f890:	4b24      	ldr	r3, [pc, #144]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	691b      	ldr	r3, [r3, #16]
 801f896:	2b00      	cmp	r3, #0
 801f898:	d003      	beq.n	801f8a2 <RadioBgIrqProcess+0x272>
				RadioEvents->RxError();
 801f89a:	4b22      	ldr	r3, [pc, #136]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	691b      	ldr	r3, [r3, #16]
 801f8a0:	4798      	blx	r3
			}
		}
	}
	if (TimerRxTimeout) {
 801f8a2:	4b22      	ldr	r3, [pc, #136]	@ (801f92c <RadioBgIrqProcess+0x2fc>)
 801f8a4:	781b      	ldrb	r3, [r3, #0]
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d018      	beq.n	801f8dc <RadioBgIrqProcess+0x2ac>
		TimerRxTimeout = false;
 801f8aa:	4b20      	ldr	r3, [pc, #128]	@ (801f92c <RadioBgIrqProcess+0x2fc>)
 801f8ac:	2200      	movs	r2, #0
 801f8ae:	701a      	strb	r2, [r3, #0]
		if (!rx_timeout_handled) {
 801f8b0:	79fb      	ldrb	r3, [r7, #7]
 801f8b2:	f083 0301 	eor.w	r3, r3, #1
 801f8b6:	b2db      	uxtb	r3, r3
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	d00f      	beq.n	801f8dc <RadioBgIrqProcess+0x2ac>
			LOG_LIB("RADIO", "TimerRxTimeout");
			TimerStop(&RxTimeoutTimer);
 801f8bc:	4818      	ldr	r0, [pc, #96]	@ (801f920 <RadioBgIrqProcess+0x2f0>)
 801f8be:	f001 fb33 	bl	8020f28 <util_timer_stop>
			if ((RadioEvents != NULL) && (RadioEvents->RxTimeout != NULL)) {
 801f8c2:	4b18      	ldr	r3, [pc, #96]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d008      	beq.n	801f8dc <RadioBgIrqProcess+0x2ac>
 801f8ca:	4b16      	ldr	r3, [pc, #88]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	68db      	ldr	r3, [r3, #12]
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d003      	beq.n	801f8dc <RadioBgIrqProcess+0x2ac>
				RadioEvents->RxTimeout();
 801f8d4:	4b13      	ldr	r3, [pc, #76]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	68db      	ldr	r3, [r3, #12]
 801f8da:	4798      	blx	r3
			}
		}
	}
	if (TimerTxTimeout) {
 801f8dc:	4b14      	ldr	r3, [pc, #80]	@ (801f930 <RadioBgIrqProcess+0x300>)
 801f8de:	781b      	ldrb	r3, [r3, #0]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d018      	beq.n	801f916 <RadioBgIrqProcess+0x2e6>
		TimerTxTimeout = false;
 801f8e4:	4b12      	ldr	r3, [pc, #72]	@ (801f930 <RadioBgIrqProcess+0x300>)
 801f8e6:	2200      	movs	r2, #0
 801f8e8:	701a      	strb	r2, [r3, #0]
		if (!tx_timeout_handled) {
 801f8ea:	79bb      	ldrb	r3, [r7, #6]
 801f8ec:	f083 0301 	eor.w	r3, r3, #1
 801f8f0:	b2db      	uxtb	r3, r3
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d00f      	beq.n	801f916 <RadioBgIrqProcess+0x2e6>
			LOG_LIB("RADIO", "TimerTxTimeout");
			TimerStop(&TxTimeoutTimer);
 801f8f6:	480f      	ldr	r0, [pc, #60]	@ (801f934 <RadioBgIrqProcess+0x304>)
 801f8f8:	f001 fb16 	bl	8020f28 <util_timer_stop>
			if ((RadioEvents != NULL) && (RadioEvents->TxTimeout != NULL)) {
 801f8fc:	4b09      	ldr	r3, [pc, #36]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	2b00      	cmp	r3, #0
 801f902:	d008      	beq.n	801f916 <RadioBgIrqProcess+0x2e6>
 801f904:	4b07      	ldr	r3, [pc, #28]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	685b      	ldr	r3, [r3, #4]
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	d003      	beq.n	801f916 <RadioBgIrqProcess+0x2e6>
				RadioEvents->TxTimeout();
 801f90e:	4b05      	ldr	r3, [pc, #20]	@ (801f924 <RadioBgIrqProcess+0x2f4>)
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	685b      	ldr	r3, [r3, #4]
 801f914:	4798      	blx	r3
			}
		}
	}
}
 801f916:	bf00      	nop
 801f918:	370c      	adds	r7, #12
 801f91a:	46bd      	mov	sp, r7
 801f91c:	bd90      	pop	{r4, r7, pc}
 801f91e:	bf00      	nop
 801f920:	20007e30 	.word	0x20007e30
 801f924:	20007f7c 	.word	0x20007f7c
 801f928:	20007e58 	.word	0x20007e58
 801f92c:	20007f70 	.word	0x20007f70
 801f930:	20007f71 	.word	0x20007f71
 801f934:	20007e10 	.word	0x20007e10

0801f938 <RadioIrqProcess>:

void RadioIrqProcess(void) {
 801f938:	b580      	push	{r7, lr}
 801f93a:	af00      	add	r7, sp, #0
	RadioBgIrqProcess();
 801f93c:	f7ff fe78 	bl	801f630 <RadioBgIrqProcess>
}
 801f940:	bf00      	nop
 801f942:	bd80      	pop	{r7, pc}

0801f944 <RadioIrqProcessAfterDeepSleep>:

void RadioIrqProcessAfterDeepSleep(void) {
 801f944:	b580      	push	{r7, lr}
 801f946:	af00      	add	r7, sp, #0
	BoardDisableIrq();
 801f948:	f001 f8cd 	bl	8020ae6 <BoardDisableIrq>
	IrqFired = true;
 801f94c:	4b04      	ldr	r3, [pc, #16]	@ (801f960 <RadioIrqProcessAfterDeepSleep+0x1c>)
 801f94e:	2201      	movs	r2, #1
 801f950:	701a      	strb	r2, [r3, #0]
	BoardEnableIrq();
 801f952:	f001 f8d1 	bl	8020af8 <BoardEnableIrq>
	RadioBgIrqProcess();
 801f956:	f7ff fe6b 	bl	801f630 <RadioBgIrqProcess>
}
 801f95a:	bf00      	nop
 801f95c:	bd80      	pop	{r7, pc}
 801f95e:	bf00      	nop
 801f960:	20007f6f 	.word	0x20007f6f

0801f964 <Radio_task>:


void Radio_task(void *pvParameters){
 801f964:	b580      	push	{r7, lr}
 801f966:	b082      	sub	sp, #8
 801f968:	af00      	add	r7, sp, #0
 801f96a:	6078      	str	r0, [r7, #4]
	while (1){
		if (xSemaphoreTake(_lora_sem, portMAX_DELAY) == pdTRUE){
 801f96c:	4b06      	ldr	r3, [pc, #24]	@ (801f988 <Radio_task+0x24>)
 801f96e:	681b      	ldr	r3, [r3, #0]
 801f970:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f974:	4618      	mov	r0, r3
 801f976:	f7e8 fa6f 	bl	8007e58 <xQueueSemaphoreTake>
 801f97a:	4603      	mov	r3, r0
 801f97c:	2b01      	cmp	r3, #1
 801f97e:	d1f5      	bne.n	801f96c <Radio_task+0x8>
			RadioBgIrqProcess();
 801f980:	f7ff fe56 	bl	801f630 <RadioBgIrqProcess>
		if (xSemaphoreTake(_lora_sem, portMAX_DELAY) == pdTRUE){
 801f984:	e7f2      	b.n	801f96c <Radio_task+0x8>
 801f986:	bf00      	nop
 801f988:	20007f74 	.word	0x20007f74

0801f98c <Radio_HardWare_Init>:
		}
	}
}

void Radio_HardWare_Init(void){
 801f98c:	b580      	push	{r7, lr}
 801f98e:	b082      	sub	sp, #8
 801f990:	af02      	add	r7, sp, #8
	util_timer_init();
 801f992:	f001 fa05 	bl	8020da0 <util_timer_init>
	SX126xIoInit();
 801f996:	f000 fdf3 	bl	8020580 <SX126xIoInit>

	_lora_sem = xSemaphoreCreateBinary();
 801f99a:	2203      	movs	r2, #3
 801f99c:	2100      	movs	r1, #0
 801f99e:	2001      	movs	r0, #1
 801f9a0:	f7e7 fee9 	bl	8007776 <xQueueGenericCreate>
 801f9a4:	4603      	mov	r3, r0
 801f9a6:	4a08      	ldr	r2, [pc, #32]	@ (801f9c8 <Radio_HardWare_Init+0x3c>)
 801f9a8:	6013      	str	r3, [r2, #0]
	if(xTaskCreate(Radio_task, "Radio_task", 3072, NULL, TASK_PRIO_NORMAL, NULL) != pdTRUE)
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	9301      	str	r3, [sp, #4]
 801f9ae:	2314      	movs	r3, #20
 801f9b0:	9300      	str	r3, [sp, #0]
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 801f9b8:	4904      	ldr	r1, [pc, #16]	@ (801f9cc <Radio_HardWare_Init+0x40>)
 801f9ba:	4805      	ldr	r0, [pc, #20]	@ (801f9d0 <Radio_HardWare_Init+0x44>)
 801f9bc:	f7e8 fd42 	bl	8008444 <xTaskCreate>
		LOG_LIB("TASK", "Radio_task task startup fail");
}
 801f9c0:	bf00      	nop
 801f9c2:	46bd      	mov	sp, r7
 801f9c4:	bd80      	pop	{r7, pc}
 801f9c6:	bf00      	nop
 801f9c8:	20007f74 	.word	0x20007f74
 801f9cc:	08024c18 	.word	0x08024c18
 801f9d0:	0801f965 	.word	0x0801f965

0801f9d4 <SX126xInit>:
/*
 * \brief Process the IRQ if handled by the driver
 */
void SX126xProcessIrqs(void);

void SX126xInit(void) {
 801f9d4:	b580      	push	{r7, lr}
 801f9d6:	af00      	add	r7, sp, #0
	SX126xReset();
 801f9d8:	f000 fdde 	bl	8020598 <SX126xReset>

	SX126xWakeup();
 801f9dc:	f000 fe22 	bl	8020624 <SX126xWakeup>
	SX126xSetStandby(STDBY_RC);
 801f9e0:	2000      	movs	r0, #0
 801f9e2:	f000 f933 	bl	801fc4c <SX126xSetStandby>

	SX126xSetDio2AsRfSwitchCtrl(true);
 801f9e6:	2001      	movs	r0, #1
 801f9e8:	f000 facf 	bl	801ff8a <SX126xSetDio2AsRfSwitchCtrl>

	SX126xSetOperatingMode(MODE_STDBY_RC);
 801f9ec:	2001      	movs	r0, #1
 801f9ee:	f000 f815 	bl	801fa1c <SX126xSetOperatingMode>
}
 801f9f2:	bf00      	nop
 801f9f4:	bd80      	pop	{r7, pc}

0801f9f6 <SX126xReInit>:

void SX126xReInit(void) {
 801f9f6:	b480      	push	{r7}
 801f9f8:	af00      	add	r7, sp, #0

}
 801f9fa:	bf00      	nop
 801f9fc:	46bd      	mov	sp, r7
 801f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa02:	4770      	bx	lr

0801fa04 <SX126xGetOperatingMode>:

RadioOperatingModes_t SX126xGetOperatingMode(void) {
 801fa04:	b480      	push	{r7}
 801fa06:	af00      	add	r7, sp, #0
	return OperatingMode;
 801fa08:	4b03      	ldr	r3, [pc, #12]	@ (801fa18 <SX126xGetOperatingMode+0x14>)
 801fa0a:	781b      	ldrb	r3, [r3, #0]
}
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	46bd      	mov	sp, r7
 801fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa14:	4770      	bx	lr
 801fa16:	bf00      	nop
 801fa18:	20007fd4 	.word	0x20007fd4

0801fa1c <SX126xSetOperatingMode>:

void SX126xSetOperatingMode(RadioOperatingModes_t mode) {
 801fa1c:	b480      	push	{r7}
 801fa1e:	b083      	sub	sp, #12
 801fa20:	af00      	add	r7, sp, #0
 801fa22:	4603      	mov	r3, r0
 801fa24:	71fb      	strb	r3, [r7, #7]
	OperatingMode = mode;
 801fa26:	4a04      	ldr	r2, [pc, #16]	@ (801fa38 <SX126xSetOperatingMode+0x1c>)
 801fa28:	79fb      	ldrb	r3, [r7, #7]
 801fa2a:	7013      	strb	r3, [r2, #0]
}
 801fa2c:	bf00      	nop
 801fa2e:	370c      	adds	r7, #12
 801fa30:	46bd      	mov	sp, r7
 801fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa36:	4770      	bx	lr
 801fa38:	20007fd4 	.word	0x20007fd4

0801fa3c <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady(void) {
 801fa3c:	b580      	push	{r7, lr}
 801fa3e:	af00      	add	r7, sp, #0
	if ((SX126xGetOperatingMode() == MODE_SLEEP)
 801fa40:	f7ff ffe0 	bl	801fa04 <SX126xGetOperatingMode>
 801fa44:	4603      	mov	r3, r0
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d004      	beq.n	801fa54 <SX126xCheckDeviceReady+0x18>
			|| (SX126xGetOperatingMode() == MODE_RX_DC)) {
 801fa4a:	f7ff ffdb 	bl	801fa04 <SX126xGetOperatingMode>
 801fa4e:	4603      	mov	r3, r0
 801fa50:	2b06      	cmp	r3, #6
 801fa52:	d103      	bne.n	801fa5c <SX126xCheckDeviceReady+0x20>
		SX126xWakeup();
 801fa54:	f000 fde6 	bl	8020624 <SX126xWakeup>
		// Switch is turned off when device is in sleep mode and turned on is all other modes
		SX126xAntSwOn();
 801fa58:	f000 ff90 	bl	802097c <SX126xAntSwOn>
	}
	SX126xWaitOnBusy();
 801fa5c:	f000 fdba 	bl	80205d4 <SX126xWaitOnBusy>
}
 801fa60:	bf00      	nop
 801fa62:	bd80      	pop	{r7, pc}

0801fa64 <SX126xSetPayload>:

void SX126xSetPayload(uint8_t *payload, uint8_t size) {
 801fa64:	b580      	push	{r7, lr}
 801fa66:	b082      	sub	sp, #8
 801fa68:	af00      	add	r7, sp, #0
 801fa6a:	6078      	str	r0, [r7, #4]
 801fa6c:	460b      	mov	r3, r1
 801fa6e:	70fb      	strb	r3, [r7, #3]
	SX126xWriteBuffer(0x00, payload, size);
 801fa70:	78fb      	ldrb	r3, [r7, #3]
 801fa72:	461a      	mov	r2, r3
 801fa74:	6879      	ldr	r1, [r7, #4]
 801fa76:	2000      	movs	r0, #0
 801fa78:	f000 fef6 	bl	8020868 <SX126xWriteBuffer>
}
 801fa7c:	bf00      	nop
 801fa7e:	3708      	adds	r7, #8
 801fa80:	46bd      	mov	sp, r7
 801fa82:	bd80      	pop	{r7, pc}

0801fa84 <SX126xGetPayload>:

uint8_t SX126xGetPayload(uint8_t *buffer, uint8_t *size, uint8_t maxSize) {
 801fa84:	b580      	push	{r7, lr}
 801fa86:	b086      	sub	sp, #24
 801fa88:	af00      	add	r7, sp, #0
 801fa8a:	60f8      	str	r0, [r7, #12]
 801fa8c:	60b9      	str	r1, [r7, #8]
 801fa8e:	4613      	mov	r3, r2
 801fa90:	71fb      	strb	r3, [r7, #7]
	uint8_t offset = 0;
 801fa92:	2300      	movs	r3, #0
 801fa94:	75fb      	strb	r3, [r7, #23]

	SX126xGetRxBufferStatus(size, &offset);
 801fa96:	f107 0317 	add.w	r3, r7, #23
 801fa9a:	4619      	mov	r1, r3
 801fa9c:	68b8      	ldr	r0, [r7, #8]
 801fa9e:	f000 fcd7 	bl	8020450 <SX126xGetRxBufferStatus>
	if (*size > maxSize) {
 801faa2:	68bb      	ldr	r3, [r7, #8]
 801faa4:	781b      	ldrb	r3, [r3, #0]
 801faa6:	79fa      	ldrb	r2, [r7, #7]
 801faa8:	429a      	cmp	r2, r3
 801faaa:	d201      	bcs.n	801fab0 <SX126xGetPayload+0x2c>
		return 1;
 801faac:	2301      	movs	r3, #1
 801faae:	e007      	b.n	801fac0 <SX126xGetPayload+0x3c>
	}
	SX126xReadBuffer(offset, buffer, *size);
 801fab0:	7df8      	ldrb	r0, [r7, #23]
 801fab2:	68bb      	ldr	r3, [r7, #8]
 801fab4:	781b      	ldrb	r3, [r3, #0]
 801fab6:	461a      	mov	r2, r3
 801fab8:	68f9      	ldr	r1, [r7, #12]
 801faba:	f000 ff07 	bl	80208cc <SX126xReadBuffer>
	return 0;
 801fabe:	2300      	movs	r3, #0
}
 801fac0:	4618      	mov	r0, r3
 801fac2:	3718      	adds	r7, #24
 801fac4:	46bd      	mov	sp, r7
 801fac6:	bd80      	pop	{r7, pc}

0801fac8 <SX126xSendPayload>:

void SX126xSendPayload(uint8_t *payload, uint8_t size, uint32_t timeout) {
 801fac8:	b580      	push	{r7, lr}
 801faca:	b084      	sub	sp, #16
 801facc:	af00      	add	r7, sp, #0
 801face:	60f8      	str	r0, [r7, #12]
 801fad0:	460b      	mov	r3, r1
 801fad2:	607a      	str	r2, [r7, #4]
 801fad4:	72fb      	strb	r3, [r7, #11]
	SX126xSetPayload(payload, size);
 801fad6:	7afb      	ldrb	r3, [r7, #11]
 801fad8:	4619      	mov	r1, r3
 801fada:	68f8      	ldr	r0, [r7, #12]
 801fadc:	f7ff ffc2 	bl	801fa64 <SX126xSetPayload>
	SX126xSetTx(timeout);
 801fae0:	6878      	ldr	r0, [r7, #4]
 801fae2:	f000 f8ce 	bl	801fc82 <SX126xSetTx>
}
 801fae6:	bf00      	nop
 801fae8:	3710      	adds	r7, #16
 801faea:	46bd      	mov	sp, r7
 801faec:	bd80      	pop	{r7, pc}

0801faee <SX126xSetSyncWord>:

uint8_t SX126xSetSyncWord(uint8_t *syncWord) {
 801faee:	b580      	push	{r7, lr}
 801faf0:	b082      	sub	sp, #8
 801faf2:	af00      	add	r7, sp, #0
 801faf4:	6078      	str	r0, [r7, #4]
	SX126xWriteRegisters(REG_LR_SYNCWORDBASEADDRESS, syncWord, 8);
 801faf6:	2208      	movs	r2, #8
 801faf8:	6879      	ldr	r1, [r7, #4]
 801fafa:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801fafe:	f000 fe1d 	bl	802073c <SX126xWriteRegisters>
	return 0;
 801fb02:	2300      	movs	r3, #0
}
 801fb04:	4618      	mov	r0, r3
 801fb06:	3708      	adds	r7, #8
 801fb08:	46bd      	mov	sp, r7
 801fb0a:	bd80      	pop	{r7, pc}

0801fb0c <SX126xSetCrcSeed>:

void SX126xSetCrcSeed(uint16_t seed) {
 801fb0c:	b580      	push	{r7, lr}
 801fb0e:	b084      	sub	sp, #16
 801fb10:	af00      	add	r7, sp, #0
 801fb12:	4603      	mov	r3, r0
 801fb14:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) ((seed >> 8) & 0xFF);
 801fb16:	88fb      	ldrh	r3, [r7, #6]
 801fb18:	0a1b      	lsrs	r3, r3, #8
 801fb1a:	b29b      	uxth	r3, r3
 801fb1c:	b2db      	uxtb	r3, r3
 801fb1e:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (seed & 0xFF);
 801fb20:	88fb      	ldrh	r3, [r7, #6]
 801fb22:	b2db      	uxtb	r3, r3
 801fb24:	737b      	strb	r3, [r7, #13]

	switch (SX126xGetPacketType()) {
 801fb26:	f000 fa99 	bl	802005c <SX126xGetPacketType>
 801fb2a:	4603      	mov	r3, r0
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d108      	bne.n	801fb42 <SX126xSetCrcSeed+0x36>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCSEEDBASEADDR, buf, 2);
 801fb30:	f107 030c 	add.w	r3, r7, #12
 801fb34:	2202      	movs	r2, #2
 801fb36:	4619      	mov	r1, r3
 801fb38:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801fb3c:	f000 fdfe 	bl	802073c <SX126xWriteRegisters>
		break;
 801fb40:	e000      	b.n	801fb44 <SX126xSetCrcSeed+0x38>

		default:
		break;
 801fb42:	bf00      	nop
	}
}
 801fb44:	bf00      	nop
 801fb46:	3710      	adds	r7, #16
 801fb48:	46bd      	mov	sp, r7
 801fb4a:	bd80      	pop	{r7, pc}

0801fb4c <SX126xSetCrcPolynomial>:

void SX126xSetCrcPolynomial(uint16_t polynomial) {
 801fb4c:	b580      	push	{r7, lr}
 801fb4e:	b084      	sub	sp, #16
 801fb50:	af00      	add	r7, sp, #0
 801fb52:	4603      	mov	r3, r0
 801fb54:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) ((polynomial >> 8) & 0xFF);
 801fb56:	88fb      	ldrh	r3, [r7, #6]
 801fb58:	0a1b      	lsrs	r3, r3, #8
 801fb5a:	b29b      	uxth	r3, r3
 801fb5c:	b2db      	uxtb	r3, r3
 801fb5e:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) (polynomial & 0xFF);
 801fb60:	88fb      	ldrh	r3, [r7, #6]
 801fb62:	b2db      	uxtb	r3, r3
 801fb64:	737b      	strb	r3, [r7, #13]

	switch (SX126xGetPacketType()) {
 801fb66:	f000 fa79 	bl	802005c <SX126xGetPacketType>
 801fb6a:	4603      	mov	r3, r0
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d108      	bne.n	801fb82 <SX126xSetCrcPolynomial+0x36>
		case PACKET_TYPE_GFSK:
			SX126xWriteRegisters(REG_LR_CRCPOLYBASEADDR, buf, 2);
 801fb70:	f107 030c 	add.w	r3, r7, #12
 801fb74:	2202      	movs	r2, #2
 801fb76:	4619      	mov	r1, r3
 801fb78:	f240 60be 	movw	r0, #1726	@ 0x6be
 801fb7c:	f000 fdde 	bl	802073c <SX126xWriteRegisters>
		break;
 801fb80:	e000      	b.n	801fb84 <SX126xSetCrcPolynomial+0x38>

		default:
		break;
 801fb82:	bf00      	nop
	}
}
 801fb84:	bf00      	nop
 801fb86:	3710      	adds	r7, #16
 801fb88:	46bd      	mov	sp, r7
 801fb8a:	bd80      	pop	{r7, pc}

0801fb8c <SX126xSetWhiteningSeed>:

void SX126xSetWhiteningSeed(uint16_t seed) {
 801fb8c:	b580      	push	{r7, lr}
 801fb8e:	b084      	sub	sp, #16
 801fb90:	af00      	add	r7, sp, #0
 801fb92:	4603      	mov	r3, r0
 801fb94:	80fb      	strh	r3, [r7, #6]
	uint8_t regValue = 0;
 801fb96:	2300      	movs	r3, #0
 801fb98:	73fb      	strb	r3, [r7, #15]

	switch (SX126xGetPacketType()) {
 801fb9a:	f000 fa5f 	bl	802005c <SX126xGetPacketType>
 801fb9e:	4603      	mov	r3, r0
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d121      	bne.n	801fbe8 <SX126xSetWhiteningSeed+0x5c>
		case PACKET_TYPE_GFSK:
			regValue = SX126xReadRegister(REG_LR_WHITSEEDBASEADDR_MSB) & 0xFE;
 801fba4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801fba8:	f000 fe4c 	bl	8020844 <SX126xReadRegister>
 801fbac:	4603      	mov	r3, r0
 801fbae:	f023 0301 	bic.w	r3, r3, #1
 801fbb2:	73fb      	strb	r3, [r7, #15]
			regValue = ((seed >> 8) & 0x01) | regValue;
 801fbb4:	88fb      	ldrh	r3, [r7, #6]
 801fbb6:	0a1b      	lsrs	r3, r3, #8
 801fbb8:	b29b      	uxth	r3, r3
 801fbba:	b25b      	sxtb	r3, r3
 801fbbc:	f003 0301 	and.w	r3, r3, #1
 801fbc0:	b25a      	sxtb	r2, r3
 801fbc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fbc6:	4313      	orrs	r3, r2
 801fbc8:	b25b      	sxtb	r3, r3
 801fbca:	73fb      	strb	r3, [r7, #15]
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_MSB, regValue); // only 1 bit.
 801fbcc:	7bfb      	ldrb	r3, [r7, #15]
 801fbce:	4619      	mov	r1, r3
 801fbd0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801fbd4:	f000 fdea 	bl	80207ac <SX126xWriteRegister>
			SX126xWriteRegister(REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t) seed);
 801fbd8:	88fb      	ldrh	r3, [r7, #6]
 801fbda:	b2db      	uxtb	r3, r3
 801fbdc:	4619      	mov	r1, r3
 801fbde:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801fbe2:	f000 fde3 	bl	80207ac <SX126xWriteRegister>
		break;
 801fbe6:	e000      	b.n	801fbea <SX126xSetWhiteningSeed+0x5e>

		default:
		break;
 801fbe8:	bf00      	nop
	}
}
 801fbea:	bf00      	nop
 801fbec:	3710      	adds	r7, #16
 801fbee:	46bd      	mov	sp, r7
 801fbf0:	bd80      	pop	{r7, pc}

0801fbf2 <SX126xGetRandom>:

uint32_t SX126xGetRandom(void) {
 801fbf2:	b580      	push	{r7, lr}
 801fbf4:	b082      	sub	sp, #8
 801fbf6:	af00      	add	r7, sp, #0
	uint8_t buf[] = { 0, 0, 0, 0 };
 801fbf8:	2300      	movs	r3, #0
 801fbfa:	607b      	str	r3, [r7, #4]

	SX126xReadRegisters(RANDOM_NUMBER_GENERATORBASEADDR, buf, 4);
 801fbfc:	1d3b      	adds	r3, r7, #4
 801fbfe:	2204      	movs	r2, #4
 801fc00:	4619      	mov	r1, r3
 801fc02:	f640 0019 	movw	r0, #2073	@ 0x819
 801fc06:	f000 fde3 	bl	80207d0 <SX126xReadRegisters>

	return (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
 801fc0a:	793b      	ldrb	r3, [r7, #4]
 801fc0c:	061a      	lsls	r2, r3, #24
 801fc0e:	797b      	ldrb	r3, [r7, #5]
 801fc10:	041b      	lsls	r3, r3, #16
 801fc12:	431a      	orrs	r2, r3
 801fc14:	79bb      	ldrb	r3, [r7, #6]
 801fc16:	021b      	lsls	r3, r3, #8
 801fc18:	4313      	orrs	r3, r2
 801fc1a:	79fa      	ldrb	r2, [r7, #7]
 801fc1c:	4313      	orrs	r3, r2
}
 801fc1e:	4618      	mov	r0, r3
 801fc20:	3708      	adds	r7, #8
 801fc22:	46bd      	mov	sp, r7
 801fc24:	bd80      	pop	{r7, pc}

0801fc26 <SX126xSetSleep>:

void SX126xSetSleep(SleepParams_t sleepConfig) {
 801fc26:	b580      	push	{r7, lr}
 801fc28:	b082      	sub	sp, #8
 801fc2a:	af00      	add	r7, sp, #0
 801fc2c:	7138      	strb	r0, [r7, #4]
	SX126xAntSwOff();
 801fc2e:	f000 feac 	bl	802098a <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_SLEEP, &sleepConfig.Value, 1);
 801fc32:	1d3b      	adds	r3, r7, #4
 801fc34:	2201      	movs	r2, #1
 801fc36:	4619      	mov	r1, r3
 801fc38:	2084      	movs	r0, #132	@ 0x84
 801fc3a:	f000 fd1d 	bl	8020678 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_SLEEP);
 801fc3e:	2000      	movs	r0, #0
 801fc40:	f7ff feec 	bl	801fa1c <SX126xSetOperatingMode>
}
 801fc44:	bf00      	nop
 801fc46:	3708      	adds	r7, #8
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	bd80      	pop	{r7, pc}

0801fc4c <SX126xSetStandby>:

void SX126xSetStandby(RadioStandbyModes_t standbyConfig) {
 801fc4c:	b580      	push	{r7, lr}
 801fc4e:	b082      	sub	sp, #8
 801fc50:	af00      	add	r7, sp, #0
 801fc52:	4603      	mov	r3, r0
 801fc54:	71fb      	strb	r3, [r7, #7]
	SX126xAntSwOff();
 801fc56:	f000 fe98 	bl	802098a <SX126xAntSwOff>

	SX126xWriteCommand(RADIO_SET_STANDBY, (uint8_t*) &standbyConfig, 1);
 801fc5a:	1dfb      	adds	r3, r7, #7
 801fc5c:	2201      	movs	r2, #1
 801fc5e:	4619      	mov	r1, r3
 801fc60:	2080      	movs	r0, #128	@ 0x80
 801fc62:	f000 fd09 	bl	8020678 <SX126xWriteCommand>
	if (standbyConfig == STDBY_RC) {
 801fc66:	79fb      	ldrb	r3, [r7, #7]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d103      	bne.n	801fc74 <SX126xSetStandby+0x28>
		SX126xSetOperatingMode(MODE_STDBY_RC);
 801fc6c:	2001      	movs	r0, #1
 801fc6e:	f7ff fed5 	bl	801fa1c <SX126xSetOperatingMode>
	}
	else {
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
	}
}
 801fc72:	e002      	b.n	801fc7a <SX126xSetStandby+0x2e>
		SX126xSetOperatingMode(MODE_STDBY_XOSC);
 801fc74:	2002      	movs	r0, #2
 801fc76:	f7ff fed1 	bl	801fa1c <SX126xSetOperatingMode>
}
 801fc7a:	bf00      	nop
 801fc7c:	3708      	adds	r7, #8
 801fc7e:	46bd      	mov	sp, r7
 801fc80:	bd80      	pop	{r7, pc}

0801fc82 <SX126xSetTx>:
void SX126xSetFs(void) {
	SX126xWriteCommand(RADIO_SET_FS, 0, 0);
	SX126xSetOperatingMode(MODE_FS);
}

void SX126xSetTx(uint32_t timeout) {
 801fc82:	b580      	push	{r7, lr}
 801fc84:	b084      	sub	sp, #16
 801fc86:	af00      	add	r7, sp, #0
 801fc88:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_TX);
 801fc8a:	2004      	movs	r0, #4
 801fc8c:	f7ff fec6 	bl	801fa1c <SX126xSetOperatingMode>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	0c1b      	lsrs	r3, r3, #16
 801fc94:	b2db      	uxtb	r3, r3
 801fc96:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	0a1b      	lsrs	r3, r3, #8
 801fc9c:	b2db      	uxtb	r3, r3
 801fc9e:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	b2db      	uxtb	r3, r3
 801fca4:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_TX, buf, 3);
 801fca6:	f107 030c 	add.w	r3, r7, #12
 801fcaa:	2203      	movs	r2, #3
 801fcac:	4619      	mov	r1, r3
 801fcae:	2083      	movs	r0, #131	@ 0x83
 801fcb0:	f000 fce2 	bl	8020678 <SX126xWriteCommand>
}
 801fcb4:	bf00      	nop
 801fcb6:	3710      	adds	r7, #16
 801fcb8:	46bd      	mov	sp, r7
 801fcba:	bd80      	pop	{r7, pc}

0801fcbc <SX126xSetRx>:

void SX126xSetRx(uint32_t timeout) {
 801fcbc:	b580      	push	{r7, lr}
 801fcbe:	b084      	sub	sp, #16
 801fcc0:	af00      	add	r7, sp, #0
 801fcc2:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 801fcc4:	2005      	movs	r0, #5
 801fcc6:	f7ff fea9 	bl	801fa1c <SX126xSetOperatingMode>

	SX126xWriteRegister( REG_RX_GAIN, 0x94); // default gain
 801fcca:	2194      	movs	r1, #148	@ 0x94
 801fccc:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801fcd0:	f000 fd6c 	bl	80207ac <SX126xWriteRegister>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	0c1b      	lsrs	r3, r3, #16
 801fcd8:	b2db      	uxtb	r3, r3
 801fcda:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	0a1b      	lsrs	r3, r3, #8
 801fce0:	b2db      	uxtb	r3, r3
 801fce2:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	b2db      	uxtb	r3, r3
 801fce8:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 801fcea:	f107 030c 	add.w	r3, r7, #12
 801fcee:	2203      	movs	r2, #3
 801fcf0:	4619      	mov	r1, r3
 801fcf2:	2082      	movs	r0, #130	@ 0x82
 801fcf4:	f000 fcc0 	bl	8020678 <SX126xWriteCommand>
}
 801fcf8:	bf00      	nop
 801fcfa:	3710      	adds	r7, #16
 801fcfc:	46bd      	mov	sp, r7
 801fcfe:	bd80      	pop	{r7, pc}

0801fd00 <SX126xSetRxBoosted>:

void SX126xSetRxBoosted(uint32_t timeout) {
 801fd00:	b580      	push	{r7, lr}
 801fd02:	b084      	sub	sp, #16
 801fd04:	af00      	add	r7, sp, #0
 801fd06:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	SX126xSetOperatingMode(MODE_RX);
 801fd08:	2005      	movs	r0, #5
 801fd0a:	f7ff fe87 	bl	801fa1c <SX126xSetOperatingMode>

	SX126xWriteRegister(REG_RX_GAIN, 0x96); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 801fd0e:	2196      	movs	r1, #150	@ 0x96
 801fd10:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 801fd14:	f000 fd4a 	bl	80207ac <SX126xWriteRegister>

	buf[0] = (uint8_t) ((timeout >> 16) & 0xFF);
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	0c1b      	lsrs	r3, r3, #16
 801fd1c:	b2db      	uxtb	r3, r3
 801fd1e:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((timeout >> 8) & 0xFF);
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	0a1b      	lsrs	r3, r3, #8
 801fd24:	b2db      	uxtb	r3, r3
 801fd26:	737b      	strb	r3, [r7, #13]
	buf[2] = (uint8_t) (timeout & 0xFF);
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	b2db      	uxtb	r3, r3
 801fd2c:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_RX, buf, 3);
 801fd2e:	f107 030c 	add.w	r3, r7, #12
 801fd32:	2203      	movs	r2, #3
 801fd34:	4619      	mov	r1, r3
 801fd36:	2082      	movs	r0, #130	@ 0x82
 801fd38:	f000 fc9e 	bl	8020678 <SX126xWriteCommand>
}
 801fd3c:	bf00      	nop
 801fd3e:	3710      	adds	r7, #16
 801fd40:	46bd      	mov	sp, r7
 801fd42:	bd80      	pop	{r7, pc}

0801fd44 <SX126xSetRxDutyCycle>:

void SX126xSetRxDutyCycle(uint32_t rxTime, uint32_t sleepTime) {
 801fd44:	b580      	push	{r7, lr}
 801fd46:	b084      	sub	sp, #16
 801fd48:	af00      	add	r7, sp, #0
 801fd4a:	6078      	str	r0, [r7, #4]
 801fd4c:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	buf[0] = (uint8_t) ((rxTime >> 16) & 0xFF);
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	0c1b      	lsrs	r3, r3, #16
 801fd52:	b2db      	uxtb	r3, r3
 801fd54:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) ((rxTime >> 8) & 0xFF);
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	0a1b      	lsrs	r3, r3, #8
 801fd5a:	b2db      	uxtb	r3, r3
 801fd5c:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) (rxTime & 0xFF);
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	b2db      	uxtb	r3, r3
 801fd62:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) ((sleepTime >> 16) & 0xFF);
 801fd64:	683b      	ldr	r3, [r7, #0]
 801fd66:	0c1b      	lsrs	r3, r3, #16
 801fd68:	b2db      	uxtb	r3, r3
 801fd6a:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((sleepTime >> 8) & 0xFF);
 801fd6c:	683b      	ldr	r3, [r7, #0]
 801fd6e:	0a1b      	lsrs	r3, r3, #8
 801fd70:	b2db      	uxtb	r3, r3
 801fd72:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) (sleepTime & 0xFF);
 801fd74:	683b      	ldr	r3, [r7, #0]
 801fd76:	b2db      	uxtb	r3, r3
 801fd78:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_RXDUTYCYCLE, buf, 6);
 801fd7a:	f107 0308 	add.w	r3, r7, #8
 801fd7e:	2206      	movs	r2, #6
 801fd80:	4619      	mov	r1, r3
 801fd82:	2094      	movs	r0, #148	@ 0x94
 801fd84:	f000 fc78 	bl	8020678 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_RX_DC);
 801fd88:	2006      	movs	r0, #6
 801fd8a:	f7ff fe47 	bl	801fa1c <SX126xSetOperatingMode>
}
 801fd8e:	bf00      	nop
 801fd90:	3710      	adds	r7, #16
 801fd92:	46bd      	mov	sp, r7
 801fd94:	bd80      	pop	{r7, pc}

0801fd96 <SX126xSetCad>:

void SX126xSetCad(void) {
 801fd96:	b580      	push	{r7, lr}
 801fd98:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_CAD, 0, 0);
 801fd9a:	2200      	movs	r2, #0
 801fd9c:	2100      	movs	r1, #0
 801fd9e:	20c5      	movs	r0, #197	@ 0xc5
 801fda0:	f000 fc6a 	bl	8020678 <SX126xWriteCommand>
	SX126xSetOperatingMode(MODE_CAD);
 801fda4:	2007      	movs	r0, #7
 801fda6:	f7ff fe39 	bl	801fa1c <SX126xSetOperatingMode>
}
 801fdaa:	bf00      	nop
 801fdac:	bd80      	pop	{r7, pc}

0801fdae <SX126xSetTxContinuousWave>:

void SX126xSetTxContinuousWave(void) {
 801fdae:	b580      	push	{r7, lr}
 801fdb0:	af00      	add	r7, sp, #0
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSWAVE, 0, 0);
 801fdb2:	2200      	movs	r2, #0
 801fdb4:	2100      	movs	r1, #0
 801fdb6:	20d1      	movs	r0, #209	@ 0xd1
 801fdb8:	f000 fc5e 	bl	8020678 <SX126xWriteCommand>
}
 801fdbc:	bf00      	nop
 801fdbe:	bd80      	pop	{r7, pc}

0801fdc0 <SX126xSetStopRxTimerOnPreambleDetect>:

void SX126xSetTxInfinitePreamble(void) {
	SX126xWriteCommand(RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0);
}

void SX126xSetStopRxTimerOnPreambleDetect(bool enable) {
 801fdc0:	b580      	push	{r7, lr}
 801fdc2:	b082      	sub	sp, #8
 801fdc4:	af00      	add	r7, sp, #0
 801fdc6:	4603      	mov	r3, r0
 801fdc8:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_STOPRXTIMERONPREAMBLE, (uint8_t*) &enable, 1);
 801fdca:	1dfb      	adds	r3, r7, #7
 801fdcc:	2201      	movs	r2, #1
 801fdce:	4619      	mov	r1, r3
 801fdd0:	209f      	movs	r0, #159	@ 0x9f
 801fdd2:	f000 fc51 	bl	8020678 <SX126xWriteCommand>
}
 801fdd6:	bf00      	nop
 801fdd8:	3708      	adds	r7, #8
 801fdda:	46bd      	mov	sp, r7
 801fddc:	bd80      	pop	{r7, pc}

0801fdde <SX126xSetLoRaSymbNumTimeout>:

void SX126xSetLoRaSymbNumTimeout(uint8_t SymbNum) {
 801fdde:	b580      	push	{r7, lr}
 801fde0:	b082      	sub	sp, #8
 801fde2:	af00      	add	r7, sp, #0
 801fde4:	4603      	mov	r3, r0
 801fde6:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_LORASYMBTIMEOUT, &SymbNum, 1);
 801fde8:	1dfb      	adds	r3, r7, #7
 801fdea:	2201      	movs	r2, #1
 801fdec:	4619      	mov	r1, r3
 801fdee:	20a0      	movs	r0, #160	@ 0xa0
 801fdf0:	f000 fc42 	bl	8020678 <SX126xWriteCommand>
}
 801fdf4:	bf00      	nop
 801fdf6:	3708      	adds	r7, #8
 801fdf8:	46bd      	mov	sp, r7
 801fdfa:	bd80      	pop	{r7, pc}

0801fdfc <SX126xSetRegulatorMode>:

void SX126xSetRegulatorMode(RadioRegulatorMode_t mode) {
 801fdfc:	b580      	push	{r7, lr}
 801fdfe:	b082      	sub	sp, #8
 801fe00:	af00      	add	r7, sp, #0
 801fe02:	4603      	mov	r3, r0
 801fe04:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_REGULATORMODE, (uint8_t*) &mode, 1);
 801fe06:	1dfb      	adds	r3, r7, #7
 801fe08:	2201      	movs	r2, #1
 801fe0a:	4619      	mov	r1, r3
 801fe0c:	2096      	movs	r0, #150	@ 0x96
 801fe0e:	f000 fc33 	bl	8020678 <SX126xWriteCommand>
}
 801fe12:	bf00      	nop
 801fe14:	3708      	adds	r7, #8
 801fe16:	46bd      	mov	sp, r7
 801fe18:	bd80      	pop	{r7, pc}
	...

0801fe1c <SX126xCalibrateImage>:

void SX126xCalibrate(CalibrationParams_t calibParam) {
	SX126xWriteCommand(RADIO_CALIBRATE, (uint8_t*) &calibParam, 1);
}

void SX126xCalibrateImage(uint32_t freq) {
 801fe1c:	b580      	push	{r7, lr}
 801fe1e:	b084      	sub	sp, #16
 801fe20:	af00      	add	r7, sp, #0
 801fe22:	6078      	str	r0, [r7, #4]
	uint8_t calFreq[2];

	if (freq > 900000000) {
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	4a1b      	ldr	r2, [pc, #108]	@ (801fe94 <SX126xCalibrateImage+0x78>)
 801fe28:	4293      	cmp	r3, r2
 801fe2a:	d904      	bls.n	801fe36 <SX126xCalibrateImage+0x1a>
		calFreq[0] = 0xE1;
 801fe2c:	23e1      	movs	r3, #225	@ 0xe1
 801fe2e:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xE9;
 801fe30:	23e9      	movs	r3, #233	@ 0xe9
 801fe32:	737b      	strb	r3, [r7, #13]
 801fe34:	e022      	b.n	801fe7c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 850000000) {
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	4a17      	ldr	r2, [pc, #92]	@ (801fe98 <SX126xCalibrateImage+0x7c>)
 801fe3a:	4293      	cmp	r3, r2
 801fe3c:	d904      	bls.n	801fe48 <SX126xCalibrateImage+0x2c>
		calFreq[0] = 0xD7;
 801fe3e:	23d7      	movs	r3, #215	@ 0xd7
 801fe40:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xDB;
 801fe42:	23db      	movs	r3, #219	@ 0xdb
 801fe44:	737b      	strb	r3, [r7, #13]
 801fe46:	e019      	b.n	801fe7c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 770000000) {
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	4a14      	ldr	r2, [pc, #80]	@ (801fe9c <SX126xCalibrateImage+0x80>)
 801fe4c:	4293      	cmp	r3, r2
 801fe4e:	d904      	bls.n	801fe5a <SX126xCalibrateImage+0x3e>
		calFreq[0] = 0xC1;
 801fe50:	23c1      	movs	r3, #193	@ 0xc1
 801fe52:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0xC5;
 801fe54:	23c5      	movs	r3, #197	@ 0xc5
 801fe56:	737b      	strb	r3, [r7, #13]
 801fe58:	e010      	b.n	801fe7c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 460000000) {
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	4a10      	ldr	r2, [pc, #64]	@ (801fea0 <SX126xCalibrateImage+0x84>)
 801fe5e:	4293      	cmp	r3, r2
 801fe60:	d904      	bls.n	801fe6c <SX126xCalibrateImage+0x50>
		calFreq[0] = 0x75;
 801fe62:	2375      	movs	r3, #117	@ 0x75
 801fe64:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0x81;
 801fe66:	2381      	movs	r3, #129	@ 0x81
 801fe68:	737b      	strb	r3, [r7, #13]
 801fe6a:	e007      	b.n	801fe7c <SX126xCalibrateImage+0x60>
	}
	else if (freq > 425000000) {
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	4a0d      	ldr	r2, [pc, #52]	@ (801fea4 <SX126xCalibrateImage+0x88>)
 801fe70:	4293      	cmp	r3, r2
 801fe72:	d903      	bls.n	801fe7c <SX126xCalibrateImage+0x60>
		calFreq[0] = 0x6B;
 801fe74:	236b      	movs	r3, #107	@ 0x6b
 801fe76:	733b      	strb	r3, [r7, #12]
		calFreq[1] = 0x6F;
 801fe78:	236f      	movs	r3, #111	@ 0x6f
 801fe7a:	737b      	strb	r3, [r7, #13]
	}
	SX126xWriteCommand(RADIO_CALIBRATEIMAGE, calFreq, 2);
 801fe7c:	f107 030c 	add.w	r3, r7, #12
 801fe80:	2202      	movs	r2, #2
 801fe82:	4619      	mov	r1, r3
 801fe84:	2098      	movs	r0, #152	@ 0x98
 801fe86:	f000 fbf7 	bl	8020678 <SX126xWriteCommand>
}
 801fe8a:	bf00      	nop
 801fe8c:	3710      	adds	r7, #16
 801fe8e:	46bd      	mov	sp, r7
 801fe90:	bd80      	pop	{r7, pc}
 801fe92:	bf00      	nop
 801fe94:	35a4e900 	.word	0x35a4e900
 801fe98:	32a9f880 	.word	0x32a9f880
 801fe9c:	2de54480 	.word	0x2de54480
 801fea0:	1b6b0b00 	.word	0x1b6b0b00
 801fea4:	1954fc40 	.word	0x1954fc40

0801fea8 <SX126xSetPaConfig>:

void SX126xSetPaConfig(uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel,
		uint8_t paLut) {
 801fea8:	b590      	push	{r4, r7, lr}
 801feaa:	b085      	sub	sp, #20
 801feac:	af00      	add	r7, sp, #0
 801feae:	4604      	mov	r4, r0
 801feb0:	4608      	mov	r0, r1
 801feb2:	4611      	mov	r1, r2
 801feb4:	461a      	mov	r2, r3
 801feb6:	4623      	mov	r3, r4
 801feb8:	71fb      	strb	r3, [r7, #7]
 801feba:	4603      	mov	r3, r0
 801febc:	71bb      	strb	r3, [r7, #6]
 801febe:	460b      	mov	r3, r1
 801fec0:	717b      	strb	r3, [r7, #5]
 801fec2:	4613      	mov	r3, r2
 801fec4:	713b      	strb	r3, [r7, #4]
	uint8_t buf[4];

	buf[0] = paDutyCycle;
 801fec6:	79fb      	ldrb	r3, [r7, #7]
 801fec8:	733b      	strb	r3, [r7, #12]
	buf[1] = hpMax;
 801feca:	79bb      	ldrb	r3, [r7, #6]
 801fecc:	737b      	strb	r3, [r7, #13]
	buf[2] = deviceSel;
 801fece:	797b      	ldrb	r3, [r7, #5]
 801fed0:	73bb      	strb	r3, [r7, #14]
	buf[3] = paLut;
 801fed2:	793b      	ldrb	r3, [r7, #4]
 801fed4:	73fb      	strb	r3, [r7, #15]
	SX126xWriteCommand(RADIO_SET_PACONFIG, buf, 4);
 801fed6:	f107 030c 	add.w	r3, r7, #12
 801feda:	2204      	movs	r2, #4
 801fedc:	4619      	mov	r1, r3
 801fede:	2095      	movs	r0, #149	@ 0x95
 801fee0:	f000 fbca 	bl	8020678 <SX126xWriteCommand>
}
 801fee4:	bf00      	nop
 801fee6:	3714      	adds	r7, #20
 801fee8:	46bd      	mov	sp, r7
 801feea:	bd90      	pop	{r4, r7, pc}

0801feec <SX126xSetDioIrqParams>:
void SX126xSetRxTxFallbackMode(uint8_t fallbackMode) {
	SX126xWriteCommand(RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1);
}

void SX126xSetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask,
		uint16_t dio2Mask, uint16_t dio3Mask) {
 801feec:	b590      	push	{r4, r7, lr}
 801feee:	b085      	sub	sp, #20
 801fef0:	af00      	add	r7, sp, #0
 801fef2:	4604      	mov	r4, r0
 801fef4:	4608      	mov	r0, r1
 801fef6:	4611      	mov	r1, r2
 801fef8:	461a      	mov	r2, r3
 801fefa:	4623      	mov	r3, r4
 801fefc:	80fb      	strh	r3, [r7, #6]
 801fefe:	4603      	mov	r3, r0
 801ff00:	80bb      	strh	r3, [r7, #4]
 801ff02:	460b      	mov	r3, r1
 801ff04:	807b      	strh	r3, [r7, #2]
 801ff06:	4613      	mov	r3, r2
 801ff08:	803b      	strh	r3, [r7, #0]
	uint8_t buf[8];

	buf[0] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 801ff0a:	88fb      	ldrh	r3, [r7, #6]
 801ff0c:	0a1b      	lsrs	r3, r3, #8
 801ff0e:	b29b      	uxth	r3, r3
 801ff10:	b2db      	uxtb	r3, r3
 801ff12:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) (irqMask & 0x00FF);
 801ff14:	88fb      	ldrh	r3, [r7, #6]
 801ff16:	b2db      	uxtb	r3, r3
 801ff18:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 801ff1a:	88bb      	ldrh	r3, [r7, #4]
 801ff1c:	0a1b      	lsrs	r3, r3, #8
 801ff1e:	b29b      	uxth	r3, r3
 801ff20:	b2db      	uxtb	r3, r3
 801ff22:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) (dio1Mask & 0x00FF);
 801ff24:	88bb      	ldrh	r3, [r7, #4]
 801ff26:	b2db      	uxtb	r3, r3
 801ff28:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 801ff2a:	887b      	ldrh	r3, [r7, #2]
 801ff2c:	0a1b      	lsrs	r3, r3, #8
 801ff2e:	b29b      	uxth	r3, r3
 801ff30:	b2db      	uxtb	r3, r3
 801ff32:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) (dio2Mask & 0x00FF);
 801ff34:	887b      	ldrh	r3, [r7, #2]
 801ff36:	b2db      	uxtb	r3, r3
 801ff38:	737b      	strb	r3, [r7, #13]
	buf[6] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 801ff3a:	883b      	ldrh	r3, [r7, #0]
 801ff3c:	0a1b      	lsrs	r3, r3, #8
 801ff3e:	b29b      	uxth	r3, r3
 801ff40:	b2db      	uxtb	r3, r3
 801ff42:	73bb      	strb	r3, [r7, #14]
	buf[7] = (uint8_t) (dio3Mask & 0x00FF);
 801ff44:	883b      	ldrh	r3, [r7, #0]
 801ff46:	b2db      	uxtb	r3, r3
 801ff48:	73fb      	strb	r3, [r7, #15]
	SX126xWriteCommand(RADIO_CFG_DIOIRQ, buf, 8);
 801ff4a:	f107 0308 	add.w	r3, r7, #8
 801ff4e:	2208      	movs	r2, #8
 801ff50:	4619      	mov	r1, r3
 801ff52:	2008      	movs	r0, #8
 801ff54:	f000 fb90 	bl	8020678 <SX126xWriteCommand>
}
 801ff58:	bf00      	nop
 801ff5a:	3714      	adds	r7, #20
 801ff5c:	46bd      	mov	sp, r7
 801ff5e:	bd90      	pop	{r4, r7, pc}

0801ff60 <SX126xGetIrqStatus>:

uint16_t SX126xGetIrqStatus(void) {
 801ff60:	b580      	push	{r7, lr}
 801ff62:	b082      	sub	sp, #8
 801ff64:	af00      	add	r7, sp, #0
	uint8_t irqStatus[2];

	SX126xReadCommand(RADIO_GET_IRQSTATUS, irqStatus, 2);
 801ff66:	1d3b      	adds	r3, r7, #4
 801ff68:	2202      	movs	r2, #2
 801ff6a:	4619      	mov	r1, r3
 801ff6c:	2012      	movs	r0, #18
 801ff6e:	f000 fbb3 	bl	80206d8 <SX126xReadCommand>
	return (irqStatus[0] << 8) | irqStatus[1];
 801ff72:	793b      	ldrb	r3, [r7, #4]
 801ff74:	021b      	lsls	r3, r3, #8
 801ff76:	b21a      	sxth	r2, r3
 801ff78:	797b      	ldrb	r3, [r7, #5]
 801ff7a:	b21b      	sxth	r3, r3
 801ff7c:	4313      	orrs	r3, r2
 801ff7e:	b21b      	sxth	r3, r3
 801ff80:	b29b      	uxth	r3, r3
}
 801ff82:	4618      	mov	r0, r3
 801ff84:	3708      	adds	r7, #8
 801ff86:	46bd      	mov	sp, r7
 801ff88:	bd80      	pop	{r7, pc}

0801ff8a <SX126xSetDio2AsRfSwitchCtrl>:

void SX126xSetDio2AsRfSwitchCtrl(uint8_t enable) {
 801ff8a:	b580      	push	{r7, lr}
 801ff8c:	b082      	sub	sp, #8
 801ff8e:	af00      	add	r7, sp, #0
 801ff90:	4603      	mov	r3, r0
 801ff92:	71fb      	strb	r3, [r7, #7]
	SX126xWriteCommand(RADIO_SET_RFSWITCHMODE, &enable, 1);
 801ff94:	1dfb      	adds	r3, r7, #7
 801ff96:	2201      	movs	r2, #1
 801ff98:	4619      	mov	r1, r3
 801ff9a:	209d      	movs	r0, #157	@ 0x9d
 801ff9c:	f000 fb6c 	bl	8020678 <SX126xWriteCommand>
}
 801ffa0:	bf00      	nop
 801ffa2:	3708      	adds	r7, #8
 801ffa4:	46bd      	mov	sp, r7
 801ffa6:	bd80      	pop	{r7, pc}

0801ffa8 <SX126xSetRfFrequency>:
	buf[3] = (uint8_t) (timeout & 0xFF);

	SX126xWriteCommand(RADIO_SET_TCXOMODE, buf, 4);
}

void SX126xSetRfFrequency(uint32_t frequency) {
 801ffa8:	b580      	push	{r7, lr}
 801ffaa:	b084      	sub	sp, #16
 801ffac:	af00      	add	r7, sp, #0
 801ffae:	6078      	str	r0, [r7, #4]
	uint8_t buf[4];
	uint32_t freq = 0;
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	60fb      	str	r3, [r7, #12]

	if (ImageCalibrated == false) {
 801ffb4:	4b1e      	ldr	r3, [pc, #120]	@ (8020030 <SX126xSetRfFrequency+0x88>)
 801ffb6:	781b      	ldrb	r3, [r3, #0]
 801ffb8:	f083 0301 	eor.w	r3, r3, #1
 801ffbc:	b2db      	uxtb	r3, r3
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d005      	beq.n	801ffce <SX126xSetRfFrequency+0x26>
		SX126xCalibrateImage(frequency);
 801ffc2:	6878      	ldr	r0, [r7, #4]
 801ffc4:	f7ff ff2a 	bl	801fe1c <SX126xCalibrateImage>
		ImageCalibrated = true;
 801ffc8:	4b19      	ldr	r3, [pc, #100]	@ (8020030 <SX126xSetRfFrequency+0x88>)
 801ffca:	2201      	movs	r2, #1
 801ffcc:	701a      	strb	r2, [r3, #0]
	}

	freq = (uint32_t) ((double) frequency / (double) FREQ_STEP );
 801ffce:	6878      	ldr	r0, [r7, #4]
 801ffd0:	f7e0 fa98 	bl	8000504 <__aeabi_ui2d>
 801ffd4:	a314      	add	r3, pc, #80	@ (adr r3, 8020028 <SX126xSetRfFrequency+0x80>)
 801ffd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ffda:	f7e0 fc37 	bl	800084c <__aeabi_ddiv>
 801ffde:	4602      	mov	r2, r0
 801ffe0:	460b      	mov	r3, r1
 801ffe2:	4610      	mov	r0, r2
 801ffe4:	4619      	mov	r1, r3
 801ffe6:	f7e0 fddf 	bl	8000ba8 <__aeabi_d2uiz>
 801ffea:	4603      	mov	r3, r0
 801ffec:	60fb      	str	r3, [r7, #12]
	buf[0] = (uint8_t) ((freq >> 24) & 0xFF);
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	0e1b      	lsrs	r3, r3, #24
 801fff2:	b2db      	uxtb	r3, r3
 801fff4:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t) ((freq >> 16) & 0xFF);
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	0c1b      	lsrs	r3, r3, #16
 801fffa:	b2db      	uxtb	r3, r3
 801fffc:	727b      	strb	r3, [r7, #9]
	buf[2] = (uint8_t) ((freq >> 8) & 0xFF);
 801fffe:	68fb      	ldr	r3, [r7, #12]
 8020000:	0a1b      	lsrs	r3, r3, #8
 8020002:	b2db      	uxtb	r3, r3
 8020004:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) (freq & 0xFF);
 8020006:	68fb      	ldr	r3, [r7, #12]
 8020008:	b2db      	uxtb	r3, r3
 802000a:	72fb      	strb	r3, [r7, #11]
	SX126xWriteCommand(RADIO_SET_RFFREQUENCY, buf, 4);
 802000c:	f107 0308 	add.w	r3, r7, #8
 8020010:	2204      	movs	r2, #4
 8020012:	4619      	mov	r1, r3
 8020014:	2086      	movs	r0, #134	@ 0x86
 8020016:	f000 fb2f 	bl	8020678 <SX126xWriteCommand>
}
 802001a:	bf00      	nop
 802001c:	3710      	adds	r7, #16
 802001e:	46bd      	mov	sp, r7
 8020020:	bd80      	pop	{r7, pc}
 8020022:	bf00      	nop
 8020024:	f3af 8000 	nop.w
 8020028:	00000000 	.word	0x00000000
 802002c:	3fee8480 	.word	0x3fee8480
 8020030:	20007fdc 	.word	0x20007fdc

08020034 <SX126xSetPacketType>:

void SX126xSetPacketType(RadioPacketTypes_t packetType) {
 8020034:	b580      	push	{r7, lr}
 8020036:	b082      	sub	sp, #8
 8020038:	af00      	add	r7, sp, #0
 802003a:	4603      	mov	r3, r0
 802003c:	71fb      	strb	r3, [r7, #7]
	// Save packet type internally to avoid questioning the radio
	PacketType = packetType;
 802003e:	79fa      	ldrb	r2, [r7, #7]
 8020040:	4b05      	ldr	r3, [pc, #20]	@ (8020058 <SX126xSetPacketType+0x24>)
 8020042:	701a      	strb	r2, [r3, #0]
	SX126xWriteCommand(RADIO_SET_PACKETTYPE, (uint8_t*) &packetType, 1);
 8020044:	1dfb      	adds	r3, r7, #7
 8020046:	2201      	movs	r2, #1
 8020048:	4619      	mov	r1, r3
 802004a:	208a      	movs	r0, #138	@ 0x8a
 802004c:	f000 fb14 	bl	8020678 <SX126xWriteCommand>
}
 8020050:	bf00      	nop
 8020052:	3708      	adds	r7, #8
 8020054:	46bd      	mov	sp, r7
 8020056:	bd80      	pop	{r7, pc}
 8020058:	20007fd5 	.word	0x20007fd5

0802005c <SX126xGetPacketType>:

RadioPacketTypes_t SX126xGetPacketType(void) {
 802005c:	b480      	push	{r7}
 802005e:	af00      	add	r7, sp, #0
	return PacketType;
 8020060:	4b03      	ldr	r3, [pc, #12]	@ (8020070 <SX126xGetPacketType+0x14>)
 8020062:	781b      	ldrb	r3, [r3, #0]
}
 8020064:	4618      	mov	r0, r3
 8020066:	46bd      	mov	sp, r7
 8020068:	f85d 7b04 	ldr.w	r7, [sp], #4
 802006c:	4770      	bx	lr
 802006e:	bf00      	nop
 8020070:	20007fd5 	.word	0x20007fd5

08020074 <SX126xSetTxParams>:

void SX126xSetTxParams(int8_t power, RadioRampTimes_t rampTime) {
 8020074:	b580      	push	{r7, lr}
 8020076:	b084      	sub	sp, #16
 8020078:	af00      	add	r7, sp, #0
 802007a:	4603      	mov	r3, r0
 802007c:	460a      	mov	r2, r1
 802007e:	71fb      	strb	r3, [r7, #7]
 8020080:	4613      	mov	r3, r2
 8020082:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	if (SX126xGetPaSelect(0) == SX1261) {
 8020084:	2000      	movs	r0, #0
 8020086:	f000 fc6e 	bl	8020966 <SX126xGetPaSelect>
 802008a:	4603      	mov	r3, r0
 802008c:	2b01      	cmp	r3, #1
 802008e:	d124      	bne.n	80200da <SX126xSetTxParams+0x66>
		if (power == 15) {
 8020090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020094:	2b0f      	cmp	r3, #15
 8020096:	d106      	bne.n	80200a6 <SX126xSetTxParams+0x32>
			SX126xSetPaConfig(0x06, 0x00, 0x01, 0x01);
 8020098:	2301      	movs	r3, #1
 802009a:	2201      	movs	r2, #1
 802009c:	2100      	movs	r1, #0
 802009e:	2006      	movs	r0, #6
 80200a0:	f7ff ff02 	bl	801fea8 <SX126xSetPaConfig>
 80200a4:	e005      	b.n	80200b2 <SX126xSetTxParams+0x3e>
		}
		else {
			SX126xSetPaConfig(0x04, 0x00, 0x01, 0x01);
 80200a6:	2301      	movs	r3, #1
 80200a8:	2201      	movs	r2, #1
 80200aa:	2100      	movs	r1, #0
 80200ac:	2004      	movs	r0, #4
 80200ae:	f7ff fefb 	bl	801fea8 <SX126xSetPaConfig>
		}
		if (power >= 14) {
 80200b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80200b6:	2b0d      	cmp	r3, #13
 80200b8:	dd02      	ble.n	80200c0 <SX126xSetTxParams+0x4c>
			power = 14;
 80200ba:	230e      	movs	r3, #14
 80200bc:	71fb      	strb	r3, [r7, #7]
 80200be:	e006      	b.n	80200ce <SX126xSetTxParams+0x5a>
		}
		else if (power < -17) {
 80200c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80200c4:	f113 0f11 	cmn.w	r3, #17
 80200c8:	da01      	bge.n	80200ce <SX126xSetTxParams+0x5a>
			power = -17;
 80200ca:	23ef      	movs	r3, #239	@ 0xef
 80200cc:	71fb      	strb	r3, [r7, #7]
		}
		SX126xWriteRegister(REG_OCP, 0x18); // current max is 80 mA for the whole device
 80200ce:	2118      	movs	r1, #24
 80200d0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80200d4:	f000 fb6a 	bl	80207ac <SX126xWriteRegister>
 80200d8:	e025      	b.n	8020126 <SX126xSetTxParams+0xb2>
	}
	else // sx1262
	{
		// WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
		// RegTxClampConfig = @address 0x08D8
		SX126xWriteRegister(0x08D8, SX126xReadRegister(0x08D8) | (0x0F << 1));
 80200da:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80200de:	f000 fbb1 	bl	8020844 <SX126xReadRegister>
 80200e2:	4603      	mov	r3, r0
 80200e4:	f043 031e 	orr.w	r3, r3, #30
 80200e8:	b2db      	uxtb	r3, r3
 80200ea:	4619      	mov	r1, r3
 80200ec:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80200f0:	f000 fb5c 	bl	80207ac <SX126xWriteRegister>
		// WORKAROUND END

		SX126xSetPaConfig(0x04, 0x07, 0x00, 0x01);
 80200f4:	2301      	movs	r3, #1
 80200f6:	2200      	movs	r2, #0
 80200f8:	2107      	movs	r1, #7
 80200fa:	2004      	movs	r0, #4
 80200fc:	f7ff fed4 	bl	801fea8 <SX126xSetPaConfig>
		if (power > 22) {
 8020100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020104:	2b16      	cmp	r3, #22
 8020106:	dd02      	ble.n	802010e <SX126xSetTxParams+0x9a>
			power = 22;
 8020108:	2316      	movs	r3, #22
 802010a:	71fb      	strb	r3, [r7, #7]
 802010c:	e006      	b.n	802011c <SX126xSetTxParams+0xa8>
		}
		else if (power < -9) {
 802010e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020112:	f113 0f09 	cmn.w	r3, #9
 8020116:	da01      	bge.n	802011c <SX126xSetTxParams+0xa8>
			power = -9;
 8020118:	23f7      	movs	r3, #247	@ 0xf7
 802011a:	71fb      	strb	r3, [r7, #7]
		}
		SX126xWriteRegister(REG_OCP, 0x38); // current max 160mA for the whole device
 802011c:	2138      	movs	r1, #56	@ 0x38
 802011e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8020122:	f000 fb43 	bl	80207ac <SX126xWriteRegister>
	}
	buf[0] = power;
 8020126:	79fb      	ldrb	r3, [r7, #7]
 8020128:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) rampTime;
 802012a:	79bb      	ldrb	r3, [r7, #6]
 802012c:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 802012e:	f107 030c 	add.w	r3, r7, #12
 8020132:	2202      	movs	r2, #2
 8020134:	4619      	mov	r1, r3
 8020136:	208e      	movs	r0, #142	@ 0x8e
 8020138:	f000 fa9e 	bl	8020678 <SX126xWriteCommand>
}
 802013c:	bf00      	nop
 802013e:	3710      	adds	r7, #16
 8020140:	46bd      	mov	sp, r7
 8020142:	bd80      	pop	{r7, pc}
 8020144:	0000      	movs	r0, r0
	...

08020148 <SX126xSetModulationParams>:

void SX126xSetModulationParams(ModulationParams_t *modulationParams) {
 8020148:	b580      	push	{r7, lr}
 802014a:	b086      	sub	sp, #24
 802014c:	af00      	add	r7, sp, #0
 802014e:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint32_t tempVal = 0;
 8020150:	2300      	movs	r3, #0
 8020152:	617b      	str	r3, [r7, #20]
	uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8020154:	4a48      	ldr	r2, [pc, #288]	@ (8020278 <SX126xSetModulationParams+0x130>)
 8020156:	f107 0308 	add.w	r3, r7, #8
 802015a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802015e:	e883 0003 	stmia.w	r3, {r0, r1}

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != modulationParams->PacketType) {
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	781a      	ldrb	r2, [r3, #0]
 8020166:	4b45      	ldr	r3, [pc, #276]	@ (802027c <SX126xSetModulationParams+0x134>)
 8020168:	781b      	ldrb	r3, [r3, #0]
 802016a:	429a      	cmp	r2, r3
 802016c:	d004      	beq.n	8020178 <SX126xSetModulationParams+0x30>
		SX126xSetPacketType(modulationParams->PacketType);
 802016e:	687b      	ldr	r3, [r7, #4]
 8020170:	781b      	ldrb	r3, [r3, #0]
 8020172:	4618      	mov	r0, r3
 8020174:	f7ff ff5e 	bl	8020034 <SX126xSetPacketType>
	}

	switch (modulationParams->PacketType) {
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	781b      	ldrb	r3, [r3, #0]
 802017c:	2b00      	cmp	r3, #0
 802017e:	d002      	beq.n	8020186 <SX126xSetModulationParams+0x3e>
 8020180:	2b01      	cmp	r3, #1
 8020182:	d056      	beq.n	8020232 <SX126xSetModulationParams+0xea>
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);

		break;
		default:
		case PACKET_TYPE_NONE:
			return;
 8020184:	e06c      	b.n	8020260 <SX126xSetModulationParams+0x118>
			n = 8;
 8020186:	2308      	movs	r3, #8
 8020188:	74fb      	strb	r3, [r7, #19]
							/ (double) modulationParams->Params.Gfsk.BitRate));
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	685b      	ldr	r3, [r3, #4]
 802018e:	4618      	mov	r0, r3
 8020190:	f7e0 f9b8 	bl	8000504 <__aeabi_ui2d>
 8020194:	4602      	mov	r2, r0
 8020196:	460b      	mov	r3, r1
 8020198:	a133      	add	r1, pc, #204	@ (adr r1, 8020268 <SX126xSetModulationParams+0x120>)
 802019a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802019e:	f7e0 fb55 	bl	800084c <__aeabi_ddiv>
 80201a2:	4602      	mov	r2, r0
 80201a4:	460b      	mov	r3, r1
 80201a6:	4610      	mov	r0, r2
 80201a8:	4619      	mov	r1, r3
					* ((double) XTAL_FREQ
 80201aa:	f04f 0200 	mov.w	r2, #0
 80201ae:	4b34      	ldr	r3, [pc, #208]	@ (8020280 <SX126xSetModulationParams+0x138>)
 80201b0:	f7e0 fa22 	bl	80005f8 <__aeabi_dmul>
 80201b4:	4602      	mov	r2, r0
 80201b6:	460b      	mov	r3, r1
			tempVal = (uint32_t) (32
 80201b8:	4610      	mov	r0, r2
 80201ba:	4619      	mov	r1, r3
 80201bc:	f7e0 fcf4 	bl	8000ba8 <__aeabi_d2uiz>
 80201c0:	4603      	mov	r3, r0
 80201c2:	617b      	str	r3, [r7, #20]
			buf[0] = (tempVal >> 16) & 0xFF;
 80201c4:	697b      	ldr	r3, [r7, #20]
 80201c6:	0c1b      	lsrs	r3, r3, #16
 80201c8:	b2db      	uxtb	r3, r3
 80201ca:	723b      	strb	r3, [r7, #8]
			buf[1] = (tempVal >> 8) & 0xFF;
 80201cc:	697b      	ldr	r3, [r7, #20]
 80201ce:	0a1b      	lsrs	r3, r3, #8
 80201d0:	b2db      	uxtb	r3, r3
 80201d2:	727b      	strb	r3, [r7, #9]
			buf[2] = tempVal & 0xFF;
 80201d4:	697b      	ldr	r3, [r7, #20]
 80201d6:	b2db      	uxtb	r3, r3
 80201d8:	72bb      	strb	r3, [r7, #10]
			buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	7b1b      	ldrb	r3, [r3, #12]
 80201de:	72fb      	strb	r3, [r7, #11]
			buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80201e0:	687b      	ldr	r3, [r7, #4]
 80201e2:	7b5b      	ldrb	r3, [r3, #13]
 80201e4:	733b      	strb	r3, [r7, #12]
			tempVal = (uint32_t) ((double) modulationParams->Params.Gfsk.Fdev
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	689b      	ldr	r3, [r3, #8]
 80201ea:	4618      	mov	r0, r3
 80201ec:	f7e0 f98a 	bl	8000504 <__aeabi_ui2d>
					/ (double) FREQ_STEP );
 80201f0:	a31f      	add	r3, pc, #124	@ (adr r3, 8020270 <SX126xSetModulationParams+0x128>)
 80201f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201f6:	f7e0 fb29 	bl	800084c <__aeabi_ddiv>
 80201fa:	4602      	mov	r2, r0
 80201fc:	460b      	mov	r3, r1
			tempVal = (uint32_t) ((double) modulationParams->Params.Gfsk.Fdev
 80201fe:	4610      	mov	r0, r2
 8020200:	4619      	mov	r1, r3
 8020202:	f7e0 fcd1 	bl	8000ba8 <__aeabi_d2uiz>
 8020206:	4603      	mov	r3, r0
 8020208:	617b      	str	r3, [r7, #20]
			buf[5] = (tempVal >> 16) & 0xFF;
 802020a:	697b      	ldr	r3, [r7, #20]
 802020c:	0c1b      	lsrs	r3, r3, #16
 802020e:	b2db      	uxtb	r3, r3
 8020210:	737b      	strb	r3, [r7, #13]
			buf[6] = (tempVal >> 8) & 0xFF;
 8020212:	697b      	ldr	r3, [r7, #20]
 8020214:	0a1b      	lsrs	r3, r3, #8
 8020216:	b2db      	uxtb	r3, r3
 8020218:	73bb      	strb	r3, [r7, #14]
			buf[7] = (tempVal & 0xFF);
 802021a:	697b      	ldr	r3, [r7, #20]
 802021c:	b2db      	uxtb	r3, r3
 802021e:	73fb      	strb	r3, [r7, #15]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 8020220:	7cfb      	ldrb	r3, [r7, #19]
 8020222:	b29a      	uxth	r2, r3
 8020224:	f107 0308 	add.w	r3, r7, #8
 8020228:	4619      	mov	r1, r3
 802022a:	208b      	movs	r0, #139	@ 0x8b
 802022c:	f000 fa24 	bl	8020678 <SX126xWriteCommand>
		break;
 8020230:	e016      	b.n	8020260 <SX126xSetModulationParams+0x118>
			n = 4;
 8020232:	2304      	movs	r3, #4
 8020234:	74fb      	strb	r3, [r7, #19]
			buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	7c1b      	ldrb	r3, [r3, #16]
 802023a:	723b      	strb	r3, [r7, #8]
			buf[1] = modulationParams->Params.LoRa.Bandwidth;
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	7c5b      	ldrb	r3, [r3, #17]
 8020240:	727b      	strb	r3, [r7, #9]
			buf[2] = modulationParams->Params.LoRa.CodingRate;
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	7c9b      	ldrb	r3, [r3, #18]
 8020246:	72bb      	strb	r3, [r7, #10]
			buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8020248:	687b      	ldr	r3, [r7, #4]
 802024a:	7cdb      	ldrb	r3, [r3, #19]
 802024c:	72fb      	strb	r3, [r7, #11]
			SX126xWriteCommand(RADIO_SET_MODULATIONPARAMS, buf, n);
 802024e:	7cfb      	ldrb	r3, [r7, #19]
 8020250:	b29a      	uxth	r2, r3
 8020252:	f107 0308 	add.w	r3, r7, #8
 8020256:	4619      	mov	r1, r3
 8020258:	208b      	movs	r0, #139	@ 0x8b
 802025a:	f000 fa0d 	bl	8020678 <SX126xWriteCommand>
		break;
 802025e:	bf00      	nop
	}
}
 8020260:	3718      	adds	r7, #24
 8020262:	46bd      	mov	sp, r7
 8020264:	bd80      	pop	{r7, pc}
 8020266:	bf00      	nop
 8020268:	00000000 	.word	0x00000000
 802026c:	417e8480 	.word	0x417e8480
 8020270:	00000000 	.word	0x00000000
 8020274:	3fee8480 	.word	0x3fee8480
 8020278:	08024c24 	.word	0x08024c24
 802027c:	20007fd5 	.word	0x20007fd5
 8020280:	40400000 	.word	0x40400000

08020284 <SX126xSetPacketParams>:

void SX126xSetPacketParams(PacketParams_t *packetParams) {
 8020284:	b580      	push	{r7, lr}
 8020286:	b086      	sub	sp, #24
 8020288:	af00      	add	r7, sp, #0
 802028a:	6078      	str	r0, [r7, #4]
	uint8_t n;
	uint8_t crcVal = 0;
 802028c:	2300      	movs	r3, #0
 802028e:	75bb      	strb	r3, [r7, #22]
	uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8020290:	4a3e      	ldr	r2, [pc, #248]	@ (802038c <SX126xSetPacketParams+0x108>)
 8020292:	f107 030c 	add.w	r3, r7, #12
 8020296:	ca07      	ldmia	r2, {r0, r1, r2}
 8020298:	c303      	stmia	r3!, {r0, r1}
 802029a:	701a      	strb	r2, [r3, #0]

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (PacketType != packetParams->PacketType) {
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	781a      	ldrb	r2, [r3, #0]
 80202a0:	4b3b      	ldr	r3, [pc, #236]	@ (8020390 <SX126xSetPacketParams+0x10c>)
 80202a2:	781b      	ldrb	r3, [r3, #0]
 80202a4:	429a      	cmp	r2, r3
 80202a6:	d004      	beq.n	80202b2 <SX126xSetPacketParams+0x2e>
		SX126xSetPacketType(packetParams->PacketType);
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	781b      	ldrb	r3, [r3, #0]
 80202ac:	4618      	mov	r0, r3
 80202ae:	f7ff fec1 	bl	8020034 <SX126xSetPacketType>
	}

	switch (packetParams->PacketType) {
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	781b      	ldrb	r3, [r3, #0]
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d002      	beq.n	80202c0 <SX126xSetPacketParams+0x3c>
 80202ba:	2b01      	cmp	r3, #1
 80202bc:	d042      	beq.n	8020344 <SX126xSetPacketParams+0xc0>
			buf[4] = packetParams->Params.LoRa.CrcMode;
			buf[5] = packetParams->Params.LoRa.InvertIQ;
		break;
		default:
		case PACKET_TYPE_NONE:
			return;
 80202be:	e062      	b.n	8020386 <SX126xSetPacketParams+0x102>
			if (packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM) {
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	7a5b      	ldrb	r3, [r3, #9]
 80202c4:	2bf1      	cmp	r3, #241	@ 0xf1
 80202c6:	d10a      	bne.n	80202de <SX126xSetPacketParams+0x5a>
				SX126xSetCrcSeed(CRC_IBM_SEED);
 80202c8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80202cc:	f7ff fc1e 	bl	801fb0c <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_IBM);
 80202d0:	f248 0005 	movw	r0, #32773	@ 0x8005
 80202d4:	f7ff fc3a 	bl	801fb4c <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES;
 80202d8:	2302      	movs	r3, #2
 80202da:	75bb      	strb	r3, [r7, #22]
 80202dc:	e011      	b.n	8020302 <SX126xSetPacketParams+0x7e>
			else if (packetParams->Params.Gfsk.CrcLength
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	7a5b      	ldrb	r3, [r3, #9]
 80202e2:	2bf2      	cmp	r3, #242	@ 0xf2
 80202e4:	d10a      	bne.n	80202fc <SX126xSetPacketParams+0x78>
				SX126xSetCrcSeed(CRC_CCITT_SEED);
 80202e6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80202ea:	f7ff fc0f 	bl	801fb0c <SX126xSetCrcSeed>
				SX126xSetCrcPolynomial(CRC_POLYNOMIAL_CCITT);
 80202ee:	f241 0021 	movw	r0, #4129	@ 0x1021
 80202f2:	f7ff fc2b 	bl	801fb4c <SX126xSetCrcPolynomial>
				crcVal = RADIO_CRC_2_BYTES_INV;
 80202f6:	2306      	movs	r3, #6
 80202f8:	75bb      	strb	r3, [r7, #22]
 80202fa:	e002      	b.n	8020302 <SX126xSetPacketParams+0x7e>
				crcVal = packetParams->Params.Gfsk.CrcLength;
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	7a5b      	ldrb	r3, [r3, #9]
 8020300:	75bb      	strb	r3, [r7, #22]
			n = 9;
 8020302:	2309      	movs	r3, #9
 8020304:	75fb      	strb	r3, [r7, #23]
			buf[0] = (packetParams->Params.Gfsk.PreambleLength >> 8) & 0xFF;
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	885b      	ldrh	r3, [r3, #2]
 802030a:	0a1b      	lsrs	r3, r3, #8
 802030c:	b29b      	uxth	r3, r3
 802030e:	b2db      	uxtb	r3, r3
 8020310:	733b      	strb	r3, [r7, #12]
			buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	885b      	ldrh	r3, [r3, #2]
 8020316:	b2db      	uxtb	r3, r3
 8020318:	737b      	strb	r3, [r7, #13]
			buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	791b      	ldrb	r3, [r3, #4]
 802031e:	73bb      	strb	r3, [r7, #14]
			buf[3] = (packetParams->Params.Gfsk.SyncWordLength /*<< 3*/); // convert from byte to bit
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	795b      	ldrb	r3, [r3, #5]
 8020324:	73fb      	strb	r3, [r7, #15]
			buf[4] = packetParams->Params.Gfsk.AddrComp;
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	799b      	ldrb	r3, [r3, #6]
 802032a:	743b      	strb	r3, [r7, #16]
			buf[5] = packetParams->Params.Gfsk.HeaderType;
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	79db      	ldrb	r3, [r3, #7]
 8020330:	747b      	strb	r3, [r7, #17]
			buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8020332:	687b      	ldr	r3, [r7, #4]
 8020334:	7a1b      	ldrb	r3, [r3, #8]
 8020336:	74bb      	strb	r3, [r7, #18]
			buf[7] = crcVal;
 8020338:	7dbb      	ldrb	r3, [r7, #22]
 802033a:	74fb      	strb	r3, [r7, #19]
			buf[8] = packetParams->Params.Gfsk.DcFree;
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	7a9b      	ldrb	r3, [r3, #10]
 8020340:	753b      	strb	r3, [r7, #20]
		break;
 8020342:	e018      	b.n	8020376 <SX126xSetPacketParams+0xf2>
			n = 6;
 8020344:	2306      	movs	r3, #6
 8020346:	75fb      	strb	r3, [r7, #23]
			buf[0] = (packetParams->Params.LoRa.PreambleLength >> 8) & 0xFF;
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	899b      	ldrh	r3, [r3, #12]
 802034c:	0a1b      	lsrs	r3, r3, #8
 802034e:	b29b      	uxth	r3, r3
 8020350:	b2db      	uxtb	r3, r3
 8020352:	733b      	strb	r3, [r7, #12]
			buf[1] = packetParams->Params.LoRa.PreambleLength;
 8020354:	687b      	ldr	r3, [r7, #4]
 8020356:	899b      	ldrh	r3, [r3, #12]
 8020358:	b2db      	uxtb	r3, r3
 802035a:	737b      	strb	r3, [r7, #13]
			buf[2] = packetParams->Params.LoRa.HeaderType;
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	7b9b      	ldrb	r3, [r3, #14]
 8020360:	73bb      	strb	r3, [r7, #14]
			buf[3] = packetParams->Params.LoRa.PayloadLength;
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	7bdb      	ldrb	r3, [r3, #15]
 8020366:	73fb      	strb	r3, [r7, #15]
			buf[4] = packetParams->Params.LoRa.CrcMode;
 8020368:	687b      	ldr	r3, [r7, #4]
 802036a:	7c1b      	ldrb	r3, [r3, #16]
 802036c:	743b      	strb	r3, [r7, #16]
			buf[5] = packetParams->Params.LoRa.InvertIQ;
 802036e:	687b      	ldr	r3, [r7, #4]
 8020370:	7c5b      	ldrb	r3, [r3, #17]
 8020372:	747b      	strb	r3, [r7, #17]
		break;
 8020374:	bf00      	nop
	}
	SX126xWriteCommand(RADIO_SET_PACKETPARAMS, buf, n);
 8020376:	7dfb      	ldrb	r3, [r7, #23]
 8020378:	b29a      	uxth	r2, r3
 802037a:	f107 030c 	add.w	r3, r7, #12
 802037e:	4619      	mov	r1, r3
 8020380:	208c      	movs	r0, #140	@ 0x8c
 8020382:	f000 f979 	bl	8020678 <SX126xWriteCommand>
}
 8020386:	3718      	adds	r7, #24
 8020388:	46bd      	mov	sp, r7
 802038a:	bd80      	pop	{r7, pc}
 802038c:	08024c2c 	.word	0x08024c2c
 8020390:	20007fd5 	.word	0x20007fd5

08020394 <SX126xSetCadParams>:

void SX126xSetCadParams(RadioLoRaCadSymbols_t cadSymbolNum, uint8_t cadDetPeak,
		uint8_t cadDetMin, RadioCadExitModes_t cadExitMode, uint32_t cadTimeout) {
 8020394:	b590      	push	{r4, r7, lr}
 8020396:	b085      	sub	sp, #20
 8020398:	af00      	add	r7, sp, #0
 802039a:	4604      	mov	r4, r0
 802039c:	4608      	mov	r0, r1
 802039e:	4611      	mov	r1, r2
 80203a0:	461a      	mov	r2, r3
 80203a2:	4623      	mov	r3, r4
 80203a4:	71fb      	strb	r3, [r7, #7]
 80203a6:	4603      	mov	r3, r0
 80203a8:	71bb      	strb	r3, [r7, #6]
 80203aa:	460b      	mov	r3, r1
 80203ac:	717b      	strb	r3, [r7, #5]
 80203ae:	4613      	mov	r3, r2
 80203b0:	713b      	strb	r3, [r7, #4]
	uint8_t buf[7];

	buf[0] = (uint8_t) cadSymbolNum;
 80203b2:	79fb      	ldrb	r3, [r7, #7]
 80203b4:	723b      	strb	r3, [r7, #8]
	buf[1] = cadDetPeak;
 80203b6:	79bb      	ldrb	r3, [r7, #6]
 80203b8:	727b      	strb	r3, [r7, #9]
	buf[2] = cadDetMin;
 80203ba:	797b      	ldrb	r3, [r7, #5]
 80203bc:	72bb      	strb	r3, [r7, #10]
	buf[3] = (uint8_t) cadExitMode;
 80203be:	793b      	ldrb	r3, [r7, #4]
 80203c0:	72fb      	strb	r3, [r7, #11]
	buf[4] = (uint8_t) ((cadTimeout >> 16) & 0xFF);
 80203c2:	6a3b      	ldr	r3, [r7, #32]
 80203c4:	0c1b      	lsrs	r3, r3, #16
 80203c6:	b2db      	uxtb	r3, r3
 80203c8:	733b      	strb	r3, [r7, #12]
	buf[5] = (uint8_t) ((cadTimeout >> 8) & 0xFF);
 80203ca:	6a3b      	ldr	r3, [r7, #32]
 80203cc:	0a1b      	lsrs	r3, r3, #8
 80203ce:	b2db      	uxtb	r3, r3
 80203d0:	737b      	strb	r3, [r7, #13]
	buf[6] = (uint8_t) (cadTimeout & 0xFF);
 80203d2:	6a3b      	ldr	r3, [r7, #32]
 80203d4:	b2db      	uxtb	r3, r3
 80203d6:	73bb      	strb	r3, [r7, #14]
	SX126xWriteCommand(RADIO_SET_CADPARAMS, buf, 7);
 80203d8:	f107 0308 	add.w	r3, r7, #8
 80203dc:	2207      	movs	r2, #7
 80203de:	4619      	mov	r1, r3
 80203e0:	2088      	movs	r0, #136	@ 0x88
 80203e2:	f000 f949 	bl	8020678 <SX126xWriteCommand>
	OperatingMode = MODE_CAD;
 80203e6:	4b03      	ldr	r3, [pc, #12]	@ (80203f4 <SX126xSetCadParams+0x60>)
 80203e8:	2207      	movs	r2, #7
 80203ea:	701a      	strb	r2, [r3, #0]
}
 80203ec:	bf00      	nop
 80203ee:	3714      	adds	r7, #20
 80203f0:	46bd      	mov	sp, r7
 80203f2:	bd90      	pop	{r4, r7, pc}
 80203f4:	20007fd4 	.word	0x20007fd4

080203f8 <SX126xSetBufferBaseAddress>:

void SX126xSetBufferBaseAddress(uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 80203f8:	b580      	push	{r7, lr}
 80203fa:	b084      	sub	sp, #16
 80203fc:	af00      	add	r7, sp, #0
 80203fe:	4603      	mov	r3, r0
 8020400:	460a      	mov	r2, r1
 8020402:	71fb      	strb	r3, [r7, #7]
 8020404:	4613      	mov	r3, r2
 8020406:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 8020408:	79fb      	ldrb	r3, [r7, #7]
 802040a:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 802040c:	79bb      	ldrb	r3, [r7, #6]
 802040e:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_SET_BUFFERBASEADDRESS, buf, 2);
 8020410:	f107 030c 	add.w	r3, r7, #12
 8020414:	2202      	movs	r2, #2
 8020416:	4619      	mov	r1, r3
 8020418:	208f      	movs	r0, #143	@ 0x8f
 802041a:	f000 f92d 	bl	8020678 <SX126xWriteCommand>
}
 802041e:	bf00      	nop
 8020420:	3710      	adds	r7, #16
 8020422:	46bd      	mov	sp, r7
 8020424:	bd80      	pop	{r7, pc}

08020426 <SX126xGetRssiInst>:
	SX126xReadCommand(RADIO_GET_STATUS, (uint8_t*) &stat, 1);
	status.Value = stat;
	return status;
}

int8_t SX126xGetRssiInst(void) {
 8020426:	b580      	push	{r7, lr}
 8020428:	b082      	sub	sp, #8
 802042a:	af00      	add	r7, sp, #0
	uint8_t buf[1];
	int8_t rssi = 0;
 802042c:	2300      	movs	r3, #0
 802042e:	71fb      	strb	r3, [r7, #7]

	SX126xReadCommand(RADIO_GET_RSSIINST, buf, 1);
 8020430:	1d3b      	adds	r3, r7, #4
 8020432:	2201      	movs	r2, #1
 8020434:	4619      	mov	r1, r3
 8020436:	2015      	movs	r0, #21
 8020438:	f000 f94e 	bl	80206d8 <SX126xReadCommand>
	rssi = -buf[0] >> 1;
 802043c:	793b      	ldrb	r3, [r7, #4]
 802043e:	425b      	negs	r3, r3
 8020440:	105b      	asrs	r3, r3, #1
 8020442:	71fb      	strb	r3, [r7, #7]
	return rssi;
 8020444:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8020448:	4618      	mov	r0, r3
 802044a:	3708      	adds	r7, #8
 802044c:	46bd      	mov	sp, r7
 802044e:	bd80      	pop	{r7, pc}

08020450 <SX126xGetRxBufferStatus>:

void SX126xGetRxBufferStatus(uint8_t *payloadLength,
		uint8_t *rxStartBufferPointer) {
 8020450:	b580      	push	{r7, lr}
 8020452:	b084      	sub	sp, #16
 8020454:	af00      	add	r7, sp, #0
 8020456:	6078      	str	r0, [r7, #4]
 8020458:	6039      	str	r1, [r7, #0]
	uint8_t status[2];

	SX126xReadCommand(RADIO_GET_RXBUFFERSTATUS, status, 2);
 802045a:	f107 030c 	add.w	r3, r7, #12
 802045e:	2202      	movs	r2, #2
 8020460:	4619      	mov	r1, r3
 8020462:	2013      	movs	r0, #19
 8020464:	f000 f938 	bl	80206d8 <SX126xReadCommand>

	// In case of LORA fixed header, the payloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if ((SX126xGetPacketType() == PACKET_TYPE_LORA)
 8020468:	f7ff fdf8 	bl	802005c <SX126xGetPacketType>
 802046c:	4603      	mov	r3, r0
 802046e:	2b01      	cmp	r3, #1
 8020470:	d111      	bne.n	8020496 <SX126xGetRxBufferStatus+0x46>
			&& (SX126xReadRegister(REG_LR_PACKETPARAMS) >> 7 == 1)) {
 8020472:	f240 7004 	movw	r0, #1796	@ 0x704
 8020476:	f000 f9e5 	bl	8020844 <SX126xReadRegister>
 802047a:	4603      	mov	r3, r0
 802047c:	09db      	lsrs	r3, r3, #7
 802047e:	b2db      	uxtb	r3, r3
 8020480:	2b01      	cmp	r3, #1
 8020482:	d108      	bne.n	8020496 <SX126xGetRxBufferStatus+0x46>
		*payloadLength = SX126xReadRegister(REG_LR_PAYLOADLENGTH);
 8020484:	f240 7002 	movw	r0, #1794	@ 0x702
 8020488:	f000 f9dc 	bl	8020844 <SX126xReadRegister>
 802048c:	4603      	mov	r3, r0
 802048e:	461a      	mov	r2, r3
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	701a      	strb	r2, [r3, #0]
 8020494:	e002      	b.n	802049c <SX126xGetRxBufferStatus+0x4c>
	}
	else {
		*payloadLength = status[0];
 8020496:	7b3a      	ldrb	r2, [r7, #12]
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	701a      	strb	r2, [r3, #0]
	}
	*rxStartBufferPointer = status[1];
 802049c:	7b7a      	ldrb	r2, [r7, #13]
 802049e:	683b      	ldr	r3, [r7, #0]
 80204a0:	701a      	strb	r2, [r3, #0]
}
 80204a2:	bf00      	nop
 80204a4:	3710      	adds	r7, #16
 80204a6:	46bd      	mov	sp, r7
 80204a8:	bd80      	pop	{r7, pc}
	...

080204ac <SX126xGetPacketStatus>:

void SX126xGetPacketStatus(PacketStatus_t *pktStatus) {
 80204ac:	b580      	push	{r7, lr}
 80204ae:	b084      	sub	sp, #16
 80204b0:	af00      	add	r7, sp, #0
 80204b2:	6078      	str	r0, [r7, #4]
	uint8_t status[3];

	SX126xReadCommand(RADIO_GET_PACKETSTATUS, status, 3);
 80204b4:	f107 030c 	add.w	r3, r7, #12
 80204b8:	2203      	movs	r2, #3
 80204ba:	4619      	mov	r1, r3
 80204bc:	2014      	movs	r0, #20
 80204be:	f000 f90b 	bl	80206d8 <SX126xReadCommand>

	pktStatus->packetType = SX126xGetPacketType();
 80204c2:	f7ff fdcb 	bl	802005c <SX126xGetPacketType>
 80204c6:	4603      	mov	r3, r0
 80204c8:	461a      	mov	r2, r3
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	701a      	strb	r2, [r3, #0]
	switch (pktStatus->packetType) {
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	781b      	ldrb	r3, [r3, #0]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d002      	beq.n	80204dc <SX126xGetPacketStatus+0x30>
 80204d6:	2b01      	cmp	r3, #1
 80204d8:	d013      	beq.n	8020502 <SX126xGetPacketStatus+0x56>
 80204da:	e02a      	b.n	8020532 <SX126xGetPacketStatus+0x86>
		case PACKET_TYPE_GFSK:
			pktStatus->Params.Gfsk.RxStatus = status[0];
 80204dc:	7b3a      	ldrb	r2, [r7, #12]
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	711a      	strb	r2, [r3, #4]
			pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80204e2:	7b7b      	ldrb	r3, [r7, #13]
 80204e4:	425b      	negs	r3, r3
 80204e6:	105b      	asrs	r3, r3, #1
 80204e8:	b25a      	sxtb	r2, r3
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	719a      	strb	r2, [r3, #6]
			pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80204ee:	7bbb      	ldrb	r3, [r7, #14]
 80204f0:	425b      	negs	r3, r3
 80204f2:	105b      	asrs	r3, r3, #1
 80204f4:	b25a      	sxtb	r2, r3
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	715a      	strb	r2, [r3, #5]
			pktStatus->Params.Gfsk.FreqError = 0;
 80204fa:	687b      	ldr	r3, [r7, #4]
 80204fc:	2200      	movs	r2, #0
 80204fe:	609a      	str	r2, [r3, #8]
		break;
 8020500:	e020      	b.n	8020544 <SX126xGetPacketStatus+0x98>

		case PACKET_TYPE_LORA:
			pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8020502:	7b3b      	ldrb	r3, [r7, #12]
 8020504:	425b      	negs	r3, r3
 8020506:	105b      	asrs	r3, r3, #1
 8020508:	b25a      	sxtb	r2, r3
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	731a      	strb	r2, [r3, #12]
			// Returns SNR value [dB] rounded to the nearest integer value
			pktStatus->Params.LoRa.SnrPkt = (((int8_t) status[1]) + 2) >> 2;
 802050e:	7b7b      	ldrb	r3, [r7, #13]
 8020510:	b25b      	sxtb	r3, r3
 8020512:	3302      	adds	r3, #2
 8020514:	109b      	asrs	r3, r3, #2
 8020516:	b25a      	sxtb	r2, r3
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	735a      	strb	r2, [r3, #13]
			pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 802051c:	7bbb      	ldrb	r3, [r7, #14]
 802051e:	425b      	negs	r3, r3
 8020520:	105b      	asrs	r3, r3, #1
 8020522:	b25a      	sxtb	r2, r3
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	739a      	strb	r2, [r3, #14]
			pktStatus->Params.LoRa.FreqError = FrequencyError;
 8020528:	4b08      	ldr	r3, [pc, #32]	@ (802054c <SX126xGetPacketStatus+0xa0>)
 802052a:	681a      	ldr	r2, [r3, #0]
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	611a      	str	r2, [r3, #16]
		break;
 8020530:	e008      	b.n	8020544 <SX126xGetPacketStatus+0x98>

		default:
		case PACKET_TYPE_NONE:
			// In that specific case, we set everything in the pktStatus to zeros
			// and reset the packet type accordingly
			memset(pktStatus, 0, sizeof(PacketStatus_t));
 8020532:	2214      	movs	r2, #20
 8020534:	2100      	movs	r1, #0
 8020536:	6878      	ldr	r0, [r7, #4]
 8020538:	f001 fe88 	bl	802224c <memset>
			pktStatus->packetType = PACKET_TYPE_NONE;
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	220f      	movs	r2, #15
 8020540:	701a      	strb	r2, [r3, #0]
		break;
 8020542:	bf00      	nop
	}
}
 8020544:	bf00      	nop
 8020546:	3710      	adds	r7, #16
 8020548:	46bd      	mov	sp, r7
 802054a:	bd80      	pop	{r7, pc}
 802054c:	20007fd8 	.word	0x20007fd8

08020550 <SX126xClearIrqStatus>:
void SX126xClearDeviceErrors(void) {
	uint8_t buf[2] = { 0x00, 0x00 };
	SX126xWriteCommand(RADIO_CLR_ERROR, buf, 2);
}

void SX126xClearIrqStatus(uint16_t irq) {
 8020550:	b580      	push	{r7, lr}
 8020552:	b084      	sub	sp, #16
 8020554:	af00      	add	r7, sp, #0
 8020556:	4603      	mov	r3, r0
 8020558:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[2];

	buf[0] = (uint8_t) (((uint16_t) irq >> 8) & 0x00FF);
 802055a:	88fb      	ldrh	r3, [r7, #6]
 802055c:	0a1b      	lsrs	r3, r3, #8
 802055e:	b29b      	uxth	r3, r3
 8020560:	b2db      	uxtb	r3, r3
 8020562:	733b      	strb	r3, [r7, #12]
	buf[1] = (uint8_t) ((uint16_t) irq & 0x00FF);
 8020564:	88fb      	ldrh	r3, [r7, #6]
 8020566:	b2db      	uxtb	r3, r3
 8020568:	737b      	strb	r3, [r7, #13]
	SX126xWriteCommand(RADIO_CLR_IRQSTATUS, buf, 2);
 802056a:	f107 030c 	add.w	r3, r7, #12
 802056e:	2202      	movs	r2, #2
 8020570:	4619      	mov	r1, r3
 8020572:	2002      	movs	r0, #2
 8020574:	f000 f880 	bl	8020678 <SX126xWriteCommand>
}
 8020578:	bf00      	nop
 802057a:	3710      	adds	r7, #16
 802057c:	46bd      	mov	sp, r7
 802057e:	bd80      	pop	{r7, pc}

08020580 <SX126xIoInit>:
#include "LoRaWAN/port.h"


bool dio3IsOutput = false;

void SX126xIoInit(void){
 8020580:	b580      	push	{r7, lr}
 8020582:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 8020584:	4b03      	ldr	r3, [pc, #12]	@ (8020594 <SX126xIoInit+0x14>)
 8020586:	2200      	movs	r2, #0
 8020588:	701a      	strb	r2, [r3, #0]

	SX126xReset();
 802058a:	f000 f805 	bl	8020598 <SX126xReset>
}
 802058e:	bf00      	nop
 8020590:	bd80      	pop	{r7, pc}
 8020592:	bf00      	nop
 8020594:	20007fdd 	.word	0x20007fdd

08020598 <SX126xReset>:

void SX126xIoDeInit(void){
	dio3IsOutput = false;
}

void SX126xReset(void){
 8020598:	b580      	push	{r7, lr}
 802059a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 802059c:	2200      	movs	r2, #0
 802059e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80205a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80205a6:	f7e1 ffc9 	bl	800253c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80205aa:	200a      	movs	r0, #10
 80205ac:	f7e1 fc28 	bl	8001e00 <HAL_Delay>
	HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80205b0:	2201      	movs	r2, #1
 80205b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80205b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80205ba:	f7e1 ffbf 	bl	800253c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80205be:	2014      	movs	r0, #20
 80205c0:	f7e1 fc1e 	bl	8001e00 <HAL_Delay>
	dio3IsOutput = false;
 80205c4:	4b02      	ldr	r3, [pc, #8]	@ (80205d0 <SX126xReset+0x38>)
 80205c6:	2200      	movs	r2, #0
 80205c8:	701a      	strb	r2, [r3, #0]
}
 80205ca:	bf00      	nop
 80205cc:	bd80      	pop	{r7, pc}
 80205ce:	bf00      	nop
 80205d0:	20007fdd 	.word	0x20007fdd

080205d4 <SX126xWaitOnBusy>:

void SX126xWaitOnBusy(void){
 80205d4:	b580      	push	{r7, lr}
 80205d6:	b082      	sub	sp, #8
 80205d8:	af00      	add	r7, sp, #0
	int timeout = 1000;
 80205da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80205de:	607b      	str	r3, [r7, #4]
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 80205e0:	e011      	b.n	8020606 <SX126xWaitOnBusy+0x32>
		for(int i=0; i<12000; i++)__NOP();
 80205e2:	2300      	movs	r3, #0
 80205e4:	603b      	str	r3, [r7, #0]
 80205e6:	e003      	b.n	80205f0 <SX126xWaitOnBusy+0x1c>
 80205e8:	bf00      	nop
 80205ea:	683b      	ldr	r3, [r7, #0]
 80205ec:	3301      	adds	r3, #1
 80205ee:	603b      	str	r3, [r7, #0]
 80205f0:	683b      	ldr	r3, [r7, #0]
 80205f2:	f642 62df 	movw	r2, #11999	@ 0x2edf
 80205f6:	4293      	cmp	r3, r2
 80205f8:	ddf6      	ble.n	80205e8 <SX126xWaitOnBusy+0x14>
		timeout -= 1;
 80205fa:	687b      	ldr	r3, [r7, #4]
 80205fc:	3b01      	subs	r3, #1
 80205fe:	607b      	str	r3, [r7, #4]
		if (timeout < 0){
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	2b00      	cmp	r3, #0
 8020604:	db09      	blt.n	802061a <SX126xWaitOnBusy+0x46>
	while (HAL_GPIO_ReadPin(LORA_BUSY_GPIO_Port, LORA_BUSY_Pin) == GPIO_PIN_SET){
 8020606:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802060a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 802060e:	f7e1 ff75 	bl	80024fc <HAL_GPIO_ReadPin>
 8020612:	4603      	mov	r3, r0
 8020614:	2b01      	cmp	r3, #1
 8020616:	d0e4      	beq.n	80205e2 <SX126xWaitOnBusy+0xe>
 8020618:	e000      	b.n	802061c <SX126xWaitOnBusy+0x48>
			return;
 802061a:	bf00      	nop
		}
	}
}
 802061c:	3708      	adds	r7, #8
 802061e:	46bd      	mov	sp, r7
 8020620:	bd80      	pop	{r7, pc}
	...

08020624 <SX126xWakeup>:

void SX126xWakeup(void){
 8020624:	b580      	push	{r7, lr}
 8020626:	b082      	sub	sp, #8
 8020628:	af00      	add	r7, sp, #0
	dio3IsOutput = false;
 802062a:	4b11      	ldr	r3, [pc, #68]	@ (8020670 <SX126xWakeup+0x4c>)
 802062c:	2200      	movs	r2, #0
 802062e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8020630:	b672      	cpsid	i
}
 8020632:	bf00      	nop
	__disable_irq();

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8020634:	2200      	movs	r2, #0
 8020636:	2110      	movs	r1, #16
 8020638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 802063c:	f7e1 ff7e 	bl	800253c <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_GET_STATUS, 0x00};
 8020640:	23c0      	movs	r3, #192	@ 0xc0
 8020642:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8020644:	1d39      	adds	r1, r7, #4
 8020646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802064a:	2202      	movs	r2, #2
 802064c:	4809      	ldr	r0, [pc, #36]	@ (8020674 <SX126xWakeup+0x50>)
 802064e:	f7e4 fced 	bl	800502c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8020652:	2201      	movs	r2, #1
 8020654:	2110      	movs	r1, #16
 8020656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 802065a:	f7e1 ff6f 	bl	800253c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 802065e:	f7ff ffb9 	bl	80205d4 <SX126xWaitOnBusy>
  __ASM volatile ("cpsie i" : : : "memory");
 8020662:	b662      	cpsie	i
}
 8020664:	bf00      	nop
	__enable_irq();
}
 8020666:	bf00      	nop
 8020668:	3708      	adds	r7, #8
 802066a:	46bd      	mov	sp, r7
 802066c:	bd80      	pop	{r7, pc}
 802066e:	bf00      	nop
 8020670:	20007fdd 	.word	0x20007fdd
 8020674:	20000680 	.word	0x20000680

08020678 <SX126xWriteCommand>:

void SX126xWriteCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 8020678:	b580      	push	{r7, lr}
 802067a:	b082      	sub	sp, #8
 802067c:	af00      	add	r7, sp, #0
 802067e:	4603      	mov	r3, r0
 8020680:	6039      	str	r1, [r7, #0]
 8020682:	71fb      	strb	r3, [r7, #7]
 8020684:	4613      	mov	r3, r2
 8020686:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 8020688:	f7ff f9d8 	bl	801fa3c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 802068c:	2200      	movs	r2, #0
 802068e:	2110      	movs	r1, #16
 8020690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020694:	f7e1 ff52 	bl	800253c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, (uint8_t *)&command, 1, 1000);
 8020698:	1df9      	adds	r1, r7, #7
 802069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802069e:	2201      	movs	r2, #1
 80206a0:	480c      	ldr	r0, [pc, #48]	@ (80206d4 <SX126xWriteCommand+0x5c>)
 80206a2:	f7e4 fcc3 	bl	800502c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 80206a6:	88ba      	ldrh	r2, [r7, #4]
 80206a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80206ac:	6839      	ldr	r1, [r7, #0]
 80206ae:	4809      	ldr	r0, [pc, #36]	@ (80206d4 <SX126xWriteCommand+0x5c>)
 80206b0:	f7e4 fcbc 	bl	800502c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80206b4:	2201      	movs	r2, #1
 80206b6:	2110      	movs	r1, #16
 80206b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80206bc:	f7e1 ff3e 	bl	800253c <HAL_GPIO_WritePin>

	if (command != RADIO_SET_SLEEP)
 80206c0:	79fb      	ldrb	r3, [r7, #7]
 80206c2:	2b84      	cmp	r3, #132	@ 0x84
 80206c4:	d001      	beq.n	80206ca <SX126xWriteCommand+0x52>
		SX126xWaitOnBusy();
 80206c6:	f7ff ff85 	bl	80205d4 <SX126xWaitOnBusy>
}
 80206ca:	bf00      	nop
 80206cc:	3708      	adds	r7, #8
 80206ce:	46bd      	mov	sp, r7
 80206d0:	bd80      	pop	{r7, pc}
 80206d2:	bf00      	nop
 80206d4:	20000680 	.word	0x20000680

080206d8 <SX126xReadCommand>:

void SX126xReadCommand(RadioCommands_t command, uint8_t *buffer, uint16_t size){
 80206d8:	b580      	push	{r7, lr}
 80206da:	b084      	sub	sp, #16
 80206dc:	af00      	add	r7, sp, #0
 80206de:	4603      	mov	r3, r0
 80206e0:	6039      	str	r1, [r7, #0]
 80206e2:	71fb      	strb	r3, [r7, #7]
 80206e4:	4613      	mov	r3, r2
 80206e6:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 80206e8:	f7ff f9a8 	bl	801fa3c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80206ec:	2200      	movs	r2, #0
 80206ee:	2110      	movs	r1, #16
 80206f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80206f4:	f7e1 ff22 	bl	800253c <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)command, 0x00};
 80206f8:	79fb      	ldrb	r3, [r7, #7]
 80206fa:	733b      	strb	r3, [r7, #12]
 80206fc:	2300      	movs	r3, #0
 80206fe:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8020700:	f107 010c 	add.w	r1, r7, #12
 8020704:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020708:	2202      	movs	r2, #2
 802070a:	480b      	ldr	r0, [pc, #44]	@ (8020738 <SX126xReadCommand+0x60>)
 802070c:	f7e4 fc8e 	bl	800502c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 8020710:	88ba      	ldrh	r2, [r7, #4]
 8020712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020716:	6839      	ldr	r1, [r7, #0]
 8020718:	4807      	ldr	r0, [pc, #28]	@ (8020738 <SX126xReadCommand+0x60>)
 802071a:	f7e4 fe0d 	bl	8005338 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 802071e:	2201      	movs	r2, #1
 8020720:	2110      	movs	r1, #16
 8020722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020726:	f7e1 ff09 	bl	800253c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 802072a:	f7ff ff53 	bl	80205d4 <SX126xWaitOnBusy>
}
 802072e:	bf00      	nop
 8020730:	3710      	adds	r7, #16
 8020732:	46bd      	mov	sp, r7
 8020734:	bd80      	pop	{r7, pc}
 8020736:	bf00      	nop
 8020738:	20000680 	.word	0x20000680

0802073c <SX126xWriteRegisters>:

void SX126xWriteRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 802073c:	b580      	push	{r7, lr}
 802073e:	b084      	sub	sp, #16
 8020740:	af00      	add	r7, sp, #0
 8020742:	4603      	mov	r3, r0
 8020744:	6039      	str	r1, [r7, #0]
 8020746:	80fb      	strh	r3, [r7, #6]
 8020748:	4613      	mov	r3, r2
 802074a:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 802074c:	f7ff f976 	bl	801fa3c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 8020750:	2200      	movs	r2, #0
 8020752:	2110      	movs	r1, #16
 8020754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020758:	f7e1 fef0 	bl	800253c <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_WRITE_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF)};
 802075c:	230d      	movs	r3, #13
 802075e:	733b      	strb	r3, [r7, #12]
 8020760:	88fb      	ldrh	r3, [r7, #6]
 8020762:	0a1b      	lsrs	r3, r3, #8
 8020764:	b29b      	uxth	r3, r3
 8020766:	b2db      	uxtb	r3, r3
 8020768:	737b      	strb	r3, [r7, #13]
 802076a:	88fb      	ldrh	r3, [r7, #6]
 802076c:	b2db      	uxtb	r3, r3
 802076e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 3, 1000);
 8020770:	f107 010c 	add.w	r1, r7, #12
 8020774:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020778:	2203      	movs	r2, #3
 802077a:	480b      	ldr	r0, [pc, #44]	@ (80207a8 <SX126xWriteRegisters+0x6c>)
 802077c:	f7e4 fc56 	bl	800502c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 8020780:	88ba      	ldrh	r2, [r7, #4]
 8020782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020786:	6839      	ldr	r1, [r7, #0]
 8020788:	4807      	ldr	r0, [pc, #28]	@ (80207a8 <SX126xWriteRegisters+0x6c>)
 802078a:	f7e4 fc4f 	bl	800502c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 802078e:	2201      	movs	r2, #1
 8020790:	2110      	movs	r1, #16
 8020792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020796:	f7e1 fed1 	bl	800253c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 802079a:	f7ff ff1b 	bl	80205d4 <SX126xWaitOnBusy>
}
 802079e:	bf00      	nop
 80207a0:	3710      	adds	r7, #16
 80207a2:	46bd      	mov	sp, r7
 80207a4:	bd80      	pop	{r7, pc}
 80207a6:	bf00      	nop
 80207a8:	20000680 	.word	0x20000680

080207ac <SX126xWriteRegister>:

void SX126xWriteRegister(uint16_t address, uint8_t value){
 80207ac:	b580      	push	{r7, lr}
 80207ae:	b082      	sub	sp, #8
 80207b0:	af00      	add	r7, sp, #0
 80207b2:	4603      	mov	r3, r0
 80207b4:	460a      	mov	r2, r1
 80207b6:	80fb      	strh	r3, [r7, #6]
 80207b8:	4613      	mov	r3, r2
 80207ba:	717b      	strb	r3, [r7, #5]
	SX126xWriteRegisters(address, &value, 1);
 80207bc:	1d79      	adds	r1, r7, #5
 80207be:	88fb      	ldrh	r3, [r7, #6]
 80207c0:	2201      	movs	r2, #1
 80207c2:	4618      	mov	r0, r3
 80207c4:	f7ff ffba 	bl	802073c <SX126xWriteRegisters>
}
 80207c8:	bf00      	nop
 80207ca:	3708      	adds	r7, #8
 80207cc:	46bd      	mov	sp, r7
 80207ce:	bd80      	pop	{r7, pc}

080207d0 <SX126xReadRegisters>:

void SX126xReadRegisters(uint16_t address, uint8_t *buffer, uint16_t size){
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b084      	sub	sp, #16
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	4603      	mov	r3, r0
 80207d8:	6039      	str	r1, [r7, #0]
 80207da:	80fb      	strh	r3, [r7, #6]
 80207dc:	4613      	mov	r3, r2
 80207de:	80bb      	strh	r3, [r7, #4]
	SX126xCheckDeviceReady();
 80207e0:	f7ff f92c 	bl	801fa3c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80207e4:	2200      	movs	r2, #0
 80207e6:	2110      	movs	r1, #16
 80207e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80207ec:	f7e1 fea6 	bl	800253c <HAL_GPIO_WritePin>
	uint8_t buf[4] = {(uint8_t)RADIO_READ_REGISTER, (uint8_t)((address & 0xFF00) >> 8), (uint8_t)(address & 0x00FF), 0x00};
 80207f0:	231d      	movs	r3, #29
 80207f2:	733b      	strb	r3, [r7, #12]
 80207f4:	88fb      	ldrh	r3, [r7, #6]
 80207f6:	0a1b      	lsrs	r3, r3, #8
 80207f8:	b29b      	uxth	r3, r3
 80207fa:	b2db      	uxtb	r3, r3
 80207fc:	737b      	strb	r3, [r7, #13]
 80207fe:	88fb      	ldrh	r3, [r7, #6]
 8020800:	b2db      	uxtb	r3, r3
 8020802:	73bb      	strb	r3, [r7, #14]
 8020804:	2300      	movs	r3, #0
 8020806:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 4, 1000);
 8020808:	f107 010c 	add.w	r1, r7, #12
 802080c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020810:	2204      	movs	r2, #4
 8020812:	480b      	ldr	r0, [pc, #44]	@ (8020840 <SX126xReadRegisters+0x70>)
 8020814:	f7e4 fc0a 	bl	800502c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 8020818:	88ba      	ldrh	r2, [r7, #4]
 802081a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802081e:	6839      	ldr	r1, [r7, #0]
 8020820:	4807      	ldr	r0, [pc, #28]	@ (8020840 <SX126xReadRegisters+0x70>)
 8020822:	f7e4 fd89 	bl	8005338 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 8020826:	2201      	movs	r2, #1
 8020828:	2110      	movs	r1, #16
 802082a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 802082e:	f7e1 fe85 	bl	800253c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8020832:	f7ff fecf 	bl	80205d4 <SX126xWaitOnBusy>
}
 8020836:	bf00      	nop
 8020838:	3710      	adds	r7, #16
 802083a:	46bd      	mov	sp, r7
 802083c:	bd80      	pop	{r7, pc}
 802083e:	bf00      	nop
 8020840:	20000680 	.word	0x20000680

08020844 <SX126xReadRegister>:

uint8_t SX126xReadRegister(uint16_t address){
 8020844:	b580      	push	{r7, lr}
 8020846:	b084      	sub	sp, #16
 8020848:	af00      	add	r7, sp, #0
 802084a:	4603      	mov	r3, r0
 802084c:	80fb      	strh	r3, [r7, #6]
	uint8_t data;
	SX126xReadRegisters(address, &data, 1);
 802084e:	f107 010f 	add.w	r1, r7, #15
 8020852:	88fb      	ldrh	r3, [r7, #6]
 8020854:	2201      	movs	r2, #1
 8020856:	4618      	mov	r0, r3
 8020858:	f7ff ffba 	bl	80207d0 <SX126xReadRegisters>
	return data;
 802085c:	7bfb      	ldrb	r3, [r7, #15]
}
 802085e:	4618      	mov	r0, r3
 8020860:	3710      	adds	r7, #16
 8020862:	46bd      	mov	sp, r7
 8020864:	bd80      	pop	{r7, pc}
	...

08020868 <SX126xWriteBuffer>:

void SX126xWriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 8020868:	b580      	push	{r7, lr}
 802086a:	b084      	sub	sp, #16
 802086c:	af00      	add	r7, sp, #0
 802086e:	4603      	mov	r3, r0
 8020870:	6039      	str	r1, [r7, #0]
 8020872:	71fb      	strb	r3, [r7, #7]
 8020874:	4613      	mov	r3, r2
 8020876:	71bb      	strb	r3, [r7, #6]
	SX126xCheckDeviceReady();
 8020878:	f7ff f8e0 	bl	801fa3c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 802087c:	2200      	movs	r2, #0
 802087e:	2110      	movs	r1, #16
 8020880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020884:	f7e1 fe5a 	bl	800253c <HAL_GPIO_WritePin>
	uint8_t buf[2] = {(uint8_t)RADIO_WRITE_BUFFER, offset};
 8020888:	230e      	movs	r3, #14
 802088a:	733b      	strb	r3, [r7, #12]
 802088c:	79fb      	ldrb	r3, [r7, #7]
 802088e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 8020890:	f107 010c 	add.w	r1, r7, #12
 8020894:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020898:	2202      	movs	r2, #2
 802089a:	480b      	ldr	r0, [pc, #44]	@ (80208c8 <SX126xWriteBuffer+0x60>)
 802089c:	f7e4 fbc6 	bl	800502c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buffer, size, 1000);
 80208a0:	79bb      	ldrb	r3, [r7, #6]
 80208a2:	b29a      	uxth	r2, r3
 80208a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80208a8:	6839      	ldr	r1, [r7, #0]
 80208aa:	4807      	ldr	r0, [pc, #28]	@ (80208c8 <SX126xWriteBuffer+0x60>)
 80208ac:	f7e4 fbbe 	bl	800502c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 80208b0:	2201      	movs	r2, #1
 80208b2:	2110      	movs	r1, #16
 80208b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80208b8:	f7e1 fe40 	bl	800253c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 80208bc:	f7ff fe8a 	bl	80205d4 <SX126xWaitOnBusy>
}
 80208c0:	bf00      	nop
 80208c2:	3710      	adds	r7, #16
 80208c4:	46bd      	mov	sp, r7
 80208c6:	bd80      	pop	{r7, pc}
 80208c8:	20000680 	.word	0x20000680

080208cc <SX126xReadBuffer>:

void SX126xReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size){
 80208cc:	b580      	push	{r7, lr}
 80208ce:	b084      	sub	sp, #16
 80208d0:	af00      	add	r7, sp, #0
 80208d2:	4603      	mov	r3, r0
 80208d4:	6039      	str	r1, [r7, #0]
 80208d6:	71fb      	strb	r3, [r7, #7]
 80208d8:	4613      	mov	r3, r2
 80208da:	71bb      	strb	r3, [r7, #6]
	SX126xCheckDeviceReady();
 80208dc:	f7ff f8ae 	bl	801fa3c <SX126xCheckDeviceReady>

	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_RESET);
 80208e0:	2200      	movs	r2, #0
 80208e2:	2110      	movs	r1, #16
 80208e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80208e8:	f7e1 fe28 	bl	800253c <HAL_GPIO_WritePin>
	uint8_t buf[3] = {(uint8_t)RADIO_READ_BUFFER, offset, 0x00};
 80208ec:	231e      	movs	r3, #30
 80208ee:	733b      	strb	r3, [r7, #12]
 80208f0:	79fb      	ldrb	r3, [r7, #7]
 80208f2:	737b      	strb	r3, [r7, #13]
 80208f4:	2300      	movs	r3, #0
 80208f6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&RADIO_PHY_HSPI, buf, 2, 1000);
 80208f8:	f107 010c 	add.w	r1, r7, #12
 80208fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020900:	2202      	movs	r2, #2
 8020902:	4810      	ldr	r0, [pc, #64]	@ (8020944 <SX126xReadBuffer+0x78>)
 8020904:	f7e4 fb92 	bl	800502c <HAL_SPI_Transmit>
	uint8_t dummy = 0;
 8020908:	2300      	movs	r3, #0
 802090a:	72fb      	strb	r3, [r7, #11]
	HAL_SPI_Receive(&RADIO_PHY_HSPI, &dummy, 1, 1000);
 802090c:	f107 010b 	add.w	r1, r7, #11
 8020910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020914:	2201      	movs	r2, #1
 8020916:	480b      	ldr	r0, [pc, #44]	@ (8020944 <SX126xReadBuffer+0x78>)
 8020918:	f7e4 fd0e 	bl	8005338 <HAL_SPI_Receive>
	HAL_SPI_Receive(&RADIO_PHY_HSPI, buffer, size, 1000);
 802091c:	79bb      	ldrb	r3, [r7, #6]
 802091e:	b29a      	uxth	r2, r3
 8020920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020924:	6839      	ldr	r1, [r7, #0]
 8020926:	4807      	ldr	r0, [pc, #28]	@ (8020944 <SX126xReadBuffer+0x78>)
 8020928:	f7e4 fd06 	bl	8005338 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_CS_GPIO_Port, LORA_CS_Pin, GPIO_PIN_SET);
 802092c:	2201      	movs	r2, #1
 802092e:	2110      	movs	r1, #16
 8020930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8020934:	f7e1 fe02 	bl	800253c <HAL_GPIO_WritePin>

	SX126xWaitOnBusy();
 8020938:	f7ff fe4c 	bl	80205d4 <SX126xWaitOnBusy>
}
 802093c:	bf00      	nop
 802093e:	3710      	adds	r7, #16
 8020940:	46bd      	mov	sp, r7
 8020942:	bd80      	pop	{r7, pc}
 8020944:	20000680 	.word	0x20000680

08020948 <SX126xSetRfTxPower>:

void SX126xSetRfTxPower(int8_t power){
 8020948:	b580      	push	{r7, lr}
 802094a:	b082      	sub	sp, #8
 802094c:	af00      	add	r7, sp, #0
 802094e:	4603      	mov	r3, r0
 8020950:	71fb      	strb	r3, [r7, #7]
	SX126xSetTxParams(power, RADIO_RAMP_40_US);
 8020952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020956:	2102      	movs	r1, #2
 8020958:	4618      	mov	r0, r3
 802095a:	f7ff fb8b 	bl	8020074 <SX126xSetTxParams>
}
 802095e:	bf00      	nop
 8020960:	3708      	adds	r7, #8
 8020962:	46bd      	mov	sp, r7
 8020964:	bd80      	pop	{r7, pc}

08020966 <SX126xGetPaSelect>:

uint8_t SX126xGetPaSelect(uint32_t channel){
 8020966:	b480      	push	{r7}
 8020968:	b083      	sub	sp, #12
 802096a:	af00      	add	r7, sp, #0
 802096c:	6078      	str	r0, [r7, #4]
	return SX1262;
 802096e:	2302      	movs	r3, #2
}
 8020970:	4618      	mov	r0, r3
 8020972:	370c      	adds	r7, #12
 8020974:	46bd      	mov	sp, r7
 8020976:	f85d 7b04 	ldr.w	r7, [sp], #4
 802097a:	4770      	bx	lr

0802097c <SX126xAntSwOn>:
		SPI_LORA.endTransaction();
		digitalWrite(_hwConfig.PIN_LORA_NSS, HIGH);
	}
}
*/
void SX126xAntSwOn(void){
 802097c:	b480      	push	{r7}
 802097e:	af00      	add	r7, sp, #0
}
 8020980:	bf00      	nop
 8020982:	46bd      	mov	sp, r7
 8020984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020988:	4770      	bx	lr

0802098a <SX126xAntSwOff>:

void SX126xAntSwOff(void){
 802098a:	b480      	push	{r7}
 802098c:	af00      	add	r7, sp, #0
}
 802098e:	bf00      	nop
 8020990:	46bd      	mov	sp, r7
 8020992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020996:	4770      	bx	lr

08020998 <SX126xRXena>:

void SX126xRXena(void){
 8020998:	b480      	push	{r7}
 802099a:	af00      	add	r7, sp, #0
}
 802099c:	bf00      	nop
 802099e:	46bd      	mov	sp, r7
 80209a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209a4:	4770      	bx	lr

080209a6 <SX126xTXena>:

void SX126xTXena(void){
 80209a6:	b480      	push	{r7}
 80209a8:	af00      	add	r7, sp, #0
}
 80209aa:	bf00      	nop
 80209ac:	46bd      	mov	sp, r7
 80209ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209b2:	4770      	bx	lr

080209b4 <BoardGetRandomSeed>:
 *      Author: anh
 */

#include "port.h"

uint32_t BoardGetRandomSeed(void){
 80209b4:	b480      	push	{r7}
 80209b6:	af00      	add	r7, sp, #0
	// return random(255);
	return 128;
 80209b8:	2380      	movs	r3, #128	@ 0x80
}
 80209ba:	4618      	mov	r0, r3
 80209bc:	46bd      	mov	sp, r7
 80209be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209c2:	4770      	bx	lr

080209c4 <BoardGetUniqueId>:

void BoardGetUniqueId(uint8_t *id) {
 80209c4:	b480      	push	{r7}
 80209c6:	b08b      	sub	sp, #44	@ 0x2c
 80209c8:	af00      	add	r7, sp, #0
 80209ca:	6078      	str	r0, [r7, #4]
	uint8_t name[32] = {0};
 80209cc:	2300      	movs	r3, #0
 80209ce:	60bb      	str	r3, [r7, #8]
 80209d0:	f107 030c 	add.w	r3, r7, #12
 80209d4:	2200      	movs	r2, #0
 80209d6:	601a      	str	r2, [r3, #0]
 80209d8:	605a      	str	r2, [r3, #4]
 80209da:	609a      	str	r2, [r3, #8]
 80209dc:	60da      	str	r2, [r3, #12]
 80209de:	611a      	str	r2, [r3, #16]
 80209e0:	615a      	str	r2, [r3, #20]
 80209e2:	619a      	str	r2, [r3, #24]

	id[7] = name[7] + name[15] + name[23] + name[31];
 80209e4:	7bfa      	ldrb	r2, [r7, #15]
 80209e6:	7dfb      	ldrb	r3, [r7, #23]
 80209e8:	4413      	add	r3, r2
 80209ea:	b2da      	uxtb	r2, r3
 80209ec:	7ffb      	ldrb	r3, [r7, #31]
 80209ee:	4413      	add	r3, r2
 80209f0:	b2d9      	uxtb	r1, r3
 80209f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	3307      	adds	r3, #7
 80209fa:	440a      	add	r2, r1
 80209fc:	b2d2      	uxtb	r2, r2
 80209fe:	701a      	strb	r2, [r3, #0]
	id[6] = name[6] + name[14] + name[22] + name[30];
 8020a00:	7bba      	ldrb	r2, [r7, #14]
 8020a02:	7dbb      	ldrb	r3, [r7, #22]
 8020a04:	4413      	add	r3, r2
 8020a06:	b2da      	uxtb	r2, r3
 8020a08:	7fbb      	ldrb	r3, [r7, #30]
 8020a0a:	4413      	add	r3, r2
 8020a0c:	b2d9      	uxtb	r1, r3
 8020a0e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8020a12:	687b      	ldr	r3, [r7, #4]
 8020a14:	3306      	adds	r3, #6
 8020a16:	440a      	add	r2, r1
 8020a18:	b2d2      	uxtb	r2, r2
 8020a1a:	701a      	strb	r2, [r3, #0]
	id[5] = name[5] + name[13] + name[21] + name[29];
 8020a1c:	7b7a      	ldrb	r2, [r7, #13]
 8020a1e:	7d7b      	ldrb	r3, [r7, #21]
 8020a20:	4413      	add	r3, r2
 8020a22:	b2da      	uxtb	r2, r3
 8020a24:	7f7b      	ldrb	r3, [r7, #29]
 8020a26:	4413      	add	r3, r2
 8020a28:	b2d9      	uxtb	r1, r3
 8020a2a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8020a2e:	687b      	ldr	r3, [r7, #4]
 8020a30:	3305      	adds	r3, #5
 8020a32:	440a      	add	r2, r1
 8020a34:	b2d2      	uxtb	r2, r2
 8020a36:	701a      	strb	r2, [r3, #0]
	id[4] = name[4] + name[12] + name[20] + name[28];
 8020a38:	7b3a      	ldrb	r2, [r7, #12]
 8020a3a:	7d3b      	ldrb	r3, [r7, #20]
 8020a3c:	4413      	add	r3, r2
 8020a3e:	b2da      	uxtb	r2, r3
 8020a40:	7f3b      	ldrb	r3, [r7, #28]
 8020a42:	4413      	add	r3, r2
 8020a44:	b2d9      	uxtb	r1, r3
 8020a46:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	3304      	adds	r3, #4
 8020a4e:	440a      	add	r2, r1
 8020a50:	b2d2      	uxtb	r2, r2
 8020a52:	701a      	strb	r2, [r3, #0]
	id[3] = name[3] + name[11] + name[19] + name[27];
 8020a54:	7afa      	ldrb	r2, [r7, #11]
 8020a56:	7cfb      	ldrb	r3, [r7, #19]
 8020a58:	4413      	add	r3, r2
 8020a5a:	b2da      	uxtb	r2, r3
 8020a5c:	7efb      	ldrb	r3, [r7, #27]
 8020a5e:	4413      	add	r3, r2
 8020a60:	b2d9      	uxtb	r1, r3
 8020a62:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	3303      	adds	r3, #3
 8020a6a:	440a      	add	r2, r1
 8020a6c:	b2d2      	uxtb	r2, r2
 8020a6e:	701a      	strb	r2, [r3, #0]
	id[2] = name[2] + name[10] + name[18] + name[26];
 8020a70:	7aba      	ldrb	r2, [r7, #10]
 8020a72:	7cbb      	ldrb	r3, [r7, #18]
 8020a74:	4413      	add	r3, r2
 8020a76:	b2da      	uxtb	r2, r3
 8020a78:	7ebb      	ldrb	r3, [r7, #26]
 8020a7a:	4413      	add	r3, r2
 8020a7c:	b2d9      	uxtb	r1, r3
 8020a7e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	3302      	adds	r3, #2
 8020a86:	440a      	add	r2, r1
 8020a88:	b2d2      	uxtb	r2, r2
 8020a8a:	701a      	strb	r2, [r3, #0]
	id[1] = name[1] + name[9] + name[17] + name[25];
 8020a8c:	7a7a      	ldrb	r2, [r7, #9]
 8020a8e:	7c7b      	ldrb	r3, [r7, #17]
 8020a90:	4413      	add	r3, r2
 8020a92:	b2da      	uxtb	r2, r3
 8020a94:	7e7b      	ldrb	r3, [r7, #25]
 8020a96:	4413      	add	r3, r2
 8020a98:	b2d9      	uxtb	r1, r3
 8020a9a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	3301      	adds	r3, #1
 8020aa2:	440a      	add	r2, r1
 8020aa4:	b2d2      	uxtb	r2, r2
 8020aa6:	701a      	strb	r2, [r3, #0]
	id[0] = name[0] + name[8] + name[16] + name[24];
 8020aa8:	7a3a      	ldrb	r2, [r7, #8]
 8020aaa:	7c3b      	ldrb	r3, [r7, #16]
 8020aac:	4413      	add	r3, r2
 8020aae:	b2da      	uxtb	r2, r3
 8020ab0:	7e3b      	ldrb	r3, [r7, #24]
 8020ab2:	4413      	add	r3, r2
 8020ab4:	b2da      	uxtb	r2, r3
 8020ab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020aba:	4413      	add	r3, r2
 8020abc:	b2da      	uxtb	r2, r3
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	701a      	strb	r2, [r3, #0]
}
 8020ac2:	bf00      	nop
 8020ac4:	372c      	adds	r7, #44	@ 0x2c
 8020ac6:	46bd      	mov	sp, r7
 8020ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020acc:	4770      	bx	lr

08020ace <BoardGetBatteryLevel>:

uint8_t BoardGetBatteryLevel(void) {
 8020ace:	b480      	push	{r7}
 8020ad0:	b083      	sub	sp, #12
 8020ad2:	af00      	add	r7, sp, #0
	uint8_t batteryLevel = 50;
 8020ad4:	2332      	movs	r3, #50	@ 0x32
 8020ad6:	71fb      	strb	r3, [r7, #7]

	return batteryLevel;
 8020ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8020ada:	4618      	mov	r0, r3
 8020adc:	370c      	adds	r7, #12
 8020ade:	46bd      	mov	sp, r7
 8020ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ae4:	4770      	bx	lr

08020ae6 <BoardDisableIrq>:

void BoardDisableIrq(void) {
 8020ae6:	b480      	push	{r7}
 8020ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8020aea:	b672      	cpsid	i
}
 8020aec:	bf00      	nop
	__disable_irq();

}
 8020aee:	bf00      	nop
 8020af0:	46bd      	mov	sp, r7
 8020af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020af6:	4770      	bx	lr

08020af8 <BoardEnableIrq>:

void BoardEnableIrq(void) {
 8020af8:	b480      	push	{r7}
 8020afa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8020afc:	b662      	cpsie	i
}
 8020afe:	bf00      	nop
	__enable_irq();
}
 8020b00:	bf00      	nop
 8020b02:	46bd      	mov	sp, r7
 8020b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b08:	4770      	bx	lr
	...

08020b0c <rand1>:
// Standard random functions redefinition start
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1(void) {
 8020b0c:	b480      	push	{r7}
 8020b0e:	af00      	add	r7, sp, #0
	return ((next = next * 1103515245L + 12345L) % RAND_LOCAL_MAX);
 8020b10:	4b0e      	ldr	r3, [pc, #56]	@ (8020b4c <rand1+0x40>)
 8020b12:	681b      	ldr	r3, [r3, #0]
 8020b14:	4a0e      	ldr	r2, [pc, #56]	@ (8020b50 <rand1+0x44>)
 8020b16:	fb02 f303 	mul.w	r3, r2, r3
 8020b1a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8020b1e:	3339      	adds	r3, #57	@ 0x39
 8020b20:	4a0a      	ldr	r2, [pc, #40]	@ (8020b4c <rand1+0x40>)
 8020b22:	6013      	str	r3, [r2, #0]
 8020b24:	4b09      	ldr	r3, [pc, #36]	@ (8020b4c <rand1+0x40>)
 8020b26:	681a      	ldr	r2, [r3, #0]
 8020b28:	2303      	movs	r3, #3
 8020b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8020b2e:	1ad1      	subs	r1, r2, r3
 8020b30:	0849      	lsrs	r1, r1, #1
 8020b32:	440b      	add	r3, r1
 8020b34:	0f99      	lsrs	r1, r3, #30
 8020b36:	460b      	mov	r3, r1
 8020b38:	07db      	lsls	r3, r3, #31
 8020b3a:	1a5b      	subs	r3, r3, r1
 8020b3c:	1ad1      	subs	r1, r2, r3
 8020b3e:	460b      	mov	r3, r1
}
 8020b40:	4618      	mov	r0, r3
 8020b42:	46bd      	mov	sp, r7
 8020b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b48:	4770      	bx	lr
 8020b4a:	bf00      	nop
 8020b4c:	20000330 	.word	0x20000330
 8020b50:	41c64e6d 	.word	0x41c64e6d

08020b54 <srand1>:

void srand1(uint32_t seed) {
 8020b54:	b480      	push	{r7}
 8020b56:	b083      	sub	sp, #12
 8020b58:	af00      	add	r7, sp, #0
 8020b5a:	6078      	str	r0, [r7, #4]
	next = seed;
 8020b5c:	4a04      	ldr	r2, [pc, #16]	@ (8020b70 <srand1+0x1c>)
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	6013      	str	r3, [r2, #0]
}
 8020b62:	bf00      	nop
 8020b64:	370c      	adds	r7, #12
 8020b66:	46bd      	mov	sp, r7
 8020b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b6c:	4770      	bx	lr
 8020b6e:	bf00      	nop
 8020b70:	20000330 	.word	0x20000330

08020b74 <randr>:
// Standard random functions redefinition end

int32_t randr(int32_t min, int32_t max) {
 8020b74:	b580      	push	{r7, lr}
 8020b76:	b082      	sub	sp, #8
 8020b78:	af00      	add	r7, sp, #0
 8020b7a:	6078      	str	r0, [r7, #4]
 8020b7c:	6039      	str	r1, [r7, #0]
	return (int32_t) rand1() % (max - min + 1) + min;
 8020b7e:	f7ff ffc5 	bl	8020b0c <rand1>
 8020b82:	4602      	mov	r2, r0
 8020b84:	6839      	ldr	r1, [r7, #0]
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	1acb      	subs	r3, r1, r3
 8020b8a:	3301      	adds	r3, #1
 8020b8c:	fb92 f1f3 	sdiv	r1, r2, r3
 8020b90:	fb01 f303 	mul.w	r3, r1, r3
 8020b94:	1ad2      	subs	r2, r2, r3
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	4413      	add	r3, r2
}
 8020b9a:	4618      	mov	r0, r3
 8020b9c:	3708      	adds	r7, #8
 8020b9e:	46bd      	mov	sp, r7
 8020ba0:	bd80      	pop	{r7, pc}

08020ba2 <memcpy1>:

void memcpy1(uint8_t *dst, const uint8_t *src, uint16_t size) {
 8020ba2:	b480      	push	{r7}
 8020ba4:	b085      	sub	sp, #20
 8020ba6:	af00      	add	r7, sp, #0
 8020ba8:	60f8      	str	r0, [r7, #12]
 8020baa:	60b9      	str	r1, [r7, #8]
 8020bac:	4613      	mov	r3, r2
 8020bae:	80fb      	strh	r3, [r7, #6]
	while (size--) {
 8020bb0:	e007      	b.n	8020bc2 <memcpy1+0x20>
		*dst++ = *src++;
 8020bb2:	68ba      	ldr	r2, [r7, #8]
 8020bb4:	1c53      	adds	r3, r2, #1
 8020bb6:	60bb      	str	r3, [r7, #8]
 8020bb8:	68fb      	ldr	r3, [r7, #12]
 8020bba:	1c59      	adds	r1, r3, #1
 8020bbc:	60f9      	str	r1, [r7, #12]
 8020bbe:	7812      	ldrb	r2, [r2, #0]
 8020bc0:	701a      	strb	r2, [r3, #0]
	while (size--) {
 8020bc2:	88fb      	ldrh	r3, [r7, #6]
 8020bc4:	1e5a      	subs	r2, r3, #1
 8020bc6:	80fa      	strh	r2, [r7, #6]
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d1f2      	bne.n	8020bb2 <memcpy1+0x10>
	}
}
 8020bcc:	bf00      	nop
 8020bce:	bf00      	nop
 8020bd0:	3714      	adds	r7, #20
 8020bd2:	46bd      	mov	sp, r7
 8020bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd8:	4770      	bx	lr

08020bda <memcpyr>:

void memcpyr(uint8_t *dst, const uint8_t *src, uint16_t size) {
 8020bda:	b480      	push	{r7}
 8020bdc:	b085      	sub	sp, #20
 8020bde:	af00      	add	r7, sp, #0
 8020be0:	60f8      	str	r0, [r7, #12]
 8020be2:	60b9      	str	r1, [r7, #8]
 8020be4:	4613      	mov	r3, r2
 8020be6:	80fb      	strh	r3, [r7, #6]
	dst = dst + (size - 1);
 8020be8:	88fb      	ldrh	r3, [r7, #6]
 8020bea:	3b01      	subs	r3, #1
 8020bec:	68fa      	ldr	r2, [r7, #12]
 8020bee:	4413      	add	r3, r2
 8020bf0:	60fb      	str	r3, [r7, #12]
	while (size--) {
 8020bf2:	e007      	b.n	8020c04 <memcpyr+0x2a>
		*dst-- = *src++;
 8020bf4:	68ba      	ldr	r2, [r7, #8]
 8020bf6:	1c53      	adds	r3, r2, #1
 8020bf8:	60bb      	str	r3, [r7, #8]
 8020bfa:	68fb      	ldr	r3, [r7, #12]
 8020bfc:	1e59      	subs	r1, r3, #1
 8020bfe:	60f9      	str	r1, [r7, #12]
 8020c00:	7812      	ldrb	r2, [r2, #0]
 8020c02:	701a      	strb	r2, [r3, #0]
	while (size--) {
 8020c04:	88fb      	ldrh	r3, [r7, #6]
 8020c06:	1e5a      	subs	r2, r3, #1
 8020c08:	80fa      	strh	r2, [r7, #6]
 8020c0a:	2b00      	cmp	r3, #0
 8020c0c:	d1f2      	bne.n	8020bf4 <memcpyr+0x1a>
	}
}
 8020c0e:	bf00      	nop
 8020c10:	bf00      	nop
 8020c12:	3714      	adds	r7, #20
 8020c14:	46bd      	mov	sp, r7
 8020c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c1a:	4770      	bx	lr

08020c1c <memset1>:

void memset1(uint8_t *dst, uint8_t value, uint16_t size) {
 8020c1c:	b480      	push	{r7}
 8020c1e:	b083      	sub	sp, #12
 8020c20:	af00      	add	r7, sp, #0
 8020c22:	6078      	str	r0, [r7, #4]
 8020c24:	460b      	mov	r3, r1
 8020c26:	70fb      	strb	r3, [r7, #3]
 8020c28:	4613      	mov	r3, r2
 8020c2a:	803b      	strh	r3, [r7, #0]
	while (size--) {
 8020c2c:	e004      	b.n	8020c38 <memset1+0x1c>
		*dst++ = value;
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	1c5a      	adds	r2, r3, #1
 8020c32:	607a      	str	r2, [r7, #4]
 8020c34:	78fa      	ldrb	r2, [r7, #3]
 8020c36:	701a      	strb	r2, [r3, #0]
	while (size--) {
 8020c38:	883b      	ldrh	r3, [r7, #0]
 8020c3a:	1e5a      	subs	r2, r3, #1
 8020c3c:	803a      	strh	r2, [r7, #0]
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d1f5      	bne.n	8020c2e <memset1+0x12>
	}
}
 8020c42:	bf00      	nop
 8020c44:	bf00      	nop
 8020c46:	370c      	adds	r7, #12
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c4e:	4770      	bx	lr

08020c50 <log_monitor_init>:
 *
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_monitor_init(void (*PrintString_Function)(char*)){
 8020c50:	b480      	push	{r7}
 8020c52:	b083      	sub	sp, #12
 8020c54:	af00      	add	r7, sp, #0
 8020c56:	6078      	str	r0, [r7, #4]
	plog = PrintString_Function;
 8020c58:	4a04      	ldr	r2, [pc, #16]	@ (8020c6c <log_monitor_init+0x1c>)
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	6013      	str	r3, [r2, #0]
}
 8020c5e:	bf00      	nop
 8020c60:	370c      	adds	r7, #12
 8020c62:	46bd      	mov	sp, r7
 8020c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c68:	4770      	bx	lr
 8020c6a:	bf00      	nop
 8020c6c:	20007fe0 	.word	0x20007fe0

08020c70 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 8020c70:	b40e      	push	{r1, r2, r3}
 8020c72:	b590      	push	{r4, r7, lr}
 8020c74:	b08a      	sub	sp, #40	@ 0x28
 8020c76:	af04      	add	r7, sp, #16
 8020c78:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8020c7a:	f7e1 f8b5 	bl	8001de8 <HAL_GetTick>
 8020c7e:	6178      	str	r0, [r7, #20]
	char *Temp_buffer = NULL;
 8020c80:	2300      	movs	r3, #0
 8020c82:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8020c84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020c88:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8020c8a:	f107 0310 	add.w	r3, r7, #16
 8020c8e:	68fa      	ldr	r2, [r7, #12]
 8020c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020c92:	4618      	mov	r0, r3
 8020c94:	f001 fad0 	bl	8022238 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8020c98:	4b15      	ldr	r3, [pc, #84]	@ (8020cf0 <LOG_INFO+0x80>)
 8020c9a:	781b      	ldrb	r3, [r3, #0]
 8020c9c:	461a      	mov	r2, r3
 8020c9e:	4b15      	ldr	r3, [pc, #84]	@ (8020cf4 <LOG_INFO+0x84>)
 8020ca0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020ca4:	4b14      	ldr	r3, [pc, #80]	@ (8020cf8 <LOG_INFO+0x88>)
 8020ca6:	681c      	ldr	r4, [r3, #0]
 8020ca8:	693b      	ldr	r3, [r7, #16]
 8020caa:	4a14      	ldr	r2, [pc, #80]	@ (8020cfc <LOG_INFO+0x8c>)
 8020cac:	6812      	ldr	r2, [r2, #0]
 8020cae:	f107 0008 	add.w	r0, r7, #8
 8020cb2:	9203      	str	r2, [sp, #12]
 8020cb4:	9302      	str	r3, [sp, #8]
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	9301      	str	r3, [sp, #4]
 8020cba:	697b      	ldr	r3, [r7, #20]
 8020cbc:	9300      	str	r3, [sp, #0]
 8020cbe:	4623      	mov	r3, r4
 8020cc0:	460a      	mov	r2, r1
 8020cc2:	490f      	ldr	r1, [pc, #60]	@ (8020d00 <LOG_INFO+0x90>)
 8020cc4:	f001 fa7c 	bl	80221c0 <asiprintf>
	plog(Output_buffer);
 8020cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8020d04 <LOG_INFO+0x94>)
 8020cca:	681b      	ldr	r3, [r3, #0]
 8020ccc:	68ba      	ldr	r2, [r7, #8]
 8020cce:	4610      	mov	r0, r2
 8020cd0:	4798      	blx	r3

	free(Temp_buffer);
 8020cd2:	693b      	ldr	r3, [r7, #16]
 8020cd4:	4618      	mov	r0, r3
 8020cd6:	f000 fc3f 	bl	8021558 <free>
	free(Output_buffer);
 8020cda:	68bb      	ldr	r3, [r7, #8]
 8020cdc:	4618      	mov	r0, r3
 8020cde:	f000 fc3b 	bl	8021558 <free>
}
 8020ce2:	bf00      	nop
 8020ce4:	3718      	adds	r7, #24
 8020ce6:	46bd      	mov	sp, r7
 8020ce8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8020cec:	b003      	add	sp, #12
 8020cee:	4770      	bx	lr
 8020cf0:	20000334 	.word	0x20000334
 8020cf4:	20000358 	.word	0x20000358
 8020cf8:	20000338 	.word	0x20000338
 8020cfc:	20000354 	.word	0x20000354
 8020d00:	08024dd4 	.word	0x08024dd4
 8020d04:	20007fe0 	.word	0x20007fe0

08020d08 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8020d08:	b40e      	push	{r1, r2, r3}
 8020d0a:	b590      	push	{r4, r7, lr}
 8020d0c:	b08a      	sub	sp, #40	@ 0x28
 8020d0e:	af04      	add	r7, sp, #16
 8020d10:	6078      	str	r0, [r7, #4]
	uint32_t time = HAL_GetTick();
 8020d12:	f7e1 f869 	bl	8001de8 <HAL_GetTick>
 8020d16:	6178      	str	r0, [r7, #20]
	char *Temp_buffer = NULL;
 8020d18:	2300      	movs	r3, #0
 8020d1a:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8020d1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8020d20:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8020d22:	f107 0310 	add.w	r3, r7, #16
 8020d26:	68fa      	ldr	r2, [r7, #12]
 8020d28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020d2a:	4618      	mov	r0, r3
 8020d2c:	f001 fa84 	bl	8022238 <vasiprintf>
	va_end(args);

	char *Output_buffer;
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8020d30:	4b15      	ldr	r3, [pc, #84]	@ (8020d88 <LOG_ERROR+0x80>)
 8020d32:	781b      	ldrb	r3, [r3, #0]
 8020d34:	461a      	mov	r2, r3
 8020d36:	4b15      	ldr	r3, [pc, #84]	@ (8020d8c <LOG_ERROR+0x84>)
 8020d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020d3c:	4b14      	ldr	r3, [pc, #80]	@ (8020d90 <LOG_ERROR+0x88>)
 8020d3e:	689c      	ldr	r4, [r3, #8]
 8020d40:	693b      	ldr	r3, [r7, #16]
 8020d42:	4a14      	ldr	r2, [pc, #80]	@ (8020d94 <LOG_ERROR+0x8c>)
 8020d44:	6812      	ldr	r2, [r2, #0]
 8020d46:	f107 0008 	add.w	r0, r7, #8
 8020d4a:	9203      	str	r2, [sp, #12]
 8020d4c:	9302      	str	r3, [sp, #8]
 8020d4e:	687b      	ldr	r3, [r7, #4]
 8020d50:	9301      	str	r3, [sp, #4]
 8020d52:	697b      	ldr	r3, [r7, #20]
 8020d54:	9300      	str	r3, [sp, #0]
 8020d56:	4623      	mov	r3, r4
 8020d58:	460a      	mov	r2, r1
 8020d5a:	490f      	ldr	r1, [pc, #60]	@ (8020d98 <LOG_ERROR+0x90>)
 8020d5c:	f001 fa30 	bl	80221c0 <asiprintf>
	plog(Output_buffer);
 8020d60:	4b0e      	ldr	r3, [pc, #56]	@ (8020d9c <LOG_ERROR+0x94>)
 8020d62:	681b      	ldr	r3, [r3, #0]
 8020d64:	68ba      	ldr	r2, [r7, #8]
 8020d66:	4610      	mov	r0, r2
 8020d68:	4798      	blx	r3

	free(Temp_buffer);
 8020d6a:	693b      	ldr	r3, [r7, #16]
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f000 fbf3 	bl	8021558 <free>
	free(Output_buffer);
 8020d72:	68bb      	ldr	r3, [r7, #8]
 8020d74:	4618      	mov	r0, r3
 8020d76:	f000 fbef 	bl	8021558 <free>
}
 8020d7a:	bf00      	nop
 8020d7c:	3718      	adds	r7, #24
 8020d7e:	46bd      	mov	sp, r7
 8020d80:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8020d84:	b003      	add	sp, #12
 8020d86:	4770      	bx	lr
 8020d88:	20000335 	.word	0x20000335
 8020d8c:	20000358 	.word	0x20000358
 8020d90:	20000338 	.word	0x20000338
 8020d94:	20000354 	.word	0x20000354
 8020d98:	08024dd4 	.word	0x08024dd4
 8020d9c:	20007fe0 	.word	0x20007fe0

08020da0 <util_timer_init>:
static void timer_insert_head(util_timer_t *utimer);
static void timer_insert(util_timer_t *utimer);
static void timer_set_timeout(util_timer_t *utimer);
static bool timer_exist(util_timer_t *utimer);

util_timer_status_t util_timer_init(void) {
 8020da0:	b480      	push	{r7}
 8020da2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8020da4:	b672      	cpsid	i
}
 8020da6:	bf00      	nop
	__disable_irq();
	headtimer = NULL;
 8020da8:	4b05      	ldr	r3, [pc, #20]	@ (8020dc0 <util_timer_init+0x20>)
 8020daa:	2200      	movs	r2, #0
 8020dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8020dae:	b662      	cpsie	i
}
 8020db0:	bf00      	nop
	__enable_irq();

	return UTIL_TIMER_OK;
 8020db2:	2300      	movs	r3, #0
}
 8020db4:	4618      	mov	r0, r3
 8020db6:	46bd      	mov	sp, r7
 8020db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dbc:	4770      	bx	lr
 8020dbe:	bf00      	nop
 8020dc0:	20007fe4 	.word	0x20007fe4

08020dc4 <util_timer_create>:

util_timer_status_t util_timer_create(util_timer_t *utimer, uint64_t period,
		util_timer_mode_t mode, void (*event_callback)(void*), void *argument) {
 8020dc4:	b480      	push	{r7}
 8020dc6:	b085      	sub	sp, #20
 8020dc8:	af00      	add	r7, sp, #0
 8020dca:	60f8      	str	r0, [r7, #12]
 8020dcc:	e9c7 2300 	strd	r2, r3, [r7]
	if ((utimer != NULL) && (event_callback != NULL)) {
 8020dd0:	68fb      	ldr	r3, [r7, #12]
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d025      	beq.n	8020e22 <util_timer_create+0x5e>
 8020dd6:	69fb      	ldr	r3, [r7, #28]
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d022      	beq.n	8020e22 <util_timer_create+0x5e>
		utimer->timestamp = 0U;
 8020ddc:	68f9      	ldr	r1, [r7, #12]
 8020dde:	f04f 0200 	mov.w	r2, #0
 8020de2:	f04f 0300 	mov.w	r3, #0
 8020de6:	e9c1 2300 	strd	r2, r3, [r1]
		utimer->reload = period;
 8020dea:	68f9      	ldr	r1, [r7, #12]
 8020dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020df0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		utimer->ispending = 0U;
 8020df4:	68fb      	ldr	r3, [r7, #12]
 8020df6:	2200      	movs	r2, #0
 8020df8:	741a      	strb	r2, [r3, #16]
		utimer->isrunning = 0U;
 8020dfa:	68fb      	ldr	r3, [r7, #12]
 8020dfc:	2200      	movs	r2, #0
 8020dfe:	745a      	strb	r2, [r3, #17]
		utimer->isreloadstopped = 0U;
 8020e00:	68fb      	ldr	r3, [r7, #12]
 8020e02:	2200      	movs	r2, #0
 8020e04:	749a      	strb	r2, [r3, #18]
		utimer->event_callback = event_callback;
 8020e06:	68fb      	ldr	r3, [r7, #12]
 8020e08:	69fa      	ldr	r2, [r7, #28]
 8020e0a:	615a      	str	r2, [r3, #20]
		utimer->argument = argument;
 8020e0c:	68fb      	ldr	r3, [r7, #12]
 8020e0e:	6a3a      	ldr	r2, [r7, #32]
 8020e10:	619a      	str	r2, [r3, #24]
		utimer->mode = mode;
 8020e12:	68fb      	ldr	r3, [r7, #12]
 8020e14:	7e3a      	ldrb	r2, [r7, #24]
 8020e16:	74da      	strb	r2, [r3, #19]
		utimer->next = NULL;
 8020e18:	68fb      	ldr	r3, [r7, #12]
 8020e1a:	2200      	movs	r2, #0
 8020e1c:	61da      	str	r2, [r3, #28]
		return UTIL_TIMER_OK;
 8020e1e:	2300      	movs	r3, #0
 8020e20:	e000      	b.n	8020e24 <util_timer_create+0x60>
	}

	return UTIL_TIMER_INVALID_PARAM;
 8020e22:	2301      	movs	r3, #1
}
 8020e24:	4618      	mov	r0, r3
 8020e26:	3714      	adds	r7, #20
 8020e28:	46bd      	mov	sp, r7
 8020e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e2e:	4770      	bx	lr

08020e30 <util_timer_start>:

util_timer_status_t util_timer_start(util_timer_t *utimer) {
 8020e30:	b5b0      	push	{r4, r5, r7, lr}
 8020e32:	b08a      	sub	sp, #40	@ 0x28
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	6078      	str	r0, [r7, #4]
	util_timer_status_t ret = UTIL_TIMER_OK;
 8020e38:	2300      	movs	r3, #0
 8020e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint64_t elapsedTime;
	uint64_t minValue;
	uint64_t ticks;

	if ((utimer != NULL) && (timer_exist(utimer) == false)
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d063      	beq.n	8020f0c <util_timer_start+0xdc>
 8020e44:	6878      	ldr	r0, [r7, #4]
 8020e46:	f000 f9bd 	bl	80211c4 <timer_exist>
 8020e4a:	4603      	mov	r3, r0
 8020e4c:	f083 0301 	eor.w	r3, r3, #1
 8020e50:	b2db      	uxtb	r3, r3
 8020e52:	2b00      	cmp	r3, #0
 8020e54:	d05a      	beq.n	8020f0c <util_timer_start+0xdc>
			&& (utimer->isrunning == 0U)) {
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	7c5b      	ldrb	r3, [r3, #17]
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	d156      	bne.n	8020f0c <util_timer_start+0xdc>
  __ASM volatile ("cpsid i" : : : "memory");
 8020e5e:	b672      	cpsid	i
}
 8020e60:	bf00      	nop
		__disable_irq();
		ticks = utimer->reload;
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8020e68:	e9c7 2306 	strd	r2, r3, [r7, #24]
		minValue = 1;
 8020e6c:	f04f 0201 	mov.w	r2, #1
 8020e70:	f04f 0300 	mov.w	r3, #0
 8020e74:	e9c7 2304 	strd	r2, r3, [r7, #16]

		if (ticks < minValue) {
 8020e78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8020e7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020e80:	4290      	cmp	r0, r2
 8020e82:	eb71 0303 	sbcs.w	r3, r1, r3
 8020e86:	d203      	bcs.n	8020e90 <util_timer_start+0x60>
			ticks = minValue;
 8020e88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8020e8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		}

		utimer->timestamp = ticks;
 8020e90:	6879      	ldr	r1, [r7, #4]
 8020e92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020e96:	e9c1 2300 	strd	r2, r3, [r1]
		utimer->ispending = 0U;
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	2200      	movs	r2, #0
 8020e9e:	741a      	strb	r2, [r3, #16]
		utimer->isrunning = 1U;
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	2201      	movs	r2, #1
 8020ea4:	745a      	strb	r2, [r3, #17]
		utimer->isreloadstopped = 0U;
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	2200      	movs	r2, #0
 8020eaa:	749a      	strb	r2, [r3, #18]
		if (headtimer == NULL) {
 8020eac:	4b1c      	ldr	r3, [pc, #112]	@ (8020f20 <util_timer_start+0xf0>)
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d106      	bne.n	8020ec2 <util_timer_start+0x92>
			UTIL_TimerDriver.SetTimerContext();
 8020eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8020f24 <util_timer_start+0xf4>)
 8020eb6:	689b      	ldr	r3, [r3, #8]
 8020eb8:	4798      	blx	r3
			timer_insert_head(utimer); /* insert a timeout at now+obj->timestamp */
 8020eba:	6878      	ldr	r0, [r7, #4]
 8020ebc:	f000 fa1a 	bl	80212f4 <timer_insert_head>
 8020ec0:	e021      	b.n	8020f06 <util_timer_start+0xd6>
		}
		else {
			elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime();
 8020ec2:	4b18      	ldr	r3, [pc, #96]	@ (8020f24 <util_timer_start+0xf4>)
 8020ec4:	691b      	ldr	r3, [r3, #16]
 8020ec6:	4798      	blx	r3
 8020ec8:	e9c7 0102 	strd	r0, r1, [r7, #8]
			utimer->timestamp += elapsedTime;
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020ed6:	1884      	adds	r4, r0, r2
 8020ed8:	eb41 0503 	adc.w	r5, r1, r3
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	e9c3 4500 	strd	r4, r5, [r3]

			if (utimer->timestamp < headtimer->timestamp)
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8020ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8020f20 <util_timer_start+0xf0>)
 8020eea:	681b      	ldr	r3, [r3, #0]
 8020eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ef0:	4290      	cmp	r0, r2
 8020ef2:	eb71 0303 	sbcs.w	r3, r1, r3
 8020ef6:	d203      	bcs.n	8020f00 <util_timer_start+0xd0>
				timer_insert_head(utimer);
 8020ef8:	6878      	ldr	r0, [r7, #4]
 8020efa:	f000 f9fb 	bl	80212f4 <timer_insert_head>
 8020efe:	e002      	b.n	8020f06 <util_timer_start+0xd6>
			else
				timer_insert(utimer);
 8020f00:	6878      	ldr	r0, [r7, #4]
 8020f02:	f000 f9c3 	bl	802128c <timer_insert>
  __ASM volatile ("cpsie i" : : : "memory");
 8020f06:	b662      	cpsie	i
}
 8020f08:	bf00      	nop
		}
		__enable_irq();
 8020f0a:	e002      	b.n	8020f12 <util_timer_start+0xe2>
	}
	else {
		ret = UTIL_TIMER_INVALID_PARAM;
 8020f0c:	2301      	movs	r3, #1
 8020f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return ret;
 8020f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8020f16:	4618      	mov	r0, r3
 8020f18:	3728      	adds	r7, #40	@ 0x28
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8020f1e:	bf00      	nop
 8020f20:	20007fe4 	.word	0x20007fe4
 8020f24:	08025588 	.word	0x08025588

08020f28 <util_timer_stop>:
	}

	return ret;
}

util_timer_status_t util_timer_stop(util_timer_t *utimer) {
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	b086      	sub	sp, #24
 8020f2c:	af00      	add	r7, sp, #0
 8020f2e:	6078      	str	r0, [r7, #4]
	util_timer_status_t ret = UTIL_TIMER_OK;
 8020f30:	2300      	movs	r3, #0
 8020f32:	75fb      	strb	r3, [r7, #23]

	if (NULL != utimer) {
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	d052      	beq.n	8020fe0 <util_timer_stop+0xb8>
  __ASM volatile ("cpsid i" : : : "memory");
 8020f3a:	b672      	cpsid	i
}
 8020f3c:	bf00      	nop
		__disable_irq();
		util_timer_t *prev = headtimer;
 8020f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	613b      	str	r3, [r7, #16]
		util_timer_t *cur = headtimer;
 8020f44:	4b2a      	ldr	r3, [pc, #168]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f46:	681b      	ldr	r3, [r3, #0]
 8020f48:	60fb      	str	r3, [r7, #12]
		utimer->isreloadstopped = 1U;
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	2201      	movs	r2, #1
 8020f4e:	749a      	strb	r2, [r3, #18]

		if (NULL != headtimer) {
 8020f50:	4b27      	ldr	r3, [pc, #156]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f52:	681b      	ldr	r3, [r3, #0]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d041      	beq.n	8020fdc <util_timer_stop+0xb4>
			utimer->isrunning = 0U;
 8020f58:	687b      	ldr	r3, [r7, #4]
 8020f5a:	2200      	movs	r2, #0
 8020f5c:	745a      	strb	r2, [r3, #17]

			if (headtimer == utimer) {
 8020f5e:	4b24      	ldr	r3, [pc, #144]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f60:	681b      	ldr	r3, [r3, #0]
 8020f62:	687a      	ldr	r2, [r7, #4]
 8020f64:	429a      	cmp	r2, r3
 8020f66:	d134      	bne.n	8020fd2 <util_timer_stop+0xaa>
				headtimer->ispending = 0;
 8020f68:	4b21      	ldr	r3, [pc, #132]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	741a      	strb	r2, [r3, #16]
				if (headtimer->next != NULL) {
 8020f70:	4b1f      	ldr	r3, [pc, #124]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f72:	681b      	ldr	r3, [r3, #0]
 8020f74:	69db      	ldr	r3, [r3, #28]
 8020f76:	2b00      	cmp	r3, #0
 8020f78:	d00a      	beq.n	8020f90 <util_timer_stop+0x68>
					headtimer = headtimer->next;
 8020f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f7c:	681b      	ldr	r3, [r3, #0]
 8020f7e:	69db      	ldr	r3, [r3, #28]
 8020f80:	4a1b      	ldr	r2, [pc, #108]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f82:	6013      	str	r3, [r2, #0]
					timer_set_timeout(headtimer);
 8020f84:	4b1a      	ldr	r3, [pc, #104]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f86:	681b      	ldr	r3, [r3, #0]
 8020f88:	4618      	mov	r0, r3
 8020f8a:	f000 f939 	bl	8021200 <timer_set_timeout>
 8020f8e:	e023      	b.n	8020fd8 <util_timer_stop+0xb0>
				}
				else {
					UTIL_TimerDriver.StopTimerEvt();
 8020f90:	4b18      	ldr	r3, [pc, #96]	@ (8020ff4 <util_timer_stop+0xcc>)
 8020f92:	685b      	ldr	r3, [r3, #4]
 8020f94:	4798      	blx	r3
					headtimer = NULL;
 8020f96:	4b16      	ldr	r3, [pc, #88]	@ (8020ff0 <util_timer_stop+0xc8>)
 8020f98:	2200      	movs	r2, #0
 8020f9a:	601a      	str	r2, [r3, #0]
 8020f9c:	e01c      	b.n	8020fd8 <util_timer_stop+0xb0>
				}
			}
			else {
				while (cur != NULL) {
					if (cur == utimer) {
 8020f9e:	68fa      	ldr	r2, [r7, #12]
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	429a      	cmp	r2, r3
 8020fa4:	d110      	bne.n	8020fc8 <util_timer_stop+0xa0>
						if (cur->next != NULL) {
 8020fa6:	68fb      	ldr	r3, [r7, #12]
 8020fa8:	69db      	ldr	r3, [r3, #28]
 8020faa:	2b00      	cmp	r3, #0
 8020fac:	d006      	beq.n	8020fbc <util_timer_stop+0x94>
							cur = cur->next;
 8020fae:	68fb      	ldr	r3, [r7, #12]
 8020fb0:	69db      	ldr	r3, [r3, #28]
 8020fb2:	60fb      	str	r3, [r7, #12]
							prev->next = cur;
 8020fb4:	693b      	ldr	r3, [r7, #16]
 8020fb6:	68fa      	ldr	r2, [r7, #12]
 8020fb8:	61da      	str	r2, [r3, #28]
						}
						else {
							cur = NULL;
							prev->next = cur;
						}
						break;
 8020fba:	e00d      	b.n	8020fd8 <util_timer_stop+0xb0>
							cur = NULL;
 8020fbc:	2300      	movs	r3, #0
 8020fbe:	60fb      	str	r3, [r7, #12]
							prev->next = cur;
 8020fc0:	693b      	ldr	r3, [r7, #16]
 8020fc2:	68fa      	ldr	r2, [r7, #12]
 8020fc4:	61da      	str	r2, [r3, #28]
						break;
 8020fc6:	e007      	b.n	8020fd8 <util_timer_stop+0xb0>
					}
					else {
						prev = cur;
 8020fc8:	68fb      	ldr	r3, [r7, #12]
 8020fca:	613b      	str	r3, [r7, #16]
						cur = cur->next;
 8020fcc:	68fb      	ldr	r3, [r7, #12]
 8020fce:	69db      	ldr	r3, [r3, #28]
 8020fd0:	60fb      	str	r3, [r7, #12]
				while (cur != NULL) {
 8020fd2:	68fb      	ldr	r3, [r7, #12]
 8020fd4:	2b00      	cmp	r3, #0
 8020fd6:	d1e2      	bne.n	8020f9e <util_timer_stop+0x76>
					}
				}
			}
			ret = UTIL_TIMER_OK;
 8020fd8:	2300      	movs	r3, #0
 8020fda:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8020fdc:	b662      	cpsie	i
}
 8020fde:	e001      	b.n	8020fe4 <util_timer_stop+0xbc>
		}
		__enable_irq();
	}
	else
		ret = UTIL_TIMER_INVALID_PARAM;
 8020fe0:	2301      	movs	r3, #1
 8020fe2:	75fb      	strb	r3, [r7, #23]

	return ret;
 8020fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8020fe6:	4618      	mov	r0, r3
 8020fe8:	3718      	adds	r7, #24
 8020fea:	46bd      	mov	sp, r7
 8020fec:	bd80      	pop	{r7, pc}
 8020fee:	bf00      	nop
 8020ff0:	20007fe4 	.word	0x20007fe4
 8020ff4:	08025588 	.word	0x08025588

08020ff8 <util_timer_set_period>:

util_timer_status_t util_timer_set_period(util_timer_t *utimer,
		uint64_t newperiod) {
 8020ff8:	b580      	push	{r7, lr}
 8020ffa:	b086      	sub	sp, #24
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	60f8      	str	r0, [r7, #12]
 8021000:	e9c7 2300 	strd	r2, r3, [r7]
	util_timer_status_t ret = UTIL_TIMER_OK;
 8021004:	2300      	movs	r3, #0
 8021006:	75fb      	strb	r3, [r7, #23]

	if (NULL == utimer) {
 8021008:	68fb      	ldr	r3, [r7, #12]
 802100a:	2b00      	cmp	r3, #0
 802100c:	d102      	bne.n	8021014 <util_timer_set_period+0x1c>
		ret = UTIL_TIMER_INVALID_PARAM;
 802100e:	2301      	movs	r3, #1
 8021010:	75fb      	strb	r3, [r7, #23]
 8021012:	e012      	b.n	802103a <util_timer_set_period+0x42>
	}
	else {
		utimer->reload = newperiod;
 8021014:	68f9      	ldr	r1, [r7, #12]
 8021016:	e9d7 2300 	ldrd	r2, r3, [r7]
 802101a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		if (timer_exist(utimer)) {
 802101e:	68f8      	ldr	r0, [r7, #12]
 8021020:	f000 f8d0 	bl	80211c4 <timer_exist>
 8021024:	4603      	mov	r3, r0
 8021026:	2b00      	cmp	r3, #0
 8021028:	d007      	beq.n	802103a <util_timer_set_period+0x42>
			(void) util_timer_stop(utimer);
 802102a:	68f8      	ldr	r0, [r7, #12]
 802102c:	f7ff ff7c 	bl	8020f28 <util_timer_stop>
			ret = util_timer_start(utimer);
 8021030:	68f8      	ldr	r0, [r7, #12]
 8021032:	f7ff fefd 	bl	8020e30 <util_timer_start>
 8021036:	4603      	mov	r3, r0
 8021038:	75fb      	strb	r3, [r7, #23]
		}
	}
	return ret;
 802103a:	7dfb      	ldrb	r3, [r7, #23]
}
 802103c:	4618      	mov	r0, r3
 802103e:	3718      	adds	r7, #24
 8021040:	46bd      	mov	sp, r7
 8021042:	bd80      	pop	{r7, pc}

08021044 <util_timer_get_currenttime>:
	}

	return NextTimer;
}

uint64_t util_timer_get_currenttime(void) {
 8021044:	b580      	push	{r7, lr}
 8021046:	af00      	add	r7, sp, #0
	return UTIL_TimerDriver.GetTimerValue();
 8021048:	4b03      	ldr	r3, [pc, #12]	@ (8021058 <util_timer_get_currenttime+0x14>)
 802104a:	695b      	ldr	r3, [r3, #20]
 802104c:	4798      	blx	r3
 802104e:	4602      	mov	r2, r0
 8021050:	460b      	mov	r3, r1
}
 8021052:	4610      	mov	r0, r2
 8021054:	4619      	mov	r1, r3
 8021056:	bd80      	pop	{r7, pc}
 8021058:	08025588 	.word	0x08025588

0802105c <util_timer_get_elapsedtime>:

uint64_t util_timer_get_elapsedtime(uint64_t past) {
 802105c:	b5b0      	push	{r4, r5, r7, lr}
 802105e:	b086      	sub	sp, #24
 8021060:	af00      	add	r7, sp, #0
 8021062:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t nowInTicks = UTIL_TimerDriver.GetTimerValue();
 8021066:	4b0b      	ldr	r3, [pc, #44]	@ (8021094 <util_timer_get_elapsedtime+0x38>)
 8021068:	695b      	ldr	r3, [r3, #20]
 802106a:	4798      	blx	r3
 802106c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	uint64_t pastInTicks = past;
 8021070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021074:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return nowInTicks - pastInTicks;
 8021078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802107c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021080:	1a84      	subs	r4, r0, r2
 8021082:	eb61 0503 	sbc.w	r5, r1, r3
 8021086:	4622      	mov	r2, r4
 8021088:	462b      	mov	r3, r5
}
 802108a:	4610      	mov	r0, r2
 802108c:	4619      	mov	r1, r3
 802108e:	3718      	adds	r7, #24
 8021090:	46bd      	mov	sp, r7
 8021092:	bdb0      	pop	{r4, r5, r7, pc}
 8021094:	08025588 	.word	0x08025588

08021098 <util_timer_IRQ_handler>:

void util_timer_IRQ_handler(void) {
 8021098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802109c:	b084      	sub	sp, #16
 802109e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80210a0:	b672      	cpsid	i
}
 80210a2:	bf00      	nop
	util_timer_t *cur;
	uint32_t old, now, DeltaContext;

	__disable_irq();

	old = UTIL_TimerDriver.GetTimerContext();
 80210a4:	4b45      	ldr	r3, [pc, #276]	@ (80211bc <util_timer_IRQ_handler+0x124>)
 80210a6:	68db      	ldr	r3, [r3, #12]
 80210a8:	4798      	blx	r3
 80210aa:	4602      	mov	r2, r0
 80210ac:	460b      	mov	r3, r1
 80210ae:	4613      	mov	r3, r2
 80210b0:	60bb      	str	r3, [r7, #8]
	now = UTIL_TimerDriver.SetTimerContext();
 80210b2:	4b42      	ldr	r3, [pc, #264]	@ (80211bc <util_timer_IRQ_handler+0x124>)
 80210b4:	689b      	ldr	r3, [r3, #8]
 80210b6:	4798      	blx	r3
 80210b8:	4602      	mov	r2, r0
 80210ba:	460b      	mov	r3, r1
 80210bc:	4613      	mov	r3, r2
 80210be:	607b      	str	r3, [r7, #4]

	DeltaContext = now - old;
 80210c0:	687a      	ldr	r2, [r7, #4]
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	1ad3      	subs	r3, r2, r3
 80210c6:	603b      	str	r3, [r7, #0]

	if (headtimer != NULL) {
 80210c8:	4b3d      	ldr	r3, [pc, #244]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	d049      	beq.n	8021164 <util_timer_IRQ_handler+0xcc>
		cur = headtimer;
 80210d0:	4b3b      	ldr	r3, [pc, #236]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 80210d2:	681b      	ldr	r3, [r3, #0]
 80210d4:	60fb      	str	r3, [r7, #12]
		do {
			if (cur->timestamp > DeltaContext)
 80210d6:	68fb      	ldr	r3, [r7, #12]
 80210d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210dc:	6839      	ldr	r1, [r7, #0]
 80210de:	2000      	movs	r0, #0
 80210e0:	460c      	mov	r4, r1
 80210e2:	4605      	mov	r5, r0
 80210e4:	4294      	cmp	r4, r2
 80210e6:	eb75 0303 	sbcs.w	r3, r5, r3
 80210ea:	d20e      	bcs.n	802110a <util_timer_IRQ_handler+0x72>
				cur->timestamp -= DeltaContext;
 80210ec:	68fb      	ldr	r3, [r7, #12]
 80210ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80210f2:	6839      	ldr	r1, [r7, #0]
 80210f4:	2000      	movs	r0, #0
 80210f6:	4688      	mov	r8, r1
 80210f8:	4681      	mov	r9, r0
 80210fa:	ebb2 0a08 	subs.w	sl, r2, r8
 80210fe:	eb63 0b09 	sbc.w	fp, r3, r9
 8021102:	68fb      	ldr	r3, [r7, #12]
 8021104:	e9c3 ab00 	strd	sl, fp, [r3]
 8021108:	e006      	b.n	8021118 <util_timer_IRQ_handler+0x80>
			else
				cur->timestamp = 0;
 802110a:	68f9      	ldr	r1, [r7, #12]
 802110c:	f04f 0200 	mov.w	r2, #0
 8021110:	f04f 0300 	mov.w	r3, #0
 8021114:	e9c1 2300 	strd	r2, r3, [r1]
			cur = cur->next;
 8021118:	68fb      	ldr	r3, [r7, #12]
 802111a:	69db      	ldr	r3, [r3, #28]
 802111c:	60fb      	str	r3, [r7, #12]
		} while (cur != NULL);
 802111e:	68fb      	ldr	r3, [r7, #12]
 8021120:	2b00      	cmp	r3, #0
 8021122:	d1d8      	bne.n	80210d6 <util_timer_IRQ_handler+0x3e>
	}

	/* Execute expired timer and update the list */
	while ((headtimer != NULL)
 8021124:	e01e      	b.n	8021164 <util_timer_IRQ_handler+0xcc>
			&& ((headtimer->timestamp == 0U)
					|| (headtimer->timestamp < UTIL_TimerDriver.GetTimerElapsedTime()))) {
		cur = headtimer;
 8021126:	4b26      	ldr	r3, [pc, #152]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 8021128:	681b      	ldr	r3, [r3, #0]
 802112a:	60fb      	str	r3, [r7, #12]
		headtimer = headtimer->next;
 802112c:	4b24      	ldr	r3, [pc, #144]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	69db      	ldr	r3, [r3, #28]
 8021132:	4a23      	ldr	r2, [pc, #140]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 8021134:	6013      	str	r3, [r2, #0]
		cur->ispending = 0;
 8021136:	68fb      	ldr	r3, [r7, #12]
 8021138:	2200      	movs	r2, #0
 802113a:	741a      	strb	r2, [r3, #16]
		cur->isrunning = 0;
 802113c:	68fb      	ldr	r3, [r7, #12]
 802113e:	2200      	movs	r2, #0
 8021140:	745a      	strb	r2, [r3, #17]
		cur->event_callback(cur->argument);
 8021142:	68fb      	ldr	r3, [r7, #12]
 8021144:	695b      	ldr	r3, [r3, #20]
 8021146:	68fa      	ldr	r2, [r7, #12]
 8021148:	6992      	ldr	r2, [r2, #24]
 802114a:	4610      	mov	r0, r2
 802114c:	4798      	blx	r3
		if ((cur->mode == UTIL_TIMER_PERIODIC)
 802114e:	68fb      	ldr	r3, [r7, #12]
 8021150:	7cdb      	ldrb	r3, [r3, #19]
 8021152:	2b01      	cmp	r3, #1
 8021154:	d106      	bne.n	8021164 <util_timer_IRQ_handler+0xcc>
				&& (cur->isreloadstopped == 0U)) {
 8021156:	68fb      	ldr	r3, [r7, #12]
 8021158:	7c9b      	ldrb	r3, [r3, #18]
 802115a:	2b00      	cmp	r3, #0
 802115c:	d102      	bne.n	8021164 <util_timer_IRQ_handler+0xcc>
			(void) util_timer_start(cur);
 802115e:	68f8      	ldr	r0, [r7, #12]
 8021160:	f7ff fe66 	bl	8020e30 <util_timer_start>
	while ((headtimer != NULL)
 8021164:	4b16      	ldr	r3, [pc, #88]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 8021166:	681b      	ldr	r3, [r3, #0]
			&& ((headtimer->timestamp == 0U)
 8021168:	2b00      	cmp	r3, #0
 802116a:	d012      	beq.n	8021192 <util_timer_IRQ_handler+0xfa>
 802116c:	4b14      	ldr	r3, [pc, #80]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 802116e:	681b      	ldr	r3, [r3, #0]
 8021170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021174:	4313      	orrs	r3, r2
 8021176:	d0d6      	beq.n	8021126 <util_timer_IRQ_handler+0x8e>
					|| (headtimer->timestamp < UTIL_TimerDriver.GetTimerElapsedTime()))) {
 8021178:	4b11      	ldr	r3, [pc, #68]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8021180:	4b0e      	ldr	r3, [pc, #56]	@ (80211bc <util_timer_IRQ_handler+0x124>)
 8021182:	691b      	ldr	r3, [r3, #16]
 8021184:	4798      	blx	r3
 8021186:	4602      	mov	r2, r0
 8021188:	460b      	mov	r3, r1
 802118a:	4294      	cmp	r4, r2
 802118c:	eb75 0303 	sbcs.w	r3, r5, r3
 8021190:	d3c9      	bcc.n	8021126 <util_timer_IRQ_handler+0x8e>
		}
	}

	if ((headtimer != NULL) && (headtimer->ispending == 0U))
 8021192:	4b0b      	ldr	r3, [pc, #44]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 8021194:	681b      	ldr	r3, [r3, #0]
 8021196:	2b00      	cmp	r3, #0
 8021198:	d009      	beq.n	80211ae <util_timer_IRQ_handler+0x116>
 802119a:	4b09      	ldr	r3, [pc, #36]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	7c1b      	ldrb	r3, [r3, #16]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d104      	bne.n	80211ae <util_timer_IRQ_handler+0x116>
		timer_set_timeout(headtimer);
 80211a4:	4b06      	ldr	r3, [pc, #24]	@ (80211c0 <util_timer_IRQ_handler+0x128>)
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	4618      	mov	r0, r3
 80211aa:	f000 f829 	bl	8021200 <timer_set_timeout>
  __ASM volatile ("cpsie i" : : : "memory");
 80211ae:	b662      	cpsie	i
}
 80211b0:	bf00      	nop

	__enable_irq();
}
 80211b2:	bf00      	nop
 80211b4:	3710      	adds	r7, #16
 80211b6:	46bd      	mov	sp, r7
 80211b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80211bc:	08025588 	.word	0x08025588
 80211c0:	20007fe4 	.word	0x20007fe4

080211c4 <timer_exist>:

bool timer_exist(util_timer_t *utimer) {
 80211c4:	b480      	push	{r7}
 80211c6:	b085      	sub	sp, #20
 80211c8:	af00      	add	r7, sp, #0
 80211ca:	6078      	str	r0, [r7, #4]
	util_timer_t *cur = headtimer;
 80211cc:	4b0b      	ldr	r3, [pc, #44]	@ (80211fc <timer_exist+0x38>)
 80211ce:	681b      	ldr	r3, [r3, #0]
 80211d0:	60fb      	str	r3, [r7, #12]

	while (cur != NULL) {
 80211d2:	e008      	b.n	80211e6 <timer_exist+0x22>
		if (cur == utimer) {
 80211d4:	68fa      	ldr	r2, [r7, #12]
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	429a      	cmp	r2, r3
 80211da:	d101      	bne.n	80211e0 <timer_exist+0x1c>
			return true;
 80211dc:	2301      	movs	r3, #1
 80211de:	e006      	b.n	80211ee <timer_exist+0x2a>
		}
		cur = cur->next;
 80211e0:	68fb      	ldr	r3, [r7, #12]
 80211e2:	69db      	ldr	r3, [r3, #28]
 80211e4:	60fb      	str	r3, [r7, #12]
	while (cur != NULL) {
 80211e6:	68fb      	ldr	r3, [r7, #12]
 80211e8:	2b00      	cmp	r3, #0
 80211ea:	d1f3      	bne.n	80211d4 <timer_exist+0x10>
	}
	return false;
 80211ec:	2300      	movs	r3, #0
}
 80211ee:	4618      	mov	r0, r3
 80211f0:	3714      	adds	r7, #20
 80211f2:	46bd      	mov	sp, r7
 80211f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211f8:	4770      	bx	lr
 80211fa:	bf00      	nop
 80211fc:	20007fe4 	.word	0x20007fe4

08021200 <timer_set_timeout>:

void timer_set_timeout(util_timer_t *utimer) {
 8021200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021204:	b088      	sub	sp, #32
 8021206:	af00      	add	r7, sp, #0
 8021208:	6178      	str	r0, [r7, #20]
	uint32_t minTicks = 1;
 802120a:	2301      	movs	r3, #1
 802120c:	61fb      	str	r3, [r7, #28]
	utimer->ispending = 1;
 802120e:	697b      	ldr	r3, [r7, #20]
 8021210:	2201      	movs	r2, #1
 8021212:	741a      	strb	r2, [r3, #16]

	/* In case deadline too soon */
	if (utimer->timestamp
 8021214:	697b      	ldr	r3, [r7, #20]
 8021216:	e9d3 2300 	ldrd	r2, r3, [r3]
 802121a:	e9c7 2300 	strd	r2, r3, [r7]
			< (UTIL_TimerDriver.GetTimerElapsedTime() + minTicks)) {
 802121e:	4b1a      	ldr	r3, [pc, #104]	@ (8021288 <timer_set_timeout+0x88>)
 8021220:	691b      	ldr	r3, [r3, #16]
 8021222:	4798      	blx	r3
 8021224:	4602      	mov	r2, r0
 8021226:	460b      	mov	r3, r1
 8021228:	69f9      	ldr	r1, [r7, #28]
 802122a:	2000      	movs	r0, #0
 802122c:	468a      	mov	sl, r1
 802122e:	4683      	mov	fp, r0
 8021230:	eb12 040a 	adds.w	r4, r2, sl
 8021234:	eb43 050b 	adc.w	r5, r3, fp
	if (utimer->timestamp
 8021238:	e9d7 1200 	ldrd	r1, r2, [r7]
 802123c:	460b      	mov	r3, r1
 802123e:	42a3      	cmp	r3, r4
 8021240:	4613      	mov	r3, r2
 8021242:	41ab      	sbcs	r3, r5
 8021244:	d213      	bcs.n	802126e <timer_set_timeout+0x6e>
		utimer->timestamp = UTIL_TimerDriver.GetTimerElapsedTime() + minTicks;
 8021246:	4b10      	ldr	r3, [pc, #64]	@ (8021288 <timer_set_timeout+0x88>)
 8021248:	691b      	ldr	r3, [r3, #16]
 802124a:	4798      	blx	r3
 802124c:	4602      	mov	r2, r0
 802124e:	460b      	mov	r3, r1
 8021250:	69f9      	ldr	r1, [r7, #28]
 8021252:	2000      	movs	r0, #0
 8021254:	4688      	mov	r8, r1
 8021256:	4681      	mov	r9, r0
 8021258:	eb12 0108 	adds.w	r1, r2, r8
 802125c:	60b9      	str	r1, [r7, #8]
 802125e:	eb43 0309 	adc.w	r3, r3, r9
 8021262:	60fb      	str	r3, [r7, #12]
 8021264:	697b      	ldr	r3, [r7, #20]
 8021266:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 802126a:	e9c3 1200 	strd	r1, r2, [r3]
	}
	UTIL_TimerDriver.StartTimerEvt(utimer->timestamp);
 802126e:	4b06      	ldr	r3, [pc, #24]	@ (8021288 <timer_set_timeout+0x88>)
 8021270:	681c      	ldr	r4, [r3, #0]
 8021272:	697b      	ldr	r3, [r7, #20]
 8021274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021278:	4610      	mov	r0, r2
 802127a:	4619      	mov	r1, r3
 802127c:	47a0      	blx	r4
}
 802127e:	bf00      	nop
 8021280:	3720      	adds	r7, #32
 8021282:	46bd      	mov	sp, r7
 8021284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021288:	08025588 	.word	0x08025588

0802128c <timer_insert>:

void timer_insert(util_timer_t *utimer) {
 802128c:	b480      	push	{r7}
 802128e:	b085      	sub	sp, #20
 8021290:	af00      	add	r7, sp, #0
 8021292:	6078      	str	r0, [r7, #4]
	util_timer_t *cur = headtimer;
 8021294:	4b16      	ldr	r3, [pc, #88]	@ (80212f0 <timer_insert+0x64>)
 8021296:	681b      	ldr	r3, [r3, #0]
 8021298:	60fb      	str	r3, [r7, #12]
	util_timer_t *next = headtimer->next;
 802129a:	4b15      	ldr	r3, [pc, #84]	@ (80212f0 <timer_insert+0x64>)
 802129c:	681b      	ldr	r3, [r3, #0]
 802129e:	69db      	ldr	r3, [r3, #28]
 80212a0:	60bb      	str	r3, [r7, #8]

	while (cur->next != NULL) {
 80212a2:	e016      	b.n	80212d2 <timer_insert+0x46>
		if (utimer->timestamp > next->timestamp) {
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80212aa:	68b9      	ldr	r1, [r7, #8]
 80212ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80212b0:	4290      	cmp	r0, r2
 80212b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80212b6:	d205      	bcs.n	80212c4 <timer_insert+0x38>
			cur = next;
 80212b8:	68bb      	ldr	r3, [r7, #8]
 80212ba:	60fb      	str	r3, [r7, #12]
			next = next->next;
 80212bc:	68bb      	ldr	r3, [r7, #8]
 80212be:	69db      	ldr	r3, [r3, #28]
 80212c0:	60bb      	str	r3, [r7, #8]
 80212c2:	e006      	b.n	80212d2 <timer_insert+0x46>
		}
		else {
			cur->next = utimer;
 80212c4:	68fb      	ldr	r3, [r7, #12]
 80212c6:	687a      	ldr	r2, [r7, #4]
 80212c8:	61da      	str	r2, [r3, #28]
			utimer->next = next;
 80212ca:	687b      	ldr	r3, [r7, #4]
 80212cc:	68ba      	ldr	r2, [r7, #8]
 80212ce:	61da      	str	r2, [r3, #28]
			return;
 80212d0:	e009      	b.n	80212e6 <timer_insert+0x5a>
	while (cur->next != NULL) {
 80212d2:	68fb      	ldr	r3, [r7, #12]
 80212d4:	69db      	ldr	r3, [r3, #28]
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	d1e4      	bne.n	80212a4 <timer_insert+0x18>

		}
	}
	cur->next = utimer;
 80212da:	68fb      	ldr	r3, [r7, #12]
 80212dc:	687a      	ldr	r2, [r7, #4]
 80212de:	61da      	str	r2, [r3, #28]
	utimer->next = NULL;
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	2200      	movs	r2, #0
 80212e4:	61da      	str	r2, [r3, #28]
}
 80212e6:	3714      	adds	r7, #20
 80212e8:	46bd      	mov	sp, r7
 80212ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ee:	4770      	bx	lr
 80212f0:	20007fe4 	.word	0x20007fe4

080212f4 <timer_insert_head>:

void timer_insert_head(util_timer_t *utimer) {
 80212f4:	b580      	push	{r7, lr}
 80212f6:	b084      	sub	sp, #16
 80212f8:	af00      	add	r7, sp, #0
 80212fa:	6078      	str	r0, [r7, #4]
	util_timer_t *cur = headtimer;
 80212fc:	4b0b      	ldr	r3, [pc, #44]	@ (802132c <timer_insert_head+0x38>)
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	60fb      	str	r3, [r7, #12]

	if (cur != NULL) {
 8021302:	68fb      	ldr	r3, [r7, #12]
 8021304:	2b00      	cmp	r3, #0
 8021306:	d002      	beq.n	802130e <timer_insert_head+0x1a>
		cur->ispending = 0;
 8021308:	68fb      	ldr	r3, [r7, #12]
 802130a:	2200      	movs	r2, #0
 802130c:	741a      	strb	r2, [r3, #16]
	}

	utimer->next = cur;
 802130e:	687b      	ldr	r3, [r7, #4]
 8021310:	68fa      	ldr	r2, [r7, #12]
 8021312:	61da      	str	r2, [r3, #28]
	headtimer = utimer;
 8021314:	4a05      	ldr	r2, [pc, #20]	@ (802132c <timer_insert_head+0x38>)
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	6013      	str	r3, [r2, #0]
	timer_set_timeout(headtimer);
 802131a:	4b04      	ldr	r3, [pc, #16]	@ (802132c <timer_insert_head+0x38>)
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	4618      	mov	r0, r3
 8021320:	f7ff ff6e 	bl	8021200 <timer_set_timeout>
}
 8021324:	bf00      	nop
 8021326:	3710      	adds	r7, #16
 8021328:	46bd      	mov	sp, r7
 802132a:	bd80      	pop	{r7, pc}
 802132c:	20007fe4 	.word	0x20007fe4

08021330 <util_timer_drv_starttimer>:



static inline uint64_t util_timer_drv_gettimerticks(void);

util_timer_status_t util_timer_drv_starttimer(uint64_t timeout) {
 8021330:	b580      	push	{r7, lr}
 8021332:	b082      	sub	sp, #8
 8021334:	af00      	add	r7, sp, #0
 8021336:	e9c7 0100 	strd	r0, r1, [r7]
	if(timeout == 0) return UTIL_TIMER_INVALID_PARAM;
 802133a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802133e:	4313      	orrs	r3, r2
 8021340:	d101      	bne.n	8021346 <util_timer_drv_starttimer+0x16>
 8021342:	2301      	movs	r3, #1
 8021344:	e030      	b.n	80213a8 <util_timer_drv_starttimer+0x78>

	timer_period_60s_n = timeout / 60000;
 8021346:	e9d7 0100 	ldrd	r0, r1, [r7]
 802134a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 802134e:	f04f 0300 	mov.w	r3, #0
 8021352:	f7df fc49 	bl	8000be8 <__aeabi_uldivmod>
 8021356:	4602      	mov	r2, r0
 8021358:	460b      	mov	r3, r1
 802135a:	4b15      	ldr	r3, [pc, #84]	@ (80213b0 <util_timer_drv_starttimer+0x80>)
 802135c:	601a      	str	r2, [r3, #0]
	timer_period_remain = timeout % 60000;
 802135e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8021362:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8021366:	f04f 0300 	mov.w	r3, #0
 802136a:	f7df fc3d 	bl	8000be8 <__aeabi_uldivmod>
 802136e:	b292      	uxth	r2, r2
 8021370:	4b10      	ldr	r3, [pc, #64]	@ (80213b4 <util_timer_drv_starttimer+0x84>)
 8021372:	801a      	strh	r2, [r3, #0]
	if (timer_period_60s_n)
 8021374:	4b0e      	ldr	r3, [pc, #56]	@ (80213b0 <util_timer_drv_starttimer+0x80>)
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	2b00      	cmp	r3, #0
 802137a:	d004      	beq.n	8021386 <util_timer_drv_starttimer+0x56>
		timer_period = 60000;
 802137c:	4b0e      	ldr	r3, [pc, #56]	@ (80213b8 <util_timer_drv_starttimer+0x88>)
 802137e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8021382:	801a      	strh	r2, [r3, #0]
 8021384:	e004      	b.n	8021390 <util_timer_drv_starttimer+0x60>
	else
		timer_period = timer_period_remain;
 8021386:	4b0b      	ldr	r3, [pc, #44]	@ (80213b4 <util_timer_drv_starttimer+0x84>)
 8021388:	881b      	ldrh	r3, [r3, #0]
 802138a:	b29a      	uxth	r2, r3
 802138c:	4b0a      	ldr	r3, [pc, #40]	@ (80213b8 <util_timer_drv_starttimer+0x88>)
 802138e:	801a      	strh	r2, [r3, #0]

	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8021390:	480a      	ldr	r0, [pc, #40]	@ (80213bc <util_timer_drv_starttimer+0x8c>)
 8021392:	f7e1 fbc7 	bl	8002b24 <HAL_LPTIM_Counter_Stop_IT>
//	LOG_WARN("TIMER", "Start timer, run %dms.", timer_period);
	return (util_timer_status_t) HAL_LPTIM_Counter_Start_IT(&hlptim1, timer_period);
 8021396:	4b08      	ldr	r3, [pc, #32]	@ (80213b8 <util_timer_drv_starttimer+0x88>)
 8021398:	881b      	ldrh	r3, [r3, #0]
 802139a:	b29b      	uxth	r3, r3
 802139c:	4619      	mov	r1, r3
 802139e:	4807      	ldr	r0, [pc, #28]	@ (80213bc <util_timer_drv_starttimer+0x8c>)
 80213a0:	f7e1 fb1a 	bl	80029d8 <HAL_LPTIM_Counter_Start_IT>
 80213a4:	4603      	mov	r3, r0
 80213a6:	bf00      	nop
}
 80213a8:	4618      	mov	r0, r3
 80213aa:	3708      	adds	r7, #8
 80213ac:	46bd      	mov	sp, r7
 80213ae:	bd80      	pop	{r7, pc}
 80213b0:	20007fe8 	.word	0x20007fe8
 80213b4:	20007fec 	.word	0x20007fec
 80213b8:	20007fee 	.word	0x20007fee
 80213bc:	20000624 	.word	0x20000624

080213c0 <util_timer_drv_stoptimer>:

util_timer_status_t util_timer_drv_stoptimer(void) {
 80213c0:	b580      	push	{r7, lr}
 80213c2:	af00      	add	r7, sp, #0
	return (util_timer_status_t)HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80213c4:	4802      	ldr	r0, [pc, #8]	@ (80213d0 <util_timer_drv_stoptimer+0x10>)
 80213c6:	f7e1 fbad 	bl	8002b24 <HAL_LPTIM_Counter_Stop_IT>
 80213ca:	4603      	mov	r3, r0
}
 80213cc:	4618      	mov	r0, r3
 80213ce:	bd80      	pop	{r7, pc}
 80213d0:	20000624 	.word	0x20000624

080213d4 <util_timer_drv_settimercontext>:

uint64_t util_timer_drv_settimercontext(void){
 80213d4:	b580      	push	{r7, lr}
 80213d6:	af00      	add	r7, sp, #0
	TimerContext = util_timer_drv_gettimerticks();
 80213d8:	f000 f844 	bl	8021464 <util_timer_drv_gettimerticks>
 80213dc:	4602      	mov	r2, r0
 80213de:	460b      	mov	r3, r1
 80213e0:	4904      	ldr	r1, [pc, #16]	@ (80213f4 <util_timer_drv_settimercontext+0x20>)
 80213e2:	e9c1 2300 	strd	r2, r3, [r1]
	return TimerContext;
 80213e6:	4b03      	ldr	r3, [pc, #12]	@ (80213f4 <util_timer_drv_settimercontext+0x20>)
 80213e8:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80213ec:	4610      	mov	r0, r2
 80213ee:	4619      	mov	r1, r3
 80213f0:	bd80      	pop	{r7, pc}
 80213f2:	bf00      	nop
 80213f4:	20007ff8 	.word	0x20007ff8

080213f8 <util_timer_drv_gettimercontext>:

uint64_t util_timer_drv_gettimercontext(void) {
 80213f8:	b480      	push	{r7}
 80213fa:	af00      	add	r7, sp, #0
	return TimerContext;
 80213fc:	4b04      	ldr	r3, [pc, #16]	@ (8021410 <util_timer_drv_gettimercontext+0x18>)
 80213fe:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8021402:	4610      	mov	r0, r2
 8021404:	4619      	mov	r1, r3
 8021406:	46bd      	mov	sp, r7
 8021408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802140c:	4770      	bx	lr
 802140e:	bf00      	nop
 8021410:	20007ff8 	.word	0x20007ff8

08021414 <util_timer_drv_gettimerelapsedtime>:

uint64_t util_timer_drv_gettimerelapsedtime(void) {
 8021414:	b5b0      	push	{r4, r5, r7, lr}
 8021416:	b082      	sub	sp, #8
 8021418:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 802141a:	2300      	movs	r3, #0
 802141c:	607b      	str	r3, [r7, #4]
	ret = ((uint32_t) (util_timer_drv_gettimerticks() - TimerContext));
 802141e:	f000 f821 	bl	8021464 <util_timer_drv_gettimerticks>
 8021422:	4602      	mov	r2, r0
 8021424:	460b      	mov	r3, r1
 8021426:	4611      	mov	r1, r2
 8021428:	4b08      	ldr	r3, [pc, #32]	@ (802144c <util_timer_drv_gettimerelapsedtime+0x38>)
 802142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802142e:	4613      	mov	r3, r2
 8021430:	1acb      	subs	r3, r1, r3
 8021432:	607b      	str	r3, [r7, #4]
	return ret;
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	2200      	movs	r2, #0
 8021438:	461c      	mov	r4, r3
 802143a:	4615      	mov	r5, r2
 802143c:	4622      	mov	r2, r4
 802143e:	462b      	mov	r3, r5
}
 8021440:	4610      	mov	r0, r2
 8021442:	4619      	mov	r1, r3
 8021444:	3708      	adds	r7, #8
 8021446:	46bd      	mov	sp, r7
 8021448:	bdb0      	pop	{r4, r5, r7, pc}
 802144a:	bf00      	nop
 802144c:	20007ff8 	.word	0x20007ff8

08021450 <util_timer_drv_gettimervalue>:

uint64_t util_timer_drv_gettimervalue(void) {
 8021450:	b580      	push	{r7, lr}
 8021452:	af00      	add	r7, sp, #0
	return util_timer_drv_gettimerticks();
 8021454:	f000 f806 	bl	8021464 <util_timer_drv_gettimerticks>
 8021458:	4602      	mov	r2, r0
 802145a:	460b      	mov	r3, r1
}
 802145c:	4610      	mov	r0, r2
 802145e:	4619      	mov	r1, r3
 8021460:	bd80      	pop	{r7, pc}
	...

08021464 <util_timer_drv_gettimerticks>:
	*subSeconds = (uint32_t)(ticks%1000);

	return seconds;
}

static inline uint64_t util_timer_drv_gettimerticks(void) {
 8021464:	b4b0      	push	{r4, r5, r7}
 8021466:	af00      	add	r7, sp, #0
	return  tick_elapsed += hlptim1.Instance->CNT;
 8021468:	4909      	ldr	r1, [pc, #36]	@ (8021490 <util_timer_drv_gettimerticks+0x2c>)
 802146a:	6809      	ldr	r1, [r1, #0]
 802146c:	69c9      	ldr	r1, [r1, #28]
 802146e:	2000      	movs	r0, #0
 8021470:	460c      	mov	r4, r1
 8021472:	4605      	mov	r5, r0
 8021474:	4907      	ldr	r1, [pc, #28]	@ (8021494 <util_timer_drv_gettimerticks+0x30>)
 8021476:	e9d1 0100 	ldrd	r0, r1, [r1]
 802147a:	1822      	adds	r2, r4, r0
 802147c:	eb45 0301 	adc.w	r3, r5, r1
 8021480:	4904      	ldr	r1, [pc, #16]	@ (8021494 <util_timer_drv_gettimerticks+0x30>)
 8021482:	e9c1 2300 	strd	r2, r3, [r1]
}
 8021486:	4610      	mov	r0, r2
 8021488:	4619      	mov	r1, r3
 802148a:	46bd      	mov	sp, r7
 802148c:	bcb0      	pop	{r4, r5, r7}
 802148e:	4770      	bx	lr
 8021490:	20000624 	.word	0x20000624
 8021494:	20007ff0 	.word	0x20007ff0

08021498 <HAL_LPTIM_AutoReloadMatchCallback>:


void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8021498:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 802149c:	b082      	sub	sp, #8
 802149e:	af00      	add	r7, sp, #0
 80214a0:	6078      	str	r0, [r7, #4]
	tick_elapsed += timer_period;
 80214a2:	4b24      	ldr	r3, [pc, #144]	@ (8021534 <HAL_LPTIM_AutoReloadMatchCallback+0x9c>)
 80214a4:	881b      	ldrh	r3, [r3, #0]
 80214a6:	b29b      	uxth	r3, r3
 80214a8:	b29b      	uxth	r3, r3
 80214aa:	2200      	movs	r2, #0
 80214ac:	461c      	mov	r4, r3
 80214ae:	4615      	mov	r5, r2
 80214b0:	4b21      	ldr	r3, [pc, #132]	@ (8021538 <HAL_LPTIM_AutoReloadMatchCallback+0xa0>)
 80214b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214b6:	eb14 0802 	adds.w	r8, r4, r2
 80214ba:	eb45 0903 	adc.w	r9, r5, r3
 80214be:	4b1e      	ldr	r3, [pc, #120]	@ (8021538 <HAL_LPTIM_AutoReloadMatchCallback+0xa0>)
 80214c0:	e9c3 8900 	strd	r8, r9, [r3]
	 * timer_period_60s_n = 1 && timer_period_remain = 0 [1 - 0] V
	 * timer_period_60s_n > 1 && timer_period_remain > 0 [2 - 1]
	 * timer_period_60s_n = 1 && timer_period_remain > 0 [1 - 1]
	 * timer_period_60s_n = 0 && timer_period_remain > 0 [0 - 1]
	 */
	if(timer_period_remain > 0 && timer_period_60s_n == 1){
 80214c4:	4b1d      	ldr	r3, [pc, #116]	@ (802153c <HAL_LPTIM_AutoReloadMatchCallback+0xa4>)
 80214c6:	881b      	ldrh	r3, [r3, #0]
 80214c8:	b29b      	uxth	r3, r3
 80214ca:	2b00      	cmp	r3, #0
 80214cc:	d01b      	beq.n	8021506 <HAL_LPTIM_AutoReloadMatchCallback+0x6e>
 80214ce:	4b1c      	ldr	r3, [pc, #112]	@ (8021540 <HAL_LPTIM_AutoReloadMatchCallback+0xa8>)
 80214d0:	681b      	ldr	r3, [r3, #0]
 80214d2:	2b01      	cmp	r3, #1
 80214d4:	d117      	bne.n	8021506 <HAL_LPTIM_AutoReloadMatchCallback+0x6e>
		timer_period_60s_n--;
 80214d6:	4b1a      	ldr	r3, [pc, #104]	@ (8021540 <HAL_LPTIM_AutoReloadMatchCallback+0xa8>)
 80214d8:	681b      	ldr	r3, [r3, #0]
 80214da:	3b01      	subs	r3, #1
 80214dc:	4a18      	ldr	r2, [pc, #96]	@ (8021540 <HAL_LPTIM_AutoReloadMatchCallback+0xa8>)
 80214de:	6013      	str	r3, [r2, #0]
		timer_period = timer_period_remain;
 80214e0:	4b16      	ldr	r3, [pc, #88]	@ (802153c <HAL_LPTIM_AutoReloadMatchCallback+0xa4>)
 80214e2:	881b      	ldrh	r3, [r3, #0]
 80214e4:	b29a      	uxth	r2, r3
 80214e6:	4b13      	ldr	r3, [pc, #76]	@ (8021534 <HAL_LPTIM_AutoReloadMatchCallback+0x9c>)
 80214e8:	801a      	strh	r2, [r3, #0]
		timer_period_remain = 0;
 80214ea:	4b14      	ldr	r3, [pc, #80]	@ (802153c <HAL_LPTIM_AutoReloadMatchCallback+0xa4>)
 80214ec:	2200      	movs	r2, #0
 80214ee:	801a      	strh	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80214f0:	4814      	ldr	r0, [pc, #80]	@ (8021544 <HAL_LPTIM_AutoReloadMatchCallback+0xac>)
 80214f2:	f7e1 fb17 	bl	8002b24 <HAL_LPTIM_Counter_Stop_IT>
		HAL_LPTIM_Counter_Start_IT(&hlptim1, timer_period);
 80214f6:	4b0f      	ldr	r3, [pc, #60]	@ (8021534 <HAL_LPTIM_AutoReloadMatchCallback+0x9c>)
 80214f8:	881b      	ldrh	r3, [r3, #0]
 80214fa:	b29b      	uxth	r3, r3
 80214fc:	4619      	mov	r1, r3
 80214fe:	4811      	ldr	r0, [pc, #68]	@ (8021544 <HAL_LPTIM_AutoReloadMatchCallback+0xac>)
 8021500:	f7e1 fa6a 	bl	80029d8 <HAL_LPTIM_Counter_Start_IT>

		return;
 8021504:	e011      	b.n	802152a <HAL_LPTIM_AutoReloadMatchCallback+0x92>
	}
	if(timer_period_60s_n > 0) {
 8021506:	4b0e      	ldr	r3, [pc, #56]	@ (8021540 <HAL_LPTIM_AutoReloadMatchCallback+0xa8>)
 8021508:	681b      	ldr	r3, [r3, #0]
 802150a:	2b00      	cmp	r3, #0
 802150c:	d004      	beq.n	8021518 <HAL_LPTIM_AutoReloadMatchCallback+0x80>
		timer_period_60s_n--;
 802150e:	4b0c      	ldr	r3, [pc, #48]	@ (8021540 <HAL_LPTIM_AutoReloadMatchCallback+0xa8>)
 8021510:	681b      	ldr	r3, [r3, #0]
 8021512:	3b01      	subs	r3, #1
 8021514:	4a0a      	ldr	r2, [pc, #40]	@ (8021540 <HAL_LPTIM_AutoReloadMatchCallback+0xa8>)
 8021516:	6013      	str	r3, [r2, #0]
	}
	if(timer_period_60s_n == 0)	{
 8021518:	4b09      	ldr	r3, [pc, #36]	@ (8021540 <HAL_LPTIM_AutoReloadMatchCallback+0xa8>)
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	2b00      	cmp	r3, #0
 802151e:	d104      	bne.n	802152a <HAL_LPTIM_AutoReloadMatchCallback+0x92>
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8021520:	4808      	ldr	r0, [pc, #32]	@ (8021544 <HAL_LPTIM_AutoReloadMatchCallback+0xac>)
 8021522:	f7e1 faff 	bl	8002b24 <HAL_LPTIM_Counter_Stop_IT>
		UTIL_TIMER_IRQ_MAP_PROCESS();
 8021526:	f7ff fdb7 	bl	8021098 <util_timer_IRQ_handler>
//		LOG_WARN("TIMER", "End timer, event callback, tick_elapsed = %" PRIu64, tick_elapsed);

	}
}
 802152a:	3708      	adds	r7, #8
 802152c:	46bd      	mov	sp, r7
 802152e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8021532:	bf00      	nop
 8021534:	20007fee 	.word	0x20007fee
 8021538:	20007ff0 	.word	0x20007ff0
 802153c:	20007fec 	.word	0x20007fec
 8021540:	20007fe8 	.word	0x20007fe8
 8021544:	20000624 	.word	0x20000624

08021548 <malloc>:
 8021548:	4b02      	ldr	r3, [pc, #8]	@ (8021554 <malloc+0xc>)
 802154a:	4601      	mov	r1, r0
 802154c:	6818      	ldr	r0, [r3, #0]
 802154e:	f000 b82d 	b.w	80215ac <_malloc_r>
 8021552:	bf00      	nop
 8021554:	200003e4 	.word	0x200003e4

08021558 <free>:
 8021558:	4b02      	ldr	r3, [pc, #8]	@ (8021564 <free+0xc>)
 802155a:	4601      	mov	r1, r0
 802155c:	6818      	ldr	r0, [r3, #0]
 802155e:	f001 bd5f 	b.w	8023020 <_free_r>
 8021562:	bf00      	nop
 8021564:	200003e4 	.word	0x200003e4

08021568 <sbrk_aligned>:
 8021568:	b570      	push	{r4, r5, r6, lr}
 802156a:	4e0f      	ldr	r6, [pc, #60]	@ (80215a8 <sbrk_aligned+0x40>)
 802156c:	460c      	mov	r4, r1
 802156e:	6831      	ldr	r1, [r6, #0]
 8021570:	4605      	mov	r5, r0
 8021572:	b911      	cbnz	r1, 802157a <sbrk_aligned+0x12>
 8021574:	f000 feaa 	bl	80222cc <_sbrk_r>
 8021578:	6030      	str	r0, [r6, #0]
 802157a:	4621      	mov	r1, r4
 802157c:	4628      	mov	r0, r5
 802157e:	f000 fea5 	bl	80222cc <_sbrk_r>
 8021582:	1c43      	adds	r3, r0, #1
 8021584:	d103      	bne.n	802158e <sbrk_aligned+0x26>
 8021586:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802158a:	4620      	mov	r0, r4
 802158c:	bd70      	pop	{r4, r5, r6, pc}
 802158e:	1cc4      	adds	r4, r0, #3
 8021590:	f024 0403 	bic.w	r4, r4, #3
 8021594:	42a0      	cmp	r0, r4
 8021596:	d0f8      	beq.n	802158a <sbrk_aligned+0x22>
 8021598:	1a21      	subs	r1, r4, r0
 802159a:	4628      	mov	r0, r5
 802159c:	f000 fe96 	bl	80222cc <_sbrk_r>
 80215a0:	3001      	adds	r0, #1
 80215a2:	d1f2      	bne.n	802158a <sbrk_aligned+0x22>
 80215a4:	e7ef      	b.n	8021586 <sbrk_aligned+0x1e>
 80215a6:	bf00      	nop
 80215a8:	20008000 	.word	0x20008000

080215ac <_malloc_r>:
 80215ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80215b0:	1ccd      	adds	r5, r1, #3
 80215b2:	f025 0503 	bic.w	r5, r5, #3
 80215b6:	3508      	adds	r5, #8
 80215b8:	2d0c      	cmp	r5, #12
 80215ba:	bf38      	it	cc
 80215bc:	250c      	movcc	r5, #12
 80215be:	2d00      	cmp	r5, #0
 80215c0:	4606      	mov	r6, r0
 80215c2:	db01      	blt.n	80215c8 <_malloc_r+0x1c>
 80215c4:	42a9      	cmp	r1, r5
 80215c6:	d904      	bls.n	80215d2 <_malloc_r+0x26>
 80215c8:	230c      	movs	r3, #12
 80215ca:	6033      	str	r3, [r6, #0]
 80215cc:	2000      	movs	r0, #0
 80215ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80215d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80216a8 <_malloc_r+0xfc>
 80215d6:	f000 f869 	bl	80216ac <__malloc_lock>
 80215da:	f8d8 3000 	ldr.w	r3, [r8]
 80215de:	461c      	mov	r4, r3
 80215e0:	bb44      	cbnz	r4, 8021634 <_malloc_r+0x88>
 80215e2:	4629      	mov	r1, r5
 80215e4:	4630      	mov	r0, r6
 80215e6:	f7ff ffbf 	bl	8021568 <sbrk_aligned>
 80215ea:	1c43      	adds	r3, r0, #1
 80215ec:	4604      	mov	r4, r0
 80215ee:	d158      	bne.n	80216a2 <_malloc_r+0xf6>
 80215f0:	f8d8 4000 	ldr.w	r4, [r8]
 80215f4:	4627      	mov	r7, r4
 80215f6:	2f00      	cmp	r7, #0
 80215f8:	d143      	bne.n	8021682 <_malloc_r+0xd6>
 80215fa:	2c00      	cmp	r4, #0
 80215fc:	d04b      	beq.n	8021696 <_malloc_r+0xea>
 80215fe:	6823      	ldr	r3, [r4, #0]
 8021600:	4639      	mov	r1, r7
 8021602:	4630      	mov	r0, r6
 8021604:	eb04 0903 	add.w	r9, r4, r3
 8021608:	f000 fe60 	bl	80222cc <_sbrk_r>
 802160c:	4581      	cmp	r9, r0
 802160e:	d142      	bne.n	8021696 <_malloc_r+0xea>
 8021610:	6821      	ldr	r1, [r4, #0]
 8021612:	1a6d      	subs	r5, r5, r1
 8021614:	4629      	mov	r1, r5
 8021616:	4630      	mov	r0, r6
 8021618:	f7ff ffa6 	bl	8021568 <sbrk_aligned>
 802161c:	3001      	adds	r0, #1
 802161e:	d03a      	beq.n	8021696 <_malloc_r+0xea>
 8021620:	6823      	ldr	r3, [r4, #0]
 8021622:	442b      	add	r3, r5
 8021624:	6023      	str	r3, [r4, #0]
 8021626:	f8d8 3000 	ldr.w	r3, [r8]
 802162a:	685a      	ldr	r2, [r3, #4]
 802162c:	bb62      	cbnz	r2, 8021688 <_malloc_r+0xdc>
 802162e:	f8c8 7000 	str.w	r7, [r8]
 8021632:	e00f      	b.n	8021654 <_malloc_r+0xa8>
 8021634:	6822      	ldr	r2, [r4, #0]
 8021636:	1b52      	subs	r2, r2, r5
 8021638:	d420      	bmi.n	802167c <_malloc_r+0xd0>
 802163a:	2a0b      	cmp	r2, #11
 802163c:	d917      	bls.n	802166e <_malloc_r+0xc2>
 802163e:	1961      	adds	r1, r4, r5
 8021640:	42a3      	cmp	r3, r4
 8021642:	6025      	str	r5, [r4, #0]
 8021644:	bf18      	it	ne
 8021646:	6059      	strne	r1, [r3, #4]
 8021648:	6863      	ldr	r3, [r4, #4]
 802164a:	bf08      	it	eq
 802164c:	f8c8 1000 	streq.w	r1, [r8]
 8021650:	5162      	str	r2, [r4, r5]
 8021652:	604b      	str	r3, [r1, #4]
 8021654:	4630      	mov	r0, r6
 8021656:	f000 f82f 	bl	80216b8 <__malloc_unlock>
 802165a:	f104 000b 	add.w	r0, r4, #11
 802165e:	1d23      	adds	r3, r4, #4
 8021660:	f020 0007 	bic.w	r0, r0, #7
 8021664:	1ac2      	subs	r2, r0, r3
 8021666:	bf1c      	itt	ne
 8021668:	1a1b      	subne	r3, r3, r0
 802166a:	50a3      	strne	r3, [r4, r2]
 802166c:	e7af      	b.n	80215ce <_malloc_r+0x22>
 802166e:	6862      	ldr	r2, [r4, #4]
 8021670:	42a3      	cmp	r3, r4
 8021672:	bf0c      	ite	eq
 8021674:	f8c8 2000 	streq.w	r2, [r8]
 8021678:	605a      	strne	r2, [r3, #4]
 802167a:	e7eb      	b.n	8021654 <_malloc_r+0xa8>
 802167c:	4623      	mov	r3, r4
 802167e:	6864      	ldr	r4, [r4, #4]
 8021680:	e7ae      	b.n	80215e0 <_malloc_r+0x34>
 8021682:	463c      	mov	r4, r7
 8021684:	687f      	ldr	r7, [r7, #4]
 8021686:	e7b6      	b.n	80215f6 <_malloc_r+0x4a>
 8021688:	461a      	mov	r2, r3
 802168a:	685b      	ldr	r3, [r3, #4]
 802168c:	42a3      	cmp	r3, r4
 802168e:	d1fb      	bne.n	8021688 <_malloc_r+0xdc>
 8021690:	2300      	movs	r3, #0
 8021692:	6053      	str	r3, [r2, #4]
 8021694:	e7de      	b.n	8021654 <_malloc_r+0xa8>
 8021696:	230c      	movs	r3, #12
 8021698:	6033      	str	r3, [r6, #0]
 802169a:	4630      	mov	r0, r6
 802169c:	f000 f80c 	bl	80216b8 <__malloc_unlock>
 80216a0:	e794      	b.n	80215cc <_malloc_r+0x20>
 80216a2:	6005      	str	r5, [r0, #0]
 80216a4:	e7d6      	b.n	8021654 <_malloc_r+0xa8>
 80216a6:	bf00      	nop
 80216a8:	20008004 	.word	0x20008004

080216ac <__malloc_lock>:
 80216ac:	4801      	ldr	r0, [pc, #4]	@ (80216b4 <__malloc_lock+0x8>)
 80216ae:	f000 be5a 	b.w	8022366 <__retarget_lock_acquire_recursive>
 80216b2:	bf00      	nop
 80216b4:	20008148 	.word	0x20008148

080216b8 <__malloc_unlock>:
 80216b8:	4801      	ldr	r0, [pc, #4]	@ (80216c0 <__malloc_unlock+0x8>)
 80216ba:	f000 be55 	b.w	8022368 <__retarget_lock_release_recursive>
 80216be:	bf00      	nop
 80216c0:	20008148 	.word	0x20008148

080216c4 <__cvt>:
 80216c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80216c8:	ec57 6b10 	vmov	r6, r7, d0
 80216cc:	2f00      	cmp	r7, #0
 80216ce:	460c      	mov	r4, r1
 80216d0:	4619      	mov	r1, r3
 80216d2:	463b      	mov	r3, r7
 80216d4:	bfbb      	ittet	lt
 80216d6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80216da:	461f      	movlt	r7, r3
 80216dc:	2300      	movge	r3, #0
 80216de:	232d      	movlt	r3, #45	@ 0x2d
 80216e0:	700b      	strb	r3, [r1, #0]
 80216e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80216e4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80216e8:	4691      	mov	r9, r2
 80216ea:	f023 0820 	bic.w	r8, r3, #32
 80216ee:	bfbc      	itt	lt
 80216f0:	4632      	movlt	r2, r6
 80216f2:	4616      	movlt	r6, r2
 80216f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80216f8:	d005      	beq.n	8021706 <__cvt+0x42>
 80216fa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80216fe:	d100      	bne.n	8021702 <__cvt+0x3e>
 8021700:	3401      	adds	r4, #1
 8021702:	2102      	movs	r1, #2
 8021704:	e000      	b.n	8021708 <__cvt+0x44>
 8021706:	2103      	movs	r1, #3
 8021708:	ab03      	add	r3, sp, #12
 802170a:	9301      	str	r3, [sp, #4]
 802170c:	ab02      	add	r3, sp, #8
 802170e:	9300      	str	r3, [sp, #0]
 8021710:	ec47 6b10 	vmov	d0, r6, r7
 8021714:	4653      	mov	r3, sl
 8021716:	4622      	mov	r2, r4
 8021718:	f000 febe 	bl	8022498 <_dtoa_r>
 802171c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8021720:	4605      	mov	r5, r0
 8021722:	d119      	bne.n	8021758 <__cvt+0x94>
 8021724:	f019 0f01 	tst.w	r9, #1
 8021728:	d00e      	beq.n	8021748 <__cvt+0x84>
 802172a:	eb00 0904 	add.w	r9, r0, r4
 802172e:	2200      	movs	r2, #0
 8021730:	2300      	movs	r3, #0
 8021732:	4630      	mov	r0, r6
 8021734:	4639      	mov	r1, r7
 8021736:	f7df f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 802173a:	b108      	cbz	r0, 8021740 <__cvt+0x7c>
 802173c:	f8cd 900c 	str.w	r9, [sp, #12]
 8021740:	2230      	movs	r2, #48	@ 0x30
 8021742:	9b03      	ldr	r3, [sp, #12]
 8021744:	454b      	cmp	r3, r9
 8021746:	d31e      	bcc.n	8021786 <__cvt+0xc2>
 8021748:	9b03      	ldr	r3, [sp, #12]
 802174a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802174c:	1b5b      	subs	r3, r3, r5
 802174e:	4628      	mov	r0, r5
 8021750:	6013      	str	r3, [r2, #0]
 8021752:	b004      	add	sp, #16
 8021754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021758:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802175c:	eb00 0904 	add.w	r9, r0, r4
 8021760:	d1e5      	bne.n	802172e <__cvt+0x6a>
 8021762:	7803      	ldrb	r3, [r0, #0]
 8021764:	2b30      	cmp	r3, #48	@ 0x30
 8021766:	d10a      	bne.n	802177e <__cvt+0xba>
 8021768:	2200      	movs	r2, #0
 802176a:	2300      	movs	r3, #0
 802176c:	4630      	mov	r0, r6
 802176e:	4639      	mov	r1, r7
 8021770:	f7df f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8021774:	b918      	cbnz	r0, 802177e <__cvt+0xba>
 8021776:	f1c4 0401 	rsb	r4, r4, #1
 802177a:	f8ca 4000 	str.w	r4, [sl]
 802177e:	f8da 3000 	ldr.w	r3, [sl]
 8021782:	4499      	add	r9, r3
 8021784:	e7d3      	b.n	802172e <__cvt+0x6a>
 8021786:	1c59      	adds	r1, r3, #1
 8021788:	9103      	str	r1, [sp, #12]
 802178a:	701a      	strb	r2, [r3, #0]
 802178c:	e7d9      	b.n	8021742 <__cvt+0x7e>

0802178e <__exponent>:
 802178e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021790:	2900      	cmp	r1, #0
 8021792:	bfba      	itte	lt
 8021794:	4249      	neglt	r1, r1
 8021796:	232d      	movlt	r3, #45	@ 0x2d
 8021798:	232b      	movge	r3, #43	@ 0x2b
 802179a:	2909      	cmp	r1, #9
 802179c:	7002      	strb	r2, [r0, #0]
 802179e:	7043      	strb	r3, [r0, #1]
 80217a0:	dd29      	ble.n	80217f6 <__exponent+0x68>
 80217a2:	f10d 0307 	add.w	r3, sp, #7
 80217a6:	461d      	mov	r5, r3
 80217a8:	270a      	movs	r7, #10
 80217aa:	461a      	mov	r2, r3
 80217ac:	fbb1 f6f7 	udiv	r6, r1, r7
 80217b0:	fb07 1416 	mls	r4, r7, r6, r1
 80217b4:	3430      	adds	r4, #48	@ 0x30
 80217b6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80217ba:	460c      	mov	r4, r1
 80217bc:	2c63      	cmp	r4, #99	@ 0x63
 80217be:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80217c2:	4631      	mov	r1, r6
 80217c4:	dcf1      	bgt.n	80217aa <__exponent+0x1c>
 80217c6:	3130      	adds	r1, #48	@ 0x30
 80217c8:	1e94      	subs	r4, r2, #2
 80217ca:	f803 1c01 	strb.w	r1, [r3, #-1]
 80217ce:	1c41      	adds	r1, r0, #1
 80217d0:	4623      	mov	r3, r4
 80217d2:	42ab      	cmp	r3, r5
 80217d4:	d30a      	bcc.n	80217ec <__exponent+0x5e>
 80217d6:	f10d 0309 	add.w	r3, sp, #9
 80217da:	1a9b      	subs	r3, r3, r2
 80217dc:	42ac      	cmp	r4, r5
 80217de:	bf88      	it	hi
 80217e0:	2300      	movhi	r3, #0
 80217e2:	3302      	adds	r3, #2
 80217e4:	4403      	add	r3, r0
 80217e6:	1a18      	subs	r0, r3, r0
 80217e8:	b003      	add	sp, #12
 80217ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80217ec:	f813 6b01 	ldrb.w	r6, [r3], #1
 80217f0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80217f4:	e7ed      	b.n	80217d2 <__exponent+0x44>
 80217f6:	2330      	movs	r3, #48	@ 0x30
 80217f8:	3130      	adds	r1, #48	@ 0x30
 80217fa:	7083      	strb	r3, [r0, #2]
 80217fc:	70c1      	strb	r1, [r0, #3]
 80217fe:	1d03      	adds	r3, r0, #4
 8021800:	e7f1      	b.n	80217e6 <__exponent+0x58>
	...

08021804 <_printf_float>:
 8021804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021808:	b08d      	sub	sp, #52	@ 0x34
 802180a:	460c      	mov	r4, r1
 802180c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8021810:	4616      	mov	r6, r2
 8021812:	461f      	mov	r7, r3
 8021814:	4605      	mov	r5, r0
 8021816:	f000 fd21 	bl	802225c <_localeconv_r>
 802181a:	6803      	ldr	r3, [r0, #0]
 802181c:	9304      	str	r3, [sp, #16]
 802181e:	4618      	mov	r0, r3
 8021820:	f7de fd26 	bl	8000270 <strlen>
 8021824:	2300      	movs	r3, #0
 8021826:	930a      	str	r3, [sp, #40]	@ 0x28
 8021828:	f8d8 3000 	ldr.w	r3, [r8]
 802182c:	9005      	str	r0, [sp, #20]
 802182e:	3307      	adds	r3, #7
 8021830:	f023 0307 	bic.w	r3, r3, #7
 8021834:	f103 0208 	add.w	r2, r3, #8
 8021838:	f894 a018 	ldrb.w	sl, [r4, #24]
 802183c:	f8d4 b000 	ldr.w	fp, [r4]
 8021840:	f8c8 2000 	str.w	r2, [r8]
 8021844:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021848:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802184c:	9307      	str	r3, [sp, #28]
 802184e:	f8cd 8018 	str.w	r8, [sp, #24]
 8021852:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8021856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802185a:	4b9c      	ldr	r3, [pc, #624]	@ (8021acc <_printf_float+0x2c8>)
 802185c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021860:	f7df f964 	bl	8000b2c <__aeabi_dcmpun>
 8021864:	bb70      	cbnz	r0, 80218c4 <_printf_float+0xc0>
 8021866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802186a:	4b98      	ldr	r3, [pc, #608]	@ (8021acc <_printf_float+0x2c8>)
 802186c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021870:	f7df f93e 	bl	8000af0 <__aeabi_dcmple>
 8021874:	bb30      	cbnz	r0, 80218c4 <_printf_float+0xc0>
 8021876:	2200      	movs	r2, #0
 8021878:	2300      	movs	r3, #0
 802187a:	4640      	mov	r0, r8
 802187c:	4649      	mov	r1, r9
 802187e:	f7df f92d 	bl	8000adc <__aeabi_dcmplt>
 8021882:	b110      	cbz	r0, 802188a <_printf_float+0x86>
 8021884:	232d      	movs	r3, #45	@ 0x2d
 8021886:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802188a:	4a91      	ldr	r2, [pc, #580]	@ (8021ad0 <_printf_float+0x2cc>)
 802188c:	4b91      	ldr	r3, [pc, #580]	@ (8021ad4 <_printf_float+0x2d0>)
 802188e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8021892:	bf94      	ite	ls
 8021894:	4690      	movls	r8, r2
 8021896:	4698      	movhi	r8, r3
 8021898:	2303      	movs	r3, #3
 802189a:	6123      	str	r3, [r4, #16]
 802189c:	f02b 0304 	bic.w	r3, fp, #4
 80218a0:	6023      	str	r3, [r4, #0]
 80218a2:	f04f 0900 	mov.w	r9, #0
 80218a6:	9700      	str	r7, [sp, #0]
 80218a8:	4633      	mov	r3, r6
 80218aa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80218ac:	4621      	mov	r1, r4
 80218ae:	4628      	mov	r0, r5
 80218b0:	f000 f9d2 	bl	8021c58 <_printf_common>
 80218b4:	3001      	adds	r0, #1
 80218b6:	f040 808d 	bne.w	80219d4 <_printf_float+0x1d0>
 80218ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218be:	b00d      	add	sp, #52	@ 0x34
 80218c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218c4:	4642      	mov	r2, r8
 80218c6:	464b      	mov	r3, r9
 80218c8:	4640      	mov	r0, r8
 80218ca:	4649      	mov	r1, r9
 80218cc:	f7df f92e 	bl	8000b2c <__aeabi_dcmpun>
 80218d0:	b140      	cbz	r0, 80218e4 <_printf_float+0xe0>
 80218d2:	464b      	mov	r3, r9
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	bfbc      	itt	lt
 80218d8:	232d      	movlt	r3, #45	@ 0x2d
 80218da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80218de:	4a7e      	ldr	r2, [pc, #504]	@ (8021ad8 <_printf_float+0x2d4>)
 80218e0:	4b7e      	ldr	r3, [pc, #504]	@ (8021adc <_printf_float+0x2d8>)
 80218e2:	e7d4      	b.n	802188e <_printf_float+0x8a>
 80218e4:	6863      	ldr	r3, [r4, #4]
 80218e6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80218ea:	9206      	str	r2, [sp, #24]
 80218ec:	1c5a      	adds	r2, r3, #1
 80218ee:	d13b      	bne.n	8021968 <_printf_float+0x164>
 80218f0:	2306      	movs	r3, #6
 80218f2:	6063      	str	r3, [r4, #4]
 80218f4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80218f8:	2300      	movs	r3, #0
 80218fa:	6022      	str	r2, [r4, #0]
 80218fc:	9303      	str	r3, [sp, #12]
 80218fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8021900:	e9cd a301 	strd	sl, r3, [sp, #4]
 8021904:	ab09      	add	r3, sp, #36	@ 0x24
 8021906:	9300      	str	r3, [sp, #0]
 8021908:	6861      	ldr	r1, [r4, #4]
 802190a:	ec49 8b10 	vmov	d0, r8, r9
 802190e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8021912:	4628      	mov	r0, r5
 8021914:	f7ff fed6 	bl	80216c4 <__cvt>
 8021918:	9b06      	ldr	r3, [sp, #24]
 802191a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802191c:	2b47      	cmp	r3, #71	@ 0x47
 802191e:	4680      	mov	r8, r0
 8021920:	d129      	bne.n	8021976 <_printf_float+0x172>
 8021922:	1cc8      	adds	r0, r1, #3
 8021924:	db02      	blt.n	802192c <_printf_float+0x128>
 8021926:	6863      	ldr	r3, [r4, #4]
 8021928:	4299      	cmp	r1, r3
 802192a:	dd41      	ble.n	80219b0 <_printf_float+0x1ac>
 802192c:	f1aa 0a02 	sub.w	sl, sl, #2
 8021930:	fa5f fa8a 	uxtb.w	sl, sl
 8021934:	3901      	subs	r1, #1
 8021936:	4652      	mov	r2, sl
 8021938:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802193c:	9109      	str	r1, [sp, #36]	@ 0x24
 802193e:	f7ff ff26 	bl	802178e <__exponent>
 8021942:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021944:	1813      	adds	r3, r2, r0
 8021946:	2a01      	cmp	r2, #1
 8021948:	4681      	mov	r9, r0
 802194a:	6123      	str	r3, [r4, #16]
 802194c:	dc02      	bgt.n	8021954 <_printf_float+0x150>
 802194e:	6822      	ldr	r2, [r4, #0]
 8021950:	07d2      	lsls	r2, r2, #31
 8021952:	d501      	bpl.n	8021958 <_printf_float+0x154>
 8021954:	3301      	adds	r3, #1
 8021956:	6123      	str	r3, [r4, #16]
 8021958:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802195c:	2b00      	cmp	r3, #0
 802195e:	d0a2      	beq.n	80218a6 <_printf_float+0xa2>
 8021960:	232d      	movs	r3, #45	@ 0x2d
 8021962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021966:	e79e      	b.n	80218a6 <_printf_float+0xa2>
 8021968:	9a06      	ldr	r2, [sp, #24]
 802196a:	2a47      	cmp	r2, #71	@ 0x47
 802196c:	d1c2      	bne.n	80218f4 <_printf_float+0xf0>
 802196e:	2b00      	cmp	r3, #0
 8021970:	d1c0      	bne.n	80218f4 <_printf_float+0xf0>
 8021972:	2301      	movs	r3, #1
 8021974:	e7bd      	b.n	80218f2 <_printf_float+0xee>
 8021976:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802197a:	d9db      	bls.n	8021934 <_printf_float+0x130>
 802197c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8021980:	d118      	bne.n	80219b4 <_printf_float+0x1b0>
 8021982:	2900      	cmp	r1, #0
 8021984:	6863      	ldr	r3, [r4, #4]
 8021986:	dd0b      	ble.n	80219a0 <_printf_float+0x19c>
 8021988:	6121      	str	r1, [r4, #16]
 802198a:	b913      	cbnz	r3, 8021992 <_printf_float+0x18e>
 802198c:	6822      	ldr	r2, [r4, #0]
 802198e:	07d0      	lsls	r0, r2, #31
 8021990:	d502      	bpl.n	8021998 <_printf_float+0x194>
 8021992:	3301      	adds	r3, #1
 8021994:	440b      	add	r3, r1
 8021996:	6123      	str	r3, [r4, #16]
 8021998:	65a1      	str	r1, [r4, #88]	@ 0x58
 802199a:	f04f 0900 	mov.w	r9, #0
 802199e:	e7db      	b.n	8021958 <_printf_float+0x154>
 80219a0:	b913      	cbnz	r3, 80219a8 <_printf_float+0x1a4>
 80219a2:	6822      	ldr	r2, [r4, #0]
 80219a4:	07d2      	lsls	r2, r2, #31
 80219a6:	d501      	bpl.n	80219ac <_printf_float+0x1a8>
 80219a8:	3302      	adds	r3, #2
 80219aa:	e7f4      	b.n	8021996 <_printf_float+0x192>
 80219ac:	2301      	movs	r3, #1
 80219ae:	e7f2      	b.n	8021996 <_printf_float+0x192>
 80219b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80219b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80219b6:	4299      	cmp	r1, r3
 80219b8:	db05      	blt.n	80219c6 <_printf_float+0x1c2>
 80219ba:	6823      	ldr	r3, [r4, #0]
 80219bc:	6121      	str	r1, [r4, #16]
 80219be:	07d8      	lsls	r0, r3, #31
 80219c0:	d5ea      	bpl.n	8021998 <_printf_float+0x194>
 80219c2:	1c4b      	adds	r3, r1, #1
 80219c4:	e7e7      	b.n	8021996 <_printf_float+0x192>
 80219c6:	2900      	cmp	r1, #0
 80219c8:	bfd4      	ite	le
 80219ca:	f1c1 0202 	rsble	r2, r1, #2
 80219ce:	2201      	movgt	r2, #1
 80219d0:	4413      	add	r3, r2
 80219d2:	e7e0      	b.n	8021996 <_printf_float+0x192>
 80219d4:	6823      	ldr	r3, [r4, #0]
 80219d6:	055a      	lsls	r2, r3, #21
 80219d8:	d407      	bmi.n	80219ea <_printf_float+0x1e6>
 80219da:	6923      	ldr	r3, [r4, #16]
 80219dc:	4642      	mov	r2, r8
 80219de:	4631      	mov	r1, r6
 80219e0:	4628      	mov	r0, r5
 80219e2:	47b8      	blx	r7
 80219e4:	3001      	adds	r0, #1
 80219e6:	d12b      	bne.n	8021a40 <_printf_float+0x23c>
 80219e8:	e767      	b.n	80218ba <_printf_float+0xb6>
 80219ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80219ee:	f240 80dd 	bls.w	8021bac <_printf_float+0x3a8>
 80219f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80219f6:	2200      	movs	r2, #0
 80219f8:	2300      	movs	r3, #0
 80219fa:	f7df f865 	bl	8000ac8 <__aeabi_dcmpeq>
 80219fe:	2800      	cmp	r0, #0
 8021a00:	d033      	beq.n	8021a6a <_printf_float+0x266>
 8021a02:	4a37      	ldr	r2, [pc, #220]	@ (8021ae0 <_printf_float+0x2dc>)
 8021a04:	2301      	movs	r3, #1
 8021a06:	4631      	mov	r1, r6
 8021a08:	4628      	mov	r0, r5
 8021a0a:	47b8      	blx	r7
 8021a0c:	3001      	adds	r0, #1
 8021a0e:	f43f af54 	beq.w	80218ba <_printf_float+0xb6>
 8021a12:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8021a16:	4543      	cmp	r3, r8
 8021a18:	db02      	blt.n	8021a20 <_printf_float+0x21c>
 8021a1a:	6823      	ldr	r3, [r4, #0]
 8021a1c:	07d8      	lsls	r0, r3, #31
 8021a1e:	d50f      	bpl.n	8021a40 <_printf_float+0x23c>
 8021a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021a24:	4631      	mov	r1, r6
 8021a26:	4628      	mov	r0, r5
 8021a28:	47b8      	blx	r7
 8021a2a:	3001      	adds	r0, #1
 8021a2c:	f43f af45 	beq.w	80218ba <_printf_float+0xb6>
 8021a30:	f04f 0900 	mov.w	r9, #0
 8021a34:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8021a38:	f104 0a1a 	add.w	sl, r4, #26
 8021a3c:	45c8      	cmp	r8, r9
 8021a3e:	dc09      	bgt.n	8021a54 <_printf_float+0x250>
 8021a40:	6823      	ldr	r3, [r4, #0]
 8021a42:	079b      	lsls	r3, r3, #30
 8021a44:	f100 8103 	bmi.w	8021c4e <_printf_float+0x44a>
 8021a48:	68e0      	ldr	r0, [r4, #12]
 8021a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021a4c:	4298      	cmp	r0, r3
 8021a4e:	bfb8      	it	lt
 8021a50:	4618      	movlt	r0, r3
 8021a52:	e734      	b.n	80218be <_printf_float+0xba>
 8021a54:	2301      	movs	r3, #1
 8021a56:	4652      	mov	r2, sl
 8021a58:	4631      	mov	r1, r6
 8021a5a:	4628      	mov	r0, r5
 8021a5c:	47b8      	blx	r7
 8021a5e:	3001      	adds	r0, #1
 8021a60:	f43f af2b 	beq.w	80218ba <_printf_float+0xb6>
 8021a64:	f109 0901 	add.w	r9, r9, #1
 8021a68:	e7e8      	b.n	8021a3c <_printf_float+0x238>
 8021a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021a6c:	2b00      	cmp	r3, #0
 8021a6e:	dc39      	bgt.n	8021ae4 <_printf_float+0x2e0>
 8021a70:	4a1b      	ldr	r2, [pc, #108]	@ (8021ae0 <_printf_float+0x2dc>)
 8021a72:	2301      	movs	r3, #1
 8021a74:	4631      	mov	r1, r6
 8021a76:	4628      	mov	r0, r5
 8021a78:	47b8      	blx	r7
 8021a7a:	3001      	adds	r0, #1
 8021a7c:	f43f af1d 	beq.w	80218ba <_printf_float+0xb6>
 8021a80:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8021a84:	ea59 0303 	orrs.w	r3, r9, r3
 8021a88:	d102      	bne.n	8021a90 <_printf_float+0x28c>
 8021a8a:	6823      	ldr	r3, [r4, #0]
 8021a8c:	07d9      	lsls	r1, r3, #31
 8021a8e:	d5d7      	bpl.n	8021a40 <_printf_float+0x23c>
 8021a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021a94:	4631      	mov	r1, r6
 8021a96:	4628      	mov	r0, r5
 8021a98:	47b8      	blx	r7
 8021a9a:	3001      	adds	r0, #1
 8021a9c:	f43f af0d 	beq.w	80218ba <_printf_float+0xb6>
 8021aa0:	f04f 0a00 	mov.w	sl, #0
 8021aa4:	f104 0b1a 	add.w	fp, r4, #26
 8021aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021aaa:	425b      	negs	r3, r3
 8021aac:	4553      	cmp	r3, sl
 8021aae:	dc01      	bgt.n	8021ab4 <_printf_float+0x2b0>
 8021ab0:	464b      	mov	r3, r9
 8021ab2:	e793      	b.n	80219dc <_printf_float+0x1d8>
 8021ab4:	2301      	movs	r3, #1
 8021ab6:	465a      	mov	r2, fp
 8021ab8:	4631      	mov	r1, r6
 8021aba:	4628      	mov	r0, r5
 8021abc:	47b8      	blx	r7
 8021abe:	3001      	adds	r0, #1
 8021ac0:	f43f aefb 	beq.w	80218ba <_printf_float+0xb6>
 8021ac4:	f10a 0a01 	add.w	sl, sl, #1
 8021ac8:	e7ee      	b.n	8021aa8 <_printf_float+0x2a4>
 8021aca:	bf00      	nop
 8021acc:	7fefffff 	.word	0x7fefffff
 8021ad0:	080255a0 	.word	0x080255a0
 8021ad4:	080255a4 	.word	0x080255a4
 8021ad8:	080255a8 	.word	0x080255a8
 8021adc:	080255ac 	.word	0x080255ac
 8021ae0:	080255b0 	.word	0x080255b0
 8021ae4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021ae6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8021aea:	4553      	cmp	r3, sl
 8021aec:	bfa8      	it	ge
 8021aee:	4653      	movge	r3, sl
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	4699      	mov	r9, r3
 8021af4:	dc36      	bgt.n	8021b64 <_printf_float+0x360>
 8021af6:	f04f 0b00 	mov.w	fp, #0
 8021afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021afe:	f104 021a 	add.w	r2, r4, #26
 8021b02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8021b04:	9306      	str	r3, [sp, #24]
 8021b06:	eba3 0309 	sub.w	r3, r3, r9
 8021b0a:	455b      	cmp	r3, fp
 8021b0c:	dc31      	bgt.n	8021b72 <_printf_float+0x36e>
 8021b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b10:	459a      	cmp	sl, r3
 8021b12:	dc3a      	bgt.n	8021b8a <_printf_float+0x386>
 8021b14:	6823      	ldr	r3, [r4, #0]
 8021b16:	07da      	lsls	r2, r3, #31
 8021b18:	d437      	bmi.n	8021b8a <_printf_float+0x386>
 8021b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b1c:	ebaa 0903 	sub.w	r9, sl, r3
 8021b20:	9b06      	ldr	r3, [sp, #24]
 8021b22:	ebaa 0303 	sub.w	r3, sl, r3
 8021b26:	4599      	cmp	r9, r3
 8021b28:	bfa8      	it	ge
 8021b2a:	4699      	movge	r9, r3
 8021b2c:	f1b9 0f00 	cmp.w	r9, #0
 8021b30:	dc33      	bgt.n	8021b9a <_printf_float+0x396>
 8021b32:	f04f 0800 	mov.w	r8, #0
 8021b36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8021b3a:	f104 0b1a 	add.w	fp, r4, #26
 8021b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b40:	ebaa 0303 	sub.w	r3, sl, r3
 8021b44:	eba3 0309 	sub.w	r3, r3, r9
 8021b48:	4543      	cmp	r3, r8
 8021b4a:	f77f af79 	ble.w	8021a40 <_printf_float+0x23c>
 8021b4e:	2301      	movs	r3, #1
 8021b50:	465a      	mov	r2, fp
 8021b52:	4631      	mov	r1, r6
 8021b54:	4628      	mov	r0, r5
 8021b56:	47b8      	blx	r7
 8021b58:	3001      	adds	r0, #1
 8021b5a:	f43f aeae 	beq.w	80218ba <_printf_float+0xb6>
 8021b5e:	f108 0801 	add.w	r8, r8, #1
 8021b62:	e7ec      	b.n	8021b3e <_printf_float+0x33a>
 8021b64:	4642      	mov	r2, r8
 8021b66:	4631      	mov	r1, r6
 8021b68:	4628      	mov	r0, r5
 8021b6a:	47b8      	blx	r7
 8021b6c:	3001      	adds	r0, #1
 8021b6e:	d1c2      	bne.n	8021af6 <_printf_float+0x2f2>
 8021b70:	e6a3      	b.n	80218ba <_printf_float+0xb6>
 8021b72:	2301      	movs	r3, #1
 8021b74:	4631      	mov	r1, r6
 8021b76:	4628      	mov	r0, r5
 8021b78:	9206      	str	r2, [sp, #24]
 8021b7a:	47b8      	blx	r7
 8021b7c:	3001      	adds	r0, #1
 8021b7e:	f43f ae9c 	beq.w	80218ba <_printf_float+0xb6>
 8021b82:	9a06      	ldr	r2, [sp, #24]
 8021b84:	f10b 0b01 	add.w	fp, fp, #1
 8021b88:	e7bb      	b.n	8021b02 <_printf_float+0x2fe>
 8021b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021b8e:	4631      	mov	r1, r6
 8021b90:	4628      	mov	r0, r5
 8021b92:	47b8      	blx	r7
 8021b94:	3001      	adds	r0, #1
 8021b96:	d1c0      	bne.n	8021b1a <_printf_float+0x316>
 8021b98:	e68f      	b.n	80218ba <_printf_float+0xb6>
 8021b9a:	9a06      	ldr	r2, [sp, #24]
 8021b9c:	464b      	mov	r3, r9
 8021b9e:	4442      	add	r2, r8
 8021ba0:	4631      	mov	r1, r6
 8021ba2:	4628      	mov	r0, r5
 8021ba4:	47b8      	blx	r7
 8021ba6:	3001      	adds	r0, #1
 8021ba8:	d1c3      	bne.n	8021b32 <_printf_float+0x32e>
 8021baa:	e686      	b.n	80218ba <_printf_float+0xb6>
 8021bac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8021bb0:	f1ba 0f01 	cmp.w	sl, #1
 8021bb4:	dc01      	bgt.n	8021bba <_printf_float+0x3b6>
 8021bb6:	07db      	lsls	r3, r3, #31
 8021bb8:	d536      	bpl.n	8021c28 <_printf_float+0x424>
 8021bba:	2301      	movs	r3, #1
 8021bbc:	4642      	mov	r2, r8
 8021bbe:	4631      	mov	r1, r6
 8021bc0:	4628      	mov	r0, r5
 8021bc2:	47b8      	blx	r7
 8021bc4:	3001      	adds	r0, #1
 8021bc6:	f43f ae78 	beq.w	80218ba <_printf_float+0xb6>
 8021bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8021bce:	4631      	mov	r1, r6
 8021bd0:	4628      	mov	r0, r5
 8021bd2:	47b8      	blx	r7
 8021bd4:	3001      	adds	r0, #1
 8021bd6:	f43f ae70 	beq.w	80218ba <_printf_float+0xb6>
 8021bda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8021bde:	2200      	movs	r2, #0
 8021be0:	2300      	movs	r3, #0
 8021be2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8021be6:	f7de ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8021bea:	b9c0      	cbnz	r0, 8021c1e <_printf_float+0x41a>
 8021bec:	4653      	mov	r3, sl
 8021bee:	f108 0201 	add.w	r2, r8, #1
 8021bf2:	4631      	mov	r1, r6
 8021bf4:	4628      	mov	r0, r5
 8021bf6:	47b8      	blx	r7
 8021bf8:	3001      	adds	r0, #1
 8021bfa:	d10c      	bne.n	8021c16 <_printf_float+0x412>
 8021bfc:	e65d      	b.n	80218ba <_printf_float+0xb6>
 8021bfe:	2301      	movs	r3, #1
 8021c00:	465a      	mov	r2, fp
 8021c02:	4631      	mov	r1, r6
 8021c04:	4628      	mov	r0, r5
 8021c06:	47b8      	blx	r7
 8021c08:	3001      	adds	r0, #1
 8021c0a:	f43f ae56 	beq.w	80218ba <_printf_float+0xb6>
 8021c0e:	f108 0801 	add.w	r8, r8, #1
 8021c12:	45d0      	cmp	r8, sl
 8021c14:	dbf3      	blt.n	8021bfe <_printf_float+0x3fa>
 8021c16:	464b      	mov	r3, r9
 8021c18:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8021c1c:	e6df      	b.n	80219de <_printf_float+0x1da>
 8021c1e:	f04f 0800 	mov.w	r8, #0
 8021c22:	f104 0b1a 	add.w	fp, r4, #26
 8021c26:	e7f4      	b.n	8021c12 <_printf_float+0x40e>
 8021c28:	2301      	movs	r3, #1
 8021c2a:	4642      	mov	r2, r8
 8021c2c:	e7e1      	b.n	8021bf2 <_printf_float+0x3ee>
 8021c2e:	2301      	movs	r3, #1
 8021c30:	464a      	mov	r2, r9
 8021c32:	4631      	mov	r1, r6
 8021c34:	4628      	mov	r0, r5
 8021c36:	47b8      	blx	r7
 8021c38:	3001      	adds	r0, #1
 8021c3a:	f43f ae3e 	beq.w	80218ba <_printf_float+0xb6>
 8021c3e:	f108 0801 	add.w	r8, r8, #1
 8021c42:	68e3      	ldr	r3, [r4, #12]
 8021c44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021c46:	1a5b      	subs	r3, r3, r1
 8021c48:	4543      	cmp	r3, r8
 8021c4a:	dcf0      	bgt.n	8021c2e <_printf_float+0x42a>
 8021c4c:	e6fc      	b.n	8021a48 <_printf_float+0x244>
 8021c4e:	f04f 0800 	mov.w	r8, #0
 8021c52:	f104 0919 	add.w	r9, r4, #25
 8021c56:	e7f4      	b.n	8021c42 <_printf_float+0x43e>

08021c58 <_printf_common>:
 8021c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021c5c:	4616      	mov	r6, r2
 8021c5e:	4698      	mov	r8, r3
 8021c60:	688a      	ldr	r2, [r1, #8]
 8021c62:	690b      	ldr	r3, [r1, #16]
 8021c64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021c68:	4293      	cmp	r3, r2
 8021c6a:	bfb8      	it	lt
 8021c6c:	4613      	movlt	r3, r2
 8021c6e:	6033      	str	r3, [r6, #0]
 8021c70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021c74:	4607      	mov	r7, r0
 8021c76:	460c      	mov	r4, r1
 8021c78:	b10a      	cbz	r2, 8021c7e <_printf_common+0x26>
 8021c7a:	3301      	adds	r3, #1
 8021c7c:	6033      	str	r3, [r6, #0]
 8021c7e:	6823      	ldr	r3, [r4, #0]
 8021c80:	0699      	lsls	r1, r3, #26
 8021c82:	bf42      	ittt	mi
 8021c84:	6833      	ldrmi	r3, [r6, #0]
 8021c86:	3302      	addmi	r3, #2
 8021c88:	6033      	strmi	r3, [r6, #0]
 8021c8a:	6825      	ldr	r5, [r4, #0]
 8021c8c:	f015 0506 	ands.w	r5, r5, #6
 8021c90:	d106      	bne.n	8021ca0 <_printf_common+0x48>
 8021c92:	f104 0a19 	add.w	sl, r4, #25
 8021c96:	68e3      	ldr	r3, [r4, #12]
 8021c98:	6832      	ldr	r2, [r6, #0]
 8021c9a:	1a9b      	subs	r3, r3, r2
 8021c9c:	42ab      	cmp	r3, r5
 8021c9e:	dc26      	bgt.n	8021cee <_printf_common+0x96>
 8021ca0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021ca4:	6822      	ldr	r2, [r4, #0]
 8021ca6:	3b00      	subs	r3, #0
 8021ca8:	bf18      	it	ne
 8021caa:	2301      	movne	r3, #1
 8021cac:	0692      	lsls	r2, r2, #26
 8021cae:	d42b      	bmi.n	8021d08 <_printf_common+0xb0>
 8021cb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021cb4:	4641      	mov	r1, r8
 8021cb6:	4638      	mov	r0, r7
 8021cb8:	47c8      	blx	r9
 8021cba:	3001      	adds	r0, #1
 8021cbc:	d01e      	beq.n	8021cfc <_printf_common+0xa4>
 8021cbe:	6823      	ldr	r3, [r4, #0]
 8021cc0:	6922      	ldr	r2, [r4, #16]
 8021cc2:	f003 0306 	and.w	r3, r3, #6
 8021cc6:	2b04      	cmp	r3, #4
 8021cc8:	bf02      	ittt	eq
 8021cca:	68e5      	ldreq	r5, [r4, #12]
 8021ccc:	6833      	ldreq	r3, [r6, #0]
 8021cce:	1aed      	subeq	r5, r5, r3
 8021cd0:	68a3      	ldr	r3, [r4, #8]
 8021cd2:	bf0c      	ite	eq
 8021cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021cd8:	2500      	movne	r5, #0
 8021cda:	4293      	cmp	r3, r2
 8021cdc:	bfc4      	itt	gt
 8021cde:	1a9b      	subgt	r3, r3, r2
 8021ce0:	18ed      	addgt	r5, r5, r3
 8021ce2:	2600      	movs	r6, #0
 8021ce4:	341a      	adds	r4, #26
 8021ce6:	42b5      	cmp	r5, r6
 8021ce8:	d11a      	bne.n	8021d20 <_printf_common+0xc8>
 8021cea:	2000      	movs	r0, #0
 8021cec:	e008      	b.n	8021d00 <_printf_common+0xa8>
 8021cee:	2301      	movs	r3, #1
 8021cf0:	4652      	mov	r2, sl
 8021cf2:	4641      	mov	r1, r8
 8021cf4:	4638      	mov	r0, r7
 8021cf6:	47c8      	blx	r9
 8021cf8:	3001      	adds	r0, #1
 8021cfa:	d103      	bne.n	8021d04 <_printf_common+0xac>
 8021cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d04:	3501      	adds	r5, #1
 8021d06:	e7c6      	b.n	8021c96 <_printf_common+0x3e>
 8021d08:	18e1      	adds	r1, r4, r3
 8021d0a:	1c5a      	adds	r2, r3, #1
 8021d0c:	2030      	movs	r0, #48	@ 0x30
 8021d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021d12:	4422      	add	r2, r4
 8021d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021d18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8021d1c:	3302      	adds	r3, #2
 8021d1e:	e7c7      	b.n	8021cb0 <_printf_common+0x58>
 8021d20:	2301      	movs	r3, #1
 8021d22:	4622      	mov	r2, r4
 8021d24:	4641      	mov	r1, r8
 8021d26:	4638      	mov	r0, r7
 8021d28:	47c8      	blx	r9
 8021d2a:	3001      	adds	r0, #1
 8021d2c:	d0e6      	beq.n	8021cfc <_printf_common+0xa4>
 8021d2e:	3601      	adds	r6, #1
 8021d30:	e7d9      	b.n	8021ce6 <_printf_common+0x8e>
	...

08021d34 <_printf_i>:
 8021d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021d38:	7e0f      	ldrb	r7, [r1, #24]
 8021d3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8021d3c:	2f78      	cmp	r7, #120	@ 0x78
 8021d3e:	4691      	mov	r9, r2
 8021d40:	4680      	mov	r8, r0
 8021d42:	460c      	mov	r4, r1
 8021d44:	469a      	mov	sl, r3
 8021d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8021d4a:	d807      	bhi.n	8021d5c <_printf_i+0x28>
 8021d4c:	2f62      	cmp	r7, #98	@ 0x62
 8021d4e:	d80a      	bhi.n	8021d66 <_printf_i+0x32>
 8021d50:	2f00      	cmp	r7, #0
 8021d52:	f000 80d2 	beq.w	8021efa <_printf_i+0x1c6>
 8021d56:	2f58      	cmp	r7, #88	@ 0x58
 8021d58:	f000 80b9 	beq.w	8021ece <_printf_i+0x19a>
 8021d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021d64:	e03a      	b.n	8021ddc <_printf_i+0xa8>
 8021d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8021d6a:	2b15      	cmp	r3, #21
 8021d6c:	d8f6      	bhi.n	8021d5c <_printf_i+0x28>
 8021d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8021d74 <_printf_i+0x40>)
 8021d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021d74:	08021dcd 	.word	0x08021dcd
 8021d78:	08021de1 	.word	0x08021de1
 8021d7c:	08021d5d 	.word	0x08021d5d
 8021d80:	08021d5d 	.word	0x08021d5d
 8021d84:	08021d5d 	.word	0x08021d5d
 8021d88:	08021d5d 	.word	0x08021d5d
 8021d8c:	08021de1 	.word	0x08021de1
 8021d90:	08021d5d 	.word	0x08021d5d
 8021d94:	08021d5d 	.word	0x08021d5d
 8021d98:	08021d5d 	.word	0x08021d5d
 8021d9c:	08021d5d 	.word	0x08021d5d
 8021da0:	08021ee1 	.word	0x08021ee1
 8021da4:	08021e0b 	.word	0x08021e0b
 8021da8:	08021e9b 	.word	0x08021e9b
 8021dac:	08021d5d 	.word	0x08021d5d
 8021db0:	08021d5d 	.word	0x08021d5d
 8021db4:	08021f03 	.word	0x08021f03
 8021db8:	08021d5d 	.word	0x08021d5d
 8021dbc:	08021e0b 	.word	0x08021e0b
 8021dc0:	08021d5d 	.word	0x08021d5d
 8021dc4:	08021d5d 	.word	0x08021d5d
 8021dc8:	08021ea3 	.word	0x08021ea3
 8021dcc:	6833      	ldr	r3, [r6, #0]
 8021dce:	1d1a      	adds	r2, r3, #4
 8021dd0:	681b      	ldr	r3, [r3, #0]
 8021dd2:	6032      	str	r2, [r6, #0]
 8021dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021ddc:	2301      	movs	r3, #1
 8021dde:	e09d      	b.n	8021f1c <_printf_i+0x1e8>
 8021de0:	6833      	ldr	r3, [r6, #0]
 8021de2:	6820      	ldr	r0, [r4, #0]
 8021de4:	1d19      	adds	r1, r3, #4
 8021de6:	6031      	str	r1, [r6, #0]
 8021de8:	0606      	lsls	r6, r0, #24
 8021dea:	d501      	bpl.n	8021df0 <_printf_i+0xbc>
 8021dec:	681d      	ldr	r5, [r3, #0]
 8021dee:	e003      	b.n	8021df8 <_printf_i+0xc4>
 8021df0:	0645      	lsls	r5, r0, #25
 8021df2:	d5fb      	bpl.n	8021dec <_printf_i+0xb8>
 8021df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021df8:	2d00      	cmp	r5, #0
 8021dfa:	da03      	bge.n	8021e04 <_printf_i+0xd0>
 8021dfc:	232d      	movs	r3, #45	@ 0x2d
 8021dfe:	426d      	negs	r5, r5
 8021e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021e04:	4859      	ldr	r0, [pc, #356]	@ (8021f6c <_printf_i+0x238>)
 8021e06:	230a      	movs	r3, #10
 8021e08:	e011      	b.n	8021e2e <_printf_i+0xfa>
 8021e0a:	6821      	ldr	r1, [r4, #0]
 8021e0c:	6833      	ldr	r3, [r6, #0]
 8021e0e:	0608      	lsls	r0, r1, #24
 8021e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8021e14:	d402      	bmi.n	8021e1c <_printf_i+0xe8>
 8021e16:	0649      	lsls	r1, r1, #25
 8021e18:	bf48      	it	mi
 8021e1a:	b2ad      	uxthmi	r5, r5
 8021e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8021e1e:	4853      	ldr	r0, [pc, #332]	@ (8021f6c <_printf_i+0x238>)
 8021e20:	6033      	str	r3, [r6, #0]
 8021e22:	bf14      	ite	ne
 8021e24:	230a      	movne	r3, #10
 8021e26:	2308      	moveq	r3, #8
 8021e28:	2100      	movs	r1, #0
 8021e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021e2e:	6866      	ldr	r6, [r4, #4]
 8021e30:	60a6      	str	r6, [r4, #8]
 8021e32:	2e00      	cmp	r6, #0
 8021e34:	bfa2      	ittt	ge
 8021e36:	6821      	ldrge	r1, [r4, #0]
 8021e38:	f021 0104 	bicge.w	r1, r1, #4
 8021e3c:	6021      	strge	r1, [r4, #0]
 8021e3e:	b90d      	cbnz	r5, 8021e44 <_printf_i+0x110>
 8021e40:	2e00      	cmp	r6, #0
 8021e42:	d04b      	beq.n	8021edc <_printf_i+0x1a8>
 8021e44:	4616      	mov	r6, r2
 8021e46:	fbb5 f1f3 	udiv	r1, r5, r3
 8021e4a:	fb03 5711 	mls	r7, r3, r1, r5
 8021e4e:	5dc7      	ldrb	r7, [r0, r7]
 8021e50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021e54:	462f      	mov	r7, r5
 8021e56:	42bb      	cmp	r3, r7
 8021e58:	460d      	mov	r5, r1
 8021e5a:	d9f4      	bls.n	8021e46 <_printf_i+0x112>
 8021e5c:	2b08      	cmp	r3, #8
 8021e5e:	d10b      	bne.n	8021e78 <_printf_i+0x144>
 8021e60:	6823      	ldr	r3, [r4, #0]
 8021e62:	07df      	lsls	r7, r3, #31
 8021e64:	d508      	bpl.n	8021e78 <_printf_i+0x144>
 8021e66:	6923      	ldr	r3, [r4, #16]
 8021e68:	6861      	ldr	r1, [r4, #4]
 8021e6a:	4299      	cmp	r1, r3
 8021e6c:	bfde      	ittt	le
 8021e6e:	2330      	movle	r3, #48	@ 0x30
 8021e70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021e74:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8021e78:	1b92      	subs	r2, r2, r6
 8021e7a:	6122      	str	r2, [r4, #16]
 8021e7c:	f8cd a000 	str.w	sl, [sp]
 8021e80:	464b      	mov	r3, r9
 8021e82:	aa03      	add	r2, sp, #12
 8021e84:	4621      	mov	r1, r4
 8021e86:	4640      	mov	r0, r8
 8021e88:	f7ff fee6 	bl	8021c58 <_printf_common>
 8021e8c:	3001      	adds	r0, #1
 8021e8e:	d14a      	bne.n	8021f26 <_printf_i+0x1f2>
 8021e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021e94:	b004      	add	sp, #16
 8021e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e9a:	6823      	ldr	r3, [r4, #0]
 8021e9c:	f043 0320 	orr.w	r3, r3, #32
 8021ea0:	6023      	str	r3, [r4, #0]
 8021ea2:	4833      	ldr	r0, [pc, #204]	@ (8021f70 <_printf_i+0x23c>)
 8021ea4:	2778      	movs	r7, #120	@ 0x78
 8021ea6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021eaa:	6823      	ldr	r3, [r4, #0]
 8021eac:	6831      	ldr	r1, [r6, #0]
 8021eae:	061f      	lsls	r7, r3, #24
 8021eb0:	f851 5b04 	ldr.w	r5, [r1], #4
 8021eb4:	d402      	bmi.n	8021ebc <_printf_i+0x188>
 8021eb6:	065f      	lsls	r7, r3, #25
 8021eb8:	bf48      	it	mi
 8021eba:	b2ad      	uxthmi	r5, r5
 8021ebc:	6031      	str	r1, [r6, #0]
 8021ebe:	07d9      	lsls	r1, r3, #31
 8021ec0:	bf44      	itt	mi
 8021ec2:	f043 0320 	orrmi.w	r3, r3, #32
 8021ec6:	6023      	strmi	r3, [r4, #0]
 8021ec8:	b11d      	cbz	r5, 8021ed2 <_printf_i+0x19e>
 8021eca:	2310      	movs	r3, #16
 8021ecc:	e7ac      	b.n	8021e28 <_printf_i+0xf4>
 8021ece:	4827      	ldr	r0, [pc, #156]	@ (8021f6c <_printf_i+0x238>)
 8021ed0:	e7e9      	b.n	8021ea6 <_printf_i+0x172>
 8021ed2:	6823      	ldr	r3, [r4, #0]
 8021ed4:	f023 0320 	bic.w	r3, r3, #32
 8021ed8:	6023      	str	r3, [r4, #0]
 8021eda:	e7f6      	b.n	8021eca <_printf_i+0x196>
 8021edc:	4616      	mov	r6, r2
 8021ede:	e7bd      	b.n	8021e5c <_printf_i+0x128>
 8021ee0:	6833      	ldr	r3, [r6, #0]
 8021ee2:	6825      	ldr	r5, [r4, #0]
 8021ee4:	6961      	ldr	r1, [r4, #20]
 8021ee6:	1d18      	adds	r0, r3, #4
 8021ee8:	6030      	str	r0, [r6, #0]
 8021eea:	062e      	lsls	r6, r5, #24
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	d501      	bpl.n	8021ef4 <_printf_i+0x1c0>
 8021ef0:	6019      	str	r1, [r3, #0]
 8021ef2:	e002      	b.n	8021efa <_printf_i+0x1c6>
 8021ef4:	0668      	lsls	r0, r5, #25
 8021ef6:	d5fb      	bpl.n	8021ef0 <_printf_i+0x1bc>
 8021ef8:	8019      	strh	r1, [r3, #0]
 8021efa:	2300      	movs	r3, #0
 8021efc:	6123      	str	r3, [r4, #16]
 8021efe:	4616      	mov	r6, r2
 8021f00:	e7bc      	b.n	8021e7c <_printf_i+0x148>
 8021f02:	6833      	ldr	r3, [r6, #0]
 8021f04:	1d1a      	adds	r2, r3, #4
 8021f06:	6032      	str	r2, [r6, #0]
 8021f08:	681e      	ldr	r6, [r3, #0]
 8021f0a:	6862      	ldr	r2, [r4, #4]
 8021f0c:	2100      	movs	r1, #0
 8021f0e:	4630      	mov	r0, r6
 8021f10:	f7de f95e 	bl	80001d0 <memchr>
 8021f14:	b108      	cbz	r0, 8021f1a <_printf_i+0x1e6>
 8021f16:	1b80      	subs	r0, r0, r6
 8021f18:	6060      	str	r0, [r4, #4]
 8021f1a:	6863      	ldr	r3, [r4, #4]
 8021f1c:	6123      	str	r3, [r4, #16]
 8021f1e:	2300      	movs	r3, #0
 8021f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021f24:	e7aa      	b.n	8021e7c <_printf_i+0x148>
 8021f26:	6923      	ldr	r3, [r4, #16]
 8021f28:	4632      	mov	r2, r6
 8021f2a:	4649      	mov	r1, r9
 8021f2c:	4640      	mov	r0, r8
 8021f2e:	47d0      	blx	sl
 8021f30:	3001      	adds	r0, #1
 8021f32:	d0ad      	beq.n	8021e90 <_printf_i+0x15c>
 8021f34:	6823      	ldr	r3, [r4, #0]
 8021f36:	079b      	lsls	r3, r3, #30
 8021f38:	d413      	bmi.n	8021f62 <_printf_i+0x22e>
 8021f3a:	68e0      	ldr	r0, [r4, #12]
 8021f3c:	9b03      	ldr	r3, [sp, #12]
 8021f3e:	4298      	cmp	r0, r3
 8021f40:	bfb8      	it	lt
 8021f42:	4618      	movlt	r0, r3
 8021f44:	e7a6      	b.n	8021e94 <_printf_i+0x160>
 8021f46:	2301      	movs	r3, #1
 8021f48:	4632      	mov	r2, r6
 8021f4a:	4649      	mov	r1, r9
 8021f4c:	4640      	mov	r0, r8
 8021f4e:	47d0      	blx	sl
 8021f50:	3001      	adds	r0, #1
 8021f52:	d09d      	beq.n	8021e90 <_printf_i+0x15c>
 8021f54:	3501      	adds	r5, #1
 8021f56:	68e3      	ldr	r3, [r4, #12]
 8021f58:	9903      	ldr	r1, [sp, #12]
 8021f5a:	1a5b      	subs	r3, r3, r1
 8021f5c:	42ab      	cmp	r3, r5
 8021f5e:	dcf2      	bgt.n	8021f46 <_printf_i+0x212>
 8021f60:	e7eb      	b.n	8021f3a <_printf_i+0x206>
 8021f62:	2500      	movs	r5, #0
 8021f64:	f104 0619 	add.w	r6, r4, #25
 8021f68:	e7f5      	b.n	8021f56 <_printf_i+0x222>
 8021f6a:	bf00      	nop
 8021f6c:	080255b2 	.word	0x080255b2
 8021f70:	080255c3 	.word	0x080255c3

08021f74 <std>:
 8021f74:	2300      	movs	r3, #0
 8021f76:	b510      	push	{r4, lr}
 8021f78:	4604      	mov	r4, r0
 8021f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8021f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021f82:	6083      	str	r3, [r0, #8]
 8021f84:	8181      	strh	r1, [r0, #12]
 8021f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8021f88:	81c2      	strh	r2, [r0, #14]
 8021f8a:	6183      	str	r3, [r0, #24]
 8021f8c:	4619      	mov	r1, r3
 8021f8e:	2208      	movs	r2, #8
 8021f90:	305c      	adds	r0, #92	@ 0x5c
 8021f92:	f000 f95b 	bl	802224c <memset>
 8021f96:	4b0d      	ldr	r3, [pc, #52]	@ (8021fcc <std+0x58>)
 8021f98:	6263      	str	r3, [r4, #36]	@ 0x24
 8021f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8021fd0 <std+0x5c>)
 8021f9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8021fd4 <std+0x60>)
 8021fa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8021fd8 <std+0x64>)
 8021fa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8021fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8021fdc <std+0x68>)
 8021fa8:	6224      	str	r4, [r4, #32]
 8021faa:	429c      	cmp	r4, r3
 8021fac:	d006      	beq.n	8021fbc <std+0x48>
 8021fae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021fb2:	4294      	cmp	r4, r2
 8021fb4:	d002      	beq.n	8021fbc <std+0x48>
 8021fb6:	33d0      	adds	r3, #208	@ 0xd0
 8021fb8:	429c      	cmp	r4, r3
 8021fba:	d105      	bne.n	8021fc8 <std+0x54>
 8021fbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021fc4:	f000 b9ce 	b.w	8022364 <__retarget_lock_init_recursive>
 8021fc8:	bd10      	pop	{r4, pc}
 8021fca:	bf00      	nop
 8021fcc:	08022139 	.word	0x08022139
 8021fd0:	0802215b 	.word	0x0802215b
 8021fd4:	08022193 	.word	0x08022193
 8021fd8:	080221b7 	.word	0x080221b7
 8021fdc:	20008008 	.word	0x20008008

08021fe0 <stdio_exit_handler>:
 8021fe0:	4a02      	ldr	r2, [pc, #8]	@ (8021fec <stdio_exit_handler+0xc>)
 8021fe2:	4903      	ldr	r1, [pc, #12]	@ (8021ff0 <stdio_exit_handler+0x10>)
 8021fe4:	4803      	ldr	r0, [pc, #12]	@ (8021ff4 <stdio_exit_handler+0x14>)
 8021fe6:	f000 b869 	b.w	80220bc <_fwalk_sglue>
 8021fea:	bf00      	nop
 8021fec:	200003d8 	.word	0x200003d8
 8021ff0:	08023b71 	.word	0x08023b71
 8021ff4:	200003e8 	.word	0x200003e8

08021ff8 <cleanup_stdio>:
 8021ff8:	6841      	ldr	r1, [r0, #4]
 8021ffa:	4b0c      	ldr	r3, [pc, #48]	@ (802202c <cleanup_stdio+0x34>)
 8021ffc:	4299      	cmp	r1, r3
 8021ffe:	b510      	push	{r4, lr}
 8022000:	4604      	mov	r4, r0
 8022002:	d001      	beq.n	8022008 <cleanup_stdio+0x10>
 8022004:	f001 fdb4 	bl	8023b70 <_fflush_r>
 8022008:	68a1      	ldr	r1, [r4, #8]
 802200a:	4b09      	ldr	r3, [pc, #36]	@ (8022030 <cleanup_stdio+0x38>)
 802200c:	4299      	cmp	r1, r3
 802200e:	d002      	beq.n	8022016 <cleanup_stdio+0x1e>
 8022010:	4620      	mov	r0, r4
 8022012:	f001 fdad 	bl	8023b70 <_fflush_r>
 8022016:	68e1      	ldr	r1, [r4, #12]
 8022018:	4b06      	ldr	r3, [pc, #24]	@ (8022034 <cleanup_stdio+0x3c>)
 802201a:	4299      	cmp	r1, r3
 802201c:	d004      	beq.n	8022028 <cleanup_stdio+0x30>
 802201e:	4620      	mov	r0, r4
 8022020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022024:	f001 bda4 	b.w	8023b70 <_fflush_r>
 8022028:	bd10      	pop	{r4, pc}
 802202a:	bf00      	nop
 802202c:	20008008 	.word	0x20008008
 8022030:	20008070 	.word	0x20008070
 8022034:	200080d8 	.word	0x200080d8

08022038 <global_stdio_init.part.0>:
 8022038:	b510      	push	{r4, lr}
 802203a:	4b0b      	ldr	r3, [pc, #44]	@ (8022068 <global_stdio_init.part.0+0x30>)
 802203c:	4c0b      	ldr	r4, [pc, #44]	@ (802206c <global_stdio_init.part.0+0x34>)
 802203e:	4a0c      	ldr	r2, [pc, #48]	@ (8022070 <global_stdio_init.part.0+0x38>)
 8022040:	601a      	str	r2, [r3, #0]
 8022042:	4620      	mov	r0, r4
 8022044:	2200      	movs	r2, #0
 8022046:	2104      	movs	r1, #4
 8022048:	f7ff ff94 	bl	8021f74 <std>
 802204c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022050:	2201      	movs	r2, #1
 8022052:	2109      	movs	r1, #9
 8022054:	f7ff ff8e 	bl	8021f74 <std>
 8022058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802205c:	2202      	movs	r2, #2
 802205e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022062:	2112      	movs	r1, #18
 8022064:	f7ff bf86 	b.w	8021f74 <std>
 8022068:	20008140 	.word	0x20008140
 802206c:	20008008 	.word	0x20008008
 8022070:	08021fe1 	.word	0x08021fe1

08022074 <__sfp_lock_acquire>:
 8022074:	4801      	ldr	r0, [pc, #4]	@ (802207c <__sfp_lock_acquire+0x8>)
 8022076:	f000 b976 	b.w	8022366 <__retarget_lock_acquire_recursive>
 802207a:	bf00      	nop
 802207c:	20008149 	.word	0x20008149

08022080 <__sfp_lock_release>:
 8022080:	4801      	ldr	r0, [pc, #4]	@ (8022088 <__sfp_lock_release+0x8>)
 8022082:	f000 b971 	b.w	8022368 <__retarget_lock_release_recursive>
 8022086:	bf00      	nop
 8022088:	20008149 	.word	0x20008149

0802208c <__sinit>:
 802208c:	b510      	push	{r4, lr}
 802208e:	4604      	mov	r4, r0
 8022090:	f7ff fff0 	bl	8022074 <__sfp_lock_acquire>
 8022094:	6a23      	ldr	r3, [r4, #32]
 8022096:	b11b      	cbz	r3, 80220a0 <__sinit+0x14>
 8022098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802209c:	f7ff bff0 	b.w	8022080 <__sfp_lock_release>
 80220a0:	4b04      	ldr	r3, [pc, #16]	@ (80220b4 <__sinit+0x28>)
 80220a2:	6223      	str	r3, [r4, #32]
 80220a4:	4b04      	ldr	r3, [pc, #16]	@ (80220b8 <__sinit+0x2c>)
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	d1f5      	bne.n	8022098 <__sinit+0xc>
 80220ac:	f7ff ffc4 	bl	8022038 <global_stdio_init.part.0>
 80220b0:	e7f2      	b.n	8022098 <__sinit+0xc>
 80220b2:	bf00      	nop
 80220b4:	08021ff9 	.word	0x08021ff9
 80220b8:	20008140 	.word	0x20008140

080220bc <_fwalk_sglue>:
 80220bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80220c0:	4607      	mov	r7, r0
 80220c2:	4688      	mov	r8, r1
 80220c4:	4614      	mov	r4, r2
 80220c6:	2600      	movs	r6, #0
 80220c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80220cc:	f1b9 0901 	subs.w	r9, r9, #1
 80220d0:	d505      	bpl.n	80220de <_fwalk_sglue+0x22>
 80220d2:	6824      	ldr	r4, [r4, #0]
 80220d4:	2c00      	cmp	r4, #0
 80220d6:	d1f7      	bne.n	80220c8 <_fwalk_sglue+0xc>
 80220d8:	4630      	mov	r0, r6
 80220da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80220de:	89ab      	ldrh	r3, [r5, #12]
 80220e0:	2b01      	cmp	r3, #1
 80220e2:	d907      	bls.n	80220f4 <_fwalk_sglue+0x38>
 80220e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80220e8:	3301      	adds	r3, #1
 80220ea:	d003      	beq.n	80220f4 <_fwalk_sglue+0x38>
 80220ec:	4629      	mov	r1, r5
 80220ee:	4638      	mov	r0, r7
 80220f0:	47c0      	blx	r8
 80220f2:	4306      	orrs	r6, r0
 80220f4:	3568      	adds	r5, #104	@ 0x68
 80220f6:	e7e9      	b.n	80220cc <_fwalk_sglue+0x10>

080220f8 <siprintf>:
 80220f8:	b40e      	push	{r1, r2, r3}
 80220fa:	b500      	push	{lr}
 80220fc:	b09c      	sub	sp, #112	@ 0x70
 80220fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8022100:	9002      	str	r0, [sp, #8]
 8022102:	9006      	str	r0, [sp, #24]
 8022104:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8022108:	4809      	ldr	r0, [pc, #36]	@ (8022130 <siprintf+0x38>)
 802210a:	9107      	str	r1, [sp, #28]
 802210c:	9104      	str	r1, [sp, #16]
 802210e:	4909      	ldr	r1, [pc, #36]	@ (8022134 <siprintf+0x3c>)
 8022110:	f853 2b04 	ldr.w	r2, [r3], #4
 8022114:	9105      	str	r1, [sp, #20]
 8022116:	6800      	ldr	r0, [r0, #0]
 8022118:	9301      	str	r3, [sp, #4]
 802211a:	a902      	add	r1, sp, #8
 802211c:	f001 fba8 	bl	8023870 <_svfiprintf_r>
 8022120:	9b02      	ldr	r3, [sp, #8]
 8022122:	2200      	movs	r2, #0
 8022124:	701a      	strb	r2, [r3, #0]
 8022126:	b01c      	add	sp, #112	@ 0x70
 8022128:	f85d eb04 	ldr.w	lr, [sp], #4
 802212c:	b003      	add	sp, #12
 802212e:	4770      	bx	lr
 8022130:	200003e4 	.word	0x200003e4
 8022134:	ffff0208 	.word	0xffff0208

08022138 <__sread>:
 8022138:	b510      	push	{r4, lr}
 802213a:	460c      	mov	r4, r1
 802213c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022140:	f000 f8b2 	bl	80222a8 <_read_r>
 8022144:	2800      	cmp	r0, #0
 8022146:	bfab      	itete	ge
 8022148:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802214a:	89a3      	ldrhlt	r3, [r4, #12]
 802214c:	181b      	addge	r3, r3, r0
 802214e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022152:	bfac      	ite	ge
 8022154:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022156:	81a3      	strhlt	r3, [r4, #12]
 8022158:	bd10      	pop	{r4, pc}

0802215a <__swrite>:
 802215a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802215e:	461f      	mov	r7, r3
 8022160:	898b      	ldrh	r3, [r1, #12]
 8022162:	05db      	lsls	r3, r3, #23
 8022164:	4605      	mov	r5, r0
 8022166:	460c      	mov	r4, r1
 8022168:	4616      	mov	r6, r2
 802216a:	d505      	bpl.n	8022178 <__swrite+0x1e>
 802216c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022170:	2302      	movs	r3, #2
 8022172:	2200      	movs	r2, #0
 8022174:	f000 f886 	bl	8022284 <_lseek_r>
 8022178:	89a3      	ldrh	r3, [r4, #12]
 802217a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802217e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022182:	81a3      	strh	r3, [r4, #12]
 8022184:	4632      	mov	r2, r6
 8022186:	463b      	mov	r3, r7
 8022188:	4628      	mov	r0, r5
 802218a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802218e:	f000 b8ad 	b.w	80222ec <_write_r>

08022192 <__sseek>:
 8022192:	b510      	push	{r4, lr}
 8022194:	460c      	mov	r4, r1
 8022196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802219a:	f000 f873 	bl	8022284 <_lseek_r>
 802219e:	1c43      	adds	r3, r0, #1
 80221a0:	89a3      	ldrh	r3, [r4, #12]
 80221a2:	bf15      	itete	ne
 80221a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80221a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80221aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80221ae:	81a3      	strheq	r3, [r4, #12]
 80221b0:	bf18      	it	ne
 80221b2:	81a3      	strhne	r3, [r4, #12]
 80221b4:	bd10      	pop	{r4, pc}

080221b6 <__sclose>:
 80221b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80221ba:	f000 b853 	b.w	8022264 <_close_r>
	...

080221c0 <asiprintf>:
 80221c0:	b40e      	push	{r1, r2, r3}
 80221c2:	b530      	push	{r4, r5, lr}
 80221c4:	b09c      	sub	sp, #112	@ 0x70
 80221c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80221c8:	4605      	mov	r5, r0
 80221ca:	490d      	ldr	r1, [pc, #52]	@ (8022200 <asiprintf+0x40>)
 80221cc:	480d      	ldr	r0, [pc, #52]	@ (8022204 <asiprintf+0x44>)
 80221ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80221d2:	6800      	ldr	r0, [r0, #0]
 80221d4:	9301      	str	r3, [sp, #4]
 80221d6:	2400      	movs	r4, #0
 80221d8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80221dc:	a902      	add	r1, sp, #8
 80221de:	9402      	str	r4, [sp, #8]
 80221e0:	9404      	str	r4, [sp, #16]
 80221e2:	9407      	str	r4, [sp, #28]
 80221e4:	f001 fb44 	bl	8023870 <_svfiprintf_r>
 80221e8:	2800      	cmp	r0, #0
 80221ea:	bfa1      	itttt	ge
 80221ec:	9b02      	ldrge	r3, [sp, #8]
 80221ee:	701c      	strbge	r4, [r3, #0]
 80221f0:	9b06      	ldrge	r3, [sp, #24]
 80221f2:	602b      	strge	r3, [r5, #0]
 80221f4:	b01c      	add	sp, #112	@ 0x70
 80221f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80221fa:	b003      	add	sp, #12
 80221fc:	4770      	bx	lr
 80221fe:	bf00      	nop
 8022200:	ffff0288 	.word	0xffff0288
 8022204:	200003e4 	.word	0x200003e4

08022208 <_vasiprintf_r>:
 8022208:	b530      	push	{r4, r5, lr}
 802220a:	460d      	mov	r5, r1
 802220c:	4909      	ldr	r1, [pc, #36]	@ (8022234 <_vasiprintf_r+0x2c>)
 802220e:	b09b      	sub	sp, #108	@ 0x6c
 8022210:	2400      	movs	r4, #0
 8022212:	e9cd 1403 	strd	r1, r4, [sp, #12]
 8022216:	4669      	mov	r1, sp
 8022218:	9400      	str	r4, [sp, #0]
 802221a:	9402      	str	r4, [sp, #8]
 802221c:	9405      	str	r4, [sp, #20]
 802221e:	f001 fb27 	bl	8023870 <_svfiprintf_r>
 8022222:	2800      	cmp	r0, #0
 8022224:	bfa1      	itttt	ge
 8022226:	9b00      	ldrge	r3, [sp, #0]
 8022228:	701c      	strbge	r4, [r3, #0]
 802222a:	9b04      	ldrge	r3, [sp, #16]
 802222c:	602b      	strge	r3, [r5, #0]
 802222e:	b01b      	add	sp, #108	@ 0x6c
 8022230:	bd30      	pop	{r4, r5, pc}
 8022232:	bf00      	nop
 8022234:	ffff0288 	.word	0xffff0288

08022238 <vasiprintf>:
 8022238:	4613      	mov	r3, r2
 802223a:	460a      	mov	r2, r1
 802223c:	4601      	mov	r1, r0
 802223e:	4802      	ldr	r0, [pc, #8]	@ (8022248 <vasiprintf+0x10>)
 8022240:	6800      	ldr	r0, [r0, #0]
 8022242:	f7ff bfe1 	b.w	8022208 <_vasiprintf_r>
 8022246:	bf00      	nop
 8022248:	200003e4 	.word	0x200003e4

0802224c <memset>:
 802224c:	4402      	add	r2, r0
 802224e:	4603      	mov	r3, r0
 8022250:	4293      	cmp	r3, r2
 8022252:	d100      	bne.n	8022256 <memset+0xa>
 8022254:	4770      	bx	lr
 8022256:	f803 1b01 	strb.w	r1, [r3], #1
 802225a:	e7f9      	b.n	8022250 <memset+0x4>

0802225c <_localeconv_r>:
 802225c:	4800      	ldr	r0, [pc, #0]	@ (8022260 <_localeconv_r+0x4>)
 802225e:	4770      	bx	lr
 8022260:	20000524 	.word	0x20000524

08022264 <_close_r>:
 8022264:	b538      	push	{r3, r4, r5, lr}
 8022266:	4d06      	ldr	r5, [pc, #24]	@ (8022280 <_close_r+0x1c>)
 8022268:	2300      	movs	r3, #0
 802226a:	4604      	mov	r4, r0
 802226c:	4608      	mov	r0, r1
 802226e:	602b      	str	r3, [r5, #0]
 8022270:	f7df fc60 	bl	8001b34 <_close>
 8022274:	1c43      	adds	r3, r0, #1
 8022276:	d102      	bne.n	802227e <_close_r+0x1a>
 8022278:	682b      	ldr	r3, [r5, #0]
 802227a:	b103      	cbz	r3, 802227e <_close_r+0x1a>
 802227c:	6023      	str	r3, [r4, #0]
 802227e:	bd38      	pop	{r3, r4, r5, pc}
 8022280:	20008144 	.word	0x20008144

08022284 <_lseek_r>:
 8022284:	b538      	push	{r3, r4, r5, lr}
 8022286:	4d07      	ldr	r5, [pc, #28]	@ (80222a4 <_lseek_r+0x20>)
 8022288:	4604      	mov	r4, r0
 802228a:	4608      	mov	r0, r1
 802228c:	4611      	mov	r1, r2
 802228e:	2200      	movs	r2, #0
 8022290:	602a      	str	r2, [r5, #0]
 8022292:	461a      	mov	r2, r3
 8022294:	f7df fc75 	bl	8001b82 <_lseek>
 8022298:	1c43      	adds	r3, r0, #1
 802229a:	d102      	bne.n	80222a2 <_lseek_r+0x1e>
 802229c:	682b      	ldr	r3, [r5, #0]
 802229e:	b103      	cbz	r3, 80222a2 <_lseek_r+0x1e>
 80222a0:	6023      	str	r3, [r4, #0]
 80222a2:	bd38      	pop	{r3, r4, r5, pc}
 80222a4:	20008144 	.word	0x20008144

080222a8 <_read_r>:
 80222a8:	b538      	push	{r3, r4, r5, lr}
 80222aa:	4d07      	ldr	r5, [pc, #28]	@ (80222c8 <_read_r+0x20>)
 80222ac:	4604      	mov	r4, r0
 80222ae:	4608      	mov	r0, r1
 80222b0:	4611      	mov	r1, r2
 80222b2:	2200      	movs	r2, #0
 80222b4:	602a      	str	r2, [r5, #0]
 80222b6:	461a      	mov	r2, r3
 80222b8:	f7df fc03 	bl	8001ac2 <_read>
 80222bc:	1c43      	adds	r3, r0, #1
 80222be:	d102      	bne.n	80222c6 <_read_r+0x1e>
 80222c0:	682b      	ldr	r3, [r5, #0]
 80222c2:	b103      	cbz	r3, 80222c6 <_read_r+0x1e>
 80222c4:	6023      	str	r3, [r4, #0]
 80222c6:	bd38      	pop	{r3, r4, r5, pc}
 80222c8:	20008144 	.word	0x20008144

080222cc <_sbrk_r>:
 80222cc:	b538      	push	{r3, r4, r5, lr}
 80222ce:	4d06      	ldr	r5, [pc, #24]	@ (80222e8 <_sbrk_r+0x1c>)
 80222d0:	2300      	movs	r3, #0
 80222d2:	4604      	mov	r4, r0
 80222d4:	4608      	mov	r0, r1
 80222d6:	602b      	str	r3, [r5, #0]
 80222d8:	f7df fc60 	bl	8001b9c <_sbrk>
 80222dc:	1c43      	adds	r3, r0, #1
 80222de:	d102      	bne.n	80222e6 <_sbrk_r+0x1a>
 80222e0:	682b      	ldr	r3, [r5, #0]
 80222e2:	b103      	cbz	r3, 80222e6 <_sbrk_r+0x1a>
 80222e4:	6023      	str	r3, [r4, #0]
 80222e6:	bd38      	pop	{r3, r4, r5, pc}
 80222e8:	20008144 	.word	0x20008144

080222ec <_write_r>:
 80222ec:	b538      	push	{r3, r4, r5, lr}
 80222ee:	4d07      	ldr	r5, [pc, #28]	@ (802230c <_write_r+0x20>)
 80222f0:	4604      	mov	r4, r0
 80222f2:	4608      	mov	r0, r1
 80222f4:	4611      	mov	r1, r2
 80222f6:	2200      	movs	r2, #0
 80222f8:	602a      	str	r2, [r5, #0]
 80222fa:	461a      	mov	r2, r3
 80222fc:	f7df fbfe 	bl	8001afc <_write>
 8022300:	1c43      	adds	r3, r0, #1
 8022302:	d102      	bne.n	802230a <_write_r+0x1e>
 8022304:	682b      	ldr	r3, [r5, #0]
 8022306:	b103      	cbz	r3, 802230a <_write_r+0x1e>
 8022308:	6023      	str	r3, [r4, #0]
 802230a:	bd38      	pop	{r3, r4, r5, pc}
 802230c:	20008144 	.word	0x20008144

08022310 <__errno>:
 8022310:	4b01      	ldr	r3, [pc, #4]	@ (8022318 <__errno+0x8>)
 8022312:	6818      	ldr	r0, [r3, #0]
 8022314:	4770      	bx	lr
 8022316:	bf00      	nop
 8022318:	200003e4 	.word	0x200003e4

0802231c <__libc_init_array>:
 802231c:	b570      	push	{r4, r5, r6, lr}
 802231e:	4d0d      	ldr	r5, [pc, #52]	@ (8022354 <__libc_init_array+0x38>)
 8022320:	4c0d      	ldr	r4, [pc, #52]	@ (8022358 <__libc_init_array+0x3c>)
 8022322:	1b64      	subs	r4, r4, r5
 8022324:	10a4      	asrs	r4, r4, #2
 8022326:	2600      	movs	r6, #0
 8022328:	42a6      	cmp	r6, r4
 802232a:	d109      	bne.n	8022340 <__libc_init_array+0x24>
 802232c:	4d0b      	ldr	r5, [pc, #44]	@ (802235c <__libc_init_array+0x40>)
 802232e:	4c0c      	ldr	r4, [pc, #48]	@ (8022360 <__libc_init_array+0x44>)
 8022330:	f002 f922 	bl	8024578 <_init>
 8022334:	1b64      	subs	r4, r4, r5
 8022336:	10a4      	asrs	r4, r4, #2
 8022338:	2600      	movs	r6, #0
 802233a:	42a6      	cmp	r6, r4
 802233c:	d105      	bne.n	802234a <__libc_init_array+0x2e>
 802233e:	bd70      	pop	{r4, r5, r6, pc}
 8022340:	f855 3b04 	ldr.w	r3, [r5], #4
 8022344:	4798      	blx	r3
 8022346:	3601      	adds	r6, #1
 8022348:	e7ee      	b.n	8022328 <__libc_init_array+0xc>
 802234a:	f855 3b04 	ldr.w	r3, [r5], #4
 802234e:	4798      	blx	r3
 8022350:	3601      	adds	r6, #1
 8022352:	e7f2      	b.n	802233a <__libc_init_array+0x1e>
 8022354:	08025928 	.word	0x08025928
 8022358:	08025928 	.word	0x08025928
 802235c:	08025928 	.word	0x08025928
 8022360:	0802592c 	.word	0x0802592c

08022364 <__retarget_lock_init_recursive>:
 8022364:	4770      	bx	lr

08022366 <__retarget_lock_acquire_recursive>:
 8022366:	4770      	bx	lr

08022368 <__retarget_lock_release_recursive>:
 8022368:	4770      	bx	lr

0802236a <memcpy>:
 802236a:	440a      	add	r2, r1
 802236c:	4291      	cmp	r1, r2
 802236e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8022372:	d100      	bne.n	8022376 <memcpy+0xc>
 8022374:	4770      	bx	lr
 8022376:	b510      	push	{r4, lr}
 8022378:	f811 4b01 	ldrb.w	r4, [r1], #1
 802237c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022380:	4291      	cmp	r1, r2
 8022382:	d1f9      	bne.n	8022378 <memcpy+0xe>
 8022384:	bd10      	pop	{r4, pc}

08022386 <quorem>:
 8022386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802238a:	6903      	ldr	r3, [r0, #16]
 802238c:	690c      	ldr	r4, [r1, #16]
 802238e:	42a3      	cmp	r3, r4
 8022390:	4607      	mov	r7, r0
 8022392:	db7e      	blt.n	8022492 <quorem+0x10c>
 8022394:	3c01      	subs	r4, #1
 8022396:	f101 0814 	add.w	r8, r1, #20
 802239a:	00a3      	lsls	r3, r4, #2
 802239c:	f100 0514 	add.w	r5, r0, #20
 80223a0:	9300      	str	r3, [sp, #0]
 80223a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80223a6:	9301      	str	r3, [sp, #4]
 80223a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80223ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80223b0:	3301      	adds	r3, #1
 80223b2:	429a      	cmp	r2, r3
 80223b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80223b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80223bc:	d32e      	bcc.n	802241c <quorem+0x96>
 80223be:	f04f 0a00 	mov.w	sl, #0
 80223c2:	46c4      	mov	ip, r8
 80223c4:	46ae      	mov	lr, r5
 80223c6:	46d3      	mov	fp, sl
 80223c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80223cc:	b298      	uxth	r0, r3
 80223ce:	fb06 a000 	mla	r0, r6, r0, sl
 80223d2:	0c02      	lsrs	r2, r0, #16
 80223d4:	0c1b      	lsrs	r3, r3, #16
 80223d6:	fb06 2303 	mla	r3, r6, r3, r2
 80223da:	f8de 2000 	ldr.w	r2, [lr]
 80223de:	b280      	uxth	r0, r0
 80223e0:	b292      	uxth	r2, r2
 80223e2:	1a12      	subs	r2, r2, r0
 80223e4:	445a      	add	r2, fp
 80223e6:	f8de 0000 	ldr.w	r0, [lr]
 80223ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80223ee:	b29b      	uxth	r3, r3
 80223f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80223f4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80223f8:	b292      	uxth	r2, r2
 80223fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80223fe:	45e1      	cmp	r9, ip
 8022400:	f84e 2b04 	str.w	r2, [lr], #4
 8022404:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8022408:	d2de      	bcs.n	80223c8 <quorem+0x42>
 802240a:	9b00      	ldr	r3, [sp, #0]
 802240c:	58eb      	ldr	r3, [r5, r3]
 802240e:	b92b      	cbnz	r3, 802241c <quorem+0x96>
 8022410:	9b01      	ldr	r3, [sp, #4]
 8022412:	3b04      	subs	r3, #4
 8022414:	429d      	cmp	r5, r3
 8022416:	461a      	mov	r2, r3
 8022418:	d32f      	bcc.n	802247a <quorem+0xf4>
 802241a:	613c      	str	r4, [r7, #16]
 802241c:	4638      	mov	r0, r7
 802241e:	f001 f8c3 	bl	80235a8 <__mcmp>
 8022422:	2800      	cmp	r0, #0
 8022424:	db25      	blt.n	8022472 <quorem+0xec>
 8022426:	4629      	mov	r1, r5
 8022428:	2000      	movs	r0, #0
 802242a:	f858 2b04 	ldr.w	r2, [r8], #4
 802242e:	f8d1 c000 	ldr.w	ip, [r1]
 8022432:	fa1f fe82 	uxth.w	lr, r2
 8022436:	fa1f f38c 	uxth.w	r3, ip
 802243a:	eba3 030e 	sub.w	r3, r3, lr
 802243e:	4403      	add	r3, r0
 8022440:	0c12      	lsrs	r2, r2, #16
 8022442:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8022446:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802244a:	b29b      	uxth	r3, r3
 802244c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022450:	45c1      	cmp	r9, r8
 8022452:	f841 3b04 	str.w	r3, [r1], #4
 8022456:	ea4f 4022 	mov.w	r0, r2, asr #16
 802245a:	d2e6      	bcs.n	802242a <quorem+0xa4>
 802245c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8022460:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8022464:	b922      	cbnz	r2, 8022470 <quorem+0xea>
 8022466:	3b04      	subs	r3, #4
 8022468:	429d      	cmp	r5, r3
 802246a:	461a      	mov	r2, r3
 802246c:	d30b      	bcc.n	8022486 <quorem+0x100>
 802246e:	613c      	str	r4, [r7, #16]
 8022470:	3601      	adds	r6, #1
 8022472:	4630      	mov	r0, r6
 8022474:	b003      	add	sp, #12
 8022476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802247a:	6812      	ldr	r2, [r2, #0]
 802247c:	3b04      	subs	r3, #4
 802247e:	2a00      	cmp	r2, #0
 8022480:	d1cb      	bne.n	802241a <quorem+0x94>
 8022482:	3c01      	subs	r4, #1
 8022484:	e7c6      	b.n	8022414 <quorem+0x8e>
 8022486:	6812      	ldr	r2, [r2, #0]
 8022488:	3b04      	subs	r3, #4
 802248a:	2a00      	cmp	r2, #0
 802248c:	d1ef      	bne.n	802246e <quorem+0xe8>
 802248e:	3c01      	subs	r4, #1
 8022490:	e7ea      	b.n	8022468 <quorem+0xe2>
 8022492:	2000      	movs	r0, #0
 8022494:	e7ee      	b.n	8022474 <quorem+0xee>
	...

08022498 <_dtoa_r>:
 8022498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802249c:	69c7      	ldr	r7, [r0, #28]
 802249e:	b099      	sub	sp, #100	@ 0x64
 80224a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80224a4:	ec55 4b10 	vmov	r4, r5, d0
 80224a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80224aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80224ac:	4683      	mov	fp, r0
 80224ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80224b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80224b2:	b97f      	cbnz	r7, 80224d4 <_dtoa_r+0x3c>
 80224b4:	2010      	movs	r0, #16
 80224b6:	f7ff f847 	bl	8021548 <malloc>
 80224ba:	4602      	mov	r2, r0
 80224bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80224c0:	b920      	cbnz	r0, 80224cc <_dtoa_r+0x34>
 80224c2:	4ba7      	ldr	r3, [pc, #668]	@ (8022760 <_dtoa_r+0x2c8>)
 80224c4:	21ef      	movs	r1, #239	@ 0xef
 80224c6:	48a7      	ldr	r0, [pc, #668]	@ (8022764 <_dtoa_r+0x2cc>)
 80224c8:	f001 fb94 	bl	8023bf4 <__assert_func>
 80224cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80224d0:	6007      	str	r7, [r0, #0]
 80224d2:	60c7      	str	r7, [r0, #12]
 80224d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80224d8:	6819      	ldr	r1, [r3, #0]
 80224da:	b159      	cbz	r1, 80224f4 <_dtoa_r+0x5c>
 80224dc:	685a      	ldr	r2, [r3, #4]
 80224de:	604a      	str	r2, [r1, #4]
 80224e0:	2301      	movs	r3, #1
 80224e2:	4093      	lsls	r3, r2
 80224e4:	608b      	str	r3, [r1, #8]
 80224e6:	4658      	mov	r0, fp
 80224e8:	f000 fe24 	bl	8023134 <_Bfree>
 80224ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80224f0:	2200      	movs	r2, #0
 80224f2:	601a      	str	r2, [r3, #0]
 80224f4:	1e2b      	subs	r3, r5, #0
 80224f6:	bfb9      	ittee	lt
 80224f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80224fc:	9303      	strlt	r3, [sp, #12]
 80224fe:	2300      	movge	r3, #0
 8022500:	6033      	strge	r3, [r6, #0]
 8022502:	9f03      	ldr	r7, [sp, #12]
 8022504:	4b98      	ldr	r3, [pc, #608]	@ (8022768 <_dtoa_r+0x2d0>)
 8022506:	bfbc      	itt	lt
 8022508:	2201      	movlt	r2, #1
 802250a:	6032      	strlt	r2, [r6, #0]
 802250c:	43bb      	bics	r3, r7
 802250e:	d112      	bne.n	8022536 <_dtoa_r+0x9e>
 8022510:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022512:	f242 730f 	movw	r3, #9999	@ 0x270f
 8022516:	6013      	str	r3, [r2, #0]
 8022518:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802251c:	4323      	orrs	r3, r4
 802251e:	f000 854d 	beq.w	8022fbc <_dtoa_r+0xb24>
 8022522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022524:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802277c <_dtoa_r+0x2e4>
 8022528:	2b00      	cmp	r3, #0
 802252a:	f000 854f 	beq.w	8022fcc <_dtoa_r+0xb34>
 802252e:	f10a 0303 	add.w	r3, sl, #3
 8022532:	f000 bd49 	b.w	8022fc8 <_dtoa_r+0xb30>
 8022536:	ed9d 7b02 	vldr	d7, [sp, #8]
 802253a:	2200      	movs	r2, #0
 802253c:	ec51 0b17 	vmov	r0, r1, d7
 8022540:	2300      	movs	r3, #0
 8022542:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8022546:	f7de fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 802254a:	4680      	mov	r8, r0
 802254c:	b158      	cbz	r0, 8022566 <_dtoa_r+0xce>
 802254e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022550:	2301      	movs	r3, #1
 8022552:	6013      	str	r3, [r2, #0]
 8022554:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022556:	b113      	cbz	r3, 802255e <_dtoa_r+0xc6>
 8022558:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802255a:	4b84      	ldr	r3, [pc, #528]	@ (802276c <_dtoa_r+0x2d4>)
 802255c:	6013      	str	r3, [r2, #0]
 802255e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8022780 <_dtoa_r+0x2e8>
 8022562:	f000 bd33 	b.w	8022fcc <_dtoa_r+0xb34>
 8022566:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802256a:	aa16      	add	r2, sp, #88	@ 0x58
 802256c:	a917      	add	r1, sp, #92	@ 0x5c
 802256e:	4658      	mov	r0, fp
 8022570:	f001 f8ca 	bl	8023708 <__d2b>
 8022574:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8022578:	4681      	mov	r9, r0
 802257a:	2e00      	cmp	r6, #0
 802257c:	d077      	beq.n	802266e <_dtoa_r+0x1d6>
 802257e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022580:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8022584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022588:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802258c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8022590:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8022594:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8022598:	4619      	mov	r1, r3
 802259a:	2200      	movs	r2, #0
 802259c:	4b74      	ldr	r3, [pc, #464]	@ (8022770 <_dtoa_r+0x2d8>)
 802259e:	f7dd fe73 	bl	8000288 <__aeabi_dsub>
 80225a2:	a369      	add	r3, pc, #420	@ (adr r3, 8022748 <_dtoa_r+0x2b0>)
 80225a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225a8:	f7de f826 	bl	80005f8 <__aeabi_dmul>
 80225ac:	a368      	add	r3, pc, #416	@ (adr r3, 8022750 <_dtoa_r+0x2b8>)
 80225ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225b2:	f7dd fe6b 	bl	800028c <__adddf3>
 80225b6:	4604      	mov	r4, r0
 80225b8:	4630      	mov	r0, r6
 80225ba:	460d      	mov	r5, r1
 80225bc:	f7dd ffb2 	bl	8000524 <__aeabi_i2d>
 80225c0:	a365      	add	r3, pc, #404	@ (adr r3, 8022758 <_dtoa_r+0x2c0>)
 80225c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225c6:	f7de f817 	bl	80005f8 <__aeabi_dmul>
 80225ca:	4602      	mov	r2, r0
 80225cc:	460b      	mov	r3, r1
 80225ce:	4620      	mov	r0, r4
 80225d0:	4629      	mov	r1, r5
 80225d2:	f7dd fe5b 	bl	800028c <__adddf3>
 80225d6:	4604      	mov	r4, r0
 80225d8:	460d      	mov	r5, r1
 80225da:	f7de fabd 	bl	8000b58 <__aeabi_d2iz>
 80225de:	2200      	movs	r2, #0
 80225e0:	4607      	mov	r7, r0
 80225e2:	2300      	movs	r3, #0
 80225e4:	4620      	mov	r0, r4
 80225e6:	4629      	mov	r1, r5
 80225e8:	f7de fa78 	bl	8000adc <__aeabi_dcmplt>
 80225ec:	b140      	cbz	r0, 8022600 <_dtoa_r+0x168>
 80225ee:	4638      	mov	r0, r7
 80225f0:	f7dd ff98 	bl	8000524 <__aeabi_i2d>
 80225f4:	4622      	mov	r2, r4
 80225f6:	462b      	mov	r3, r5
 80225f8:	f7de fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 80225fc:	b900      	cbnz	r0, 8022600 <_dtoa_r+0x168>
 80225fe:	3f01      	subs	r7, #1
 8022600:	2f16      	cmp	r7, #22
 8022602:	d851      	bhi.n	80226a8 <_dtoa_r+0x210>
 8022604:	4b5b      	ldr	r3, [pc, #364]	@ (8022774 <_dtoa_r+0x2dc>)
 8022606:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802260e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8022612:	f7de fa63 	bl	8000adc <__aeabi_dcmplt>
 8022616:	2800      	cmp	r0, #0
 8022618:	d048      	beq.n	80226ac <_dtoa_r+0x214>
 802261a:	3f01      	subs	r7, #1
 802261c:	2300      	movs	r3, #0
 802261e:	9312      	str	r3, [sp, #72]	@ 0x48
 8022620:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022622:	1b9b      	subs	r3, r3, r6
 8022624:	1e5a      	subs	r2, r3, #1
 8022626:	bf44      	itt	mi
 8022628:	f1c3 0801 	rsbmi	r8, r3, #1
 802262c:	2300      	movmi	r3, #0
 802262e:	9208      	str	r2, [sp, #32]
 8022630:	bf54      	ite	pl
 8022632:	f04f 0800 	movpl.w	r8, #0
 8022636:	9308      	strmi	r3, [sp, #32]
 8022638:	2f00      	cmp	r7, #0
 802263a:	db39      	blt.n	80226b0 <_dtoa_r+0x218>
 802263c:	9b08      	ldr	r3, [sp, #32]
 802263e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8022640:	443b      	add	r3, r7
 8022642:	9308      	str	r3, [sp, #32]
 8022644:	2300      	movs	r3, #0
 8022646:	930a      	str	r3, [sp, #40]	@ 0x28
 8022648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802264a:	2b09      	cmp	r3, #9
 802264c:	d864      	bhi.n	8022718 <_dtoa_r+0x280>
 802264e:	2b05      	cmp	r3, #5
 8022650:	bfc4      	itt	gt
 8022652:	3b04      	subgt	r3, #4
 8022654:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8022656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022658:	f1a3 0302 	sub.w	r3, r3, #2
 802265c:	bfcc      	ite	gt
 802265e:	2400      	movgt	r4, #0
 8022660:	2401      	movle	r4, #1
 8022662:	2b03      	cmp	r3, #3
 8022664:	d863      	bhi.n	802272e <_dtoa_r+0x296>
 8022666:	e8df f003 	tbb	[pc, r3]
 802266a:	372a      	.short	0x372a
 802266c:	5535      	.short	0x5535
 802266e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8022672:	441e      	add	r6, r3
 8022674:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8022678:	2b20      	cmp	r3, #32
 802267a:	bfc1      	itttt	gt
 802267c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8022680:	409f      	lslgt	r7, r3
 8022682:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8022686:	fa24 f303 	lsrgt.w	r3, r4, r3
 802268a:	bfd6      	itet	le
 802268c:	f1c3 0320 	rsble	r3, r3, #32
 8022690:	ea47 0003 	orrgt.w	r0, r7, r3
 8022694:	fa04 f003 	lslle.w	r0, r4, r3
 8022698:	f7dd ff34 	bl	8000504 <__aeabi_ui2d>
 802269c:	2201      	movs	r2, #1
 802269e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80226a2:	3e01      	subs	r6, #1
 80226a4:	9214      	str	r2, [sp, #80]	@ 0x50
 80226a6:	e777      	b.n	8022598 <_dtoa_r+0x100>
 80226a8:	2301      	movs	r3, #1
 80226aa:	e7b8      	b.n	802261e <_dtoa_r+0x186>
 80226ac:	9012      	str	r0, [sp, #72]	@ 0x48
 80226ae:	e7b7      	b.n	8022620 <_dtoa_r+0x188>
 80226b0:	427b      	negs	r3, r7
 80226b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80226b4:	2300      	movs	r3, #0
 80226b6:	eba8 0807 	sub.w	r8, r8, r7
 80226ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80226bc:	e7c4      	b.n	8022648 <_dtoa_r+0x1b0>
 80226be:	2300      	movs	r3, #0
 80226c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80226c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	dc35      	bgt.n	8022734 <_dtoa_r+0x29c>
 80226c8:	2301      	movs	r3, #1
 80226ca:	9300      	str	r3, [sp, #0]
 80226cc:	9307      	str	r3, [sp, #28]
 80226ce:	461a      	mov	r2, r3
 80226d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80226d2:	e00b      	b.n	80226ec <_dtoa_r+0x254>
 80226d4:	2301      	movs	r3, #1
 80226d6:	e7f3      	b.n	80226c0 <_dtoa_r+0x228>
 80226d8:	2300      	movs	r3, #0
 80226da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80226dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80226de:	18fb      	adds	r3, r7, r3
 80226e0:	9300      	str	r3, [sp, #0]
 80226e2:	3301      	adds	r3, #1
 80226e4:	2b01      	cmp	r3, #1
 80226e6:	9307      	str	r3, [sp, #28]
 80226e8:	bfb8      	it	lt
 80226ea:	2301      	movlt	r3, #1
 80226ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 80226f0:	2100      	movs	r1, #0
 80226f2:	2204      	movs	r2, #4
 80226f4:	f102 0514 	add.w	r5, r2, #20
 80226f8:	429d      	cmp	r5, r3
 80226fa:	d91f      	bls.n	802273c <_dtoa_r+0x2a4>
 80226fc:	6041      	str	r1, [r0, #4]
 80226fe:	4658      	mov	r0, fp
 8022700:	f000 fcd8 	bl	80230b4 <_Balloc>
 8022704:	4682      	mov	sl, r0
 8022706:	2800      	cmp	r0, #0
 8022708:	d13c      	bne.n	8022784 <_dtoa_r+0x2ec>
 802270a:	4b1b      	ldr	r3, [pc, #108]	@ (8022778 <_dtoa_r+0x2e0>)
 802270c:	4602      	mov	r2, r0
 802270e:	f240 11af 	movw	r1, #431	@ 0x1af
 8022712:	e6d8      	b.n	80224c6 <_dtoa_r+0x2e>
 8022714:	2301      	movs	r3, #1
 8022716:	e7e0      	b.n	80226da <_dtoa_r+0x242>
 8022718:	2401      	movs	r4, #1
 802271a:	2300      	movs	r3, #0
 802271c:	9309      	str	r3, [sp, #36]	@ 0x24
 802271e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8022724:	9300      	str	r3, [sp, #0]
 8022726:	9307      	str	r3, [sp, #28]
 8022728:	2200      	movs	r2, #0
 802272a:	2312      	movs	r3, #18
 802272c:	e7d0      	b.n	80226d0 <_dtoa_r+0x238>
 802272e:	2301      	movs	r3, #1
 8022730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022732:	e7f5      	b.n	8022720 <_dtoa_r+0x288>
 8022734:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022736:	9300      	str	r3, [sp, #0]
 8022738:	9307      	str	r3, [sp, #28]
 802273a:	e7d7      	b.n	80226ec <_dtoa_r+0x254>
 802273c:	3101      	adds	r1, #1
 802273e:	0052      	lsls	r2, r2, #1
 8022740:	e7d8      	b.n	80226f4 <_dtoa_r+0x25c>
 8022742:	bf00      	nop
 8022744:	f3af 8000 	nop.w
 8022748:	636f4361 	.word	0x636f4361
 802274c:	3fd287a7 	.word	0x3fd287a7
 8022750:	8b60c8b3 	.word	0x8b60c8b3
 8022754:	3fc68a28 	.word	0x3fc68a28
 8022758:	509f79fb 	.word	0x509f79fb
 802275c:	3fd34413 	.word	0x3fd34413
 8022760:	080255e1 	.word	0x080255e1
 8022764:	080255f8 	.word	0x080255f8
 8022768:	7ff00000 	.word	0x7ff00000
 802276c:	080255b1 	.word	0x080255b1
 8022770:	3ff80000 	.word	0x3ff80000
 8022774:	080256f0 	.word	0x080256f0
 8022778:	08025650 	.word	0x08025650
 802277c:	080255dd 	.word	0x080255dd
 8022780:	080255b0 	.word	0x080255b0
 8022784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8022788:	6018      	str	r0, [r3, #0]
 802278a:	9b07      	ldr	r3, [sp, #28]
 802278c:	2b0e      	cmp	r3, #14
 802278e:	f200 80a4 	bhi.w	80228da <_dtoa_r+0x442>
 8022792:	2c00      	cmp	r4, #0
 8022794:	f000 80a1 	beq.w	80228da <_dtoa_r+0x442>
 8022798:	2f00      	cmp	r7, #0
 802279a:	dd33      	ble.n	8022804 <_dtoa_r+0x36c>
 802279c:	4bad      	ldr	r3, [pc, #692]	@ (8022a54 <_dtoa_r+0x5bc>)
 802279e:	f007 020f 	and.w	r2, r7, #15
 80227a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80227a6:	ed93 7b00 	vldr	d7, [r3]
 80227aa:	05f8      	lsls	r0, r7, #23
 80227ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80227b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80227b4:	d516      	bpl.n	80227e4 <_dtoa_r+0x34c>
 80227b6:	4ba8      	ldr	r3, [pc, #672]	@ (8022a58 <_dtoa_r+0x5c0>)
 80227b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80227bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80227c0:	f7de f844 	bl	800084c <__aeabi_ddiv>
 80227c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80227c8:	f004 040f 	and.w	r4, r4, #15
 80227cc:	2603      	movs	r6, #3
 80227ce:	4da2      	ldr	r5, [pc, #648]	@ (8022a58 <_dtoa_r+0x5c0>)
 80227d0:	b954      	cbnz	r4, 80227e8 <_dtoa_r+0x350>
 80227d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80227d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80227da:	f7de f837 	bl	800084c <__aeabi_ddiv>
 80227de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80227e2:	e028      	b.n	8022836 <_dtoa_r+0x39e>
 80227e4:	2602      	movs	r6, #2
 80227e6:	e7f2      	b.n	80227ce <_dtoa_r+0x336>
 80227e8:	07e1      	lsls	r1, r4, #31
 80227ea:	d508      	bpl.n	80227fe <_dtoa_r+0x366>
 80227ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80227f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80227f4:	f7dd ff00 	bl	80005f8 <__aeabi_dmul>
 80227f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80227fc:	3601      	adds	r6, #1
 80227fe:	1064      	asrs	r4, r4, #1
 8022800:	3508      	adds	r5, #8
 8022802:	e7e5      	b.n	80227d0 <_dtoa_r+0x338>
 8022804:	f000 80d2 	beq.w	80229ac <_dtoa_r+0x514>
 8022808:	427c      	negs	r4, r7
 802280a:	4b92      	ldr	r3, [pc, #584]	@ (8022a54 <_dtoa_r+0x5bc>)
 802280c:	4d92      	ldr	r5, [pc, #584]	@ (8022a58 <_dtoa_r+0x5c0>)
 802280e:	f004 020f 	and.w	r2, r4, #15
 8022812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8022816:	e9d3 2300 	ldrd	r2, r3, [r3]
 802281a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802281e:	f7dd feeb 	bl	80005f8 <__aeabi_dmul>
 8022822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022826:	1124      	asrs	r4, r4, #4
 8022828:	2300      	movs	r3, #0
 802282a:	2602      	movs	r6, #2
 802282c:	2c00      	cmp	r4, #0
 802282e:	f040 80b2 	bne.w	8022996 <_dtoa_r+0x4fe>
 8022832:	2b00      	cmp	r3, #0
 8022834:	d1d3      	bne.n	80227de <_dtoa_r+0x346>
 8022836:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022838:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802283c:	2b00      	cmp	r3, #0
 802283e:	f000 80b7 	beq.w	80229b0 <_dtoa_r+0x518>
 8022842:	4b86      	ldr	r3, [pc, #536]	@ (8022a5c <_dtoa_r+0x5c4>)
 8022844:	2200      	movs	r2, #0
 8022846:	4620      	mov	r0, r4
 8022848:	4629      	mov	r1, r5
 802284a:	f7de f947 	bl	8000adc <__aeabi_dcmplt>
 802284e:	2800      	cmp	r0, #0
 8022850:	f000 80ae 	beq.w	80229b0 <_dtoa_r+0x518>
 8022854:	9b07      	ldr	r3, [sp, #28]
 8022856:	2b00      	cmp	r3, #0
 8022858:	f000 80aa 	beq.w	80229b0 <_dtoa_r+0x518>
 802285c:	9b00      	ldr	r3, [sp, #0]
 802285e:	2b00      	cmp	r3, #0
 8022860:	dd37      	ble.n	80228d2 <_dtoa_r+0x43a>
 8022862:	1e7b      	subs	r3, r7, #1
 8022864:	9304      	str	r3, [sp, #16]
 8022866:	4620      	mov	r0, r4
 8022868:	4b7d      	ldr	r3, [pc, #500]	@ (8022a60 <_dtoa_r+0x5c8>)
 802286a:	2200      	movs	r2, #0
 802286c:	4629      	mov	r1, r5
 802286e:	f7dd fec3 	bl	80005f8 <__aeabi_dmul>
 8022872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022876:	9c00      	ldr	r4, [sp, #0]
 8022878:	3601      	adds	r6, #1
 802287a:	4630      	mov	r0, r6
 802287c:	f7dd fe52 	bl	8000524 <__aeabi_i2d>
 8022880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022884:	f7dd feb8 	bl	80005f8 <__aeabi_dmul>
 8022888:	4b76      	ldr	r3, [pc, #472]	@ (8022a64 <_dtoa_r+0x5cc>)
 802288a:	2200      	movs	r2, #0
 802288c:	f7dd fcfe 	bl	800028c <__adddf3>
 8022890:	4605      	mov	r5, r0
 8022892:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8022896:	2c00      	cmp	r4, #0
 8022898:	f040 808d 	bne.w	80229b6 <_dtoa_r+0x51e>
 802289c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80228a0:	4b71      	ldr	r3, [pc, #452]	@ (8022a68 <_dtoa_r+0x5d0>)
 80228a2:	2200      	movs	r2, #0
 80228a4:	f7dd fcf0 	bl	8000288 <__aeabi_dsub>
 80228a8:	4602      	mov	r2, r0
 80228aa:	460b      	mov	r3, r1
 80228ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80228b0:	462a      	mov	r2, r5
 80228b2:	4633      	mov	r3, r6
 80228b4:	f7de f930 	bl	8000b18 <__aeabi_dcmpgt>
 80228b8:	2800      	cmp	r0, #0
 80228ba:	f040 828b 	bne.w	8022dd4 <_dtoa_r+0x93c>
 80228be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80228c2:	462a      	mov	r2, r5
 80228c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80228c8:	f7de f908 	bl	8000adc <__aeabi_dcmplt>
 80228cc:	2800      	cmp	r0, #0
 80228ce:	f040 8128 	bne.w	8022b22 <_dtoa_r+0x68a>
 80228d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80228d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80228da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80228dc:	2b00      	cmp	r3, #0
 80228de:	f2c0 815a 	blt.w	8022b96 <_dtoa_r+0x6fe>
 80228e2:	2f0e      	cmp	r7, #14
 80228e4:	f300 8157 	bgt.w	8022b96 <_dtoa_r+0x6fe>
 80228e8:	4b5a      	ldr	r3, [pc, #360]	@ (8022a54 <_dtoa_r+0x5bc>)
 80228ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80228ee:	ed93 7b00 	vldr	d7, [r3]
 80228f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	ed8d 7b00 	vstr	d7, [sp]
 80228fa:	da03      	bge.n	8022904 <_dtoa_r+0x46c>
 80228fc:	9b07      	ldr	r3, [sp, #28]
 80228fe:	2b00      	cmp	r3, #0
 8022900:	f340 8101 	ble.w	8022b06 <_dtoa_r+0x66e>
 8022904:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8022908:	4656      	mov	r6, sl
 802290a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802290e:	4620      	mov	r0, r4
 8022910:	4629      	mov	r1, r5
 8022912:	f7dd ff9b 	bl	800084c <__aeabi_ddiv>
 8022916:	f7de f91f 	bl	8000b58 <__aeabi_d2iz>
 802291a:	4680      	mov	r8, r0
 802291c:	f7dd fe02 	bl	8000524 <__aeabi_i2d>
 8022920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022924:	f7dd fe68 	bl	80005f8 <__aeabi_dmul>
 8022928:	4602      	mov	r2, r0
 802292a:	460b      	mov	r3, r1
 802292c:	4620      	mov	r0, r4
 802292e:	4629      	mov	r1, r5
 8022930:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8022934:	f7dd fca8 	bl	8000288 <__aeabi_dsub>
 8022938:	f806 4b01 	strb.w	r4, [r6], #1
 802293c:	9d07      	ldr	r5, [sp, #28]
 802293e:	eba6 040a 	sub.w	r4, r6, sl
 8022942:	42a5      	cmp	r5, r4
 8022944:	4602      	mov	r2, r0
 8022946:	460b      	mov	r3, r1
 8022948:	f040 8117 	bne.w	8022b7a <_dtoa_r+0x6e2>
 802294c:	f7dd fc9e 	bl	800028c <__adddf3>
 8022950:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022954:	4604      	mov	r4, r0
 8022956:	460d      	mov	r5, r1
 8022958:	f7de f8de 	bl	8000b18 <__aeabi_dcmpgt>
 802295c:	2800      	cmp	r0, #0
 802295e:	f040 80f9 	bne.w	8022b54 <_dtoa_r+0x6bc>
 8022962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022966:	4620      	mov	r0, r4
 8022968:	4629      	mov	r1, r5
 802296a:	f7de f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 802296e:	b118      	cbz	r0, 8022978 <_dtoa_r+0x4e0>
 8022970:	f018 0f01 	tst.w	r8, #1
 8022974:	f040 80ee 	bne.w	8022b54 <_dtoa_r+0x6bc>
 8022978:	4649      	mov	r1, r9
 802297a:	4658      	mov	r0, fp
 802297c:	f000 fbda 	bl	8023134 <_Bfree>
 8022980:	2300      	movs	r3, #0
 8022982:	7033      	strb	r3, [r6, #0]
 8022984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022986:	3701      	adds	r7, #1
 8022988:	601f      	str	r7, [r3, #0]
 802298a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802298c:	2b00      	cmp	r3, #0
 802298e:	f000 831d 	beq.w	8022fcc <_dtoa_r+0xb34>
 8022992:	601e      	str	r6, [r3, #0]
 8022994:	e31a      	b.n	8022fcc <_dtoa_r+0xb34>
 8022996:	07e2      	lsls	r2, r4, #31
 8022998:	d505      	bpl.n	80229a6 <_dtoa_r+0x50e>
 802299a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802299e:	f7dd fe2b 	bl	80005f8 <__aeabi_dmul>
 80229a2:	3601      	adds	r6, #1
 80229a4:	2301      	movs	r3, #1
 80229a6:	1064      	asrs	r4, r4, #1
 80229a8:	3508      	adds	r5, #8
 80229aa:	e73f      	b.n	802282c <_dtoa_r+0x394>
 80229ac:	2602      	movs	r6, #2
 80229ae:	e742      	b.n	8022836 <_dtoa_r+0x39e>
 80229b0:	9c07      	ldr	r4, [sp, #28]
 80229b2:	9704      	str	r7, [sp, #16]
 80229b4:	e761      	b.n	802287a <_dtoa_r+0x3e2>
 80229b6:	4b27      	ldr	r3, [pc, #156]	@ (8022a54 <_dtoa_r+0x5bc>)
 80229b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80229ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80229be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80229c2:	4454      	add	r4, sl
 80229c4:	2900      	cmp	r1, #0
 80229c6:	d053      	beq.n	8022a70 <_dtoa_r+0x5d8>
 80229c8:	4928      	ldr	r1, [pc, #160]	@ (8022a6c <_dtoa_r+0x5d4>)
 80229ca:	2000      	movs	r0, #0
 80229cc:	f7dd ff3e 	bl	800084c <__aeabi_ddiv>
 80229d0:	4633      	mov	r3, r6
 80229d2:	462a      	mov	r2, r5
 80229d4:	f7dd fc58 	bl	8000288 <__aeabi_dsub>
 80229d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80229dc:	4656      	mov	r6, sl
 80229de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80229e2:	f7de f8b9 	bl	8000b58 <__aeabi_d2iz>
 80229e6:	4605      	mov	r5, r0
 80229e8:	f7dd fd9c 	bl	8000524 <__aeabi_i2d>
 80229ec:	4602      	mov	r2, r0
 80229ee:	460b      	mov	r3, r1
 80229f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80229f4:	f7dd fc48 	bl	8000288 <__aeabi_dsub>
 80229f8:	3530      	adds	r5, #48	@ 0x30
 80229fa:	4602      	mov	r2, r0
 80229fc:	460b      	mov	r3, r1
 80229fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022a02:	f806 5b01 	strb.w	r5, [r6], #1
 8022a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022a0a:	f7de f867 	bl	8000adc <__aeabi_dcmplt>
 8022a0e:	2800      	cmp	r0, #0
 8022a10:	d171      	bne.n	8022af6 <_dtoa_r+0x65e>
 8022a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022a16:	4911      	ldr	r1, [pc, #68]	@ (8022a5c <_dtoa_r+0x5c4>)
 8022a18:	2000      	movs	r0, #0
 8022a1a:	f7dd fc35 	bl	8000288 <__aeabi_dsub>
 8022a1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022a22:	f7de f85b 	bl	8000adc <__aeabi_dcmplt>
 8022a26:	2800      	cmp	r0, #0
 8022a28:	f040 8095 	bne.w	8022b56 <_dtoa_r+0x6be>
 8022a2c:	42a6      	cmp	r6, r4
 8022a2e:	f43f af50 	beq.w	80228d2 <_dtoa_r+0x43a>
 8022a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022a36:	4b0a      	ldr	r3, [pc, #40]	@ (8022a60 <_dtoa_r+0x5c8>)
 8022a38:	2200      	movs	r2, #0
 8022a3a:	f7dd fddd 	bl	80005f8 <__aeabi_dmul>
 8022a3e:	4b08      	ldr	r3, [pc, #32]	@ (8022a60 <_dtoa_r+0x5c8>)
 8022a40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022a44:	2200      	movs	r2, #0
 8022a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022a4a:	f7dd fdd5 	bl	80005f8 <__aeabi_dmul>
 8022a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022a52:	e7c4      	b.n	80229de <_dtoa_r+0x546>
 8022a54:	080256f0 	.word	0x080256f0
 8022a58:	080256c8 	.word	0x080256c8
 8022a5c:	3ff00000 	.word	0x3ff00000
 8022a60:	40240000 	.word	0x40240000
 8022a64:	401c0000 	.word	0x401c0000
 8022a68:	40140000 	.word	0x40140000
 8022a6c:	3fe00000 	.word	0x3fe00000
 8022a70:	4631      	mov	r1, r6
 8022a72:	4628      	mov	r0, r5
 8022a74:	f7dd fdc0 	bl	80005f8 <__aeabi_dmul>
 8022a78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8022a7c:	9415      	str	r4, [sp, #84]	@ 0x54
 8022a7e:	4656      	mov	r6, sl
 8022a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022a84:	f7de f868 	bl	8000b58 <__aeabi_d2iz>
 8022a88:	4605      	mov	r5, r0
 8022a8a:	f7dd fd4b 	bl	8000524 <__aeabi_i2d>
 8022a8e:	4602      	mov	r2, r0
 8022a90:	460b      	mov	r3, r1
 8022a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022a96:	f7dd fbf7 	bl	8000288 <__aeabi_dsub>
 8022a9a:	3530      	adds	r5, #48	@ 0x30
 8022a9c:	f806 5b01 	strb.w	r5, [r6], #1
 8022aa0:	4602      	mov	r2, r0
 8022aa2:	460b      	mov	r3, r1
 8022aa4:	42a6      	cmp	r6, r4
 8022aa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022aaa:	f04f 0200 	mov.w	r2, #0
 8022aae:	d124      	bne.n	8022afa <_dtoa_r+0x662>
 8022ab0:	4bac      	ldr	r3, [pc, #688]	@ (8022d64 <_dtoa_r+0x8cc>)
 8022ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8022ab6:	f7dd fbe9 	bl	800028c <__adddf3>
 8022aba:	4602      	mov	r2, r0
 8022abc:	460b      	mov	r3, r1
 8022abe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ac2:	f7de f829 	bl	8000b18 <__aeabi_dcmpgt>
 8022ac6:	2800      	cmp	r0, #0
 8022ac8:	d145      	bne.n	8022b56 <_dtoa_r+0x6be>
 8022aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8022ace:	49a5      	ldr	r1, [pc, #660]	@ (8022d64 <_dtoa_r+0x8cc>)
 8022ad0:	2000      	movs	r0, #0
 8022ad2:	f7dd fbd9 	bl	8000288 <__aeabi_dsub>
 8022ad6:	4602      	mov	r2, r0
 8022ad8:	460b      	mov	r3, r1
 8022ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022ade:	f7dd fffd 	bl	8000adc <__aeabi_dcmplt>
 8022ae2:	2800      	cmp	r0, #0
 8022ae4:	f43f aef5 	beq.w	80228d2 <_dtoa_r+0x43a>
 8022ae8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8022aea:	1e73      	subs	r3, r6, #1
 8022aec:	9315      	str	r3, [sp, #84]	@ 0x54
 8022aee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8022af2:	2b30      	cmp	r3, #48	@ 0x30
 8022af4:	d0f8      	beq.n	8022ae8 <_dtoa_r+0x650>
 8022af6:	9f04      	ldr	r7, [sp, #16]
 8022af8:	e73e      	b.n	8022978 <_dtoa_r+0x4e0>
 8022afa:	4b9b      	ldr	r3, [pc, #620]	@ (8022d68 <_dtoa_r+0x8d0>)
 8022afc:	f7dd fd7c 	bl	80005f8 <__aeabi_dmul>
 8022b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022b04:	e7bc      	b.n	8022a80 <_dtoa_r+0x5e8>
 8022b06:	d10c      	bne.n	8022b22 <_dtoa_r+0x68a>
 8022b08:	4b98      	ldr	r3, [pc, #608]	@ (8022d6c <_dtoa_r+0x8d4>)
 8022b0a:	2200      	movs	r2, #0
 8022b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022b10:	f7dd fd72 	bl	80005f8 <__aeabi_dmul>
 8022b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8022b18:	f7dd fff4 	bl	8000b04 <__aeabi_dcmpge>
 8022b1c:	2800      	cmp	r0, #0
 8022b1e:	f000 8157 	beq.w	8022dd0 <_dtoa_r+0x938>
 8022b22:	2400      	movs	r4, #0
 8022b24:	4625      	mov	r5, r4
 8022b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022b28:	43db      	mvns	r3, r3
 8022b2a:	9304      	str	r3, [sp, #16]
 8022b2c:	4656      	mov	r6, sl
 8022b2e:	2700      	movs	r7, #0
 8022b30:	4621      	mov	r1, r4
 8022b32:	4658      	mov	r0, fp
 8022b34:	f000 fafe 	bl	8023134 <_Bfree>
 8022b38:	2d00      	cmp	r5, #0
 8022b3a:	d0dc      	beq.n	8022af6 <_dtoa_r+0x65e>
 8022b3c:	b12f      	cbz	r7, 8022b4a <_dtoa_r+0x6b2>
 8022b3e:	42af      	cmp	r7, r5
 8022b40:	d003      	beq.n	8022b4a <_dtoa_r+0x6b2>
 8022b42:	4639      	mov	r1, r7
 8022b44:	4658      	mov	r0, fp
 8022b46:	f000 faf5 	bl	8023134 <_Bfree>
 8022b4a:	4629      	mov	r1, r5
 8022b4c:	4658      	mov	r0, fp
 8022b4e:	f000 faf1 	bl	8023134 <_Bfree>
 8022b52:	e7d0      	b.n	8022af6 <_dtoa_r+0x65e>
 8022b54:	9704      	str	r7, [sp, #16]
 8022b56:	4633      	mov	r3, r6
 8022b58:	461e      	mov	r6, r3
 8022b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022b5e:	2a39      	cmp	r2, #57	@ 0x39
 8022b60:	d107      	bne.n	8022b72 <_dtoa_r+0x6da>
 8022b62:	459a      	cmp	sl, r3
 8022b64:	d1f8      	bne.n	8022b58 <_dtoa_r+0x6c0>
 8022b66:	9a04      	ldr	r2, [sp, #16]
 8022b68:	3201      	adds	r2, #1
 8022b6a:	9204      	str	r2, [sp, #16]
 8022b6c:	2230      	movs	r2, #48	@ 0x30
 8022b6e:	f88a 2000 	strb.w	r2, [sl]
 8022b72:	781a      	ldrb	r2, [r3, #0]
 8022b74:	3201      	adds	r2, #1
 8022b76:	701a      	strb	r2, [r3, #0]
 8022b78:	e7bd      	b.n	8022af6 <_dtoa_r+0x65e>
 8022b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8022d68 <_dtoa_r+0x8d0>)
 8022b7c:	2200      	movs	r2, #0
 8022b7e:	f7dd fd3b 	bl	80005f8 <__aeabi_dmul>
 8022b82:	2200      	movs	r2, #0
 8022b84:	2300      	movs	r3, #0
 8022b86:	4604      	mov	r4, r0
 8022b88:	460d      	mov	r5, r1
 8022b8a:	f7dd ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8022b8e:	2800      	cmp	r0, #0
 8022b90:	f43f aebb 	beq.w	802290a <_dtoa_r+0x472>
 8022b94:	e6f0      	b.n	8022978 <_dtoa_r+0x4e0>
 8022b96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022b98:	2a00      	cmp	r2, #0
 8022b9a:	f000 80db 	beq.w	8022d54 <_dtoa_r+0x8bc>
 8022b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022ba0:	2a01      	cmp	r2, #1
 8022ba2:	f300 80bf 	bgt.w	8022d24 <_dtoa_r+0x88c>
 8022ba6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022ba8:	2a00      	cmp	r2, #0
 8022baa:	f000 80b7 	beq.w	8022d1c <_dtoa_r+0x884>
 8022bae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8022bb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022bb4:	4646      	mov	r6, r8
 8022bb6:	9a08      	ldr	r2, [sp, #32]
 8022bb8:	2101      	movs	r1, #1
 8022bba:	441a      	add	r2, r3
 8022bbc:	4658      	mov	r0, fp
 8022bbe:	4498      	add	r8, r3
 8022bc0:	9208      	str	r2, [sp, #32]
 8022bc2:	f000 fb6b 	bl	802329c <__i2b>
 8022bc6:	4605      	mov	r5, r0
 8022bc8:	b15e      	cbz	r6, 8022be2 <_dtoa_r+0x74a>
 8022bca:	9b08      	ldr	r3, [sp, #32]
 8022bcc:	2b00      	cmp	r3, #0
 8022bce:	dd08      	ble.n	8022be2 <_dtoa_r+0x74a>
 8022bd0:	42b3      	cmp	r3, r6
 8022bd2:	9a08      	ldr	r2, [sp, #32]
 8022bd4:	bfa8      	it	ge
 8022bd6:	4633      	movge	r3, r6
 8022bd8:	eba8 0803 	sub.w	r8, r8, r3
 8022bdc:	1af6      	subs	r6, r6, r3
 8022bde:	1ad3      	subs	r3, r2, r3
 8022be0:	9308      	str	r3, [sp, #32]
 8022be2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022be4:	b1f3      	cbz	r3, 8022c24 <_dtoa_r+0x78c>
 8022be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	f000 80b7 	beq.w	8022d5c <_dtoa_r+0x8c4>
 8022bee:	b18c      	cbz	r4, 8022c14 <_dtoa_r+0x77c>
 8022bf0:	4629      	mov	r1, r5
 8022bf2:	4622      	mov	r2, r4
 8022bf4:	4658      	mov	r0, fp
 8022bf6:	f000 fc11 	bl	802341c <__pow5mult>
 8022bfa:	464a      	mov	r2, r9
 8022bfc:	4601      	mov	r1, r0
 8022bfe:	4605      	mov	r5, r0
 8022c00:	4658      	mov	r0, fp
 8022c02:	f000 fb61 	bl	80232c8 <__multiply>
 8022c06:	4649      	mov	r1, r9
 8022c08:	9004      	str	r0, [sp, #16]
 8022c0a:	4658      	mov	r0, fp
 8022c0c:	f000 fa92 	bl	8023134 <_Bfree>
 8022c10:	9b04      	ldr	r3, [sp, #16]
 8022c12:	4699      	mov	r9, r3
 8022c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022c16:	1b1a      	subs	r2, r3, r4
 8022c18:	d004      	beq.n	8022c24 <_dtoa_r+0x78c>
 8022c1a:	4649      	mov	r1, r9
 8022c1c:	4658      	mov	r0, fp
 8022c1e:	f000 fbfd 	bl	802341c <__pow5mult>
 8022c22:	4681      	mov	r9, r0
 8022c24:	2101      	movs	r1, #1
 8022c26:	4658      	mov	r0, fp
 8022c28:	f000 fb38 	bl	802329c <__i2b>
 8022c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022c2e:	4604      	mov	r4, r0
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	f000 81cf 	beq.w	8022fd4 <_dtoa_r+0xb3c>
 8022c36:	461a      	mov	r2, r3
 8022c38:	4601      	mov	r1, r0
 8022c3a:	4658      	mov	r0, fp
 8022c3c:	f000 fbee 	bl	802341c <__pow5mult>
 8022c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022c42:	2b01      	cmp	r3, #1
 8022c44:	4604      	mov	r4, r0
 8022c46:	f300 8095 	bgt.w	8022d74 <_dtoa_r+0x8dc>
 8022c4a:	9b02      	ldr	r3, [sp, #8]
 8022c4c:	2b00      	cmp	r3, #0
 8022c4e:	f040 8087 	bne.w	8022d60 <_dtoa_r+0x8c8>
 8022c52:	9b03      	ldr	r3, [sp, #12]
 8022c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022c58:	2b00      	cmp	r3, #0
 8022c5a:	f040 8089 	bne.w	8022d70 <_dtoa_r+0x8d8>
 8022c5e:	9b03      	ldr	r3, [sp, #12]
 8022c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022c64:	0d1b      	lsrs	r3, r3, #20
 8022c66:	051b      	lsls	r3, r3, #20
 8022c68:	b12b      	cbz	r3, 8022c76 <_dtoa_r+0x7de>
 8022c6a:	9b08      	ldr	r3, [sp, #32]
 8022c6c:	3301      	adds	r3, #1
 8022c6e:	9308      	str	r3, [sp, #32]
 8022c70:	f108 0801 	add.w	r8, r8, #1
 8022c74:	2301      	movs	r3, #1
 8022c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8022c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	f000 81b0 	beq.w	8022fe0 <_dtoa_r+0xb48>
 8022c80:	6923      	ldr	r3, [r4, #16]
 8022c82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8022c86:	6918      	ldr	r0, [r3, #16]
 8022c88:	f000 fabc 	bl	8023204 <__hi0bits>
 8022c8c:	f1c0 0020 	rsb	r0, r0, #32
 8022c90:	9b08      	ldr	r3, [sp, #32]
 8022c92:	4418      	add	r0, r3
 8022c94:	f010 001f 	ands.w	r0, r0, #31
 8022c98:	d077      	beq.n	8022d8a <_dtoa_r+0x8f2>
 8022c9a:	f1c0 0320 	rsb	r3, r0, #32
 8022c9e:	2b04      	cmp	r3, #4
 8022ca0:	dd6b      	ble.n	8022d7a <_dtoa_r+0x8e2>
 8022ca2:	9b08      	ldr	r3, [sp, #32]
 8022ca4:	f1c0 001c 	rsb	r0, r0, #28
 8022ca8:	4403      	add	r3, r0
 8022caa:	4480      	add	r8, r0
 8022cac:	4406      	add	r6, r0
 8022cae:	9308      	str	r3, [sp, #32]
 8022cb0:	f1b8 0f00 	cmp.w	r8, #0
 8022cb4:	dd05      	ble.n	8022cc2 <_dtoa_r+0x82a>
 8022cb6:	4649      	mov	r1, r9
 8022cb8:	4642      	mov	r2, r8
 8022cba:	4658      	mov	r0, fp
 8022cbc:	f000 fc08 	bl	80234d0 <__lshift>
 8022cc0:	4681      	mov	r9, r0
 8022cc2:	9b08      	ldr	r3, [sp, #32]
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	dd05      	ble.n	8022cd4 <_dtoa_r+0x83c>
 8022cc8:	4621      	mov	r1, r4
 8022cca:	461a      	mov	r2, r3
 8022ccc:	4658      	mov	r0, fp
 8022cce:	f000 fbff 	bl	80234d0 <__lshift>
 8022cd2:	4604      	mov	r4, r0
 8022cd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022cd6:	2b00      	cmp	r3, #0
 8022cd8:	d059      	beq.n	8022d8e <_dtoa_r+0x8f6>
 8022cda:	4621      	mov	r1, r4
 8022cdc:	4648      	mov	r0, r9
 8022cde:	f000 fc63 	bl	80235a8 <__mcmp>
 8022ce2:	2800      	cmp	r0, #0
 8022ce4:	da53      	bge.n	8022d8e <_dtoa_r+0x8f6>
 8022ce6:	1e7b      	subs	r3, r7, #1
 8022ce8:	9304      	str	r3, [sp, #16]
 8022cea:	4649      	mov	r1, r9
 8022cec:	2300      	movs	r3, #0
 8022cee:	220a      	movs	r2, #10
 8022cf0:	4658      	mov	r0, fp
 8022cf2:	f000 fa41 	bl	8023178 <__multadd>
 8022cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022cf8:	4681      	mov	r9, r0
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	f000 8172 	beq.w	8022fe4 <_dtoa_r+0xb4c>
 8022d00:	2300      	movs	r3, #0
 8022d02:	4629      	mov	r1, r5
 8022d04:	220a      	movs	r2, #10
 8022d06:	4658      	mov	r0, fp
 8022d08:	f000 fa36 	bl	8023178 <__multadd>
 8022d0c:	9b00      	ldr	r3, [sp, #0]
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	4605      	mov	r5, r0
 8022d12:	dc67      	bgt.n	8022de4 <_dtoa_r+0x94c>
 8022d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d16:	2b02      	cmp	r3, #2
 8022d18:	dc41      	bgt.n	8022d9e <_dtoa_r+0x906>
 8022d1a:	e063      	b.n	8022de4 <_dtoa_r+0x94c>
 8022d1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022d1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8022d22:	e746      	b.n	8022bb2 <_dtoa_r+0x71a>
 8022d24:	9b07      	ldr	r3, [sp, #28]
 8022d26:	1e5c      	subs	r4, r3, #1
 8022d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022d2a:	42a3      	cmp	r3, r4
 8022d2c:	bfbf      	itttt	lt
 8022d2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8022d30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8022d32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8022d34:	1ae3      	sublt	r3, r4, r3
 8022d36:	bfb4      	ite	lt
 8022d38:	18d2      	addlt	r2, r2, r3
 8022d3a:	1b1c      	subge	r4, r3, r4
 8022d3c:	9b07      	ldr	r3, [sp, #28]
 8022d3e:	bfbc      	itt	lt
 8022d40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8022d42:	2400      	movlt	r4, #0
 8022d44:	2b00      	cmp	r3, #0
 8022d46:	bfb5      	itete	lt
 8022d48:	eba8 0603 	sublt.w	r6, r8, r3
 8022d4c:	9b07      	ldrge	r3, [sp, #28]
 8022d4e:	2300      	movlt	r3, #0
 8022d50:	4646      	movge	r6, r8
 8022d52:	e730      	b.n	8022bb6 <_dtoa_r+0x71e>
 8022d54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022d56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8022d58:	4646      	mov	r6, r8
 8022d5a:	e735      	b.n	8022bc8 <_dtoa_r+0x730>
 8022d5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022d5e:	e75c      	b.n	8022c1a <_dtoa_r+0x782>
 8022d60:	2300      	movs	r3, #0
 8022d62:	e788      	b.n	8022c76 <_dtoa_r+0x7de>
 8022d64:	3fe00000 	.word	0x3fe00000
 8022d68:	40240000 	.word	0x40240000
 8022d6c:	40140000 	.word	0x40140000
 8022d70:	9b02      	ldr	r3, [sp, #8]
 8022d72:	e780      	b.n	8022c76 <_dtoa_r+0x7de>
 8022d74:	2300      	movs	r3, #0
 8022d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8022d78:	e782      	b.n	8022c80 <_dtoa_r+0x7e8>
 8022d7a:	d099      	beq.n	8022cb0 <_dtoa_r+0x818>
 8022d7c:	9a08      	ldr	r2, [sp, #32]
 8022d7e:	331c      	adds	r3, #28
 8022d80:	441a      	add	r2, r3
 8022d82:	4498      	add	r8, r3
 8022d84:	441e      	add	r6, r3
 8022d86:	9208      	str	r2, [sp, #32]
 8022d88:	e792      	b.n	8022cb0 <_dtoa_r+0x818>
 8022d8a:	4603      	mov	r3, r0
 8022d8c:	e7f6      	b.n	8022d7c <_dtoa_r+0x8e4>
 8022d8e:	9b07      	ldr	r3, [sp, #28]
 8022d90:	9704      	str	r7, [sp, #16]
 8022d92:	2b00      	cmp	r3, #0
 8022d94:	dc20      	bgt.n	8022dd8 <_dtoa_r+0x940>
 8022d96:	9300      	str	r3, [sp, #0]
 8022d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d9a:	2b02      	cmp	r3, #2
 8022d9c:	dd1e      	ble.n	8022ddc <_dtoa_r+0x944>
 8022d9e:	9b00      	ldr	r3, [sp, #0]
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	f47f aec0 	bne.w	8022b26 <_dtoa_r+0x68e>
 8022da6:	4621      	mov	r1, r4
 8022da8:	2205      	movs	r2, #5
 8022daa:	4658      	mov	r0, fp
 8022dac:	f000 f9e4 	bl	8023178 <__multadd>
 8022db0:	4601      	mov	r1, r0
 8022db2:	4604      	mov	r4, r0
 8022db4:	4648      	mov	r0, r9
 8022db6:	f000 fbf7 	bl	80235a8 <__mcmp>
 8022dba:	2800      	cmp	r0, #0
 8022dbc:	f77f aeb3 	ble.w	8022b26 <_dtoa_r+0x68e>
 8022dc0:	4656      	mov	r6, sl
 8022dc2:	2331      	movs	r3, #49	@ 0x31
 8022dc4:	f806 3b01 	strb.w	r3, [r6], #1
 8022dc8:	9b04      	ldr	r3, [sp, #16]
 8022dca:	3301      	adds	r3, #1
 8022dcc:	9304      	str	r3, [sp, #16]
 8022dce:	e6ae      	b.n	8022b2e <_dtoa_r+0x696>
 8022dd0:	9c07      	ldr	r4, [sp, #28]
 8022dd2:	9704      	str	r7, [sp, #16]
 8022dd4:	4625      	mov	r5, r4
 8022dd6:	e7f3      	b.n	8022dc0 <_dtoa_r+0x928>
 8022dd8:	9b07      	ldr	r3, [sp, #28]
 8022dda:	9300      	str	r3, [sp, #0]
 8022ddc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	f000 8104 	beq.w	8022fec <_dtoa_r+0xb54>
 8022de4:	2e00      	cmp	r6, #0
 8022de6:	dd05      	ble.n	8022df4 <_dtoa_r+0x95c>
 8022de8:	4629      	mov	r1, r5
 8022dea:	4632      	mov	r2, r6
 8022dec:	4658      	mov	r0, fp
 8022dee:	f000 fb6f 	bl	80234d0 <__lshift>
 8022df2:	4605      	mov	r5, r0
 8022df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	d05a      	beq.n	8022eb0 <_dtoa_r+0xa18>
 8022dfa:	6869      	ldr	r1, [r5, #4]
 8022dfc:	4658      	mov	r0, fp
 8022dfe:	f000 f959 	bl	80230b4 <_Balloc>
 8022e02:	4606      	mov	r6, r0
 8022e04:	b928      	cbnz	r0, 8022e12 <_dtoa_r+0x97a>
 8022e06:	4b84      	ldr	r3, [pc, #528]	@ (8023018 <_dtoa_r+0xb80>)
 8022e08:	4602      	mov	r2, r0
 8022e0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8022e0e:	f7ff bb5a 	b.w	80224c6 <_dtoa_r+0x2e>
 8022e12:	692a      	ldr	r2, [r5, #16]
 8022e14:	3202      	adds	r2, #2
 8022e16:	0092      	lsls	r2, r2, #2
 8022e18:	f105 010c 	add.w	r1, r5, #12
 8022e1c:	300c      	adds	r0, #12
 8022e1e:	f7ff faa4 	bl	802236a <memcpy>
 8022e22:	2201      	movs	r2, #1
 8022e24:	4631      	mov	r1, r6
 8022e26:	4658      	mov	r0, fp
 8022e28:	f000 fb52 	bl	80234d0 <__lshift>
 8022e2c:	f10a 0301 	add.w	r3, sl, #1
 8022e30:	9307      	str	r3, [sp, #28]
 8022e32:	9b00      	ldr	r3, [sp, #0]
 8022e34:	4453      	add	r3, sl
 8022e36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e38:	9b02      	ldr	r3, [sp, #8]
 8022e3a:	f003 0301 	and.w	r3, r3, #1
 8022e3e:	462f      	mov	r7, r5
 8022e40:	930a      	str	r3, [sp, #40]	@ 0x28
 8022e42:	4605      	mov	r5, r0
 8022e44:	9b07      	ldr	r3, [sp, #28]
 8022e46:	4621      	mov	r1, r4
 8022e48:	3b01      	subs	r3, #1
 8022e4a:	4648      	mov	r0, r9
 8022e4c:	9300      	str	r3, [sp, #0]
 8022e4e:	f7ff fa9a 	bl	8022386 <quorem>
 8022e52:	4639      	mov	r1, r7
 8022e54:	9002      	str	r0, [sp, #8]
 8022e56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8022e5a:	4648      	mov	r0, r9
 8022e5c:	f000 fba4 	bl	80235a8 <__mcmp>
 8022e60:	462a      	mov	r2, r5
 8022e62:	9008      	str	r0, [sp, #32]
 8022e64:	4621      	mov	r1, r4
 8022e66:	4658      	mov	r0, fp
 8022e68:	f000 fbba 	bl	80235e0 <__mdiff>
 8022e6c:	68c2      	ldr	r2, [r0, #12]
 8022e6e:	4606      	mov	r6, r0
 8022e70:	bb02      	cbnz	r2, 8022eb4 <_dtoa_r+0xa1c>
 8022e72:	4601      	mov	r1, r0
 8022e74:	4648      	mov	r0, r9
 8022e76:	f000 fb97 	bl	80235a8 <__mcmp>
 8022e7a:	4602      	mov	r2, r0
 8022e7c:	4631      	mov	r1, r6
 8022e7e:	4658      	mov	r0, fp
 8022e80:	920e      	str	r2, [sp, #56]	@ 0x38
 8022e82:	f000 f957 	bl	8023134 <_Bfree>
 8022e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022e8a:	9e07      	ldr	r6, [sp, #28]
 8022e8c:	ea43 0102 	orr.w	r1, r3, r2
 8022e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e92:	4319      	orrs	r1, r3
 8022e94:	d110      	bne.n	8022eb8 <_dtoa_r+0xa20>
 8022e96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8022e9a:	d029      	beq.n	8022ef0 <_dtoa_r+0xa58>
 8022e9c:	9b08      	ldr	r3, [sp, #32]
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	dd02      	ble.n	8022ea8 <_dtoa_r+0xa10>
 8022ea2:	9b02      	ldr	r3, [sp, #8]
 8022ea4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8022ea8:	9b00      	ldr	r3, [sp, #0]
 8022eaa:	f883 8000 	strb.w	r8, [r3]
 8022eae:	e63f      	b.n	8022b30 <_dtoa_r+0x698>
 8022eb0:	4628      	mov	r0, r5
 8022eb2:	e7bb      	b.n	8022e2c <_dtoa_r+0x994>
 8022eb4:	2201      	movs	r2, #1
 8022eb6:	e7e1      	b.n	8022e7c <_dtoa_r+0x9e4>
 8022eb8:	9b08      	ldr	r3, [sp, #32]
 8022eba:	2b00      	cmp	r3, #0
 8022ebc:	db04      	blt.n	8022ec8 <_dtoa_r+0xa30>
 8022ebe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022ec0:	430b      	orrs	r3, r1
 8022ec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022ec4:	430b      	orrs	r3, r1
 8022ec6:	d120      	bne.n	8022f0a <_dtoa_r+0xa72>
 8022ec8:	2a00      	cmp	r2, #0
 8022eca:	dded      	ble.n	8022ea8 <_dtoa_r+0xa10>
 8022ecc:	4649      	mov	r1, r9
 8022ece:	2201      	movs	r2, #1
 8022ed0:	4658      	mov	r0, fp
 8022ed2:	f000 fafd 	bl	80234d0 <__lshift>
 8022ed6:	4621      	mov	r1, r4
 8022ed8:	4681      	mov	r9, r0
 8022eda:	f000 fb65 	bl	80235a8 <__mcmp>
 8022ede:	2800      	cmp	r0, #0
 8022ee0:	dc03      	bgt.n	8022eea <_dtoa_r+0xa52>
 8022ee2:	d1e1      	bne.n	8022ea8 <_dtoa_r+0xa10>
 8022ee4:	f018 0f01 	tst.w	r8, #1
 8022ee8:	d0de      	beq.n	8022ea8 <_dtoa_r+0xa10>
 8022eea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8022eee:	d1d8      	bne.n	8022ea2 <_dtoa_r+0xa0a>
 8022ef0:	9a00      	ldr	r2, [sp, #0]
 8022ef2:	2339      	movs	r3, #57	@ 0x39
 8022ef4:	7013      	strb	r3, [r2, #0]
 8022ef6:	4633      	mov	r3, r6
 8022ef8:	461e      	mov	r6, r3
 8022efa:	3b01      	subs	r3, #1
 8022efc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8022f00:	2a39      	cmp	r2, #57	@ 0x39
 8022f02:	d052      	beq.n	8022faa <_dtoa_r+0xb12>
 8022f04:	3201      	adds	r2, #1
 8022f06:	701a      	strb	r2, [r3, #0]
 8022f08:	e612      	b.n	8022b30 <_dtoa_r+0x698>
 8022f0a:	2a00      	cmp	r2, #0
 8022f0c:	dd07      	ble.n	8022f1e <_dtoa_r+0xa86>
 8022f0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8022f12:	d0ed      	beq.n	8022ef0 <_dtoa_r+0xa58>
 8022f14:	9a00      	ldr	r2, [sp, #0]
 8022f16:	f108 0301 	add.w	r3, r8, #1
 8022f1a:	7013      	strb	r3, [r2, #0]
 8022f1c:	e608      	b.n	8022b30 <_dtoa_r+0x698>
 8022f1e:	9b07      	ldr	r3, [sp, #28]
 8022f20:	9a07      	ldr	r2, [sp, #28]
 8022f22:	f803 8c01 	strb.w	r8, [r3, #-1]
 8022f26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022f28:	4293      	cmp	r3, r2
 8022f2a:	d028      	beq.n	8022f7e <_dtoa_r+0xae6>
 8022f2c:	4649      	mov	r1, r9
 8022f2e:	2300      	movs	r3, #0
 8022f30:	220a      	movs	r2, #10
 8022f32:	4658      	mov	r0, fp
 8022f34:	f000 f920 	bl	8023178 <__multadd>
 8022f38:	42af      	cmp	r7, r5
 8022f3a:	4681      	mov	r9, r0
 8022f3c:	f04f 0300 	mov.w	r3, #0
 8022f40:	f04f 020a 	mov.w	r2, #10
 8022f44:	4639      	mov	r1, r7
 8022f46:	4658      	mov	r0, fp
 8022f48:	d107      	bne.n	8022f5a <_dtoa_r+0xac2>
 8022f4a:	f000 f915 	bl	8023178 <__multadd>
 8022f4e:	4607      	mov	r7, r0
 8022f50:	4605      	mov	r5, r0
 8022f52:	9b07      	ldr	r3, [sp, #28]
 8022f54:	3301      	adds	r3, #1
 8022f56:	9307      	str	r3, [sp, #28]
 8022f58:	e774      	b.n	8022e44 <_dtoa_r+0x9ac>
 8022f5a:	f000 f90d 	bl	8023178 <__multadd>
 8022f5e:	4629      	mov	r1, r5
 8022f60:	4607      	mov	r7, r0
 8022f62:	2300      	movs	r3, #0
 8022f64:	220a      	movs	r2, #10
 8022f66:	4658      	mov	r0, fp
 8022f68:	f000 f906 	bl	8023178 <__multadd>
 8022f6c:	4605      	mov	r5, r0
 8022f6e:	e7f0      	b.n	8022f52 <_dtoa_r+0xaba>
 8022f70:	9b00      	ldr	r3, [sp, #0]
 8022f72:	2b00      	cmp	r3, #0
 8022f74:	bfcc      	ite	gt
 8022f76:	461e      	movgt	r6, r3
 8022f78:	2601      	movle	r6, #1
 8022f7a:	4456      	add	r6, sl
 8022f7c:	2700      	movs	r7, #0
 8022f7e:	4649      	mov	r1, r9
 8022f80:	2201      	movs	r2, #1
 8022f82:	4658      	mov	r0, fp
 8022f84:	f000 faa4 	bl	80234d0 <__lshift>
 8022f88:	4621      	mov	r1, r4
 8022f8a:	4681      	mov	r9, r0
 8022f8c:	f000 fb0c 	bl	80235a8 <__mcmp>
 8022f90:	2800      	cmp	r0, #0
 8022f92:	dcb0      	bgt.n	8022ef6 <_dtoa_r+0xa5e>
 8022f94:	d102      	bne.n	8022f9c <_dtoa_r+0xb04>
 8022f96:	f018 0f01 	tst.w	r8, #1
 8022f9a:	d1ac      	bne.n	8022ef6 <_dtoa_r+0xa5e>
 8022f9c:	4633      	mov	r3, r6
 8022f9e:	461e      	mov	r6, r3
 8022fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8022fa4:	2a30      	cmp	r2, #48	@ 0x30
 8022fa6:	d0fa      	beq.n	8022f9e <_dtoa_r+0xb06>
 8022fa8:	e5c2      	b.n	8022b30 <_dtoa_r+0x698>
 8022faa:	459a      	cmp	sl, r3
 8022fac:	d1a4      	bne.n	8022ef8 <_dtoa_r+0xa60>
 8022fae:	9b04      	ldr	r3, [sp, #16]
 8022fb0:	3301      	adds	r3, #1
 8022fb2:	9304      	str	r3, [sp, #16]
 8022fb4:	2331      	movs	r3, #49	@ 0x31
 8022fb6:	f88a 3000 	strb.w	r3, [sl]
 8022fba:	e5b9      	b.n	8022b30 <_dtoa_r+0x698>
 8022fbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022fbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 802301c <_dtoa_r+0xb84>
 8022fc2:	b11b      	cbz	r3, 8022fcc <_dtoa_r+0xb34>
 8022fc4:	f10a 0308 	add.w	r3, sl, #8
 8022fc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8022fca:	6013      	str	r3, [r2, #0]
 8022fcc:	4650      	mov	r0, sl
 8022fce:	b019      	add	sp, #100	@ 0x64
 8022fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022fd6:	2b01      	cmp	r3, #1
 8022fd8:	f77f ae37 	ble.w	8022c4a <_dtoa_r+0x7b2>
 8022fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8022fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8022fe0:	2001      	movs	r0, #1
 8022fe2:	e655      	b.n	8022c90 <_dtoa_r+0x7f8>
 8022fe4:	9b00      	ldr	r3, [sp, #0]
 8022fe6:	2b00      	cmp	r3, #0
 8022fe8:	f77f aed6 	ble.w	8022d98 <_dtoa_r+0x900>
 8022fec:	4656      	mov	r6, sl
 8022fee:	4621      	mov	r1, r4
 8022ff0:	4648      	mov	r0, r9
 8022ff2:	f7ff f9c8 	bl	8022386 <quorem>
 8022ff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8022ffa:	f806 8b01 	strb.w	r8, [r6], #1
 8022ffe:	9b00      	ldr	r3, [sp, #0]
 8023000:	eba6 020a 	sub.w	r2, r6, sl
 8023004:	4293      	cmp	r3, r2
 8023006:	ddb3      	ble.n	8022f70 <_dtoa_r+0xad8>
 8023008:	4649      	mov	r1, r9
 802300a:	2300      	movs	r3, #0
 802300c:	220a      	movs	r2, #10
 802300e:	4658      	mov	r0, fp
 8023010:	f000 f8b2 	bl	8023178 <__multadd>
 8023014:	4681      	mov	r9, r0
 8023016:	e7ea      	b.n	8022fee <_dtoa_r+0xb56>
 8023018:	08025650 	.word	0x08025650
 802301c:	080255d4 	.word	0x080255d4

08023020 <_free_r>:
 8023020:	b538      	push	{r3, r4, r5, lr}
 8023022:	4605      	mov	r5, r0
 8023024:	2900      	cmp	r1, #0
 8023026:	d041      	beq.n	80230ac <_free_r+0x8c>
 8023028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802302c:	1f0c      	subs	r4, r1, #4
 802302e:	2b00      	cmp	r3, #0
 8023030:	bfb8      	it	lt
 8023032:	18e4      	addlt	r4, r4, r3
 8023034:	f7fe fb3a 	bl	80216ac <__malloc_lock>
 8023038:	4a1d      	ldr	r2, [pc, #116]	@ (80230b0 <_free_r+0x90>)
 802303a:	6813      	ldr	r3, [r2, #0]
 802303c:	b933      	cbnz	r3, 802304c <_free_r+0x2c>
 802303e:	6063      	str	r3, [r4, #4]
 8023040:	6014      	str	r4, [r2, #0]
 8023042:	4628      	mov	r0, r5
 8023044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023048:	f7fe bb36 	b.w	80216b8 <__malloc_unlock>
 802304c:	42a3      	cmp	r3, r4
 802304e:	d908      	bls.n	8023062 <_free_r+0x42>
 8023050:	6820      	ldr	r0, [r4, #0]
 8023052:	1821      	adds	r1, r4, r0
 8023054:	428b      	cmp	r3, r1
 8023056:	bf01      	itttt	eq
 8023058:	6819      	ldreq	r1, [r3, #0]
 802305a:	685b      	ldreq	r3, [r3, #4]
 802305c:	1809      	addeq	r1, r1, r0
 802305e:	6021      	streq	r1, [r4, #0]
 8023060:	e7ed      	b.n	802303e <_free_r+0x1e>
 8023062:	461a      	mov	r2, r3
 8023064:	685b      	ldr	r3, [r3, #4]
 8023066:	b10b      	cbz	r3, 802306c <_free_r+0x4c>
 8023068:	42a3      	cmp	r3, r4
 802306a:	d9fa      	bls.n	8023062 <_free_r+0x42>
 802306c:	6811      	ldr	r1, [r2, #0]
 802306e:	1850      	adds	r0, r2, r1
 8023070:	42a0      	cmp	r0, r4
 8023072:	d10b      	bne.n	802308c <_free_r+0x6c>
 8023074:	6820      	ldr	r0, [r4, #0]
 8023076:	4401      	add	r1, r0
 8023078:	1850      	adds	r0, r2, r1
 802307a:	4283      	cmp	r3, r0
 802307c:	6011      	str	r1, [r2, #0]
 802307e:	d1e0      	bne.n	8023042 <_free_r+0x22>
 8023080:	6818      	ldr	r0, [r3, #0]
 8023082:	685b      	ldr	r3, [r3, #4]
 8023084:	6053      	str	r3, [r2, #4]
 8023086:	4408      	add	r0, r1
 8023088:	6010      	str	r0, [r2, #0]
 802308a:	e7da      	b.n	8023042 <_free_r+0x22>
 802308c:	d902      	bls.n	8023094 <_free_r+0x74>
 802308e:	230c      	movs	r3, #12
 8023090:	602b      	str	r3, [r5, #0]
 8023092:	e7d6      	b.n	8023042 <_free_r+0x22>
 8023094:	6820      	ldr	r0, [r4, #0]
 8023096:	1821      	adds	r1, r4, r0
 8023098:	428b      	cmp	r3, r1
 802309a:	bf04      	itt	eq
 802309c:	6819      	ldreq	r1, [r3, #0]
 802309e:	685b      	ldreq	r3, [r3, #4]
 80230a0:	6063      	str	r3, [r4, #4]
 80230a2:	bf04      	itt	eq
 80230a4:	1809      	addeq	r1, r1, r0
 80230a6:	6021      	streq	r1, [r4, #0]
 80230a8:	6054      	str	r4, [r2, #4]
 80230aa:	e7ca      	b.n	8023042 <_free_r+0x22>
 80230ac:	bd38      	pop	{r3, r4, r5, pc}
 80230ae:	bf00      	nop
 80230b0:	20008004 	.word	0x20008004

080230b4 <_Balloc>:
 80230b4:	b570      	push	{r4, r5, r6, lr}
 80230b6:	69c6      	ldr	r6, [r0, #28]
 80230b8:	4604      	mov	r4, r0
 80230ba:	460d      	mov	r5, r1
 80230bc:	b976      	cbnz	r6, 80230dc <_Balloc+0x28>
 80230be:	2010      	movs	r0, #16
 80230c0:	f7fe fa42 	bl	8021548 <malloc>
 80230c4:	4602      	mov	r2, r0
 80230c6:	61e0      	str	r0, [r4, #28]
 80230c8:	b920      	cbnz	r0, 80230d4 <_Balloc+0x20>
 80230ca:	4b18      	ldr	r3, [pc, #96]	@ (802312c <_Balloc+0x78>)
 80230cc:	4818      	ldr	r0, [pc, #96]	@ (8023130 <_Balloc+0x7c>)
 80230ce:	216b      	movs	r1, #107	@ 0x6b
 80230d0:	f000 fd90 	bl	8023bf4 <__assert_func>
 80230d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80230d8:	6006      	str	r6, [r0, #0]
 80230da:	60c6      	str	r6, [r0, #12]
 80230dc:	69e6      	ldr	r6, [r4, #28]
 80230de:	68f3      	ldr	r3, [r6, #12]
 80230e0:	b183      	cbz	r3, 8023104 <_Balloc+0x50>
 80230e2:	69e3      	ldr	r3, [r4, #28]
 80230e4:	68db      	ldr	r3, [r3, #12]
 80230e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80230ea:	b9b8      	cbnz	r0, 802311c <_Balloc+0x68>
 80230ec:	2101      	movs	r1, #1
 80230ee:	fa01 f605 	lsl.w	r6, r1, r5
 80230f2:	1d72      	adds	r2, r6, #5
 80230f4:	0092      	lsls	r2, r2, #2
 80230f6:	4620      	mov	r0, r4
 80230f8:	f000 fd9a 	bl	8023c30 <_calloc_r>
 80230fc:	b160      	cbz	r0, 8023118 <_Balloc+0x64>
 80230fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8023102:	e00e      	b.n	8023122 <_Balloc+0x6e>
 8023104:	2221      	movs	r2, #33	@ 0x21
 8023106:	2104      	movs	r1, #4
 8023108:	4620      	mov	r0, r4
 802310a:	f000 fd91 	bl	8023c30 <_calloc_r>
 802310e:	69e3      	ldr	r3, [r4, #28]
 8023110:	60f0      	str	r0, [r6, #12]
 8023112:	68db      	ldr	r3, [r3, #12]
 8023114:	2b00      	cmp	r3, #0
 8023116:	d1e4      	bne.n	80230e2 <_Balloc+0x2e>
 8023118:	2000      	movs	r0, #0
 802311a:	bd70      	pop	{r4, r5, r6, pc}
 802311c:	6802      	ldr	r2, [r0, #0]
 802311e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8023122:	2300      	movs	r3, #0
 8023124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8023128:	e7f7      	b.n	802311a <_Balloc+0x66>
 802312a:	bf00      	nop
 802312c:	080255e1 	.word	0x080255e1
 8023130:	08025661 	.word	0x08025661

08023134 <_Bfree>:
 8023134:	b570      	push	{r4, r5, r6, lr}
 8023136:	69c6      	ldr	r6, [r0, #28]
 8023138:	4605      	mov	r5, r0
 802313a:	460c      	mov	r4, r1
 802313c:	b976      	cbnz	r6, 802315c <_Bfree+0x28>
 802313e:	2010      	movs	r0, #16
 8023140:	f7fe fa02 	bl	8021548 <malloc>
 8023144:	4602      	mov	r2, r0
 8023146:	61e8      	str	r0, [r5, #28]
 8023148:	b920      	cbnz	r0, 8023154 <_Bfree+0x20>
 802314a:	4b09      	ldr	r3, [pc, #36]	@ (8023170 <_Bfree+0x3c>)
 802314c:	4809      	ldr	r0, [pc, #36]	@ (8023174 <_Bfree+0x40>)
 802314e:	218f      	movs	r1, #143	@ 0x8f
 8023150:	f000 fd50 	bl	8023bf4 <__assert_func>
 8023154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8023158:	6006      	str	r6, [r0, #0]
 802315a:	60c6      	str	r6, [r0, #12]
 802315c:	b13c      	cbz	r4, 802316e <_Bfree+0x3a>
 802315e:	69eb      	ldr	r3, [r5, #28]
 8023160:	6862      	ldr	r2, [r4, #4]
 8023162:	68db      	ldr	r3, [r3, #12]
 8023164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023168:	6021      	str	r1, [r4, #0]
 802316a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802316e:	bd70      	pop	{r4, r5, r6, pc}
 8023170:	080255e1 	.word	0x080255e1
 8023174:	08025661 	.word	0x08025661

08023178 <__multadd>:
 8023178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802317c:	690d      	ldr	r5, [r1, #16]
 802317e:	4607      	mov	r7, r0
 8023180:	460c      	mov	r4, r1
 8023182:	461e      	mov	r6, r3
 8023184:	f101 0c14 	add.w	ip, r1, #20
 8023188:	2000      	movs	r0, #0
 802318a:	f8dc 3000 	ldr.w	r3, [ip]
 802318e:	b299      	uxth	r1, r3
 8023190:	fb02 6101 	mla	r1, r2, r1, r6
 8023194:	0c1e      	lsrs	r6, r3, #16
 8023196:	0c0b      	lsrs	r3, r1, #16
 8023198:	fb02 3306 	mla	r3, r2, r6, r3
 802319c:	b289      	uxth	r1, r1
 802319e:	3001      	adds	r0, #1
 80231a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80231a4:	4285      	cmp	r5, r0
 80231a6:	f84c 1b04 	str.w	r1, [ip], #4
 80231aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80231ae:	dcec      	bgt.n	802318a <__multadd+0x12>
 80231b0:	b30e      	cbz	r6, 80231f6 <__multadd+0x7e>
 80231b2:	68a3      	ldr	r3, [r4, #8]
 80231b4:	42ab      	cmp	r3, r5
 80231b6:	dc19      	bgt.n	80231ec <__multadd+0x74>
 80231b8:	6861      	ldr	r1, [r4, #4]
 80231ba:	4638      	mov	r0, r7
 80231bc:	3101      	adds	r1, #1
 80231be:	f7ff ff79 	bl	80230b4 <_Balloc>
 80231c2:	4680      	mov	r8, r0
 80231c4:	b928      	cbnz	r0, 80231d2 <__multadd+0x5a>
 80231c6:	4602      	mov	r2, r0
 80231c8:	4b0c      	ldr	r3, [pc, #48]	@ (80231fc <__multadd+0x84>)
 80231ca:	480d      	ldr	r0, [pc, #52]	@ (8023200 <__multadd+0x88>)
 80231cc:	21ba      	movs	r1, #186	@ 0xba
 80231ce:	f000 fd11 	bl	8023bf4 <__assert_func>
 80231d2:	6922      	ldr	r2, [r4, #16]
 80231d4:	3202      	adds	r2, #2
 80231d6:	f104 010c 	add.w	r1, r4, #12
 80231da:	0092      	lsls	r2, r2, #2
 80231dc:	300c      	adds	r0, #12
 80231de:	f7ff f8c4 	bl	802236a <memcpy>
 80231e2:	4621      	mov	r1, r4
 80231e4:	4638      	mov	r0, r7
 80231e6:	f7ff ffa5 	bl	8023134 <_Bfree>
 80231ea:	4644      	mov	r4, r8
 80231ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80231f0:	3501      	adds	r5, #1
 80231f2:	615e      	str	r6, [r3, #20]
 80231f4:	6125      	str	r5, [r4, #16]
 80231f6:	4620      	mov	r0, r4
 80231f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231fc:	08025650 	.word	0x08025650
 8023200:	08025661 	.word	0x08025661

08023204 <__hi0bits>:
 8023204:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8023208:	4603      	mov	r3, r0
 802320a:	bf36      	itet	cc
 802320c:	0403      	lslcc	r3, r0, #16
 802320e:	2000      	movcs	r0, #0
 8023210:	2010      	movcc	r0, #16
 8023212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8023216:	bf3c      	itt	cc
 8023218:	021b      	lslcc	r3, r3, #8
 802321a:	3008      	addcc	r0, #8
 802321c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023220:	bf3c      	itt	cc
 8023222:	011b      	lslcc	r3, r3, #4
 8023224:	3004      	addcc	r0, #4
 8023226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802322a:	bf3c      	itt	cc
 802322c:	009b      	lslcc	r3, r3, #2
 802322e:	3002      	addcc	r0, #2
 8023230:	2b00      	cmp	r3, #0
 8023232:	db05      	blt.n	8023240 <__hi0bits+0x3c>
 8023234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8023238:	f100 0001 	add.w	r0, r0, #1
 802323c:	bf08      	it	eq
 802323e:	2020      	moveq	r0, #32
 8023240:	4770      	bx	lr

08023242 <__lo0bits>:
 8023242:	6803      	ldr	r3, [r0, #0]
 8023244:	4602      	mov	r2, r0
 8023246:	f013 0007 	ands.w	r0, r3, #7
 802324a:	d00b      	beq.n	8023264 <__lo0bits+0x22>
 802324c:	07d9      	lsls	r1, r3, #31
 802324e:	d421      	bmi.n	8023294 <__lo0bits+0x52>
 8023250:	0798      	lsls	r0, r3, #30
 8023252:	bf49      	itett	mi
 8023254:	085b      	lsrmi	r3, r3, #1
 8023256:	089b      	lsrpl	r3, r3, #2
 8023258:	2001      	movmi	r0, #1
 802325a:	6013      	strmi	r3, [r2, #0]
 802325c:	bf5c      	itt	pl
 802325e:	6013      	strpl	r3, [r2, #0]
 8023260:	2002      	movpl	r0, #2
 8023262:	4770      	bx	lr
 8023264:	b299      	uxth	r1, r3
 8023266:	b909      	cbnz	r1, 802326c <__lo0bits+0x2a>
 8023268:	0c1b      	lsrs	r3, r3, #16
 802326a:	2010      	movs	r0, #16
 802326c:	b2d9      	uxtb	r1, r3
 802326e:	b909      	cbnz	r1, 8023274 <__lo0bits+0x32>
 8023270:	3008      	adds	r0, #8
 8023272:	0a1b      	lsrs	r3, r3, #8
 8023274:	0719      	lsls	r1, r3, #28
 8023276:	bf04      	itt	eq
 8023278:	091b      	lsreq	r3, r3, #4
 802327a:	3004      	addeq	r0, #4
 802327c:	0799      	lsls	r1, r3, #30
 802327e:	bf04      	itt	eq
 8023280:	089b      	lsreq	r3, r3, #2
 8023282:	3002      	addeq	r0, #2
 8023284:	07d9      	lsls	r1, r3, #31
 8023286:	d403      	bmi.n	8023290 <__lo0bits+0x4e>
 8023288:	085b      	lsrs	r3, r3, #1
 802328a:	f100 0001 	add.w	r0, r0, #1
 802328e:	d003      	beq.n	8023298 <__lo0bits+0x56>
 8023290:	6013      	str	r3, [r2, #0]
 8023292:	4770      	bx	lr
 8023294:	2000      	movs	r0, #0
 8023296:	4770      	bx	lr
 8023298:	2020      	movs	r0, #32
 802329a:	4770      	bx	lr

0802329c <__i2b>:
 802329c:	b510      	push	{r4, lr}
 802329e:	460c      	mov	r4, r1
 80232a0:	2101      	movs	r1, #1
 80232a2:	f7ff ff07 	bl	80230b4 <_Balloc>
 80232a6:	4602      	mov	r2, r0
 80232a8:	b928      	cbnz	r0, 80232b6 <__i2b+0x1a>
 80232aa:	4b05      	ldr	r3, [pc, #20]	@ (80232c0 <__i2b+0x24>)
 80232ac:	4805      	ldr	r0, [pc, #20]	@ (80232c4 <__i2b+0x28>)
 80232ae:	f240 1145 	movw	r1, #325	@ 0x145
 80232b2:	f000 fc9f 	bl	8023bf4 <__assert_func>
 80232b6:	2301      	movs	r3, #1
 80232b8:	6144      	str	r4, [r0, #20]
 80232ba:	6103      	str	r3, [r0, #16]
 80232bc:	bd10      	pop	{r4, pc}
 80232be:	bf00      	nop
 80232c0:	08025650 	.word	0x08025650
 80232c4:	08025661 	.word	0x08025661

080232c8 <__multiply>:
 80232c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232cc:	4614      	mov	r4, r2
 80232ce:	690a      	ldr	r2, [r1, #16]
 80232d0:	6923      	ldr	r3, [r4, #16]
 80232d2:	429a      	cmp	r2, r3
 80232d4:	bfa8      	it	ge
 80232d6:	4623      	movge	r3, r4
 80232d8:	460f      	mov	r7, r1
 80232da:	bfa4      	itt	ge
 80232dc:	460c      	movge	r4, r1
 80232de:	461f      	movge	r7, r3
 80232e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80232e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80232e8:	68a3      	ldr	r3, [r4, #8]
 80232ea:	6861      	ldr	r1, [r4, #4]
 80232ec:	eb0a 0609 	add.w	r6, sl, r9
 80232f0:	42b3      	cmp	r3, r6
 80232f2:	b085      	sub	sp, #20
 80232f4:	bfb8      	it	lt
 80232f6:	3101      	addlt	r1, #1
 80232f8:	f7ff fedc 	bl	80230b4 <_Balloc>
 80232fc:	b930      	cbnz	r0, 802330c <__multiply+0x44>
 80232fe:	4602      	mov	r2, r0
 8023300:	4b44      	ldr	r3, [pc, #272]	@ (8023414 <__multiply+0x14c>)
 8023302:	4845      	ldr	r0, [pc, #276]	@ (8023418 <__multiply+0x150>)
 8023304:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8023308:	f000 fc74 	bl	8023bf4 <__assert_func>
 802330c:	f100 0514 	add.w	r5, r0, #20
 8023310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8023314:	462b      	mov	r3, r5
 8023316:	2200      	movs	r2, #0
 8023318:	4543      	cmp	r3, r8
 802331a:	d321      	bcc.n	8023360 <__multiply+0x98>
 802331c:	f107 0114 	add.w	r1, r7, #20
 8023320:	f104 0214 	add.w	r2, r4, #20
 8023324:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8023328:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802332c:	9302      	str	r3, [sp, #8]
 802332e:	1b13      	subs	r3, r2, r4
 8023330:	3b15      	subs	r3, #21
 8023332:	f023 0303 	bic.w	r3, r3, #3
 8023336:	3304      	adds	r3, #4
 8023338:	f104 0715 	add.w	r7, r4, #21
 802333c:	42ba      	cmp	r2, r7
 802333e:	bf38      	it	cc
 8023340:	2304      	movcc	r3, #4
 8023342:	9301      	str	r3, [sp, #4]
 8023344:	9b02      	ldr	r3, [sp, #8]
 8023346:	9103      	str	r1, [sp, #12]
 8023348:	428b      	cmp	r3, r1
 802334a:	d80c      	bhi.n	8023366 <__multiply+0x9e>
 802334c:	2e00      	cmp	r6, #0
 802334e:	dd03      	ble.n	8023358 <__multiply+0x90>
 8023350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8023354:	2b00      	cmp	r3, #0
 8023356:	d05b      	beq.n	8023410 <__multiply+0x148>
 8023358:	6106      	str	r6, [r0, #16]
 802335a:	b005      	add	sp, #20
 802335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023360:	f843 2b04 	str.w	r2, [r3], #4
 8023364:	e7d8      	b.n	8023318 <__multiply+0x50>
 8023366:	f8b1 a000 	ldrh.w	sl, [r1]
 802336a:	f1ba 0f00 	cmp.w	sl, #0
 802336e:	d024      	beq.n	80233ba <__multiply+0xf2>
 8023370:	f104 0e14 	add.w	lr, r4, #20
 8023374:	46a9      	mov	r9, r5
 8023376:	f04f 0c00 	mov.w	ip, #0
 802337a:	f85e 7b04 	ldr.w	r7, [lr], #4
 802337e:	f8d9 3000 	ldr.w	r3, [r9]
 8023382:	fa1f fb87 	uxth.w	fp, r7
 8023386:	b29b      	uxth	r3, r3
 8023388:	fb0a 330b 	mla	r3, sl, fp, r3
 802338c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8023390:	f8d9 7000 	ldr.w	r7, [r9]
 8023394:	4463      	add	r3, ip
 8023396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802339a:	fb0a c70b 	mla	r7, sl, fp, ip
 802339e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80233a2:	b29b      	uxth	r3, r3
 80233a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80233a8:	4572      	cmp	r2, lr
 80233aa:	f849 3b04 	str.w	r3, [r9], #4
 80233ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80233b2:	d8e2      	bhi.n	802337a <__multiply+0xb2>
 80233b4:	9b01      	ldr	r3, [sp, #4]
 80233b6:	f845 c003 	str.w	ip, [r5, r3]
 80233ba:	9b03      	ldr	r3, [sp, #12]
 80233bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80233c0:	3104      	adds	r1, #4
 80233c2:	f1b9 0f00 	cmp.w	r9, #0
 80233c6:	d021      	beq.n	802340c <__multiply+0x144>
 80233c8:	682b      	ldr	r3, [r5, #0]
 80233ca:	f104 0c14 	add.w	ip, r4, #20
 80233ce:	46ae      	mov	lr, r5
 80233d0:	f04f 0a00 	mov.w	sl, #0
 80233d4:	f8bc b000 	ldrh.w	fp, [ip]
 80233d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80233dc:	fb09 770b 	mla	r7, r9, fp, r7
 80233e0:	4457      	add	r7, sl
 80233e2:	b29b      	uxth	r3, r3
 80233e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80233e8:	f84e 3b04 	str.w	r3, [lr], #4
 80233ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80233f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80233f4:	f8be 3000 	ldrh.w	r3, [lr]
 80233f8:	fb09 330a 	mla	r3, r9, sl, r3
 80233fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8023400:	4562      	cmp	r2, ip
 8023402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8023406:	d8e5      	bhi.n	80233d4 <__multiply+0x10c>
 8023408:	9f01      	ldr	r7, [sp, #4]
 802340a:	51eb      	str	r3, [r5, r7]
 802340c:	3504      	adds	r5, #4
 802340e:	e799      	b.n	8023344 <__multiply+0x7c>
 8023410:	3e01      	subs	r6, #1
 8023412:	e79b      	b.n	802334c <__multiply+0x84>
 8023414:	08025650 	.word	0x08025650
 8023418:	08025661 	.word	0x08025661

0802341c <__pow5mult>:
 802341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023420:	4615      	mov	r5, r2
 8023422:	f012 0203 	ands.w	r2, r2, #3
 8023426:	4607      	mov	r7, r0
 8023428:	460e      	mov	r6, r1
 802342a:	d007      	beq.n	802343c <__pow5mult+0x20>
 802342c:	4c25      	ldr	r4, [pc, #148]	@ (80234c4 <__pow5mult+0xa8>)
 802342e:	3a01      	subs	r2, #1
 8023430:	2300      	movs	r3, #0
 8023432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8023436:	f7ff fe9f 	bl	8023178 <__multadd>
 802343a:	4606      	mov	r6, r0
 802343c:	10ad      	asrs	r5, r5, #2
 802343e:	d03d      	beq.n	80234bc <__pow5mult+0xa0>
 8023440:	69fc      	ldr	r4, [r7, #28]
 8023442:	b97c      	cbnz	r4, 8023464 <__pow5mult+0x48>
 8023444:	2010      	movs	r0, #16
 8023446:	f7fe f87f 	bl	8021548 <malloc>
 802344a:	4602      	mov	r2, r0
 802344c:	61f8      	str	r0, [r7, #28]
 802344e:	b928      	cbnz	r0, 802345c <__pow5mult+0x40>
 8023450:	4b1d      	ldr	r3, [pc, #116]	@ (80234c8 <__pow5mult+0xac>)
 8023452:	481e      	ldr	r0, [pc, #120]	@ (80234cc <__pow5mult+0xb0>)
 8023454:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8023458:	f000 fbcc 	bl	8023bf4 <__assert_func>
 802345c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8023460:	6004      	str	r4, [r0, #0]
 8023462:	60c4      	str	r4, [r0, #12]
 8023464:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8023468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802346c:	b94c      	cbnz	r4, 8023482 <__pow5mult+0x66>
 802346e:	f240 2171 	movw	r1, #625	@ 0x271
 8023472:	4638      	mov	r0, r7
 8023474:	f7ff ff12 	bl	802329c <__i2b>
 8023478:	2300      	movs	r3, #0
 802347a:	f8c8 0008 	str.w	r0, [r8, #8]
 802347e:	4604      	mov	r4, r0
 8023480:	6003      	str	r3, [r0, #0]
 8023482:	f04f 0900 	mov.w	r9, #0
 8023486:	07eb      	lsls	r3, r5, #31
 8023488:	d50a      	bpl.n	80234a0 <__pow5mult+0x84>
 802348a:	4631      	mov	r1, r6
 802348c:	4622      	mov	r2, r4
 802348e:	4638      	mov	r0, r7
 8023490:	f7ff ff1a 	bl	80232c8 <__multiply>
 8023494:	4631      	mov	r1, r6
 8023496:	4680      	mov	r8, r0
 8023498:	4638      	mov	r0, r7
 802349a:	f7ff fe4b 	bl	8023134 <_Bfree>
 802349e:	4646      	mov	r6, r8
 80234a0:	106d      	asrs	r5, r5, #1
 80234a2:	d00b      	beq.n	80234bc <__pow5mult+0xa0>
 80234a4:	6820      	ldr	r0, [r4, #0]
 80234a6:	b938      	cbnz	r0, 80234b8 <__pow5mult+0x9c>
 80234a8:	4622      	mov	r2, r4
 80234aa:	4621      	mov	r1, r4
 80234ac:	4638      	mov	r0, r7
 80234ae:	f7ff ff0b 	bl	80232c8 <__multiply>
 80234b2:	6020      	str	r0, [r4, #0]
 80234b4:	f8c0 9000 	str.w	r9, [r0]
 80234b8:	4604      	mov	r4, r0
 80234ba:	e7e4      	b.n	8023486 <__pow5mult+0x6a>
 80234bc:	4630      	mov	r0, r6
 80234be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80234c2:	bf00      	nop
 80234c4:	080256bc 	.word	0x080256bc
 80234c8:	080255e1 	.word	0x080255e1
 80234cc:	08025661 	.word	0x08025661

080234d0 <__lshift>:
 80234d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234d4:	460c      	mov	r4, r1
 80234d6:	6849      	ldr	r1, [r1, #4]
 80234d8:	6923      	ldr	r3, [r4, #16]
 80234da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80234de:	68a3      	ldr	r3, [r4, #8]
 80234e0:	4607      	mov	r7, r0
 80234e2:	4691      	mov	r9, r2
 80234e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80234e8:	f108 0601 	add.w	r6, r8, #1
 80234ec:	42b3      	cmp	r3, r6
 80234ee:	db0b      	blt.n	8023508 <__lshift+0x38>
 80234f0:	4638      	mov	r0, r7
 80234f2:	f7ff fddf 	bl	80230b4 <_Balloc>
 80234f6:	4605      	mov	r5, r0
 80234f8:	b948      	cbnz	r0, 802350e <__lshift+0x3e>
 80234fa:	4602      	mov	r2, r0
 80234fc:	4b28      	ldr	r3, [pc, #160]	@ (80235a0 <__lshift+0xd0>)
 80234fe:	4829      	ldr	r0, [pc, #164]	@ (80235a4 <__lshift+0xd4>)
 8023500:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8023504:	f000 fb76 	bl	8023bf4 <__assert_func>
 8023508:	3101      	adds	r1, #1
 802350a:	005b      	lsls	r3, r3, #1
 802350c:	e7ee      	b.n	80234ec <__lshift+0x1c>
 802350e:	2300      	movs	r3, #0
 8023510:	f100 0114 	add.w	r1, r0, #20
 8023514:	f100 0210 	add.w	r2, r0, #16
 8023518:	4618      	mov	r0, r3
 802351a:	4553      	cmp	r3, sl
 802351c:	db33      	blt.n	8023586 <__lshift+0xb6>
 802351e:	6920      	ldr	r0, [r4, #16]
 8023520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8023524:	f104 0314 	add.w	r3, r4, #20
 8023528:	f019 091f 	ands.w	r9, r9, #31
 802352c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8023534:	d02b      	beq.n	802358e <__lshift+0xbe>
 8023536:	f1c9 0e20 	rsb	lr, r9, #32
 802353a:	468a      	mov	sl, r1
 802353c:	2200      	movs	r2, #0
 802353e:	6818      	ldr	r0, [r3, #0]
 8023540:	fa00 f009 	lsl.w	r0, r0, r9
 8023544:	4310      	orrs	r0, r2
 8023546:	f84a 0b04 	str.w	r0, [sl], #4
 802354a:	f853 2b04 	ldr.w	r2, [r3], #4
 802354e:	459c      	cmp	ip, r3
 8023550:	fa22 f20e 	lsr.w	r2, r2, lr
 8023554:	d8f3      	bhi.n	802353e <__lshift+0x6e>
 8023556:	ebac 0304 	sub.w	r3, ip, r4
 802355a:	3b15      	subs	r3, #21
 802355c:	f023 0303 	bic.w	r3, r3, #3
 8023560:	3304      	adds	r3, #4
 8023562:	f104 0015 	add.w	r0, r4, #21
 8023566:	4584      	cmp	ip, r0
 8023568:	bf38      	it	cc
 802356a:	2304      	movcc	r3, #4
 802356c:	50ca      	str	r2, [r1, r3]
 802356e:	b10a      	cbz	r2, 8023574 <__lshift+0xa4>
 8023570:	f108 0602 	add.w	r6, r8, #2
 8023574:	3e01      	subs	r6, #1
 8023576:	4638      	mov	r0, r7
 8023578:	612e      	str	r6, [r5, #16]
 802357a:	4621      	mov	r1, r4
 802357c:	f7ff fdda 	bl	8023134 <_Bfree>
 8023580:	4628      	mov	r0, r5
 8023582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023586:	f842 0f04 	str.w	r0, [r2, #4]!
 802358a:	3301      	adds	r3, #1
 802358c:	e7c5      	b.n	802351a <__lshift+0x4a>
 802358e:	3904      	subs	r1, #4
 8023590:	f853 2b04 	ldr.w	r2, [r3], #4
 8023594:	f841 2f04 	str.w	r2, [r1, #4]!
 8023598:	459c      	cmp	ip, r3
 802359a:	d8f9      	bhi.n	8023590 <__lshift+0xc0>
 802359c:	e7ea      	b.n	8023574 <__lshift+0xa4>
 802359e:	bf00      	nop
 80235a0:	08025650 	.word	0x08025650
 80235a4:	08025661 	.word	0x08025661

080235a8 <__mcmp>:
 80235a8:	690a      	ldr	r2, [r1, #16]
 80235aa:	4603      	mov	r3, r0
 80235ac:	6900      	ldr	r0, [r0, #16]
 80235ae:	1a80      	subs	r0, r0, r2
 80235b0:	b530      	push	{r4, r5, lr}
 80235b2:	d10e      	bne.n	80235d2 <__mcmp+0x2a>
 80235b4:	3314      	adds	r3, #20
 80235b6:	3114      	adds	r1, #20
 80235b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80235bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80235c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80235c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80235c8:	4295      	cmp	r5, r2
 80235ca:	d003      	beq.n	80235d4 <__mcmp+0x2c>
 80235cc:	d205      	bcs.n	80235da <__mcmp+0x32>
 80235ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80235d2:	bd30      	pop	{r4, r5, pc}
 80235d4:	42a3      	cmp	r3, r4
 80235d6:	d3f3      	bcc.n	80235c0 <__mcmp+0x18>
 80235d8:	e7fb      	b.n	80235d2 <__mcmp+0x2a>
 80235da:	2001      	movs	r0, #1
 80235dc:	e7f9      	b.n	80235d2 <__mcmp+0x2a>
	...

080235e0 <__mdiff>:
 80235e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235e4:	4689      	mov	r9, r1
 80235e6:	4606      	mov	r6, r0
 80235e8:	4611      	mov	r1, r2
 80235ea:	4648      	mov	r0, r9
 80235ec:	4614      	mov	r4, r2
 80235ee:	f7ff ffdb 	bl	80235a8 <__mcmp>
 80235f2:	1e05      	subs	r5, r0, #0
 80235f4:	d112      	bne.n	802361c <__mdiff+0x3c>
 80235f6:	4629      	mov	r1, r5
 80235f8:	4630      	mov	r0, r6
 80235fa:	f7ff fd5b 	bl	80230b4 <_Balloc>
 80235fe:	4602      	mov	r2, r0
 8023600:	b928      	cbnz	r0, 802360e <__mdiff+0x2e>
 8023602:	4b3f      	ldr	r3, [pc, #252]	@ (8023700 <__mdiff+0x120>)
 8023604:	f240 2137 	movw	r1, #567	@ 0x237
 8023608:	483e      	ldr	r0, [pc, #248]	@ (8023704 <__mdiff+0x124>)
 802360a:	f000 faf3 	bl	8023bf4 <__assert_func>
 802360e:	2301      	movs	r3, #1
 8023610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8023614:	4610      	mov	r0, r2
 8023616:	b003      	add	sp, #12
 8023618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802361c:	bfbc      	itt	lt
 802361e:	464b      	movlt	r3, r9
 8023620:	46a1      	movlt	r9, r4
 8023622:	4630      	mov	r0, r6
 8023624:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8023628:	bfba      	itte	lt
 802362a:	461c      	movlt	r4, r3
 802362c:	2501      	movlt	r5, #1
 802362e:	2500      	movge	r5, #0
 8023630:	f7ff fd40 	bl	80230b4 <_Balloc>
 8023634:	4602      	mov	r2, r0
 8023636:	b918      	cbnz	r0, 8023640 <__mdiff+0x60>
 8023638:	4b31      	ldr	r3, [pc, #196]	@ (8023700 <__mdiff+0x120>)
 802363a:	f240 2145 	movw	r1, #581	@ 0x245
 802363e:	e7e3      	b.n	8023608 <__mdiff+0x28>
 8023640:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8023644:	6926      	ldr	r6, [r4, #16]
 8023646:	60c5      	str	r5, [r0, #12]
 8023648:	f109 0310 	add.w	r3, r9, #16
 802364c:	f109 0514 	add.w	r5, r9, #20
 8023650:	f104 0e14 	add.w	lr, r4, #20
 8023654:	f100 0b14 	add.w	fp, r0, #20
 8023658:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802365c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8023660:	9301      	str	r3, [sp, #4]
 8023662:	46d9      	mov	r9, fp
 8023664:	f04f 0c00 	mov.w	ip, #0
 8023668:	9b01      	ldr	r3, [sp, #4]
 802366a:	f85e 0b04 	ldr.w	r0, [lr], #4
 802366e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8023672:	9301      	str	r3, [sp, #4]
 8023674:	fa1f f38a 	uxth.w	r3, sl
 8023678:	4619      	mov	r1, r3
 802367a:	b283      	uxth	r3, r0
 802367c:	1acb      	subs	r3, r1, r3
 802367e:	0c00      	lsrs	r0, r0, #16
 8023680:	4463      	add	r3, ip
 8023682:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8023686:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802368a:	b29b      	uxth	r3, r3
 802368c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023690:	4576      	cmp	r6, lr
 8023692:	f849 3b04 	str.w	r3, [r9], #4
 8023696:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802369a:	d8e5      	bhi.n	8023668 <__mdiff+0x88>
 802369c:	1b33      	subs	r3, r6, r4
 802369e:	3b15      	subs	r3, #21
 80236a0:	f023 0303 	bic.w	r3, r3, #3
 80236a4:	3415      	adds	r4, #21
 80236a6:	3304      	adds	r3, #4
 80236a8:	42a6      	cmp	r6, r4
 80236aa:	bf38      	it	cc
 80236ac:	2304      	movcc	r3, #4
 80236ae:	441d      	add	r5, r3
 80236b0:	445b      	add	r3, fp
 80236b2:	461e      	mov	r6, r3
 80236b4:	462c      	mov	r4, r5
 80236b6:	4544      	cmp	r4, r8
 80236b8:	d30e      	bcc.n	80236d8 <__mdiff+0xf8>
 80236ba:	f108 0103 	add.w	r1, r8, #3
 80236be:	1b49      	subs	r1, r1, r5
 80236c0:	f021 0103 	bic.w	r1, r1, #3
 80236c4:	3d03      	subs	r5, #3
 80236c6:	45a8      	cmp	r8, r5
 80236c8:	bf38      	it	cc
 80236ca:	2100      	movcc	r1, #0
 80236cc:	440b      	add	r3, r1
 80236ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80236d2:	b191      	cbz	r1, 80236fa <__mdiff+0x11a>
 80236d4:	6117      	str	r7, [r2, #16]
 80236d6:	e79d      	b.n	8023614 <__mdiff+0x34>
 80236d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80236dc:	46e6      	mov	lr, ip
 80236de:	0c08      	lsrs	r0, r1, #16
 80236e0:	fa1c fc81 	uxtah	ip, ip, r1
 80236e4:	4471      	add	r1, lr
 80236e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80236ea:	b289      	uxth	r1, r1
 80236ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80236f0:	f846 1b04 	str.w	r1, [r6], #4
 80236f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80236f8:	e7dd      	b.n	80236b6 <__mdiff+0xd6>
 80236fa:	3f01      	subs	r7, #1
 80236fc:	e7e7      	b.n	80236ce <__mdiff+0xee>
 80236fe:	bf00      	nop
 8023700:	08025650 	.word	0x08025650
 8023704:	08025661 	.word	0x08025661

08023708 <__d2b>:
 8023708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802370c:	460f      	mov	r7, r1
 802370e:	2101      	movs	r1, #1
 8023710:	ec59 8b10 	vmov	r8, r9, d0
 8023714:	4616      	mov	r6, r2
 8023716:	f7ff fccd 	bl	80230b4 <_Balloc>
 802371a:	4604      	mov	r4, r0
 802371c:	b930      	cbnz	r0, 802372c <__d2b+0x24>
 802371e:	4602      	mov	r2, r0
 8023720:	4b23      	ldr	r3, [pc, #140]	@ (80237b0 <__d2b+0xa8>)
 8023722:	4824      	ldr	r0, [pc, #144]	@ (80237b4 <__d2b+0xac>)
 8023724:	f240 310f 	movw	r1, #783	@ 0x30f
 8023728:	f000 fa64 	bl	8023bf4 <__assert_func>
 802372c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8023730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8023734:	b10d      	cbz	r5, 802373a <__d2b+0x32>
 8023736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802373a:	9301      	str	r3, [sp, #4]
 802373c:	f1b8 0300 	subs.w	r3, r8, #0
 8023740:	d023      	beq.n	802378a <__d2b+0x82>
 8023742:	4668      	mov	r0, sp
 8023744:	9300      	str	r3, [sp, #0]
 8023746:	f7ff fd7c 	bl	8023242 <__lo0bits>
 802374a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802374e:	b1d0      	cbz	r0, 8023786 <__d2b+0x7e>
 8023750:	f1c0 0320 	rsb	r3, r0, #32
 8023754:	fa02 f303 	lsl.w	r3, r2, r3
 8023758:	430b      	orrs	r3, r1
 802375a:	40c2      	lsrs	r2, r0
 802375c:	6163      	str	r3, [r4, #20]
 802375e:	9201      	str	r2, [sp, #4]
 8023760:	9b01      	ldr	r3, [sp, #4]
 8023762:	61a3      	str	r3, [r4, #24]
 8023764:	2b00      	cmp	r3, #0
 8023766:	bf0c      	ite	eq
 8023768:	2201      	moveq	r2, #1
 802376a:	2202      	movne	r2, #2
 802376c:	6122      	str	r2, [r4, #16]
 802376e:	b1a5      	cbz	r5, 802379a <__d2b+0x92>
 8023770:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8023774:	4405      	add	r5, r0
 8023776:	603d      	str	r5, [r7, #0]
 8023778:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802377c:	6030      	str	r0, [r6, #0]
 802377e:	4620      	mov	r0, r4
 8023780:	b003      	add	sp, #12
 8023782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023786:	6161      	str	r1, [r4, #20]
 8023788:	e7ea      	b.n	8023760 <__d2b+0x58>
 802378a:	a801      	add	r0, sp, #4
 802378c:	f7ff fd59 	bl	8023242 <__lo0bits>
 8023790:	9b01      	ldr	r3, [sp, #4]
 8023792:	6163      	str	r3, [r4, #20]
 8023794:	3020      	adds	r0, #32
 8023796:	2201      	movs	r2, #1
 8023798:	e7e8      	b.n	802376c <__d2b+0x64>
 802379a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802379e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80237a2:	6038      	str	r0, [r7, #0]
 80237a4:	6918      	ldr	r0, [r3, #16]
 80237a6:	f7ff fd2d 	bl	8023204 <__hi0bits>
 80237aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80237ae:	e7e5      	b.n	802377c <__d2b+0x74>
 80237b0:	08025650 	.word	0x08025650
 80237b4:	08025661 	.word	0x08025661

080237b8 <__ssputs_r>:
 80237b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80237bc:	688e      	ldr	r6, [r1, #8]
 80237be:	461f      	mov	r7, r3
 80237c0:	42be      	cmp	r6, r7
 80237c2:	680b      	ldr	r3, [r1, #0]
 80237c4:	4682      	mov	sl, r0
 80237c6:	460c      	mov	r4, r1
 80237c8:	4690      	mov	r8, r2
 80237ca:	d82d      	bhi.n	8023828 <__ssputs_r+0x70>
 80237cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80237d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80237d4:	d026      	beq.n	8023824 <__ssputs_r+0x6c>
 80237d6:	6965      	ldr	r5, [r4, #20]
 80237d8:	6909      	ldr	r1, [r1, #16]
 80237da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80237de:	eba3 0901 	sub.w	r9, r3, r1
 80237e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80237e6:	1c7b      	adds	r3, r7, #1
 80237e8:	444b      	add	r3, r9
 80237ea:	106d      	asrs	r5, r5, #1
 80237ec:	429d      	cmp	r5, r3
 80237ee:	bf38      	it	cc
 80237f0:	461d      	movcc	r5, r3
 80237f2:	0553      	lsls	r3, r2, #21
 80237f4:	d527      	bpl.n	8023846 <__ssputs_r+0x8e>
 80237f6:	4629      	mov	r1, r5
 80237f8:	f7fd fed8 	bl	80215ac <_malloc_r>
 80237fc:	4606      	mov	r6, r0
 80237fe:	b360      	cbz	r0, 802385a <__ssputs_r+0xa2>
 8023800:	6921      	ldr	r1, [r4, #16]
 8023802:	464a      	mov	r2, r9
 8023804:	f7fe fdb1 	bl	802236a <memcpy>
 8023808:	89a3      	ldrh	r3, [r4, #12]
 802380a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802380e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023812:	81a3      	strh	r3, [r4, #12]
 8023814:	6126      	str	r6, [r4, #16]
 8023816:	6165      	str	r5, [r4, #20]
 8023818:	444e      	add	r6, r9
 802381a:	eba5 0509 	sub.w	r5, r5, r9
 802381e:	6026      	str	r6, [r4, #0]
 8023820:	60a5      	str	r5, [r4, #8]
 8023822:	463e      	mov	r6, r7
 8023824:	42be      	cmp	r6, r7
 8023826:	d900      	bls.n	802382a <__ssputs_r+0x72>
 8023828:	463e      	mov	r6, r7
 802382a:	6820      	ldr	r0, [r4, #0]
 802382c:	4632      	mov	r2, r6
 802382e:	4641      	mov	r1, r8
 8023830:	f000 f9c6 	bl	8023bc0 <memmove>
 8023834:	68a3      	ldr	r3, [r4, #8]
 8023836:	1b9b      	subs	r3, r3, r6
 8023838:	60a3      	str	r3, [r4, #8]
 802383a:	6823      	ldr	r3, [r4, #0]
 802383c:	4433      	add	r3, r6
 802383e:	6023      	str	r3, [r4, #0]
 8023840:	2000      	movs	r0, #0
 8023842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023846:	462a      	mov	r2, r5
 8023848:	f000 fa18 	bl	8023c7c <_realloc_r>
 802384c:	4606      	mov	r6, r0
 802384e:	2800      	cmp	r0, #0
 8023850:	d1e0      	bne.n	8023814 <__ssputs_r+0x5c>
 8023852:	6921      	ldr	r1, [r4, #16]
 8023854:	4650      	mov	r0, sl
 8023856:	f7ff fbe3 	bl	8023020 <_free_r>
 802385a:	230c      	movs	r3, #12
 802385c:	f8ca 3000 	str.w	r3, [sl]
 8023860:	89a3      	ldrh	r3, [r4, #12]
 8023862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023866:	81a3      	strh	r3, [r4, #12]
 8023868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802386c:	e7e9      	b.n	8023842 <__ssputs_r+0x8a>
	...

08023870 <_svfiprintf_r>:
 8023870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023874:	4698      	mov	r8, r3
 8023876:	898b      	ldrh	r3, [r1, #12]
 8023878:	061b      	lsls	r3, r3, #24
 802387a:	b09d      	sub	sp, #116	@ 0x74
 802387c:	4607      	mov	r7, r0
 802387e:	460d      	mov	r5, r1
 8023880:	4614      	mov	r4, r2
 8023882:	d510      	bpl.n	80238a6 <_svfiprintf_r+0x36>
 8023884:	690b      	ldr	r3, [r1, #16]
 8023886:	b973      	cbnz	r3, 80238a6 <_svfiprintf_r+0x36>
 8023888:	2140      	movs	r1, #64	@ 0x40
 802388a:	f7fd fe8f 	bl	80215ac <_malloc_r>
 802388e:	6028      	str	r0, [r5, #0]
 8023890:	6128      	str	r0, [r5, #16]
 8023892:	b930      	cbnz	r0, 80238a2 <_svfiprintf_r+0x32>
 8023894:	230c      	movs	r3, #12
 8023896:	603b      	str	r3, [r7, #0]
 8023898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802389c:	b01d      	add	sp, #116	@ 0x74
 802389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238a2:	2340      	movs	r3, #64	@ 0x40
 80238a4:	616b      	str	r3, [r5, #20]
 80238a6:	2300      	movs	r3, #0
 80238a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80238aa:	2320      	movs	r3, #32
 80238ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80238b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80238b4:	2330      	movs	r3, #48	@ 0x30
 80238b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8023a54 <_svfiprintf_r+0x1e4>
 80238ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80238be:	f04f 0901 	mov.w	r9, #1
 80238c2:	4623      	mov	r3, r4
 80238c4:	469a      	mov	sl, r3
 80238c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80238ca:	b10a      	cbz	r2, 80238d0 <_svfiprintf_r+0x60>
 80238cc:	2a25      	cmp	r2, #37	@ 0x25
 80238ce:	d1f9      	bne.n	80238c4 <_svfiprintf_r+0x54>
 80238d0:	ebba 0b04 	subs.w	fp, sl, r4
 80238d4:	d00b      	beq.n	80238ee <_svfiprintf_r+0x7e>
 80238d6:	465b      	mov	r3, fp
 80238d8:	4622      	mov	r2, r4
 80238da:	4629      	mov	r1, r5
 80238dc:	4638      	mov	r0, r7
 80238de:	f7ff ff6b 	bl	80237b8 <__ssputs_r>
 80238e2:	3001      	adds	r0, #1
 80238e4:	f000 80a7 	beq.w	8023a36 <_svfiprintf_r+0x1c6>
 80238e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80238ea:	445a      	add	r2, fp
 80238ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80238ee:	f89a 3000 	ldrb.w	r3, [sl]
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	f000 809f 	beq.w	8023a36 <_svfiprintf_r+0x1c6>
 80238f8:	2300      	movs	r3, #0
 80238fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80238fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023902:	f10a 0a01 	add.w	sl, sl, #1
 8023906:	9304      	str	r3, [sp, #16]
 8023908:	9307      	str	r3, [sp, #28]
 802390a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802390e:	931a      	str	r3, [sp, #104]	@ 0x68
 8023910:	4654      	mov	r4, sl
 8023912:	2205      	movs	r2, #5
 8023914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023918:	484e      	ldr	r0, [pc, #312]	@ (8023a54 <_svfiprintf_r+0x1e4>)
 802391a:	f7dc fc59 	bl	80001d0 <memchr>
 802391e:	9a04      	ldr	r2, [sp, #16]
 8023920:	b9d8      	cbnz	r0, 802395a <_svfiprintf_r+0xea>
 8023922:	06d0      	lsls	r0, r2, #27
 8023924:	bf44      	itt	mi
 8023926:	2320      	movmi	r3, #32
 8023928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802392c:	0711      	lsls	r1, r2, #28
 802392e:	bf44      	itt	mi
 8023930:	232b      	movmi	r3, #43	@ 0x2b
 8023932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023936:	f89a 3000 	ldrb.w	r3, [sl]
 802393a:	2b2a      	cmp	r3, #42	@ 0x2a
 802393c:	d015      	beq.n	802396a <_svfiprintf_r+0xfa>
 802393e:	9a07      	ldr	r2, [sp, #28]
 8023940:	4654      	mov	r4, sl
 8023942:	2000      	movs	r0, #0
 8023944:	f04f 0c0a 	mov.w	ip, #10
 8023948:	4621      	mov	r1, r4
 802394a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802394e:	3b30      	subs	r3, #48	@ 0x30
 8023950:	2b09      	cmp	r3, #9
 8023952:	d94b      	bls.n	80239ec <_svfiprintf_r+0x17c>
 8023954:	b1b0      	cbz	r0, 8023984 <_svfiprintf_r+0x114>
 8023956:	9207      	str	r2, [sp, #28]
 8023958:	e014      	b.n	8023984 <_svfiprintf_r+0x114>
 802395a:	eba0 0308 	sub.w	r3, r0, r8
 802395e:	fa09 f303 	lsl.w	r3, r9, r3
 8023962:	4313      	orrs	r3, r2
 8023964:	9304      	str	r3, [sp, #16]
 8023966:	46a2      	mov	sl, r4
 8023968:	e7d2      	b.n	8023910 <_svfiprintf_r+0xa0>
 802396a:	9b03      	ldr	r3, [sp, #12]
 802396c:	1d19      	adds	r1, r3, #4
 802396e:	681b      	ldr	r3, [r3, #0]
 8023970:	9103      	str	r1, [sp, #12]
 8023972:	2b00      	cmp	r3, #0
 8023974:	bfbb      	ittet	lt
 8023976:	425b      	neglt	r3, r3
 8023978:	f042 0202 	orrlt.w	r2, r2, #2
 802397c:	9307      	strge	r3, [sp, #28]
 802397e:	9307      	strlt	r3, [sp, #28]
 8023980:	bfb8      	it	lt
 8023982:	9204      	strlt	r2, [sp, #16]
 8023984:	7823      	ldrb	r3, [r4, #0]
 8023986:	2b2e      	cmp	r3, #46	@ 0x2e
 8023988:	d10a      	bne.n	80239a0 <_svfiprintf_r+0x130>
 802398a:	7863      	ldrb	r3, [r4, #1]
 802398c:	2b2a      	cmp	r3, #42	@ 0x2a
 802398e:	d132      	bne.n	80239f6 <_svfiprintf_r+0x186>
 8023990:	9b03      	ldr	r3, [sp, #12]
 8023992:	1d1a      	adds	r2, r3, #4
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	9203      	str	r2, [sp, #12]
 8023998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802399c:	3402      	adds	r4, #2
 802399e:	9305      	str	r3, [sp, #20]
 80239a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8023a64 <_svfiprintf_r+0x1f4>
 80239a4:	7821      	ldrb	r1, [r4, #0]
 80239a6:	2203      	movs	r2, #3
 80239a8:	4650      	mov	r0, sl
 80239aa:	f7dc fc11 	bl	80001d0 <memchr>
 80239ae:	b138      	cbz	r0, 80239c0 <_svfiprintf_r+0x150>
 80239b0:	9b04      	ldr	r3, [sp, #16]
 80239b2:	eba0 000a 	sub.w	r0, r0, sl
 80239b6:	2240      	movs	r2, #64	@ 0x40
 80239b8:	4082      	lsls	r2, r0
 80239ba:	4313      	orrs	r3, r2
 80239bc:	3401      	adds	r4, #1
 80239be:	9304      	str	r3, [sp, #16]
 80239c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239c4:	4824      	ldr	r0, [pc, #144]	@ (8023a58 <_svfiprintf_r+0x1e8>)
 80239c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80239ca:	2206      	movs	r2, #6
 80239cc:	f7dc fc00 	bl	80001d0 <memchr>
 80239d0:	2800      	cmp	r0, #0
 80239d2:	d036      	beq.n	8023a42 <_svfiprintf_r+0x1d2>
 80239d4:	4b21      	ldr	r3, [pc, #132]	@ (8023a5c <_svfiprintf_r+0x1ec>)
 80239d6:	bb1b      	cbnz	r3, 8023a20 <_svfiprintf_r+0x1b0>
 80239d8:	9b03      	ldr	r3, [sp, #12]
 80239da:	3307      	adds	r3, #7
 80239dc:	f023 0307 	bic.w	r3, r3, #7
 80239e0:	3308      	adds	r3, #8
 80239e2:	9303      	str	r3, [sp, #12]
 80239e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80239e6:	4433      	add	r3, r6
 80239e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80239ea:	e76a      	b.n	80238c2 <_svfiprintf_r+0x52>
 80239ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80239f0:	460c      	mov	r4, r1
 80239f2:	2001      	movs	r0, #1
 80239f4:	e7a8      	b.n	8023948 <_svfiprintf_r+0xd8>
 80239f6:	2300      	movs	r3, #0
 80239f8:	3401      	adds	r4, #1
 80239fa:	9305      	str	r3, [sp, #20]
 80239fc:	4619      	mov	r1, r3
 80239fe:	f04f 0c0a 	mov.w	ip, #10
 8023a02:	4620      	mov	r0, r4
 8023a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a08:	3a30      	subs	r2, #48	@ 0x30
 8023a0a:	2a09      	cmp	r2, #9
 8023a0c:	d903      	bls.n	8023a16 <_svfiprintf_r+0x1a6>
 8023a0e:	2b00      	cmp	r3, #0
 8023a10:	d0c6      	beq.n	80239a0 <_svfiprintf_r+0x130>
 8023a12:	9105      	str	r1, [sp, #20]
 8023a14:	e7c4      	b.n	80239a0 <_svfiprintf_r+0x130>
 8023a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8023a1a:	4604      	mov	r4, r0
 8023a1c:	2301      	movs	r3, #1
 8023a1e:	e7f0      	b.n	8023a02 <_svfiprintf_r+0x192>
 8023a20:	ab03      	add	r3, sp, #12
 8023a22:	9300      	str	r3, [sp, #0]
 8023a24:	462a      	mov	r2, r5
 8023a26:	4b0e      	ldr	r3, [pc, #56]	@ (8023a60 <_svfiprintf_r+0x1f0>)
 8023a28:	a904      	add	r1, sp, #16
 8023a2a:	4638      	mov	r0, r7
 8023a2c:	f7fd feea 	bl	8021804 <_printf_float>
 8023a30:	1c42      	adds	r2, r0, #1
 8023a32:	4606      	mov	r6, r0
 8023a34:	d1d6      	bne.n	80239e4 <_svfiprintf_r+0x174>
 8023a36:	89ab      	ldrh	r3, [r5, #12]
 8023a38:	065b      	lsls	r3, r3, #25
 8023a3a:	f53f af2d 	bmi.w	8023898 <_svfiprintf_r+0x28>
 8023a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023a40:	e72c      	b.n	802389c <_svfiprintf_r+0x2c>
 8023a42:	ab03      	add	r3, sp, #12
 8023a44:	9300      	str	r3, [sp, #0]
 8023a46:	462a      	mov	r2, r5
 8023a48:	4b05      	ldr	r3, [pc, #20]	@ (8023a60 <_svfiprintf_r+0x1f0>)
 8023a4a:	a904      	add	r1, sp, #16
 8023a4c:	4638      	mov	r0, r7
 8023a4e:	f7fe f971 	bl	8021d34 <_printf_i>
 8023a52:	e7ed      	b.n	8023a30 <_svfiprintf_r+0x1c0>
 8023a54:	080257b8 	.word	0x080257b8
 8023a58:	080257c2 	.word	0x080257c2
 8023a5c:	08021805 	.word	0x08021805
 8023a60:	080237b9 	.word	0x080237b9
 8023a64:	080257be 	.word	0x080257be

08023a68 <__sflush_r>:
 8023a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a70:	0716      	lsls	r6, r2, #28
 8023a72:	4605      	mov	r5, r0
 8023a74:	460c      	mov	r4, r1
 8023a76:	d454      	bmi.n	8023b22 <__sflush_r+0xba>
 8023a78:	684b      	ldr	r3, [r1, #4]
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	dc02      	bgt.n	8023a84 <__sflush_r+0x1c>
 8023a7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023a80:	2b00      	cmp	r3, #0
 8023a82:	dd48      	ble.n	8023b16 <__sflush_r+0xae>
 8023a84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023a86:	2e00      	cmp	r6, #0
 8023a88:	d045      	beq.n	8023b16 <__sflush_r+0xae>
 8023a8a:	2300      	movs	r3, #0
 8023a8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023a90:	682f      	ldr	r7, [r5, #0]
 8023a92:	6a21      	ldr	r1, [r4, #32]
 8023a94:	602b      	str	r3, [r5, #0]
 8023a96:	d030      	beq.n	8023afa <__sflush_r+0x92>
 8023a98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023a9a:	89a3      	ldrh	r3, [r4, #12]
 8023a9c:	0759      	lsls	r1, r3, #29
 8023a9e:	d505      	bpl.n	8023aac <__sflush_r+0x44>
 8023aa0:	6863      	ldr	r3, [r4, #4]
 8023aa2:	1ad2      	subs	r2, r2, r3
 8023aa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023aa6:	b10b      	cbz	r3, 8023aac <__sflush_r+0x44>
 8023aa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023aaa:	1ad2      	subs	r2, r2, r3
 8023aac:	2300      	movs	r3, #0
 8023aae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023ab0:	6a21      	ldr	r1, [r4, #32]
 8023ab2:	4628      	mov	r0, r5
 8023ab4:	47b0      	blx	r6
 8023ab6:	1c43      	adds	r3, r0, #1
 8023ab8:	89a3      	ldrh	r3, [r4, #12]
 8023aba:	d106      	bne.n	8023aca <__sflush_r+0x62>
 8023abc:	6829      	ldr	r1, [r5, #0]
 8023abe:	291d      	cmp	r1, #29
 8023ac0:	d82b      	bhi.n	8023b1a <__sflush_r+0xb2>
 8023ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8023b6c <__sflush_r+0x104>)
 8023ac4:	410a      	asrs	r2, r1
 8023ac6:	07d6      	lsls	r6, r2, #31
 8023ac8:	d427      	bmi.n	8023b1a <__sflush_r+0xb2>
 8023aca:	2200      	movs	r2, #0
 8023acc:	6062      	str	r2, [r4, #4]
 8023ace:	04d9      	lsls	r1, r3, #19
 8023ad0:	6922      	ldr	r2, [r4, #16]
 8023ad2:	6022      	str	r2, [r4, #0]
 8023ad4:	d504      	bpl.n	8023ae0 <__sflush_r+0x78>
 8023ad6:	1c42      	adds	r2, r0, #1
 8023ad8:	d101      	bne.n	8023ade <__sflush_r+0x76>
 8023ada:	682b      	ldr	r3, [r5, #0]
 8023adc:	b903      	cbnz	r3, 8023ae0 <__sflush_r+0x78>
 8023ade:	6560      	str	r0, [r4, #84]	@ 0x54
 8023ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023ae2:	602f      	str	r7, [r5, #0]
 8023ae4:	b1b9      	cbz	r1, 8023b16 <__sflush_r+0xae>
 8023ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023aea:	4299      	cmp	r1, r3
 8023aec:	d002      	beq.n	8023af4 <__sflush_r+0x8c>
 8023aee:	4628      	mov	r0, r5
 8023af0:	f7ff fa96 	bl	8023020 <_free_r>
 8023af4:	2300      	movs	r3, #0
 8023af6:	6363      	str	r3, [r4, #52]	@ 0x34
 8023af8:	e00d      	b.n	8023b16 <__sflush_r+0xae>
 8023afa:	2301      	movs	r3, #1
 8023afc:	4628      	mov	r0, r5
 8023afe:	47b0      	blx	r6
 8023b00:	4602      	mov	r2, r0
 8023b02:	1c50      	adds	r0, r2, #1
 8023b04:	d1c9      	bne.n	8023a9a <__sflush_r+0x32>
 8023b06:	682b      	ldr	r3, [r5, #0]
 8023b08:	2b00      	cmp	r3, #0
 8023b0a:	d0c6      	beq.n	8023a9a <__sflush_r+0x32>
 8023b0c:	2b1d      	cmp	r3, #29
 8023b0e:	d001      	beq.n	8023b14 <__sflush_r+0xac>
 8023b10:	2b16      	cmp	r3, #22
 8023b12:	d11e      	bne.n	8023b52 <__sflush_r+0xea>
 8023b14:	602f      	str	r7, [r5, #0]
 8023b16:	2000      	movs	r0, #0
 8023b18:	e022      	b.n	8023b60 <__sflush_r+0xf8>
 8023b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023b1e:	b21b      	sxth	r3, r3
 8023b20:	e01b      	b.n	8023b5a <__sflush_r+0xf2>
 8023b22:	690f      	ldr	r7, [r1, #16]
 8023b24:	2f00      	cmp	r7, #0
 8023b26:	d0f6      	beq.n	8023b16 <__sflush_r+0xae>
 8023b28:	0793      	lsls	r3, r2, #30
 8023b2a:	680e      	ldr	r6, [r1, #0]
 8023b2c:	bf08      	it	eq
 8023b2e:	694b      	ldreq	r3, [r1, #20]
 8023b30:	600f      	str	r7, [r1, #0]
 8023b32:	bf18      	it	ne
 8023b34:	2300      	movne	r3, #0
 8023b36:	eba6 0807 	sub.w	r8, r6, r7
 8023b3a:	608b      	str	r3, [r1, #8]
 8023b3c:	f1b8 0f00 	cmp.w	r8, #0
 8023b40:	dde9      	ble.n	8023b16 <__sflush_r+0xae>
 8023b42:	6a21      	ldr	r1, [r4, #32]
 8023b44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023b46:	4643      	mov	r3, r8
 8023b48:	463a      	mov	r2, r7
 8023b4a:	4628      	mov	r0, r5
 8023b4c:	47b0      	blx	r6
 8023b4e:	2800      	cmp	r0, #0
 8023b50:	dc08      	bgt.n	8023b64 <__sflush_r+0xfc>
 8023b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023b5a:	81a3      	strh	r3, [r4, #12]
 8023b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b64:	4407      	add	r7, r0
 8023b66:	eba8 0800 	sub.w	r8, r8, r0
 8023b6a:	e7e7      	b.n	8023b3c <__sflush_r+0xd4>
 8023b6c:	dfbffffe 	.word	0xdfbffffe

08023b70 <_fflush_r>:
 8023b70:	b538      	push	{r3, r4, r5, lr}
 8023b72:	690b      	ldr	r3, [r1, #16]
 8023b74:	4605      	mov	r5, r0
 8023b76:	460c      	mov	r4, r1
 8023b78:	b913      	cbnz	r3, 8023b80 <_fflush_r+0x10>
 8023b7a:	2500      	movs	r5, #0
 8023b7c:	4628      	mov	r0, r5
 8023b7e:	bd38      	pop	{r3, r4, r5, pc}
 8023b80:	b118      	cbz	r0, 8023b8a <_fflush_r+0x1a>
 8023b82:	6a03      	ldr	r3, [r0, #32]
 8023b84:	b90b      	cbnz	r3, 8023b8a <_fflush_r+0x1a>
 8023b86:	f7fe fa81 	bl	802208c <__sinit>
 8023b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b8e:	2b00      	cmp	r3, #0
 8023b90:	d0f3      	beq.n	8023b7a <_fflush_r+0xa>
 8023b92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023b94:	07d0      	lsls	r0, r2, #31
 8023b96:	d404      	bmi.n	8023ba2 <_fflush_r+0x32>
 8023b98:	0599      	lsls	r1, r3, #22
 8023b9a:	d402      	bmi.n	8023ba2 <_fflush_r+0x32>
 8023b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023b9e:	f7fe fbe2 	bl	8022366 <__retarget_lock_acquire_recursive>
 8023ba2:	4628      	mov	r0, r5
 8023ba4:	4621      	mov	r1, r4
 8023ba6:	f7ff ff5f 	bl	8023a68 <__sflush_r>
 8023baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023bac:	07da      	lsls	r2, r3, #31
 8023bae:	4605      	mov	r5, r0
 8023bb0:	d4e4      	bmi.n	8023b7c <_fflush_r+0xc>
 8023bb2:	89a3      	ldrh	r3, [r4, #12]
 8023bb4:	059b      	lsls	r3, r3, #22
 8023bb6:	d4e1      	bmi.n	8023b7c <_fflush_r+0xc>
 8023bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023bba:	f7fe fbd5 	bl	8022368 <__retarget_lock_release_recursive>
 8023bbe:	e7dd      	b.n	8023b7c <_fflush_r+0xc>

08023bc0 <memmove>:
 8023bc0:	4288      	cmp	r0, r1
 8023bc2:	b510      	push	{r4, lr}
 8023bc4:	eb01 0402 	add.w	r4, r1, r2
 8023bc8:	d902      	bls.n	8023bd0 <memmove+0x10>
 8023bca:	4284      	cmp	r4, r0
 8023bcc:	4623      	mov	r3, r4
 8023bce:	d807      	bhi.n	8023be0 <memmove+0x20>
 8023bd0:	1e43      	subs	r3, r0, #1
 8023bd2:	42a1      	cmp	r1, r4
 8023bd4:	d008      	beq.n	8023be8 <memmove+0x28>
 8023bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023bde:	e7f8      	b.n	8023bd2 <memmove+0x12>
 8023be0:	4402      	add	r2, r0
 8023be2:	4601      	mov	r1, r0
 8023be4:	428a      	cmp	r2, r1
 8023be6:	d100      	bne.n	8023bea <memmove+0x2a>
 8023be8:	bd10      	pop	{r4, pc}
 8023bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023bf2:	e7f7      	b.n	8023be4 <memmove+0x24>

08023bf4 <__assert_func>:
 8023bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023bf6:	4614      	mov	r4, r2
 8023bf8:	461a      	mov	r2, r3
 8023bfa:	4b09      	ldr	r3, [pc, #36]	@ (8023c20 <__assert_func+0x2c>)
 8023bfc:	681b      	ldr	r3, [r3, #0]
 8023bfe:	4605      	mov	r5, r0
 8023c00:	68d8      	ldr	r0, [r3, #12]
 8023c02:	b954      	cbnz	r4, 8023c1a <__assert_func+0x26>
 8023c04:	4b07      	ldr	r3, [pc, #28]	@ (8023c24 <__assert_func+0x30>)
 8023c06:	461c      	mov	r4, r3
 8023c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023c0c:	9100      	str	r1, [sp, #0]
 8023c0e:	462b      	mov	r3, r5
 8023c10:	4905      	ldr	r1, [pc, #20]	@ (8023c28 <__assert_func+0x34>)
 8023c12:	f000 f86f 	bl	8023cf4 <fiprintf>
 8023c16:	f000 f87f 	bl	8023d18 <abort>
 8023c1a:	4b04      	ldr	r3, [pc, #16]	@ (8023c2c <__assert_func+0x38>)
 8023c1c:	e7f4      	b.n	8023c08 <__assert_func+0x14>
 8023c1e:	bf00      	nop
 8023c20:	200003e4 	.word	0x200003e4
 8023c24:	0802580e 	.word	0x0802580e
 8023c28:	080257e0 	.word	0x080257e0
 8023c2c:	080257d3 	.word	0x080257d3

08023c30 <_calloc_r>:
 8023c30:	b570      	push	{r4, r5, r6, lr}
 8023c32:	fba1 5402 	umull	r5, r4, r1, r2
 8023c36:	b93c      	cbnz	r4, 8023c48 <_calloc_r+0x18>
 8023c38:	4629      	mov	r1, r5
 8023c3a:	f7fd fcb7 	bl	80215ac <_malloc_r>
 8023c3e:	4606      	mov	r6, r0
 8023c40:	b928      	cbnz	r0, 8023c4e <_calloc_r+0x1e>
 8023c42:	2600      	movs	r6, #0
 8023c44:	4630      	mov	r0, r6
 8023c46:	bd70      	pop	{r4, r5, r6, pc}
 8023c48:	220c      	movs	r2, #12
 8023c4a:	6002      	str	r2, [r0, #0]
 8023c4c:	e7f9      	b.n	8023c42 <_calloc_r+0x12>
 8023c4e:	462a      	mov	r2, r5
 8023c50:	4621      	mov	r1, r4
 8023c52:	f7fe fafb 	bl	802224c <memset>
 8023c56:	e7f5      	b.n	8023c44 <_calloc_r+0x14>

08023c58 <__ascii_mbtowc>:
 8023c58:	b082      	sub	sp, #8
 8023c5a:	b901      	cbnz	r1, 8023c5e <__ascii_mbtowc+0x6>
 8023c5c:	a901      	add	r1, sp, #4
 8023c5e:	b142      	cbz	r2, 8023c72 <__ascii_mbtowc+0x1a>
 8023c60:	b14b      	cbz	r3, 8023c76 <__ascii_mbtowc+0x1e>
 8023c62:	7813      	ldrb	r3, [r2, #0]
 8023c64:	600b      	str	r3, [r1, #0]
 8023c66:	7812      	ldrb	r2, [r2, #0]
 8023c68:	1e10      	subs	r0, r2, #0
 8023c6a:	bf18      	it	ne
 8023c6c:	2001      	movne	r0, #1
 8023c6e:	b002      	add	sp, #8
 8023c70:	4770      	bx	lr
 8023c72:	4610      	mov	r0, r2
 8023c74:	e7fb      	b.n	8023c6e <__ascii_mbtowc+0x16>
 8023c76:	f06f 0001 	mvn.w	r0, #1
 8023c7a:	e7f8      	b.n	8023c6e <__ascii_mbtowc+0x16>

08023c7c <_realloc_r>:
 8023c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023c80:	4680      	mov	r8, r0
 8023c82:	4615      	mov	r5, r2
 8023c84:	460c      	mov	r4, r1
 8023c86:	b921      	cbnz	r1, 8023c92 <_realloc_r+0x16>
 8023c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023c8c:	4611      	mov	r1, r2
 8023c8e:	f7fd bc8d 	b.w	80215ac <_malloc_r>
 8023c92:	b92a      	cbnz	r2, 8023ca0 <_realloc_r+0x24>
 8023c94:	f7ff f9c4 	bl	8023020 <_free_r>
 8023c98:	2400      	movs	r4, #0
 8023c9a:	4620      	mov	r0, r4
 8023c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ca0:	f000 f841 	bl	8023d26 <_malloc_usable_size_r>
 8023ca4:	4285      	cmp	r5, r0
 8023ca6:	4606      	mov	r6, r0
 8023ca8:	d802      	bhi.n	8023cb0 <_realloc_r+0x34>
 8023caa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8023cae:	d8f4      	bhi.n	8023c9a <_realloc_r+0x1e>
 8023cb0:	4629      	mov	r1, r5
 8023cb2:	4640      	mov	r0, r8
 8023cb4:	f7fd fc7a 	bl	80215ac <_malloc_r>
 8023cb8:	4607      	mov	r7, r0
 8023cba:	2800      	cmp	r0, #0
 8023cbc:	d0ec      	beq.n	8023c98 <_realloc_r+0x1c>
 8023cbe:	42b5      	cmp	r5, r6
 8023cc0:	462a      	mov	r2, r5
 8023cc2:	4621      	mov	r1, r4
 8023cc4:	bf28      	it	cs
 8023cc6:	4632      	movcs	r2, r6
 8023cc8:	f7fe fb4f 	bl	802236a <memcpy>
 8023ccc:	4621      	mov	r1, r4
 8023cce:	4640      	mov	r0, r8
 8023cd0:	f7ff f9a6 	bl	8023020 <_free_r>
 8023cd4:	463c      	mov	r4, r7
 8023cd6:	e7e0      	b.n	8023c9a <_realloc_r+0x1e>

08023cd8 <__ascii_wctomb>:
 8023cd8:	4603      	mov	r3, r0
 8023cda:	4608      	mov	r0, r1
 8023cdc:	b141      	cbz	r1, 8023cf0 <__ascii_wctomb+0x18>
 8023cde:	2aff      	cmp	r2, #255	@ 0xff
 8023ce0:	d904      	bls.n	8023cec <__ascii_wctomb+0x14>
 8023ce2:	228a      	movs	r2, #138	@ 0x8a
 8023ce4:	601a      	str	r2, [r3, #0]
 8023ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023cea:	4770      	bx	lr
 8023cec:	700a      	strb	r2, [r1, #0]
 8023cee:	2001      	movs	r0, #1
 8023cf0:	4770      	bx	lr
	...

08023cf4 <fiprintf>:
 8023cf4:	b40e      	push	{r1, r2, r3}
 8023cf6:	b503      	push	{r0, r1, lr}
 8023cf8:	4601      	mov	r1, r0
 8023cfa:	ab03      	add	r3, sp, #12
 8023cfc:	4805      	ldr	r0, [pc, #20]	@ (8023d14 <fiprintf+0x20>)
 8023cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8023d02:	6800      	ldr	r0, [r0, #0]
 8023d04:	9301      	str	r3, [sp, #4]
 8023d06:	f000 f83f 	bl	8023d88 <_vfiprintf_r>
 8023d0a:	b002      	add	sp, #8
 8023d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023d10:	b003      	add	sp, #12
 8023d12:	4770      	bx	lr
 8023d14:	200003e4 	.word	0x200003e4

08023d18 <abort>:
 8023d18:	b508      	push	{r3, lr}
 8023d1a:	2006      	movs	r0, #6
 8023d1c:	f000 fa08 	bl	8024130 <raise>
 8023d20:	2001      	movs	r0, #1
 8023d22:	f7dd fec3 	bl	8001aac <_exit>

08023d26 <_malloc_usable_size_r>:
 8023d26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023d2a:	1f18      	subs	r0, r3, #4
 8023d2c:	2b00      	cmp	r3, #0
 8023d2e:	bfbc      	itt	lt
 8023d30:	580b      	ldrlt	r3, [r1, r0]
 8023d32:	18c0      	addlt	r0, r0, r3
 8023d34:	4770      	bx	lr

08023d36 <__sfputc_r>:
 8023d36:	6893      	ldr	r3, [r2, #8]
 8023d38:	3b01      	subs	r3, #1
 8023d3a:	2b00      	cmp	r3, #0
 8023d3c:	b410      	push	{r4}
 8023d3e:	6093      	str	r3, [r2, #8]
 8023d40:	da08      	bge.n	8023d54 <__sfputc_r+0x1e>
 8023d42:	6994      	ldr	r4, [r2, #24]
 8023d44:	42a3      	cmp	r3, r4
 8023d46:	db01      	blt.n	8023d4c <__sfputc_r+0x16>
 8023d48:	290a      	cmp	r1, #10
 8023d4a:	d103      	bne.n	8023d54 <__sfputc_r+0x1e>
 8023d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023d50:	f000 b932 	b.w	8023fb8 <__swbuf_r>
 8023d54:	6813      	ldr	r3, [r2, #0]
 8023d56:	1c58      	adds	r0, r3, #1
 8023d58:	6010      	str	r0, [r2, #0]
 8023d5a:	7019      	strb	r1, [r3, #0]
 8023d5c:	4608      	mov	r0, r1
 8023d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023d62:	4770      	bx	lr

08023d64 <__sfputs_r>:
 8023d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d66:	4606      	mov	r6, r0
 8023d68:	460f      	mov	r7, r1
 8023d6a:	4614      	mov	r4, r2
 8023d6c:	18d5      	adds	r5, r2, r3
 8023d6e:	42ac      	cmp	r4, r5
 8023d70:	d101      	bne.n	8023d76 <__sfputs_r+0x12>
 8023d72:	2000      	movs	r0, #0
 8023d74:	e007      	b.n	8023d86 <__sfputs_r+0x22>
 8023d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023d7a:	463a      	mov	r2, r7
 8023d7c:	4630      	mov	r0, r6
 8023d7e:	f7ff ffda 	bl	8023d36 <__sfputc_r>
 8023d82:	1c43      	adds	r3, r0, #1
 8023d84:	d1f3      	bne.n	8023d6e <__sfputs_r+0xa>
 8023d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023d88 <_vfiprintf_r>:
 8023d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d8c:	460d      	mov	r5, r1
 8023d8e:	b09d      	sub	sp, #116	@ 0x74
 8023d90:	4614      	mov	r4, r2
 8023d92:	4698      	mov	r8, r3
 8023d94:	4606      	mov	r6, r0
 8023d96:	b118      	cbz	r0, 8023da0 <_vfiprintf_r+0x18>
 8023d98:	6a03      	ldr	r3, [r0, #32]
 8023d9a:	b90b      	cbnz	r3, 8023da0 <_vfiprintf_r+0x18>
 8023d9c:	f7fe f976 	bl	802208c <__sinit>
 8023da0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023da2:	07d9      	lsls	r1, r3, #31
 8023da4:	d405      	bmi.n	8023db2 <_vfiprintf_r+0x2a>
 8023da6:	89ab      	ldrh	r3, [r5, #12]
 8023da8:	059a      	lsls	r2, r3, #22
 8023daa:	d402      	bmi.n	8023db2 <_vfiprintf_r+0x2a>
 8023dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023dae:	f7fe fada 	bl	8022366 <__retarget_lock_acquire_recursive>
 8023db2:	89ab      	ldrh	r3, [r5, #12]
 8023db4:	071b      	lsls	r3, r3, #28
 8023db6:	d501      	bpl.n	8023dbc <_vfiprintf_r+0x34>
 8023db8:	692b      	ldr	r3, [r5, #16]
 8023dba:	b99b      	cbnz	r3, 8023de4 <_vfiprintf_r+0x5c>
 8023dbc:	4629      	mov	r1, r5
 8023dbe:	4630      	mov	r0, r6
 8023dc0:	f000 f938 	bl	8024034 <__swsetup_r>
 8023dc4:	b170      	cbz	r0, 8023de4 <_vfiprintf_r+0x5c>
 8023dc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023dc8:	07dc      	lsls	r4, r3, #31
 8023dca:	d504      	bpl.n	8023dd6 <_vfiprintf_r+0x4e>
 8023dcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023dd0:	b01d      	add	sp, #116	@ 0x74
 8023dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dd6:	89ab      	ldrh	r3, [r5, #12]
 8023dd8:	0598      	lsls	r0, r3, #22
 8023dda:	d4f7      	bmi.n	8023dcc <_vfiprintf_r+0x44>
 8023ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023dde:	f7fe fac3 	bl	8022368 <__retarget_lock_release_recursive>
 8023de2:	e7f3      	b.n	8023dcc <_vfiprintf_r+0x44>
 8023de4:	2300      	movs	r3, #0
 8023de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8023de8:	2320      	movs	r3, #32
 8023dea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8023df2:	2330      	movs	r3, #48	@ 0x30
 8023df4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023fa4 <_vfiprintf_r+0x21c>
 8023df8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023dfc:	f04f 0901 	mov.w	r9, #1
 8023e00:	4623      	mov	r3, r4
 8023e02:	469a      	mov	sl, r3
 8023e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023e08:	b10a      	cbz	r2, 8023e0e <_vfiprintf_r+0x86>
 8023e0a:	2a25      	cmp	r2, #37	@ 0x25
 8023e0c:	d1f9      	bne.n	8023e02 <_vfiprintf_r+0x7a>
 8023e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8023e12:	d00b      	beq.n	8023e2c <_vfiprintf_r+0xa4>
 8023e14:	465b      	mov	r3, fp
 8023e16:	4622      	mov	r2, r4
 8023e18:	4629      	mov	r1, r5
 8023e1a:	4630      	mov	r0, r6
 8023e1c:	f7ff ffa2 	bl	8023d64 <__sfputs_r>
 8023e20:	3001      	adds	r0, #1
 8023e22:	f000 80a7 	beq.w	8023f74 <_vfiprintf_r+0x1ec>
 8023e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023e28:	445a      	add	r2, fp
 8023e2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	f000 809f 	beq.w	8023f74 <_vfiprintf_r+0x1ec>
 8023e36:	2300      	movs	r3, #0
 8023e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8023e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023e40:	f10a 0a01 	add.w	sl, sl, #1
 8023e44:	9304      	str	r3, [sp, #16]
 8023e46:	9307      	str	r3, [sp, #28]
 8023e48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023e4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8023e4e:	4654      	mov	r4, sl
 8023e50:	2205      	movs	r2, #5
 8023e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023e56:	4853      	ldr	r0, [pc, #332]	@ (8023fa4 <_vfiprintf_r+0x21c>)
 8023e58:	f7dc f9ba 	bl	80001d0 <memchr>
 8023e5c:	9a04      	ldr	r2, [sp, #16]
 8023e5e:	b9d8      	cbnz	r0, 8023e98 <_vfiprintf_r+0x110>
 8023e60:	06d1      	lsls	r1, r2, #27
 8023e62:	bf44      	itt	mi
 8023e64:	2320      	movmi	r3, #32
 8023e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023e6a:	0713      	lsls	r3, r2, #28
 8023e6c:	bf44      	itt	mi
 8023e6e:	232b      	movmi	r3, #43	@ 0x2b
 8023e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023e74:	f89a 3000 	ldrb.w	r3, [sl]
 8023e78:	2b2a      	cmp	r3, #42	@ 0x2a
 8023e7a:	d015      	beq.n	8023ea8 <_vfiprintf_r+0x120>
 8023e7c:	9a07      	ldr	r2, [sp, #28]
 8023e7e:	4654      	mov	r4, sl
 8023e80:	2000      	movs	r0, #0
 8023e82:	f04f 0c0a 	mov.w	ip, #10
 8023e86:	4621      	mov	r1, r4
 8023e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023e8c:	3b30      	subs	r3, #48	@ 0x30
 8023e8e:	2b09      	cmp	r3, #9
 8023e90:	d94b      	bls.n	8023f2a <_vfiprintf_r+0x1a2>
 8023e92:	b1b0      	cbz	r0, 8023ec2 <_vfiprintf_r+0x13a>
 8023e94:	9207      	str	r2, [sp, #28]
 8023e96:	e014      	b.n	8023ec2 <_vfiprintf_r+0x13a>
 8023e98:	eba0 0308 	sub.w	r3, r0, r8
 8023e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8023ea0:	4313      	orrs	r3, r2
 8023ea2:	9304      	str	r3, [sp, #16]
 8023ea4:	46a2      	mov	sl, r4
 8023ea6:	e7d2      	b.n	8023e4e <_vfiprintf_r+0xc6>
 8023ea8:	9b03      	ldr	r3, [sp, #12]
 8023eaa:	1d19      	adds	r1, r3, #4
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	9103      	str	r1, [sp, #12]
 8023eb0:	2b00      	cmp	r3, #0
 8023eb2:	bfbb      	ittet	lt
 8023eb4:	425b      	neglt	r3, r3
 8023eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8023eba:	9307      	strge	r3, [sp, #28]
 8023ebc:	9307      	strlt	r3, [sp, #28]
 8023ebe:	bfb8      	it	lt
 8023ec0:	9204      	strlt	r2, [sp, #16]
 8023ec2:	7823      	ldrb	r3, [r4, #0]
 8023ec4:	2b2e      	cmp	r3, #46	@ 0x2e
 8023ec6:	d10a      	bne.n	8023ede <_vfiprintf_r+0x156>
 8023ec8:	7863      	ldrb	r3, [r4, #1]
 8023eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8023ecc:	d132      	bne.n	8023f34 <_vfiprintf_r+0x1ac>
 8023ece:	9b03      	ldr	r3, [sp, #12]
 8023ed0:	1d1a      	adds	r2, r3, #4
 8023ed2:	681b      	ldr	r3, [r3, #0]
 8023ed4:	9203      	str	r2, [sp, #12]
 8023ed6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023eda:	3402      	adds	r4, #2
 8023edc:	9305      	str	r3, [sp, #20]
 8023ede:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023fb4 <_vfiprintf_r+0x22c>
 8023ee2:	7821      	ldrb	r1, [r4, #0]
 8023ee4:	2203      	movs	r2, #3
 8023ee6:	4650      	mov	r0, sl
 8023ee8:	f7dc f972 	bl	80001d0 <memchr>
 8023eec:	b138      	cbz	r0, 8023efe <_vfiprintf_r+0x176>
 8023eee:	9b04      	ldr	r3, [sp, #16]
 8023ef0:	eba0 000a 	sub.w	r0, r0, sl
 8023ef4:	2240      	movs	r2, #64	@ 0x40
 8023ef6:	4082      	lsls	r2, r0
 8023ef8:	4313      	orrs	r3, r2
 8023efa:	3401      	adds	r4, #1
 8023efc:	9304      	str	r3, [sp, #16]
 8023efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f02:	4829      	ldr	r0, [pc, #164]	@ (8023fa8 <_vfiprintf_r+0x220>)
 8023f04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023f08:	2206      	movs	r2, #6
 8023f0a:	f7dc f961 	bl	80001d0 <memchr>
 8023f0e:	2800      	cmp	r0, #0
 8023f10:	d03f      	beq.n	8023f92 <_vfiprintf_r+0x20a>
 8023f12:	4b26      	ldr	r3, [pc, #152]	@ (8023fac <_vfiprintf_r+0x224>)
 8023f14:	bb1b      	cbnz	r3, 8023f5e <_vfiprintf_r+0x1d6>
 8023f16:	9b03      	ldr	r3, [sp, #12]
 8023f18:	3307      	adds	r3, #7
 8023f1a:	f023 0307 	bic.w	r3, r3, #7
 8023f1e:	3308      	adds	r3, #8
 8023f20:	9303      	str	r3, [sp, #12]
 8023f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023f24:	443b      	add	r3, r7
 8023f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f28:	e76a      	b.n	8023e00 <_vfiprintf_r+0x78>
 8023f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8023f2e:	460c      	mov	r4, r1
 8023f30:	2001      	movs	r0, #1
 8023f32:	e7a8      	b.n	8023e86 <_vfiprintf_r+0xfe>
 8023f34:	2300      	movs	r3, #0
 8023f36:	3401      	adds	r4, #1
 8023f38:	9305      	str	r3, [sp, #20]
 8023f3a:	4619      	mov	r1, r3
 8023f3c:	f04f 0c0a 	mov.w	ip, #10
 8023f40:	4620      	mov	r0, r4
 8023f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023f46:	3a30      	subs	r2, #48	@ 0x30
 8023f48:	2a09      	cmp	r2, #9
 8023f4a:	d903      	bls.n	8023f54 <_vfiprintf_r+0x1cc>
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d0c6      	beq.n	8023ede <_vfiprintf_r+0x156>
 8023f50:	9105      	str	r1, [sp, #20]
 8023f52:	e7c4      	b.n	8023ede <_vfiprintf_r+0x156>
 8023f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8023f58:	4604      	mov	r4, r0
 8023f5a:	2301      	movs	r3, #1
 8023f5c:	e7f0      	b.n	8023f40 <_vfiprintf_r+0x1b8>
 8023f5e:	ab03      	add	r3, sp, #12
 8023f60:	9300      	str	r3, [sp, #0]
 8023f62:	462a      	mov	r2, r5
 8023f64:	4b12      	ldr	r3, [pc, #72]	@ (8023fb0 <_vfiprintf_r+0x228>)
 8023f66:	a904      	add	r1, sp, #16
 8023f68:	4630      	mov	r0, r6
 8023f6a:	f7fd fc4b 	bl	8021804 <_printf_float>
 8023f6e:	4607      	mov	r7, r0
 8023f70:	1c78      	adds	r0, r7, #1
 8023f72:	d1d6      	bne.n	8023f22 <_vfiprintf_r+0x19a>
 8023f74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023f76:	07d9      	lsls	r1, r3, #31
 8023f78:	d405      	bmi.n	8023f86 <_vfiprintf_r+0x1fe>
 8023f7a:	89ab      	ldrh	r3, [r5, #12]
 8023f7c:	059a      	lsls	r2, r3, #22
 8023f7e:	d402      	bmi.n	8023f86 <_vfiprintf_r+0x1fe>
 8023f80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023f82:	f7fe f9f1 	bl	8022368 <__retarget_lock_release_recursive>
 8023f86:	89ab      	ldrh	r3, [r5, #12]
 8023f88:	065b      	lsls	r3, r3, #25
 8023f8a:	f53f af1f 	bmi.w	8023dcc <_vfiprintf_r+0x44>
 8023f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023f90:	e71e      	b.n	8023dd0 <_vfiprintf_r+0x48>
 8023f92:	ab03      	add	r3, sp, #12
 8023f94:	9300      	str	r3, [sp, #0]
 8023f96:	462a      	mov	r2, r5
 8023f98:	4b05      	ldr	r3, [pc, #20]	@ (8023fb0 <_vfiprintf_r+0x228>)
 8023f9a:	a904      	add	r1, sp, #16
 8023f9c:	4630      	mov	r0, r6
 8023f9e:	f7fd fec9 	bl	8021d34 <_printf_i>
 8023fa2:	e7e4      	b.n	8023f6e <_vfiprintf_r+0x1e6>
 8023fa4:	080257b8 	.word	0x080257b8
 8023fa8:	080257c2 	.word	0x080257c2
 8023fac:	08021805 	.word	0x08021805
 8023fb0:	08023d65 	.word	0x08023d65
 8023fb4:	080257be 	.word	0x080257be

08023fb8 <__swbuf_r>:
 8023fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023fba:	460e      	mov	r6, r1
 8023fbc:	4614      	mov	r4, r2
 8023fbe:	4605      	mov	r5, r0
 8023fc0:	b118      	cbz	r0, 8023fca <__swbuf_r+0x12>
 8023fc2:	6a03      	ldr	r3, [r0, #32]
 8023fc4:	b90b      	cbnz	r3, 8023fca <__swbuf_r+0x12>
 8023fc6:	f7fe f861 	bl	802208c <__sinit>
 8023fca:	69a3      	ldr	r3, [r4, #24]
 8023fcc:	60a3      	str	r3, [r4, #8]
 8023fce:	89a3      	ldrh	r3, [r4, #12]
 8023fd0:	071a      	lsls	r2, r3, #28
 8023fd2:	d501      	bpl.n	8023fd8 <__swbuf_r+0x20>
 8023fd4:	6923      	ldr	r3, [r4, #16]
 8023fd6:	b943      	cbnz	r3, 8023fea <__swbuf_r+0x32>
 8023fd8:	4621      	mov	r1, r4
 8023fda:	4628      	mov	r0, r5
 8023fdc:	f000 f82a 	bl	8024034 <__swsetup_r>
 8023fe0:	b118      	cbz	r0, 8023fea <__swbuf_r+0x32>
 8023fe2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8023fe6:	4638      	mov	r0, r7
 8023fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023fea:	6823      	ldr	r3, [r4, #0]
 8023fec:	6922      	ldr	r2, [r4, #16]
 8023fee:	1a98      	subs	r0, r3, r2
 8023ff0:	6963      	ldr	r3, [r4, #20]
 8023ff2:	b2f6      	uxtb	r6, r6
 8023ff4:	4283      	cmp	r3, r0
 8023ff6:	4637      	mov	r7, r6
 8023ff8:	dc05      	bgt.n	8024006 <__swbuf_r+0x4e>
 8023ffa:	4621      	mov	r1, r4
 8023ffc:	4628      	mov	r0, r5
 8023ffe:	f7ff fdb7 	bl	8023b70 <_fflush_r>
 8024002:	2800      	cmp	r0, #0
 8024004:	d1ed      	bne.n	8023fe2 <__swbuf_r+0x2a>
 8024006:	68a3      	ldr	r3, [r4, #8]
 8024008:	3b01      	subs	r3, #1
 802400a:	60a3      	str	r3, [r4, #8]
 802400c:	6823      	ldr	r3, [r4, #0]
 802400e:	1c5a      	adds	r2, r3, #1
 8024010:	6022      	str	r2, [r4, #0]
 8024012:	701e      	strb	r6, [r3, #0]
 8024014:	6962      	ldr	r2, [r4, #20]
 8024016:	1c43      	adds	r3, r0, #1
 8024018:	429a      	cmp	r2, r3
 802401a:	d004      	beq.n	8024026 <__swbuf_r+0x6e>
 802401c:	89a3      	ldrh	r3, [r4, #12]
 802401e:	07db      	lsls	r3, r3, #31
 8024020:	d5e1      	bpl.n	8023fe6 <__swbuf_r+0x2e>
 8024022:	2e0a      	cmp	r6, #10
 8024024:	d1df      	bne.n	8023fe6 <__swbuf_r+0x2e>
 8024026:	4621      	mov	r1, r4
 8024028:	4628      	mov	r0, r5
 802402a:	f7ff fda1 	bl	8023b70 <_fflush_r>
 802402e:	2800      	cmp	r0, #0
 8024030:	d0d9      	beq.n	8023fe6 <__swbuf_r+0x2e>
 8024032:	e7d6      	b.n	8023fe2 <__swbuf_r+0x2a>

08024034 <__swsetup_r>:
 8024034:	b538      	push	{r3, r4, r5, lr}
 8024036:	4b29      	ldr	r3, [pc, #164]	@ (80240dc <__swsetup_r+0xa8>)
 8024038:	4605      	mov	r5, r0
 802403a:	6818      	ldr	r0, [r3, #0]
 802403c:	460c      	mov	r4, r1
 802403e:	b118      	cbz	r0, 8024048 <__swsetup_r+0x14>
 8024040:	6a03      	ldr	r3, [r0, #32]
 8024042:	b90b      	cbnz	r3, 8024048 <__swsetup_r+0x14>
 8024044:	f7fe f822 	bl	802208c <__sinit>
 8024048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802404c:	0719      	lsls	r1, r3, #28
 802404e:	d422      	bmi.n	8024096 <__swsetup_r+0x62>
 8024050:	06da      	lsls	r2, r3, #27
 8024052:	d407      	bmi.n	8024064 <__swsetup_r+0x30>
 8024054:	2209      	movs	r2, #9
 8024056:	602a      	str	r2, [r5, #0]
 8024058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802405c:	81a3      	strh	r3, [r4, #12]
 802405e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024062:	e033      	b.n	80240cc <__swsetup_r+0x98>
 8024064:	0758      	lsls	r0, r3, #29
 8024066:	d512      	bpl.n	802408e <__swsetup_r+0x5a>
 8024068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802406a:	b141      	cbz	r1, 802407e <__swsetup_r+0x4a>
 802406c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024070:	4299      	cmp	r1, r3
 8024072:	d002      	beq.n	802407a <__swsetup_r+0x46>
 8024074:	4628      	mov	r0, r5
 8024076:	f7fe ffd3 	bl	8023020 <_free_r>
 802407a:	2300      	movs	r3, #0
 802407c:	6363      	str	r3, [r4, #52]	@ 0x34
 802407e:	89a3      	ldrh	r3, [r4, #12]
 8024080:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024084:	81a3      	strh	r3, [r4, #12]
 8024086:	2300      	movs	r3, #0
 8024088:	6063      	str	r3, [r4, #4]
 802408a:	6923      	ldr	r3, [r4, #16]
 802408c:	6023      	str	r3, [r4, #0]
 802408e:	89a3      	ldrh	r3, [r4, #12]
 8024090:	f043 0308 	orr.w	r3, r3, #8
 8024094:	81a3      	strh	r3, [r4, #12]
 8024096:	6923      	ldr	r3, [r4, #16]
 8024098:	b94b      	cbnz	r3, 80240ae <__swsetup_r+0x7a>
 802409a:	89a3      	ldrh	r3, [r4, #12]
 802409c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80240a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80240a4:	d003      	beq.n	80240ae <__swsetup_r+0x7a>
 80240a6:	4621      	mov	r1, r4
 80240a8:	4628      	mov	r0, r5
 80240aa:	f000 f883 	bl	80241b4 <__smakebuf_r>
 80240ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80240b2:	f013 0201 	ands.w	r2, r3, #1
 80240b6:	d00a      	beq.n	80240ce <__swsetup_r+0x9a>
 80240b8:	2200      	movs	r2, #0
 80240ba:	60a2      	str	r2, [r4, #8]
 80240bc:	6962      	ldr	r2, [r4, #20]
 80240be:	4252      	negs	r2, r2
 80240c0:	61a2      	str	r2, [r4, #24]
 80240c2:	6922      	ldr	r2, [r4, #16]
 80240c4:	b942      	cbnz	r2, 80240d8 <__swsetup_r+0xa4>
 80240c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80240ca:	d1c5      	bne.n	8024058 <__swsetup_r+0x24>
 80240cc:	bd38      	pop	{r3, r4, r5, pc}
 80240ce:	0799      	lsls	r1, r3, #30
 80240d0:	bf58      	it	pl
 80240d2:	6962      	ldrpl	r2, [r4, #20]
 80240d4:	60a2      	str	r2, [r4, #8]
 80240d6:	e7f4      	b.n	80240c2 <__swsetup_r+0x8e>
 80240d8:	2000      	movs	r0, #0
 80240da:	e7f7      	b.n	80240cc <__swsetup_r+0x98>
 80240dc:	200003e4 	.word	0x200003e4

080240e0 <_raise_r>:
 80240e0:	291f      	cmp	r1, #31
 80240e2:	b538      	push	{r3, r4, r5, lr}
 80240e4:	4605      	mov	r5, r0
 80240e6:	460c      	mov	r4, r1
 80240e8:	d904      	bls.n	80240f4 <_raise_r+0x14>
 80240ea:	2316      	movs	r3, #22
 80240ec:	6003      	str	r3, [r0, #0]
 80240ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80240f2:	bd38      	pop	{r3, r4, r5, pc}
 80240f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80240f6:	b112      	cbz	r2, 80240fe <_raise_r+0x1e>
 80240f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80240fc:	b94b      	cbnz	r3, 8024112 <_raise_r+0x32>
 80240fe:	4628      	mov	r0, r5
 8024100:	f000 f830 	bl	8024164 <_getpid_r>
 8024104:	4622      	mov	r2, r4
 8024106:	4601      	mov	r1, r0
 8024108:	4628      	mov	r0, r5
 802410a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802410e:	f000 b817 	b.w	8024140 <_kill_r>
 8024112:	2b01      	cmp	r3, #1
 8024114:	d00a      	beq.n	802412c <_raise_r+0x4c>
 8024116:	1c59      	adds	r1, r3, #1
 8024118:	d103      	bne.n	8024122 <_raise_r+0x42>
 802411a:	2316      	movs	r3, #22
 802411c:	6003      	str	r3, [r0, #0]
 802411e:	2001      	movs	r0, #1
 8024120:	e7e7      	b.n	80240f2 <_raise_r+0x12>
 8024122:	2100      	movs	r1, #0
 8024124:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024128:	4620      	mov	r0, r4
 802412a:	4798      	blx	r3
 802412c:	2000      	movs	r0, #0
 802412e:	e7e0      	b.n	80240f2 <_raise_r+0x12>

08024130 <raise>:
 8024130:	4b02      	ldr	r3, [pc, #8]	@ (802413c <raise+0xc>)
 8024132:	4601      	mov	r1, r0
 8024134:	6818      	ldr	r0, [r3, #0]
 8024136:	f7ff bfd3 	b.w	80240e0 <_raise_r>
 802413a:	bf00      	nop
 802413c:	200003e4 	.word	0x200003e4

08024140 <_kill_r>:
 8024140:	b538      	push	{r3, r4, r5, lr}
 8024142:	4d07      	ldr	r5, [pc, #28]	@ (8024160 <_kill_r+0x20>)
 8024144:	2300      	movs	r3, #0
 8024146:	4604      	mov	r4, r0
 8024148:	4608      	mov	r0, r1
 802414a:	4611      	mov	r1, r2
 802414c:	602b      	str	r3, [r5, #0]
 802414e:	f7dd fc9d 	bl	8001a8c <_kill>
 8024152:	1c43      	adds	r3, r0, #1
 8024154:	d102      	bne.n	802415c <_kill_r+0x1c>
 8024156:	682b      	ldr	r3, [r5, #0]
 8024158:	b103      	cbz	r3, 802415c <_kill_r+0x1c>
 802415a:	6023      	str	r3, [r4, #0]
 802415c:	bd38      	pop	{r3, r4, r5, pc}
 802415e:	bf00      	nop
 8024160:	20008144 	.word	0x20008144

08024164 <_getpid_r>:
 8024164:	f7dd bc8a 	b.w	8001a7c <_getpid>

08024168 <__swhatbuf_r>:
 8024168:	b570      	push	{r4, r5, r6, lr}
 802416a:	460c      	mov	r4, r1
 802416c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024170:	2900      	cmp	r1, #0
 8024172:	b096      	sub	sp, #88	@ 0x58
 8024174:	4615      	mov	r5, r2
 8024176:	461e      	mov	r6, r3
 8024178:	da0d      	bge.n	8024196 <__swhatbuf_r+0x2e>
 802417a:	89a3      	ldrh	r3, [r4, #12]
 802417c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024180:	f04f 0100 	mov.w	r1, #0
 8024184:	bf14      	ite	ne
 8024186:	2340      	movne	r3, #64	@ 0x40
 8024188:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802418c:	2000      	movs	r0, #0
 802418e:	6031      	str	r1, [r6, #0]
 8024190:	602b      	str	r3, [r5, #0]
 8024192:	b016      	add	sp, #88	@ 0x58
 8024194:	bd70      	pop	{r4, r5, r6, pc}
 8024196:	466a      	mov	r2, sp
 8024198:	f000 f848 	bl	802422c <_fstat_r>
 802419c:	2800      	cmp	r0, #0
 802419e:	dbec      	blt.n	802417a <__swhatbuf_r+0x12>
 80241a0:	9901      	ldr	r1, [sp, #4]
 80241a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80241a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80241aa:	4259      	negs	r1, r3
 80241ac:	4159      	adcs	r1, r3
 80241ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80241b2:	e7eb      	b.n	802418c <__swhatbuf_r+0x24>

080241b4 <__smakebuf_r>:
 80241b4:	898b      	ldrh	r3, [r1, #12]
 80241b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80241b8:	079d      	lsls	r5, r3, #30
 80241ba:	4606      	mov	r6, r0
 80241bc:	460c      	mov	r4, r1
 80241be:	d507      	bpl.n	80241d0 <__smakebuf_r+0x1c>
 80241c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80241c4:	6023      	str	r3, [r4, #0]
 80241c6:	6123      	str	r3, [r4, #16]
 80241c8:	2301      	movs	r3, #1
 80241ca:	6163      	str	r3, [r4, #20]
 80241cc:	b003      	add	sp, #12
 80241ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241d0:	ab01      	add	r3, sp, #4
 80241d2:	466a      	mov	r2, sp
 80241d4:	f7ff ffc8 	bl	8024168 <__swhatbuf_r>
 80241d8:	9f00      	ldr	r7, [sp, #0]
 80241da:	4605      	mov	r5, r0
 80241dc:	4639      	mov	r1, r7
 80241de:	4630      	mov	r0, r6
 80241e0:	f7fd f9e4 	bl	80215ac <_malloc_r>
 80241e4:	b948      	cbnz	r0, 80241fa <__smakebuf_r+0x46>
 80241e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80241ea:	059a      	lsls	r2, r3, #22
 80241ec:	d4ee      	bmi.n	80241cc <__smakebuf_r+0x18>
 80241ee:	f023 0303 	bic.w	r3, r3, #3
 80241f2:	f043 0302 	orr.w	r3, r3, #2
 80241f6:	81a3      	strh	r3, [r4, #12]
 80241f8:	e7e2      	b.n	80241c0 <__smakebuf_r+0xc>
 80241fa:	89a3      	ldrh	r3, [r4, #12]
 80241fc:	6020      	str	r0, [r4, #0]
 80241fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024202:	81a3      	strh	r3, [r4, #12]
 8024204:	9b01      	ldr	r3, [sp, #4]
 8024206:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802420a:	b15b      	cbz	r3, 8024224 <__smakebuf_r+0x70>
 802420c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024210:	4630      	mov	r0, r6
 8024212:	f000 f81d 	bl	8024250 <_isatty_r>
 8024216:	b128      	cbz	r0, 8024224 <__smakebuf_r+0x70>
 8024218:	89a3      	ldrh	r3, [r4, #12]
 802421a:	f023 0303 	bic.w	r3, r3, #3
 802421e:	f043 0301 	orr.w	r3, r3, #1
 8024222:	81a3      	strh	r3, [r4, #12]
 8024224:	89a3      	ldrh	r3, [r4, #12]
 8024226:	431d      	orrs	r5, r3
 8024228:	81a5      	strh	r5, [r4, #12]
 802422a:	e7cf      	b.n	80241cc <__smakebuf_r+0x18>

0802422c <_fstat_r>:
 802422c:	b538      	push	{r3, r4, r5, lr}
 802422e:	4d07      	ldr	r5, [pc, #28]	@ (802424c <_fstat_r+0x20>)
 8024230:	2300      	movs	r3, #0
 8024232:	4604      	mov	r4, r0
 8024234:	4608      	mov	r0, r1
 8024236:	4611      	mov	r1, r2
 8024238:	602b      	str	r3, [r5, #0]
 802423a:	f7dd fc87 	bl	8001b4c <_fstat>
 802423e:	1c43      	adds	r3, r0, #1
 8024240:	d102      	bne.n	8024248 <_fstat_r+0x1c>
 8024242:	682b      	ldr	r3, [r5, #0]
 8024244:	b103      	cbz	r3, 8024248 <_fstat_r+0x1c>
 8024246:	6023      	str	r3, [r4, #0]
 8024248:	bd38      	pop	{r3, r4, r5, pc}
 802424a:	bf00      	nop
 802424c:	20008144 	.word	0x20008144

08024250 <_isatty_r>:
 8024250:	b538      	push	{r3, r4, r5, lr}
 8024252:	4d06      	ldr	r5, [pc, #24]	@ (802426c <_isatty_r+0x1c>)
 8024254:	2300      	movs	r3, #0
 8024256:	4604      	mov	r4, r0
 8024258:	4608      	mov	r0, r1
 802425a:	602b      	str	r3, [r5, #0]
 802425c:	f7dd fc86 	bl	8001b6c <_isatty>
 8024260:	1c43      	adds	r3, r0, #1
 8024262:	d102      	bne.n	802426a <_isatty_r+0x1a>
 8024264:	682b      	ldr	r3, [r5, #0]
 8024266:	b103      	cbz	r3, 802426a <_isatty_r+0x1a>
 8024268:	6023      	str	r3, [r4, #0]
 802426a:	bd38      	pop	{r3, r4, r5, pc}
 802426c:	20008144 	.word	0x20008144

08024270 <ceil>:
 8024270:	ec51 0b10 	vmov	r0, r1, d0
 8024274:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802427c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8024280:	2e13      	cmp	r6, #19
 8024282:	460c      	mov	r4, r1
 8024284:	4605      	mov	r5, r0
 8024286:	4680      	mov	r8, r0
 8024288:	dc2e      	bgt.n	80242e8 <ceil+0x78>
 802428a:	2e00      	cmp	r6, #0
 802428c:	da11      	bge.n	80242b2 <ceil+0x42>
 802428e:	a332      	add	r3, pc, #200	@ (adr r3, 8024358 <ceil+0xe8>)
 8024290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024294:	f7db fffa 	bl	800028c <__adddf3>
 8024298:	2200      	movs	r2, #0
 802429a:	2300      	movs	r3, #0
 802429c:	f7dc fc3c 	bl	8000b18 <__aeabi_dcmpgt>
 80242a0:	b120      	cbz	r0, 80242ac <ceil+0x3c>
 80242a2:	2c00      	cmp	r4, #0
 80242a4:	db4f      	blt.n	8024346 <ceil+0xd6>
 80242a6:	4325      	orrs	r5, r4
 80242a8:	d151      	bne.n	802434e <ceil+0xde>
 80242aa:	462c      	mov	r4, r5
 80242ac:	4621      	mov	r1, r4
 80242ae:	4628      	mov	r0, r5
 80242b0:	e023      	b.n	80242fa <ceil+0x8a>
 80242b2:	4f2b      	ldr	r7, [pc, #172]	@ (8024360 <ceil+0xf0>)
 80242b4:	4137      	asrs	r7, r6
 80242b6:	ea01 0307 	and.w	r3, r1, r7
 80242ba:	4303      	orrs	r3, r0
 80242bc:	d01d      	beq.n	80242fa <ceil+0x8a>
 80242be:	a326      	add	r3, pc, #152	@ (adr r3, 8024358 <ceil+0xe8>)
 80242c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242c4:	f7db ffe2 	bl	800028c <__adddf3>
 80242c8:	2200      	movs	r2, #0
 80242ca:	2300      	movs	r3, #0
 80242cc:	f7dc fc24 	bl	8000b18 <__aeabi_dcmpgt>
 80242d0:	2800      	cmp	r0, #0
 80242d2:	d0eb      	beq.n	80242ac <ceil+0x3c>
 80242d4:	2c00      	cmp	r4, #0
 80242d6:	bfc2      	ittt	gt
 80242d8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80242dc:	4133      	asrgt	r3, r6
 80242de:	18e4      	addgt	r4, r4, r3
 80242e0:	ea24 0407 	bic.w	r4, r4, r7
 80242e4:	2500      	movs	r5, #0
 80242e6:	e7e1      	b.n	80242ac <ceil+0x3c>
 80242e8:	2e33      	cmp	r6, #51	@ 0x33
 80242ea:	dd0a      	ble.n	8024302 <ceil+0x92>
 80242ec:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80242f0:	d103      	bne.n	80242fa <ceil+0x8a>
 80242f2:	4602      	mov	r2, r0
 80242f4:	460b      	mov	r3, r1
 80242f6:	f7db ffc9 	bl	800028c <__adddf3>
 80242fa:	ec41 0b10 	vmov	d0, r0, r1
 80242fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024302:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8024306:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802430a:	40df      	lsrs	r7, r3
 802430c:	4238      	tst	r0, r7
 802430e:	d0f4      	beq.n	80242fa <ceil+0x8a>
 8024310:	a311      	add	r3, pc, #68	@ (adr r3, 8024358 <ceil+0xe8>)
 8024312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024316:	f7db ffb9 	bl	800028c <__adddf3>
 802431a:	2200      	movs	r2, #0
 802431c:	2300      	movs	r3, #0
 802431e:	f7dc fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 8024322:	2800      	cmp	r0, #0
 8024324:	d0c2      	beq.n	80242ac <ceil+0x3c>
 8024326:	2c00      	cmp	r4, #0
 8024328:	dd0a      	ble.n	8024340 <ceil+0xd0>
 802432a:	2e14      	cmp	r6, #20
 802432c:	d101      	bne.n	8024332 <ceil+0xc2>
 802432e:	3401      	adds	r4, #1
 8024330:	e006      	b.n	8024340 <ceil+0xd0>
 8024332:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8024336:	2301      	movs	r3, #1
 8024338:	40b3      	lsls	r3, r6
 802433a:	441d      	add	r5, r3
 802433c:	45a8      	cmp	r8, r5
 802433e:	d8f6      	bhi.n	802432e <ceil+0xbe>
 8024340:	ea25 0507 	bic.w	r5, r5, r7
 8024344:	e7b2      	b.n	80242ac <ceil+0x3c>
 8024346:	2500      	movs	r5, #0
 8024348:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 802434c:	e7ae      	b.n	80242ac <ceil+0x3c>
 802434e:	4c05      	ldr	r4, [pc, #20]	@ (8024364 <ceil+0xf4>)
 8024350:	2500      	movs	r5, #0
 8024352:	e7ab      	b.n	80242ac <ceil+0x3c>
 8024354:	f3af 8000 	nop.w
 8024358:	8800759c 	.word	0x8800759c
 802435c:	7e37e43c 	.word	0x7e37e43c
 8024360:	000fffff 	.word	0x000fffff
 8024364:	3ff00000 	.word	0x3ff00000

08024368 <floor>:
 8024368:	ec51 0b10 	vmov	r0, r1, d0
 802436c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024374:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8024378:	2e13      	cmp	r6, #19
 802437a:	460c      	mov	r4, r1
 802437c:	4605      	mov	r5, r0
 802437e:	4680      	mov	r8, r0
 8024380:	dc34      	bgt.n	80243ec <floor+0x84>
 8024382:	2e00      	cmp	r6, #0
 8024384:	da17      	bge.n	80243b6 <floor+0x4e>
 8024386:	a332      	add	r3, pc, #200	@ (adr r3, 8024450 <floor+0xe8>)
 8024388:	e9d3 2300 	ldrd	r2, r3, [r3]
 802438c:	f7db ff7e 	bl	800028c <__adddf3>
 8024390:	2200      	movs	r2, #0
 8024392:	2300      	movs	r3, #0
 8024394:	f7dc fbc0 	bl	8000b18 <__aeabi_dcmpgt>
 8024398:	b150      	cbz	r0, 80243b0 <floor+0x48>
 802439a:	2c00      	cmp	r4, #0
 802439c:	da55      	bge.n	802444a <floor+0xe2>
 802439e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80243a2:	432c      	orrs	r4, r5
 80243a4:	2500      	movs	r5, #0
 80243a6:	42ac      	cmp	r4, r5
 80243a8:	4c2b      	ldr	r4, [pc, #172]	@ (8024458 <floor+0xf0>)
 80243aa:	bf08      	it	eq
 80243ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80243b0:	4621      	mov	r1, r4
 80243b2:	4628      	mov	r0, r5
 80243b4:	e023      	b.n	80243fe <floor+0x96>
 80243b6:	4f29      	ldr	r7, [pc, #164]	@ (802445c <floor+0xf4>)
 80243b8:	4137      	asrs	r7, r6
 80243ba:	ea01 0307 	and.w	r3, r1, r7
 80243be:	4303      	orrs	r3, r0
 80243c0:	d01d      	beq.n	80243fe <floor+0x96>
 80243c2:	a323      	add	r3, pc, #140	@ (adr r3, 8024450 <floor+0xe8>)
 80243c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243c8:	f7db ff60 	bl	800028c <__adddf3>
 80243cc:	2200      	movs	r2, #0
 80243ce:	2300      	movs	r3, #0
 80243d0:	f7dc fba2 	bl	8000b18 <__aeabi_dcmpgt>
 80243d4:	2800      	cmp	r0, #0
 80243d6:	d0eb      	beq.n	80243b0 <floor+0x48>
 80243d8:	2c00      	cmp	r4, #0
 80243da:	bfbe      	ittt	lt
 80243dc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80243e0:	4133      	asrlt	r3, r6
 80243e2:	18e4      	addlt	r4, r4, r3
 80243e4:	ea24 0407 	bic.w	r4, r4, r7
 80243e8:	2500      	movs	r5, #0
 80243ea:	e7e1      	b.n	80243b0 <floor+0x48>
 80243ec:	2e33      	cmp	r6, #51	@ 0x33
 80243ee:	dd0a      	ble.n	8024406 <floor+0x9e>
 80243f0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80243f4:	d103      	bne.n	80243fe <floor+0x96>
 80243f6:	4602      	mov	r2, r0
 80243f8:	460b      	mov	r3, r1
 80243fa:	f7db ff47 	bl	800028c <__adddf3>
 80243fe:	ec41 0b10 	vmov	d0, r0, r1
 8024402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024406:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 802440a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 802440e:	40df      	lsrs	r7, r3
 8024410:	4207      	tst	r7, r0
 8024412:	d0f4      	beq.n	80243fe <floor+0x96>
 8024414:	a30e      	add	r3, pc, #56	@ (adr r3, 8024450 <floor+0xe8>)
 8024416:	e9d3 2300 	ldrd	r2, r3, [r3]
 802441a:	f7db ff37 	bl	800028c <__adddf3>
 802441e:	2200      	movs	r2, #0
 8024420:	2300      	movs	r3, #0
 8024422:	f7dc fb79 	bl	8000b18 <__aeabi_dcmpgt>
 8024426:	2800      	cmp	r0, #0
 8024428:	d0c2      	beq.n	80243b0 <floor+0x48>
 802442a:	2c00      	cmp	r4, #0
 802442c:	da0a      	bge.n	8024444 <floor+0xdc>
 802442e:	2e14      	cmp	r6, #20
 8024430:	d101      	bne.n	8024436 <floor+0xce>
 8024432:	3401      	adds	r4, #1
 8024434:	e006      	b.n	8024444 <floor+0xdc>
 8024436:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802443a:	2301      	movs	r3, #1
 802443c:	40b3      	lsls	r3, r6
 802443e:	441d      	add	r5, r3
 8024440:	4545      	cmp	r5, r8
 8024442:	d3f6      	bcc.n	8024432 <floor+0xca>
 8024444:	ea25 0507 	bic.w	r5, r5, r7
 8024448:	e7b2      	b.n	80243b0 <floor+0x48>
 802444a:	2500      	movs	r5, #0
 802444c:	462c      	mov	r4, r5
 802444e:	e7af      	b.n	80243b0 <floor+0x48>
 8024450:	8800759c 	.word	0x8800759c
 8024454:	7e37e43c 	.word	0x7e37e43c
 8024458:	bff00000 	.word	0xbff00000
 802445c:	000fffff 	.word	0x000fffff

08024460 <rint>:
 8024460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024462:	ec53 2b10 	vmov	r2, r3, d0
 8024466:	f3c3 500a 	ubfx	r0, r3, #20, #11
 802446a:	f2a0 35ff 	subw	r5, r0, #1023	@ 0x3ff
 802446e:	2d13      	cmp	r5, #19
 8024470:	461c      	mov	r4, r3
 8024472:	4611      	mov	r1, r2
 8024474:	ea4f 76d3 	mov.w	r6, r3, lsr #31
 8024478:	dc5b      	bgt.n	8024532 <rint+0xd2>
 802447a:	2d00      	cmp	r5, #0
 802447c:	da2f      	bge.n	80244de <rint+0x7e>
 802447e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8024482:	4310      	orrs	r0, r2
 8024484:	d027      	beq.n	80244d6 <rint+0x76>
 8024486:	f3c3 0513 	ubfx	r5, r3, #0, #20
 802448a:	4315      	orrs	r5, r2
 802448c:	426b      	negs	r3, r5
 802448e:	432b      	orrs	r3, r5
 8024490:	4610      	mov	r0, r2
 8024492:	0b1b      	lsrs	r3, r3, #12
 8024494:	0c62      	lsrs	r2, r4, #17
 8024496:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 802449a:	0452      	lsls	r2, r2, #17
 802449c:	ea43 0102 	orr.w	r1, r3, r2
 80244a0:	460b      	mov	r3, r1
 80244a2:	4933      	ldr	r1, [pc, #204]	@ (8024570 <rint+0x110>)
 80244a4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80244a8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80244ac:	4602      	mov	r2, r0
 80244ae:	4639      	mov	r1, r7
 80244b0:	4630      	mov	r0, r6
 80244b2:	f7db feeb 	bl	800028c <__adddf3>
 80244b6:	e9cd 0100 	strd	r0, r1, [sp]
 80244ba:	463b      	mov	r3, r7
 80244bc:	4632      	mov	r2, r6
 80244be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80244c2:	f7db fee1 	bl	8000288 <__aeabi_dsub>
 80244c6:	f004 4400 	and.w	r4, r4, #2147483648	@ 0x80000000
 80244ca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80244ce:	ea44 0703 	orr.w	r7, r4, r3
 80244d2:	4602      	mov	r2, r0
 80244d4:	463b      	mov	r3, r7
 80244d6:	ec43 2b10 	vmov	d0, r2, r3
 80244da:	b003      	add	sp, #12
 80244dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80244de:	4825      	ldr	r0, [pc, #148]	@ (8024574 <rint+0x114>)
 80244e0:	4128      	asrs	r0, r5
 80244e2:	ea00 0703 	and.w	r7, r0, r3
 80244e6:	4317      	orrs	r7, r2
 80244e8:	d0f5      	beq.n	80244d6 <rint+0x76>
 80244ea:	0843      	lsrs	r3, r0, #1
 80244ec:	ea04 0050 	and.w	r0, r4, r0, lsr #1
 80244f0:	4301      	orrs	r1, r0
 80244f2:	d00a      	beq.n	802450a <rint+0xaa>
 80244f4:	f1a5 0213 	sub.w	r2, r5, #19
 80244f8:	ea24 0303 	bic.w	r3, r4, r3
 80244fc:	4251      	negs	r1, r2
 80244fe:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 8024502:	4151      	adcs	r1, r2
 8024504:	412c      	asrs	r4, r5
 8024506:	07c9      	lsls	r1, r1, #31
 8024508:	431c      	orrs	r4, r3
 802450a:	460a      	mov	r2, r1
 802450c:	4918      	ldr	r1, [pc, #96]	@ (8024570 <rint+0x110>)
 802450e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8024512:	4623      	mov	r3, r4
 8024514:	e9d1 4500 	ldrd	r4, r5, [r1]
 8024518:	4620      	mov	r0, r4
 802451a:	4629      	mov	r1, r5
 802451c:	f7db feb6 	bl	800028c <__adddf3>
 8024520:	e9cd 0100 	strd	r0, r1, [sp]
 8024524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024528:	4622      	mov	r2, r4
 802452a:	462b      	mov	r3, r5
 802452c:	f7db feac 	bl	8000288 <__aeabi_dsub>
 8024530:	e008      	b.n	8024544 <rint+0xe4>
 8024532:	2d33      	cmp	r5, #51	@ 0x33
 8024534:	dd09      	ble.n	802454a <rint+0xea>
 8024536:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 802453a:	d1cc      	bne.n	80244d6 <rint+0x76>
 802453c:	4610      	mov	r0, r2
 802453e:	4619      	mov	r1, r3
 8024540:	f7db fea4 	bl	800028c <__adddf3>
 8024544:	4602      	mov	r2, r0
 8024546:	460b      	mov	r3, r1
 8024548:	e7c5      	b.n	80244d6 <rint+0x76>
 802454a:	f2a0 4513 	subw	r5, r0, #1043	@ 0x413
 802454e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024552:	40e8      	lsrs	r0, r5
 8024554:	4202      	tst	r2, r0
 8024556:	d0be      	beq.n	80244d6 <rint+0x76>
 8024558:	0843      	lsrs	r3, r0, #1
 802455a:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
 802455e:	bf1f      	itttt	ne
 8024560:	ea21 0303 	bicne.w	r3, r1, r3
 8024564:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 8024568:	4129      	asrne	r1, r5
 802456a:	4319      	orrne	r1, r3
 802456c:	e7cd      	b.n	802450a <rint+0xaa>
 802456e:	bf00      	nop
 8024570:	08025910 	.word	0x08025910
 8024574:	000fffff 	.word	0x000fffff

08024578 <_init>:
 8024578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802457a:	bf00      	nop
 802457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802457e:	bc08      	pop	{r3}
 8024580:	469e      	mov	lr, r3
 8024582:	4770      	bx	lr

08024584 <_fini>:
 8024584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024586:	bf00      	nop
 8024588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802458a:	bc08      	pop	{r3}
 802458c:	469e      	mov	lr, r3
 802458e:	4770      	bx	lr
